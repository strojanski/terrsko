
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00012e30  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001240  08013010  08013010  00023010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014250  08014250  0003045c  2**0
                  CONTENTS
  4 .ARM          00000008  08014250  08014250  00024250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014258  08014258  0003045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014258  08014258  00024258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801425c  0801425c  0002425c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000045c  20000000  08014260  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012ab4  2000045c  080146bc  0003045c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012f10  080146bc  00032f10  2**0
=======
  1 .text         00012c98  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001240  08012e78  08012e78  00022e78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080140b8  080140b8  0003144c  2**0
                  CONTENTS
  4 .ARM          00000008  080140b8  080140b8  000240b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080140c0  080140c0  0003144c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080140c0  080140c0  000240c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080140c4  080140c4  000240c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000144c  20000000  080140c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012ab4  2000144c  08015514  0003144c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013f00  08015514  00033f00  2**0
>>>>>>> render
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003144c  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 12 .debug_info   00055bfa  00000000  00000000  0003048c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009e83  00000000  00000000  00086086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003180  00000000  00000000  0008ff10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003c30  00000000  00000000  00093090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038d2c  00000000  00000000  00096cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005a0c7  00000000  00000000  000cf9ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001418ed  00000000  00000000  00129ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0026b3a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f00  00000000  00000000  0026b3f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0003a3a6  00000000  00000000  002752f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  002af698  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  002af6bc  2**0
=======
 12 .debug_info   00055e85  00000000  00000000  0003147c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009eef  00000000  00000000  00087301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000031d0  00000000  00000000  000911f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003ca8  00000000  00000000  000943c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039c05  00000000  00000000  00098068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005a39d  00000000  00000000  000d1c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00141af4  00000000  00000000  0012c00a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0026dafe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f94  00000000  00000000  0026db50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0003a5c7  00000000  00000000  00277ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  002b20ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  002b20d0  2**0
>>>>>>> render
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000144c 	.word	0x2000144c
 80001fc:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000200:	08012ff8 	.word	0x08012ff8
=======
 8000200:	08012e60 	.word	0x08012e60
>>>>>>> render

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000218:	20000460 	.word	0x20000460
 800021c:	08012ff8 	.word	0x08012ff8
=======
 8000218:	20001450 	.word	0x20001450
 800021c:	08012e60 	.word	0x08012e60
>>>>>>> render

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <action_reset>:
 * Each guysko's button action is immediatley reset to zero after being taken into consideration, so that is can be known in the
 * next frame if the action was made once again.
 */

void action_reset(uint8_t action_index) {
	if (action_index == 0) {
 8001048:	b918      	cbnz	r0, 8001052 <action_reset+0xa>
		act_up			=	false;
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <action_reset+0x78>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
 8001050:	4770      	bx	lr
	} else if (action_index == 1) {
 8001052:	2801      	cmp	r0, #1
 8001054:	d010      	beq.n	8001078 <action_reset+0x30>
		act_right		=	false;
	} else if (action_index == 2) {
 8001056:	2802      	cmp	r0, #2
 8001058:	d012      	beq.n	8001080 <action_reset+0x38>
		act_down		=	false;
	} else if (action_index == 3) {
 800105a:	2803      	cmp	r0, #3
 800105c:	d014      	beq.n	8001088 <action_reset+0x40>
		act_left		=	false;
	} else if (action_index == 4) {
 800105e:	2804      	cmp	r0, #4
 8001060:	d016      	beq.n	8001090 <action_reset+0x48>
		ok					=	false;
	} else if (action_index == 5) {
 8001062:	2805      	cmp	r0, #5
 8001064:	d018      	beq.n	8001098 <action_reset+0x50>
		esc					=	false;
	} else if (action_index == 6) {
 8001066:	2806      	cmp	r0, #6
 8001068:	d01a      	beq.n	80010a0 <action_reset+0x58>
		move_up			= false;
	} else if (action_index == 7) {
 800106a:	2807      	cmp	r0, #7
 800106c:	d01c      	beq.n	80010a8 <action_reset+0x60>
		move_right 	= false;
	} else if (action_index == 8) {
 800106e:	2808      	cmp	r0, #8
 8001070:	d01e      	beq.n	80010b0 <action_reset+0x68>
		move_down		= false;
	} else if (action_index == 9) {
 8001072:	2809      	cmp	r0, #9
 8001074:	d020      	beq.n	80010b8 <action_reset+0x70>
		move_left		= false;
	}
}
 8001076:	4770      	bx	lr
		act_right		=	false;
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <action_reset+0x7c>)
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
 800107e:	4770      	bx	lr
		act_down		=	false;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <action_reset+0x80>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
 8001086:	4770      	bx	lr
		act_left		=	false;
 8001088:	4b10      	ldr	r3, [pc, #64]	; (80010cc <action_reset+0x84>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
 800108e:	4770      	bx	lr
		ok					=	false;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <action_reset+0x88>)
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
 8001096:	4770      	bx	lr
		esc					=	false;
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <action_reset+0x8c>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
 800109e:	4770      	bx	lr
		move_up			= false;
 80010a0:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <action_reset+0x90>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	4770      	bx	lr
		move_right 	= false;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <action_reset+0x94>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
 80010ae:	4770      	bx	lr
		move_down		= false;
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <action_reset+0x98>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
 80010b6:	4770      	bx	lr
		move_left		= false;
 80010b8:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <action_reset+0x9c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
}
 80010be:	e7da      	b.n	8001076 <action_reset+0x2e>
 80010c0:	2000146b 	.word	0x2000146b
 80010c4:	2000146a 	.word	0x2000146a
 80010c8:	20001468 	.word	0x20001468
 80010cc:	20001469 	.word	0x20001469
 80010d0:	20001471 	.word	0x20001471
 80010d4:	2000146c 	.word	0x2000146c
 80010d8:	20001470 	.word	0x20001470
 80010dc:	2000146f 	.word	0x2000146f
 80010e0:	2000146d 	.word	0x2000146d
 80010e4:	2000146e 	.word	0x2000146e

080010e8 <action_set>:
/*
 * This funcion updates joystick input logicaly
 * the other buttons are set to be handled as interrupts
 */
void action_set(coord_t* joystick_raw) {
	if (joystick_raw->x > 2500) {
 80010e8:	6803      	ldr	r3, [r0, #0]
 80010ea:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80010ee:	4293      	cmp	r3, r2
 80010f0:	dd11      	ble.n	8001116 <action_set+0x2e>
		move_right 	= true;
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <action_set+0x58>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
		move_left		= false;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <action_set+0x5c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
	} else if (joystick_raw->x < 1000) {
		move_right 	= false;
		move_left		= true;
	}

	if (joystick_raw->y > 2500) {
 80010fe:	6843      	ldr	r3, [r0, #4]
 8001100:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001104:	4293      	cmp	r3, r2
 8001106:	dd10      	ble.n	800112a <action_set+0x42>
		move_up			= true;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <action_set+0x60>)
 800110a:	2201      	movs	r2, #1
 800110c:	701a      	strb	r2, [r3, #0]
		move_down		= false;
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <action_set+0x64>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
 8001114:	4770      	bx	lr
	} else if (joystick_raw->x < 1000) {
 8001116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800111a:	daf0      	bge.n	80010fe <action_set+0x16>
		move_right 	= false;
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <action_set+0x58>)
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
		move_left		= true;
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <action_set+0x5c>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
 8001128:	e7e9      	b.n	80010fe <action_set+0x16>
	} else if (joystick_raw->y < 1000) {
 800112a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800112e:	da05      	bge.n	800113c <action_set+0x54>
		move_up			= false;
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <action_set+0x60>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
		move_down		= true;
 8001136:	4b05      	ldr	r3, [pc, #20]	; (800114c <action_set+0x64>)
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
	}
}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	2000146f 	.word	0x2000146f
 8001144:	2000146e 	.word	0x2000146e
 8001148:	20001470 	.word	0x20001470
 800114c:	2000146d 	.word	0x2000146d

08001150 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc4;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001150:	b510      	push	{r4, lr}
 8001152:	b08c      	sub	sp, #48	; 0x30

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001154:	2400      	movs	r4, #0
 8001156:	9409      	str	r4, [sp, #36]	; 0x24
 8001158:	940a      	str	r4, [sp, #40]	; 0x28
 800115a:	940b      	str	r4, [sp, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 800115c:	2220      	movs	r2, #32
 800115e:	4621      	mov	r1, r4
 8001160:	a801      	add	r0, sp, #4
<<<<<<< HEAD
 8001162:	f00d fa39 	bl	800e5d8 <memset>
=======
 8001162:	f00d f96d 	bl	800e440 <memset>
>>>>>>> render

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001166:	4820      	ldr	r0, [pc, #128]	; (80011e8 <MX_ADC1_Init+0x98>)
 8001168:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800116c:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800116e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001172:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001174:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001176:	60c4      	str	r4, [r0, #12]
  hadc1.Init.GainCompensation = 0;
 8001178:	6104      	str	r4, [r0, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800117a:	6144      	str	r4, [r0, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800117c:	2304      	movs	r3, #4
 800117e:	6183      	str	r3, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001180:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001182:	7744      	strb	r4, [r0, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001184:	2301      	movs	r3, #1
 8001186:	6203      	str	r3, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001188:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800118c:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800118e:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001190:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001194:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001196:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
<<<<<<< HEAD
 800119a:	f004 fa07 	bl	80055ac <HAL_ADC_Init>
=======
 800119a:	f004 f973 	bl	8005484 <HAL_ADC_Init>
>>>>>>> render
 800119e:	b9c8      	cbnz	r0, 80011d4 <MX_ADC1_Init+0x84>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011a0:	2300      	movs	r3, #0
 80011a2:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011a4:	a909      	add	r1, sp, #36	; 0x24
 80011a6:	4810      	ldr	r0, [pc, #64]	; (80011e8 <MX_ADC1_Init+0x98>)
<<<<<<< HEAD
 80011a8:	f004 ff32 	bl	8006010 <HAL_ADCEx_MultiModeConfigChannel>
=======
 80011a8:	f004 fe9e 	bl	8005ee8 <HAL_ADCEx_MultiModeConfigChannel>
>>>>>>> render
 80011ac:	b9a8      	cbnz	r0, 80011da <MX_ADC1_Init+0x8a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <MX_ADC1_Init+0x9c>)
 80011b0:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011b2:	2306      	movs	r3, #6
 80011b4:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011b6:	2300      	movs	r3, #0
 80011b8:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ba:	227f      	movs	r2, #127	; 0x7f
 80011bc:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011be:	2204      	movs	r2, #4
 80011c0:	9205      	str	r2, [sp, #20]
  sConfig.Offset = 0;
 80011c2:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c4:	eb0d 0102 	add.w	r1, sp, r2
 80011c8:	4807      	ldr	r0, [pc, #28]	; (80011e8 <MX_ADC1_Init+0x98>)
<<<<<<< HEAD
 80011ca:	f004 fb9d 	bl	8005908 <HAL_ADC_ConfigChannel>
=======
 80011ca:	f004 fb09 	bl	80057e0 <HAL_ADC_ConfigChannel>
>>>>>>> render
 80011ce:	b938      	cbnz	r0, 80011e0 <MX_ADC1_Init+0x90>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d0:	b00c      	add	sp, #48	; 0x30
 80011d2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80011d4:	f000 fed0 	bl	8001f78 <Error_Handler>
 80011d8:	e7e2      	b.n	80011a0 <MX_ADC1_Init+0x50>
    Error_Handler();
 80011da:	f000 fecd 	bl	8001f78 <Error_Handler>
 80011de:	e7e6      	b.n	80011ae <MX_ADC1_Init+0x5e>
    Error_Handler();
 80011e0:	f000 feca 	bl	8001f78 <Error_Handler>
}
 80011e4:	e7f4      	b.n	80011d0 <MX_ADC1_Init+0x80>
 80011e6:	bf00      	nop
 80011e8:	2000147c 	.word	0x2000147c
 80011ec:	08600004 	.word	0x08600004

080011f0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011f0:	b500      	push	{lr}
 80011f2:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011f4:	2220      	movs	r2, #32
 80011f6:	2100      	movs	r1, #0
 80011f8:	4668      	mov	r0, sp
<<<<<<< HEAD
 80011fa:	f00d f9ed 	bl	800e5d8 <memset>
=======
 80011fa:	f00d f921 	bl	800e440 <memset>
>>>>>>> render

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011fe:	481b      	ldr	r0, [pc, #108]	; (800126c <MX_ADC2_Init+0x7c>)
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <MX_ADC2_Init+0x80>)
 8001202:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001204:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001208:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800120a:	2300      	movs	r3, #0
 800120c:	6083      	str	r3, [r0, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800120e:	60c3      	str	r3, [r0, #12]
  hadc2.Init.GainCompensation = 0;
 8001210:	6103      	str	r3, [r0, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001212:	6143      	str	r3, [r0, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001214:	2204      	movs	r2, #4
 8001216:	6182      	str	r2, [r0, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001218:	7703      	strb	r3, [r0, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800121a:	7743      	strb	r3, [r0, #29]
  hadc2.Init.NbrOfConversion = 1;
 800121c:	2201      	movs	r2, #1
 800121e:	6202      	str	r2, [r0, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001220:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001224:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001226:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001228:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800122c:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800122e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
<<<<<<< HEAD
 8001232:	f004 f9bb 	bl	80055ac <HAL_ADC_Init>
=======
 8001232:	f004 f927 	bl	8005484 <HAL_ADC_Init>
>>>>>>> render
 8001236:	b990      	cbnz	r0, 800125e <MX_ADC2_Init+0x6e>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_ADC2_Init+0x84>)
 800123a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800123c:	2306      	movs	r3, #6
 800123e:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001240:	2300      	movs	r3, #0
 8001242:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001244:	227f      	movs	r2, #127	; 0x7f
 8001246:	9203      	str	r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001248:	2204      	movs	r2, #4
 800124a:	9204      	str	r2, [sp, #16]
  sConfig.Offset = 0;
 800124c:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800124e:	4669      	mov	r1, sp
 8001250:	4806      	ldr	r0, [pc, #24]	; (800126c <MX_ADC2_Init+0x7c>)
<<<<<<< HEAD
 8001252:	f004 fb59 	bl	8005908 <HAL_ADC_ConfigChannel>
=======
 8001252:	f004 fac5 	bl	80057e0 <HAL_ADC_ConfigChannel>
>>>>>>> render
 8001256:	b928      	cbnz	r0, 8001264 <MX_ADC2_Init+0x74>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001258:	b009      	add	sp, #36	; 0x24
 800125a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800125e:	f000 fe8b 	bl	8001f78 <Error_Handler>
 8001262:	e7e9      	b.n	8001238 <MX_ADC2_Init+0x48>
    Error_Handler();
 8001264:	f000 fe88 	bl	8001f78 <Error_Handler>
}
 8001268:	e7f6      	b.n	8001258 <MX_ADC2_Init+0x68>
 800126a:	bf00      	nop
 800126c:	200014e8 	.word	0x200014e8
 8001270:	50000100 	.word	0x50000100
 8001274:	14f00020 	.word	0x14f00020

08001278 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001278:	b510      	push	{r4, lr}
 800127a:	b08c      	sub	sp, #48	; 0x30

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800127c:	2400      	movs	r4, #0
 800127e:	9409      	str	r4, [sp, #36]	; 0x24
 8001280:	940a      	str	r4, [sp, #40]	; 0x28
 8001282:	940b      	str	r4, [sp, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 8001284:	2220      	movs	r2, #32
 8001286:	4621      	mov	r1, r4
 8001288:	a801      	add	r0, sp, #4
<<<<<<< HEAD
 800128a:	f00d f9a5 	bl	800e5d8 <memset>
=======
 800128a:	f00d f8d9 	bl	800e440 <memset>
>>>>>>> render

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800128e:	481f      	ldr	r0, [pc, #124]	; (800130c <MX_ADC3_Init+0x94>)
 8001290:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <MX_ADC3_Init+0x98>)
 8001292:	6003      	str	r3, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001294:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001298:	6043      	str	r3, [r0, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800129a:	6084      	str	r4, [r0, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800129c:	60c4      	str	r4, [r0, #12]
  hadc3.Init.GainCompensation = 0;
 800129e:	6104      	str	r4, [r0, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012a0:	6144      	str	r4, [r0, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a2:	2304      	movs	r3, #4
 80012a4:	6183      	str	r3, [r0, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80012a6:	7704      	strb	r4, [r0, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80012a8:	7744      	strb	r4, [r0, #29]
  hadc3.Init.NbrOfConversion = 1;
 80012aa:	2301      	movs	r3, #1
 80012ac:	6203      	str	r3, [r0, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80012ae:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012b2:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012b4:	6304      	str	r4, [r0, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80012b6:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012ba:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80012bc:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
<<<<<<< HEAD
 80012c0:	f004 f974 	bl	80055ac <HAL_ADC_Init>
=======
 80012c0:	f004 f8e0 	bl	8005484 <HAL_ADC_Init>
>>>>>>> render
 80012c4:	b9c8      	cbnz	r0, 80012fa <MX_ADC3_Init+0x82>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012c6:	2300      	movs	r3, #0
 80012c8:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80012ca:	a909      	add	r1, sp, #36	; 0x24
 80012cc:	480f      	ldr	r0, [pc, #60]	; (800130c <MX_ADC3_Init+0x94>)
<<<<<<< HEAD
 80012ce:	f004 fe9f 	bl	8006010 <HAL_ADCEx_MultiModeConfigChannel>
=======
 80012ce:	f004 fe0b 	bl	8005ee8 <HAL_ADCEx_MultiModeConfigChannel>
>>>>>>> render
 80012d2:	b9a8      	cbnz	r0, 8001300 <MX_ADC3_Init+0x88>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_ADC3_Init+0x9c>)
 80012d6:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012d8:	2306      	movs	r3, #6
 80012da:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012dc:	2300      	movs	r3, #0
 80012de:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012e0:	227f      	movs	r2, #127	; 0x7f
 80012e2:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012e4:	2204      	movs	r2, #4
 80012e6:	9205      	str	r2, [sp, #20]
  sConfig.Offset = 0;
 80012e8:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012ea:	eb0d 0102 	add.w	r1, sp, r2
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <MX_ADC3_Init+0x94>)
<<<<<<< HEAD
 80012f0:	f004 fb0a 	bl	8005908 <HAL_ADC_ConfigChannel>
=======
 80012f0:	f004 fa76 	bl	80057e0 <HAL_ADC_ConfigChannel>
>>>>>>> render
 80012f4:	b938      	cbnz	r0, 8001306 <MX_ADC3_Init+0x8e>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012f6:	b00c      	add	sp, #48	; 0x30
 80012f8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80012fa:	f000 fe3d 	bl	8001f78 <Error_Handler>
 80012fe:	e7e2      	b.n	80012c6 <MX_ADC3_Init+0x4e>
    Error_Handler();
 8001300:	f000 fe3a 	bl	8001f78 <Error_Handler>
 8001304:	e7e6      	b.n	80012d4 <MX_ADC3_Init+0x5c>
    Error_Handler();
 8001306:	f000 fe37 	bl	8001f78 <Error_Handler>
}
 800130a:	e7f4      	b.n	80012f6 <MX_ADC3_Init+0x7e>
 800130c:	20001554 	.word	0x20001554
 8001310:	50000400 	.word	0x50000400
 8001314:	21800100 	.word	0x21800100

08001318 <MX_ADC4_Init>:
/* ADC4 init function */
// JOYSTICK
void MX_ADC4_Init(void)
{
 8001318:	b500      	push	{lr}
 800131a:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800131c:	2220      	movs	r2, #32
 800131e:	2100      	movs	r1, #0
 8001320:	4668      	mov	r0, sp
<<<<<<< HEAD
 8001322:	f00d f959 	bl	800e5d8 <memset>
=======
 8001322:	f00d f88d 	bl	800e440 <memset>
>>>>>>> render

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001326:	4822      	ldr	r0, [pc, #136]	; (80013b0 <MX_ADC4_Init+0x98>)
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <MX_ADC4_Init+0x9c>)
 800132a:	6003      	str	r3, [r0, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800132c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001330:	6043      	str	r3, [r0, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001332:	2300      	movs	r3, #0
 8001334:	6083      	str	r3, [r0, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001336:	60c3      	str	r3, [r0, #12]
  hadc4.Init.GainCompensation = 0;
 8001338:	6103      	str	r3, [r0, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800133a:	2201      	movs	r2, #1
 800133c:	6142      	str	r2, [r0, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800133e:	2104      	movs	r1, #4
 8001340:	6181      	str	r1, [r0, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001342:	7703      	strb	r3, [r0, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8001344:	7742      	strb	r2, [r0, #29]
  hadc4.Init.NbrOfConversion = 2;
 8001346:	2102      	movs	r1, #2
 8001348:	6201      	str	r1, [r0, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800134a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800134e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001350:	6303      	str	r3, [r0, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8001352:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001356:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8001358:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
<<<<<<< HEAD
 800135c:	f004 f926 	bl	80055ac <HAL_ADC_Init>
=======
 800135c:	f004 f892 	bl	8005484 <HAL_ADC_Init>
>>>>>>> render
 8001360:	b9e0      	cbnz	r0, 800139c <MX_ADC4_Init+0x84>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <MX_ADC4_Init+0xa0>)
 8001364:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001366:	2306      	movs	r3, #6
 8001368:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800136a:	2307      	movs	r3, #7
 800136c:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800136e:	237f      	movs	r3, #127	; 0x7f
 8001370:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001372:	2304      	movs	r3, #4
 8001374:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800137a:	4669      	mov	r1, sp
 800137c:	480c      	ldr	r0, [pc, #48]	; (80013b0 <MX_ADC4_Init+0x98>)
<<<<<<< HEAD
 800137e:	f004 fac3 	bl	8005908 <HAL_ADC_ConfigChannel>
=======
 800137e:	f004 fa2f 	bl	80057e0 <HAL_ADC_ConfigChannel>
>>>>>>> render
 8001382:	b970      	cbnz	r0, 80013a2 <MX_ADC4_Init+0x8a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001384:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <MX_ADC4_Init+0xa4>)
 8001386:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001388:	230c      	movs	r3, #12
 800138a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800138c:	4669      	mov	r1, sp
 800138e:	4808      	ldr	r0, [pc, #32]	; (80013b0 <MX_ADC4_Init+0x98>)
<<<<<<< HEAD
 8001390:	f004 faba 	bl	8005908 <HAL_ADC_ConfigChannel>
=======
 8001390:	f004 fa26 	bl	80057e0 <HAL_ADC_ConfigChannel>
>>>>>>> render
 8001394:	b940      	cbnz	r0, 80013a8 <MX_ADC4_Init+0x90>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001396:	b009      	add	sp, #36	; 0x24
 8001398:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800139c:	f000 fdec 	bl	8001f78 <Error_Handler>
 80013a0:	e7df      	b.n	8001362 <MX_ADC4_Init+0x4a>
    Error_Handler();
 80013a2:	f000 fde9 	bl	8001f78 <Error_Handler>
 80013a6:	e7ed      	b.n	8001384 <MX_ADC4_Init+0x6c>
    Error_Handler();
 80013a8:	f000 fde6 	bl	8001f78 <Error_Handler>
}
 80013ac:	e7f3      	b.n	8001396 <MX_ADC4_Init+0x7e>
 80013ae:	bf00      	nop
 80013b0:	200015c0 	.word	0x200015c0
 80013b4:	50000500 	.word	0x50000500
 80013b8:	10c00010 	.word	0x10c00010
 80013bc:	14f00020 	.word	0x14f00020

080013c0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013c0:	b530      	push	{r4, r5, lr}
 80013c2:	b0a7      	sub	sp, #156	; 0x9c
 80013c4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	2100      	movs	r1, #0
 80013c8:	9121      	str	r1, [sp, #132]	; 0x84
 80013ca:	9122      	str	r1, [sp, #136]	; 0x88
 80013cc:	9123      	str	r1, [sp, #140]	; 0x8c
 80013ce:	9124      	str	r1, [sp, #144]	; 0x90
 80013d0:	9125      	str	r1, [sp, #148]	; 0x94
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d2:	2254      	movs	r2, #84	; 0x54
 80013d4:	a80c      	add	r0, sp, #48	; 0x30
<<<<<<< HEAD
 80013d6:	f00d f8ff 	bl	800e5d8 <memset>
=======
 80013d6:	f00d f833 	bl	800e440 <memset>
>>>>>>> render
  if(adcHandle->Instance==ADC1)
 80013da:	6823      	ldr	r3, [r4, #0]
 80013dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013e0:	d00c      	beq.n	80013fc <HAL_ADC_MspInit+0x3c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 80013e2:	4a96      	ldr	r2, [pc, #600]	; (800163c <HAL_ADC_MspInit+0x27c>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d03d      	beq.n	8001464 <HAL_ADC_MspInit+0xa4>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 80013e8:	4a95      	ldr	r2, [pc, #596]	; (8001640 <HAL_ADC_MspInit+0x280>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	f000 80a2 	beq.w	8001534 <HAL_ADC_MspInit+0x174>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC4)
 80013f0:	4a94      	ldr	r2, [pc, #592]	; (8001644 <HAL_ADC_MspInit+0x284>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	f000 80d2 	beq.w	800159c <HAL_ADC_MspInit+0x1dc>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 80013f8:	b027      	add	sp, #156	; 0x9c
 80013fa:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001400:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001402:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001406:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001408:	a80c      	add	r0, sp, #48	; 0x30
<<<<<<< HEAD
 800140a:	f007 fe31 	bl	8009070 <HAL_RCCEx_PeriphCLKConfig>
=======
 800140a:	f007 fd9d 	bl	8008f48 <HAL_RCCEx_PeriphCLKConfig>
>>>>>>> render
 800140e:	b9d8      	cbnz	r0, 8001448 <HAL_ADC_MspInit+0x88>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001410:	4a8d      	ldr	r2, [pc, #564]	; (8001648 <HAL_ADC_MspInit+0x288>)
 8001412:	6813      	ldr	r3, [r2, #0]
 8001414:	3301      	adds	r3, #1
 8001416:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001418:	2b01      	cmp	r3, #1
 800141a:	d018      	beq.n	800144e <HAL_ADC_MspInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141c:	4b8b      	ldr	r3, [pc, #556]	; (800164c <HAL_ADC_MspInit+0x28c>)
 800141e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001420:	f042 0201 	orr.w	r2, r2, #1
 8001424:	64da      	str	r2, [r3, #76]	; 0x4c
 8001426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	9302      	str	r3, [sp, #8]
 800142e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AD0_Pin|AD1_Pin|AD2_Pin|AD3_Pin;
 8001430:	230f      	movs	r3, #15
 8001432:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001434:	2303      	movs	r3, #3
 8001436:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143c:	a921      	add	r1, sp, #132	; 0x84
 800143e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< HEAD
 8001442:	f005 fc03 	bl	8006c4c <HAL_GPIO_Init>
=======
 8001442:	f005 fb6f 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render
 8001446:	e7d7      	b.n	80013f8 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 8001448:	f000 fd96 	bl	8001f78 <Error_Handler>
 800144c:	e7e0      	b.n	8001410 <HAL_ADC_MspInit+0x50>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800144e:	4b7f      	ldr	r3, [pc, #508]	; (800164c <HAL_ADC_MspInit+0x28c>)
 8001450:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001452:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001456:	64da      	str	r2, [r3, #76]	; 0x4c
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	9b01      	ldr	r3, [sp, #4]
 8001462:	e7db      	b.n	800141c <HAL_ADC_MspInit+0x5c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001464:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001468:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800146a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800146e:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001470:	a80c      	add	r0, sp, #48	; 0x30
<<<<<<< HEAD
 8001472:	f007 fdfd 	bl	8009070 <HAL_RCCEx_PeriphCLKConfig>
=======
 8001472:	f007 fd69 	bl	8008f48 <HAL_RCCEx_PeriphCLKConfig>
>>>>>>> render
 8001476:	2800      	cmp	r0, #0
 8001478:	d14e      	bne.n	8001518 <HAL_ADC_MspInit+0x158>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800147a:	4a73      	ldr	r2, [pc, #460]	; (8001648 <HAL_ADC_MspInit+0x288>)
 800147c:	6813      	ldr	r3, [r2, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001482:	2b01      	cmp	r3, #1
 8001484:	d04b      	beq.n	800151e <HAL_ADC_MspInit+0x15e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001486:	4b71      	ldr	r3, [pc, #452]	; (800164c <HAL_ADC_MspInit+0x28c>)
 8001488:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800148a:	f042 0220 	orr.w	r2, r2, #32
 800148e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001490:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001492:	f002 0220 	and.w	r2, r2, #32
 8001496:	9204      	str	r2, [sp, #16]
 8001498:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800149c:	f042 0201 	orr.w	r2, r2, #1
 80014a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80014a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014a4:	f002 0201 	and.w	r2, r2, #1
 80014a8:	9205      	str	r2, [sp, #20]
 80014aa:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014ae:	f042 0204 	orr.w	r2, r2, #4
 80014b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80014b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014b6:	f002 0204 	and.w	r2, r2, #4
 80014ba:	9206      	str	r2, [sp, #24]
 80014bc:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014c0:	f042 0202 	orr.w	r2, r2, #2
 80014c4:	64da      	str	r2, [r3, #76]	; 0x4c
 80014c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	9307      	str	r3, [sp, #28]
 80014ce:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = AD5_Pin;
 80014d0:	2302      	movs	r3, #2
 80014d2:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d4:	2503      	movs	r5, #3
 80014d6:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2400      	movs	r4, #0
 80014da:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(AD5_GPIO_Port, &GPIO_InitStruct);
 80014dc:	a921      	add	r1, sp, #132	; 0x84
 80014de:	485c      	ldr	r0, [pc, #368]	; (8001650 <HAL_ADC_MspInit+0x290>)
<<<<<<< HEAD
 80014e0:	f005 fbb4 	bl	8006c4c <HAL_GPIO_Init>
=======
 80014e0:	f005 fb20 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render
    GPIO_InitStruct.Pin = AD8_Pin;
 80014e4:	2320      	movs	r3, #32
 80014e6:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e8:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(AD8_GPIO_Port, &GPIO_InitStruct);
 80014ec:	a921      	add	r1, sp, #132	; 0x84
 80014ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< HEAD
 80014f2:	f005 fbab 	bl	8006c4c <HAL_GPIO_Init>
=======
 80014f2:	f005 fb17 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render
    GPIO_InitStruct.Pin = AD4_Pin|AD6_Pin;
 80014f6:	2330      	movs	r3, #48	; 0x30
 80014f8:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014fa:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fe:	a921      	add	r1, sp, #132	; 0x84
 8001500:	4854      	ldr	r0, [pc, #336]	; (8001654 <HAL_ADC_MspInit+0x294>)
<<<<<<< HEAD
 8001502:	f005 fba3 	bl	8006c4c <HAL_GPIO_Init>
=======
 8001502:	f005 fb0f 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render
    GPIO_InitStruct.Pin = AD7_Pin;
 8001506:	2304      	movs	r3, #4
 8001508:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800150a:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(AD7_GPIO_Port, &GPIO_InitStruct);
 800150e:	a921      	add	r1, sp, #132	; 0x84
 8001510:	4851      	ldr	r0, [pc, #324]	; (8001658 <HAL_ADC_MspInit+0x298>)
<<<<<<< HEAD
 8001512:	f005 fb9b 	bl	8006c4c <HAL_GPIO_Init>
=======
 8001512:	f005 fb07 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render
 8001516:	e76f      	b.n	80013f8 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 8001518:	f000 fd2e 	bl	8001f78 <Error_Handler>
 800151c:	e7ad      	b.n	800147a <HAL_ADC_MspInit+0xba>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800151e:	4b4b      	ldr	r3, [pc, #300]	; (800164c <HAL_ADC_MspInit+0x28c>)
 8001520:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001522:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001526:	64da      	str	r2, [r3, #76]	; 0x4c
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800152e:	9303      	str	r3, [sp, #12]
 8001530:	9b03      	ldr	r3, [sp, #12]
 8001532:	e7a8      	b.n	8001486 <HAL_ADC_MspInit+0xc6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001538:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800153a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800153e:	931e      	str	r3, [sp, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001540:	a80c      	add	r0, sp, #48	; 0x30
<<<<<<< HEAD
 8001542:	f007 fd95 	bl	8009070 <HAL_RCCEx_PeriphCLKConfig>
=======
 8001542:	f007 fd01 	bl	8008f48 <HAL_RCCEx_PeriphCLKConfig>
>>>>>>> render
 8001546:	b9d8      	cbnz	r0, 8001580 <HAL_ADC_MspInit+0x1c0>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001548:	4a44      	ldr	r2, [pc, #272]	; (800165c <HAL_ADC_MspInit+0x29c>)
 800154a:	6813      	ldr	r3, [r2, #0]
 800154c:	3301      	adds	r3, #1
 800154e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001550:	2b01      	cmp	r3, #1
 8001552:	d018      	beq.n	8001586 <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001554:	4b3d      	ldr	r3, [pc, #244]	; (800164c <HAL_ADC_MspInit+0x28c>)
 8001556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001558:	f042 0208 	orr.w	r2, r2, #8
 800155c:	64da      	str	r2, [r3, #76]	; 0x4c
 800155e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	9309      	str	r3, [sp, #36]	; 0x24
 8001566:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = AD9_Pin|AD10_Pin|AD11_Pin;
 8001568:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800156c:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800156e:	2303      	movs	r3, #3
 8001570:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001576:	a921      	add	r1, sp, #132	; 0x84
 8001578:	4839      	ldr	r0, [pc, #228]	; (8001660 <HAL_ADC_MspInit+0x2a0>)
<<<<<<< HEAD
 800157a:	f005 fb67 	bl	8006c4c <HAL_GPIO_Init>
=======
 800157a:	f005 fad3 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render
 800157e:	e73b      	b.n	80013f8 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 8001580:	f000 fcfa 	bl	8001f78 <Error_Handler>
 8001584:	e7e0      	b.n	8001548 <HAL_ADC_MspInit+0x188>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001586:	4b31      	ldr	r3, [pc, #196]	; (800164c <HAL_ADC_MspInit+0x28c>)
 8001588:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800158a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800158e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001596:	9308      	str	r3, [sp, #32]
 8001598:	9b08      	ldr	r3, [sp, #32]
 800159a:	e7db      	b.n	8001554 <HAL_ADC_MspInit+0x194>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800159c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015a0:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80015a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80015a6:	931e      	str	r3, [sp, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a8:	a80c      	add	r0, sp, #48	; 0x30
<<<<<<< HEAD
 80015aa:	f007 fd61 	bl	8009070 <HAL_RCCEx_PeriphCLKConfig>
=======
 80015aa:	f007 fccd 	bl	8008f48 <HAL_RCCEx_PeriphCLKConfig>
>>>>>>> render
 80015ae:	2800      	cmp	r0, #0
 80015b0:	d133      	bne.n	800161a <HAL_ADC_MspInit+0x25a>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80015b2:	4a2a      	ldr	r2, [pc, #168]	; (800165c <HAL_ADC_MspInit+0x29c>)
 80015b4:	6813      	ldr	r3, [r2, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d030      	beq.n	8001620 <HAL_ADC_MspInit+0x260>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	4b23      	ldr	r3, [pc, #140]	; (800164c <HAL_ADC_MspInit+0x28c>)
 80015c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015c2:	f042 0202 	orr.w	r2, r2, #2
 80015c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80015d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80015d2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80015d6:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d8:	2303      	movs	r3, #3
 80015da:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2500      	movs	r5, #0
 80015de:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e0:	a921      	add	r1, sp, #132	; 0x84
 80015e2:	481d      	ldr	r0, [pc, #116]	; (8001658 <HAL_ADC_MspInit+0x298>)
<<<<<<< HEAD
 80015e4:	f005 fb32 	bl	8006c4c <HAL_GPIO_Init>
=======
 80015e4:	f005 fa9e 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render
    hdma_adc4.Instance = DMA1_Channel5;
 80015e8:	481e      	ldr	r0, [pc, #120]	; (8001664 <HAL_ADC_MspInit+0x2a4>)
 80015ea:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <HAL_ADC_MspInit+0x2a8>)
 80015ec:	6003      	str	r3, [r0, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 80015ee:	2326      	movs	r3, #38	; 0x26
 80015f0:	6043      	str	r3, [r0, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015f2:	6085      	str	r5, [r0, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f4:	60c5      	str	r5, [r0, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80015f6:	2380      	movs	r3, #128	; 0x80
 80015f8:	6103      	str	r3, [r0, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015fe:	6143      	str	r3, [r0, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001600:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001604:	6183      	str	r3, [r0, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8001606:	2320      	movs	r3, #32
 8001608:	61c3      	str	r3, [r0, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 800160a:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
<<<<<<< HEAD
 800160c:	f005 f838 	bl	8006680 <HAL_DMA_Init>
=======
 800160c:	f004 ffa4 	bl	8006558 <HAL_DMA_Init>
>>>>>>> render
 8001610:	b988      	cbnz	r0, 8001636 <HAL_ADC_MspInit+0x276>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <HAL_ADC_MspInit+0x2a4>)
 8001614:	6563      	str	r3, [r4, #84]	; 0x54
 8001616:	629c      	str	r4, [r3, #40]	; 0x28
}
 8001618:	e6ee      	b.n	80013f8 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 800161a:	f000 fcad 	bl	8001f78 <Error_Handler>
 800161e:	e7c8      	b.n	80015b2 <HAL_ADC_MspInit+0x1f2>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <HAL_ADC_MspInit+0x28c>)
 8001622:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001624:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001628:	64da      	str	r2, [r3, #76]	; 0x4c
 800162a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001630:	930a      	str	r3, [sp, #40]	; 0x28
 8001632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001634:	e7c3      	b.n	80015be <HAL_ADC_MspInit+0x1fe>
      Error_Handler();
 8001636:	f000 fc9f 	bl	8001f78 <Error_Handler>
 800163a:	e7ea      	b.n	8001612 <HAL_ADC_MspInit+0x252>
 800163c:	50000100 	.word	0x50000100
 8001640:	50000400 	.word	0x50000400
 8001644:	50000500 	.word	0x50000500
 8001648:	20001474 	.word	0x20001474
 800164c:	40021000 	.word	0x40021000
 8001650:	48001400 	.word	0x48001400
 8001654:	48000800 	.word	0x48000800
 8001658:	48000400 	.word	0x48000400
 800165c:	20001478 	.word	0x20001478
 8001660:	48000c00 	.word	0x48000c00
 8001664:	2000162c 	.word	0x2000162c
 8001668:	40020058 	.word	0x40020058

0800166c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800166c:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800166e:	4808      	ldr	r0, [pc, #32]	; (8001690 <MX_CRC_Init+0x24>)
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <MX_CRC_Init+0x28>)
 8001672:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001678:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800167a:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800167c:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800167e:	2301      	movs	r3, #1
 8001680:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
<<<<<<< HEAD
 8001682:	f004 fe1b 	bl	80062bc <HAL_CRC_Init>
=======
 8001682:	f004 fd87 	bl	8006194 <HAL_CRC_Init>
>>>>>>> render
 8001686:	b900      	cbnz	r0, 800168a <MX_CRC_Init+0x1e>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001688:	bd08      	pop	{r3, pc}
    Error_Handler();
 800168a:	f000 fc75 	bl	8001f78 <Error_Handler>
}
 800168e:	e7fb      	b.n	8001688 <MX_CRC_Init+0x1c>
 8001690:	2000168c 	.word	0x2000168c
 8001694:	40023000 	.word	0x40023000

08001698 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8001698:	6802      	ldr	r2, [r0, #0]
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_CRC_MspInit+0x28>)
 800169c:	429a      	cmp	r2, r3
 800169e:	d000      	beq.n	80016a2 <HAL_CRC_MspInit+0xa>
 80016a0:	4770      	bx	lr
{
 80016a2:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80016a4:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80016a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80016ae:	649a      	str	r2, [r3, #72]	; 0x48
 80016b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80016ba:	b002      	add	sp, #8
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40023000 	.word	0x40023000

080016c4 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DAC_HandleTypeDef hdac2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80016c4:	b500      	push	{lr}
 80016c6:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016c8:	2230      	movs	r2, #48	; 0x30
 80016ca:	2100      	movs	r1, #0
 80016cc:	4668      	mov	r0, sp
<<<<<<< HEAD
 80016ce:	f00c ff83 	bl	800e5d8 <memset>
=======
 80016ce:	f00c feb7 	bl	800e440 <memset>
>>>>>>> render

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80016d2:	4811      	ldr	r0, [pc, #68]	; (8001718 <MX_DAC1_Init+0x54>)
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_DAC1_Init+0x58>)
 80016d6:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
<<<<<<< HEAD
 80016d8:	f004 fe67 	bl	80063aa <HAL_DAC_Init>
=======
 80016d8:	f004 fdd3 	bl	8006282 <HAL_DAC_Init>
>>>>>>> render
 80016dc:	b9a8      	cbnz	r0, 800170a <MX_DAC1_Init+0x46>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80016de:	2302      	movs	r3, #2
 80016e0:	9300      	str	r3, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80016e2:	2200      	movs	r2, #0
 80016e4:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80016e8:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80016ec:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80016ee:	9203      	str	r2, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80016f0:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80016f2:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80016f4:	2301      	movs	r3, #1
 80016f6:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80016f8:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80016fa:	4669      	mov	r1, sp
 80016fc:	4806      	ldr	r0, [pc, #24]	; (8001718 <MX_DAC1_Init+0x54>)
<<<<<<< HEAD
 80016fe:	f004 fe67 	bl	80063d0 <HAL_DAC_ConfigChannel>
=======
 80016fe:	f004 fdd3 	bl	80062a8 <HAL_DAC_ConfigChannel>
>>>>>>> render
 8001702:	b928      	cbnz	r0, 8001710 <MX_DAC1_Init+0x4c>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001704:	b00d      	add	sp, #52	; 0x34
 8001706:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800170a:	f000 fc35 	bl	8001f78 <Error_Handler>
 800170e:	e7e6      	b.n	80016de <MX_DAC1_Init+0x1a>
    Error_Handler();
 8001710:	f000 fc32 	bl	8001f78 <Error_Handler>
}
 8001714:	e7f6      	b.n	8001704 <MX_DAC1_Init+0x40>
 8001716:	bf00      	nop
 8001718:	200016b0 	.word	0x200016b0
 800171c:	50000800 	.word	0x50000800

08001720 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8001720:	b500      	push	{lr}
 8001722:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001724:	2230      	movs	r2, #48	; 0x30
 8001726:	2100      	movs	r1, #0
 8001728:	4668      	mov	r0, sp
<<<<<<< HEAD
 800172a:	f00c ff55 	bl	800e5d8 <memset>
=======
 800172a:	f00c fe89 	bl	800e440 <memset>
>>>>>>> render

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 800172e:	4811      	ldr	r0, [pc, #68]	; (8001774 <MX_DAC2_Init+0x54>)
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_DAC2_Init+0x58>)
 8001732:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
<<<<<<< HEAD
 8001734:	f004 fe39 	bl	80063aa <HAL_DAC_Init>
=======
 8001734:	f004 fda5 	bl	8006282 <HAL_DAC_Init>
>>>>>>> render
 8001738:	b9a8      	cbnz	r0, 8001766 <MX_DAC2_Init+0x46>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800173a:	2302      	movs	r3, #2
 800173c:	9300      	str	r3, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800173e:	2200      	movs	r2, #0
 8001740:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001744:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001748:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800174a:	9203      	str	r2, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800174c:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800174e:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001750:	2301      	movs	r3, #1
 8001752:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001754:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001756:	4669      	mov	r1, sp
 8001758:	4806      	ldr	r0, [pc, #24]	; (8001774 <MX_DAC2_Init+0x54>)
<<<<<<< HEAD
 800175a:	f004 fe39 	bl	80063d0 <HAL_DAC_ConfigChannel>
=======
 800175a:	f004 fda5 	bl	80062a8 <HAL_DAC_ConfigChannel>
>>>>>>> render
 800175e:	b928      	cbnz	r0, 800176c <MX_DAC2_Init+0x4c>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8001760:	b00d      	add	sp, #52	; 0x34
 8001762:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001766:	f000 fc07 	bl	8001f78 <Error_Handler>
 800176a:	e7e6      	b.n	800173a <MX_DAC2_Init+0x1a>
    Error_Handler();
 800176c:	f000 fc04 	bl	8001f78 <Error_Handler>
}
 8001770:	e7f6      	b.n	8001760 <MX_DAC2_Init+0x40>
 8001772:	bf00      	nop
 8001774:	200016c4 	.word	0x200016c4
 8001778:	50000c00 	.word	0x50000c00

0800177c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800177c:	b500      	push	{lr}
 800177e:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	2300      	movs	r3, #0
 8001782:	9305      	str	r3, [sp, #20]
 8001784:	9306      	str	r3, [sp, #24]
 8001786:	9307      	str	r3, [sp, #28]
 8001788:	9308      	str	r3, [sp, #32]
 800178a:	9309      	str	r3, [sp, #36]	; 0x24
  if(dacHandle->Instance==DAC1)
 800178c:	6803      	ldr	r3, [r0, #0]
 800178e:	4a21      	ldr	r2, [pc, #132]	; (8001814 <HAL_DAC_MspInit+0x98>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d005      	beq.n	80017a0 <HAL_DAC_MspInit+0x24>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
  else if(dacHandle->Instance==DAC2)
 8001794:	4a20      	ldr	r2, [pc, #128]	; (8001818 <HAL_DAC_MspInit+0x9c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d01f      	beq.n	80017da <HAL_DAC_MspInit+0x5e>

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 800179a:	b00b      	add	sp, #44	; 0x2c
 800179c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC1_CLK_ENABLE();
 80017a0:	4b1e      	ldr	r3, [pc, #120]	; (800181c <HAL_DAC_MspInit+0xa0>)
 80017a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80017a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80017aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017ac:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80017b0:	9201      	str	r2, [sp, #4]
 80017b2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017b6:	f042 0201 	orr.w	r2, r2, #1
 80017ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DAC1_Pin;
 80017c6:	2310      	movs	r3, #16
 80017c8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ca:	2303      	movs	r3, #3
 80017cc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(DAC1_GPIO_Port, &GPIO_InitStruct);
 80017ce:	a905      	add	r1, sp, #20
 80017d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< HEAD
 80017d4:	f005 fa3a 	bl	8006c4c <HAL_GPIO_Init>
=======
 80017d4:	f005 f9a6 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render
 80017d8:	e7df      	b.n	800179a <HAL_DAC_MspInit+0x1e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_DAC_MspInit+0xa0>)
 80017dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017de:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80017e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80017e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017e6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80017ea:	9203      	str	r2, [sp, #12]
 80017ec:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017f0:	f042 0201 	orr.w	r2, r2, #1
 80017f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80017f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	9304      	str	r3, [sp, #16]
 80017fe:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = DAC2_Pin;
 8001800:	2340      	movs	r3, #64	; 0x40
 8001802:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001804:	2303      	movs	r3, #3
 8001806:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(DAC2_GPIO_Port, &GPIO_InitStruct);
 8001808:	a905      	add	r1, sp, #20
 800180a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< HEAD
 800180e:	f005 fa1d 	bl	8006c4c <HAL_GPIO_Init>
=======
 800180e:	f005 f989 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render
}
 8001812:	e7c2      	b.n	800179a <HAL_DAC_MspInit+0x1e>
 8001814:	50000800 	.word	0x50000800
 8001818:	50000c00 	.word	0x50000c00
 800181c:	40021000 	.word	0x40021000

08001820 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
void MX_DMA_Init(void)
{
 8001820:	b500      	push	{lr}
 8001822:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001824:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <MX_DMA_Init+0xc4>)
 8001826:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001828:	f042 0204 	orr.w	r2, r2, #4
 800182c:	649a      	str	r2, [r3, #72]	; 0x48
 800182e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001830:	f002 0204 	and.w	r2, r2, #4
 8001834:	9200      	str	r2, [sp, #0]
 8001836:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001838:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800183a:	f042 0201 	orr.w	r2, r2, #1
 800183e:	649a      	str	r2, [r3, #72]	; 0x48
 8001840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	9301      	str	r3, [sp, #4]
 8001848:	9b01      	ldr	r3, [sp, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 800184a:	4827      	ldr	r0, [pc, #156]	; (80018e8 <MX_DMA_Init+0xc8>)
 800184c:	4b27      	ldr	r3, [pc, #156]	; (80018ec <MX_DMA_Init+0xcc>)
 800184e:	6003      	str	r3, [r0, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_MEM2MEM;
 8001850:	2300      	movs	r3, #0
 8001852:	6043      	str	r3, [r0, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001854:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001858:	6082      	str	r2, [r0, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 800185a:	2240      	movs	r2, #64	; 0x40
 800185c:	60c2      	str	r2, [r0, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_DISABLE;
 800185e:	6103      	str	r3, [r0, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001860:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001864:	6142      	str	r2, [r0, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001866:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800186a:	6182      	str	r2, [r0, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 800186c:	61c3      	str	r3, [r0, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_HIGH;
 800186e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001872:	6203      	str	r3, [r0, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
<<<<<<< HEAD
 8001874:	f004 ff04 	bl	8006680 <HAL_DMA_Init>
=======
 8001874:	f004 fe70 	bl	8006558 <HAL_DMA_Init>
>>>>>>> render
 8001878:	bb88      	cbnz	r0, 80018de <MX_DMA_Init+0xbe>
    Error_Handler();
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	4611      	mov	r1, r2
 800187e:	200b      	movs	r0, #11
<<<<<<< HEAD
 8001880:	f004 fcc2 	bl	8006208 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001884:	200b      	movs	r0, #11
 8001886:	f004 fcf7 	bl	8006278 <HAL_NVIC_EnableIRQ>
=======
 8001880:	f004 fc2e 	bl	80060e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001884:	200b      	movs	r0, #11
 8001886:	f004 fc63 	bl	8006150 <HAL_NVIC_EnableIRQ>
>>>>>>> render
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	4611      	mov	r1, r2
 800188e:	200d      	movs	r0, #13
<<<<<<< HEAD
 8001890:	f004 fcba 	bl	8006208 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001894:	200d      	movs	r0, #13
 8001896:	f004 fcef 	bl	8006278 <HAL_NVIC_EnableIRQ>
=======
 8001890:	f004 fc26 	bl	80060e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001894:	200d      	movs	r0, #13
 8001896:	f004 fc5b 	bl	8006150 <HAL_NVIC_EnableIRQ>
>>>>>>> render
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	4611      	mov	r1, r2
 800189e:	200e      	movs	r0, #14
<<<<<<< HEAD
 80018a0:	f004 fcb2 	bl	8006208 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80018a4:	200e      	movs	r0, #14
 80018a6:	f004 fce7 	bl	8006278 <HAL_NVIC_EnableIRQ>
=======
 80018a0:	f004 fc1e 	bl	80060e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80018a4:	200e      	movs	r0, #14
 80018a6:	f004 fc53 	bl	8006150 <HAL_NVIC_EnableIRQ>
>>>>>>> render
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	4611      	mov	r1, r2
 80018ae:	200f      	movs	r0, #15
<<<<<<< HEAD
 80018b0:	f004 fcaa 	bl	8006208 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80018b4:	200f      	movs	r0, #15
 80018b6:	f004 fcdf 	bl	8006278 <HAL_NVIC_EnableIRQ>
=======
 80018b0:	f004 fc16 	bl	80060e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80018b4:	200f      	movs	r0, #15
 80018b6:	f004 fc4b 	bl	8006150 <HAL_NVIC_EnableIRQ>
>>>>>>> render
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ba:	490d      	ldr	r1, [pc, #52]	; (80018f0 <MX_DMA_Init+0xd0>)
 80018bc:	68cb      	ldr	r3, [r1, #12]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018be:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <MX_DMA_Init+0xd4>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80018ca:	6018      	str	r0, [r3, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018cc:	68c9      	ldr	r1, [r1, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ce:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018d6:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);

}
 80018d8:	b003      	add	sp, #12
 80018da:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80018de:	f000 fb4b 	bl	8001f78 <Error_Handler>
 80018e2:	e7ca      	b.n	800187a <MX_DMA_Init+0x5a>
 80018e4:	40021000 	.word	0x40021000
 80018e8:	200016d8 	.word	0x200016d8
 80018ec:	40020008 	.word	0x40020008
 80018f0:	e000ed00 	.word	0xe000ed00
 80018f4:	e000e100 	.word	0xe000e100

080018f8 <MX_FDCAN2_Init>:

FDCAN_HandleTypeDef hfdcan2;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 80018f8:	b508      	push	{r3, lr}
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80018fa:	480f      	ldr	r0, [pc, #60]	; (8001938 <MX_FDCAN2_Init+0x40>)
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <MX_FDCAN2_Init+0x44>)
 80018fe:	6003      	str	r3, [r0, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001900:	2300      	movs	r3, #0
 8001902:	6043      	str	r3, [r0, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001904:	6083      	str	r3, [r0, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001906:	60c3      	str	r3, [r0, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001908:	7403      	strb	r3, [r0, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800190a:	7443      	strb	r3, [r0, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800190c:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 800190e:	2210      	movs	r2, #16
 8001910:	6142      	str	r2, [r0, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001912:	2201      	movs	r2, #1
 8001914:	6182      	str	r2, [r0, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8001916:	2102      	movs	r1, #2
 8001918:	61c1      	str	r1, [r0, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800191a:	6201      	str	r1, [r0, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800191c:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800191e:	6282      	str	r2, [r0, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001920:	62c2      	str	r2, [r0, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001922:	6302      	str	r2, [r0, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8001924:	6343      	str	r3, [r0, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001926:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001928:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
<<<<<<< HEAD
 800192a:	f005 f8a5 	bl	8006a78 <HAL_FDCAN_Init>
=======
 800192a:	f005 f811 	bl	8006950 <HAL_FDCAN_Init>
>>>>>>> render
 800192e:	b900      	cbnz	r0, 8001932 <MX_FDCAN2_Init+0x3a>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001930:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001932:	f000 fb21 	bl	8001f78 <Error_Handler>
}
 8001936:	e7fb      	b.n	8001930 <MX_FDCAN2_Init+0x38>
 8001938:	20001738 	.word	0x20001738
 800193c:	40006800 	.word	0x40006800

08001940 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001940:	b510      	push	{r4, lr}
 8001942:	b09c      	sub	sp, #112	; 0x70
 8001944:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001946:	2100      	movs	r1, #0
 8001948:	9117      	str	r1, [sp, #92]	; 0x5c
 800194a:	9118      	str	r1, [sp, #96]	; 0x60
 800194c:	9119      	str	r1, [sp, #100]	; 0x64
 800194e:	911a      	str	r1, [sp, #104]	; 0x68
 8001950:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001952:	2254      	movs	r2, #84	; 0x54
 8001954:	a802      	add	r0, sp, #8
<<<<<<< HEAD
 8001956:	f00c fe3f 	bl	800e5d8 <memset>
=======
 8001956:	f00c fd73 	bl	800e440 <memset>
>>>>>>> render
  if(fdcanHandle->Instance==FDCAN2)
 800195a:	6822      	ldr	r2, [r4, #0]
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_FDCAN_MspInit+0x84>)
 800195e:	429a      	cmp	r2, r3
 8001960:	d001      	beq.n	8001966 <HAL_FDCAN_MspInit+0x26>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001962:	b01c      	add	sp, #112	; 0x70
 8001964:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196a:	9302      	str	r3, [sp, #8]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800196c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001970:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001972:	a802      	add	r0, sp, #8
<<<<<<< HEAD
 8001974:	f007 fb7c 	bl	8009070 <HAL_RCCEx_PeriphCLKConfig>
=======
 8001974:	f007 fae8 	bl	8008f48 <HAL_RCCEx_PeriphCLKConfig>
>>>>>>> render
 8001978:	bb08      	cbnz	r0, 80019be <HAL_FDCAN_MspInit+0x7e>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <HAL_FDCAN_MspInit+0x88>)
 800197c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800197e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001982:	659a      	str	r2, [r3, #88]	; 0x58
 8001984:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001986:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800198a:	9200      	str	r2, [sp, #0]
 800198c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001990:	f042 0202 	orr.w	r2, r2, #2
 8001994:	64da      	str	r2, [r3, #76]	; 0x4c
 8001996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 80019a0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80019a4:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80019b0:	2309      	movs	r3, #9
 80019b2:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b4:	a917      	add	r1, sp, #92	; 0x5c
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <HAL_FDCAN_MspInit+0x8c>)
<<<<<<< HEAD
 80019b8:	f005 f948 	bl	8006c4c <HAL_GPIO_Init>
=======
 80019b8:	f005 f8b4 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render
}
 80019bc:	e7d1      	b.n	8001962 <HAL_FDCAN_MspInit+0x22>
      Error_Handler();
 80019be:	f000 fadb 	bl	8001f78 <Error_Handler>
 80019c2:	e7da      	b.n	800197a <HAL_FDCAN_MspInit+0x3a>
 80019c4:	40006800 	.word	0x40006800
 80019c8:	40021000 	.word	0x40021000
 80019cc:	48000400 	.word	0x48000400

080019d0 <HAL_FMC_MspInit>:
  /* USER CODE END FMC_Init 2 */
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80019d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d2:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	2300      	movs	r3, #0
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	9302      	str	r3, [sp, #8]
 80019da:	9303      	str	r3, [sp, #12]
 80019dc:	9304      	str	r3, [sp, #16]
 80019de:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <HAL_FMC_MspInit+0x7c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	b10b      	cbz	r3, 80019ea <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80019e6:	b007      	add	sp, #28
 80019e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <HAL_FMC_MspInit+0x7c>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 80019f0:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <HAL_FMC_MspInit+0x80>)
 80019f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019f4:	f042 0201 	orr.w	r2, r2, #1
 80019f8:	651a      	str	r2, [r3, #80]	; 0x50
 80019fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001a04:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001a08:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2602      	movs	r6, #2
 8001a0c:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0e:	2503      	movs	r5, #3
 8001a10:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a12:	240c      	movs	r4, #12
 8001a14:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a16:	a901      	add	r1, sp, #4
 8001a18:	480e      	ldr	r0, [pc, #56]	; (8001a54 <HAL_FMC_MspInit+0x84>)
<<<<<<< HEAD
 8001a1a:	f005 f917 	bl	8006c4c <HAL_GPIO_Init>
=======
 8001a1a:	f005 f883 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001a1e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001a22:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2700      	movs	r7, #0
 8001a28:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a2c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a2e:	a901      	add	r1, sp, #4
 8001a30:	4809      	ldr	r0, [pc, #36]	; (8001a58 <HAL_FMC_MspInit+0x88>)
<<<<<<< HEAD
 8001a32:	f005 f90b 	bl	8006c4c <HAL_GPIO_Init>
=======
 8001a32:	f005 f877 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 8001a36:	2320      	movs	r3, #32
 8001a38:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a40:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8001a42:	a901      	add	r1, sp, #4
 8001a44:	4805      	ldr	r0, [pc, #20]	; (8001a5c <HAL_FMC_MspInit+0x8c>)
<<<<<<< HEAD
 8001a46:	f005 f901 	bl	8006c4c <HAL_GPIO_Init>
=======
 8001a46:	f005 f86d 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render
 8001a4a:	e7cc      	b.n	80019e6 <HAL_FMC_MspInit+0x16>
 8001a4c:	2000179c 	.word	0x2000179c
 8001a50:	40021000 	.word	0x40021000
 8001a54:	48001000 	.word	0x48001000
 8001a58:	48000c00 	.word	0x48000c00
 8001a5c:	48001800 	.word	0x48001800

08001a60 <MX_FMC_Init>:
{
 8001a60:	b510      	push	{r4, lr}
 8001a62:	b088      	sub	sp, #32
  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001a64:	2220      	movs	r2, #32
 8001a66:	2100      	movs	r1, #0
 8001a68:	4668      	mov	r0, sp
<<<<<<< HEAD
 8001a6a:	f00c fdb5 	bl	800e5d8 <memset>
=======
 8001a6a:	f00c fce9 	bl	800e440 <memset>
>>>>>>> render
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001a6e:	4818      	ldr	r0, [pc, #96]	; (8001ad0 <MX_FMC_Init+0x70>)
 8001a70:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001a74:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001a76:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001a7a:	6043      	str	r3, [r0, #4]
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	6082      	str	r2, [r0, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001a80:	60c2      	str	r2, [r0, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001a82:	6102      	str	r2, [r0, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001a84:	2110      	movs	r1, #16
 8001a86:	6141      	str	r1, [r0, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001a88:	6182      	str	r2, [r0, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001a8a:	61c2      	str	r2, [r0, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001a8c:	6202      	str	r2, [r0, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a92:	6243      	str	r3, [r0, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001a94:	6282      	str	r2, [r0, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001a96:	62c2      	str	r2, [r0, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001a98:	6302      	str	r2, [r0, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001a9a:	6342      	str	r2, [r0, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001a9c:	6382      	str	r2, [r0, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001a9e:	63c2      	str	r2, [r0, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8001aa0:	6442      	str	r2, [r0, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001aa2:	6402      	str	r2, [r0, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 8001aa4:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
  Timing.AddressSetupTime = 1;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	9300      	str	r3, [sp, #0]
  Timing.AddressHoldTime = 15;
 8001aac:	240f      	movs	r4, #15
 8001aae:	9401      	str	r4, [sp, #4]
  Timing.DataSetupTime = 1;
 8001ab0:	9302      	str	r3, [sp, #8]
  Timing.DataHoldTime = 1;
 8001ab2:	9303      	str	r3, [sp, #12]
  Timing.BusTurnAroundDuration = 1;
 8001ab4:	9304      	str	r3, [sp, #16]
  Timing.CLKDivision = 16;
 8001ab6:	9105      	str	r1, [sp, #20]
  Timing.DataLatency = 17;
 8001ab8:	2311      	movs	r3, #17
 8001aba:	9306      	str	r3, [sp, #24]
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001abc:	4669      	mov	r1, sp
<<<<<<< HEAD
 8001abe:	f007 fd07 	bl	80094d0 <HAL_SRAM_Init>
=======
 8001abe:	f007 fc73 	bl	80093a8 <HAL_SRAM_Init>
>>>>>>> render
 8001ac2:	b908      	cbnz	r0, 8001ac8 <MX_FMC_Init+0x68>
}
 8001ac4:	b008      	add	sp, #32
 8001ac6:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8001ac8:	f000 fa56 	bl	8001f78 <Error_Handler>
}
 8001acc:	e7fa      	b.n	8001ac4 <MX_FMC_Init+0x64>
 8001ace:	bf00      	nop
 8001ad0:	200017a0 	.word	0x200017a0

08001ad4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001ad4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001ad6:	f7ff ff7b 	bl	80019d0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001ada:	bd08      	pop	{r3, pc}

08001adc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ae0:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae2:	2400      	movs	r4, #0
 8001ae4:	9407      	str	r4, [sp, #28]
 8001ae6:	9408      	str	r4, [sp, #32]
 8001ae8:	9409      	str	r4, [sp, #36]	; 0x24
 8001aea:	940a      	str	r4, [sp, #40]	; 0x28
 8001aec:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aee:	4b71      	ldr	r3, [pc, #452]	; (8001cb4 <MX_GPIO_Init+0x1d8>)
 8001af0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001af2:	f042 0210 	orr.w	r2, r2, #16
 8001af6:	64da      	str	r2, [r3, #76]	; 0x4c
 8001af8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001afa:	f002 0210 	and.w	r2, r2, #16
 8001afe:	9200      	str	r2, [sp, #0]
 8001b00:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b04:	f042 0204 	orr.w	r2, r2, #4
 8001b08:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b0c:	f002 0204 	and.w	r2, r2, #4
 8001b10:	9201      	str	r2, [sp, #4]
 8001b12:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b16:	f042 0220 	orr.w	r2, r2, #32
 8001b1a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b1e:	f002 0220 	and.w	r2, r2, #32
 8001b22:	9202      	str	r2, [sp, #8]
 8001b24:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b28:	f042 0201 	orr.w	r2, r2, #1
 8001b2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b30:	f002 0201 	and.w	r2, r2, #1
 8001b34:	9203      	str	r2, [sp, #12]
 8001b36:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b3a:	f042 0202 	orr.w	r2, r2, #2
 8001b3e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b42:	f002 0202 	and.w	r2, r2, #2
 8001b46:	9204      	str	r2, [sp, #16]
 8001b48:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b4c:	f042 0208 	orr.w	r2, r2, #8
 8001b50:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b54:	f002 0208 	and.w	r2, r2, #8
 8001b58:	9205      	str	r2, [sp, #20]
 8001b5a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b62:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b6a:	9306      	str	r3, [sp, #24]
 8001b6c:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED1_Pin|LED2_Pin|LED3_Pin|LED0_Pin
 8001b6e:	f8df a150 	ldr.w	sl, [pc, #336]	; 8001cc0 <MX_GPIO_Init+0x1e4>
 8001b72:	4622      	mov	r2, r4
 8001b74:	f640 013c 	movw	r1, #2108	; 0x83c
 8001b78:	4650      	mov	r0, sl
<<<<<<< HEAD
 8001b7a:	f005 f951 	bl	8006e20 <HAL_GPIO_WritePin>
=======
 8001b7a:	f005 f8bd 	bl	8006cf8 <HAL_GPIO_WritePin>
>>>>>>> render
                          |ARDUINO_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);
 8001b7e:	4f4e      	ldr	r7, [pc, #312]	; (8001cb8 <MX_GPIO_Init+0x1dc>)
 8001b80:	4622      	mov	r2, r4
 8001b82:	210f      	movs	r1, #15
 8001b84:	4638      	mov	r0, r7
<<<<<<< HEAD
 8001b86:	f005 f94b 	bl	8006e20 <HAL_GPIO_WritePin>
=======
 8001b86:	f005 f8b7 	bl	8006cf8 <HAL_GPIO_WritePin>
>>>>>>> render

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 8001b8a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8001cc4 <MX_GPIO_Init+0x1e8>
 8001b8e:	4622      	mov	r2, r4
 8001b90:	2180      	movs	r1, #128	; 0x80
 8001b92:	4648      	mov	r0, r9
<<<<<<< HEAD
 8001b94:	f005 f944 	bl	8006e20 <HAL_GPIO_WritePin>
=======
 8001b94:	f005 f8b0 	bl	8006cf8 <HAL_GPIO_WritePin>
>>>>>>> render

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001b98:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8001cc8 <MX_GPIO_Init+0x1ec>
 8001b9c:	4622      	mov	r2, r4
 8001b9e:	2108      	movs	r1, #8
 8001ba0:	4640      	mov	r0, r8
<<<<<<< HEAD
 8001ba2:	f005 f93d 	bl	8006e20 <HAL_GPIO_WritePin>
=======
 8001ba2:	f005 f8a9 	bl	8006cf8 <HAL_GPIO_WritePin>
>>>>>>> render

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LIN_SLP_Pin|LCD_BKLT_Pin, GPIO_PIN_RESET);
 8001ba6:	f8df b124 	ldr.w	fp, [pc, #292]	; 8001ccc <MX_GPIO_Init+0x1f0>
 8001baa:	4622      	mov	r2, r4
 8001bac:	2160      	movs	r1, #96	; 0x60
 8001bae:	4658      	mov	r0, fp
<<<<<<< HEAD
 8001bb0:	f005 f936 	bl	8006e20 <HAL_GPIO_WritePin>
=======
 8001bb0:	f005 f8a2 	bl	8006cf8 <HAL_GPIO_WritePin>
>>>>>>> render

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001bb4:	4e41      	ldr	r6, [pc, #260]	; (8001cbc <MX_GPIO_Init+0x1e0>)
 8001bb6:	4622      	mov	r2, r4
 8001bb8:	2101      	movs	r1, #1
 8001bba:	4630      	mov	r0, r6
<<<<<<< HEAD
 8001bbc:	f005 f930 	bl	8006e20 <HAL_GPIO_WritePin>
=======
 8001bbc:	f005 f89c 	bl	8006cf8 <HAL_GPIO_WritePin>
>>>>>>> render

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	2102      	movs	r1, #2
 8001bc4:	4630      	mov	r0, r6
<<<<<<< HEAD
 8001bc6:	f005 f92b 	bl	8006e20 <HAL_GPIO_WritePin>
=======
 8001bc6:	f005 f897 	bl	8006cf8 <HAL_GPIO_WritePin>
>>>>>>> render

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = JOY_BTN_Pin|BTN_OK_Pin;
 8001bca:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001bce:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd0:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd2:	2501      	movs	r5, #1
 8001bd4:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd6:	a907      	add	r1, sp, #28
 8001bd8:	4638      	mov	r0, r7
<<<<<<< HEAD
 8001bda:	f005 f837 	bl	8006c4c <HAL_GPIO_Init>
=======
 8001bda:	f004 ffa3 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_ESC_Pin;
 8001bde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001be2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001be4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001be8:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bea:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(BTN_ESC_GPIO_Port, &GPIO_InitStruct);
 8001bec:	a907      	add	r1, sp, #28
 8001bee:	4638      	mov	r0, r7
<<<<<<< HEAD
 8001bf0:	f005 f82c 	bl	8006c4c <HAL_GPIO_Init>
=======
 8001bf0:	f004 ff98 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|ARDUINO_CS_Pin;
 8001bf4:	f640 0338 	movw	r3, #2104	; 0x838
 8001bf8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfa:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c00:	a907      	add	r1, sp, #28
 8001c02:	4650      	mov	r0, sl
<<<<<<< HEAD
 8001c04:	f005 f822 	bl	8006c4c <HAL_GPIO_Init>
=======
 8001c04:	f004 ff8e 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin;
 8001c08:	230f      	movs	r3, #15
 8001c0a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c10:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c12:	a907      	add	r1, sp, #28
 8001c14:	4638      	mov	r0, r7
<<<<<<< HEAD
 8001c16:	f005 f819 	bl	8006c4c <HAL_GPIO_Init>
=======
 8001c16:	f004 ff85 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c22:	2303      	movs	r3, #3
 8001c24:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001c26:	a907      	add	r1, sp, #28
 8001c28:	4650      	mov	r0, sl
<<<<<<< HEAD
 8001c2a:	f005 f80f 	bl	8006c4c <HAL_GPIO_Init>
=======
 8001c2a:	f004 ff7b 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_DOWN_Pin|BTN_LEFT_Pin|BTN_RIGHT_Pin;
 8001c2e:	f240 1343 	movw	r3, #323	; 0x143
 8001c32:	9307      	str	r3, [sp, #28]
//  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c34:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c38:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c3a:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c3c:	a907      	add	r1, sp, #28
 8001c3e:	4648      	mov	r0, r9
<<<<<<< HEAD
 8001c40:	f005 f804 	bl	8006c4c <HAL_GPIO_Init>
=======
 8001c40:	f004 ff70 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c48:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 8001c4e:	a907      	add	r1, sp, #28
 8001c50:	4648      	mov	r0, r9
<<<<<<< HEAD
 8001c52:	f004 fffb 	bl	8006c4c <HAL_GPIO_Init>
=======
 8001c52:	f004 ff67 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001c56:	2308      	movs	r3, #8
 8001c58:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001c60:	a907      	add	r1, sp, #28
 8001c62:	4640      	mov	r0, r8
<<<<<<< HEAD
 8001c64:	f004 fff2 	bl	8006c4c <HAL_GPIO_Init>
=======
 8001c64:	f004 ff5e 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_PENIRQ_Pin;
 8001c68:	2340      	movs	r3, #64	; 0x40
 8001c6a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_PENIRQ_GPIO_Port, &GPIO_InitStruct);
 8001c70:	a907      	add	r1, sp, #28
 8001c72:	4640      	mov	r0, r8
<<<<<<< HEAD
 8001c74:	f004 ffea 	bl	8006c4c <HAL_GPIO_Init>
=======
 8001c74:	f004 ff56 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LIN_SLP_Pin|LCD_BKLT_Pin;
 8001c78:	2360      	movs	r3, #96	; 0x60
 8001c7a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c82:	a907      	add	r1, sp, #28
 8001c84:	4658      	mov	r0, fp
<<<<<<< HEAD
 8001c86:	f004 ffe1 	bl	8006c4c <HAL_GPIO_Init>
=======
 8001c86:	f004 ff4d 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8001c8a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8001c92:	a907      	add	r1, sp, #28
 8001c94:	4630      	mov	r0, r6
<<<<<<< HEAD
 8001c96:	f004 ffd9 	bl	8006c4c <HAL_GPIO_Init>
=======
 8001c96:	f004 ff45 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca0:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ca2:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8001ca4:	a907      	add	r1, sp, #28
 8001ca6:	4630      	mov	r0, r6
<<<<<<< HEAD
 8001ca8:	f004 ffd0 	bl	8006c4c <HAL_GPIO_Init>
=======
 8001ca8:	f004 ff3c 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render

}
 8001cac:	b00d      	add	sp, #52	; 0x34
 8001cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	48000800 	.word	0x48000800
 8001cbc:	48001000 	.word	0x48001000
 8001cc0:	48001400 	.word	0x48001400
 8001cc4:	48001800 	.word	0x48001800
 8001cc8:	48000c00 	.word	0x48000c00
 8001ccc:	48000400 	.word	0x48000400

08001cd0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001cd0:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cd2:	4812      	ldr	r0, [pc, #72]	; (8001d1c <MX_I2C1_Init+0x4c>)
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <MX_I2C1_Init+0x50>)
 8001cd6:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x10902A95;
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <MX_I2C1_Init+0x54>)
 8001cda:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ce4:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ce6:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ce8:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cea:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cec:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
<<<<<<< HEAD
 8001cee:	f005 f8e5 	bl	8006ebc <HAL_I2C_Init>
=======
 8001cee:	f005 f851 	bl	8006d94 <HAL_I2C_Init>
>>>>>>> render
 8001cf2:	b950      	cbnz	r0, 8001d0a <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4809      	ldr	r0, [pc, #36]	; (8001d1c <MX_I2C1_Init+0x4c>)
<<<<<<< HEAD
 8001cf8:	f005 fc4b 	bl	8007592 <HAL_I2CEx_ConfigAnalogFilter>
=======
 8001cf8:	f005 fbb7 	bl	800746a <HAL_I2CEx_ConfigAnalogFilter>
>>>>>>> render
 8001cfc:	b940      	cbnz	r0, 8001d10 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 5) != HAL_OK)
 8001cfe:	2105      	movs	r1, #5
 8001d00:	4806      	ldr	r0, [pc, #24]	; (8001d1c <MX_I2C1_Init+0x4c>)
<<<<<<< HEAD
 8001d02:	f005 fc74 	bl	80075ee <HAL_I2CEx_ConfigDigitalFilter>
=======
 8001d02:	f005 fbe0 	bl	80074c6 <HAL_I2CEx_ConfigDigitalFilter>
>>>>>>> render
 8001d06:	b930      	cbnz	r0, 8001d16 <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d08:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001d0a:	f000 f935 	bl	8001f78 <Error_Handler>
 8001d0e:	e7f1      	b.n	8001cf4 <MX_I2C1_Init+0x24>
    Error_Handler();
 8001d10:	f000 f932 	bl	8001f78 <Error_Handler>
 8001d14:	e7f3      	b.n	8001cfe <MX_I2C1_Init+0x2e>
    Error_Handler();
 8001d16:	f000 f92f 	bl	8001f78 <Error_Handler>
}
 8001d1a:	e7f5      	b.n	8001d08 <MX_I2C1_Init+0x38>
 8001d1c:	200018b8 	.word	0x200018b8
 8001d20:	40005400 	.word	0x40005400
 8001d24:	10902a95 	.word	0x10902a95

08001d28 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001d28:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d2a:	4815      	ldr	r0, [pc, #84]	; (8001d80 <MX_I2C2_Init+0x58>)
 8001d2c:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <MX_I2C2_Init+0x5c>)
 8001d2e:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x60505F8C;
 8001d30:	f103 5301 	add.w	r3, r3, #541065216	; 0x20400000
 8001d34:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8001d38:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 8001d3c:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d42:	2201      	movs	r2, #1
 8001d44:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d46:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001d48:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d4a:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d4c:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d4e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
<<<<<<< HEAD
 8001d50:	f005 f8b4 	bl	8006ebc <HAL_I2C_Init>
=======
 8001d50:	f005 f820 	bl	8006d94 <HAL_I2C_Init>
>>>>>>> render
 8001d54:	b950      	cbnz	r0, 8001d6c <MX_I2C2_Init+0x44>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d56:	2100      	movs	r1, #0
 8001d58:	4809      	ldr	r0, [pc, #36]	; (8001d80 <MX_I2C2_Init+0x58>)
<<<<<<< HEAD
 8001d5a:	f005 fc1a 	bl	8007592 <HAL_I2CEx_ConfigAnalogFilter>
=======
 8001d5a:	f005 fb86 	bl	800746a <HAL_I2CEx_ConfigAnalogFilter>
>>>>>>> render
 8001d5e:	b940      	cbnz	r0, 8001d72 <MX_I2C2_Init+0x4a>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d60:	2100      	movs	r1, #0
 8001d62:	4807      	ldr	r0, [pc, #28]	; (8001d80 <MX_I2C2_Init+0x58>)
<<<<<<< HEAD
 8001d64:	f005 fc43 	bl	80075ee <HAL_I2CEx_ConfigDigitalFilter>
=======
 8001d64:	f005 fbaf 	bl	80074c6 <HAL_I2CEx_ConfigDigitalFilter>
>>>>>>> render
 8001d68:	b930      	cbnz	r0, 8001d78 <MX_I2C2_Init+0x50>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d6a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001d6c:	f000 f904 	bl	8001f78 <Error_Handler>
 8001d70:	e7f1      	b.n	8001d56 <MX_I2C2_Init+0x2e>
    Error_Handler();
 8001d72:	f000 f901 	bl	8001f78 <Error_Handler>
 8001d76:	e7f3      	b.n	8001d60 <MX_I2C2_Init+0x38>
    Error_Handler();
 8001d78:	f000 f8fe 	bl	8001f78 <Error_Handler>
}
 8001d7c:	e7f5      	b.n	8001d6a <MX_I2C2_Init+0x42>
 8001d7e:	bf00      	nop
 8001d80:	20001904 	.word	0x20001904
 8001d84:	40005800 	.word	0x40005800

08001d88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d8c:	b0a1      	sub	sp, #132	; 0x84
 8001d8e:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	2100      	movs	r1, #0
 8001d92:	911b      	str	r1, [sp, #108]	; 0x6c
 8001d94:	911c      	str	r1, [sp, #112]	; 0x70
 8001d96:	911d      	str	r1, [sp, #116]	; 0x74
 8001d98:	911e      	str	r1, [sp, #120]	; 0x78
 8001d9a:	911f      	str	r1, [sp, #124]	; 0x7c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d9c:	2254      	movs	r2, #84	; 0x54
 8001d9e:	a806      	add	r0, sp, #24
<<<<<<< HEAD
 8001da0:	f00c fc1a 	bl	800e5d8 <memset>
=======
 8001da0:	f00c fb4e 	bl	800e440 <memset>
>>>>>>> render
  if(i2cHandle->Instance==I2C1)
 8001da4:	6823      	ldr	r3, [r4, #0]
 8001da6:	4a5d      	ldr	r2, [pc, #372]	; (8001f1c <HAL_I2C_MspInit+0x194>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d006      	beq.n	8001dba <HAL_I2C_MspInit+0x32>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 8001dac:	4a5c      	ldr	r2, [pc, #368]	; (8001f20 <HAL_I2C_MspInit+0x198>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	f000 8086 	beq.w	8001ec0 <HAL_I2C_MspInit+0x138>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001db4:	b021      	add	sp, #132	; 0x84
 8001db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001dba:	2340      	movs	r3, #64	; 0x40
 8001dbc:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dbe:	a806      	add	r0, sp, #24
<<<<<<< HEAD
 8001dc0:	f007 f956 	bl	8009070 <HAL_RCCEx_PeriphCLKConfig>
=======
 8001dc0:	f007 f8c2 	bl	8008f48 <HAL_RCCEx_PeriphCLKConfig>
>>>>>>> render
 8001dc4:	2800      	cmp	r0, #0
 8001dc6:	d172      	bne.n	8001eae <HAL_I2C_MspInit+0x126>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc8:	4e56      	ldr	r6, [pc, #344]	; (8001f24 <HAL_I2C_MspInit+0x19c>)
 8001dca:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	64f3      	str	r3, [r6, #76]	; 0x4c
 8001dd2:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ddc:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001dde:	f043 0302 	orr.w	r3, r3, #2
 8001de2:	64f3      	str	r3, [r6, #76]	; 0x4c
 8001de4:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	9302      	str	r3, [sp, #8]
 8001dec:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001df2:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001df4:	f04f 0912 	mov.w	r9, #18
 8001df8:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2500      	movs	r5, #0
 8001dfe:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	951e      	str	r5, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e02:	f04f 0804 	mov.w	r8, #4
 8001e06:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0a:	a91b      	add	r1, sp, #108	; 0x6c
 8001e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< HEAD
 8001e10:	f004 ff1c 	bl	8006c4c <HAL_GPIO_Init>
=======
 8001e10:	f004 fe88 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e14:	2780      	movs	r7, #128	; 0x80
 8001e16:	971b      	str	r7, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e18:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1e:	951e      	str	r5, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e20:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e24:	a91b      	add	r1, sp, #108	; 0x6c
 8001e26:	4840      	ldr	r0, [pc, #256]	; (8001f28 <HAL_I2C_MspInit+0x1a0>)
<<<<<<< HEAD
 8001e28:	f004 ff10 	bl	8006c4c <HAL_GPIO_Init>
=======
 8001e28:	f004 fe7c 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e2c:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001e2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e32:	65b3      	str	r3, [r6, #88]	; 0x58
 8001e34:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001e36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e3a:	9303      	str	r3, [sp, #12]
 8001e3c:	9b03      	ldr	r3, [sp, #12]
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8001e3e:	483b      	ldr	r0, [pc, #236]	; (8001f2c <HAL_I2C_MspInit+0x1a4>)
 8001e40:	4b3b      	ldr	r3, [pc, #236]	; (8001f30 <HAL_I2C_MspInit+0x1a8>)
 8001e42:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001e44:	2310      	movs	r3, #16
 8001e46:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e48:	6085      	str	r5, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e4a:	60c5      	str	r5, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e4c:	6107      	str	r7, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e4e:	6145      	str	r5, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e50:	6185      	str	r5, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001e52:	61c5      	str	r5, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e54:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
<<<<<<< HEAD
 8001e56:	f004 fc13 	bl	8006680 <HAL_DMA_Init>
=======
 8001e56:	f004 fb7f 	bl	8006558 <HAL_DMA_Init>
>>>>>>> render
 8001e5a:	bb58      	cbnz	r0, 8001eb4 <HAL_I2C_MspInit+0x12c>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001e5c:	4b33      	ldr	r3, [pc, #204]	; (8001f2c <HAL_I2C_MspInit+0x1a4>)
 8001e5e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001e60:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 8001e62:	4834      	ldr	r0, [pc, #208]	; (8001f34 <HAL_I2C_MspInit+0x1ac>)
 8001e64:	4b34      	ldr	r3, [pc, #208]	; (8001f38 <HAL_I2C_MspInit+0x1b0>)
 8001e66:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001e68:	2311      	movs	r3, #17
 8001e6a:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e6c:	2310      	movs	r3, #16
 8001e6e:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e74:	2280      	movs	r2, #128	; 0x80
 8001e76:	6102      	str	r2, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e78:	6143      	str	r3, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e7a:	6183      	str	r3, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001e7c:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e7e:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
<<<<<<< HEAD
 8001e80:	f004 fbfe 	bl	8006680 <HAL_DMA_Init>
=======
 8001e80:	f004 fb6a 	bl	8006558 <HAL_DMA_Init>
>>>>>>> render
 8001e84:	b9c8      	cbnz	r0, 8001eba <HAL_I2C_MspInit+0x132>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001e86:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <HAL_I2C_MspInit+0x1ac>)
 8001e88:	63a3      	str	r3, [r4, #56]	; 0x38
 8001e8a:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	4611      	mov	r1, r2
 8001e90:	201f      	movs	r0, #31
<<<<<<< HEAD
 8001e92:	f004 f9b9 	bl	8006208 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e96:	201f      	movs	r0, #31
 8001e98:	f004 f9ee 	bl	8006278 <HAL_NVIC_EnableIRQ>
=======
 8001e92:	f004 f925 	bl	80060e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e96:	201f      	movs	r0, #31
 8001e98:	f004 f95a 	bl	8006150 <HAL_NVIC_EnableIRQ>
>>>>>>> render
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	2020      	movs	r0, #32
<<<<<<< HEAD
 8001ea2:	f004 f9b1 	bl	8006208 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001ea6:	2020      	movs	r0, #32
 8001ea8:	f004 f9e6 	bl	8006278 <HAL_NVIC_EnableIRQ>
=======
 8001ea2:	f004 f91d 	bl	80060e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001ea6:	2020      	movs	r0, #32
 8001ea8:	f004 f952 	bl	8006150 <HAL_NVIC_EnableIRQ>
>>>>>>> render
 8001eac:	e782      	b.n	8001db4 <HAL_I2C_MspInit+0x2c>
      Error_Handler();
 8001eae:	f000 f863 	bl	8001f78 <Error_Handler>
 8001eb2:	e789      	b.n	8001dc8 <HAL_I2C_MspInit+0x40>
      Error_Handler();
 8001eb4:	f000 f860 	bl	8001f78 <Error_Handler>
 8001eb8:	e7d0      	b.n	8001e5c <HAL_I2C_MspInit+0xd4>
      Error_Handler();
 8001eba:	f000 f85d 	bl	8001f78 <Error_Handler>
 8001ebe:	e7e2      	b.n	8001e86 <HAL_I2C_MspInit+0xfe>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ec4:	a806      	add	r0, sp, #24
<<<<<<< HEAD
 8001ec6:	f007 f8d3 	bl	8009070 <HAL_RCCEx_PeriphCLKConfig>
=======
 8001ec6:	f007 f83f 	bl	8008f48 <HAL_RCCEx_PeriphCLKConfig>
>>>>>>> render
 8001eca:	bb18      	cbnz	r0, 8001f14 <HAL_I2C_MspInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ecc:	4c15      	ldr	r4, [pc, #84]	; (8001f24 <HAL_I2C_MspInit+0x19c>)
 8001ece:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001ed6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	9304      	str	r3, [sp, #16]
 8001ede:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ee0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ee4:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ee6:	2312      	movs	r3, #18
 8001ee8:	931c      	str	r3, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eea:	2301      	movs	r3, #1
 8001eec:	931d      	str	r3, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	931e      	str	r3, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ef2:	2304      	movs	r3, #4
 8001ef4:	931f      	str	r3, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef6:	a91b      	add	r1, sp, #108	; 0x6c
 8001ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< HEAD
 8001efc:	f004 fea6 	bl	8006c4c <HAL_GPIO_Init>
=======
 8001efc:	f004 fe12 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f06:	65a3      	str	r3, [r4, #88]	; 0x58
 8001f08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0e:	9305      	str	r3, [sp, #20]
 8001f10:	9b05      	ldr	r3, [sp, #20]
}
 8001f12:	e74f      	b.n	8001db4 <HAL_I2C_MspInit+0x2c>
      Error_Handler();
 8001f14:	f000 f830 	bl	8001f78 <Error_Handler>
 8001f18:	e7d8      	b.n	8001ecc <HAL_I2C_MspInit+0x144>
 8001f1a:	bf00      	nop
 8001f1c:	40005400 	.word	0x40005400
 8001f20:	40005800 	.word	0x40005800
 8001f24:	40021000 	.word	0x40021000
 8001f28:	48000400 	.word	0x48000400
 8001f2c:	200017f8 	.word	0x200017f8
 8001f30:	40020030 	.word	0x40020030
 8001f34:	20001858 	.word	0x20001858
 8001f38:	40020044 	.word	0x40020044

08001f3c <joystick_init>:
 */
#include "joystick.h"

void joystick_init(joystick_t *joystick)
{
	joystick->raw_min.x = 640;
 8001f3c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001f40:	6003      	str	r3, [r0, #0]
	joystick->raw_max.x = 3070;
 8001f42:	f640 33fe 	movw	r3, #3070	; 0xbfe
 8001f46:	6083      	str	r3, [r0, #8]
	joystick->raw_min.y = 733;
 8001f48:	f240 23dd 	movw	r3, #733	; 0x2dd
 8001f4c:	6043      	str	r3, [r0, #4]
	joystick->raw_max.y = 3185;
 8001f4e:	f640 4371 	movw	r3, #3185	; 0xc71
 8001f52:	60c3      	str	r3, [r0, #12]
	joystick->out_max.x = 90;
 8001f54:	235a      	movs	r3, #90	; 0x5a
 8001f56:	6103      	str	r3, [r0, #16]
	joystick->out_max.y = 90;
 8001f58:	6143      	str	r3, [r0, #20]


	joystick->x_k = (float) joystick->out_max.x / (joystick->raw_max.x - joystick->raw_min.x);
 8001f5a:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <joystick_init+0x34>)
 8001f5c:	6183      	str	r3, [r0, #24]
	joystick->y_k = (float) joystick->out_max.y / (joystick->raw_max.y - joystick->raw_min.y);
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <joystick_init+0x38>)
 8001f60:	61c3      	str	r3, [r0, #28]
	joystick->n.x = (joystick->raw_max.x+joystick->raw_min.x)/2;
 8001f62:	f240 733f 	movw	r3, #1855	; 0x73f
 8001f66:	6203      	str	r3, [r0, #32]
	joystick->n.y = (joystick->raw_max.y+joystick->raw_min.y)/2;
 8001f68:	f240 73a7 	movw	r3, #1959	; 0x7a7
 8001f6c:	6243      	str	r3, [r0, #36]	; 0x24

}
 8001f6e:	4770      	bx	lr
 8001f70:	3d17b426 	.word	0x3d17b426
 8001f74:	3d1657b3 	.word	0x3d1657b3

08001f78 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001f78:	b082      	sub	sp, #8
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f7a:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	volatile int a = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	9301      	str	r3, [sp, #4]
	while (1)
	{
		a++;
 8001f80:	9b01      	ldr	r3, [sp, #4]
 8001f82:	3301      	adds	r3, #1
 8001f84:	9301      	str	r3, [sp, #4]
	while (1)
 8001f86:	e7fb      	b.n	8001f80 <Error_Handler+0x8>

08001f88 <SystemClock_Config>:
{
 8001f88:	b500      	push	{lr}
 8001f8a:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f8c:	2238      	movs	r2, #56	; 0x38
 8001f8e:	2100      	movs	r1, #0
 8001f90:	a806      	add	r0, sp, #24
<<<<<<< HEAD
 8001f92:	f00c fb21 	bl	800e5d8 <memset>
=======
 8001f92:	f00c fa55 	bl	800e440 <memset>
>>>>>>> render
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f96:	2000      	movs	r0, #0
 8001f98:	9001      	str	r0, [sp, #4]
 8001f9a:	9002      	str	r0, [sp, #8]
 8001f9c:	9003      	str	r0, [sp, #12]
 8001f9e:	9004      	str	r0, [sp, #16]
 8001fa0:	9005      	str	r0, [sp, #20]
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
<<<<<<< HEAD
 8001fa2:	f006 fb49 	bl	8008638 <HAL_PWREx_ControlVoltageScaling>
=======
 8001fa2:	f006 fab5 	bl	8008510 <HAL_PWREx_ControlVoltageScaling>
>>>>>>> render
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_HSE;
 8001fa6:	2321      	movs	r3, #33	; 0x21
 8001fa8:	9306      	str	r3, [sp, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001faa:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001fae:	9307      	str	r3, [sp, #28]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	920c      	str	r2, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fb8:	2103      	movs	r1, #3
 8001fba:	910e      	str	r1, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001fbc:	920f      	str	r2, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 42;
 8001fbe:	222a      	movs	r2, #42	; 0x2a
 8001fc0:	9210      	str	r2, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fc2:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8001fc4:	2206      	movs	r2, #6
 8001fc6:	9212      	str	r2, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fc8:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fca:	a806      	add	r0, sp, #24
<<<<<<< HEAD
 8001fcc:	f006 fc72 	bl	80088b4 <HAL_RCC_OscConfig>
=======
 8001fcc:	f006 fbde 	bl	800878c <HAL_RCC_OscConfig>
>>>>>>> render
 8001fd0:	b978      	cbnz	r0, 8001ff2 <SystemClock_Config+0x6a>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fd2:	230f      	movs	r3, #15
 8001fd4:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fde:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fe0:	9305      	str	r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_10) != HAL_OK)
 8001fe2:	210a      	movs	r1, #10
 8001fe4:	a801      	add	r0, sp, #4
<<<<<<< HEAD
 8001fe6:	f006 ff1d 	bl	8008e24 <HAL_RCC_ClockConfig>
=======
 8001fe6:	f006 fe89 	bl	8008cfc <HAL_RCC_ClockConfig>
>>>>>>> render
 8001fea:	b920      	cbnz	r0, 8001ff6 <SystemClock_Config+0x6e>
}
 8001fec:	b015      	add	sp, #84	; 0x54
 8001fee:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001ff2:	f7ff ffc1 	bl	8001f78 <Error_Handler>
		Error_Handler();
 8001ff6:	f7ff ffbf 	bl	8001f78 <Error_Handler>
	...

08001ffc <main>:
{
 8001ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002000:	b08e      	sub	sp, #56	; 0x38
	coord_t joystick_raw = {0, 0};
 8002002:	2400      	movs	r4, #0
 8002004:	940c      	str	r4, [sp, #48]	; 0x30
 8002006:	940d      	str	r4, [sp, #52]	; 0x34
	coord_t joystick_new = {0, 0};
 8002008:	940a      	str	r4, [sp, #40]	; 0x28
 800200a:	940b      	str	r4, [sp, #44]	; 0x2c
	HAL_Init();
<<<<<<< HEAD
 800200c:	f003 fa98 	bl	8005540 <HAL_Init>
=======
 800200c:	f003 fa04 	bl	8005418 <HAL_Init>
>>>>>>> render
	SystemClock_Config();
 8002010:	f7ff ffba 	bl	8001f88 <SystemClock_Config>
	MX_GPIO_Init();
 8002014:	f7ff fd62 	bl	8001adc <MX_GPIO_Init>
	MX_ADC1_Init();
 8002018:	f7ff f89a 	bl	8001150 <MX_ADC1_Init>
	MX_ADC2_Init();
 800201c:	f7ff f8e8 	bl	80011f0 <MX_ADC2_Init>
	MX_FMC_Init();
 8002020:	f7ff fd1e 	bl	8001a60 <MX_FMC_Init>
	MX_I2C2_Init();
 8002024:	f7ff fe80 	bl	8001d28 <MX_I2C2_Init>
	MX_UART4_Init();
<<<<<<< HEAD
 8002028:	f002 fc68 	bl	80048fc <MX_UART4_Init>
	MX_UART5_Init();
 800202c:	f002 fc9a 	bl	8004964 <MX_UART5_Init>
	MX_USART1_UART_Init();
 8002030:	f002 fccc 	bl	80049cc <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8002034:	f002 fdc4 	bl	8004bc0 <MX_USART2_UART_Init>
=======
 8002028:	f002 fc84 	bl	8004934 <MX_UART4_Init>
	MX_UART5_Init();
 800202c:	f002 fcb6 	bl	800499c <MX_UART5_Init>
	MX_USART1_UART_Init();
 8002030:	f002 fce8 	bl	8004a04 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8002034:	f002 fde0 	bl	8004bf8 <MX_USART2_UART_Init>
>>>>>>> render
	MX_QUADSPI1_Init();
 8002038:	f000 fca4 	bl	8002984 <MX_QUADSPI1_Init>
	MX_SPI1_Init();
<<<<<<< HEAD
 800203c:	f001 ffe4 	bl	8004008 <MX_SPI1_Init>
	MX_TIM5_Init();
 8002040:	f002 fa1e 	bl	8004480 <MX_TIM5_Init>
	MX_TIM8_Init();
 8002044:	f002 fa92 	bl	800456c <MX_TIM8_Init>
	MX_TIM20_Init();
 8002048:	f002 fbb0 	bl	80047ac <MX_TIM20_Init>
=======
 800203c:	f002 f800 	bl	8004040 <MX_SPI1_Init>
	MX_TIM5_Init();
 8002040:	f002 fa3a 	bl	80044b8 <MX_TIM5_Init>
	MX_TIM8_Init();
 8002044:	f002 faae 	bl	80045a4 <MX_TIM8_Init>
	MX_TIM20_Init();
 8002048:	f002 fbcc 	bl	80047e4 <MX_TIM20_Init>
>>>>>>> render
	MX_ADC3_Init();
 800204c:	f7ff f914 	bl	8001278 <MX_ADC3_Init>
	MX_DAC1_Init();
 8002050:	f7ff fb38 	bl	80016c4 <MX_DAC1_Init>
	MX_DAC2_Init();
 8002054:	f7ff fb64 	bl	8001720 <MX_DAC2_Init>
	MX_FDCAN2_Init();
 8002058:	f7ff fc4e 	bl	80018f8 <MX_FDCAN2_Init>
	MX_I2C1_Init();
 800205c:	f7ff fe38 	bl	8001cd0 <MX_I2C1_Init>
	MX_TIM15_Init();
<<<<<<< HEAD
 8002060:	f002 fb2c 	bl	80046bc <MX_TIM15_Init>
	MX_USART3_UART_Init();
 8002064:	f002 fde0 	bl	8004c28 <MX_USART3_UART_Init>
	MX_USB_Device_Init();
 8002068:	f00a fed0 	bl	800ce0c <MX_USB_Device_Init>
=======
 8002060:	f002 fb48 	bl	80046f4 <MX_TIM15_Init>
	MX_USART3_UART_Init();
 8002064:	f002 fdfc 	bl	8004c60 <MX_USART3_UART_Init>
	MX_USB_Device_Init();
 8002068:	f00a fe04 	bl	800cc74 <MX_USB_Device_Init>
>>>>>>> render
	MX_DMA_Init();
 800206c:	f7ff fbd8 	bl	8001820 <MX_DMA_Init>
	MX_CRC_Init();
 8002070:	f7ff fafc 	bl	800166c <MX_CRC_Init>
	MX_ADC4_Init(); // bug workaround: https://community.st.com/s/question/0D50X0000BVnBhASQV/bug-report-dma-and-adc-initialization-order-changed-in-stm32f4-hal-v1241-causing-incorrect-adc-operation
 8002074:	f7ff f950 	bl	8001318 <MX_ADC4_Init>
	for (uint8_t i = 0; i < 3; i++)
 8002078:	2c02      	cmp	r4, #2
 800207a:	d81e      	bhi.n	80020ba <main+0xbe>
		HAL_Delay(100);
 800207c:	2064      	movs	r0, #100	; 0x64
<<<<<<< HEAD
 800207e:	f003 fa81 	bl	8005584 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, LED0_Pin | LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_SET);
 8002082:	4e55      	ldr	r6, [pc, #340]	; (80021d8 <main+0x1dc>)
 8002084:	2201      	movs	r2, #1
 8002086:	213c      	movs	r1, #60	; 0x3c
 8002088:	4630      	mov	r0, r6
 800208a:	f004 fec9 	bl	8006e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, LED4_Pin | LED5_Pin | LED6_Pin | LED7_Pin, GPIO_PIN_SET);
 800208e:	4d53      	ldr	r5, [pc, #332]	; (80021dc <main+0x1e0>)
 8002090:	2201      	movs	r2, #1
 8002092:	210f      	movs	r1, #15
 8002094:	4628      	mov	r0, r5
 8002096:	f004 fec3 	bl	8006e20 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800209a:	2064      	movs	r0, #100	; 0x64
 800209c:	f003 fa72 	bl	8005584 <HAL_Delay>
=======
 800207e:	f003 f9ed 	bl	800545c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, LED0_Pin | LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_SET);
 8002082:	4e5a      	ldr	r6, [pc, #360]	; (80021ec <main+0x1f0>)
 8002084:	2201      	movs	r2, #1
 8002086:	213c      	movs	r1, #60	; 0x3c
 8002088:	4630      	mov	r0, r6
 800208a:	f004 fe35 	bl	8006cf8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, LED4_Pin | LED5_Pin | LED6_Pin | LED7_Pin, GPIO_PIN_SET);
 800208e:	4d58      	ldr	r5, [pc, #352]	; (80021f0 <main+0x1f4>)
 8002090:	2201      	movs	r2, #1
 8002092:	210f      	movs	r1, #15
 8002094:	4628      	mov	r0, r5
 8002096:	f004 fe2f 	bl	8006cf8 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800209a:	2064      	movs	r0, #100	; 0x64
 800209c:	f003 f9de 	bl	800545c <HAL_Delay>
>>>>>>> render
		HAL_GPIO_WritePin(GPIOF, LED0_Pin | LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_RESET);
 80020a0:	2200      	movs	r2, #0
 80020a2:	213c      	movs	r1, #60	; 0x3c
 80020a4:	4630      	mov	r0, r6
<<<<<<< HEAD
 80020a6:	f004 febb 	bl	8006e20 <HAL_GPIO_WritePin>
=======
 80020a6:	f004 fe27 	bl	8006cf8 <HAL_GPIO_WritePin>
>>>>>>> render
		HAL_GPIO_WritePin(GPIOC, LED4_Pin | LED5_Pin | LED6_Pin | LED7_Pin, GPIO_PIN_RESET);
 80020aa:	2200      	movs	r2, #0
 80020ac:	210f      	movs	r1, #15
 80020ae:	4628      	mov	r0, r5
<<<<<<< HEAD
 80020b0:	f004 feb6 	bl	8006e20 <HAL_GPIO_WritePin>
=======
 80020b0:	f004 fe22 	bl	8006cf8 <HAL_GPIO_WritePin>
>>>>>>> render
	for (uint8_t i = 0; i < 3; i++)
 80020b4:	3401      	adds	r4, #1
 80020b6:	b2e4      	uxtb	r4, r4
 80020b8:	e7de      	b.n	8002078 <main+0x7c>
	LCD_Init();
<<<<<<< HEAD
 80020ba:	f009 fd89 	bl	800bbd0 <LCD_Init>
	LCD_UG_init();
 80020be:	f009 fefb 	bl	800beb8 <LCD_UG_init>
	UG_DriverRegister(DRIVER_FILL_FRAME, (void *)_HW_FillFrame_);
 80020c2:	4947      	ldr	r1, [pc, #284]	; (80021e0 <main+0x1e4>)
 80020c4:	2001      	movs	r0, #1
 80020c6:	f009 ffc3 	bl	800c050 <UG_DriverRegister>
=======
 80020ba:	f009 fcf5 	bl	800baa8 <LCD_Init>
	LCD_UG_init();
 80020be:	f009 fe67 	bl	800bd90 <LCD_UG_init>
	UG_DriverRegister(DRIVER_FILL_FRAME, (void *)_HW_FillFrame_);
 80020c2:	494c      	ldr	r1, [pc, #304]	; (80021f4 <main+0x1f8>)
 80020c4:	2001      	movs	r0, #1
 80020c6:	f009 fef7 	bl	800beb8 <UG_DriverRegister>
>>>>>>> render
	joystick_init(&joystick);
 80020ca:	4668      	mov	r0, sp
 80020cc:	f7ff ff36 	bl	8001f3c <joystick_init>
	HAL_ADC_Start_DMA(&hadc4, &joystick_raw, 2);
 80020d0:	2202      	movs	r2, #2
 80020d2:	a90c      	add	r1, sp, #48	; 0x30
<<<<<<< HEAD
 80020d4:	4843      	ldr	r0, [pc, #268]	; (80021e4 <main+0x1e8>)
 80020d6:	f003 feff 	bl	8005ed8 <HAL_ADC_Start_DMA>
=======
 80020d4:	4848      	ldr	r0, [pc, #288]	; (80021f8 <main+0x1fc>)
 80020d6:	f003 fe6b 	bl	8005db0 <HAL_ADC_Start_DMA>
>>>>>>> render
	HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 2);
 80020da:	2202      	movs	r2, #2
 80020dc:	2101      	movs	r1, #1
 80020de:	2006      	movs	r0, #6
<<<<<<< HEAD
 80020e0:	f004 f892 	bl	8006208 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80020e4:	2006      	movs	r0, #6
 80020e6:	f004 f8c7 	bl	8006278 <HAL_NVIC_EnableIRQ>
=======
 80020e0:	f003 fffe 	bl	80060e0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80020e4:	2006      	movs	r0, #6
 80020e6:	f004 f833 	bl	8006150 <HAL_NVIC_EnableIRQ>
>>>>>>> render
	HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 2);
 80020ea:	2202      	movs	r2, #2
 80020ec:	2101      	movs	r1, #1
 80020ee:	2007      	movs	r0, #7
<<<<<<< HEAD
 80020f0:	f004 f88a 	bl	8006208 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80020f4:	2007      	movs	r0, #7
 80020f6:	f004 f8bf 	bl	8006278 <HAL_NVIC_EnableIRQ>
=======
 80020f0:	f003 fff6 	bl	80060e0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80020f4:	2007      	movs	r0, #7
 80020f6:	f004 f82b 	bl	8006150 <HAL_NVIC_EnableIRQ>
>>>>>>> render
	HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 2);
 80020fa:	2202      	movs	r2, #2
 80020fc:	2101      	movs	r1, #1
 80020fe:	200a      	movs	r0, #10
<<<<<<< HEAD
 8002100:	f004 f882 	bl	8006208 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002104:	2017      	movs	r0, #23
 8002106:	f004 f8b7 	bl	8006278 <HAL_NVIC_EnableIRQ>
	init_world();
 800210a:	f001 ff05 	bl	8003f18 <init_world>
	guysko* player = new_guysko();
 800210e:	f003 f927 	bl	8005360 <new_guysko>
 8002112:	4605      	mov	r5, r0
	movable* beings = new_movables();
 8002114:	f003 f95a 	bl	80053cc <new_movables>
	uint16_t new_camera_x = camera_x_block;
 8002118:	4f33      	ldr	r7, [pc, #204]	; (80021e8 <main+0x1ec>)
 800211a:	883c      	ldrh	r4, [r7, #0]
	uint16_t new_camera_y = camera_y_block;
 800211c:	4e33      	ldr	r6, [pc, #204]	; (80021ec <main+0x1f0>)
 800211e:	f8b6 8000 	ldrh.w	r8, [r6]
	player->pos->x = block_to_pixel(camera_x_block);
 8002122:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8002126:	4620      	mov	r0, r4
 8002128:	f002 fea5 	bl	8004e76 <block_to_pixel>
 800212c:	f8a9 0000 	strh.w	r0, [r9]
	player->pos->y = block_to_pixel(camera_y_block);
 8002130:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8002134:	8830      	ldrh	r0, [r6, #0]
 8002136:	f002 fe9e 	bl	8004e76 <block_to_pixel>
 800213a:	f8a9 0002 	strh.w	r0, [r9, #2]
=======
 8002100:	f003 ffee 	bl	80060e0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002104:	2017      	movs	r0, #23
 8002106:	f004 f823 	bl	8006150 <HAL_NVIC_EnableIRQ>
	init_world();
 800210a:	f001 ff21 	bl	8003f50 <init_world>
	guysko* player = new_guysko();
 800210e:	f003 f8a5 	bl	800525c <new_guysko>
 8002112:	4605      	mov	r5, r0
	movable* beings = new_movables();
 8002114:	f003 f8d8 	bl	80052c8 <new_movables>
	block_c new_camera_x = camera_x_block;
 8002118:	4f38      	ldr	r7, [pc, #224]	; (80021fc <main+0x200>)
 800211a:	883c      	ldrh	r4, [r7, #0]
	block_c new_camera_y = camera_y_block;
 800211c:	4e38      	ldr	r6, [pc, #224]	; (8002200 <main+0x204>)
 800211e:	f8b6 8000 	ldrh.w	r8, [r6]
	player->pos->x = block_to_pixel(camera_x_block);
 8002122:	4620      	mov	r0, r4
 8002124:	f002 fec3 	bl	8004eae <block_to_pixel>
 8002128:	692b      	ldr	r3, [r5, #16]
 800212a:	8018      	strh	r0, [r3, #0]
	player->pos->y = block_to_pixel(camera_y_block);
 800212c:	8830      	ldrh	r0, [r6, #0]
 800212e:	f002 febe 	bl	8004eae <block_to_pixel>
 8002132:	692b      	ldr	r3, [r5, #16]
 8002134:	8058      	strh	r0, [r3, #2]
>>>>>>> render
	update_camera_center(new_camera_x, new_camera_y);
 800213e:	4641      	mov	r1, r8
 8002140:	4620      	mov	r0, r4
 8002142:	f000 fe2b 	bl	8002d9c <update_camera_center>
	old_camera_x = camera_x_block;
<<<<<<< HEAD
 8002146:	883a      	ldrh	r2, [r7, #0]
 8002148:	4b29      	ldr	r3, [pc, #164]	; (80021f0 <main+0x1f4>)
 800214a:	801a      	strh	r2, [r3, #0]
	old_camera_y = camera_y_block;
 800214c:	8832      	ldrh	r2, [r6, #0]
 800214e:	4b29      	ldr	r3, [pc, #164]	; (80021f4 <main+0x1f8>)
 8002150:	801a      	strh	r2, [r3, #0]
	bool first_render = true;
 8002152:	2001      	movs	r0, #1
 8002154:	e016      	b.n	8002184 <main+0x188>
		} else if (camera_x_block - player->pos->x / BLOCK_WIDTH < -GUYSKO_WINDOW_SPAN_PIXEL / BLOCK_WIDTH) {
 8002156:	f113 0f12 	cmn.w	r3, #18
 800215a:	da09      	bge.n	8002170 <main+0x174>
			new_camera_x = camera_x_block + abs(-camera_x_block - GUYSKO_WINDOW_SPAN_PIXEL / BLOCK_WIDTH + player->pos->x / BLOCK_WIDTH);
 800215c:	f06f 0411 	mvn.w	r4, #17
 8002160:	1aa4      	subs	r4, r4, r2
 8002162:	4404      	add	r4, r0
 8002164:	2c00      	cmp	r4, #0
 8002166:	bfb8      	it	lt
 8002168:	4264      	neglt	r4, r4
 800216a:	fa12 f484 	uxtah	r4, r2, r4
 800216e:	b2a4      	uxth	r4, r4
		update_camera_center(new_camera_x, new_camera_y);
 8002170:	4620      	mov	r0, r4
 8002172:	f000 fe13 	bl	8002d9c <update_camera_center>
		action_set(&joystick_raw);
 8002176:	a80c      	add	r0, sp, #48	; 0x30
 8002178:	f7fe ffb6 	bl	80010e8 <action_set>
		while (!cycle)
 800217c:	4b1e      	ldr	r3, [pc, #120]	; (80021f8 <main+0x1fc>)
 800217e:	781b      	ldrb	r3, [r3, #0]
		first_render = false;
 8002180:	2000      	movs	r0, #0
		while (!cycle)
 8002182:	b32b      	cbz	r3, 80021d0 <main+0x1d4>
		cycle = false;
 8002184:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <main+0x1fc>)
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]
		draw_scene(first_render);
 800218a:	f000 fb31 	bl	80027f0 <draw_scene>
		old_camera_x = camera_x_block;
 800218e:	4e16      	ldr	r6, [pc, #88]	; (80021e8 <main+0x1ec>)
 8002190:	8832      	ldrh	r2, [r6, #0]
 8002192:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <main+0x1f4>)
 8002194:	801a      	strh	r2, [r3, #0]
		old_camera_y = camera_y_block;
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <main+0x1f0>)
 8002198:	881a      	ldrh	r2, [r3, #0]
 800219a:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <main+0x1f8>)
 800219c:	801a      	strh	r2, [r3, #0]
		refresh_guysko(player, FPS);
 800219e:	4b17      	ldr	r3, [pc, #92]	; (80021fc <main+0x200>)
 80021a0:	7819      	ldrb	r1, [r3, #0]
 80021a2:	4628      	mov	r0, r5
 80021a4:	f003 f8c4 	bl	8005330 <refresh_guysko>
		new_camera_y = player->pos->y / BLOCK_WIDTH;
 80021a8:	692b      	ldr	r3, [r5, #16]
 80021aa:	8859      	ldrh	r1, [r3, #2]
 80021ac:	0889      	lsrs	r1, r1, #2
		if (camera_x_block - player->pos->x / BLOCK_WIDTH > GUYSKO_WINDOW_SPAN_PIXEL / BLOCK_WIDTH) {
 80021ae:	8832      	ldrh	r2, [r6, #0]
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	0898      	lsrs	r0, r3, #2
 80021b4:	eba2 0393 	sub.w	r3, r2, r3, lsr #2
 80021b8:	2b12      	cmp	r3, #18
 80021ba:	ddcc      	ble.n	8002156 <main+0x15a>
			new_camera_x = camera_x_block - abs(camera_x_block - GUYSKO_WINDOW_SPAN_PIXEL / BLOCK_WIDTH - player->pos->x / BLOCK_WIDTH);
 80021bc:	f1a2 0412 	sub.w	r4, r2, #18
 80021c0:	1a24      	subs	r4, r4, r0
 80021c2:	2c00      	cmp	r4, #0
 80021c4:	bfb8      	it	lt
 80021c6:	4264      	neglt	r4, r4
 80021c8:	b2a4      	uxth	r4, r4
 80021ca:	1b14      	subs	r4, r2, r4
 80021cc:	b2a4      	uxth	r4, r4
 80021ce:	e7cf      	b.n	8002170 <main+0x174>
			action_set(&joystick_raw);
 80021d0:	a80c      	add	r0, sp, #48	; 0x30
 80021d2:	f7fe ff89 	bl	80010e8 <action_set>
 80021d6:	e7d1      	b.n	800217c <main+0x180>
 80021d8:	48001400 	.word	0x48001400
 80021dc:	48000800 	.word	0x48000800
 80021e0:	0800bea1 	.word	0x0800bea1
 80021e4:	200005d0 	.word	0x200005d0
 80021e8:	200110b8 	.word	0x200110b8
 80021ec:	200110ba 	.word	0x200110ba
 80021f0:	200110be 	.word	0x200110be
 80021f4:	200110c0 	.word	0x200110c0
 80021f8:	20000960 	.word	0x20000960
 80021fc:	20000000 	.word	0x20000000

08002200 <is_light_source>:
=======
 800213e:	883a      	ldrh	r2, [r7, #0]
 8002140:	4b30      	ldr	r3, [pc, #192]	; (8002204 <main+0x208>)
 8002142:	801a      	strh	r2, [r3, #0]
	old_camera_y = camera_y_block;
 8002144:	8832      	ldrh	r2, [r6, #0]
 8002146:	4b30      	ldr	r3, [pc, #192]	; (8002208 <main+0x20c>)
 8002148:	801a      	strh	r2, [r3, #0]
	draw_scene(true);
 800214a:	2001      	movs	r0, #1
 800214c:	f000 fb38 	bl	80027c0 <draw_scene>
 8002150:	e019      	b.n	8002186 <main+0x18a>
		new_camera_y = player->pos->y / BLOCK_WIDTH;
 8002152:	3103      	adds	r1, #3
 8002154:	e02e      	b.n	80021b4 <main+0x1b8>
		if (camera_x_block - player->pos->x / BLOCK_WIDTH > GUYSKO_WINDOW_SPAN_PIXEL / BLOCK_WIDTH) {
 8002156:	3303      	adds	r3, #3
 8002158:	e034      	b.n	80021c4 <main+0x1c8>
		} else if (camera_x_block - player->pos->x / BLOCK_WIDTH < -GUYSKO_WINDOW_SPAN_PIXEL / BLOCK_WIDTH) {
 800215a:	f113 0f12 	cmn.w	r3, #18
 800215e:	da09      	bge.n	8002174 <main+0x178>
			new_camera_x = camera_x_block + abs(-camera_x_block - GUYSKO_WINDOW_SPAN_PIXEL / BLOCK_WIDTH + player->pos->x / BLOCK_WIDTH);
 8002160:	f06f 0411 	mvn.w	r4, #17
 8002164:	1aa4      	subs	r4, r4, r2
 8002166:	4404      	add	r4, r0
 8002168:	2c00      	cmp	r4, #0
 800216a:	bfb8      	it	lt
 800216c:	4264      	neglt	r4, r4
 800216e:	fa12 f484 	uxtah	r4, r2, r4
 8002172:	b2a4      	uxth	r4, r4
		update_camera_center(new_camera_x, new_camera_y);
 8002174:	4620      	mov	r0, r4
 8002176:	f000 fe0d 	bl	8002d94 <update_camera_center>
		action_set(&joystick_raw);
 800217a:	a80c      	add	r0, sp, #48	; 0x30
 800217c:	f7fe ffb4 	bl	80010e8 <action_set>
		while (!cycle)
 8002180:	4b22      	ldr	r3, [pc, #136]	; (800220c <main+0x210>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	b36b      	cbz	r3, 80021e2 <main+0x1e6>
		cycle = false;
 8002186:	2000      	movs	r0, #0
 8002188:	4b20      	ldr	r3, [pc, #128]	; (800220c <main+0x210>)
 800218a:	7018      	strb	r0, [r3, #0]
		draw_scene(false);
 800218c:	f000 fb18 	bl	80027c0 <draw_scene>
		old_camera_x = camera_x_block;
 8002190:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <main+0x200>)
 8002192:	881a      	ldrh	r2, [r3, #0]
 8002194:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <main+0x208>)
 8002196:	801a      	strh	r2, [r3, #0]
		old_camera_y = camera_y_block;
 8002198:	4b19      	ldr	r3, [pc, #100]	; (8002200 <main+0x204>)
 800219a:	881a      	ldrh	r2, [r3, #0]
 800219c:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <main+0x20c>)
 800219e:	801a      	strh	r2, [r3, #0]
		refresh_guysko(player, FPS);
 80021a0:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <main+0x214>)
 80021a2:	7819      	ldrb	r1, [r3, #0]
 80021a4:	4628      	mov	r0, r5
 80021a6:	f003 f839 	bl	800521c <refresh_guysko>
		new_camera_y = player->pos->y / BLOCK_WIDTH;
 80021aa:	692b      	ldr	r3, [r5, #16]
 80021ac:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 80021b0:	2900      	cmp	r1, #0
 80021b2:	dbce      	blt.n	8002152 <main+0x156>
 80021b4:	f3c1 018f 	ubfx	r1, r1, #2, #16
		if (camera_x_block - player->pos->x / BLOCK_WIDTH > GUYSKO_WINDOW_SPAN_PIXEL / BLOCK_WIDTH) {
 80021b8:	4a10      	ldr	r2, [pc, #64]	; (80021fc <main+0x200>)
 80021ba:	8812      	ldrh	r2, [r2, #0]
 80021bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	dbc8      	blt.n	8002156 <main+0x15a>
 80021c4:	1098      	asrs	r0, r3, #2
 80021c6:	eba2 03a3 	sub.w	r3, r2, r3, asr #2
 80021ca:	2b12      	cmp	r3, #18
 80021cc:	ddc5      	ble.n	800215a <main+0x15e>
			new_camera_x = camera_x_block - abs(camera_x_block - GUYSKO_WINDOW_SPAN_PIXEL / BLOCK_WIDTH - player->pos->x / BLOCK_WIDTH);
 80021ce:	f1a2 0412 	sub.w	r4, r2, #18
 80021d2:	1a24      	subs	r4, r4, r0
 80021d4:	2c00      	cmp	r4, #0
 80021d6:	bfb8      	it	lt
 80021d8:	4264      	neglt	r4, r4
 80021da:	b2a4      	uxth	r4, r4
 80021dc:	1b14      	subs	r4, r2, r4
 80021de:	b2a4      	uxth	r4, r4
 80021e0:	e7c8      	b.n	8002174 <main+0x178>
			action_set(&joystick_raw);
 80021e2:	a80c      	add	r0, sp, #48	; 0x30
 80021e4:	f7fe ff80 	bl	80010e8 <action_set>
 80021e8:	e7ca      	b.n	8002180 <main+0x184>
 80021ea:	bf00      	nop
 80021ec:	48001400 	.word	0x48001400
 80021f0:	48000800 	.word	0x48000800
 80021f4:	0800bd79 	.word	0x0800bd79
 80021f8:	200015c0 	.word	0x200015c0
 80021fc:	200120a8 	.word	0x200120a8
 8002200:	200120aa 	.word	0x200120aa
 8002204:	200120ae 	.word	0x200120ae
 8002208:	200120b0 	.word	0x200120b0
 800220c:	20001950 	.word	0x20001950
 8002210:	20001000 	.word	0x20001000

08002214 <is_light_source>:
>>>>>>> render
		_sky,
		_empty		// currently sky defaults to _empty, we want to see some blocks under ground
};

bool is_light_source(uint8_t material) {
	uint8_t full_cell = material << 4 | material;
<<<<<<< HEAD
 8002200:	ea40 1c00 	orr.w	ip, r0, r0, lsl #4
 8002204:	fa4f fc8c 	sxtb.w	ip, ip
	for (uint8_t i = 0; i < N_LIGHT_SOURCES; i++) {
 8002208:	2300      	movs	r3, #0
 800220a:	2b02      	cmp	r3, #2
 800220c:	d80c      	bhi.n	8002228 <is_light_source+0x28>
		if (light_sources[i] == material) {
 800220e:	4a09      	ldr	r2, [pc, #36]	; (8002234 <is_light_source+0x34>)
 8002210:	5cd1      	ldrb	r1, [r2, r3]
 8002212:	4281      	cmp	r1, r0
 8002214:	d00a      	beq.n	800222c <is_light_source+0x2c>
=======
 8002214:	ea40 1c00 	orr.w	ip, r0, r0, lsl #4
 8002218:	fa4f fc8c 	sxtb.w	ip, ip
	for (uint8_t i = 0; i < N_LIGHT_SOURCES; i++) {
 800221c:	2300      	movs	r3, #0
 800221e:	2b02      	cmp	r3, #2
 8002220:	d80c      	bhi.n	800223c <is_light_source+0x28>
		if (light_sources[i] == material) {
 8002222:	4a09      	ldr	r2, [pc, #36]	; (8002248 <is_light_source+0x34>)
 8002224:	5cd1      	ldrb	r1, [r2, r3]
 8002226:	4281      	cmp	r1, r0
 8002228:	d00a      	beq.n	8002240 <is_light_source+0x2c>
>>>>>>> render
			return true;
		}

		uint8_t full_source = light_sources[i] << 4 | light_sources[i];
<<<<<<< HEAD
 8002216:	b24a      	sxtb	r2, r1
 8002218:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800221c:	b252      	sxtb	r2, r2
		if (full_source == full_cell) {
 800221e:	4594      	cmp	ip, r2
 8002220:	d006      	beq.n	8002230 <is_light_source+0x30>
	for (uint8_t i = 0; i < N_LIGHT_SOURCES; i++) {
 8002222:	3301      	adds	r3, #1
 8002224:	b2db      	uxtb	r3, r3
 8002226:	e7f0      	b.n	800220a <is_light_source+0xa>
=======
 800222a:	b24a      	sxtb	r2, r1
 800222c:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8002230:	b252      	sxtb	r2, r2
		if (full_source == full_cell) {
 8002232:	4594      	cmp	ip, r2
 8002234:	d006      	beq.n	8002244 <is_light_source+0x30>
	for (uint8_t i = 0; i < N_LIGHT_SOURCES; i++) {
 8002236:	3301      	adds	r3, #1
 8002238:	b2db      	uxtb	r3, r3
 800223a:	e7f0      	b.n	800221e <is_light_source+0xa>
>>>>>>> render
			return true;
		}

	}
	return false;
<<<<<<< HEAD
 8002228:	2000      	movs	r0, #0
 800222a:	4770      	bx	lr
			return true;
 800222c:	2001      	movs	r0, #1
 800222e:	4770      	bx	lr
			return true;
 8002230:	2001      	movs	r0, #1
}
 8002232:	4770      	bx	lr
 8002234:	20000004 	.word	0x20000004

08002238 <map_name_to_material>:
//#define COLOR_GRASS {C_GREEN, C_GREEN, C_DARK_GREEN, C_GREEN}

uint16_t* map_name_to_material (block_t block) {

	//_dirt
	if (block == 1) {
 8002238:	2801      	cmp	r0, #1
 800223a:	d01b      	beq.n	8002274 <map_name_to_material+0x3c>
		return C_DIRT;
	}
	//_grass
	else if (block == 2) {
 800223c:	2802      	cmp	r0, #2
 800223e:	d01b      	beq.n	8002278 <map_name_to_material+0x40>
		return C_GRASS;
	}
	//_wood
	else if (block == 3) {
 8002240:	2803      	cmp	r0, #3
 8002242:	d01b      	beq.n	800227c <map_name_to_material+0x44>
		return C_WOOD;
	}
	//_sky
	else if (block == 4) {
 8002244:	2804      	cmp	r0, #4
 8002246:	d01b      	beq.n	8002280 <map_name_to_material+0x48>
		return C_SKY;
	}
	//_water
	else if (block == 5) {
 8002248:	2805      	cmp	r0, #5
 800224a:	d01b      	beq.n	8002284 <map_name_to_material+0x4c>
		return C_WATER;
	}
	//_sand
	else if (block == 6) {
 800224c:	2806      	cmp	r0, #6
 800224e:	d01b      	beq.n	8002288 <map_name_to_material+0x50>
		return C_GRASS;
	}
	//_rock
	else if (block == 7) {
 8002250:	2807      	cmp	r0, #7
 8002252:	d01b      	beq.n	800228c <map_name_to_material+0x54>
		return C_ROCK;
	}
	//_lava
	else if (block == 8) {
 8002254:	2808      	cmp	r0, #8
 8002256:	d01b      	beq.n	8002290 <map_name_to_material+0x58>
		return C_LAVA;
	}
	//_red_wood
	else if (block == 9) {
 8002258:	2809      	cmp	r0, #9
 800225a:	d01b      	beq.n	8002294 <map_name_to_material+0x5c>
		return C_RED_WOOD;
	}
	//_gold
	else if (block == 10) {
 800225c:	280a      	cmp	r0, #10
 800225e:	d01b      	beq.n	8002298 <map_name_to_material+0x60>
		return C_GRASS;
	}
	//_diamond
	else if (block == 11) {
 8002260:	280b      	cmp	r0, #11
 8002262:	d01b      	beq.n	800229c <map_name_to_material+0x64>
		return C_BG_DIRT;
	}
	//_dirt_bg
	else if (block == 12) {
 8002264:	280c      	cmp	r0, #12
 8002266:	d01b      	beq.n	80022a0 <map_name_to_material+0x68>
uint16_t* map_name_to_material (block_t block) {
 8002268:	b082      	sub	sp, #8
		return C_BG_DIRT;
	}
	uint16_t BLANK[4] = {0x0, 0x0, 0x0, 0x0};
 800226a:	2000      	movs	r0, #0
 800226c:	9000      	str	r0, [sp, #0]
 800226e:	9001      	str	r0, [sp, #4]
	return BLANK;
}
 8002270:	b002      	add	sp, #8
 8002272:	4770      	bx	lr
		return C_DIRT;
 8002274:	480b      	ldr	r0, [pc, #44]	; (80022a4 <map_name_to_material+0x6c>)
 8002276:	4770      	bx	lr
		return C_GRASS;
 8002278:	480b      	ldr	r0, [pc, #44]	; (80022a8 <map_name_to_material+0x70>)
 800227a:	4770      	bx	lr
		return C_WOOD;
 800227c:	480b      	ldr	r0, [pc, #44]	; (80022ac <map_name_to_material+0x74>)
 800227e:	4770      	bx	lr
		return C_SKY;
 8002280:	480b      	ldr	r0, [pc, #44]	; (80022b0 <map_name_to_material+0x78>)
 8002282:	4770      	bx	lr
		return C_WATER;
 8002284:	480b      	ldr	r0, [pc, #44]	; (80022b4 <map_name_to_material+0x7c>)
 8002286:	4770      	bx	lr
		return C_GRASS;
 8002288:	4807      	ldr	r0, [pc, #28]	; (80022a8 <map_name_to_material+0x70>)
 800228a:	4770      	bx	lr
		return C_ROCK;
 800228c:	480a      	ldr	r0, [pc, #40]	; (80022b8 <map_name_to_material+0x80>)
 800228e:	4770      	bx	lr
		return C_LAVA;
 8002290:	480a      	ldr	r0, [pc, #40]	; (80022bc <map_name_to_material+0x84>)
 8002292:	4770      	bx	lr
		return C_RED_WOOD;
 8002294:	480a      	ldr	r0, [pc, #40]	; (80022c0 <map_name_to_material+0x88>)
 8002296:	4770      	bx	lr
		return C_GRASS;
 8002298:	4803      	ldr	r0, [pc, #12]	; (80022a8 <map_name_to_material+0x70>)
 800229a:	4770      	bx	lr
		return C_BG_DIRT;
 800229c:	4809      	ldr	r0, [pc, #36]	; (80022c4 <map_name_to_material+0x8c>)
 800229e:	4770      	bx	lr
		return C_BG_DIRT;
 80022a0:	4808      	ldr	r0, [pc, #32]	; (80022c4 <map_name_to_material+0x8c>)
}
 80022a2:	4770      	bx	lr
 80022a4:	20000008 	.word	0x20000008
 80022a8:	20000010 	.word	0x20000010
 80022ac:	20000050 	.word	0x20000050
 80022b0:	20000038 	.word	0x20000038
 80022b4:	20000048 	.word	0x20000048
 80022b8:	20000030 	.word	0x20000030
 80022bc:	20000018 	.word	0x20000018
 80022c0:	20000028 	.word	0x20000028
 80022c4:	20000964 	.word	0x20000964

080022c8 <apply_shading>:
=======
 800223c:	2000      	movs	r0, #0
 800223e:	4770      	bx	lr
			return true;
 8002240:	2001      	movs	r0, #1
 8002242:	4770      	bx	lr
			return true;
 8002244:	2001      	movs	r0, #1
}
 8002246:	4770      	bx	lr
 8002248:	20001004 	.word	0x20001004
 800224c:	00000000 	.word	0x00000000

08002250 <apply_shading>:
>>>>>>> render
#define RGB565_RED 0xF800
#define RGB565_GREEN 0x7E0
#define RGB565_BLUE 0x1F

// Computes colors for some illumination factor
uint16_t* apply_shading(uint16_t colors[4], float illumination) {
<<<<<<< HEAD
 80022c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022cc:	ed2d 8b02 	vpush	{d8}
 80022d0:	b083      	sub	sp, #12
 80022d2:	4682      	mov	sl, r0
 80022d4:	eef0 8a40 	vmov.f32	s17, s0

	for (uint8_t i = 0; i < 4; i++) {
 80022d8:	2400      	movs	r4, #0
 80022da:	e03c      	b.n	8002356 <apply_shading+0x8e>
=======
 8002250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002254:	ed2d 8b02 	vpush	{d8}
 8002258:	b083      	sub	sp, #12
 800225a:	4682      	mov	sl, r0
 800225c:	eef0 8a40 	vmov.f32	s17, s0

	for (uint8_t i = 0; i < 4; i++) {
 8002260:	2400      	movs	r4, #0
 8002262:	e03c      	b.n	80022de <apply_shading+0x8e>
>>>>>>> render
		uint16_t r = (colors[i] & RGB565_RED) >> 11;
		uint16_t b = colors[i] & RGB565_BLUE;

		// For dirt, remove less red and green to get a better color
		if (colors[i] == C_DIRT[0]) {
			r = (uint8_t) (r * MIN(1, illumination * 1.3));
<<<<<<< HEAD
 80022dc:	f7fe f94a 	bl	8000574 <__aeabi_i2d>
 80022e0:	4680      	mov	r8, r0
 80022e2:	4689      	mov	r9, r1
 80022e4:	ee18 0a90 	vmov	r0, s17
 80022e8:	f7fe f956 	bl	8000598 <__aeabi_f2d>
 80022ec:	a358      	add	r3, pc, #352	; (adr r3, 8002450 <apply_shading+0x188>)
 80022ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f2:	f7fe f9a9 	bl	8000648 <__aeabi_dmul>
 80022f6:	4606      	mov	r6, r0
 80022f8:	460f      	mov	r7, r1
 80022fa:	2200      	movs	r2, #0
 80022fc:	4b50      	ldr	r3, [pc, #320]	; (8002440 <apply_shading+0x178>)
 80022fe:	f7fe fc33 	bl	8000b68 <__aeabi_dcmpgt>
 8002302:	b108      	cbz	r0, 8002308 <apply_shading+0x40>
 8002304:	2600      	movs	r6, #0
 8002306:	4f4e      	ldr	r7, [pc, #312]	; (8002440 <apply_shading+0x178>)
 8002308:	4632      	mov	r2, r6
 800230a:	463b      	mov	r3, r7
 800230c:	4640      	mov	r0, r8
 800230e:	4649      	mov	r1, r9
 8002310:	f7fe f99a 	bl	8000648 <__aeabi_dmul>
 8002314:	f7fe fc70 	bl	8000bf8 <__aeabi_d2uiz>
 8002318:	fa5f f880 	uxtb.w	r8, r0
			g = (uint8_t) (g * MIN(1, illumination * 1.3));
 800231c:	4628      	mov	r0, r5
 800231e:	f7fe f929 	bl	8000574 <__aeabi_i2d>
 8002322:	4632      	mov	r2, r6
 8002324:	463b      	mov	r3, r7
 8002326:	f7fe f98f 	bl	8000648 <__aeabi_dmul>
 800232a:	f7fe fc65 	bl	8000bf8 <__aeabi_d2uiz>
 800232e:	b2c3      	uxtb	r3, r0

			b = (uint8_t) (b * illumination);
 8002330:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8002334:	ee28 8a28 	vmul.f32	s16, s16, s17
 8002338:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800233c:	edcd 7a01 	vstr	s15, [sp, #4]
 8002340:	f89d 2004 	ldrb.w	r2, [sp, #4]
=======
 8002264:	f7fe f986 	bl	8000574 <__aeabi_i2d>
 8002268:	4680      	mov	r8, r0
 800226a:	4689      	mov	r9, r1
 800226c:	ee18 0a90 	vmov	r0, s17
 8002270:	f7fe f992 	bl	8000598 <__aeabi_f2d>
 8002274:	a358      	add	r3, pc, #352	; (adr r3, 80023d8 <apply_shading+0x188>)
 8002276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227a:	f7fe f9e5 	bl	8000648 <__aeabi_dmul>
 800227e:	4606      	mov	r6, r0
 8002280:	460f      	mov	r7, r1
 8002282:	2200      	movs	r2, #0
 8002284:	4b50      	ldr	r3, [pc, #320]	; (80023c8 <apply_shading+0x178>)
 8002286:	f7fe fc6f 	bl	8000b68 <__aeabi_dcmpgt>
 800228a:	b108      	cbz	r0, 8002290 <apply_shading+0x40>
 800228c:	2600      	movs	r6, #0
 800228e:	4f4e      	ldr	r7, [pc, #312]	; (80023c8 <apply_shading+0x178>)
 8002290:	4632      	mov	r2, r6
 8002292:	463b      	mov	r3, r7
 8002294:	4640      	mov	r0, r8
 8002296:	4649      	mov	r1, r9
 8002298:	f7fe f9d6 	bl	8000648 <__aeabi_dmul>
 800229c:	f7fe fcac 	bl	8000bf8 <__aeabi_d2uiz>
 80022a0:	fa5f f880 	uxtb.w	r8, r0
			g = (uint8_t) (g * MIN(1, illumination * 1.3));
 80022a4:	4628      	mov	r0, r5
 80022a6:	f7fe f965 	bl	8000574 <__aeabi_i2d>
 80022aa:	4632      	mov	r2, r6
 80022ac:	463b      	mov	r3, r7
 80022ae:	f7fe f9cb 	bl	8000648 <__aeabi_dmul>
 80022b2:	f7fe fca1 	bl	8000bf8 <__aeabi_d2uiz>
 80022b6:	b2c3      	uxtb	r3, r0

			b = (uint8_t) (b * illumination);
 80022b8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80022bc:	ee28 8a28 	vmul.f32	s16, s16, s17
 80022c0:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 80022c4:	edcd 7a01 	vstr	s15, [sp, #4]
 80022c8:	f89d 2004 	ldrb.w	r2, [sp, #4]
>>>>>>> render
			g = (uint8_t) (g * illumination);
			b = (uint8_t) (b * illumination);
		}

		// MAKE SURE TO 0 PAD TO GET RGB OF LENGTH 4
		uint16_t rgb = (r << 11) | (g << 5) | (b);
<<<<<<< HEAD
 8002344:	015b      	lsls	r3, r3, #5
 8002346:	ea43 23c8 	orr.w	r3, r3, r8, lsl #11
 800234a:	b21b      	sxth	r3, r3
 800234c:	4313      	orrs	r3, r2

		colors[i] = rgb;
 800234e:	f82a 300b 	strh.w	r3, [sl, fp]
	for (uint8_t i = 0; i < 4; i++) {
 8002352:	3401      	adds	r4, #1
 8002354:	b2e4      	uxtb	r4, r4
 8002356:	2c03      	cmp	r4, #3
 8002358:	d86b      	bhi.n	8002432 <apply_shading+0x16a>
		uint16_t g = (colors[i] & RGB565_GREEN) >> 5;
 800235a:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 800235e:	f83a 3014 	ldrh.w	r3, [sl, r4, lsl #1]
 8002362:	f3c3 1545 	ubfx	r5, r3, #5, #6
		uint16_t r = (colors[i] & RGB565_RED) >> 11;
 8002366:	0ad8      	lsrs	r0, r3, #11
		uint16_t b = colors[i] & RGB565_BLUE;
 8002368:	f003 021f 	and.w	r2, r3, #31
 800236c:	ee08 2a10 	vmov	s16, r2
		if (colors[i] == C_DIRT[0]) {
 8002370:	4a34      	ldr	r2, [pc, #208]	; (8002444 <apply_shading+0x17c>)
 8002372:	8812      	ldrh	r2, [r2, #0]
 8002374:	4293      	cmp	r3, r2
 8002376:	d0b1      	beq.n	80022dc <apply_shading+0x14>
		} else if (colors[i] == C_BG_DIRT[0]) {
 8002378:	4a33      	ldr	r2, [pc, #204]	; (8002448 <apply_shading+0x180>)
 800237a:	8812      	ldrh	r2, [r2, #0]
 800237c:	4293      	cmp	r3, r2
 800237e:	d022      	beq.n	80023c6 <apply_shading+0xfe>
			r = (uint8_t) (r * illumination);
 8002380:	ee07 0a90 	vmov	s15, r0
 8002384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002388:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800238c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002390:	edcd 7a01 	vstr	s15, [sp, #4]
 8002394:	f89d 8004 	ldrb.w	r8, [sp, #4]
			g = (uint8_t) (g * illumination);
 8002398:	ee07 5a90 	vmov	s15, r5
 800239c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a0:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80023a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023a8:	edcd 7a01 	vstr	s15, [sp, #4]
 80023ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
			b = (uint8_t) (b * illumination);
 80023b0:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80023b4:	ee28 8a28 	vmul.f32	s16, s16, s17
 80023b8:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 80023bc:	edcd 7a01 	vstr	s15, [sp, #4]
 80023c0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80023c4:	e7be      	b.n	8002344 <apply_shading+0x7c>
			r = (uint8_t) (r * MIN(1, illumination * 1.5));
 80023c6:	f7fe f8d5 	bl	8000574 <__aeabi_i2d>
 80023ca:	4680      	mov	r8, r0
 80023cc:	4689      	mov	r9, r1
 80023ce:	ee18 0a90 	vmov	r0, s17
 80023d2:	f7fe f8e1 	bl	8000598 <__aeabi_f2d>
 80023d6:	2200      	movs	r2, #0
 80023d8:	4b1c      	ldr	r3, [pc, #112]	; (800244c <apply_shading+0x184>)
 80023da:	f7fe f935 	bl	8000648 <__aeabi_dmul>
 80023de:	4606      	mov	r6, r0
 80023e0:	460f      	mov	r7, r1
 80023e2:	2200      	movs	r2, #0
 80023e4:	4b16      	ldr	r3, [pc, #88]	; (8002440 <apply_shading+0x178>)
 80023e6:	f7fe fbbf 	bl	8000b68 <__aeabi_dcmpgt>
 80023ea:	b108      	cbz	r0, 80023f0 <apply_shading+0x128>
 80023ec:	2600      	movs	r6, #0
 80023ee:	4f14      	ldr	r7, [pc, #80]	; (8002440 <apply_shading+0x178>)
 80023f0:	4632      	mov	r2, r6
 80023f2:	463b      	mov	r3, r7
 80023f4:	4640      	mov	r0, r8
 80023f6:	4649      	mov	r1, r9
 80023f8:	f7fe f926 	bl	8000648 <__aeabi_dmul>
 80023fc:	f7fe fbfc 	bl	8000bf8 <__aeabi_d2uiz>
 8002400:	fa5f f880 	uxtb.w	r8, r0
			g = (uint8_t) (g * illumination);
 8002404:	ee07 5a90 	vmov	s15, r5
 8002408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800240c:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8002410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002414:	edcd 7a01 	vstr	s15, [sp, #4]
 8002418:	f89d 3004 	ldrb.w	r3, [sp, #4]
			b = (uint8_t) (b * illumination);
 800241c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8002420:	ee28 8a28 	vmul.f32	s16, s16, s17
 8002424:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8002428:	edcd 7a01 	vstr	s15, [sp, #4]
 800242c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002430:	e788      	b.n	8002344 <apply_shading+0x7c>
=======
 80022cc:	015b      	lsls	r3, r3, #5
 80022ce:	ea43 23c8 	orr.w	r3, r3, r8, lsl #11
 80022d2:	b21b      	sxth	r3, r3
 80022d4:	4313      	orrs	r3, r2

		colors[i] = rgb;
 80022d6:	f82a 300b 	strh.w	r3, [sl, fp]
	for (uint8_t i = 0; i < 4; i++) {
 80022da:	3401      	adds	r4, #1
 80022dc:	b2e4      	uxtb	r4, r4
 80022de:	2c03      	cmp	r4, #3
 80022e0:	d86b      	bhi.n	80023ba <apply_shading+0x16a>
		uint16_t g = (colors[i] & RGB565_GREEN) >> 5;
 80022e2:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 80022e6:	f83a 3014 	ldrh.w	r3, [sl, r4, lsl #1]
 80022ea:	f3c3 1545 	ubfx	r5, r3, #5, #6
		uint16_t r = (colors[i] & RGB565_RED) >> 11;
 80022ee:	0ad8      	lsrs	r0, r3, #11
		uint16_t b = colors[i] & RGB565_BLUE;
 80022f0:	f003 021f 	and.w	r2, r3, #31
 80022f4:	ee08 2a10 	vmov	s16, r2
		if (colors[i] == C_DIRT[0]) {
 80022f8:	4a34      	ldr	r2, [pc, #208]	; (80023cc <apply_shading+0x17c>)
 80022fa:	8812      	ldrh	r2, [r2, #0]
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d0b1      	beq.n	8002264 <apply_shading+0x14>
		} else if (colors[i] == C_BG_DIRT[0]) {
 8002300:	4a33      	ldr	r2, [pc, #204]	; (80023d0 <apply_shading+0x180>)
 8002302:	8812      	ldrh	r2, [r2, #0]
 8002304:	4293      	cmp	r3, r2
 8002306:	d022      	beq.n	800234e <apply_shading+0xfe>
			r = (uint8_t) (r * illumination);
 8002308:	ee07 0a90 	vmov	s15, r0
 800230c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002310:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8002314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002318:	edcd 7a01 	vstr	s15, [sp, #4]
 800231c:	f89d 8004 	ldrb.w	r8, [sp, #4]
			g = (uint8_t) (g * illumination);
 8002320:	ee07 5a90 	vmov	s15, r5
 8002324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002328:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800232c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002330:	edcd 7a01 	vstr	s15, [sp, #4]
 8002334:	f89d 3004 	ldrb.w	r3, [sp, #4]
			b = (uint8_t) (b * illumination);
 8002338:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800233c:	ee28 8a28 	vmul.f32	s16, s16, s17
 8002340:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8002344:	edcd 7a01 	vstr	s15, [sp, #4]
 8002348:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800234c:	e7be      	b.n	80022cc <apply_shading+0x7c>
			r = (uint8_t) (r * MIN(1, illumination * 1.5));
 800234e:	f7fe f911 	bl	8000574 <__aeabi_i2d>
 8002352:	4680      	mov	r8, r0
 8002354:	4689      	mov	r9, r1
 8002356:	ee18 0a90 	vmov	r0, s17
 800235a:	f7fe f91d 	bl	8000598 <__aeabi_f2d>
 800235e:	2200      	movs	r2, #0
 8002360:	4b1c      	ldr	r3, [pc, #112]	; (80023d4 <apply_shading+0x184>)
 8002362:	f7fe f971 	bl	8000648 <__aeabi_dmul>
 8002366:	4606      	mov	r6, r0
 8002368:	460f      	mov	r7, r1
 800236a:	2200      	movs	r2, #0
 800236c:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <apply_shading+0x178>)
 800236e:	f7fe fbfb 	bl	8000b68 <__aeabi_dcmpgt>
 8002372:	b108      	cbz	r0, 8002378 <apply_shading+0x128>
 8002374:	2600      	movs	r6, #0
 8002376:	4f14      	ldr	r7, [pc, #80]	; (80023c8 <apply_shading+0x178>)
 8002378:	4632      	mov	r2, r6
 800237a:	463b      	mov	r3, r7
 800237c:	4640      	mov	r0, r8
 800237e:	4649      	mov	r1, r9
 8002380:	f7fe f962 	bl	8000648 <__aeabi_dmul>
 8002384:	f7fe fc38 	bl	8000bf8 <__aeabi_d2uiz>
 8002388:	fa5f f880 	uxtb.w	r8, r0
			g = (uint8_t) (g * illumination);
 800238c:	ee07 5a90 	vmov	s15, r5
 8002390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002394:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8002398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800239c:	edcd 7a01 	vstr	s15, [sp, #4]
 80023a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
			b = (uint8_t) (b * illumination);
 80023a4:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80023a8:	ee28 8a28 	vmul.f32	s16, s16, s17
 80023ac:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 80023b0:	edcd 7a01 	vstr	s15, [sp, #4]
 80023b4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80023b8:	e788      	b.n	80022cc <apply_shading+0x7c>
>>>>>>> render
	}

	return colors;
}
<<<<<<< HEAD
 8002432:	4650      	mov	r0, sl
 8002434:	b003      	add	sp, #12
 8002436:	ecbd 8b02 	vpop	{d8}
 800243a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800243e:	bf00      	nop
 8002440:	3ff00000 	.word	0x3ff00000
 8002444:	20000008 	.word	0x20000008
 8002448:	20000964 	.word	0x20000964
 800244c:	3ff80000 	.word	0x3ff80000
 8002450:	cccccccd 	.word	0xcccccccd
 8002454:	3ff4cccc 	.word	0x3ff4cccc

08002458 <create_block>:

/* Creates block with given coordinates and width */
block* create_block(uint16_t x, uint16_t y, uint16_t colors[4], uint8_t type, float illumination) {
 8002458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800245c:	ed2d 8b02 	vpush	{d8}
 8002460:	b082      	sub	sp, #8
 8002462:	4680      	mov	r8, r0
 8002464:	460f      	mov	r7, r1
 8002466:	4615      	mov	r5, r2
 8002468:	461e      	mov	r6, r3
 800246a:	eeb0 8a40 	vmov.f32	s16, s0
	block *block = (struct _block*) malloc(sizeof(struct _block));
 800246e:	200e      	movs	r0, #14
 8002470:	f00c f8a2 	bl	800e5b8 <malloc>
 8002474:	4604      	mov	r4, r0
	block->pos.x = x;
 8002476:	f8a0 8000 	strh.w	r8, [r0]
	block->pos.y = y;
 800247a:	8047      	strh	r7, [r0, #2]
	block->type = type;
 800247c:	7306      	strb	r6, [r0, #12]

	uint16_t copy[4];
	for (uint8_t i = 0; i < 4; i++) {
 800247e:	2300      	movs	r3, #0
 8002480:	e008      	b.n	8002494 <create_block+0x3c>
		copy[i] = colors[i];
 8002482:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
 8002486:	aa02      	add	r2, sp, #8
 8002488:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800248c:	f821 0c08 	strh.w	r0, [r1, #-8]
	for (uint8_t i = 0; i < 4; i++) {
 8002490:	3301      	adds	r3, #1
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b03      	cmp	r3, #3
 8002496:	d9f4      	bls.n	8002482 <create_block+0x2a>
=======
 80023ba:	4650      	mov	r0, sl
 80023bc:	b003      	add	sp, #12
 80023be:	ecbd 8b02 	vpop	{d8}
 80023c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023c6:	bf00      	nop
 80023c8:	3ff00000 	.word	0x3ff00000
 80023cc:	20001008 	.word	0x20001008
 80023d0:	20001954 	.word	0x20001954
 80023d4:	3ff80000 	.word	0x3ff80000
 80023d8:	cccccccd 	.word	0xcccccccd
 80023dc:	3ff4cccc 	.word	0x3ff4cccc

080023e0 <create_block>:

/* Creates block with given coordinates and width */
block* create_block(uint16_t x, uint16_t y, uint16_t colors[4], uint8_t type, float illumination) {
 80023e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023e4:	ed2d 8b02 	vpush	{d8}
 80023e8:	b082      	sub	sp, #8
 80023ea:	4680      	mov	r8, r0
 80023ec:	460f      	mov	r7, r1
 80023ee:	4615      	mov	r5, r2
 80023f0:	461e      	mov	r6, r3
 80023f2:	eeb0 8a40 	vmov.f32	s16, s0
	block *block = (struct _block*) malloc(sizeof(struct _block));
 80023f6:	200e      	movs	r0, #14
 80023f8:	f00c f812 	bl	800e420 <malloc>
 80023fc:	4604      	mov	r4, r0
	block->pos.x = x;
 80023fe:	f8a0 8000 	strh.w	r8, [r0]
	block->pos.y = y;
 8002402:	8047      	strh	r7, [r0, #2]
	block->type = type;
 8002404:	7306      	strb	r6, [r0, #12]

	uint16_t copy[4];
	for (uint8_t i = 0; i < 4; i++) {
 8002406:	2300      	movs	r3, #0
 8002408:	e008      	b.n	800241c <create_block+0x3c>
		copy[i] = colors[i];
 800240a:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
 800240e:	aa02      	add	r2, sp, #8
 8002410:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8002414:	f821 0c08 	strh.w	r0, [r1, #-8]
	for (uint8_t i = 0; i < 4; i++) {
 8002418:	3301      	adds	r3, #1
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b03      	cmp	r3, #3
 800241e:	d9f4      	bls.n	800240a <create_block+0x2a>
>>>>>>> render
	}

	// Get appropriate colors
//	if (illumination != 1.0) {
//	}
		uint16_t *new_colors = apply_shading(copy, illumination);
<<<<<<< HEAD
 8002498:	eeb0 0a48 	vmov.f32	s0, s16
 800249c:	4668      	mov	r0, sp
 800249e:	f7ff ff13 	bl	80022c8 <apply_shading>
		for (uint8_t i = 0; i < 4; i++) {
 80024a2:	2300      	movs	r3, #0
 80024a4:	e006      	b.n	80024b4 <create_block+0x5c>
			block->colors[i] = new_colors[i];
 80024a6:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 80024aa:	eb04 0243 	add.w	r2, r4, r3, lsl #1
 80024ae:	8091      	strh	r1, [r2, #4]
		for (uint8_t i = 0; i < 4; i++) {
 80024b0:	3301      	adds	r3, #1
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d9f6      	bls.n	80024a6 <create_block+0x4e>
=======
 8002420:	eeb0 0a48 	vmov.f32	s0, s16
 8002424:	4668      	mov	r0, sp
 8002426:	f7ff ff13 	bl	8002250 <apply_shading>
		for (uint8_t i = 0; i < 4; i++) {
 800242a:	2300      	movs	r3, #0
 800242c:	e006      	b.n	800243c <create_block+0x5c>
			block->colors[i] = new_colors[i];
 800242e:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 8002432:	eb04 0243 	add.w	r2, r4, r3, lsl #1
 8002436:	8091      	strh	r1, [r2, #4]
		for (uint8_t i = 0; i < 4; i++) {
 8002438:	3301      	adds	r3, #1
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b03      	cmp	r3, #3
 800243e:	d9f6      	bls.n	800242e <create_block+0x4e>
>>>>>>> render
		}


	return block;
}
<<<<<<< HEAD
 80024b8:	4620      	mov	r0, r4
 80024ba:	b002      	add	sp, #8
 80024bc:	ecbd 8b02 	vpop	{d8}
 80024c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080024c4 <create_destroyable>:

// Create wrapper for block - destroyables
destroyable* create_destroyable(uint16_t x, uint16_t y, uint16_t colors[4], uint8_t type, float illumination) {
 80024c4:	b510      	push	{r4, lr}
	block *block = create_block(x, y, colors, type, illumination);
 80024c6:	f7ff ffc7 	bl	8002458 <create_block>
 80024ca:	4604      	mov	r4, r0

	destroyable *destroyable = (struct _destroyable*) malloc(
 80024cc:	2004      	movs	r0, #4
 80024ce:	f00c f873 	bl	800e5b8 <malloc>
			sizeof(struct _destroyable));
	destroyable->block = block;
 80024d2:	6004      	str	r4, [r0, #0]
	return destroyable;
}
 80024d4:	bd10      	pop	{r4, pc}

080024d6 <create_bg_material>:

bg_material* create_bg_material(uint16_t x, uint16_t y, uint16_t colors[4], uint8_t type, float illumination) {
 80024d6:	b510      	push	{r4, lr}
	block *block = create_block(x, y, colors, type, illumination);
 80024d8:	f7ff ffbe 	bl	8002458 <create_block>
 80024dc:	4604      	mov	r4, r0

	bg_material *bg_material = (struct _bg_material*) malloc(
 80024de:	2004      	movs	r0, #4
 80024e0:	f00c f86a 	bl	800e5b8 <malloc>
			sizeof(struct _bg_material));
	bg_material->block = block;
 80024e4:	6004      	str	r4, [r0, #0]
	return bg_material;
}
 80024e6:	bd10      	pop	{r4, pc}

080024e8 <draw_block>:

/* Draws a block with its colors, attempt to draw chunks as big as possible */
void draw_block(block *block) {
 80024e8:	b530      	push	{r4, r5, lr}
 80024ea:	b083      	sub	sp, #12
 80024ec:	4604      	mov	r4, r0
//	_HW_FillFrame_(block->pos.x - 4, block->pos.y - 4, block->pos.x, block->pos.y, block->colors[0]);
	if (block->colors[0] == block->colors[1] && block->colors[1] == block->colors[2] && block->colors[2] == block->colors[3]) {
 80024ee:	8885      	ldrh	r5, [r0, #4]
 80024f0:	88c3      	ldrh	r3, [r0, #6]
 80024f2:	429d      	cmp	r5, r3
 80024f4:	d029      	beq.n	800254a <draw_block+0x62>
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 4, block->pos.x, block->pos.y, block->colors[0]);
	} else if (block->colors[0] == block->colors[1]) {	// Top part
 80024f6:	429d      	cmp	r5, r3
 80024f8:	d035      	beq.n	8002566 <draw_block+0x7e>
=======
 8002440:	4620      	mov	r0, r4
 8002442:	b002      	add	sp, #8
 8002444:	ecbd 8b02 	vpop	{d8}
 8002448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800244c <create_destroyable>:

// Create wrapper for block - destroyables
destroyable* create_destroyable(uint16_t x, uint16_t y, uint16_t colors[4], uint8_t type, float illumination) {
 800244c:	b510      	push	{r4, lr}
	block *block = create_block(x, y, colors, type, illumination);
 800244e:	f7ff ffc7 	bl	80023e0 <create_block>
 8002452:	4604      	mov	r4, r0

	destroyable *destroyable = (struct _destroyable*) malloc(
 8002454:	2004      	movs	r0, #4
 8002456:	f00b ffe3 	bl	800e420 <malloc>
			sizeof(struct _destroyable));
	destroyable->block = block;
 800245a:	6004      	str	r4, [r0, #0]
	return destroyable;
}
 800245c:	bd10      	pop	{r4, pc}

0800245e <create_bg_material>:

bg_material* create_bg_material(uint16_t x, uint16_t y, uint16_t colors[4], uint8_t type, float illumination) {
 800245e:	b510      	push	{r4, lr}
	block *block = create_block(x, y, colors, type, illumination);
 8002460:	f7ff ffbe 	bl	80023e0 <create_block>
 8002464:	4604      	mov	r4, r0

	bg_material *bg_material = (struct _bg_material*) malloc(
 8002466:	2004      	movs	r0, #4
 8002468:	f00b ffda 	bl	800e420 <malloc>
			sizeof(struct _bg_material));
	bg_material->block = block;
 800246c:	6004      	str	r4, [r0, #0]
	return bg_material;
}
 800246e:	bd10      	pop	{r4, pc}

08002470 <draw_block>:

/* Draws a block with its colors, attempt to draw chunks as big as possible */
void draw_block(block *block) {
 8002470:	b530      	push	{r4, r5, lr}
 8002472:	b083      	sub	sp, #12
 8002474:	4604      	mov	r4, r0
//	_HW_FillFrame_(block->pos.x - 4, block->pos.y - 4, block->pos.x, block->pos.y, block->colors[0]);
	if (block->colors[0] == block->colors[1] && block->colors[1] == block->colors[2] && block->colors[2] == block->colors[3]) {
 8002476:	8885      	ldrh	r5, [r0, #4]
 8002478:	88c3      	ldrh	r3, [r0, #6]
 800247a:	429d      	cmp	r5, r3
 800247c:	d029      	beq.n	80024d2 <draw_block+0x62>
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 4, block->pos.x, block->pos.y, block->colors[0]);
	} else if (block->colors[0] == block->colors[1]) {	// Top part
 800247e:	429d      	cmp	r5, r3
 8002480:	d035      	beq.n	80024ee <draw_block+0x7e>
>>>>>>> render
			_HW_FillFrame_(block->pos.x - 4, block->pos.y - 2, block->pos.x - 2,
					block->pos.y, block->colors[2]);
			_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
					block->pos.y, block->colors[3]);
		}
	} else if (block->colors[0] == block->colors[2]) {	// Left part
<<<<<<< HEAD
 80024fa:	8923      	ldrh	r3, [r4, #8]
 80024fc:	429d      	cmp	r5, r3
 80024fe:	d057      	beq.n	80025b0 <draw_block+0xc8>
=======
 8002482:	8923      	ldrh	r3, [r4, #8]
 8002484:	429d      	cmp	r5, r3
 8002486:	d057      	beq.n	8002538 <draw_block+0xc8>
>>>>>>> render
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 4, block->pos.x,
				block->pos.y - 2, block->colors[1]);
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
				block->pos.y, block->colors[3]);
	} else {
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 4, block->pos.x - 2,
<<<<<<< HEAD
 8002500:	8820      	ldrh	r0, [r4, #0]
 8002502:	8861      	ldrh	r1, [r4, #2]
 8002504:	9500      	str	r5, [sp, #0]
 8002506:	1e8b      	subs	r3, r1, #2
 8002508:	1e82      	subs	r2, r0, #2
 800250a:	3904      	subs	r1, #4
 800250c:	3804      	subs	r0, #4
 800250e:	f009 fcc7 	bl	800bea0 <_HW_FillFrame_>
				block->pos.y - 2, block->colors[0]);
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 4, block->pos.x,
 8002512:	8822      	ldrh	r2, [r4, #0]
 8002514:	8861      	ldrh	r1, [r4, #2]
				block->pos.y - 2, block->colors[1]);
 8002516:	88e3      	ldrh	r3, [r4, #6]
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 4, block->pos.x,
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	1e8b      	subs	r3, r1, #2
 800251c:	3904      	subs	r1, #4
 800251e:	1e90      	subs	r0, r2, #2
 8002520:	f009 fcbe 	bl	800bea0 <_HW_FillFrame_>
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 2, block->pos.x - 2,
 8002524:	8820      	ldrh	r0, [r4, #0]
 8002526:	8863      	ldrh	r3, [r4, #2]
				block->pos.y, block->colors[2]);
 8002528:	8922      	ldrh	r2, [r4, #8]
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 2, block->pos.x - 2,
 800252a:	9200      	str	r2, [sp, #0]
 800252c:	1e82      	subs	r2, r0, #2
 800252e:	1e99      	subs	r1, r3, #2
 8002530:	3804      	subs	r0, #4
 8002532:	f009 fcb5 	bl	800bea0 <_HW_FillFrame_>
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
 8002536:	8822      	ldrh	r2, [r4, #0]
 8002538:	8863      	ldrh	r3, [r4, #2]
				block->pos.y, block->colors[3]);
 800253a:	8961      	ldrh	r1, [r4, #10]
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
 800253c:	9100      	str	r1, [sp, #0]
 800253e:	1e99      	subs	r1, r3, #2
 8002540:	1e90      	subs	r0, r2, #2
 8002542:	f009 fcad 	bl	800bea0 <_HW_FillFrame_>
	}

}
 8002546:	b003      	add	sp, #12
 8002548:	bd30      	pop	{r4, r5, pc}
	if (block->colors[0] == block->colors[1] && block->colors[1] == block->colors[2] && block->colors[2] == block->colors[3]) {
 800254a:	8902      	ldrh	r2, [r0, #8]
 800254c:	4293      	cmp	r3, r2
 800254e:	d1d2      	bne.n	80024f6 <draw_block+0xe>
 8002550:	8941      	ldrh	r1, [r0, #10]
 8002552:	428a      	cmp	r2, r1
 8002554:	d1cf      	bne.n	80024f6 <draw_block+0xe>
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 4, block->pos.x, block->pos.y, block->colors[0]);
 8002556:	8802      	ldrh	r2, [r0, #0]
 8002558:	8843      	ldrh	r3, [r0, #2]
 800255a:	9500      	str	r5, [sp, #0]
 800255c:	1f19      	subs	r1, r3, #4
 800255e:	1f10      	subs	r0, r2, #4
 8002560:	f009 fc9e 	bl	800bea0 <_HW_FillFrame_>
	if (block->colors[0] == block->colors[1] && block->colors[1] == block->colors[2] && block->colors[2] == block->colors[3]) {
 8002564:	e7ef      	b.n	8002546 <draw_block+0x5e>
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 4, block->pos.x,
 8002566:	8822      	ldrh	r2, [r4, #0]
 8002568:	8861      	ldrh	r1, [r4, #2]
 800256a:	9500      	str	r5, [sp, #0]
 800256c:	1e8b      	subs	r3, r1, #2
 800256e:	3904      	subs	r1, #4
 8002570:	1f10      	subs	r0, r2, #4
 8002572:	f009 fc95 	bl	800bea0 <_HW_FillFrame_>
		if (block->colors[2] == block->colors[3]) {		// Bottom part
 8002576:	8925      	ldrh	r5, [r4, #8]
 8002578:	8963      	ldrh	r3, [r4, #10]
 800257a:	429d      	cmp	r5, r3
 800257c:	d010      	beq.n	80025a0 <draw_block+0xb8>
			_HW_FillFrame_(block->pos.x - 4, block->pos.y - 2, block->pos.x - 2,
 800257e:	8820      	ldrh	r0, [r4, #0]
 8002580:	8863      	ldrh	r3, [r4, #2]
 8002582:	9500      	str	r5, [sp, #0]
 8002584:	1e82      	subs	r2, r0, #2
 8002586:	1e99      	subs	r1, r3, #2
 8002588:	3804      	subs	r0, #4
 800258a:	f009 fc89 	bl	800bea0 <_HW_FillFrame_>
			_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
 800258e:	8822      	ldrh	r2, [r4, #0]
 8002590:	8863      	ldrh	r3, [r4, #2]
					block->pos.y, block->colors[3]);
 8002592:	8961      	ldrh	r1, [r4, #10]
			_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
 8002594:	9100      	str	r1, [sp, #0]
 8002596:	1e99      	subs	r1, r3, #2
 8002598:	1e90      	subs	r0, r2, #2
 800259a:	f009 fc81 	bl	800bea0 <_HW_FillFrame_>
 800259e:	e7d2      	b.n	8002546 <draw_block+0x5e>
			_HW_FillFrame_(block->pos.x - 4, block->pos.y - 2, block->pos.x,
 80025a0:	8822      	ldrh	r2, [r4, #0]
 80025a2:	8863      	ldrh	r3, [r4, #2]
 80025a4:	9500      	str	r5, [sp, #0]
 80025a6:	1e99      	subs	r1, r3, #2
 80025a8:	1f10      	subs	r0, r2, #4
 80025aa:	f009 fc79 	bl	800bea0 <_HW_FillFrame_>
 80025ae:	e7ca      	b.n	8002546 <draw_block+0x5e>
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 4, block->pos.x - 2,
 80025b0:	8820      	ldrh	r0, [r4, #0]
 80025b2:	8863      	ldrh	r3, [r4, #2]
 80025b4:	9500      	str	r5, [sp, #0]
 80025b6:	1e82      	subs	r2, r0, #2
 80025b8:	1f19      	subs	r1, r3, #4
 80025ba:	3804      	subs	r0, #4
 80025bc:	f009 fc70 	bl	800bea0 <_HW_FillFrame_>
		if (block->colors[1] == block->colors[3]) {		// Right part
 80025c0:	88e3      	ldrh	r3, [r4, #6]
 80025c2:	8962      	ldrh	r2, [r4, #10]
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d011      	beq.n	80025ec <draw_block+0x104>
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 4, block->pos.x,
 80025c8:	8822      	ldrh	r2, [r4, #0]
 80025ca:	8861      	ldrh	r1, [r4, #2]
				block->pos.y - 2, block->colors[1]);
 80025cc:	88e3      	ldrh	r3, [r4, #6]
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 4, block->pos.x,
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	1e8b      	subs	r3, r1, #2
 80025d2:	3904      	subs	r1, #4
 80025d4:	1e90      	subs	r0, r2, #2
 80025d6:	f009 fc63 	bl	800bea0 <_HW_FillFrame_>
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
 80025da:	8822      	ldrh	r2, [r4, #0]
 80025dc:	8863      	ldrh	r3, [r4, #2]
				block->pos.y, block->colors[3]);
 80025de:	8961      	ldrh	r1, [r4, #10]
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
 80025e0:	9100      	str	r1, [sp, #0]
 80025e2:	1e99      	subs	r1, r3, #2
 80025e4:	1e90      	subs	r0, r2, #2
 80025e6:	f009 fc5b 	bl	800bea0 <_HW_FillFrame_>
 80025ea:	e7ac      	b.n	8002546 <draw_block+0x5e>
			_HW_FillFrame_(block->pos.x - 2, block->pos.y - 4, block->pos.x,
 80025ec:	8822      	ldrh	r2, [r4, #0]
 80025ee:	8861      	ldrh	r1, [r4, #2]
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	1e8b      	subs	r3, r1, #2
 80025f4:	3904      	subs	r1, #4
 80025f6:	1e90      	subs	r0, r2, #2
 80025f8:	f009 fc52 	bl	800bea0 <_HW_FillFrame_>
 80025fc:	e7e4      	b.n	80025c8 <draw_block+0xe0>

080025fe <free_block>:
=======
 8002488:	8820      	ldrh	r0, [r4, #0]
 800248a:	8861      	ldrh	r1, [r4, #2]
 800248c:	9500      	str	r5, [sp, #0]
 800248e:	1e8b      	subs	r3, r1, #2
 8002490:	1e82      	subs	r2, r0, #2
 8002492:	3904      	subs	r1, #4
 8002494:	3804      	subs	r0, #4
 8002496:	f009 fc6f 	bl	800bd78 <_HW_FillFrame_>
				block->pos.y - 2, block->colors[0]);
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 4, block->pos.x,
 800249a:	8822      	ldrh	r2, [r4, #0]
 800249c:	8861      	ldrh	r1, [r4, #2]
				block->pos.y - 2, block->colors[1]);
 800249e:	88e3      	ldrh	r3, [r4, #6]
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 4, block->pos.x,
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	1e8b      	subs	r3, r1, #2
 80024a4:	3904      	subs	r1, #4
 80024a6:	1e90      	subs	r0, r2, #2
 80024a8:	f009 fc66 	bl	800bd78 <_HW_FillFrame_>
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 2, block->pos.x - 2,
 80024ac:	8820      	ldrh	r0, [r4, #0]
 80024ae:	8863      	ldrh	r3, [r4, #2]
				block->pos.y, block->colors[2]);
 80024b0:	8922      	ldrh	r2, [r4, #8]
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 2, block->pos.x - 2,
 80024b2:	9200      	str	r2, [sp, #0]
 80024b4:	1e82      	subs	r2, r0, #2
 80024b6:	1e99      	subs	r1, r3, #2
 80024b8:	3804      	subs	r0, #4
 80024ba:	f009 fc5d 	bl	800bd78 <_HW_FillFrame_>
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
 80024be:	8822      	ldrh	r2, [r4, #0]
 80024c0:	8863      	ldrh	r3, [r4, #2]
				block->pos.y, block->colors[3]);
 80024c2:	8961      	ldrh	r1, [r4, #10]
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
 80024c4:	9100      	str	r1, [sp, #0]
 80024c6:	1e99      	subs	r1, r3, #2
 80024c8:	1e90      	subs	r0, r2, #2
 80024ca:	f009 fc55 	bl	800bd78 <_HW_FillFrame_>
	}

}
 80024ce:	b003      	add	sp, #12
 80024d0:	bd30      	pop	{r4, r5, pc}
	if (block->colors[0] == block->colors[1] && block->colors[1] == block->colors[2] && block->colors[2] == block->colors[3]) {
 80024d2:	8902      	ldrh	r2, [r0, #8]
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d1d2      	bne.n	800247e <draw_block+0xe>
 80024d8:	8941      	ldrh	r1, [r0, #10]
 80024da:	428a      	cmp	r2, r1
 80024dc:	d1cf      	bne.n	800247e <draw_block+0xe>
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 4, block->pos.x, block->pos.y, block->colors[0]);
 80024de:	8802      	ldrh	r2, [r0, #0]
 80024e0:	8843      	ldrh	r3, [r0, #2]
 80024e2:	9500      	str	r5, [sp, #0]
 80024e4:	1f19      	subs	r1, r3, #4
 80024e6:	1f10      	subs	r0, r2, #4
 80024e8:	f009 fc46 	bl	800bd78 <_HW_FillFrame_>
	if (block->colors[0] == block->colors[1] && block->colors[1] == block->colors[2] && block->colors[2] == block->colors[3]) {
 80024ec:	e7ef      	b.n	80024ce <draw_block+0x5e>
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 4, block->pos.x,
 80024ee:	8822      	ldrh	r2, [r4, #0]
 80024f0:	8861      	ldrh	r1, [r4, #2]
 80024f2:	9500      	str	r5, [sp, #0]
 80024f4:	1e8b      	subs	r3, r1, #2
 80024f6:	3904      	subs	r1, #4
 80024f8:	1f10      	subs	r0, r2, #4
 80024fa:	f009 fc3d 	bl	800bd78 <_HW_FillFrame_>
		if (block->colors[2] == block->colors[3]) {		// Bottom part
 80024fe:	8925      	ldrh	r5, [r4, #8]
 8002500:	8963      	ldrh	r3, [r4, #10]
 8002502:	429d      	cmp	r5, r3
 8002504:	d010      	beq.n	8002528 <draw_block+0xb8>
			_HW_FillFrame_(block->pos.x - 4, block->pos.y - 2, block->pos.x - 2,
 8002506:	8820      	ldrh	r0, [r4, #0]
 8002508:	8863      	ldrh	r3, [r4, #2]
 800250a:	9500      	str	r5, [sp, #0]
 800250c:	1e82      	subs	r2, r0, #2
 800250e:	1e99      	subs	r1, r3, #2
 8002510:	3804      	subs	r0, #4
 8002512:	f009 fc31 	bl	800bd78 <_HW_FillFrame_>
			_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
 8002516:	8822      	ldrh	r2, [r4, #0]
 8002518:	8863      	ldrh	r3, [r4, #2]
					block->pos.y, block->colors[3]);
 800251a:	8961      	ldrh	r1, [r4, #10]
			_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
 800251c:	9100      	str	r1, [sp, #0]
 800251e:	1e99      	subs	r1, r3, #2
 8002520:	1e90      	subs	r0, r2, #2
 8002522:	f009 fc29 	bl	800bd78 <_HW_FillFrame_>
 8002526:	e7d2      	b.n	80024ce <draw_block+0x5e>
			_HW_FillFrame_(block->pos.x - 4, block->pos.y - 2, block->pos.x,
 8002528:	8822      	ldrh	r2, [r4, #0]
 800252a:	8863      	ldrh	r3, [r4, #2]
 800252c:	9500      	str	r5, [sp, #0]
 800252e:	1e99      	subs	r1, r3, #2
 8002530:	1f10      	subs	r0, r2, #4
 8002532:	f009 fc21 	bl	800bd78 <_HW_FillFrame_>
 8002536:	e7ca      	b.n	80024ce <draw_block+0x5e>
		_HW_FillFrame_(block->pos.x - 4, block->pos.y - 4, block->pos.x - 2,
 8002538:	8820      	ldrh	r0, [r4, #0]
 800253a:	8863      	ldrh	r3, [r4, #2]
 800253c:	9500      	str	r5, [sp, #0]
 800253e:	1e82      	subs	r2, r0, #2
 8002540:	1f19      	subs	r1, r3, #4
 8002542:	3804      	subs	r0, #4
 8002544:	f009 fc18 	bl	800bd78 <_HW_FillFrame_>
		if (block->colors[1] == block->colors[3]) {		// Right part
 8002548:	88e3      	ldrh	r3, [r4, #6]
 800254a:	8962      	ldrh	r2, [r4, #10]
 800254c:	4293      	cmp	r3, r2
 800254e:	d011      	beq.n	8002574 <draw_block+0x104>
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 4, block->pos.x,
 8002550:	8822      	ldrh	r2, [r4, #0]
 8002552:	8861      	ldrh	r1, [r4, #2]
				block->pos.y - 2, block->colors[1]);
 8002554:	88e3      	ldrh	r3, [r4, #6]
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 4, block->pos.x,
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	1e8b      	subs	r3, r1, #2
 800255a:	3904      	subs	r1, #4
 800255c:	1e90      	subs	r0, r2, #2
 800255e:	f009 fc0b 	bl	800bd78 <_HW_FillFrame_>
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
 8002562:	8822      	ldrh	r2, [r4, #0]
 8002564:	8863      	ldrh	r3, [r4, #2]
				block->pos.y, block->colors[3]);
 8002566:	8961      	ldrh	r1, [r4, #10]
		_HW_FillFrame_(block->pos.x - 2, block->pos.y - 2, block->pos.x,
 8002568:	9100      	str	r1, [sp, #0]
 800256a:	1e99      	subs	r1, r3, #2
 800256c:	1e90      	subs	r0, r2, #2
 800256e:	f009 fc03 	bl	800bd78 <_HW_FillFrame_>
 8002572:	e7ac      	b.n	80024ce <draw_block+0x5e>
			_HW_FillFrame_(block->pos.x - 2, block->pos.y - 4, block->pos.x,
 8002574:	8822      	ldrh	r2, [r4, #0]
 8002576:	8861      	ldrh	r1, [r4, #2]
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	1e8b      	subs	r3, r1, #2
 800257c:	3904      	subs	r1, #4
 800257e:	1e90      	subs	r0, r2, #2
 8002580:	f009 fbfa 	bl	800bd78 <_HW_FillFrame_>
 8002584:	e7e4      	b.n	8002550 <draw_block+0xe0>
	...

08002588 <draw_tree_normal>:

void draw_tree_normal(coord *pos) {
 8002588:	b570      	push	{r4, r5, r6, lr}
 800258a:	4606      	mov	r6, r0
	// 0,0 in top left corner
	for (int j = 0; j < TREE_WIDTH; j++) {
 800258c:	2500      	movs	r5, #0
 800258e:	e013      	b.n	80025b8 <draw_tree_normal+0x30>
		for (int i = 0; i < TREE_HEIGHT; i++) {
 8002590:	3401      	adds	r4, #1
 8002592:	2c3f      	cmp	r4, #63	; 0x3f
 8002594:	dc0f      	bgt.n	80025b6 <draw_tree_normal+0x2e>
			if (tree[i][j] == 0)
 8002596:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 800259a:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <draw_tree_normal+0x3c>)
 800259c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80025a0:	2a00      	cmp	r2, #0
 80025a2:	d0f5      	beq.n	8002590 <draw_tree_normal+0x8>
				continue;
			UG_DrawPixel(j + pos->x, i + pos->y, tree[i][j]);
 80025a4:	8830      	ldrh	r0, [r6, #0]
 80025a6:	4428      	add	r0, r5
 80025a8:	8871      	ldrh	r1, [r6, #2]
 80025aa:	4421      	add	r1, r4
 80025ac:	b209      	sxth	r1, r1
 80025ae:	b200      	sxth	r0, r0
 80025b0:	f009 fc6a 	bl	800be88 <UG_DrawPixel>
 80025b4:	e7ec      	b.n	8002590 <draw_tree_normal+0x8>
	for (int j = 0; j < TREE_WIDTH; j++) {
 80025b6:	3501      	adds	r5, #1
 80025b8:	2d1f      	cmp	r5, #31
 80025ba:	dc01      	bgt.n	80025c0 <draw_tree_normal+0x38>
		for (int i = 0; i < TREE_HEIGHT; i++) {
 80025bc:	2400      	movs	r4, #0
 80025be:	e7e8      	b.n	8002592 <draw_tree_normal+0xa>
		}
	}
}
 80025c0:	bd70      	pop	{r4, r5, r6, pc}
 80025c2:	bf00      	nop
 80025c4:	20000000 	.word	0x20000000

080025c8 <free_block>:
>>>>>>> render
	free_block(mat->block);
	free(mat);
}

/* Frees the memory of a block pointer */
void free_block(block *block) {
<<<<<<< HEAD
 80025fe:	b508      	push	{r3, lr}
	free(block);
 8002600:	f00b ffe2 	bl	800e5c8 <free>
}
 8002604:	bd08      	pop	{r3, pc}

08002606 <free_destroyable>:
void free_destroyable(destroyable *destroyable) {
 8002606:	b510      	push	{r4, lr}
 8002608:	4604      	mov	r4, r0
	free_block(destroyable->block);
 800260a:	6800      	ldr	r0, [r0, #0]
 800260c:	f7ff fff7 	bl	80025fe <free_block>
	free(destroyable);
 8002610:	4620      	mov	r0, r4
 8002612:	f00b ffd9 	bl	800e5c8 <free>
}
 8002616:	bd10      	pop	{r4, pc}

08002618 <free_bg_material>:
void free_bg_material(bg_material *mat) {
 8002618:	b510      	push	{r4, lr}
 800261a:	4604      	mov	r4, r0
	free_block(mat->block);
 800261c:	6800      	ldr	r0, [r0, #0]
 800261e:	f7ff ffee 	bl	80025fe <free_block>
	free(mat);
 8002622:	4620      	mov	r0, r4
 8002624:	f00b ffd0 	bl	800e5c8 <free>
}
 8002628:	bd10      	pop	{r4, pc}
	...

0800262c <render_block>:
void render_block(block_t material, pixel_c pixel_pos_x, pixel_c pixel_pos_y, float illumination, block_c ground_height, block_c current_height) {
 800262c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002630:	ed2d 8b02 	vpush	{d8}
 8002634:	4604      	mov	r4, r0
 8002636:	4688      	mov	r8, r1
 8002638:	4617      	mov	r7, r2
 800263a:	eeb0 8a40 	vmov.f32	s16, s0
 800263e:	461d      	mov	r5, r3
	bool night = is_night();
 8002640:	f000 fc60 	bl	8002f04 <is_night>
 8002644:	4606      	mov	r6, r0
	float random = (float) rand() / RAND_MAX;
 8002646:	f00c ff57 	bl	800f4f8 <rand>
 800264a:	ee07 0a90 	vmov	s15, r0
 800264e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002652:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80027c8 <render_block+0x19c>
 8002656:	ee67 7a87 	vmul.f32	s15, s15, s14
	if (material == (block_t) _dirt) {
 800265a:	2c01      	cmp	r4, #1
 800265c:	d02a      	beq.n	80026b4 <render_block+0x88>
	} else if (material == (block_t) _grass) {
 800265e:	2c02      	cmp	r4, #2
 8002660:	d03b      	beq.n	80026da <render_block+0xae>
	} else if (material == (block_t) _lava) {
 8002662:	2c08      	cmp	r4, #8
 8002664:	d049      	beq.n	80026fa <render_block+0xce>
	} else if (material == (block_t) _wood) {
 8002666:	2c03      	cmp	r4, #3
 8002668:	d057      	beq.n	800271a <render_block+0xee>
	} else if (material == (block_t) _rock) {
 800266a:	2c07      	cmp	r4, #7
 800266c:	d065      	beq.n	800273a <render_block+0x10e>
	} else if (material == (block_t) _dirt_bg) {
 800266e:	2c0c      	cmp	r4, #12
 8002670:	d073      	beq.n	800275a <render_block+0x12e>
	} else if (material == (block_t) _sky) {
 8002672:	2c04      	cmp	r4, #4
 8002674:	f000 8081 	beq.w	800277a <render_block+0x14e>
		if (current_height < ground_height) {
 8002678:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800267c:	42ab      	cmp	r3, r5
 800267e:	f080 8093 	bcs.w	80027a8 <render_block+0x17c>
			if (random < probability_star && night) {
 8002682:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268a:	f100 8086 	bmi.w	800279a <render_block+0x16e>
			} else if (night) {
 800268e:	2e00      	cmp	r6, #0
 8002690:	f040 8088 	bne.w	80027a4 <render_block+0x178>
			uint16_t *color = C_SKY;
 8002694:	4a4d      	ldr	r2, [pc, #308]	; (80027cc <render_block+0x1a0>)
			bg_material *sky = create_bg_material(pixel_pos_x, pixel_pos_y, color, _sky, illumination);
 8002696:	eeb0 0a48 	vmov.f32	s0, s16
 800269a:	2304      	movs	r3, #4
 800269c:	4639      	mov	r1, r7
 800269e:	4640      	mov	r0, r8
 80026a0:	f7ff ff19 	bl	80024d6 <create_bg_material>
 80026a4:	4604      	mov	r4, r0
			draw_block(sky->block);
 80026a6:	6800      	ldr	r0, [r0, #0]
 80026a8:	f7ff ff1e 	bl	80024e8 <draw_block>
			free_bg_material(sky);
 80026ac:	4620      	mov	r0, r4
 80026ae:	f7ff ffb3 	bl	8002618 <free_bg_material>
 80026b2:	e00e      	b.n	80026d2 <render_block+0xa6>
		destroyable *dirt = create_destroyable(pixel_pos_x, pixel_pos_y, C_DIRT, _dirt, illumination);
 80026b4:	eeb0 0a48 	vmov.f32	s0, s16
 80026b8:	2301      	movs	r3, #1
 80026ba:	4a45      	ldr	r2, [pc, #276]	; (80027d0 <render_block+0x1a4>)
 80026bc:	4639      	mov	r1, r7
 80026be:	4640      	mov	r0, r8
 80026c0:	f7ff ff00 	bl	80024c4 <create_destroyable>
 80026c4:	4604      	mov	r4, r0
		draw_block(dirt->block);
 80026c6:	6800      	ldr	r0, [r0, #0]
 80026c8:	f7ff ff0e 	bl	80024e8 <draw_block>
		free_destroyable(dirt);
 80026cc:	4620      	mov	r0, r4
 80026ce:	f7ff ff9a 	bl	8002606 <free_destroyable>
}
 80026d2:	ecbd 8b02 	vpop	{d8}
 80026d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		destroyable *grass = create_destroyable(pixel_pos_x, pixel_pos_y, C_GRASS, _grass, illumination);
 80026da:	eeb0 0a48 	vmov.f32	s0, s16
 80026de:	2302      	movs	r3, #2
 80026e0:	4a3c      	ldr	r2, [pc, #240]	; (80027d4 <render_block+0x1a8>)
 80026e2:	4639      	mov	r1, r7
 80026e4:	4640      	mov	r0, r8
 80026e6:	f7ff feed 	bl	80024c4 <create_destroyable>
 80026ea:	4604      	mov	r4, r0
		draw_block(grass->block);
 80026ec:	6800      	ldr	r0, [r0, #0]
 80026ee:	f7ff fefb 	bl	80024e8 <draw_block>
		free_destroyable(grass);
 80026f2:	4620      	mov	r0, r4
 80026f4:	f7ff ff87 	bl	8002606 <free_destroyable>
 80026f8:	e7eb      	b.n	80026d2 <render_block+0xa6>
		destroyable *lava = create_destroyable(pixel_pos_x, pixel_pos_y, C_LAVA, _lava, illumination);
 80026fa:	eeb0 0a48 	vmov.f32	s0, s16
 80026fe:	2308      	movs	r3, #8
 8002700:	4a35      	ldr	r2, [pc, #212]	; (80027d8 <render_block+0x1ac>)
 8002702:	4639      	mov	r1, r7
 8002704:	4640      	mov	r0, r8
 8002706:	f7ff fedd 	bl	80024c4 <create_destroyable>
 800270a:	4604      	mov	r4, r0
		draw_block(lava->block);
 800270c:	6800      	ldr	r0, [r0, #0]
 800270e:	f7ff feeb 	bl	80024e8 <draw_block>
		free_destroyable(lava);
 8002712:	4620      	mov	r0, r4
 8002714:	f7ff ff77 	bl	8002606 <free_destroyable>
 8002718:	e7db      	b.n	80026d2 <render_block+0xa6>
		destroyable *wood = create_destroyable(pixel_pos_x, pixel_pos_y, C_WOOD, _wood, illumination);
 800271a:	eeb0 0a48 	vmov.f32	s0, s16
 800271e:	2303      	movs	r3, #3
 8002720:	4a2e      	ldr	r2, [pc, #184]	; (80027dc <render_block+0x1b0>)
 8002722:	4639      	mov	r1, r7
 8002724:	4640      	mov	r0, r8
 8002726:	f7ff fecd 	bl	80024c4 <create_destroyable>
 800272a:	4604      	mov	r4, r0
		draw_block(wood->block);
 800272c:	6800      	ldr	r0, [r0, #0]
 800272e:	f7ff fedb 	bl	80024e8 <draw_block>
		free_destroyable(wood);
 8002732:	4620      	mov	r0, r4
 8002734:	f7ff ff67 	bl	8002606 <free_destroyable>
 8002738:	e7cb      	b.n	80026d2 <render_block+0xa6>
		destroyable *rock = create_destroyable(pixel_pos_x, pixel_pos_y, C_ROCK, _rock, illumination);
 800273a:	eeb0 0a48 	vmov.f32	s0, s16
 800273e:	2307      	movs	r3, #7
 8002740:	4a27      	ldr	r2, [pc, #156]	; (80027e0 <render_block+0x1b4>)
 8002742:	4639      	mov	r1, r7
 8002744:	4640      	mov	r0, r8
 8002746:	f7ff febd 	bl	80024c4 <create_destroyable>
 800274a:	4604      	mov	r4, r0
		draw_block(rock->block);
 800274c:	6800      	ldr	r0, [r0, #0]
 800274e:	f7ff fecb 	bl	80024e8 <draw_block>
		free_destroyable(rock);
 8002752:	4620      	mov	r0, r4
 8002754:	f7ff ff57 	bl	8002606 <free_destroyable>
 8002758:	e7bb      	b.n	80026d2 <render_block+0xa6>
		bg_material *dirt = create_bg_material(pixel_pos_x, pixel_pos_y, C_BG_DIRT, _dirt_bg, illumination);
 800275a:	eeb0 0a48 	vmov.f32	s0, s16
 800275e:	230c      	movs	r3, #12
 8002760:	4a20      	ldr	r2, [pc, #128]	; (80027e4 <render_block+0x1b8>)
 8002762:	4639      	mov	r1, r7
 8002764:	4640      	mov	r0, r8
 8002766:	f7ff feb6 	bl	80024d6 <create_bg_material>
 800276a:	4604      	mov	r4, r0
		draw_block(dirt->block);
 800276c:	6800      	ldr	r0, [r0, #0]
 800276e:	f7ff febb 	bl	80024e8 <draw_block>
		free_bg_material(dirt);
 8002772:	4620      	mov	r0, r4
 8002774:	f7ff ff50 	bl	8002618 <free_bg_material>
 8002778:	e7ab      	b.n	80026d2 <render_block+0xa6>
		bg_material *sky = create_bg_material(pixel_pos_x, pixel_pos_y, C_SKY, _sky, illumination);
 800277a:	eeb0 0a48 	vmov.f32	s0, s16
 800277e:	2304      	movs	r3, #4
 8002780:	4a12      	ldr	r2, [pc, #72]	; (80027cc <render_block+0x1a0>)
 8002782:	4639      	mov	r1, r7
 8002784:	4640      	mov	r0, r8
 8002786:	f7ff fea6 	bl	80024d6 <create_bg_material>
 800278a:	4604      	mov	r4, r0
		draw_block(sky->block);
 800278c:	6800      	ldr	r0, [r0, #0]
 800278e:	f7ff feab 	bl	80024e8 <draw_block>
		free_bg_material(sky);
 8002792:	4620      	mov	r0, r4
 8002794:	f7ff ff40 	bl	8002618 <free_bg_material>
 8002798:	e79b      	b.n	80026d2 <render_block+0xa6>
			if (random < probability_star && night) {
 800279a:	2e00      	cmp	r6, #0
 800279c:	f43f af77 	beq.w	800268e <render_block+0x62>
				color = C_STAR;
 80027a0:	4a11      	ldr	r2, [pc, #68]	; (80027e8 <render_block+0x1bc>)
 80027a2:	e778      	b.n	8002696 <render_block+0x6a>
				color = C_NIGHT_SKY;
 80027a4:	4a11      	ldr	r2, [pc, #68]	; (80027ec <render_block+0x1c0>)
 80027a6:	e776      	b.n	8002696 <render_block+0x6a>
			bg_material *dirt = create_bg_material(pixel_pos_x, pixel_pos_y, C_BG_DIRT, _dirt_bg, illumination);
 80027a8:	eeb0 0a48 	vmov.f32	s0, s16
 80027ac:	230c      	movs	r3, #12
 80027ae:	4a0d      	ldr	r2, [pc, #52]	; (80027e4 <render_block+0x1b8>)
 80027b0:	4639      	mov	r1, r7
 80027b2:	4640      	mov	r0, r8
 80027b4:	f7ff fe8f 	bl	80024d6 <create_bg_material>
 80027b8:	4604      	mov	r4, r0
			draw_block(dirt->block);
 80027ba:	6800      	ldr	r0, [r0, #0]
 80027bc:	f7ff fe94 	bl	80024e8 <draw_block>
			free_bg_material(dirt);
 80027c0:	4620      	mov	r0, r4
 80027c2:	f7ff ff29 	bl	8002618 <free_bg_material>
}
 80027c6:	e784      	b.n	80026d2 <render_block+0xa6>
 80027c8:	30000000 	.word	0x30000000
 80027cc:	20000038 	.word	0x20000038
 80027d0:	20000008 	.word	0x20000008
 80027d4:	20000010 	.word	0x20000010
 80027d8:	20000018 	.word	0x20000018
 80027dc:	20000050 	.word	0x20000050
 80027e0:	20000030 	.word	0x20000030
 80027e4:	20000964 	.word	0x20000964
 80027e8:	20000040 	.word	0x20000040
 80027ec:	20000020 	.word	0x20000020

080027f0 <draw_scene>:
void draw_scene(bool init) {
 80027f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027f4:	b08d      	sub	sp, #52	; 0x34
 80027f6:	4604      	mov	r4, r0
 80027f8:	900b      	str	r0, [sp, #44]	; 0x2c
	get_scene();
 80027fa:	f000 f94d 	bl	8002a98 <get_scene>
	get_scene_mask();	// 1 - do not overwrite, 0 do overwrite
 80027fe:	f000 f9ef 	bl	8002be0 <get_scene_mask>
	srand(time(NULL));
 8002802:	2000      	movs	r0, #0
 8002804:	f00d fd98 	bl	8010338 <time>
 8002808:	f00c fe48 	bl	800f49c <srand>
	int8_t move_horizontal = old_camera_x - camera_x_block; // + -> left, - -> right
 800280c:	4b56      	ldr	r3, [pc, #344]	; (8002968 <draw_scene+0x178>)
 800280e:	881a      	ldrh	r2, [r3, #0]
 8002810:	4b56      	ldr	r3, [pc, #344]	; (800296c <draw_scene+0x17c>)
 8002812:	8818      	ldrh	r0, [r3, #0]
	int8_t move_vertical = old_camera_y - camera_y_block; // + -> up, - -> down
 8002814:	4b56      	ldr	r3, [pc, #344]	; (8002970 <draw_scene+0x180>)
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	4956      	ldr	r1, [pc, #344]	; (8002974 <draw_scene+0x184>)
 800281a:	8809      	ldrh	r1, [r1, #0]
	if (!init && move_horizontal == 0 && move_vertical == 0) {
 800281c:	b934      	cbnz	r4, 800282c <draw_scene+0x3c>
 800281e:	b2d7      	uxtb	r7, r2
 8002820:	b2c6      	uxtb	r6, r0
 8002822:	b2dd      	uxtb	r5, r3
 8002824:	fa5f fc81 	uxtb.w	ip, r1
 8002828:	42b7      	cmp	r7, r6
 800282a:	d012      	beq.n	8002852 <draw_scene+0x62>
	block_c world_block_x0 = camera_x_block - SCENE_BLOCKS_X / 2;
 800282c:	3828      	subs	r0, #40	; 0x28
 800282e:	b280      	uxth	r0, r0
 8002830:	9005      	str	r0, [sp, #20]
	block_c world_block_y0 = camera_y_block - SCENE_BLOCKS_Y / 2;
 8002832:	391e      	subs	r1, #30
 8002834:	b289      	uxth	r1, r1
 8002836:	9106      	str	r1, [sp, #24]
	block_c old_world_block_x0 = old_camera_x - SCENE_BLOCKS_X / 2;
 8002838:	3a28      	subs	r2, #40	; 0x28
 800283a:	b292      	uxth	r2, r2
 800283c:	9207      	str	r2, [sp, #28]
	block_c old_world_block_y0 = old_camera_y - SCENE_BLOCKS_Y / 2;
 800283e:	3b1e      	subs	r3, #30
 8002840:	b29b      	uxth	r3, r3
 8002842:	9308      	str	r3, [sp, #32]
	for (cell_c i = 0; i < SCENE_CELLS_X; i++) {
 8002844:	f04f 0a00 	mov.w	sl, #0
	pixel_c pos_x2 = 8;
 8002848:	2308      	movs	r3, #8
 800284a:	930a      	str	r3, [sp, #40]	; 0x28
	pixel_c pos_x1 = 4;
 800284c:	2304      	movs	r3, #4
 800284e:	9309      	str	r3, [sp, #36]	; 0x24
	for (cell_c i = 0; i < SCENE_CELLS_X; i++) {
 8002850:	e082      	b.n	8002958 <draw_scene+0x168>
	if (!init && move_horizontal == 0 && move_vertical == 0) {
 8002852:	4565      	cmp	r5, ip
 8002854:	d1ea      	bne.n	800282c <draw_scene+0x3c>
}
 8002856:	b00d      	add	sp, #52	; 0x34
 8002858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					} else if (lower(old_world_cell) == lower(current_scene_cell)) {
 800285c:	4638      	mov	r0, r7
 800285e:	f002 fb05 	bl	8004e6c <lower>
 8002862:	4607      	mov	r7, r0
 8002864:	4658      	mov	r0, fp
 8002866:	f002 fb01 	bl	8004e6c <lower>
 800286a:	4287      	cmp	r7, r0
 800286c:	d051      	beq.n	8002912 <draw_scene+0x122>
			bool skip_left = false, skip_right = false;
 800286e:	4647      	mov	r7, r8
 8002870:	46c1      	mov	r9, r8
 8002872:	e001      	b.n	8002878 <draw_scene+0x88>
 8002874:	2700      	movs	r7, #0
 8002876:	46b9      	mov	r9, r7
			block_t left_block = upper(current_scene_cell);
 8002878:	4658      	mov	r0, fp
 800287a:	f002 faf5 	bl	8004e68 <upper>
 800287e:	9003      	str	r0, [sp, #12]
			block_t right_block = lower(current_scene_cell);
 8002880:	4658      	mov	r0, fp
 8002882:	f002 faf3 	bl	8004e6c <lower>
 8002886:	9004      	str	r0, [sp, #16]
			block_c ground_height = LVL1_HMAP[world_cell_x];
 8002888:	4b3b      	ldr	r3, [pc, #236]	; (8002978 <draw_scene+0x188>)
 800288a:	f833 b016 	ldrh.w	fp, [r3, r6, lsl #1]
			pixel_c pos_y = block_to_pixel(j) + 1;
 800288e:	4620      	mov	r0, r4
 8002890:	f002 faf1 	bl	8004e76 <block_to_pixel>
 8002894:	1c46      	adds	r6, r0, #1
 8002896:	b2b6      	uxth	r6, r6
			if (!skip_left) {
 8002898:	f1b9 0f00 	cmp.w	r9, #0
 800289c:	d03c      	beq.n	8002918 <draw_scene+0x128>
			if (!skip_right) {
 800289e:	2f00      	cmp	r7, #0
 80028a0:	d044      	beq.n	800292c <draw_scene+0x13c>
		for (cell_c j = 0; j < SCENE_CELLS_Y; j++) {
 80028a2:	3401      	adds	r4, #1
 80028a4:	b2a4      	uxth	r4, r4
 80028a6:	2c3b      	cmp	r4, #59	; 0x3b
 80028a8:	d84a      	bhi.n	8002940 <draw_scene+0x150>
			cell_c world_cell_x = block_to_cell_x(world_block_x0) + i;
 80028aa:	9805      	ldr	r0, [sp, #20]
 80028ac:	f002 fae8 	bl	8004e80 <block_to_cell_x>
 80028b0:	eb00 060a 	add.w	r6, r0, sl
 80028b4:	b2b6      	uxth	r6, r6
			cell_c world_cell_y = block_to_cell_y(world_block_y0) + j;
 80028b6:	9806      	ldr	r0, [sp, #24]
 80028b8:	f002 fae4 	bl	8004e84 <block_to_cell_y>
 80028bc:	1905      	adds	r5, r0, r4
 80028be:	b2ad      	uxth	r5, r5
			cell_c old_world_cell_x = block_to_cell_x(old_world_block_x0) + i;
 80028c0:	9807      	ldr	r0, [sp, #28]
 80028c2:	f002 fadd 	bl	8004e80 <block_to_cell_x>
 80028c6:	eb00 070a 	add.w	r7, r0, sl
 80028ca:	b2bf      	uxth	r7, r7
			cell_c old_world_cell_y = block_to_cell_y(old_world_block_y0) + j;
 80028cc:	9808      	ldr	r0, [sp, #32]
 80028ce:	f002 fad9 	bl	8004e84 <block_to_cell_y>
 80028d2:	4420      	add	r0, r4
 80028d4:	b280      	uxth	r0, r0
			cell_t current_scene_cell = SCENE[scene_cell_y][scene_cell_x];
 80028d6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80028da:	4a28      	ldr	r2, [pc, #160]	; (800297c <draw_scene+0x18c>)
 80028dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80028e0:	f813 b00a 	ldrb.w	fp, [r3, sl]
			cell_t old_world_cell = WORLD[old_world_cell_y][old_world_cell_x];
 80028e4:	4b26      	ldr	r3, [pc, #152]	; (8002980 <draw_scene+0x190>)
 80028e6:	22c8      	movs	r2, #200	; 0xc8
 80028e8:	fb02 3000 	mla	r0, r2, r0, r3
 80028ec:	5dc7      	ldrb	r7, [r0, r7]
			if (!init) {
 80028ee:	f1b8 0f00 	cmp.w	r8, #0
 80028f2:	d1bf      	bne.n	8002874 <draw_scene+0x84>
				if (old_world_cell == current_scene_cell) {
 80028f4:	45bb      	cmp	fp, r7
 80028f6:	d0d4      	beq.n	80028a2 <draw_scene+0xb2>
					if (upper(old_world_cell) == upper(current_scene_cell)) {
 80028f8:	4638      	mov	r0, r7
 80028fa:	f002 fab5 	bl	8004e68 <upper>
 80028fe:	4681      	mov	r9, r0
 8002900:	4658      	mov	r0, fp
 8002902:	f002 fab1 	bl	8004e68 <upper>
 8002906:	4581      	cmp	r9, r0
 8002908:	d1a8      	bne.n	800285c <draw_scene+0x6c>
			bool skip_left = false, skip_right = false;
 800290a:	4647      	mov	r7, r8
						skip_left = true;
 800290c:	f04f 0901 	mov.w	r9, #1
 8002910:	e7b2      	b.n	8002878 <draw_scene+0x88>
			bool skip_left = false, skip_right = false;
 8002912:	46c1      	mov	r9, r8
						skip_right = true;
 8002914:	2701      	movs	r7, #1
 8002916:	e7af      	b.n	8002878 <draw_scene+0x88>
				render_block(left_block, pos_x1, pos_y, illumination, ground_height, current_height);
 8002918:	9500      	str	r5, [sp, #0]
 800291a:	465b      	mov	r3, fp
 800291c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002920:	4632      	mov	r2, r6
 8002922:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002924:	9803      	ldr	r0, [sp, #12]
 8002926:	f7ff fe81 	bl	800262c <render_block>
 800292a:	e7b8      	b.n	800289e <draw_scene+0xae>
				render_block(right_block, pos_x2, pos_y, illumination, ground_height, current_height);
 800292c:	9500      	str	r5, [sp, #0]
 800292e:	465b      	mov	r3, fp
 8002930:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002934:	4632      	mov	r2, r6
 8002936:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002938:	9804      	ldr	r0, [sp, #16]
 800293a:	f7ff fe77 	bl	800262c <render_block>
 800293e:	e7b0      	b.n	80028a2 <draw_scene+0xb2>
		pos_x1 += 8;
 8002940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002942:	3308      	adds	r3, #8
 8002944:	b29b      	uxth	r3, r3
 8002946:	9309      	str	r3, [sp, #36]	; 0x24
		pos_x2 += 8;
 8002948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800294a:	3308      	adds	r3, #8
 800294c:	b29b      	uxth	r3, r3
 800294e:	930a      	str	r3, [sp, #40]	; 0x28
	for (cell_c i = 0; i < SCENE_CELLS_X; i++) {
 8002950:	f10a 0301 	add.w	r3, sl, #1
 8002954:	fa1f fa83 	uxth.w	sl, r3
 8002958:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
 800295c:	f63f af7b 	bhi.w	8002856 <draw_scene+0x66>
		for (cell_c j = 0; j < SCENE_CELLS_Y; j++) {
 8002960:	2400      	movs	r4, #0
 8002962:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8002966:	e79e      	b.n	80028a6 <draw_scene+0xb6>
 8002968:	200110be 	.word	0x200110be
 800296c:	200110b8 	.word	0x200110b8
 8002970:	200110c0 	.word	0x200110c0
 8002974:	200110ba 	.word	0x200110ba
 8002978:	20003f24 	.word	0x20003f24
 800297c:	20004244 	.word	0x20004244
 8002980:	20005538 	.word	0x20005538
=======
 80025c8:	b508      	push	{r3, lr}
	free(block);
 80025ca:	f00b ff31 	bl	800e430 <free>
}
 80025ce:	bd08      	pop	{r3, pc}

080025d0 <free_destroyable>:
void free_destroyable(destroyable *destroyable) {
 80025d0:	b510      	push	{r4, lr}
 80025d2:	4604      	mov	r4, r0
	free_block(destroyable->block);
 80025d4:	6800      	ldr	r0, [r0, #0]
 80025d6:	f7ff fff7 	bl	80025c8 <free_block>
	free(destroyable);
 80025da:	4620      	mov	r0, r4
 80025dc:	f00b ff28 	bl	800e430 <free>
}
 80025e0:	bd10      	pop	{r4, pc}

080025e2 <free_bg_material>:
void free_bg_material(bg_material *mat) {
 80025e2:	b510      	push	{r4, lr}
 80025e4:	4604      	mov	r4, r0
	free_block(mat->block);
 80025e6:	6800      	ldr	r0, [r0, #0]
 80025e8:	f7ff ffee 	bl	80025c8 <free_block>
	free(mat);
 80025ec:	4620      	mov	r0, r4
 80025ee:	f00b ff1f 	bl	800e430 <free>
}
 80025f2:	bd10      	pop	{r4, pc}

080025f4 <render_block>:
	if (material == _empty) {
 80025f4:	b900      	cbnz	r0, 80025f8 <render_block+0x4>
 80025f6:	4770      	bx	lr
void render_block(block_t material, pixel_c pixel_pos_x, pixel_c pixel_pos_y, float illumination, block_c ground_height, block_c current_height) {
 80025f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025fc:	ed2d 8b02 	vpush	{d8}
 8002600:	460f      	mov	r7, r1
 8002602:	4616      	mov	r6, r2
 8002604:	eeb0 8a40 	vmov.f32	s16, s0
 8002608:	461c      	mov	r4, r3
 800260a:	4605      	mov	r5, r0
	bool night = is_night();
 800260c:	f000 fc94 	bl	8002f38 <is_night>
 8002610:	4680      	mov	r8, r0
	float random = (float) rand() / RAND_MAX;
 8002612:	f00c fea5 	bl	800f360 <rand>
 8002616:	ee07 0a90 	vmov	s15, r0
 800261a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800261e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002798 <render_block+0x1a4>
 8002622:	ee67 7a87 	vmul.f32	s15, s15, s14
	if (material == (block_t) _dirt) {
 8002626:	2d01      	cmp	r5, #1
 8002628:	d02b      	beq.n	8002682 <render_block+0x8e>
	} else if (material == (block_t) _grass) {
 800262a:	2d02      	cmp	r5, #2
 800262c:	d03c      	beq.n	80026a8 <render_block+0xb4>
	} else if (material == (block_t) _lava) {
 800262e:	2d08      	cmp	r5, #8
 8002630:	d04a      	beq.n	80026c8 <render_block+0xd4>
	} else if (material == (block_t) _wood) {
 8002632:	2d03      	cmp	r5, #3
 8002634:	d058      	beq.n	80026e8 <render_block+0xf4>
	} else if (material == (block_t) _rock) {
 8002636:	2d07      	cmp	r5, #7
 8002638:	d066      	beq.n	8002708 <render_block+0x114>
	} else if (material == (block_t) _dirt_bg) {
 800263a:	2d0c      	cmp	r5, #12
 800263c:	d074      	beq.n	8002728 <render_block+0x134>
	} else if (material == (block_t) _sky) {
 800263e:	2d04      	cmp	r5, #4
 8002640:	f000 8082 	beq.w	8002748 <render_block+0x154>
		if (current_height < ground_height) {
 8002644:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8002648:	42a3      	cmp	r3, r4
 800264a:	f080 8095 	bcs.w	8002778 <render_block+0x184>
			if (random < probability_star && night) {
 800264e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002656:	f100 8087 	bmi.w	8002768 <render_block+0x174>
			} else if (night) {
 800265a:	f1b8 0f00 	cmp.w	r8, #0
 800265e:	f040 8089 	bne.w	8002774 <render_block+0x180>
			uint16_t *color = C_SKY;
 8002662:	4a4e      	ldr	r2, [pc, #312]	; (800279c <render_block+0x1a8>)
			bg_material *sky = create_bg_material(pixel_pos_x, pixel_pos_y, color, _sky, illumination);
 8002664:	eeb0 0a48 	vmov.f32	s0, s16
 8002668:	2304      	movs	r3, #4
 800266a:	4631      	mov	r1, r6
 800266c:	4638      	mov	r0, r7
 800266e:	f7ff fef6 	bl	800245e <create_bg_material>
 8002672:	4604      	mov	r4, r0
			draw_block(sky->block);
 8002674:	6800      	ldr	r0, [r0, #0]
 8002676:	f7ff fefb 	bl	8002470 <draw_block>
			free_bg_material(sky);
 800267a:	4620      	mov	r0, r4
 800267c:	f7ff ffb1 	bl	80025e2 <free_bg_material>
 8002680:	e00e      	b.n	80026a0 <render_block+0xac>
		destroyable *dirt = create_destroyable(pixel_pos_x, pixel_pos_y, C_DIRT, _dirt, illumination);
 8002682:	eeb0 0a48 	vmov.f32	s0, s16
 8002686:	2301      	movs	r3, #1
 8002688:	4a45      	ldr	r2, [pc, #276]	; (80027a0 <render_block+0x1ac>)
 800268a:	4631      	mov	r1, r6
 800268c:	4638      	mov	r0, r7
 800268e:	f7ff fedd 	bl	800244c <create_destroyable>
 8002692:	4604      	mov	r4, r0
		draw_block(dirt->block);
 8002694:	6800      	ldr	r0, [r0, #0]
 8002696:	f7ff feeb 	bl	8002470 <draw_block>
		free_destroyable(dirt);
 800269a:	4620      	mov	r0, r4
 800269c:	f7ff ff98 	bl	80025d0 <free_destroyable>
}
 80026a0:	ecbd 8b02 	vpop	{d8}
 80026a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		destroyable *grass = create_destroyable(pixel_pos_x, pixel_pos_y, C_GRASS, _grass, illumination);
 80026a8:	eeb0 0a48 	vmov.f32	s0, s16
 80026ac:	2302      	movs	r3, #2
 80026ae:	4a3d      	ldr	r2, [pc, #244]	; (80027a4 <render_block+0x1b0>)
 80026b0:	4631      	mov	r1, r6
 80026b2:	4638      	mov	r0, r7
 80026b4:	f7ff feca 	bl	800244c <create_destroyable>
 80026b8:	4604      	mov	r4, r0
		draw_block(grass->block);
 80026ba:	6800      	ldr	r0, [r0, #0]
 80026bc:	f7ff fed8 	bl	8002470 <draw_block>
		free_destroyable(grass);
 80026c0:	4620      	mov	r0, r4
 80026c2:	f7ff ff85 	bl	80025d0 <free_destroyable>
 80026c6:	e7eb      	b.n	80026a0 <render_block+0xac>
		destroyable *lava = create_destroyable(pixel_pos_x, pixel_pos_y, C_LAVA, _lava, illumination);
 80026c8:	eeb0 0a48 	vmov.f32	s0, s16
 80026cc:	2308      	movs	r3, #8
 80026ce:	4a36      	ldr	r2, [pc, #216]	; (80027a8 <render_block+0x1b4>)
 80026d0:	4631      	mov	r1, r6
 80026d2:	4638      	mov	r0, r7
 80026d4:	f7ff feba 	bl	800244c <create_destroyable>
 80026d8:	4604      	mov	r4, r0
		draw_block(lava->block);
 80026da:	6800      	ldr	r0, [r0, #0]
 80026dc:	f7ff fec8 	bl	8002470 <draw_block>
		free_destroyable(lava);
 80026e0:	4620      	mov	r0, r4
 80026e2:	f7ff ff75 	bl	80025d0 <free_destroyable>
 80026e6:	e7db      	b.n	80026a0 <render_block+0xac>
		destroyable *wood = create_destroyable(pixel_pos_x, pixel_pos_y, C_WOOD, _wood, illumination);
 80026e8:	eeb0 0a48 	vmov.f32	s0, s16
 80026ec:	2303      	movs	r3, #3
 80026ee:	4a2f      	ldr	r2, [pc, #188]	; (80027ac <render_block+0x1b8>)
 80026f0:	4631      	mov	r1, r6
 80026f2:	4638      	mov	r0, r7
 80026f4:	f7ff feaa 	bl	800244c <create_destroyable>
 80026f8:	4604      	mov	r4, r0
		draw_block(wood->block);
 80026fa:	6800      	ldr	r0, [r0, #0]
 80026fc:	f7ff feb8 	bl	8002470 <draw_block>
		free_destroyable(wood);
 8002700:	4620      	mov	r0, r4
 8002702:	f7ff ff65 	bl	80025d0 <free_destroyable>
 8002706:	e7cb      	b.n	80026a0 <render_block+0xac>
		destroyable *rock = create_destroyable(pixel_pos_x, pixel_pos_y, C_ROCK, _rock, illumination);
 8002708:	eeb0 0a48 	vmov.f32	s0, s16
 800270c:	2307      	movs	r3, #7
 800270e:	4a28      	ldr	r2, [pc, #160]	; (80027b0 <render_block+0x1bc>)
 8002710:	4631      	mov	r1, r6
 8002712:	4638      	mov	r0, r7
 8002714:	f7ff fe9a 	bl	800244c <create_destroyable>
 8002718:	4604      	mov	r4, r0
		draw_block(rock->block);
 800271a:	6800      	ldr	r0, [r0, #0]
 800271c:	f7ff fea8 	bl	8002470 <draw_block>
		free_destroyable(rock);
 8002720:	4620      	mov	r0, r4
 8002722:	f7ff ff55 	bl	80025d0 <free_destroyable>
 8002726:	e7bb      	b.n	80026a0 <render_block+0xac>
		bg_material *dirt = create_bg_material(pixel_pos_x, pixel_pos_y, C_BG_DIRT, _dirt_bg, illumination);
 8002728:	eeb0 0a48 	vmov.f32	s0, s16
 800272c:	230c      	movs	r3, #12
 800272e:	4a21      	ldr	r2, [pc, #132]	; (80027b4 <render_block+0x1c0>)
 8002730:	4631      	mov	r1, r6
 8002732:	4638      	mov	r0, r7
 8002734:	f7ff fe93 	bl	800245e <create_bg_material>
 8002738:	4604      	mov	r4, r0
		draw_block(dirt->block);
 800273a:	6800      	ldr	r0, [r0, #0]
 800273c:	f7ff fe98 	bl	8002470 <draw_block>
		free_bg_material(dirt);
 8002740:	4620      	mov	r0, r4
 8002742:	f7ff ff4e 	bl	80025e2 <free_bg_material>
 8002746:	e7ab      	b.n	80026a0 <render_block+0xac>
		bg_material *sky = create_bg_material(pixel_pos_x, pixel_pos_y, C_SKY, _sky, illumination);
 8002748:	eeb0 0a48 	vmov.f32	s0, s16
 800274c:	2304      	movs	r3, #4
 800274e:	4a13      	ldr	r2, [pc, #76]	; (800279c <render_block+0x1a8>)
 8002750:	4631      	mov	r1, r6
 8002752:	4638      	mov	r0, r7
 8002754:	f7ff fe83 	bl	800245e <create_bg_material>
 8002758:	4604      	mov	r4, r0
		draw_block(sky->block);
 800275a:	6800      	ldr	r0, [r0, #0]
 800275c:	f7ff fe88 	bl	8002470 <draw_block>
		free_bg_material(sky);
 8002760:	4620      	mov	r0, r4
 8002762:	f7ff ff3e 	bl	80025e2 <free_bg_material>
 8002766:	e79b      	b.n	80026a0 <render_block+0xac>
			if (random < probability_star && night) {
 8002768:	f1b8 0f00 	cmp.w	r8, #0
 800276c:	f43f af75 	beq.w	800265a <render_block+0x66>
				color = C_STAR;
 8002770:	4a11      	ldr	r2, [pc, #68]	; (80027b8 <render_block+0x1c4>)
 8002772:	e777      	b.n	8002664 <render_block+0x70>
				color = C_NIGHT_SKY;
 8002774:	4a11      	ldr	r2, [pc, #68]	; (80027bc <render_block+0x1c8>)
 8002776:	e775      	b.n	8002664 <render_block+0x70>
			bg_material *dirt = create_bg_material(pixel_pos_x, pixel_pos_y, C_BG_DIRT, _dirt_bg, illumination);
 8002778:	eeb0 0a48 	vmov.f32	s0, s16
 800277c:	230c      	movs	r3, #12
 800277e:	4a0d      	ldr	r2, [pc, #52]	; (80027b4 <render_block+0x1c0>)
 8002780:	4631      	mov	r1, r6
 8002782:	4638      	mov	r0, r7
 8002784:	f7ff fe6b 	bl	800245e <create_bg_material>
 8002788:	4604      	mov	r4, r0
			draw_block(dirt->block);
 800278a:	6800      	ldr	r0, [r0, #0]
 800278c:	f7ff fe70 	bl	8002470 <draw_block>
			free_bg_material(dirt);
 8002790:	4620      	mov	r0, r4
 8002792:	f7ff ff26 	bl	80025e2 <free_bg_material>
 8002796:	e783      	b.n	80026a0 <render_block+0xac>
 8002798:	30000000 	.word	0x30000000
 800279c:	20001030 	.word	0x20001030
 80027a0:	20001008 	.word	0x20001008
 80027a4:	20001010 	.word	0x20001010
 80027a8:	20001018 	.word	0x20001018
 80027ac:	20001040 	.word	0x20001040
 80027b0:	20001028 	.word	0x20001028
 80027b4:	20001954 	.word	0x20001954
 80027b8:	20001038 	.word	0x20001038
 80027bc:	20001020 	.word	0x20001020

080027c0 <draw_scene>:
void draw_scene(bool init) {
 80027c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027c4:	b08d      	sub	sp, #52	; 0x34
 80027c6:	4604      	mov	r4, r0
 80027c8:	9003      	str	r0, [sp, #12]
	get_scene();
 80027ca:	f000 f961 	bl	8002a90 <get_scene>
	get_scene_mask();	// 1 - do not overwrite, 0 do overwrite
 80027ce:	f000 fa03 	bl	8002bd8 <get_scene_mask>
	srand(time(NULL));
 80027d2:	2000      	movs	r0, #0
 80027d4:	f00d fce4 	bl	80101a0 <time>
 80027d8:	f00c fd94 	bl	800f304 <srand>
	int8_t move_horizontal = old_camera_x - camera_x_block; // + -> left, - -> right
 80027dc:	4b60      	ldr	r3, [pc, #384]	; (8002960 <draw_scene+0x1a0>)
 80027de:	881a      	ldrh	r2, [r3, #0]
 80027e0:	4b60      	ldr	r3, [pc, #384]	; (8002964 <draw_scene+0x1a4>)
 80027e2:	8818      	ldrh	r0, [r3, #0]
	int8_t move_vertical = old_camera_y - camera_y_block; // + -> up, - -> down
 80027e4:	4b60      	ldr	r3, [pc, #384]	; (8002968 <draw_scene+0x1a8>)
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	4960      	ldr	r1, [pc, #384]	; (800296c <draw_scene+0x1ac>)
 80027ea:	8809      	ldrh	r1, [r1, #0]
	if (!init && move_horizontal == 0 && move_vertical == 0) {
 80027ec:	b934      	cbnz	r4, 80027fc <draw_scene+0x3c>
 80027ee:	b2d7      	uxtb	r7, r2
 80027f0:	b2c6      	uxtb	r6, r0
 80027f2:	b2dd      	uxtb	r5, r3
 80027f4:	fa5f fc81 	uxtb.w	ip, r1
 80027f8:	42b7      	cmp	r7, r6
 80027fa:	d012      	beq.n	8002822 <draw_scene+0x62>
	block_c world_block_x0 = camera_x_block - SCENE_BLOCKS_X / 2;
 80027fc:	3828      	subs	r0, #40	; 0x28
 80027fe:	b280      	uxth	r0, r0
 8002800:	9005      	str	r0, [sp, #20]
	block_c world_block_y0 = camera_y_block - SCENE_BLOCKS_Y / 2;
 8002802:	391e      	subs	r1, #30
 8002804:	b289      	uxth	r1, r1
 8002806:	9106      	str	r1, [sp, #24]
	block_c old_world_block_x0 = old_camera_x - SCENE_BLOCKS_X / 2;
 8002808:	3a28      	subs	r2, #40	; 0x28
 800280a:	b292      	uxth	r2, r2
 800280c:	9207      	str	r2, [sp, #28]
	block_c old_world_block_y0 = old_camera_y - SCENE_BLOCKS_Y / 2;
 800280e:	3b1e      	subs	r3, #30
 8002810:	b29b      	uxth	r3, r3
 8002812:	9308      	str	r3, [sp, #32]
	for (cell_c i = 0; i < SCENE_CELLS_X; i++) {
 8002814:	f04f 0a00 	mov.w	sl, #0
	pixel_c pos_x2 = 8;
 8002818:	2308      	movs	r3, #8
 800281a:	9304      	str	r3, [sp, #16]
	pixel_c pos_x1 = 4;
 800281c:	2304      	movs	r3, #4
 800281e:	9309      	str	r3, [sp, #36]	; 0x24
	for (cell_c i = 0; i < SCENE_CELLS_X; i++) {
 8002820:	e097      	b.n	8002952 <draw_scene+0x192>
	if (!init && move_horizontal == 0 && move_vertical == 0) {
 8002822:	4565      	cmp	r5, ip
 8002824:	d1ea      	bne.n	80027fc <draw_scene+0x3c>
}
 8002826:	b00d      	add	sp, #52	; 0x34
 8002828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					} else if (lower(old_world_cell) == lower(current_scene_cell)) {
 800282c:	4638      	mov	r0, r7
 800282e:	f002 fb39 	bl	8004ea4 <lower>
 8002832:	4607      	mov	r7, r0
 8002834:	4640      	mov	r0, r8
 8002836:	f002 fb35 	bl	8004ea4 <lower>
 800283a:	4287      	cmp	r7, r0
 800283c:	d060      	beq.n	8002900 <draw_scene+0x140>
			bool skip_left = false, skip_right = false;
 800283e:	9b03      	ldr	r3, [sp, #12]
 8002840:	4699      	mov	r9, r3
 8002842:	9302      	str	r3, [sp, #8]
 8002844:	e003      	b.n	800284e <draw_scene+0x8e>
 8002846:	f04f 0900 	mov.w	r9, #0
 800284a:	f8cd 9008 	str.w	r9, [sp, #8]
			block_t left_block = upper(current_scene_cell);
 800284e:	4640      	mov	r0, r8
 8002850:	f002 fb26 	bl	8004ea0 <upper>
 8002854:	4607      	mov	r7, r0
			block_t right_block = lower(current_scene_cell);
 8002856:	4640      	mov	r0, r8
 8002858:	f002 fb24 	bl	8004ea4 <lower>
 800285c:	4680      	mov	r8, r0
			block_c ground_height = LVL1_HMAP[world_cell_x];
 800285e:	4b44      	ldr	r3, [pc, #272]	; (8002970 <draw_scene+0x1b0>)
 8002860:	f833 b016 	ldrh.w	fp, [r3, r6, lsl #1]
			pixel_c pos_y = block_to_pixel(j) + 1;
 8002864:	4620      	mov	r0, r4
 8002866:	f002 fb22 	bl	8004eae <block_to_pixel>
 800286a:	1c46      	adds	r6, r0, #1
 800286c:	b2b6      	uxth	r6, r6
			coord pos = { x: pos_x2, y: pos_y };
 800286e:	9b04      	ldr	r3, [sp, #16]
 8002870:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8002874:	f8ad 602e 	strh.w	r6, [sp, #46]	; 0x2e
			if (left_block == _tree || right_block == _tree) {
 8002878:	2f0e      	cmp	r7, #14
 800287a:	d046      	beq.n	800290a <draw_scene+0x14a>
 800287c:	f1b8 0f0e 	cmp.w	r8, #14
 8002880:	d043      	beq.n	800290a <draw_scene+0x14a>
			if (!skip_left) {
 8002882:	9b02      	ldr	r3, [sp, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d044      	beq.n	8002912 <draw_scene+0x152>
			if (!skip_right) {
 8002888:	f1b9 0f00 	cmp.w	r9, #0
 800288c:	d04b      	beq.n	8002926 <draw_scene+0x166>
		for (cell_c j = 0; j < SCENE_CELLS_Y; j++) {
 800288e:	3401      	adds	r4, #1
 8002890:	b2a4      	uxth	r4, r4
 8002892:	2c3b      	cmp	r4, #59	; 0x3b
 8002894:	d851      	bhi.n	800293a <draw_scene+0x17a>
			cell_c world_cell_x = block_to_cell_x(world_block_x0) + i;
 8002896:	9805      	ldr	r0, [sp, #20]
 8002898:	f002 fb0e 	bl	8004eb8 <block_to_cell_x>
 800289c:	eb00 060a 	add.w	r6, r0, sl
 80028a0:	b2b6      	uxth	r6, r6
			cell_c world_cell_y = block_to_cell_y(world_block_y0) + j;
 80028a2:	9806      	ldr	r0, [sp, #24]
 80028a4:	f002 fb0a 	bl	8004ebc <block_to_cell_y>
 80028a8:	1905      	adds	r5, r0, r4
 80028aa:	b2ad      	uxth	r5, r5
			cell_c old_world_cell_x = block_to_cell_x(old_world_block_x0) + i;
 80028ac:	9807      	ldr	r0, [sp, #28]
 80028ae:	f002 fb03 	bl	8004eb8 <block_to_cell_x>
 80028b2:	eb00 070a 	add.w	r7, r0, sl
 80028b6:	b2bf      	uxth	r7, r7
			cell_c old_world_cell_y = block_to_cell_y(old_world_block_y0) + j;
 80028b8:	9808      	ldr	r0, [sp, #32]
 80028ba:	f002 faff 	bl	8004ebc <block_to_cell_y>
 80028be:	4420      	add	r0, r4
 80028c0:	b280      	uxth	r0, r0
			cell_t current_scene_cell = SCENE[scene_cell_y][scene_cell_x];
 80028c2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80028c6:	4a2b      	ldr	r2, [pc, #172]	; (8002974 <draw_scene+0x1b4>)
 80028c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80028cc:	f813 800a 	ldrb.w	r8, [r3, sl]
			cell_t old_world_cell = WORLD[old_world_cell_y][old_world_cell_x];
 80028d0:	4b29      	ldr	r3, [pc, #164]	; (8002978 <draw_scene+0x1b8>)
 80028d2:	22c8      	movs	r2, #200	; 0xc8
 80028d4:	fb02 3000 	mla	r0, r2, r0, r3
 80028d8:	5dc7      	ldrb	r7, [r0, r7]
			if (!init) {
 80028da:	9b03      	ldr	r3, [sp, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1b2      	bne.n	8002846 <draw_scene+0x86>
				if (old_world_cell == current_scene_cell) {
 80028e0:	45b8      	cmp	r8, r7
 80028e2:	d0d4      	beq.n	800288e <draw_scene+0xce>
					if (upper(old_world_cell) == upper(current_scene_cell)) {
 80028e4:	4638      	mov	r0, r7
 80028e6:	f002 fadb 	bl	8004ea0 <upper>
 80028ea:	4681      	mov	r9, r0
 80028ec:	4640      	mov	r0, r8
 80028ee:	f002 fad7 	bl	8004ea0 <upper>
 80028f2:	4581      	cmp	r9, r0
 80028f4:	d19a      	bne.n	800282c <draw_scene+0x6c>
			bool skip_left = false, skip_right = false;
 80028f6:	f8dd 900c 	ldr.w	r9, [sp, #12]
						skip_left = true;
 80028fa:	2301      	movs	r3, #1
 80028fc:	9302      	str	r3, [sp, #8]
 80028fe:	e7a6      	b.n	800284e <draw_scene+0x8e>
			bool skip_left = false, skip_right = false;
 8002900:	9b03      	ldr	r3, [sp, #12]
 8002902:	9302      	str	r3, [sp, #8]
						skip_right = true;
 8002904:	f04f 0901 	mov.w	r9, #1
 8002908:	e7a1      	b.n	800284e <draw_scene+0x8e>
				draw_tree_normal(&pos);
 800290a:	a80b      	add	r0, sp, #44	; 0x2c
 800290c:	f7ff fe3c 	bl	8002588 <draw_tree_normal>
 8002910:	e7b7      	b.n	8002882 <draw_scene+0xc2>
				render_block(left_block, pos_x1, pos_y, illumination, ground_height, current_height);
 8002912:	9500      	str	r5, [sp, #0]
 8002914:	465b      	mov	r3, fp
 8002916:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800291a:	4632      	mov	r2, r6
 800291c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800291e:	4638      	mov	r0, r7
 8002920:	f7ff fe68 	bl	80025f4 <render_block>
 8002924:	e7b0      	b.n	8002888 <draw_scene+0xc8>
				render_block(right_block, pos_x2, pos_y, illumination, ground_height, current_height);
 8002926:	9500      	str	r5, [sp, #0]
 8002928:	465b      	mov	r3, fp
 800292a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800292e:	4632      	mov	r2, r6
 8002930:	9904      	ldr	r1, [sp, #16]
 8002932:	4640      	mov	r0, r8
 8002934:	f7ff fe5e 	bl	80025f4 <render_block>
 8002938:	e7a9      	b.n	800288e <draw_scene+0xce>
		pos_x1 += 8;
 800293a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800293c:	3308      	adds	r3, #8
 800293e:	b29b      	uxth	r3, r3
 8002940:	9309      	str	r3, [sp, #36]	; 0x24
		pos_x2 += 8;
 8002942:	9b04      	ldr	r3, [sp, #16]
 8002944:	3308      	adds	r3, #8
 8002946:	b29b      	uxth	r3, r3
 8002948:	9304      	str	r3, [sp, #16]
	for (cell_c i = 0; i < SCENE_CELLS_X; i++) {
 800294a:	f10a 0301 	add.w	r3, sl, #1
 800294e:	fa1f fa83 	uxth.w	sl, r3
 8002952:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
 8002956:	f63f af66 	bhi.w	8002826 <draw_scene+0x66>
		for (cell_c j = 0; j < SCENE_CELLS_Y; j++) {
 800295a:	2400      	movs	r4, #0
 800295c:	e799      	b.n	8002892 <draw_scene+0xd2>
 800295e:	bf00      	nop
 8002960:	200120ae 	.word	0x200120ae
 8002964:	200120a8 	.word	0x200120a8
 8002968:	200120b0 	.word	0x200120b0
 800296c:	200120aa 	.word	0x200120aa
 8002970:	20004f14 	.word	0x20004f14
 8002974:	20005234 	.word	0x20005234
 8002978:	20006528 	.word	0x20006528
>>>>>>> render

08002984 <MX_QUADSPI1_Init>:

QSPI_HandleTypeDef hqspi1;

/* QUADSPI1 init function */
void MX_QUADSPI1_Init(void)
{
 8002984:	b508      	push	{r3, lr}
  /* USER CODE END QUADSPI1_Init 0 */

  /* USER CODE BEGIN QUADSPI1_Init 1 */

  /* USER CODE END QUADSPI1_Init 1 */
  hqspi1.Instance = QUADSPI;
 8002986:	480a      	ldr	r0, [pc, #40]	; (80029b0 <MX_QUADSPI1_Init+0x2c>)
 8002988:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <MX_QUADSPI1_Init+0x30>)
 800298a:	6003      	str	r3, [r0, #0]
  hqspi1.Init.ClockPrescaler = 255;
 800298c:	23ff      	movs	r3, #255	; 0xff
 800298e:	6043      	str	r3, [r0, #4]
  hqspi1.Init.FifoThreshold = 1;
 8002990:	2201      	movs	r2, #1
 8002992:	6082      	str	r2, [r0, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8002994:	2300      	movs	r3, #0
 8002996:	60c3      	str	r3, [r0, #12]
  hqspi1.Init.FlashSize = 1;
 8002998:	6102      	str	r2, [r0, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800299a:	6143      	str	r3, [r0, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800299c:	6183      	str	r3, [r0, #24]
  hqspi1.Init.FlashID = QSPI_FLASH_ID_1;
 800299e:	61c3      	str	r3, [r0, #28]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80029a0:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
<<<<<<< HEAD
 80029a2:	f005 ff03 	bl	80087ac <HAL_QSPI_Init>
 80029a6:	b900      	cbnz	r0, 80029aa <MX_QUADSPI1_Init+0x26>
=======
 800299a:	f005 fe73 	bl	8008684 <HAL_QSPI_Init>
 800299e:	b900      	cbnz	r0, 80029a2 <MX_QUADSPI1_Init+0x26>
>>>>>>> render
  }
  /* USER CODE BEGIN QUADSPI1_Init 2 */

  /* USER CODE END QUADSPI1_Init 2 */

}
 80029a8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80029aa:	f7ff fae5 	bl	8001f78 <Error_Handler>
}
<<<<<<< HEAD
 80029ae:	e7fb      	b.n	80029a8 <MX_QUADSPI1_Init+0x24>
 80029b0:	2000096c 	.word	0x2000096c
 80029b4:	a0001000 	.word	0xa0001000
=======
 80029a6:	e7fb      	b.n	80029a0 <MX_QUADSPI1_Init+0x24>
 80029a8:	2000195c 	.word	0x2000195c
 80029ac:	a0001000 	.word	0xa0001000
>>>>>>> render

080029b8 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80029b8:	b570      	push	{r4, r5, r6, lr}
 80029ba:	b09e      	sub	sp, #120	; 0x78
 80029bc:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029be:	2100      	movs	r1, #0
 80029c0:	9119      	str	r1, [sp, #100]	; 0x64
 80029c2:	911a      	str	r1, [sp, #104]	; 0x68
 80029c4:	911b      	str	r1, [sp, #108]	; 0x6c
 80029c6:	911c      	str	r1, [sp, #112]	; 0x70
 80029c8:	911d      	str	r1, [sp, #116]	; 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
<<<<<<< HEAD
 80029ca:	2254      	movs	r2, #84	; 0x54
 80029cc:	a804      	add	r0, sp, #16
 80029ce:	f00b fe03 	bl	800e5d8 <memset>
=======
 80029c2:	2254      	movs	r2, #84	; 0x54
 80029c4:	a804      	add	r0, sp, #16
 80029c6:	f00b fd3b 	bl	800e440 <memset>
>>>>>>> render
  if(qspiHandle->Instance==QUADSPI)
 80029d2:	6822      	ldr	r2, [r4, #0]
 80029d4:	4b2c      	ldr	r3, [pc, #176]	; (8002a88 <HAL_QSPI_MspInit+0xd0>)
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d001      	beq.n	80029de <HAL_QSPI_MspInit+0x26>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80029da:	b01e      	add	sp, #120	; 0x78
 80029dc:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80029de:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029e2:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
<<<<<<< HEAD
 80029e4:	a804      	add	r0, sp, #16
 80029e6:	f006 fb43 	bl	8009070 <HAL_RCCEx_PeriphCLKConfig>
 80029ea:	2800      	cmp	r0, #0
 80029ec:	d148      	bne.n	8002a80 <HAL_QSPI_MspInit+0xc8>
=======
 80029dc:	a804      	add	r0, sp, #16
 80029de:	f006 fab3 	bl	8008f48 <HAL_RCCEx_PeriphCLKConfig>
 80029e2:	2800      	cmp	r0, #0
 80029e4:	d148      	bne.n	8002a78 <HAL_QSPI_MspInit+0xc8>
>>>>>>> render
    __HAL_RCC_QSPI_CLK_ENABLE();
 80029ee:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <HAL_QSPI_MspInit+0xd4>)
 80029f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029f6:	651a      	str	r2, [r3, #80]	; 0x50
 80029f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029fa:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80029fe:	9200      	str	r2, [sp, #0]
 8002a00:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a04:	f042 0201 	orr.w	r2, r2, #1
 8002a08:	64da      	str	r2, [r3, #76]	; 0x4c
 8002a0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a0c:	f002 0201 	and.w	r2, r2, #1
 8002a10:	9201      	str	r2, [sp, #4]
 8002a12:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a16:	f042 0202 	orr.w	r2, r2, #2
 8002a1a:	64da      	str	r2, [r3, #76]	; 0x4c
 8002a1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a1e:	f002 0202 	and.w	r2, r2, #2
 8002a22:	9202      	str	r2, [sp, #8]
 8002a24:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a28:	f042 0220 	orr.w	r2, r2, #32
 8002a2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	9303      	str	r3, [sp, #12]
 8002a36:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = QSPI_IO2_Pin;
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3c:	2602      	movs	r6, #2
 8002a3e:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a40:	2400      	movs	r4, #0
 8002a42:	941b      	str	r4, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a44:	941c      	str	r4, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002a46:	250a      	movs	r5, #10
 8002a48:	951d      	str	r5, [sp, #116]	; 0x74
    HAL_GPIO_Init(QSPI_IO2_GPIO_Port, &GPIO_InitStruct);
<<<<<<< HEAD
 8002a4a:	a919      	add	r1, sp, #100	; 0x64
 8002a4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a50:	f004 f8fc 	bl	8006c4c <HAL_GPIO_Init>
=======
 8002a42:	a919      	add	r1, sp, #100	; 0x64
 8002a44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a48:	f004 f86c 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render
    GPIO_InitStruct.Pin = QSPI_IO1_Pin|QSPI_IO0_Pin|QSPI_CLK_Pin|QSPI_NCS_Pin;
 8002a54:	f640 4303 	movw	r3, #3075	; 0xc03
 8002a58:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5a:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	941b      	str	r4, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5e:	941c      	str	r4, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002a60:	951d      	str	r5, [sp, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
<<<<<<< HEAD
 8002a62:	a919      	add	r1, sp, #100	; 0x64
 8002a64:	480a      	ldr	r0, [pc, #40]	; (8002a90 <HAL_QSPI_MspInit+0xd8>)
 8002a66:	f004 f8f1 	bl	8006c4c <HAL_GPIO_Init>
=======
 8002a5a:	a919      	add	r1, sp, #100	; 0x64
 8002a5c:	480a      	ldr	r0, [pc, #40]	; (8002a88 <HAL_QSPI_MspInit+0xd8>)
 8002a5e:	f004 f861 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render
    GPIO_InitStruct.Pin = QSPI_IO3_Pin;
 8002a6a:	2340      	movs	r3, #64	; 0x40
 8002a6c:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6e:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	941b      	str	r4, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a72:	941c      	str	r4, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002a74:	951d      	str	r5, [sp, #116]	; 0x74
    HAL_GPIO_Init(QSPI_IO3_GPIO_Port, &GPIO_InitStruct);
<<<<<<< HEAD
 8002a76:	a919      	add	r1, sp, #100	; 0x64
 8002a78:	4806      	ldr	r0, [pc, #24]	; (8002a94 <HAL_QSPI_MspInit+0xdc>)
 8002a7a:	f004 f8e7 	bl	8006c4c <HAL_GPIO_Init>
=======
 8002a6e:	a919      	add	r1, sp, #100	; 0x64
 8002a70:	4806      	ldr	r0, [pc, #24]	; (8002a8c <HAL_QSPI_MspInit+0xdc>)
 8002a72:	f004 f857 	bl	8006b24 <HAL_GPIO_Init>
>>>>>>> render
}
 8002a7e:	e7ac      	b.n	80029da <HAL_QSPI_MspInit+0x22>
      Error_Handler();
 8002a80:	f7ff fa7a 	bl	8001f78 <Error_Handler>
 8002a84:	e7b3      	b.n	80029ee <HAL_QSPI_MspInit+0x36>
 8002a86:	bf00      	nop
 8002a88:	a0001000 	.word	0xa0001000
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	48000400 	.word	0x48000400
 8002a94:	48001400 	.word	0x48001400

08002a98 <get_scene>:
	update_camera_center((uint16_t) floor(WORLD_WIDTH_BLOCKS/3), zero_height - SKY_GROUND_OFFSET);	// zero level height should be at 1/3 of the screen

}

// DO NOT UNDER ANY CIRCUMSTANCE TOUCH BELOW CODE!
void get_scene() {
 8002a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// width / 4 because each cell represents 2 blocks
	block_c block_offset_width = (SCENE_WIDTH_BLOCKS / 2);
	block_c block_offset_height = (SCENE_HEIGHT_BLOCKS / 2);

	cell_c offset_w = block_to_cell_x(block_offset_width);
<<<<<<< HEAD
 8002a9c:	2028      	movs	r0, #40	; 0x28
 8002a9e:	f002 f9ef 	bl	8004e80 <block_to_cell_x>
 8002aa2:	4605      	mov	r5, r0
	cell_c offset_h = block_to_cell_y(block_offset_height);
 8002aa4:	201e      	movs	r0, #30
 8002aa6:	f002 f9ed 	bl	8004e84 <block_to_cell_y>
 8002aaa:	4607      	mov	r7, r0

	// Check if within bounds
	cell_c left = MAX(0, (int16_t) block_to_cell_x(camera_x_block) - offset_w);
 8002aac:	4b37      	ldr	r3, [pc, #220]	; (8002b8c <get_scene+0xf4>)
 8002aae:	8818      	ldrh	r0, [r3, #0]
 8002ab0:	f002 f9e6 	bl	8004e80 <block_to_cell_x>
 8002ab4:	b203      	sxth	r3, r0
 8002ab6:	1b5b      	subs	r3, r3, r5
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	da30      	bge.n	8002b1e <get_scene+0x86>
 8002abc:	2600      	movs	r6, #0
	cell_c top = MAX(0, (int16_t) block_to_cell_y(camera_y_block) - offset_h);
 8002abe:	4b34      	ldr	r3, [pc, #208]	; (8002b90 <get_scene+0xf8>)
 8002ac0:	8818      	ldrh	r0, [r3, #0]
 8002ac2:	f002 f9df 	bl	8004e84 <block_to_cell_y>
 8002ac6:	b203      	sxth	r3, r0
 8002ac8:	1bdb      	subs	r3, r3, r7
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	da2e      	bge.n	8002b2c <get_scene+0x94>
 8002ace:	2400      	movs	r4, #0
	cell_c right = MIN(block_to_cell_x(camera_x_block) + offset_w, block_to_cell_x(WORLD_WIDTH_BLOCKS));
 8002ad0:	4b2e      	ldr	r3, [pc, #184]	; (8002b8c <get_scene+0xf4>)
 8002ad2:	8818      	ldrh	r0, [r3, #0]
 8002ad4:	f002 f9d4 	bl	8004e80 <block_to_cell_x>
 8002ad8:	eb05 0800 	add.w	r8, r5, r0
 8002adc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002ae0:	f002 f9ce 	bl	8004e80 <block_to_cell_x>
 8002ae4:	4580      	cmp	r8, r0
 8002ae6:	da28      	bge.n	8002b3a <get_scene+0xa2>
 8002ae8:	4b28      	ldr	r3, [pc, #160]	; (8002b8c <get_scene+0xf4>)
 8002aea:	8818      	ldrh	r0, [r3, #0]
 8002aec:	f002 f9c8 	bl	8004e80 <block_to_cell_x>
 8002af0:	4405      	add	r5, r0
 8002af2:	b2ad      	uxth	r5, r5
	cell_c bottom = MIN(block_to_cell_y(camera_y_block) + offset_h, block_to_cell_y(WORLD_HEIGHT_BLOCKS));
 8002af4:	4b26      	ldr	r3, [pc, #152]	; (8002b90 <get_scene+0xf8>)
 8002af6:	8818      	ldrh	r0, [r3, #0]
 8002af8:	f002 f9c4 	bl	8004e84 <block_to_cell_y>
 8002afc:	eb07 0800 	add.w	r8, r7, r0
 8002b00:	20f0      	movs	r0, #240	; 0xf0
 8002b02:	f002 f9bf 	bl	8004e84 <block_to_cell_y>
 8002b06:	4580      	cmp	r8, r0
 8002b08:	da1d      	bge.n	8002b46 <get_scene+0xae>
 8002b0a:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <get_scene+0xf8>)
 8002b0c:	8818      	ldrh	r0, [r3, #0]
 8002b0e:	f002 f9b9 	bl	8004e84 <block_to_cell_y>
 8002b12:	4407      	add	r7, r0
 8002b14:	fa1f fe87 	uxth.w	lr, r7
=======
 8002a94:	2028      	movs	r0, #40	; 0x28
 8002a96:	f002 fa0f 	bl	8004eb8 <block_to_cell_x>
 8002a9a:	4605      	mov	r5, r0
	cell_c offset_h = block_to_cell_y(block_offset_height);
 8002a9c:	201e      	movs	r0, #30
 8002a9e:	f002 fa0d 	bl	8004ebc <block_to_cell_y>
 8002aa2:	4607      	mov	r7, r0

	// Check if within bounds
	cell_c left = MAX(0, (int16_t) block_to_cell_x(camera_x_block) - offset_w);
 8002aa4:	4b37      	ldr	r3, [pc, #220]	; (8002b84 <get_scene+0xf4>)
 8002aa6:	8818      	ldrh	r0, [r3, #0]
 8002aa8:	f002 fa06 	bl	8004eb8 <block_to_cell_x>
 8002aac:	b203      	sxth	r3, r0
 8002aae:	1b5b      	subs	r3, r3, r5
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	da30      	bge.n	8002b16 <get_scene+0x86>
 8002ab4:	2600      	movs	r6, #0
	cell_c top = MAX(0, (int16_t) block_to_cell_y(camera_y_block) - offset_h);
 8002ab6:	4b34      	ldr	r3, [pc, #208]	; (8002b88 <get_scene+0xf8>)
 8002ab8:	8818      	ldrh	r0, [r3, #0]
 8002aba:	f002 f9ff 	bl	8004ebc <block_to_cell_y>
 8002abe:	b203      	sxth	r3, r0
 8002ac0:	1bdb      	subs	r3, r3, r7
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	da2e      	bge.n	8002b24 <get_scene+0x94>
 8002ac6:	2400      	movs	r4, #0
	cell_c right = MIN(block_to_cell_x(camera_x_block) + offset_w, block_to_cell_x(WORLD_WIDTH_BLOCKS));
 8002ac8:	4b2e      	ldr	r3, [pc, #184]	; (8002b84 <get_scene+0xf4>)
 8002aca:	8818      	ldrh	r0, [r3, #0]
 8002acc:	f002 f9f4 	bl	8004eb8 <block_to_cell_x>
 8002ad0:	eb05 0800 	add.w	r8, r5, r0
 8002ad4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002ad8:	f002 f9ee 	bl	8004eb8 <block_to_cell_x>
 8002adc:	4580      	cmp	r8, r0
 8002ade:	da28      	bge.n	8002b32 <get_scene+0xa2>
 8002ae0:	4b28      	ldr	r3, [pc, #160]	; (8002b84 <get_scene+0xf4>)
 8002ae2:	8818      	ldrh	r0, [r3, #0]
 8002ae4:	f002 f9e8 	bl	8004eb8 <block_to_cell_x>
 8002ae8:	4405      	add	r5, r0
 8002aea:	b2ad      	uxth	r5, r5
	cell_c bottom = MIN(block_to_cell_y(camera_y_block) + offset_h, block_to_cell_y(WORLD_HEIGHT_BLOCKS));
 8002aec:	4b26      	ldr	r3, [pc, #152]	; (8002b88 <get_scene+0xf8>)
 8002aee:	8818      	ldrh	r0, [r3, #0]
 8002af0:	f002 f9e4 	bl	8004ebc <block_to_cell_y>
 8002af4:	eb07 0800 	add.w	r8, r7, r0
 8002af8:	20f0      	movs	r0, #240	; 0xf0
 8002afa:	f002 f9df 	bl	8004ebc <block_to_cell_y>
 8002afe:	4580      	cmp	r8, r0
 8002b00:	da1d      	bge.n	8002b3e <get_scene+0xae>
 8002b02:	4b21      	ldr	r3, [pc, #132]	; (8002b88 <get_scene+0xf8>)
 8002b04:	8818      	ldrh	r0, [r3, #0]
 8002b06:	f002 f9d9 	bl	8004ebc <block_to_cell_y>
 8002b0a:	4407      	add	r7, r0
 8002b0c:	fa1f fe87 	uxth.w	lr, r7
>>>>>>> render


	cell_c x = 0;
	cell_c y = 0;
 8002b18:	f04f 0c00 	mov.w	ip, #0
	for (cell_c j = top; j <= bottom; j++) {
 8002b1c:	e02f      	b.n	8002b7e <get_scene+0xe6>
	cell_c left = MAX(0, (int16_t) block_to_cell_x(camera_x_block) - offset_w);
<<<<<<< HEAD
 8002b1e:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <get_scene+0xf4>)
 8002b20:	8818      	ldrh	r0, [r3, #0]
 8002b22:	f002 f9ad 	bl	8004e80 <block_to_cell_x>
 8002b26:	1b46      	subs	r6, r0, r5
 8002b28:	b2b6      	uxth	r6, r6
 8002b2a:	e7c8      	b.n	8002abe <get_scene+0x26>
	cell_c top = MAX(0, (int16_t) block_to_cell_y(camera_y_block) - offset_h);
 8002b2c:	4b18      	ldr	r3, [pc, #96]	; (8002b90 <get_scene+0xf8>)
 8002b2e:	8818      	ldrh	r0, [r3, #0]
 8002b30:	f002 f9a8 	bl	8004e84 <block_to_cell_y>
 8002b34:	1bc4      	subs	r4, r0, r7
 8002b36:	b2a4      	uxth	r4, r4
 8002b38:	e7ca      	b.n	8002ad0 <get_scene+0x38>
	cell_c right = MIN(block_to_cell_x(camera_x_block) + offset_w, block_to_cell_x(WORLD_WIDTH_BLOCKS));
 8002b3a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002b3e:	f002 f99f 	bl	8004e80 <block_to_cell_x>
 8002b42:	4605      	mov	r5, r0
 8002b44:	e7d6      	b.n	8002af4 <get_scene+0x5c>
	cell_c bottom = MIN(block_to_cell_y(camera_y_block) + offset_h, block_to_cell_y(WORLD_HEIGHT_BLOCKS));
 8002b46:	20f0      	movs	r0, #240	; 0xf0
 8002b48:	f002 f99c 	bl	8004e84 <block_to_cell_y>
 8002b4c:	4686      	mov	lr, r0
 8002b4e:	e7e3      	b.n	8002b18 <get_scene+0x80>
=======
 8002b16:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <get_scene+0xf4>)
 8002b18:	8818      	ldrh	r0, [r3, #0]
 8002b1a:	f002 f9cd 	bl	8004eb8 <block_to_cell_x>
 8002b1e:	1b46      	subs	r6, r0, r5
 8002b20:	b2b6      	uxth	r6, r6
 8002b22:	e7c8      	b.n	8002ab6 <get_scene+0x26>
	cell_c top = MAX(0, (int16_t) block_to_cell_y(camera_y_block) - offset_h);
 8002b24:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <get_scene+0xf8>)
 8002b26:	8818      	ldrh	r0, [r3, #0]
 8002b28:	f002 f9c8 	bl	8004ebc <block_to_cell_y>
 8002b2c:	1bc4      	subs	r4, r0, r7
 8002b2e:	b2a4      	uxth	r4, r4
 8002b30:	e7ca      	b.n	8002ac8 <get_scene+0x38>
	cell_c right = MIN(block_to_cell_x(camera_x_block) + offset_w, block_to_cell_x(WORLD_WIDTH_BLOCKS));
 8002b32:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002b36:	f002 f9bf 	bl	8004eb8 <block_to_cell_x>
 8002b3a:	4605      	mov	r5, r0
 8002b3c:	e7d6      	b.n	8002aec <get_scene+0x5c>
	cell_c bottom = MIN(block_to_cell_y(camera_y_block) + offset_h, block_to_cell_y(WORLD_HEIGHT_BLOCKS));
 8002b3e:	20f0      	movs	r0, #240	; 0xf0
 8002b40:	f002 f9bc 	bl	8004ebc <block_to_cell_y>
 8002b44:	4686      	mov	lr, r0
 8002b46:	e7e3      	b.n	8002b10 <get_scene+0x80>
>>>>>>> render
		for (cell_c i = left; i <= right; i++) {
			SCENE[y][x] = WORLD[j][i];
 8002b50:	4910      	ldr	r1, [pc, #64]	; (8002b94 <get_scene+0xfc>)
 8002b52:	20c8      	movs	r0, #200	; 0xc8
 8002b54:	fb00 1104 	mla	r1, r0, r4, r1
 8002b58:	5ccf      	ldrb	r7, [r1, r3]
 8002b5a:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8002b5e:	480e      	ldr	r0, [pc, #56]	; (8002b98 <get_scene+0x100>)
 8002b60:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8002b64:	548f      	strb	r7, [r1, r2]
			x++;
 8002b66:	3201      	adds	r2, #1
 8002b68:	b292      	uxth	r2, r2
		for (cell_c i = left; i <= right; i++) {
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	42ab      	cmp	r3, r5
 8002b70:	d9ee      	bls.n	8002b50 <get_scene+0xb8>
		}
		x = 0;
		y++;
 8002b72:	f10c 0c01 	add.w	ip, ip, #1
 8002b76:	fa1f fc8c 	uxth.w	ip, ip
	for (cell_c j = top; j <= bottom; j++) {
 8002b7a:	3401      	adds	r4, #1
 8002b7c:	b2a4      	uxth	r4, r4
 8002b7e:	4574      	cmp	r4, lr
 8002b80:	d802      	bhi.n	8002b88 <get_scene+0xf0>
		for (cell_c i = left; i <= right; i++) {
 8002b82:	4633      	mov	r3, r6
 8002b84:	2200      	movs	r2, #0
 8002b86:	e7f2      	b.n	8002b6e <get_scene+0xd6>
	}
}
<<<<<<< HEAD
 8002b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b8c:	200110b8 	.word	0x200110b8
 8002b90:	200110ba 	.word	0x200110ba
 8002b94:	20005538 	.word	0x20005538
 8002b98:	20004244 	.word	0x20004244
=======
 8002b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b84:	200120a8 	.word	0x200120a8
 8002b88:	200120aa 	.word	0x200120aa
 8002b8c:	20006528 	.word	0x20006528
 8002b90:	20005234 	.word	0x20005234
>>>>>>> render

08002b9c <mark_tree>:
	}

	new_frame = 1;
}

void mark_tree(uint16_t y, uint16_t x, uint8_t left_right, uint16_t height, uint16_t width) {
 8002b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b9e:	460e      	mov	r6, r1
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f8bd 7014 	ldrh.w	r7, [sp, #20]
//	x += left_right;
	for (uint16_t j = x; j < x + width; j++) {
 8002ba6:	4635      	mov	r5, r6
 8002ba8:	e010      	b.n	8002bcc <mark_tree+0x30>
		for (uint16_t i = y; i < y + height; i++) {
			SCENE_MASK[i][j] = 1 << 4 | 1;
 8002baa:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 8002bae:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <mark_tree+0x40>)
 8002bb0:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
 8002bb4:	f04f 0e11 	mov.w	lr, #17
 8002bb8:	f80c e004 	strb.w	lr, [ip, r4]
		for (uint16_t i = y; i < y + height; i++) {
 8002bbc:	3201      	adds	r2, #1
 8002bbe:	b292      	uxth	r2, r2
 8002bc0:	eb00 0c01 	add.w	ip, r0, r1
 8002bc4:	4562      	cmp	r2, ip
 8002bc6:	dbf0      	blt.n	8002baa <mark_tree+0xe>
	for (uint16_t j = x; j < x + width; j++) {
 8002bc8:	3501      	adds	r5, #1
 8002bca:	b2ad      	uxth	r5, r5
 8002bcc:	462c      	mov	r4, r5
 8002bce:	19f3      	adds	r3, r6, r7
 8002bd0:	429d      	cmp	r5, r3
 8002bd2:	da01      	bge.n	8002bd8 <mark_tree+0x3c>
		for (uint16_t i = y; i < y + height; i++) {
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	e7f3      	b.n	8002bc0 <mark_tree+0x24>
		}
	}
}
<<<<<<< HEAD
 8002bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20004ba4 	.word	0x20004ba4
=======
 8002bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20005b94 	.word	0x20005b94
>>>>>>> render

08002be0 <get_scene_mask>:
void get_scene_mask() {
 8002be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002be4:	b087      	sub	sp, #28
	cell_c offset_w = block_to_cell_x(block_offset_width);
<<<<<<< HEAD
 8002be6:	2028      	movs	r0, #40	; 0x28
 8002be8:	f002 f94a 	bl	8004e80 <block_to_cell_x>
 8002bec:	4605      	mov	r5, r0
	cell_c offset_h = block_to_cell_y(block_offset_height);
 8002bee:	201e      	movs	r0, #30
 8002bf0:	f002 f948 	bl	8004e84 <block_to_cell_y>
 8002bf4:	4604      	mov	r4, r0
	cell_c left = MAX(0, (int16_t) block_to_cell_x(camera_x_block) - offset_w);
 8002bf6:	4b64      	ldr	r3, [pc, #400]	; (8002d88 <get_scene_mask+0x1a8>)
 8002bf8:	8818      	ldrh	r0, [r3, #0]
 8002bfa:	f002 f941 	bl	8004e80 <block_to_cell_x>
 8002bfe:	b203      	sxth	r3, r0
 8002c00:	1b5b      	subs	r3, r3, r5
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	da35      	bge.n	8002c72 <get_scene_mask+0x92>
 8002c06:	2300      	movs	r3, #0
 8002c08:	9304      	str	r3, [sp, #16]
	cell_c top = MAX(0, (int16_t) block_to_cell_y(camera_y_block) - offset_h);
 8002c0a:	4b60      	ldr	r3, [pc, #384]	; (8002d8c <get_scene_mask+0x1ac>)
 8002c0c:	8818      	ldrh	r0, [r3, #0]
 8002c0e:	f002 f939 	bl	8004e84 <block_to_cell_y>
 8002c12:	b203      	sxth	r3, r0
 8002c14:	1b1b      	subs	r3, r3, r4
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	da33      	bge.n	8002c82 <get_scene_mask+0xa2>
 8002c1a:	f04f 0a00 	mov.w	sl, #0
	cell_c right = MIN(block_to_cell_x(camera_x_block) + offset_w, block_to_cell_x(WORLD_WIDTH_BLOCKS));
 8002c1e:	4b5a      	ldr	r3, [pc, #360]	; (8002d88 <get_scene_mask+0x1a8>)
 8002c20:	8818      	ldrh	r0, [r3, #0]
 8002c22:	f002 f92d 	bl	8004e80 <block_to_cell_x>
 8002c26:	182e      	adds	r6, r5, r0
 8002c28:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002c2c:	f002 f928 	bl	8004e80 <block_to_cell_x>
 8002c30:	4286      	cmp	r6, r0
 8002c32:	da2e      	bge.n	8002c92 <get_scene_mask+0xb2>
 8002c34:	4b54      	ldr	r3, [pc, #336]	; (8002d88 <get_scene_mask+0x1a8>)
 8002c36:	8818      	ldrh	r0, [r3, #0]
 8002c38:	f002 f922 	bl	8004e80 <block_to_cell_x>
 8002c3c:	4405      	add	r5, r0
 8002c3e:	fa1f f985 	uxth.w	r9, r5
	cell_c bottom = MIN(block_to_cell_y(camera_y_block) + offset_h, block_to_cell_y(WORLD_HEIGHT_BLOCKS));
 8002c42:	4b52      	ldr	r3, [pc, #328]	; (8002d8c <get_scene_mask+0x1ac>)
 8002c44:	8818      	ldrh	r0, [r3, #0]
 8002c46:	f002 f91d 	bl	8004e84 <block_to_cell_y>
 8002c4a:	1825      	adds	r5, r4, r0
 8002c4c:	20f0      	movs	r0, #240	; 0xf0
 8002c4e:	f002 f919 	bl	8004e84 <block_to_cell_y>
 8002c52:	4285      	cmp	r5, r0
 8002c54:	da23      	bge.n	8002c9e <get_scene_mask+0xbe>
 8002c56:	4b4d      	ldr	r3, [pc, #308]	; (8002d8c <get_scene_mask+0x1ac>)
 8002c58:	8818      	ldrh	r0, [r3, #0]
 8002c5a:	f002 f913 	bl	8004e84 <block_to_cell_y>
 8002c5e:	4404      	add	r4, r0
 8002c60:	b2a3      	uxth	r3, r4
 8002c62:	9305      	str	r3, [sp, #20]
=======
 8002bde:	2028      	movs	r0, #40	; 0x28
 8002be0:	f002 f96a 	bl	8004eb8 <block_to_cell_x>
 8002be4:	4605      	mov	r5, r0
	cell_c offset_h = block_to_cell_y(block_offset_height);
 8002be6:	201e      	movs	r0, #30
 8002be8:	f002 f968 	bl	8004ebc <block_to_cell_y>
 8002bec:	4604      	mov	r4, r0
	cell_c left = MAX(0, (int16_t) block_to_cell_x(camera_x_block) - offset_w);
 8002bee:	4b64      	ldr	r3, [pc, #400]	; (8002d80 <get_scene_mask+0x1a8>)
 8002bf0:	8818      	ldrh	r0, [r3, #0]
 8002bf2:	f002 f961 	bl	8004eb8 <block_to_cell_x>
 8002bf6:	b203      	sxth	r3, r0
 8002bf8:	1b5b      	subs	r3, r3, r5
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	da35      	bge.n	8002c6a <get_scene_mask+0x92>
 8002bfe:	2300      	movs	r3, #0
 8002c00:	9304      	str	r3, [sp, #16]
	cell_c top = MAX(0, (int16_t) block_to_cell_y(camera_y_block) - offset_h);
 8002c02:	4b60      	ldr	r3, [pc, #384]	; (8002d84 <get_scene_mask+0x1ac>)
 8002c04:	8818      	ldrh	r0, [r3, #0]
 8002c06:	f002 f959 	bl	8004ebc <block_to_cell_y>
 8002c0a:	b203      	sxth	r3, r0
 8002c0c:	1b1b      	subs	r3, r3, r4
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	da33      	bge.n	8002c7a <get_scene_mask+0xa2>
 8002c12:	f04f 0a00 	mov.w	sl, #0
	cell_c right = MIN(block_to_cell_x(camera_x_block) + offset_w, block_to_cell_x(WORLD_WIDTH_BLOCKS));
 8002c16:	4b5a      	ldr	r3, [pc, #360]	; (8002d80 <get_scene_mask+0x1a8>)
 8002c18:	8818      	ldrh	r0, [r3, #0]
 8002c1a:	f002 f94d 	bl	8004eb8 <block_to_cell_x>
 8002c1e:	182e      	adds	r6, r5, r0
 8002c20:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002c24:	f002 f948 	bl	8004eb8 <block_to_cell_x>
 8002c28:	4286      	cmp	r6, r0
 8002c2a:	da2e      	bge.n	8002c8a <get_scene_mask+0xb2>
 8002c2c:	4b54      	ldr	r3, [pc, #336]	; (8002d80 <get_scene_mask+0x1a8>)
 8002c2e:	8818      	ldrh	r0, [r3, #0]
 8002c30:	f002 f942 	bl	8004eb8 <block_to_cell_x>
 8002c34:	4405      	add	r5, r0
 8002c36:	fa1f f985 	uxth.w	r9, r5
	cell_c bottom = MIN(block_to_cell_y(camera_y_block) + offset_h, block_to_cell_y(WORLD_HEIGHT_BLOCKS));
 8002c3a:	4b52      	ldr	r3, [pc, #328]	; (8002d84 <get_scene_mask+0x1ac>)
 8002c3c:	8818      	ldrh	r0, [r3, #0]
 8002c3e:	f002 f93d 	bl	8004ebc <block_to_cell_y>
 8002c42:	1825      	adds	r5, r4, r0
 8002c44:	20f0      	movs	r0, #240	; 0xf0
 8002c46:	f002 f939 	bl	8004ebc <block_to_cell_y>
 8002c4a:	4285      	cmp	r5, r0
 8002c4c:	da23      	bge.n	8002c96 <get_scene_mask+0xbe>
 8002c4e:	4b4d      	ldr	r3, [pc, #308]	; (8002d84 <get_scene_mask+0x1ac>)
 8002c50:	8818      	ldrh	r0, [r3, #0]
 8002c52:	f002 f933 	bl	8004ebc <block_to_cell_y>
 8002c56:	4404      	add	r4, r0
 8002c58:	b2a3      	uxth	r3, r4
 8002c5a:	9305      	str	r3, [sp, #20]
>>>>>>> render
	new_frame = 0;
 8002c64:	2200      	movs	r2, #0
 8002c66:	4b4a      	ldr	r3, [pc, #296]	; (8002d90 <get_scene_mask+0x1b0>)
 8002c68:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = top; i < bottom; i++) {
 8002c6a:	4655      	mov	r5, sl
	uint16_t y = 0;
 8002c6c:	4614      	mov	r4, r2
 8002c6e:	9e05      	ldr	r6, [sp, #20]
	for (uint16_t i = top; i < bottom; i++) {
 8002c70:	e02b      	b.n	8002cca <get_scene_mask+0xea>
	cell_c left = MAX(0, (int16_t) block_to_cell_x(camera_x_block) - offset_w);
<<<<<<< HEAD
 8002c72:	4b45      	ldr	r3, [pc, #276]	; (8002d88 <get_scene_mask+0x1a8>)
 8002c74:	8818      	ldrh	r0, [r3, #0]
 8002c76:	f002 f903 	bl	8004e80 <block_to_cell_x>
 8002c7a:	1b43      	subs	r3, r0, r5
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	9304      	str	r3, [sp, #16]
 8002c80:	e7c3      	b.n	8002c0a <get_scene_mask+0x2a>
	cell_c top = MAX(0, (int16_t) block_to_cell_y(camera_y_block) - offset_h);
 8002c82:	4b42      	ldr	r3, [pc, #264]	; (8002d8c <get_scene_mask+0x1ac>)
 8002c84:	8818      	ldrh	r0, [r3, #0]
 8002c86:	f002 f8fd 	bl	8004e84 <block_to_cell_y>
 8002c8a:	1b03      	subs	r3, r0, r4
 8002c8c:	fa1f fa83 	uxth.w	sl, r3
 8002c90:	e7c5      	b.n	8002c1e <get_scene_mask+0x3e>
	cell_c right = MIN(block_to_cell_x(camera_x_block) + offset_w, block_to_cell_x(WORLD_WIDTH_BLOCKS));
 8002c92:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002c96:	f002 f8f3 	bl	8004e80 <block_to_cell_x>
 8002c9a:	4681      	mov	r9, r0
 8002c9c:	e7d1      	b.n	8002c42 <get_scene_mask+0x62>
	cell_c bottom = MIN(block_to_cell_y(camera_y_block) + offset_h, block_to_cell_y(WORLD_HEIGHT_BLOCKS));
 8002c9e:	20f0      	movs	r0, #240	; 0xf0
 8002ca0:	f002 f8f0 	bl	8004e84 <block_to_cell_y>
 8002ca4:	9005      	str	r0, [sp, #20]
 8002ca6:	e7dd      	b.n	8002c64 <get_scene_mask+0x84>
=======
 8002c6a:	4b45      	ldr	r3, [pc, #276]	; (8002d80 <get_scene_mask+0x1a8>)
 8002c6c:	8818      	ldrh	r0, [r3, #0]
 8002c6e:	f002 f923 	bl	8004eb8 <block_to_cell_x>
 8002c72:	1b43      	subs	r3, r0, r5
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	9304      	str	r3, [sp, #16]
 8002c78:	e7c3      	b.n	8002c02 <get_scene_mask+0x2a>
	cell_c top = MAX(0, (int16_t) block_to_cell_y(camera_y_block) - offset_h);
 8002c7a:	4b42      	ldr	r3, [pc, #264]	; (8002d84 <get_scene_mask+0x1ac>)
 8002c7c:	8818      	ldrh	r0, [r3, #0]
 8002c7e:	f002 f91d 	bl	8004ebc <block_to_cell_y>
 8002c82:	1b03      	subs	r3, r0, r4
 8002c84:	fa1f fa83 	uxth.w	sl, r3
 8002c88:	e7c5      	b.n	8002c16 <get_scene_mask+0x3e>
	cell_c right = MIN(block_to_cell_x(camera_x_block) + offset_w, block_to_cell_x(WORLD_WIDTH_BLOCKS));
 8002c8a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002c8e:	f002 f913 	bl	8004eb8 <block_to_cell_x>
 8002c92:	4681      	mov	r9, r0
 8002c94:	e7d1      	b.n	8002c3a <get_scene_mask+0x62>
	cell_c bottom = MIN(block_to_cell_y(camera_y_block) + offset_h, block_to_cell_y(WORLD_HEIGHT_BLOCKS));
 8002c96:	20f0      	movs	r0, #240	; 0xf0
 8002c98:	f002 f910 	bl	8004ebc <block_to_cell_y>
 8002c9c:	9005      	str	r0, [sp, #20]
 8002c9e:	e7dd      	b.n	8002c5c <get_scene_mask+0x84>
>>>>>>> render
			SCENE_MASK[y][x] = 0;
 8002ca8:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002cac:	4839      	ldr	r0, [pc, #228]	; (8002d94 <get_scene_mask+0x1b4>)
 8002cae:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	5488      	strb	r0, [r1, r2]
			x++;
 8002cb6:	3201      	adds	r2, #1
 8002cb8:	b292      	uxth	r2, r2
		for (uint16_t j = left; j < right; j++) {
 8002cba:	3301      	adds	r3, #1
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	454b      	cmp	r3, r9
 8002cc0:	d3f2      	bcc.n	8002ca8 <get_scene_mask+0xc8>
		y++;
 8002cc2:	3401      	adds	r4, #1
 8002cc4:	b2a4      	uxth	r4, r4
	for (uint16_t i = top; i < bottom; i++) {
 8002cc6:	3501      	adds	r5, #1
 8002cc8:	b2ad      	uxth	r5, r5
 8002cca:	42b5      	cmp	r5, r6
 8002ccc:	d201      	bcs.n	8002cd2 <get_scene_mask+0xf2>
		for (uint16_t j = left; j < right; j++) {
 8002cce:	9b04      	ldr	r3, [sp, #16]
 8002cd0:	e7f5      	b.n	8002cbe <get_scene_mask+0xde>
	x = 0; y = 0;
 8002cd2:	f04f 0800 	mov.w	r8, #0
 8002cd6:	e04a      	b.n	8002d6e <get_scene_mask+0x18e>
			uint8_t val = WORLD[i][j];
 8002cd8:	4b2f      	ldr	r3, [pc, #188]	; (8002d98 <get_scene_mask+0x1b8>)
 8002cda:	22c8      	movs	r2, #200	; 0xc8
 8002cdc:	fb02 330a 	mla	r3, r2, sl, r3
 8002ce0:	5d1f      	ldrb	r7, [r3, r4]
			uint8_t l_val = (val & 0xF0) >> 4;
 8002ce2:	093b      	lsrs	r3, r7, #4
			uint8_t r_val = val & 0x0F;
 8002ce4:	f007 070f 	and.w	r7, r7, #15
			if (l_val == _tree) {
 8002ce8:	2b0e      	cmp	r3, #14
 8002cea:	d023      	beq.n	8002d34 <get_scene_mask+0x154>
			uint8_t mask_val_l = 0, mask_val_r = 0;
 8002cec:	f04f 0b00 	mov.w	fp, #0
			if (r_val == _tree) {
 8002cf0:	2f0e      	cmp	r7, #14
 8002cf2:	d02a      	beq.n	8002d4a <get_scene_mask+0x16a>
			uint8_t mask_val_l = 0, mask_val_r = 0;
 8002cf4:	2300      	movs	r3, #0
			SCENE_MASK[y][x] = (mask_val_l << 4) | mask_val_r;
 8002cf6:	ea43 1b0b 	orr.w	fp, r3, fp, lsl #4
 8002cfa:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8002cfe:	4b25      	ldr	r3, [pc, #148]	; (8002d94 <get_scene_mask+0x1b4>)
 8002d00:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8002d04:	9b03      	ldr	r3, [sp, #12]
 8002d06:	f806 b003 	strb.w	fp, [r6, r3]
			x++;
 8002d0a:	3501      	adds	r5, #1
 8002d0c:	b2ad      	uxth	r5, r5
		for (uint16_t j = left; j < right; j++) {
 8002d0e:	3401      	adds	r4, #1
 8002d10:	b2a4      	uxth	r4, r4
 8002d12:	454c      	cmp	r4, r9
 8002d14:	d223      	bcs.n	8002d5e <get_scene_mask+0x17e>
			if (SCENE_MASK[y][x] > 0 && new_frame == 0) continue;
 8002d16:	4646      	mov	r6, r8
 8002d18:	9503      	str	r5, [sp, #12]
 8002d1a:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8002d1e:	4a1d      	ldr	r2, [pc, #116]	; (8002d94 <get_scene_mask+0x1b4>)
 8002d20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002d24:	5d5b      	ldrb	r3, [r3, r5]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0d6      	beq.n	8002cd8 <get_scene_mask+0xf8>
 8002d2a:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <get_scene_mask+0x1b0>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1d2      	bne.n	8002cd8 <get_scene_mask+0xf8>
 8002d32:	e7ec      	b.n	8002d0e <get_scene_mask+0x12e>
				mark_tree(y, x, 0, TREE_HEIGHT/BLOCK_WIDTH, TREE_WIDTH/BLOCK_WIDTH);
 8002d34:	2308      	movs	r3, #8
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	2310      	movs	r3, #16
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	4640      	mov	r0, r8
 8002d40:	f7ff ff2c 	bl	8002b9c <mark_tree>
				mask_val_l = 1;
 8002d44:	f04f 0b01 	mov.w	fp, #1
 8002d48:	e7d2      	b.n	8002cf0 <get_scene_mask+0x110>
				mark_tree(y, x, 1, TREE_HEIGHT/BLOCK_WIDTH, TREE_WIDTH/BLOCK_WIDTH);
 8002d4a:	2308      	movs	r3, #8
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	2310      	movs	r3, #16
 8002d50:	2201      	movs	r2, #1
 8002d52:	4629      	mov	r1, r5
 8002d54:	4640      	mov	r0, r8
 8002d56:	f7ff ff21 	bl	8002b9c <mark_tree>
				mask_val_r = 1;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e7cb      	b.n	8002cf6 <get_scene_mask+0x116>
		y++;
 8002d5e:	f108 0801 	add.w	r8, r8, #1
 8002d62:	fa1f f888 	uxth.w	r8, r8
	for (uint16_t i = top; i < bottom; i++) {
 8002d66:	f10a 0a01 	add.w	sl, sl, #1
 8002d6a:	fa1f fa8a 	uxth.w	sl, sl
 8002d6e:	9b05      	ldr	r3, [sp, #20]
 8002d70:	459a      	cmp	sl, r3
 8002d72:	d202      	bcs.n	8002d7a <get_scene_mask+0x19a>
		for (uint16_t j = left; j < right; j++) {
 8002d74:	9c04      	ldr	r4, [sp, #16]
 8002d76:	2500      	movs	r5, #0
 8002d78:	e7cb      	b.n	8002d12 <get_scene_mask+0x132>
	new_frame = 1;
 8002d7a:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <get_scene_mask+0x1b0>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	701a      	strb	r2, [r3, #0]
}
<<<<<<< HEAD
 8002d80:	b007      	add	sp, #28
 8002d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d86:	bf00      	nop
 8002d88:	200110b8 	.word	0x200110b8
 8002d8c:	200110ba 	.word	0x200110ba
 8002d90:	200110bc 	.word	0x200110bc
 8002d94:	20004ba4 	.word	0x20004ba4
 8002d98:	20005538 	.word	0x20005538
=======
 8002d78:	b007      	add	sp, #28
 8002d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d7e:	bf00      	nop
 8002d80:	200120a8 	.word	0x200120a8
 8002d84:	200120aa 	.word	0x200120aa
 8002d88:	200120ac 	.word	0x200120ac
 8002d8c:	20005b94 	.word	0x20005b94
 8002d90:	20006528 	.word	0x20006528
>>>>>>> render

08002d9c <update_camera_center>:

// x,y in blocks
void update_camera_center(uint16_t x, uint16_t y) {
	// Check if we are at least half a screen from a border
	if (x >= WORLD_WIDTH_BLOCKS - (SCENE_WIDTH_BLOCKS / 2 + 1)) {
 8002d9c:	f5b0 7fb3 	cmp.w	r0, #358	; 0x166
 8002da0:	d803      	bhi.n	8002daa <update_camera_center+0xe>
		x = WORLD_WIDTH_BLOCKS - SCENE_WIDTH_BLOCKS / 2 + 1;
	} else if (x < SCENE_WIDTH_BLOCKS / 2) {
 8002da2:	2827      	cmp	r0, #39	; 0x27
 8002da4:	d803      	bhi.n	8002dae <update_camera_center+0x12>
		x = SCENE_WIDTH_BLOCKS / 2 + 1;
 8002da6:	2029      	movs	r0, #41	; 0x29
 8002da8:	e001      	b.n	8002dae <update_camera_center+0x12>
		x = WORLD_WIDTH_BLOCKS - SCENE_WIDTH_BLOCKS / 2 + 1;
 8002daa:	f240 1069 	movw	r0, #361	; 0x169
	}

	if (y >= WORLD_HEIGHT_BLOCKS - (SCENE_HEIGHT_BLOCKS / 2 + 1)) {
 8002dae:	29d0      	cmp	r1, #208	; 0xd0
 8002db0:	d803      	bhi.n	8002dba <update_camera_center+0x1e>
		y = WORLD_HEIGHT_BLOCKS - (SCENE_HEIGHT_BLOCKS / 2 + 1);
	} else if (y < (SCENE_HEIGHT_BLOCKS / 2 + 1)) {
 8002db2:	291e      	cmp	r1, #30
 8002db4:	d802      	bhi.n	8002dbc <update_camera_center+0x20>
		y = (SCENE_HEIGHT_BLOCKS / 2 + 1);
 8002db6:	211f      	movs	r1, #31
 8002db8:	e000      	b.n	8002dbc <update_camera_center+0x20>
		y = WORLD_HEIGHT_BLOCKS - (SCENE_HEIGHT_BLOCKS / 2 + 1);
 8002dba:	21d1      	movs	r1, #209	; 0xd1
	}

	camera_x_block = x;
 8002dbc:	4b02      	ldr	r3, [pc, #8]	; (8002dc8 <update_camera_center+0x2c>)
 8002dbe:	8018      	strh	r0, [r3, #0]
	camera_y_block = y;
 8002dc0:	4b02      	ldr	r3, [pc, #8]	; (8002dcc <update_camera_center+0x30>)
 8002dc2:	8019      	strh	r1, [r3, #0]
}
<<<<<<< HEAD
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	200110b8 	.word	0x200110b8
 8002dcc:	200110ba 	.word	0x200110ba
=======
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	200120a8 	.word	0x200120a8
 8002dc4:	200120aa 	.word	0x200120aa
>>>>>>> render

08002dd0 <place_trees>:


}


void place_trees() {
 8002dd0:	b570      	push	{r4, r5, r6, lr}
	// TODO - mark every covered pixel as taken

	srand(time(NULL));
<<<<<<< HEAD
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	f00d fab0 	bl	8010338 <time>
 8002dd8:	f00c fb60 	bl	800f49c <srand>
=======
 8002dca:	2000      	movs	r0, #0
 8002dcc:	f00d f9e8 	bl	80101a0 <time>
 8002dd0:	f00c fa98 	bl	800f304 <srand>
>>>>>>> render
	float tree_density = 0.2;
	for (int i = 0; i < tree_mask_width; i++) {
 8002ddc:	2300      	movs	r3, #0
 8002dde:	e003      	b.n	8002de8 <place_trees+0x18>
		TREE_MASK[i] = 0;
<<<<<<< HEAD
 8002de0:	4a1e      	ldr	r2, [pc, #120]	; (8002e5c <place_trees+0x8c>)
 8002de2:	2100      	movs	r1, #0
 8002de4:	54d1      	strb	r1, [r2, r3]
=======
 8002dd8:	4a2c      	ldr	r2, [pc, #176]	; (8002e8c <place_trees+0xc4>)
 8002dda:	2100      	movs	r1, #0
 8002ddc:	54d1      	strb	r1, [r2, r3]
>>>>>>> render
	for (int i = 0; i < tree_mask_width; i++) {
 8002de6:	3301      	adds	r3, #1
 8002de8:	2b31      	cmp	r3, #49	; 0x31
 8002dea:	ddf9      	ble.n	8002de0 <place_trees+0x10>
	}

	for (block_c i = 0; i < WORLD_WIDTH_BLOCKS; i++) {
<<<<<<< HEAD
 8002dec:	2400      	movs	r4, #0
 8002dee:	e001      	b.n	8002df4 <place_trees+0x24>
 8002df0:	3401      	adds	r4, #1
 8002df2:	b2a4      	uxth	r4, r4
 8002df4:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 8002df8:	d22e      	bcs.n	8002e58 <place_trees+0x88>
		block_c coord = i / (TREE_WIDTH / BLOCK_WIDTH);
 8002dfa:	08e6      	lsrs	r6, r4, #3
		if (TREE_MASK[coord] == 1) continue;
 8002dfc:	4b17      	ldr	r3, [pc, #92]	; (8002e5c <place_trees+0x8c>)
 8002dfe:	5d9b      	ldrb	r3, [r3, r6]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d0f5      	beq.n	8002df0 <place_trees+0x20>

		block_c y = LVL1_HMAP[i] - TREE_HEIGHT / BLOCK_WIDTH;
 8002e04:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <place_trees+0x90>)
 8002e06:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
 8002e0a:	3d10      	subs	r5, #16
 8002e0c:	b2ad      	uxth	r5, r5


		if (rand() % 100 < tree_density) {
 8002e0e:	f00c fb73 	bl	800f4f8 <rand>
 8002e12:	4a14      	ldr	r2, [pc, #80]	; (8002e64 <place_trees+0x94>)
 8002e14:	fb82 3200 	smull	r3, r2, r2, r0
 8002e18:	17c3      	asrs	r3, r0, #31
 8002e1a:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8002e1e:	2264      	movs	r2, #100	; 0x64
 8002e20:	fb02 0313 	mls	r3, r2, r3, r0
 8002e24:	ee07 3a90 	vmov	s15, r3
 8002e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e2c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002e68 <place_trees+0x98>
 8002e30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e38:	d5da      	bpl.n	8002df0 <place_trees+0x20>

			// Trees only on odd numbered blocks (bottom 4 bits)
			WORLD[y][i/2] = (WORLD[y][i/2] & 0xF0) | _tree;
 8002e3a:	0862      	lsrs	r2, r4, #1
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <place_trees+0x9c>)
 8002e3e:	21c8      	movs	r1, #200	; 0xc8
 8002e40:	fb01 3505 	mla	r5, r1, r5, r3
 8002e44:	56ab      	ldrsb	r3, [r5, r2]
 8002e46:	f023 030f 	bic.w	r3, r3, #15
 8002e4a:	f043 030e 	orr.w	r3, r3, #14
 8002e4e:	54ab      	strb	r3, [r5, r2]

			TREE_MASK[coord] = 1;
 8002e50:	4b02      	ldr	r3, [pc, #8]	; (8002e5c <place_trees+0x8c>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	559a      	strb	r2, [r3, r6]
 8002e56:	e7cb      	b.n	8002df0 <place_trees+0x20>
		}
	}
}
 8002e58:	bd70      	pop	{r4, r5, r6, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20005504 	.word	0x20005504
 8002e60:	20003f24 	.word	0x20003f24
 8002e64:	51eb851f 	.word	0x51eb851f
 8002e68:	3e4ccccd 	.word	0x3e4ccccd
 8002e6c:	20005538 	.word	0x20005538

08002e70 <init_light_map>:


void init_light_map() {
 8002e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
=======
 8002de4:	2500      	movs	r5, #0
 8002de6:	e022      	b.n	8002e2e <place_trees+0x66>
		if (rand() % 100 < tree_density) {

			// Trees only on odd numbered blocks (bottom 4 bits)
			WORLD[y][i/2] = (WORLD[y][i/2] & 0xF0) | _tree;
			for (int j = 1; j < TREE_WIDTH; j++) {
				for (int i = 0; i < TREE_HEIGHT; i++) {
 8002de8:	3301      	adds	r3, #1
 8002dea:	2b3f      	cmp	r3, #63	; 0x3f
 8002dec:	dc13      	bgt.n	8002e16 <place_trees+0x4e>
					if (tree[i][j] > 0) {
 8002dee:	eb0c 1243 	add.w	r2, ip, r3, lsl #5
 8002df2:	4927      	ldr	r1, [pc, #156]	; (8002e90 <place_trees+0xc8>)
 8002df4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002df8:	2a00      	cmp	r2, #0
 8002dfa:	d0f5      	beq.n	8002de8 <place_trees+0x20>
						WORLD[y+i][i/2+j] = _empty;
 8002dfc:	18e1      	adds	r1, r4, r3
 8002dfe:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 8002e02:	eb0c 0262 	add.w	r2, ip, r2, asr #1
 8002e06:	4823      	ldr	r0, [pc, #140]	; (8002e94 <place_trees+0xcc>)
 8002e08:	f04f 0ec8 	mov.w	lr, #200	; 0xc8
 8002e0c:	fb0e 0101 	mla	r1, lr, r1, r0
 8002e10:	2000      	movs	r0, #0
 8002e12:	5488      	strb	r0, [r1, r2]
 8002e14:	e7e8      	b.n	8002de8 <place_trees+0x20>
			for (int j = 1; j < TREE_WIDTH; j++) {
 8002e16:	f10c 0c01 	add.w	ip, ip, #1
 8002e1a:	f1bc 0f1f 	cmp.w	ip, #31
 8002e1e:	dc01      	bgt.n	8002e24 <place_trees+0x5c>
				for (int i = 0; i < TREE_HEIGHT; i++) {
 8002e20:	2300      	movs	r3, #0
 8002e22:	e7e2      	b.n	8002dea <place_trees+0x22>
					}
				}
			}
			TREE_MASK[coord] = 1;
 8002e24:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <place_trees+0xc4>)
 8002e26:	2201      	movs	r2, #1
 8002e28:	559a      	strb	r2, [r3, r6]
	for (block_c i = 0; i < WORLD_WIDTH_BLOCKS; i++) {
 8002e2a:	3501      	adds	r5, #1
 8002e2c:	b2ad      	uxth	r5, r5
 8002e2e:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
 8002e32:	d229      	bcs.n	8002e88 <place_trees+0xc0>
		block_c coord = i / (TREE_WIDTH / BLOCK_WIDTH);
 8002e34:	08ee      	lsrs	r6, r5, #3
		block_c y = LVL1_HMAP[i] - TREE_HEIGHT / BLOCK_WIDTH;
 8002e36:	4b18      	ldr	r3, [pc, #96]	; (8002e98 <place_trees+0xd0>)
 8002e38:	f833 4015 	ldrh.w	r4, [r3, r5, lsl #1]
 8002e3c:	3c10      	subs	r4, #16
 8002e3e:	b2a4      	uxth	r4, r4
		if (rand() % 100 < tree_density) {
 8002e40:	f00c fa8e 	bl	800f360 <rand>
 8002e44:	4915      	ldr	r1, [pc, #84]	; (8002e9c <place_trees+0xd4>)
 8002e46:	fb81 3100 	smull	r3, r1, r1, r0
 8002e4a:	17c3      	asrs	r3, r0, #31
 8002e4c:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 8002e50:	2164      	movs	r1, #100	; 0x64
 8002e52:	fb01 0313 	mls	r3, r1, r3, r0
 8002e56:	ee07 3a90 	vmov	s15, r3
 8002e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e5e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002ea0 <place_trees+0xd8>
 8002e62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6a:	d5de      	bpl.n	8002e2a <place_trees+0x62>
			WORLD[y][i/2] = (WORLD[y][i/2] & 0xF0) | _tree;
 8002e6c:	086a      	lsrs	r2, r5, #1
 8002e6e:	4909      	ldr	r1, [pc, #36]	; (8002e94 <place_trees+0xcc>)
 8002e70:	23c8      	movs	r3, #200	; 0xc8
 8002e72:	fb03 1104 	mla	r1, r3, r4, r1
 8002e76:	568b      	ldrsb	r3, [r1, r2]
 8002e78:	f023 030f 	bic.w	r3, r3, #15
 8002e7c:	f043 030e 	orr.w	r3, r3, #14
 8002e80:	548b      	strb	r3, [r1, r2]
			for (int j = 1; j < TREE_WIDTH; j++) {
 8002e82:	f04f 0c01 	mov.w	ip, #1
 8002e86:	e7c8      	b.n	8002e1a <place_trees+0x52>
		}
	}
}
 8002e88:	bd70      	pop	{r4, r5, r6, pc}
 8002e8a:	bf00      	nop
 8002e8c:	200064f4 	.word	0x200064f4
 8002e90:	20000000 	.word	0x20000000
 8002e94:	20006528 	.word	0x20006528
 8002e98:	20004f14 	.word	0x20004f14
 8002e9c:	51eb851f 	.word	0x51eb851f
 8002ea0:	3e4ccccd 	.word	0x3e4ccccd

08002ea4 <init_light_map>:


void init_light_map() {
 8002ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
>>>>>>> render

	// Coefficient between world and light width, !HEIGHT IS THE SAME!
	uint8_t light_to_world_coefficient = WORLD_WIDTH_CELLS / LIGHT_MAP_WIDTH;

	for (uint16_t i = 0; i < LIGHT_MAP_WIDTH; i++) {
<<<<<<< HEAD
 8002e74:	f04f 0800 	mov.w	r8, #0
 8002e78:	e039      	b.n	8002eee <init_light_map+0x7e>
=======
 8002ea8:	f04f 0800 	mov.w	r8, #0
 8002eac:	e039      	b.n	8002f22 <init_light_map+0x7e>
>>>>>>> render

			uint16_t x_coor = i * light_to_world_coefficient;
			uint16_t y_coor = j;

			// Check 4 world cells, equivalent to 8 blocks
			for (uint16_t k = 0; k < light_to_world_coefficient; k++) {
<<<<<<< HEAD
 8002e7a:	3401      	adds	r4, #1
 8002e7c:	b2a4      	uxth	r4, r4
 8002e7e:	2c03      	cmp	r4, #3
 8002e80:	d821      	bhi.n	8002ec6 <init_light_map+0x56>
				uint16_t world_x = x_coor + k;
 8002e82:	19e3      	adds	r3, r4, r7
 8002e84:	b29b      	uxth	r3, r3
				uint16_t world_y = y_coor;

				uint8_t cell = WORLD[world_y][world_x];
 8002e86:	4a1d      	ldr	r2, [pc, #116]	; (8002efc <init_light_map+0x8c>)
 8002e88:	21c8      	movs	r1, #200	; 0xc8
 8002e8a:	fb01 2205 	mla	r2, r1, r5, r2
 8002e8e:	5cd0      	ldrb	r0, [r2, r3]

				uint8_t l_cell = (cell & 0xF0) >> 4;
				uint8_t r_cell = cell & 0x0F;
 8002e90:	f000 090f 	and.w	r9, r0, #15

				if (is_light_source(l_cell)) {
 8002e94:	0900      	lsrs	r0, r0, #4
 8002e96:	f7ff f9b3 	bl	8002200 <is_light_source>
 8002e9a:	b130      	cbz	r0, 8002eaa <init_light_map+0x3a>
					lighting_byte |= 1 << (8 - (2 * k));
 8002e9c:	f1c4 0304 	rsb	r3, r4, #4
 8002ea0:	005a      	lsls	r2, r3, #1
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	4093      	lsls	r3, r2
 8002ea6:	431e      	orrs	r6, r3
 8002ea8:	b2f6      	uxtb	r6, r6
				}

				if (is_light_source(r_cell)) {
 8002eaa:	4648      	mov	r0, r9
 8002eac:	f7ff f9a8 	bl	8002200 <is_light_source>
 8002eb0:	2800      	cmp	r0, #0
 8002eb2:	d0e2      	beq.n	8002e7a <init_light_map+0xa>
					lighting_byte |= 1 << (8 - (2 * k) - 1);
 8002eb4:	f1c4 0304 	rsb	r3, r4, #4
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	1e5a      	subs	r2, r3, #1
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	4093      	lsls	r3, r2
 8002ec0:	431e      	orrs	r6, r3
 8002ec2:	b2f6      	uxtb	r6, r6
 8002ec4:	e7d9      	b.n	8002e7a <init_light_map+0xa>
				}
			}
		LIGHT_MAP[j][i] = lighting_byte;
 8002ec6:	4b0e      	ldr	r3, [pc, #56]	; (8002f00 <init_light_map+0x90>)
 8002ec8:	2232      	movs	r2, #50	; 0x32
 8002eca:	fb02 3305 	mla	r3, r2, r5, r3
 8002ece:	f803 6008 	strb.w	r6, [r3, r8]
		for (uint16_t j = 0; j < LIGHT_MAP_HEIGHT; j++) {
 8002ed2:	3501      	adds	r5, #1
 8002ed4:	b2ad      	uxth	r5, r5
 8002ed6:	2def      	cmp	r5, #239	; 0xef
 8002ed8:	d805      	bhi.n	8002ee6 <init_light_map+0x76>
			uint16_t x_coor = i * light_to_world_coefficient;
 8002eda:	ea4f 0788 	mov.w	r7, r8, lsl #2
 8002ede:	b2bf      	uxth	r7, r7
			for (uint16_t k = 0; k < light_to_world_coefficient; k++) {
 8002ee0:	2400      	movs	r4, #0
			uint8_t lighting_byte = 0;
 8002ee2:	4626      	mov	r6, r4
			for (uint16_t k = 0; k < light_to_world_coefficient; k++) {
 8002ee4:	e7cb      	b.n	8002e7e <init_light_map+0xe>
	for (uint16_t i = 0; i < LIGHT_MAP_WIDTH; i++) {
 8002ee6:	f108 0801 	add.w	r8, r8, #1
 8002eea:	fa1f f888 	uxth.w	r8, r8
 8002eee:	f1b8 0f31 	cmp.w	r8, #49	; 0x31
 8002ef2:	d801      	bhi.n	8002ef8 <init_light_map+0x88>
		for (uint16_t j = 0; j < LIGHT_MAP_HEIGHT; j++) {
 8002ef4:	2500      	movs	r5, #0
 8002ef6:	e7ee      	b.n	8002ed6 <init_light_map+0x66>
		}
	}
}
 8002ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002efc:	20005538 	.word	0x20005538
 8002f00:	20001044 	.word	0x20001044

08002f04 <is_night>:

bool is_night() {
 8002f04:	b508      	push	{r3, lr}
	srand(time(NULL));
 8002f06:	2000      	movs	r0, #0
 8002f08:	f00d fa16 	bl	8010338 <time>
 8002f0c:	f00c fac6 	bl	800f49c <srand>
	float random = (float)rand() / RAND_MAX;
 8002f10:	f00c faf2 	bl	800f4f8 <rand>
 8002f14:	ee07 0a90 	vmov	s15, r0
 8002f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f1c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002f3c <is_night+0x38>
 8002f20:	ee67 7a87 	vmul.f32	s15, s15, s14

	if (random < 0.5) {
 8002f24:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f30:	d401      	bmi.n	8002f36 <is_night+0x32>
		return true;
	}
	return false;
 8002f32:	2000      	movs	r0, #0
}
 8002f34:	bd08      	pop	{r3, pc}
		return true;
 8002f36:	2001      	movs	r0, #1
 8002f38:	e7fc      	b.n	8002f34 <is_night+0x30>
 8002f3a:	bf00      	nop
 8002f3c:	30000000 	.word	0x30000000

08002f40 <euclidean_dist>:
=======
 8002eae:	3401      	adds	r4, #1
 8002eb0:	b2a4      	uxth	r4, r4
 8002eb2:	2c03      	cmp	r4, #3
 8002eb4:	d821      	bhi.n	8002efa <init_light_map+0x56>
				uint16_t world_x = x_coor + k;
 8002eb6:	19e3      	adds	r3, r4, r7
 8002eb8:	b29b      	uxth	r3, r3
				uint16_t world_y = y_coor;

				uint8_t cell = WORLD[world_y][world_x];
 8002eba:	4a1d      	ldr	r2, [pc, #116]	; (8002f30 <init_light_map+0x8c>)
 8002ebc:	21c8      	movs	r1, #200	; 0xc8
 8002ebe:	fb01 2205 	mla	r2, r1, r5, r2
 8002ec2:	5cd0      	ldrb	r0, [r2, r3]

				uint8_t l_cell = (cell & 0xF0) >> 4;
				uint8_t r_cell = cell & 0x0F;
 8002ec4:	f000 090f 	and.w	r9, r0, #15

				if (is_light_source(l_cell)) {
 8002ec8:	0900      	lsrs	r0, r0, #4
 8002eca:	f7ff f9a3 	bl	8002214 <is_light_source>
 8002ece:	b130      	cbz	r0, 8002ede <init_light_map+0x3a>
					lighting_byte |= 1 << (8 - (2 * k));
 8002ed0:	f1c4 0304 	rsb	r3, r4, #4
 8002ed4:	005a      	lsls	r2, r3, #1
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	4093      	lsls	r3, r2
 8002eda:	431e      	orrs	r6, r3
 8002edc:	b2f6      	uxtb	r6, r6
				}

				if (is_light_source(r_cell)) {
 8002ede:	4648      	mov	r0, r9
 8002ee0:	f7ff f998 	bl	8002214 <is_light_source>
 8002ee4:	2800      	cmp	r0, #0
 8002ee6:	d0e2      	beq.n	8002eae <init_light_map+0xa>
					lighting_byte |= 1 << (8 - (2 * k) - 1);
 8002ee8:	f1c4 0304 	rsb	r3, r4, #4
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	1e5a      	subs	r2, r3, #1
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	4093      	lsls	r3, r2
 8002ef4:	431e      	orrs	r6, r3
 8002ef6:	b2f6      	uxtb	r6, r6
 8002ef8:	e7d9      	b.n	8002eae <init_light_map+0xa>
				}
			}
		LIGHT_MAP[j][i] = lighting_byte;
 8002efa:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <init_light_map+0x90>)
 8002efc:	2232      	movs	r2, #50	; 0x32
 8002efe:	fb02 3305 	mla	r3, r2, r5, r3
 8002f02:	f803 6008 	strb.w	r6, [r3, r8]
		for (uint16_t j = 0; j < LIGHT_MAP_HEIGHT; j++) {
 8002f06:	3501      	adds	r5, #1
 8002f08:	b2ad      	uxth	r5, r5
 8002f0a:	2def      	cmp	r5, #239	; 0xef
 8002f0c:	d805      	bhi.n	8002f1a <init_light_map+0x76>
			uint16_t x_coor = i * light_to_world_coefficient;
 8002f0e:	ea4f 0788 	mov.w	r7, r8, lsl #2
 8002f12:	b2bf      	uxth	r7, r7
			for (uint16_t k = 0; k < light_to_world_coefficient; k++) {
 8002f14:	2400      	movs	r4, #0
			uint8_t lighting_byte = 0;
 8002f16:	4626      	mov	r6, r4
			for (uint16_t k = 0; k < light_to_world_coefficient; k++) {
 8002f18:	e7cb      	b.n	8002eb2 <init_light_map+0xe>
	for (uint16_t i = 0; i < LIGHT_MAP_WIDTH; i++) {
 8002f1a:	f108 0801 	add.w	r8, r8, #1
 8002f1e:	fa1f f888 	uxth.w	r8, r8
 8002f22:	f1b8 0f31 	cmp.w	r8, #49	; 0x31
 8002f26:	d801      	bhi.n	8002f2c <init_light_map+0x88>
		for (uint16_t j = 0; j < LIGHT_MAP_HEIGHT; j++) {
 8002f28:	2500      	movs	r5, #0
 8002f2a:	e7ee      	b.n	8002f0a <init_light_map+0x66>
		}
	}
}
 8002f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f30:	20006528 	.word	0x20006528
 8002f34:	20002034 	.word	0x20002034

08002f38 <is_night>:

bool is_night() {
 8002f38:	b508      	push	{r3, lr}
	srand(time(NULL));
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	f00d f930 	bl	80101a0 <time>
 8002f40:	f00c f9e0 	bl	800f304 <srand>
	float random = (float)rand() / RAND_MAX;
 8002f44:	f00c fa0c 	bl	800f360 <rand>
 8002f48:	ee07 0a90 	vmov	s15, r0
 8002f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f50:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002f70 <is_night+0x38>
 8002f54:	ee67 7a87 	vmul.f32	s15, s15, s14

	if (random < 0.5) {
 8002f58:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f64:	d401      	bmi.n	8002f6a <is_night+0x32>
		return true;
	}
	return false;
 8002f66:	2000      	movs	r0, #0
}
 8002f68:	bd08      	pop	{r3, pc}
		return true;
 8002f6a:	2001      	movs	r0, #1
 8002f6c:	e7fc      	b.n	8002f68 <is_night+0x30>
 8002f6e:	bf00      	nop
 8002f70:	30000000 	.word	0x30000000
 8002f74:	00000000 	.word	0x00000000

08002f78 <euclidean_dist>:
>>>>>>> render

float manhattan_dist(int8_t x, int8_t y) {
	return abs(x) + abs(y);
}

float euclidean_dist(int8_t x, int8_t y) {
<<<<<<< HEAD
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	ed2d 8b02 	vpush	{d8}
 8002f46:	460e      	mov	r6, r1
	return sqrt(pow(x,2) + pow(y,2));
 8002f48:	ed9f 8b15 	vldr	d8, [pc, #84]	; 8002fa0 <euclidean_dist+0x60>
 8002f4c:	f7fd fb12 	bl	8000574 <__aeabi_i2d>
 8002f50:	eeb0 1a48 	vmov.f32	s2, s16
 8002f54:	eef0 1a68 	vmov.f32	s3, s17
 8002f58:	ec41 0b10 	vmov	d0, r0, r1
 8002f5c:	f00a fa38 	bl	800d3d0 <pow>
 8002f60:	ec55 4b10 	vmov	r4, r5, d0
 8002f64:	4630      	mov	r0, r6
 8002f66:	f7fd fb05 	bl	8000574 <__aeabi_i2d>
 8002f6a:	eeb0 1a48 	vmov.f32	s2, s16
 8002f6e:	eef0 1a68 	vmov.f32	s3, s17
 8002f72:	ec41 0b10 	vmov	d0, r0, r1
 8002f76:	f00a fa2b 	bl	800d3d0 <pow>
 8002f7a:	ec53 2b10 	vmov	r2, r3, d0
 8002f7e:	4620      	mov	r0, r4
 8002f80:	4629      	mov	r1, r5
 8002f82:	f7fd f9ab 	bl	80002dc <__adddf3>
 8002f86:	ec41 0b10 	vmov	d0, r0, r1
 8002f8a:	f00a fa91 	bl	800d4b0 <sqrt>
 8002f8e:	ec51 0b10 	vmov	r0, r1, d0
 8002f92:	f7fd fe51 	bl	8000c38 <__aeabi_d2f>
}
 8002f96:	ee00 0a10 	vmov	s0, r0
 8002f9a:	ecbd 8b02 	vpop	{d8}
 8002f9e:	bd70      	pop	{r4, r5, r6, pc}
 8002fa0:	00000000 	.word	0x00000000
 8002fa4:	40000000 	.word	0x40000000

08002fa8 <precompute_euclidean>:

void precompute_euclidean() {
 8002fa8:	b538      	push	{r3, r4, r5, lr}
	for (uint8_t i = 0; i <= LIGHT_RADIUS; i++) {
 8002faa:	2500      	movs	r5, #0
 8002fac:	e00f      	b.n	8002fce <precompute_euclidean+0x26>
		for (uint8_t j = i; j <= LIGHT_RADIUS; j++) {
			float dist = euclidean_dist(i, j);
 8002fae:	b261      	sxtb	r1, r4
 8002fb0:	b268      	sxtb	r0, r5
 8002fb2:	f7ff ffc5 	bl	8002f40 <euclidean_dist>
			EUCLIDEAN_DISTANCES[i+j] = dist;
 8002fb6:	192a      	adds	r2, r5, r4
 8002fb8:	4b07      	ldr	r3, [pc, #28]	; (8002fd8 <precompute_euclidean+0x30>)
 8002fba:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002fbe:	ed83 0a00 	vstr	s0, [r3]
		for (uint8_t j = i; j <= LIGHT_RADIUS; j++) {
 8002fc2:	3401      	adds	r4, #1
 8002fc4:	b2e4      	uxtb	r4, r4
 8002fc6:	2c10      	cmp	r4, #16
 8002fc8:	d9f1      	bls.n	8002fae <precompute_euclidean+0x6>
	for (uint8_t i = 0; i <= LIGHT_RADIUS; i++) {
 8002fca:	3501      	adds	r5, #1
 8002fcc:	b2ed      	uxtb	r5, r5
 8002fce:	2d10      	cmp	r5, #16
 8002fd0:	d801      	bhi.n	8002fd6 <precompute_euclidean+0x2e>
		for (uint8_t j = i; j <= LIGHT_RADIUS; j++) {
 8002fd2:	462c      	mov	r4, r5
 8002fd4:	e7f7      	b.n	8002fc6 <precompute_euclidean+0x1e>
		}
	}
}
 8002fd6:	bd38      	pop	{r3, r4, r5, pc}
 8002fd8:	200009bc 	.word	0x200009bc

08002fdc <get_euclidean>:

float get_euclidean(uint8_t manhattan_dist) {
	return EUCLIDEAN_DISTANCES[manhattan_dist];
 8002fdc:	4b02      	ldr	r3, [pc, #8]	; (8002fe8 <get_euclidean+0xc>)
 8002fde:	eb03 0380 	add.w	r3, r3, r0, lsl #2
}
 8002fe2:	ed93 0a00 	vldr	s0, [r3]
 8002fe6:	4770      	bx	lr
 8002fe8:	200009bc 	.word	0x200009bc
 8002fec:	00000000 	.word	0x00000000

08002ff0 <light_intensity>:
=======
 8002f78:	b570      	push	{r4, r5, r6, lr}
 8002f7a:	ed2d 8b02 	vpush	{d8}
 8002f7e:	460e      	mov	r6, r1
	return sqrt(pow(x,2) + pow(y,2));
 8002f80:	ed9f 8b15 	vldr	d8, [pc, #84]	; 8002fd8 <euclidean_dist+0x60>
 8002f84:	f7fd faf6 	bl	8000574 <__aeabi_i2d>
 8002f88:	eeb0 1a48 	vmov.f32	s2, s16
 8002f8c:	eef0 1a68 	vmov.f32	s3, s17
 8002f90:	ec41 0b10 	vmov	d0, r0, r1
 8002f94:	f00a f950 	bl	800d238 <pow>
 8002f98:	ec55 4b10 	vmov	r4, r5, d0
 8002f9c:	4630      	mov	r0, r6
 8002f9e:	f7fd fae9 	bl	8000574 <__aeabi_i2d>
 8002fa2:	eeb0 1a48 	vmov.f32	s2, s16
 8002fa6:	eef0 1a68 	vmov.f32	s3, s17
 8002faa:	ec41 0b10 	vmov	d0, r0, r1
 8002fae:	f00a f943 	bl	800d238 <pow>
 8002fb2:	ec53 2b10 	vmov	r2, r3, d0
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	4629      	mov	r1, r5
 8002fba:	f7fd f98f 	bl	80002dc <__adddf3>
 8002fbe:	ec41 0b10 	vmov	d0, r0, r1
 8002fc2:	f00a f9a9 	bl	800d318 <sqrt>
 8002fc6:	ec51 0b10 	vmov	r0, r1, d0
 8002fca:	f7fd fe35 	bl	8000c38 <__aeabi_d2f>
}
 8002fce:	ee00 0a10 	vmov	s0, r0
 8002fd2:	ecbd 8b02 	vpop	{d8}
 8002fd6:	bd70      	pop	{r4, r5, r6, pc}
 8002fd8:	00000000 	.word	0x00000000
 8002fdc:	40000000 	.word	0x40000000

08002fe0 <precompute_euclidean>:

void precompute_euclidean() {
 8002fe0:	b538      	push	{r3, r4, r5, lr}
	for (uint8_t i = 0; i <= LIGHT_RADIUS; i++) {
 8002fe2:	2500      	movs	r5, #0
 8002fe4:	e00f      	b.n	8003006 <precompute_euclidean+0x26>
		for (uint8_t j = i; j <= LIGHT_RADIUS; j++) {
			float dist = euclidean_dist(i, j);
 8002fe6:	b261      	sxtb	r1, r4
 8002fe8:	b268      	sxtb	r0, r5
 8002fea:	f7ff ffc5 	bl	8002f78 <euclidean_dist>
			EUCLIDEAN_DISTANCES[i+j] = dist;
 8002fee:	192a      	adds	r2, r5, r4
 8002ff0:	4b07      	ldr	r3, [pc, #28]	; (8003010 <precompute_euclidean+0x30>)
 8002ff2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002ff6:	ed83 0a00 	vstr	s0, [r3]
		for (uint8_t j = i; j <= LIGHT_RADIUS; j++) {
 8002ffa:	3401      	adds	r4, #1
 8002ffc:	b2e4      	uxtb	r4, r4
 8002ffe:	2c10      	cmp	r4, #16
 8003000:	d9f1      	bls.n	8002fe6 <precompute_euclidean+0x6>
	for (uint8_t i = 0; i <= LIGHT_RADIUS; i++) {
 8003002:	3501      	adds	r5, #1
 8003004:	b2ed      	uxtb	r5, r5
 8003006:	2d10      	cmp	r5, #16
 8003008:	d801      	bhi.n	800300e <precompute_euclidean+0x2e>
		for (uint8_t j = i; j <= LIGHT_RADIUS; j++) {
 800300a:	462c      	mov	r4, r5
 800300c:	e7f7      	b.n	8002ffe <precompute_euclidean+0x1e>
		}
	}
}
 800300e:	bd38      	pop	{r3, r4, r5, pc}
 8003010:	200019ac 	.word	0x200019ac

08003014 <get_euclidean>:

float get_euclidean(uint8_t manhattan_dist) {
	return EUCLIDEAN_DISTANCES[manhattan_dist];
 8003014:	4b02      	ldr	r3, [pc, #8]	; (8003020 <get_euclidean+0xc>)
 8003016:	eb03 0380 	add.w	r3, r3, r0, lsl #2
}
 800301a:	ed93 0a00 	vldr	s0, [r3]
 800301e:	4770      	bx	lr
 8003020:	200019ac 	.word	0x200019ac
 8003024:	00000000 	.word	0x00000000

08003028 <light_intensity>:
>>>>>>> render
float get_light_intensity(uint8_t manhattan_dist) {
	float value = LIGHT_INTENSITIES[manhattan_dist];
	return value;
}

float light_intensity(float dist) {
<<<<<<< HEAD
 8002ff0:	b508      	push	{r3, lr}
 8002ff2:	ed2d 8b02 	vpush	{d8}
	if (dist < 4) {
 8002ff6:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8002ffa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003002:	d41e      	bmi.n	8003042 <light_intensity+0x52>
		return MIN(1, pow(LIGHT_DEGRADATION_RATE, dist));
	} else if (dist < 6) {
 8003004:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 8003008:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800300c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003010:	d54b      	bpl.n	80030aa <light_intensity+0xba>
		return MIN(1, pow(LIGHT_DEGRADATION_RATE-.1, dist));
 8003012:	ee10 0a10 	vmov	r0, s0
 8003016:	f7fd fabf 	bl	8000598 <__aeabi_f2d>
 800301a:	ec41 0b18 	vmov	d8, r0, r1
 800301e:	ec41 0b11 	vmov	d1, r0, r1
 8003022:	ed9f 0b35 	vldr	d0, [pc, #212]	; 80030f8 <light_intensity+0x108>
 8003026:	f00a f9d3 	bl	800d3d0 <pow>
 800302a:	ec51 0b10 	vmov	r0, r1, d0
 800302e:	2200      	movs	r2, #0
 8003030:	4b37      	ldr	r3, [pc, #220]	; (8003110 <light_intensity+0x120>)
 8003032:	f7fd fd99 	bl	8000b68 <__aeabi_dcmpgt>
 8003036:	b348      	cbz	r0, 800308c <light_intensity+0x9c>
 8003038:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
=======
 8003028:	b508      	push	{r3, lr}
 800302a:	ed2d 8b02 	vpush	{d8}
	if (dist < 4) {
 800302e:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8003032:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303a:	d41e      	bmi.n	800307a <light_intensity+0x52>
		return MIN(1, pow(LIGHT_DEGRADATION_RATE, dist));
	} else if (dist < 6) {
 800303c:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 8003040:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003048:	d54b      	bpl.n	80030e2 <light_intensity+0xba>
		return MIN(1, pow(LIGHT_DEGRADATION_RATE-.1, dist));
 800304a:	ee10 0a10 	vmov	r0, s0
 800304e:	f7fd faa3 	bl	8000598 <__aeabi_f2d>
 8003052:	ec41 0b18 	vmov	d8, r0, r1
 8003056:	ec41 0b11 	vmov	d1, r0, r1
 800305a:	ed9f 0b35 	vldr	d0, [pc, #212]	; 8003130 <light_intensity+0x108>
 800305e:	f00a f8eb 	bl	800d238 <pow>
 8003062:	ec51 0b10 	vmov	r0, r1, d0
 8003066:	2200      	movs	r2, #0
 8003068:	4b37      	ldr	r3, [pc, #220]	; (8003148 <light_intensity+0x120>)
 800306a:	f7fd fd7d 	bl	8000b68 <__aeabi_dcmpgt>
 800306e:	b348      	cbz	r0, 80030c4 <light_intensity+0x9c>
 8003070:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
>>>>>>> render
	} else {
		return MIN(1, pow(LIGHT_DEGRADATION_RATE-.2, dist));
	}
}
<<<<<<< HEAD
 800303c:	ecbd 8b02 	vpop	{d8}
 8003040:	bd08      	pop	{r3, pc}
		return MIN(1, pow(LIGHT_DEGRADATION_RATE, dist));
 8003042:	ee10 0a10 	vmov	r0, s0
 8003046:	f7fd faa7 	bl	8000598 <__aeabi_f2d>
 800304a:	ec41 0b18 	vmov	d8, r0, r1
 800304e:	ec41 0b11 	vmov	d1, r0, r1
 8003052:	ed9f 0b2b 	vldr	d0, [pc, #172]	; 8003100 <light_intensity+0x110>
 8003056:	f00a f9bb 	bl	800d3d0 <pow>
 800305a:	ec51 0b10 	vmov	r0, r1, d0
 800305e:	2200      	movs	r2, #0
 8003060:	4b2b      	ldr	r3, [pc, #172]	; (8003110 <light_intensity+0x120>)
 8003062:	f7fd fd81 	bl	8000b68 <__aeabi_dcmpgt>
 8003066:	b110      	cbz	r0, 800306e <light_intensity+0x7e>
 8003068:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800306c:	e7e6      	b.n	800303c <light_intensity+0x4c>
 800306e:	eeb0 1a48 	vmov.f32	s2, s16
 8003072:	eef0 1a68 	vmov.f32	s3, s17
 8003076:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8003100 <light_intensity+0x110>
 800307a:	f00a f9a9 	bl	800d3d0 <pow>
 800307e:	ec51 0b10 	vmov	r0, r1, d0
 8003082:	f7fd fdd9 	bl	8000c38 <__aeabi_d2f>
 8003086:	ee00 0a10 	vmov	s0, r0
 800308a:	e7d7      	b.n	800303c <light_intensity+0x4c>
		return MIN(1, pow(LIGHT_DEGRADATION_RATE-.1, dist));
 800308c:	eeb0 1a48 	vmov.f32	s2, s16
 8003090:	eef0 1a68 	vmov.f32	s3, s17
 8003094:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80030f8 <light_intensity+0x108>
 8003098:	f00a f99a 	bl	800d3d0 <pow>
 800309c:	ec51 0b10 	vmov	r0, r1, d0
 80030a0:	f7fd fdca 	bl	8000c38 <__aeabi_d2f>
 80030a4:	ee00 0a10 	vmov	s0, r0
 80030a8:	e7c8      	b.n	800303c <light_intensity+0x4c>
		return MIN(1, pow(LIGHT_DEGRADATION_RATE-.2, dist));
 80030aa:	ee10 0a10 	vmov	r0, s0
 80030ae:	f7fd fa73 	bl	8000598 <__aeabi_f2d>
 80030b2:	ec41 0b18 	vmov	d8, r0, r1
 80030b6:	ec41 0b11 	vmov	d1, r0, r1
 80030ba:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8003108 <light_intensity+0x118>
 80030be:	f00a f987 	bl	800d3d0 <pow>
 80030c2:	ec51 0b10 	vmov	r0, r1, d0
 80030c6:	2200      	movs	r2, #0
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <light_intensity+0x120>)
 80030ca:	f7fd fd4d 	bl	8000b68 <__aeabi_dcmpgt>
 80030ce:	b110      	cbz	r0, 80030d6 <light_intensity+0xe6>
 80030d0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80030d4:	e7b2      	b.n	800303c <light_intensity+0x4c>
 80030d6:	eeb0 1a48 	vmov.f32	s2, s16
 80030da:	eef0 1a68 	vmov.f32	s3, s17
 80030de:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8003108 <light_intensity+0x118>
 80030e2:	f00a f975 	bl	800d3d0 <pow>
 80030e6:	ec51 0b10 	vmov	r0, r1, d0
 80030ea:	f7fd fda5 	bl	8000c38 <__aeabi_d2f>
 80030ee:	ee00 0a10 	vmov	s0, r0
 80030f2:	e7a3      	b.n	800303c <light_intensity+0x4c>
 80030f4:	f3af 8000 	nop.w
 80030f8:	33333333 	.word	0x33333333
 80030fc:	3feb3333 	.word	0x3feb3333
 8003100:	66666666 	.word	0x66666666
 8003104:	3fee6666 	.word	0x3fee6666
 8003108:	00000000 	.word	0x00000000
 800310c:	3fe80000 	.word	0x3fe80000
 8003110:	3ff00000 	.word	0x3ff00000
 8003114:	00000000 	.word	0x00000000

08003118 <precompute_light_intensity>:
void precompute_light_intensity() {
 8003118:	b510      	push	{r4, lr}
 800311a:	ed2d 8b02 	vpush	{d8}
	for (uint8_t i = 0; i < n_values; i++) {
 800311e:	2400      	movs	r4, #0
 8003120:	e00b      	b.n	800313a <precompute_light_intensity+0x22>
		if (euclidean > 0.01) {
 8003122:	ee18 0a10 	vmov	r0, s16
 8003126:	f7fd fa37 	bl	8000598 <__aeabi_f2d>
 800312a:	a314      	add	r3, pc, #80	; (adr r3, 800317c <precompute_light_intensity+0x64>)
 800312c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003130:	f7fd fd1a 	bl	8000b68 <__aeabi_dcmpgt>
 8003134:	b990      	cbnz	r0, 800315c <precompute_light_intensity+0x44>
	for (uint8_t i = 0; i < n_values; i++) {
 8003136:	3401      	adds	r4, #1
 8003138:	b2e4      	uxtb	r4, r4
 800313a:	2c1f      	cmp	r4, #31
 800313c:	d818      	bhi.n	8003170 <precompute_light_intensity+0x58>
		float euclidean = get_euclidean(i);
 800313e:	4620      	mov	r0, r4
 8003140:	f7ff ff4c 	bl	8002fdc <get_euclidean>
 8003144:	eeb0 8a40 	vmov.f32	s16, s0
		euclidean = MAX(1, euclidean);
 8003148:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800314c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003154:	d5e5      	bpl.n	8003122 <precompute_light_intensity+0xa>
 8003156:	eeb0 8a67 	vmov.f32	s16, s15
 800315a:	e7e2      	b.n	8003122 <precompute_light_intensity+0xa>
			LIGHT_INTENSITIES[i] = light_intensity(euclidean);
 800315c:	eeb0 0a48 	vmov.f32	s0, s16
 8003160:	f7ff ff46 	bl	8002ff0 <light_intensity>
 8003164:	4b04      	ldr	r3, [pc, #16]	; (8003178 <precompute_light_intensity+0x60>)
 8003166:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800316a:	ed83 0a00 	vstr	s0, [r3]
 800316e:	e7e2      	b.n	8003136 <precompute_light_intensity+0x1e>
}
 8003170:	ecbd 8b02 	vpop	{d8}
 8003174:	bd10      	pop	{r4, pc}
 8003176:	bf00      	nop
 8003178:	20000f84 	.word	0x20000f84
 800317c:	47ae147b 	.word	0x47ae147b
 8003180:	3f847ae1 	.word	0x3f847ae1

08003184 <assign_block_material>:


block_t assign_block_material(block_c x, block_c y) {
 8003184:	b538      	push	{r3, r4, r5, lr}
 8003186:	460c      	mov	r4, r1
=======
 8003074:	ecbd 8b02 	vpop	{d8}
 8003078:	bd08      	pop	{r3, pc}
		return MIN(1, pow(LIGHT_DEGRADATION_RATE, dist));
 800307a:	ee10 0a10 	vmov	r0, s0
 800307e:	f7fd fa8b 	bl	8000598 <__aeabi_f2d>
 8003082:	ec41 0b18 	vmov	d8, r0, r1
 8003086:	ec41 0b11 	vmov	d1, r0, r1
 800308a:	ed9f 0b2b 	vldr	d0, [pc, #172]	; 8003138 <light_intensity+0x110>
 800308e:	f00a f8d3 	bl	800d238 <pow>
 8003092:	ec51 0b10 	vmov	r0, r1, d0
 8003096:	2200      	movs	r2, #0
 8003098:	4b2b      	ldr	r3, [pc, #172]	; (8003148 <light_intensity+0x120>)
 800309a:	f7fd fd65 	bl	8000b68 <__aeabi_dcmpgt>
 800309e:	b110      	cbz	r0, 80030a6 <light_intensity+0x7e>
 80030a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80030a4:	e7e6      	b.n	8003074 <light_intensity+0x4c>
 80030a6:	eeb0 1a48 	vmov.f32	s2, s16
 80030aa:	eef0 1a68 	vmov.f32	s3, s17
 80030ae:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8003138 <light_intensity+0x110>
 80030b2:	f00a f8c1 	bl	800d238 <pow>
 80030b6:	ec51 0b10 	vmov	r0, r1, d0
 80030ba:	f7fd fdbd 	bl	8000c38 <__aeabi_d2f>
 80030be:	ee00 0a10 	vmov	s0, r0
 80030c2:	e7d7      	b.n	8003074 <light_intensity+0x4c>
		return MIN(1, pow(LIGHT_DEGRADATION_RATE-.1, dist));
 80030c4:	eeb0 1a48 	vmov.f32	s2, s16
 80030c8:	eef0 1a68 	vmov.f32	s3, s17
 80030cc:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8003130 <light_intensity+0x108>
 80030d0:	f00a f8b2 	bl	800d238 <pow>
 80030d4:	ec51 0b10 	vmov	r0, r1, d0
 80030d8:	f7fd fdae 	bl	8000c38 <__aeabi_d2f>
 80030dc:	ee00 0a10 	vmov	s0, r0
 80030e0:	e7c8      	b.n	8003074 <light_intensity+0x4c>
		return MIN(1, pow(LIGHT_DEGRADATION_RATE-.2, dist));
 80030e2:	ee10 0a10 	vmov	r0, s0
 80030e6:	f7fd fa57 	bl	8000598 <__aeabi_f2d>
 80030ea:	ec41 0b18 	vmov	d8, r0, r1
 80030ee:	ec41 0b11 	vmov	d1, r0, r1
 80030f2:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8003140 <light_intensity+0x118>
 80030f6:	f00a f89f 	bl	800d238 <pow>
 80030fa:	ec51 0b10 	vmov	r0, r1, d0
 80030fe:	2200      	movs	r2, #0
 8003100:	4b11      	ldr	r3, [pc, #68]	; (8003148 <light_intensity+0x120>)
 8003102:	f7fd fd31 	bl	8000b68 <__aeabi_dcmpgt>
 8003106:	b110      	cbz	r0, 800310e <light_intensity+0xe6>
 8003108:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800310c:	e7b2      	b.n	8003074 <light_intensity+0x4c>
 800310e:	eeb0 1a48 	vmov.f32	s2, s16
 8003112:	eef0 1a68 	vmov.f32	s3, s17
 8003116:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8003140 <light_intensity+0x118>
 800311a:	f00a f88d 	bl	800d238 <pow>
 800311e:	ec51 0b10 	vmov	r0, r1, d0
 8003122:	f7fd fd89 	bl	8000c38 <__aeabi_d2f>
 8003126:	ee00 0a10 	vmov	s0, r0
 800312a:	e7a3      	b.n	8003074 <light_intensity+0x4c>
 800312c:	f3af 8000 	nop.w
 8003130:	33333333 	.word	0x33333333
 8003134:	3feb3333 	.word	0x3feb3333
 8003138:	66666666 	.word	0x66666666
 800313c:	3fee6666 	.word	0x3fee6666
 8003140:	00000000 	.word	0x00000000
 8003144:	3fe80000 	.word	0x3fe80000
 8003148:	3ff00000 	.word	0x3ff00000
 800314c:	00000000 	.word	0x00000000

08003150 <precompute_light_intensity>:
void precompute_light_intensity() {
 8003150:	b510      	push	{r4, lr}
 8003152:	ed2d 8b02 	vpush	{d8}
	for (uint8_t i = 0; i < n_values; i++) {
 8003156:	2400      	movs	r4, #0
 8003158:	e00b      	b.n	8003172 <precompute_light_intensity+0x22>
		if (euclidean > 0.01) {
 800315a:	ee18 0a10 	vmov	r0, s16
 800315e:	f7fd fa1b 	bl	8000598 <__aeabi_f2d>
 8003162:	a314      	add	r3, pc, #80	; (adr r3, 80031b4 <precompute_light_intensity+0x64>)
 8003164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003168:	f7fd fcfe 	bl	8000b68 <__aeabi_dcmpgt>
 800316c:	b990      	cbnz	r0, 8003194 <precompute_light_intensity+0x44>
	for (uint8_t i = 0; i < n_values; i++) {
 800316e:	3401      	adds	r4, #1
 8003170:	b2e4      	uxtb	r4, r4
 8003172:	2c1f      	cmp	r4, #31
 8003174:	d818      	bhi.n	80031a8 <precompute_light_intensity+0x58>
		float euclidean = get_euclidean(i);
 8003176:	4620      	mov	r0, r4
 8003178:	f7ff ff4c 	bl	8003014 <get_euclidean>
 800317c:	eeb0 8a40 	vmov.f32	s16, s0
		euclidean = MAX(1, euclidean);
 8003180:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003184:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318c:	d5e5      	bpl.n	800315a <precompute_light_intensity+0xa>
 800318e:	eeb0 8a67 	vmov.f32	s16, s15
 8003192:	e7e2      	b.n	800315a <precompute_light_intensity+0xa>
			LIGHT_INTENSITIES[i] = light_intensity(euclidean);
 8003194:	eeb0 0a48 	vmov.f32	s0, s16
 8003198:	f7ff ff46 	bl	8003028 <light_intensity>
 800319c:	4b04      	ldr	r3, [pc, #16]	; (80031b0 <precompute_light_intensity+0x60>)
 800319e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80031a2:	ed83 0a00 	vstr	s0, [r3]
 80031a6:	e7e2      	b.n	800316e <precompute_light_intensity+0x1e>
}
 80031a8:	ecbd 8b02 	vpop	{d8}
 80031ac:	bd10      	pop	{r4, pc}
 80031ae:	bf00      	nop
 80031b0:	20001f74 	.word	0x20001f74
 80031b4:	47ae147b 	.word	0x47ae147b
 80031b8:	3f847ae1 	.word	0x3f847ae1

080031bc <assign_block_material>:


block_t assign_block_material(block_c x, block_c y) {
 80031bc:	b538      	push	{r3, r4, r5, lr}
 80031be:	460c      	mov	r4, r1
>>>>>>> render
	float probability_rock = 0.01;
	block_t block;

	// right block
	if (y > LVL1_HMAP[x]) { // Ground
<<<<<<< HEAD
 8003188:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <assign_block_material+0x5c>)
 800318a:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 800318e:	428b      	cmp	r3, r1
 8003190:	d303      	bcc.n	800319a <assign_block_material+0x16>
=======
 80031c0:	4b15      	ldr	r3, [pc, #84]	; (8003218 <assign_block_material+0x5c>)
 80031c2:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 80031c6:	428b      	cmp	r3, r1
 80031c8:	d303      	bcc.n	80031d2 <assign_block_material+0x16>
>>>>>>> render
			block = _rock;
		} else {
			block = _dirt;
		}

	} else if (y == LVL1_HMAP[x]) {
<<<<<<< HEAD
 8003192:	428b      	cmp	r3, r1
 8003194:	d01e      	beq.n	80031d4 <assign_block_material+0x50>
		block = _grass;
	} else {
		block = _sky;
 8003196:	2004      	movs	r0, #4
=======
 80031ca:	428b      	cmp	r3, r1
 80031cc:	d01e      	beq.n	800320c <assign_block_material+0x50>
		block = _grass;
	} else {
		block = _sky;
 80031ce:	2004      	movs	r0, #4
>>>>>>> render
	}

	return block;
}
<<<<<<< HEAD
 8003198:	bd38      	pop	{r3, r4, r5, pc}
 800319a:	4605      	mov	r5, r0
		float random = (float) rand() / (float) (RAND_MAX/100);
 800319c:	f00c f9ac 	bl	800f4f8 <rand>
 80031a0:	ee07 0a90 	vmov	s15, r0
 80031a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031a8:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80031e4 <assign_block_material+0x60>
 80031ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
		if (random < probability_rock && abs(LVL1_HMAP[x] - y) > 2) {
 80031b0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80031e8 <assign_block_material+0x64>
 80031b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031bc:	d50c      	bpl.n	80031d8 <assign_block_material+0x54>
 80031be:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <assign_block_material+0x5c>)
 80031c0:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 80031c4:	1b0c      	subs	r4, r1, r4
 80031c6:	2c00      	cmp	r4, #0
 80031c8:	bfb8      	it	lt
 80031ca:	4264      	neglt	r4, r4
 80031cc:	2c02      	cmp	r4, #2
 80031ce:	dc05      	bgt.n	80031dc <assign_block_material+0x58>
			block = _dirt;
 80031d0:	2001      	movs	r0, #1
 80031d2:	e7e1      	b.n	8003198 <assign_block_material+0x14>
		block = _grass;
 80031d4:	2002      	movs	r0, #2
 80031d6:	e7df      	b.n	8003198 <assign_block_material+0x14>
			block = _dirt;
 80031d8:	2001      	movs	r0, #1
 80031da:	e7dd      	b.n	8003198 <assign_block_material+0x14>
			block = _rock;
 80031dc:	2007      	movs	r0, #7
 80031de:	e7db      	b.n	8003198 <assign_block_material+0x14>
 80031e0:	20003f24 	.word	0x20003f24
 80031e4:	4ba3d70a 	.word	0x4ba3d70a
 80031e8:	3c23d70a 	.word	0x3c23d70a

080031ec <init_stage_0>:
=======
 80031d0:	bd38      	pop	{r3, r4, r5, pc}
 80031d2:	4605      	mov	r5, r0
		float random = (float) rand() / (float) (RAND_MAX/100);
 80031d4:	f00c f8c4 	bl	800f360 <rand>
 80031d8:	ee07 0a90 	vmov	s15, r0
 80031dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031e0:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800321c <assign_block_material+0x60>
 80031e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
		if (random < probability_rock && abs(LVL1_HMAP[x] - y) > 2) {
 80031e8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8003220 <assign_block_material+0x64>
 80031ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f4:	d50c      	bpl.n	8003210 <assign_block_material+0x54>
 80031f6:	4b08      	ldr	r3, [pc, #32]	; (8003218 <assign_block_material+0x5c>)
 80031f8:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 80031fc:	1b0c      	subs	r4, r1, r4
 80031fe:	2c00      	cmp	r4, #0
 8003200:	bfb8      	it	lt
 8003202:	4264      	neglt	r4, r4
 8003204:	2c02      	cmp	r4, #2
 8003206:	dc05      	bgt.n	8003214 <assign_block_material+0x58>
			block = _dirt;
 8003208:	2001      	movs	r0, #1
 800320a:	e7e1      	b.n	80031d0 <assign_block_material+0x14>
		block = _grass;
 800320c:	2002      	movs	r0, #2
 800320e:	e7df      	b.n	80031d0 <assign_block_material+0x14>
			block = _dirt;
 8003210:	2001      	movs	r0, #1
 8003212:	e7dd      	b.n	80031d0 <assign_block_material+0x14>
			block = _rock;
 8003214:	2007      	movs	r0, #7
 8003216:	e7db      	b.n	80031d0 <assign_block_material+0x14>
 8003218:	20004f14 	.word	0x20004f14
 800321c:	4ba3d70a 	.word	0x4ba3d70a
 8003220:	3c23d70a 	.word	0x3c23d70a

08003224 <init_stage_0>:
>>>>>>> render


// Get basic landscape - dirt, sky + caves, lava
void init_stage_0() {
<<<<<<< HEAD
 80031ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	srand(time(NULL));
 80031f0:	2000      	movs	r0, #0
 80031f2:	f00d f8a1 	bl	8010338 <time>
 80031f6:	f00c f951 	bl	800f49c <srand>
=======
 8003224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	srand(time(NULL));
 8003228:	2000      	movs	r0, #0
 800322a:	f00c ffb9 	bl	80101a0 <time>
 800322e:	f00c f869 	bl	800f304 <srand>
>>>>>>> render

	// Values identifying cave and lava materials
	block_t cave = ((_dirt_bg << 4) | _dirt_bg);
	block_t lava = ((_lava << 4) | _lava);

	for (block_c i = 0; i < WORLD_HEIGHT_BLOCKS; i++) {
<<<<<<< HEAD
 80031fa:	2500      	movs	r5, #0
 80031fc:	e028      	b.n	8003250 <init_stage_0+0x64>
=======
 8003232:	2500      	movs	r5, #0
 8003234:	e028      	b.n	8003288 <init_stage_0+0x64>
>>>>>>> render
		for (block_c j = 0; j < WORLD_WIDTH_BLOCKS; j+=2) {
			block_t l_block; block_t r_block;

			// Check for predetermined special values and don't overwrite, because they are already put in
			if ((WORLD[i][j/2] == cave || WORLD[i][j/2] == lava) && i > LVL1_HMAP[j]) {
<<<<<<< HEAD
 80031fe:	4b17      	ldr	r3, [pc, #92]	; (800325c <init_stage_0+0x70>)
 8003200:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003204:	42ab      	cmp	r3, r5
 8003206:	d310      	bcc.n	800322a <init_stage_0+0x3e>
=======
 8003236:	4b17      	ldr	r3, [pc, #92]	; (8003294 <init_stage_0+0x70>)
 8003238:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800323c:	42ab      	cmp	r3, r5
 800323e:	d310      	bcc.n	8003262 <init_stage_0+0x3e>
>>>>>>> render
				continue;
			}

			// Assign materials
			l_block = assign_block_material(j, i);
<<<<<<< HEAD
 8003208:	4629      	mov	r1, r5
 800320a:	4620      	mov	r0, r4
 800320c:	f7ff ffba 	bl	8003184 <assign_block_material>
 8003210:	4680      	mov	r8, r0
			r_block = assign_block_material(j+1, i);
 8003212:	1c60      	adds	r0, r4, #1
 8003214:	4629      	mov	r1, r5
 8003216:	b280      	uxth	r0, r0
 8003218:	f7ff ffb4 	bl	8003184 <assign_block_material>
=======
 8003240:	4629      	mov	r1, r5
 8003242:	4620      	mov	r0, r4
 8003244:	f7ff ffba 	bl	80031bc <assign_block_material>
 8003248:	4680      	mov	r8, r0
			r_block = assign_block_material(j+1, i);
 800324a:	1c60      	adds	r0, r4, #1
 800324c:	4629      	mov	r1, r5
 800324e:	b280      	uxth	r0, r0
 8003250:	f7ff ffb4 	bl	80031bc <assign_block_material>
>>>>>>> render


			// Store into WORLD
			WORLD[i][j/2] = (l_block << 4) | r_block;
<<<<<<< HEAD
 800321c:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
 8003220:	4b0f      	ldr	r3, [pc, #60]	; (8003260 <init_stage_0+0x74>)
 8003222:	22c8      	movs	r2, #200	; 0xc8
 8003224:	fb02 3307 	mla	r3, r2, r7, r3
 8003228:	5598      	strb	r0, [r3, r6]
		for (block_c j = 0; j < WORLD_WIDTH_BLOCKS; j+=2) {
 800322a:	3402      	adds	r4, #2
 800322c:	b2a4      	uxth	r4, r4
 800322e:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 8003232:	d20b      	bcs.n	800324c <init_stage_0+0x60>
			if ((WORLD[i][j/2] == cave || WORLD[i][j/2] == lava) && i > LVL1_HMAP[j]) {
 8003234:	462f      	mov	r7, r5
 8003236:	0866      	lsrs	r6, r4, #1
 8003238:	4b09      	ldr	r3, [pc, #36]	; (8003260 <init_stage_0+0x74>)
 800323a:	22c8      	movs	r2, #200	; 0xc8
 800323c:	fb02 3305 	mla	r3, r2, r5, r3
 8003240:	5d9b      	ldrb	r3, [r3, r6]
 8003242:	2bcc      	cmp	r3, #204	; 0xcc
 8003244:	d0db      	beq.n	80031fe <init_stage_0+0x12>
 8003246:	2b88      	cmp	r3, #136	; 0x88
 8003248:	d1de      	bne.n	8003208 <init_stage_0+0x1c>
 800324a:	e7d8      	b.n	80031fe <init_stage_0+0x12>
	for (block_c i = 0; i < WORLD_HEIGHT_BLOCKS; i++) {
 800324c:	3501      	adds	r5, #1
 800324e:	b2ad      	uxth	r5, r5
 8003250:	2def      	cmp	r5, #239	; 0xef
 8003252:	d801      	bhi.n	8003258 <init_stage_0+0x6c>
		for (block_c j = 0; j < WORLD_WIDTH_BLOCKS; j+=2) {
 8003254:	2400      	movs	r4, #0
 8003256:	e7ea      	b.n	800322e <init_stage_0+0x42>
		}
	}
}
 8003258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800325c:	20003f24 	.word	0x20003f24
 8003260:	20005538 	.word	0x20005538

08003264 <draw_blob>:
=======
 8003254:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <init_stage_0+0x74>)
 800325a:	22c8      	movs	r2, #200	; 0xc8
 800325c:	fb02 3307 	mla	r3, r2, r7, r3
 8003260:	5598      	strb	r0, [r3, r6]
		for (block_c j = 0; j < WORLD_WIDTH_BLOCKS; j+=2) {
 8003262:	3402      	adds	r4, #2
 8003264:	b2a4      	uxth	r4, r4
 8003266:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 800326a:	d20b      	bcs.n	8003284 <init_stage_0+0x60>
			if ((WORLD[i][j/2] == cave || WORLD[i][j/2] == lava) && i > LVL1_HMAP[j]) {
 800326c:	462f      	mov	r7, r5
 800326e:	0866      	lsrs	r6, r4, #1
 8003270:	4b09      	ldr	r3, [pc, #36]	; (8003298 <init_stage_0+0x74>)
 8003272:	22c8      	movs	r2, #200	; 0xc8
 8003274:	fb02 3305 	mla	r3, r2, r5, r3
 8003278:	5d9b      	ldrb	r3, [r3, r6]
 800327a:	2bcc      	cmp	r3, #204	; 0xcc
 800327c:	d0db      	beq.n	8003236 <init_stage_0+0x12>
 800327e:	2b88      	cmp	r3, #136	; 0x88
 8003280:	d1de      	bne.n	8003240 <init_stage_0+0x1c>
 8003282:	e7d8      	b.n	8003236 <init_stage_0+0x12>
	for (block_c i = 0; i < WORLD_HEIGHT_BLOCKS; i++) {
 8003284:	3501      	adds	r5, #1
 8003286:	b2ad      	uxth	r5, r5
 8003288:	2def      	cmp	r5, #239	; 0xef
 800328a:	d801      	bhi.n	8003290 <init_stage_0+0x6c>
		for (block_c j = 0; j < WORLD_WIDTH_BLOCKS; j+=2) {
 800328c:	2400      	movs	r4, #0
 800328e:	e7ea      	b.n	8003266 <init_stage_0+0x42>
		}
	}
}
 8003290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003294:	20004f14 	.word	0x20004f14
 8003298:	20006528 	.word	0x20006528

0800329c <draw_blob>:
>>>>>>> render
	free(CAVE_MAP);

}

// Draws blob, make sure value includes value for both blocks
void draw_blob(cell_c x, cell_c y, uint16_t radius, cell_t value) {
<<<<<<< HEAD
 8003264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003268:	4605      	mov	r5, r0
 800326a:	460e      	mov	r6, r1
 800326c:	4611      	mov	r1, r2
 800326e:	461c      	mov	r4, r3
	for (int8_t i = -radius; i <= radius; i++) {
 8003270:	f1c2 0800 	rsb	r8, r2, #0
 8003274:	fa4f f888 	sxtb.w	r8, r8
 8003278:	4647      	mov	r7, r8
 800327a:	e012      	b.n	80032a2 <draw_blob+0x3e>
		for (int8_t j = -radius; j <= radius; j++) {
			WORLD[y+i][x+j] = value;
 800327c:	eb06 0e00 	add.w	lr, r6, r0
 8003280:	eb05 020c 	add.w	r2, r5, ip
 8003284:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <draw_blob+0x4c>)
 8003286:	f04f 09c8 	mov.w	r9, #200	; 0xc8
 800328a:	fb09 3e0e 	mla	lr, r9, lr, r3
 800328e:	f80e 4002 	strb.w	r4, [lr, r2]
		for (int8_t j = -radius; j <= radius; j++) {
 8003292:	f10c 0c01 	add.w	ip, ip, #1
 8003296:	fa4f fc8c 	sxtb.w	ip, ip
 800329a:	458c      	cmp	ip, r1
 800329c:	ddee      	ble.n	800327c <draw_blob+0x18>
	for (int8_t i = -radius; i <= radius; i++) {
 800329e:	3701      	adds	r7, #1
 80032a0:	b27f      	sxtb	r7, r7
 80032a2:	4638      	mov	r0, r7
 80032a4:	428f      	cmp	r7, r1
 80032a6:	dc01      	bgt.n	80032ac <draw_blob+0x48>
		for (int8_t j = -radius; j <= radius; j++) {
 80032a8:	46c4      	mov	ip, r8
 80032aa:	e7f6      	b.n	800329a <draw_blob+0x36>
		}
	}
}
 80032ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80032b0:	20005538 	.word	0x20005538

080032b4 <draw_circle>:

void draw_circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t cave_value) {
 80032b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032b6:	4604      	mov	r4, r0
 80032b8:	4608      	mov	r0, r1
 80032ba:	4611      	mov	r1, r2
 80032bc:	461e      	mov	r6, r3
=======
 800329c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032a0:	4605      	mov	r5, r0
 80032a2:	460e      	mov	r6, r1
 80032a4:	4611      	mov	r1, r2
 80032a6:	461c      	mov	r4, r3
	for (int8_t i = -radius; i <= radius; i++) {
 80032a8:	f1c2 0800 	rsb	r8, r2, #0
 80032ac:	fa4f f888 	sxtb.w	r8, r8
 80032b0:	4647      	mov	r7, r8
 80032b2:	e012      	b.n	80032da <draw_blob+0x3e>
		for (int8_t j = -radius; j <= radius; j++) {
			WORLD[y+i][x+j] = value;
 80032b4:	eb06 0e00 	add.w	lr, r6, r0
 80032b8:	eb05 020c 	add.w	r2, r5, ip
 80032bc:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <draw_blob+0x4c>)
 80032be:	f04f 09c8 	mov.w	r9, #200	; 0xc8
 80032c2:	fb09 3e0e 	mla	lr, r9, lr, r3
 80032c6:	f80e 4002 	strb.w	r4, [lr, r2]
		for (int8_t j = -radius; j <= radius; j++) {
 80032ca:	f10c 0c01 	add.w	ip, ip, #1
 80032ce:	fa4f fc8c 	sxtb.w	ip, ip
 80032d2:	458c      	cmp	ip, r1
 80032d4:	ddee      	ble.n	80032b4 <draw_blob+0x18>
	for (int8_t i = -radius; i <= radius; i++) {
 80032d6:	3701      	adds	r7, #1
 80032d8:	b27f      	sxtb	r7, r7
 80032da:	4638      	mov	r0, r7
 80032dc:	428f      	cmp	r7, r1
 80032de:	dc01      	bgt.n	80032e4 <draw_blob+0x48>
		for (int8_t j = -radius; j <= radius; j++) {
 80032e0:	46c4      	mov	ip, r8
 80032e2:	e7f6      	b.n	80032d2 <draw_blob+0x36>
		}
	}
}
 80032e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80032e8:	20006528 	.word	0x20006528

080032ec <draw_circle>:

void draw_circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t cave_value) {
 80032ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ee:	4604      	mov	r4, r0
 80032f0:	4608      	mov	r0, r1
 80032f2:	4611      	mov	r1, r2
 80032f4:	461e      	mov	r6, r3
>>>>>>> render
	uint16_t width = WORLD_WIDTH_BLOCKS / (2 * CAVE_SAMPLES_PER_CELL);
	uint16_t height = WORLD_HEIGHT_BLOCKS / CAVE_SAMPLES_PER_CELL;

	for (int8_t xx = -radius; xx < radius; xx++) {
<<<<<<< HEAD
 80032be:	4255      	negs	r5, r2
 80032c0:	b26d      	sxtb	r5, r5
 80032c2:	462a      	mov	r2, r5
 80032c4:	e01f      	b.n	8003306 <draw_circle+0x52>
		for (int8_t yy = -radius; yy < radius; yy++) {
 80032c6:	f10c 0c01 	add.w	ip, ip, #1
 80032ca:	fa4f fc8c 	sxtb.w	ip, ip
 80032ce:	458c      	cmp	ip, r1
 80032d0:	da17      	bge.n	8003302 <draw_circle+0x4e>

			int16_t pos_x = (int16_t) x + xx;
 80032d2:	eb04 0e02 	add.w	lr, r4, r2
 80032d6:	fa0f fe8e 	sxth.w	lr, lr
			int16_t pos_y = (int16_t) y + yy;
 80032da:	eb00 030c 	add.w	r3, r0, ip
 80032de:	b21b      	sxth	r3, r3

			if (pos_x > 0 && pos_x < width && pos_y > 0 && pos_y < height) {
 80032e0:	f1be 0f00 	cmp.w	lr, #0
 80032e4:	ddef      	ble.n	80032c6 <draw_circle+0x12>
 80032e6:	f1be 0f63 	cmp.w	lr, #99	; 0x63
 80032ea:	dcec      	bgt.n	80032c6 <draw_circle+0x12>
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	ddea      	ble.n	80032c6 <draw_circle+0x12>
 80032f0:	2b77      	cmp	r3, #119	; 0x77
 80032f2:	dce8      	bgt.n	80032c6 <draw_circle+0x12>
				CAVE_MAP[pos_y][pos_x] = cave_value;
 80032f4:	4f06      	ldr	r7, [pc, #24]	; (8003310 <draw_circle+0x5c>)
 80032f6:	683f      	ldr	r7, [r7, #0]
 80032f8:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80032fc:	f803 600e 	strb.w	r6, [r3, lr]
 8003300:	e7e1      	b.n	80032c6 <draw_circle+0x12>
	for (int8_t xx = -radius; xx < radius; xx++) {
 8003302:	3201      	adds	r2, #1
 8003304:	b252      	sxtb	r2, r2
 8003306:	428a      	cmp	r2, r1
 8003308:	da01      	bge.n	800330e <draw_circle+0x5a>
		for (int8_t yy = -radius; yy < radius; yy++) {
 800330a:	46ac      	mov	ip, r5
 800330c:	e7df      	b.n	80032ce <draw_circle+0x1a>
=======
 80032f6:	4255      	negs	r5, r2
 80032f8:	b26d      	sxtb	r5, r5
 80032fa:	462a      	mov	r2, r5
 80032fc:	e01f      	b.n	800333e <draw_circle+0x52>
		for (int8_t yy = -radius; yy < radius; yy++) {
 80032fe:	f10c 0c01 	add.w	ip, ip, #1
 8003302:	fa4f fc8c 	sxtb.w	ip, ip
 8003306:	458c      	cmp	ip, r1
 8003308:	da17      	bge.n	800333a <draw_circle+0x4e>

			int16_t pos_x = (int16_t) x + xx;
 800330a:	eb04 0e02 	add.w	lr, r4, r2
 800330e:	fa0f fe8e 	sxth.w	lr, lr
			int16_t pos_y = (int16_t) y + yy;
 8003312:	eb00 030c 	add.w	r3, r0, ip
 8003316:	b21b      	sxth	r3, r3

			if (pos_x > 0 && pos_x < width && pos_y > 0 && pos_y < height) {
 8003318:	f1be 0f00 	cmp.w	lr, #0
 800331c:	ddef      	ble.n	80032fe <draw_circle+0x12>
 800331e:	f1be 0f63 	cmp.w	lr, #99	; 0x63
 8003322:	dcec      	bgt.n	80032fe <draw_circle+0x12>
 8003324:	2b00      	cmp	r3, #0
 8003326:	ddea      	ble.n	80032fe <draw_circle+0x12>
 8003328:	2b77      	cmp	r3, #119	; 0x77
 800332a:	dce8      	bgt.n	80032fe <draw_circle+0x12>
				CAVE_MAP[pos_y][pos_x] = cave_value;
 800332c:	4f06      	ldr	r7, [pc, #24]	; (8003348 <draw_circle+0x5c>)
 800332e:	683f      	ldr	r7, [r7, #0]
 8003330:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8003334:	f803 600e 	strb.w	r6, [r3, lr]
 8003338:	e7e1      	b.n	80032fe <draw_circle+0x12>
	for (int8_t xx = -radius; xx < radius; xx++) {
 800333a:	3201      	adds	r2, #1
 800333c:	b252      	sxtb	r2, r2
 800333e:	428a      	cmp	r2, r1
 8003340:	da01      	bge.n	8003346 <draw_circle+0x5a>
		for (int8_t yy = -radius; yy < radius; yy++) {
 8003342:	46ac      	mov	ip, r5
 8003344:	e7df      	b.n	8003306 <draw_circle+0x1a>
>>>>>>> render
			}

		}
	}
}
<<<<<<< HEAD
 800330e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003310:	200009b8 	.word	0x200009b8

08003314 <generate_caves>:
void generate_caves() {
 8003314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	CAVE_MAP = (uint8_t**) malloc((WORLD_HEIGHT_BLOCKS/CAVE_SAMPLES_PER_CELL) * sizeof(uint8_t*));
 8003318:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800331c:	f00b f94c 	bl	800e5b8 <malloc>
 8003320:	4ba9      	ldr	r3, [pc, #676]	; (80035c8 <generate_caves+0x2b4>)
 8003322:	6018      	str	r0, [r3, #0]
	for (uint16_t j = 0; j < WORLD_HEIGHT_BLOCKS/CAVE_SAMPLES_PER_CELL; j++) {
 8003324:	2400      	movs	r4, #0
 8003326:	2c77      	cmp	r4, #119	; 0x77
 8003328:	d809      	bhi.n	800333e <generate_caves+0x2a>
		CAVE_MAP[j] = (uint8_t*) malloc((WORLD_WIDTH_BLOCKS/(2*CAVE_SAMPLES_PER_CELL)) * sizeof(uint8_t));
 800332a:	4ba7      	ldr	r3, [pc, #668]	; (80035c8 <generate_caves+0x2b4>)
 800332c:	681d      	ldr	r5, [r3, #0]
 800332e:	2064      	movs	r0, #100	; 0x64
 8003330:	f00b f942 	bl	800e5b8 <malloc>
 8003334:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (uint16_t j = 0; j < WORLD_HEIGHT_BLOCKS/CAVE_SAMPLES_PER_CELL; j++) {
 8003338:	3401      	adds	r4, #1
 800333a:	b2a4      	uxth	r4, r4
 800333c:	e7f3      	b.n	8003326 <generate_caves+0x12>
	for (uint16_t x = 0; x < map_width; x++) {
 800333e:	2500      	movs	r5, #0
 8003340:	e01f      	b.n	8003382 <generate_caves+0x6e>
		for (uint16_t y = 0; y < map_height; y++) {	// Caves start 5 blocks under ground
 8003342:	3401      	adds	r4, #1
 8003344:	b2a4      	uxth	r4, r4
 8003346:	2c77      	cmp	r4, #119	; 0x77
 8003348:	d819      	bhi.n	800337e <generate_caves+0x6a>
			CAVE_MAP[y][x] = dirt_value;
 800334a:	4b9f      	ldr	r3, [pc, #636]	; (80035c8 <generate_caves+0x2b4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003352:	2211      	movs	r2, #17
 8003354:	555a      	strb	r2, [r3, r5]
			if (rand() % 100 < CAVE_THRESH) {
 8003356:	f00c f8cf 	bl	800f4f8 <rand>
 800335a:	4a9c      	ldr	r2, [pc, #624]	; (80035cc <generate_caves+0x2b8>)
 800335c:	fb82 3200 	smull	r3, r2, r2, r0
 8003360:	17c3      	asrs	r3, r0, #31
 8003362:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8003366:	2264      	movs	r2, #100	; 0x64
 8003368:	fb02 0313 	mls	r3, r2, r3, r0
 800336c:	2b0b      	cmp	r3, #11
 800336e:	dce8      	bgt.n	8003342 <generate_caves+0x2e>
				CAVE_MAP[y][x] = cave_value;
 8003370:	4b95      	ldr	r3, [pc, #596]	; (80035c8 <generate_caves+0x2b4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003378:	22cc      	movs	r2, #204	; 0xcc
 800337a:	555a      	strb	r2, [r3, r5]
 800337c:	e7e1      	b.n	8003342 <generate_caves+0x2e>
	for (uint16_t x = 0; x < map_width; x++) {
 800337e:	3501      	adds	r5, #1
 8003380:	b2ad      	uxth	r5, r5
 8003382:	2d63      	cmp	r5, #99	; 0x63
 8003384:	d801      	bhi.n	800338a <generate_caves+0x76>
		for (uint16_t y = 0; y < map_height; y++) {	// Caves start 5 blocks under ground
 8003386:	2400      	movs	r4, #0
 8003388:	e7dd      	b.n	8003346 <generate_caves+0x32>
	for (uint8_t iter = 0; iter < CAVE_ITER; iter++) {
 800338a:	2600      	movs	r6, #0
 800338c:	e0ee      	b.n	800356c <generate_caves+0x258>
				uint8_t neighbor_cave_count = 0;
 800338e:	2300      	movs	r3, #0
				if (i > 0 && CAVE_MAP[i-1][j] == cave_value) {
 8003390:	b14c      	cbz	r4, 80033a6 <generate_caves+0x92>
 8003392:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 8003396:	3a01      	subs	r2, #1
 8003398:	498b      	ldr	r1, [pc, #556]	; (80035c8 <generate_caves+0x2b4>)
 800339a:	6809      	ldr	r1, [r1, #0]
 800339c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80033a0:	5d52      	ldrb	r2, [r2, r5]
 80033a2:	2acc      	cmp	r2, #204	; 0xcc
 80033a4:	d07f      	beq.n	80034a6 <generate_caves+0x192>
				if (i > 0 && j < map_height-1 && CAVE_MAP[i-1][j+1] == cave_value) {
 80033a6:	b164      	cbz	r4, 80033c2 <generate_caves+0xae>
 80033a8:	2d76      	cmp	r5, #118	; 0x76
 80033aa:	d80a      	bhi.n	80033c2 <generate_caves+0xae>
 80033ac:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 80033b0:	3a01      	subs	r2, #1
 80033b2:	4985      	ldr	r1, [pc, #532]	; (80035c8 <generate_caves+0x2b4>)
 80033b4:	6809      	ldr	r1, [r1, #0]
 80033b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80033ba:	442a      	add	r2, r5
 80033bc:	7852      	ldrb	r2, [r2, #1]
 80033be:	2acc      	cmp	r2, #204	; 0xcc
 80033c0:	d074      	beq.n	80034ac <generate_caves+0x198>
				if (j > 0 && CAVE_MAP[i][j-1] == cave_value) {
 80033c2:	b145      	cbz	r5, 80033d6 <generate_caves+0xc2>
 80033c4:	4a80      	ldr	r2, [pc, #512]	; (80035c8 <generate_caves+0x2b4>)
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80033cc:	442a      	add	r2, r5
 80033ce:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80033d2:	2acc      	cmp	r2, #204	; 0xcc
 80033d4:	d06d      	beq.n	80034b2 <generate_caves+0x19e>
				if (j < map_height-1 && CAVE_MAP[i][j+1] == cave_value) {
 80033d6:	2d76      	cmp	r5, #118	; 0x76
 80033d8:	d807      	bhi.n	80033ea <generate_caves+0xd6>
 80033da:	4a7b      	ldr	r2, [pc, #492]	; (80035c8 <generate_caves+0x2b4>)
 80033dc:	6812      	ldr	r2, [r2, #0]
 80033de:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80033e2:	442a      	add	r2, r5
 80033e4:	7852      	ldrb	r2, [r2, #1]
 80033e6:	2acc      	cmp	r2, #204	; 0xcc
 80033e8:	d066      	beq.n	80034b8 <generate_caves+0x1a4>
				if (i < map_width-1 && j > 0 && CAVE_MAP[i+1][j-1] == cave_value) {
 80033ea:	2c62      	cmp	r4, #98	; 0x62
 80033ec:	d80a      	bhi.n	8003404 <generate_caves+0xf0>
 80033ee:	b14d      	cbz	r5, 8003404 <generate_caves+0xf0>
 80033f0:	1c62      	adds	r2, r4, #1
 80033f2:	4975      	ldr	r1, [pc, #468]	; (80035c8 <generate_caves+0x2b4>)
 80033f4:	6809      	ldr	r1, [r1, #0]
 80033f6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80033fa:	442a      	add	r2, r5
 80033fc:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8003400:	2acc      	cmp	r2, #204	; 0xcc
 8003402:	d05c      	beq.n	80034be <generate_caves+0x1aa>
				if (i < map_width-1 && CAVE_MAP[i+1][j] == cave_value) {
 8003404:	2c62      	cmp	r4, #98	; 0x62
 8003406:	d807      	bhi.n	8003418 <generate_caves+0x104>
 8003408:	1c62      	adds	r2, r4, #1
 800340a:	496f      	ldr	r1, [pc, #444]	; (80035c8 <generate_caves+0x2b4>)
 800340c:	6809      	ldr	r1, [r1, #0]
 800340e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003412:	5d52      	ldrb	r2, [r2, r5]
 8003414:	2acc      	cmp	r2, #204	; 0xcc
 8003416:	d055      	beq.n	80034c4 <generate_caves+0x1b0>
				if (i < map_width-1 && j < map_height-1 && CAVE_MAP[i+1][j+1] == cave_value) {
 8003418:	2c62      	cmp	r4, #98	; 0x62
 800341a:	d80a      	bhi.n	8003432 <generate_caves+0x11e>
 800341c:	2d76      	cmp	r5, #118	; 0x76
 800341e:	d808      	bhi.n	8003432 <generate_caves+0x11e>
 8003420:	1c62      	adds	r2, r4, #1
 8003422:	4969      	ldr	r1, [pc, #420]	; (80035c8 <generate_caves+0x2b4>)
 8003424:	6809      	ldr	r1, [r1, #0]
 8003426:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800342a:	442a      	add	r2, r5
 800342c:	7852      	ldrb	r2, [r2, #1]
 800342e:	2acc      	cmp	r2, #204	; 0xcc
 8003430:	d04b      	beq.n	80034ca <generate_caves+0x1b6>
				if (CAVE_MAP[i][j] == dirt_value) {
 8003432:	00a7      	lsls	r7, r4, #2
 8003434:	4a64      	ldr	r2, [pc, #400]	; (80035c8 <generate_caves+0x2b4>)
 8003436:	6812      	ldr	r2, [r2, #0]
 8003438:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800343c:	46a8      	mov	r8, r5
 800343e:	1951      	adds	r1, r2, r5
 8003440:	5d52      	ldrb	r2, [r2, r5]
 8003442:	2a11      	cmp	r2, #17
 8003444:	d044      	beq.n	80034d0 <generate_caves+0x1bc>
					if (neighbor_cave_count < CAVE_DEATH_THRESH || (neighbor_cave_count > 6 && rand() % 100 < 40)) {
 8003446:	2b04      	cmp	r3, #4
 8003448:	d967      	bls.n	800351a <generate_caves+0x206>
 800344a:	2b06      	cmp	r3, #6
 800344c:	d858      	bhi.n	8003500 <generate_caves+0x1ec>
					CAVE_MAP[i][j] = cave_value;
 800344e:	4b5e      	ldr	r3, [pc, #376]	; (80035c8 <generate_caves+0x2b4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	59db      	ldr	r3, [r3, r7]
 8003454:	22cc      	movs	r2, #204	; 0xcc
 8003456:	f803 2008 	strb.w	r2, [r3, r8]
					if (rand() % 100 < blob_probability) {
 800345a:	f00c f84d 	bl	800f4f8 <rand>
 800345e:	4a5b      	ldr	r2, [pc, #364]	; (80035cc <generate_caves+0x2b8>)
 8003460:	fb82 3200 	smull	r3, r2, r2, r0
 8003464:	17c3      	asrs	r3, r0, #31
 8003466:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800346a:	2264      	movs	r2, #100	; 0x64
 800346c:	fb02 0313 	mls	r3, r2, r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	db6c      	blt.n	800354e <generate_caves+0x23a>
			for (uint16_t i = 0; i < map_height; i++) {
 8003474:	3401      	adds	r4, #1
 8003476:	b2a4      	uxth	r4, r4
 8003478:	2c77      	cmp	r4, #119	; 0x77
 800347a:	d86f      	bhi.n	800355c <generate_caves+0x248>
				if (i > 0 && j > 0 && CAVE_MAP[i-1][j-1] == cave_value) {
 800347c:	2c00      	cmp	r4, #0
 800347e:	d086      	beq.n	800338e <generate_caves+0x7a>
 8003480:	b16d      	cbz	r5, 800349e <generate_caves+0x18a>
 8003482:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8003486:	3b01      	subs	r3, #1
 8003488:	4a4f      	ldr	r2, [pc, #316]	; (80035c8 <generate_caves+0x2b4>)
 800348a:	6812      	ldr	r2, [r2, #0]
 800348c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003490:	442b      	add	r3, r5
 8003492:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8003496:	2bcc      	cmp	r3, #204	; 0xcc
 8003498:	d003      	beq.n	80034a2 <generate_caves+0x18e>
				uint8_t neighbor_cave_count = 0;
 800349a:	2300      	movs	r3, #0
 800349c:	e778      	b.n	8003390 <generate_caves+0x7c>
 800349e:	2300      	movs	r3, #0
 80034a0:	e776      	b.n	8003390 <generate_caves+0x7c>
					neighbor_cave_count++;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e774      	b.n	8003390 <generate_caves+0x7c>
					neighbor_cave_count++;
 80034a6:	3301      	adds	r3, #1
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e77c      	b.n	80033a6 <generate_caves+0x92>
					neighbor_cave_count++;
 80034ac:	3301      	adds	r3, #1
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	e787      	b.n	80033c2 <generate_caves+0xae>
					neighbor_cave_count++;
 80034b2:	3301      	adds	r3, #1
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	e78e      	b.n	80033d6 <generate_caves+0xc2>
					neighbor_cave_count++;
 80034b8:	3301      	adds	r3, #1
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	e795      	b.n	80033ea <generate_caves+0xd6>
					neighbor_cave_count++;
 80034be:	3301      	adds	r3, #1
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	e79f      	b.n	8003404 <generate_caves+0xf0>
					neighbor_cave_count++;
 80034c4:	3301      	adds	r3, #1
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	e7a6      	b.n	8003418 <generate_caves+0x104>
					neighbor_cave_count++;
 80034ca:	3301      	adds	r3, #1
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	e7b0      	b.n	8003432 <generate_caves+0x11e>
					if (neighbor_cave_count > CAVE_BIRTH_THRESH) {
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d9cf      	bls.n	8003474 <generate_caves+0x160>
						CAVE_MAP[i][j] = cave_value;
 80034d4:	23cc      	movs	r3, #204	; 0xcc
 80034d6:	700b      	strb	r3, [r1, #0]
						if (rand() % 100 < blob_probability) {
 80034d8:	f00c f80e 	bl	800f4f8 <rand>
 80034dc:	4a3b      	ldr	r2, [pc, #236]	; (80035cc <generate_caves+0x2b8>)
 80034de:	fb82 3200 	smull	r3, r2, r2, r0
 80034e2:	17c3      	asrs	r3, r0, #31
 80034e4:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 80034e8:	2264      	movs	r2, #100	; 0x64
 80034ea:	fb02 0313 	mls	r3, r2, r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	dac0      	bge.n	8003474 <generate_caves+0x160>
							draw_circle(i, j, radius, cave_value);
 80034f2:	23cc      	movs	r3, #204	; 0xcc
 80034f4:	2203      	movs	r2, #3
 80034f6:	4629      	mov	r1, r5
 80034f8:	4620      	mov	r0, r4
 80034fa:	f7ff fedb 	bl	80032b4 <draw_circle>
 80034fe:	e7b9      	b.n	8003474 <generate_caves+0x160>
					if (neighbor_cave_count < CAVE_DEATH_THRESH || (neighbor_cave_count > 6 && rand() % 100 < 40)) {
 8003500:	f00b fffa 	bl	800f4f8 <rand>
 8003504:	4a31      	ldr	r2, [pc, #196]	; (80035cc <generate_caves+0x2b8>)
 8003506:	fb82 3200 	smull	r3, r2, r2, r0
 800350a:	17c3      	asrs	r3, r0, #31
 800350c:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8003510:	2264      	movs	r2, #100	; 0x64
 8003512:	fb02 0313 	mls	r3, r2, r3, r0
 8003516:	2b27      	cmp	r3, #39	; 0x27
 8003518:	dc99      	bgt.n	800344e <generate_caves+0x13a>
						CAVE_MAP[i][j] = dirt_value;
 800351a:	4b2b      	ldr	r3, [pc, #172]	; (80035c8 <generate_caves+0x2b4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	59db      	ldr	r3, [r3, r7]
 8003520:	2211      	movs	r2, #17
 8003522:	f803 2008 	strb.w	r2, [r3, r8]
						if (rand() % 100 < blob_probability) {
 8003526:	f00b ffe7 	bl	800f4f8 <rand>
 800352a:	4a28      	ldr	r2, [pc, #160]	; (80035cc <generate_caves+0x2b8>)
 800352c:	fb82 3200 	smull	r3, r2, r2, r0
 8003530:	17c3      	asrs	r3, r0, #31
 8003532:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8003536:	2264      	movs	r2, #100	; 0x64
 8003538:	fb02 0313 	mls	r3, r2, r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	da86      	bge.n	800344e <generate_caves+0x13a>
							draw_circle(i, j, radius, dirt_value);
 8003540:	2311      	movs	r3, #17
 8003542:	2203      	movs	r2, #3
 8003544:	4629      	mov	r1, r5
 8003546:	4620      	mov	r0, r4
 8003548:	f7ff feb4 	bl	80032b4 <draw_circle>
 800354c:	e77f      	b.n	800344e <generate_caves+0x13a>
						draw_circle(i, j, radius, cave_value);
 800354e:	23cc      	movs	r3, #204	; 0xcc
 8003550:	2203      	movs	r2, #3
 8003552:	4629      	mov	r1, r5
 8003554:	4620      	mov	r0, r4
 8003556:	f7ff fead 	bl	80032b4 <draw_circle>
 800355a:	e78b      	b.n	8003474 <generate_caves+0x160>
		for (uint16_t j = 0; j < map_width; j++) {
 800355c:	3501      	adds	r5, #1
 800355e:	b2ad      	uxth	r5, r5
 8003560:	2d63      	cmp	r5, #99	; 0x63
 8003562:	d801      	bhi.n	8003568 <generate_caves+0x254>
			for (uint16_t i = 0; i < map_height; i++) {
 8003564:	2400      	movs	r4, #0
 8003566:	e787      	b.n	8003478 <generate_caves+0x164>
	for (uint8_t iter = 0; iter < CAVE_ITER; iter++) {
 8003568:	3601      	adds	r6, #1
 800356a:	b2f6      	uxtb	r6, r6
 800356c:	2e09      	cmp	r6, #9
 800356e:	d801      	bhi.n	8003574 <generate_caves+0x260>
		for (uint16_t j = 0; j < map_width; j++) {
 8003570:	2500      	movs	r5, #0
 8003572:	e7f5      	b.n	8003560 <generate_caves+0x24c>
	for (uint16_t x = 0; x < map_width; x += 1) {
 8003574:	2700      	movs	r7, #0
 8003576:	e047      	b.n	8003608 <generate_caves+0x2f4>
				for (int8_t cy = 0; cy < CAVE_SAMPLES_PER_CELL; cy++) {
 8003578:	3401      	adds	r4, #1
 800357a:	b264      	sxtb	r4, r4
 800357c:	2c01      	cmp	r4, #1
 800357e:	dc2d      	bgt.n	80035dc <generate_caves+0x2c8>
					uint8_t depth = rand() % 6 + 7;
 8003580:	f00b ffba 	bl	800f4f8 <rand>
 8003584:	4b12      	ldr	r3, [pc, #72]	; (80035d0 <generate_caves+0x2bc>)
 8003586:	fb83 2300 	smull	r2, r3, r3, r0
 800358a:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 800358e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003592:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 8003596:	b2db      	uxtb	r3, r3
 8003598:	3307      	adds	r3, #7
					uint16_t y_coor = y * CAVE_SAMPLES_PER_CELL + cy;
 800359a:	0071      	lsls	r1, r6, #1
 800359c:	b289      	uxth	r1, r1
 800359e:	fa11 f184 	uxtah	r1, r1, r4
 80035a2:	b289      	uxth	r1, r1
					uint16_t x_coor = x * CAVE_SAMPLES_PER_CELL + cx;
 80035a4:	007a      	lsls	r2, r7, #1
 80035a6:	b292      	uxth	r2, r2
 80035a8:	442a      	add	r2, r5
 80035aa:	b292      	uxth	r2, r2
					if (y_coor > LVL1_HMAP[x_coor] + depth) {
 80035ac:	4809      	ldr	r0, [pc, #36]	; (80035d4 <generate_caves+0x2c0>)
 80035ae:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 80035b2:	fa50 f383 	uxtab	r3, r0, r3
 80035b6:	4299      	cmp	r1, r3
 80035b8:	ddde      	ble.n	8003578 <generate_caves+0x264>
						WORLD[y_coor][x_coor] = value;
 80035ba:	4b07      	ldr	r3, [pc, #28]	; (80035d8 <generate_caves+0x2c4>)
 80035bc:	20c8      	movs	r0, #200	; 0xc8
 80035be:	fb00 3101 	mla	r1, r0, r1, r3
 80035c2:	f801 8002 	strb.w	r8, [r1, r2]
 80035c6:	e7d7      	b.n	8003578 <generate_caves+0x264>
 80035c8:	200009b8 	.word	0x200009b8
 80035cc:	51eb851f 	.word	0x51eb851f
 80035d0:	2aaaaaab 	.word	0x2aaaaaab
 80035d4:	20003f24 	.word	0x20003f24
 80035d8:	20005538 	.word	0x20005538
			for (uint8_t cx = 0; cx < CAVE_SAMPLES_PER_CELL; cx++) {
 80035dc:	3501      	adds	r5, #1
 80035de:	b2ed      	uxtb	r5, r5
 80035e0:	2d01      	cmp	r5, #1
 80035e2:	d801      	bhi.n	80035e8 <generate_caves+0x2d4>
				for (int8_t cy = 0; cy < CAVE_SAMPLES_PER_CELL; cy++) {
 80035e4:	2400      	movs	r4, #0
 80035e6:	e7c9      	b.n	800357c <generate_caves+0x268>
		for (uint16_t y = 0; y < map_height; y += 1) {
 80035e8:	3601      	adds	r6, #1
 80035ea:	b2b6      	uxth	r6, r6
 80035ec:	2e77      	cmp	r6, #119	; 0x77
 80035ee:	d809      	bhi.n	8003604 <generate_caves+0x2f0>
			uint8_t value = CAVE_MAP[map_height - y][x];
 80035f0:	f1c6 0378 	rsb	r3, r6, #120	; 0x78
 80035f4:	4a0f      	ldr	r2, [pc, #60]	; (8003634 <generate_caves+0x320>)
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035fc:	f813 8007 	ldrb.w	r8, [r3, r7]
			for (uint8_t cx = 0; cx < CAVE_SAMPLES_PER_CELL; cx++) {
 8003600:	2500      	movs	r5, #0
 8003602:	e7ed      	b.n	80035e0 <generate_caves+0x2cc>
	for (uint16_t x = 0; x < map_width; x += 1) {
 8003604:	3701      	adds	r7, #1
 8003606:	b2bf      	uxth	r7, r7
 8003608:	2f63      	cmp	r7, #99	; 0x63
 800360a:	d801      	bhi.n	8003610 <generate_caves+0x2fc>
		for (uint16_t y = 0; y < map_height; y += 1) {
 800360c:	2600      	movs	r6, #0
 800360e:	e7ed      	b.n	80035ec <generate_caves+0x2d8>
	for (uint16_t j = 0; j < WORLD_HEIGHT_BLOCKS/CAVE_SAMPLES_PER_CELL; j++) {
 8003610:	2400      	movs	r4, #0
 8003612:	2c77      	cmp	r4, #119	; 0x77
 8003614:	d808      	bhi.n	8003628 <generate_caves+0x314>
		free(CAVE_MAP[j]);
 8003616:	4b07      	ldr	r3, [pc, #28]	; (8003634 <generate_caves+0x320>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800361e:	f00a ffd3 	bl	800e5c8 <free>
	for (uint16_t j = 0; j < WORLD_HEIGHT_BLOCKS/CAVE_SAMPLES_PER_CELL; j++) {
 8003622:	3401      	adds	r4, #1
 8003624:	b2a4      	uxth	r4, r4
 8003626:	e7f4      	b.n	8003612 <generate_caves+0x2fe>
	free(CAVE_MAP);
 8003628:	4b02      	ldr	r3, [pc, #8]	; (8003634 <generate_caves+0x320>)
 800362a:	6818      	ldr	r0, [r3, #0]
 800362c:	f00a ffcc 	bl	800e5c8 <free>
}
 8003630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003634:	200009b8 	.word	0x200009b8

08003638 <gauss_kernel>:
=======
 8003346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003348:	200019a8 	.word	0x200019a8

0800334c <generate_caves>:
void generate_caves() {
 800334c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	CAVE_MAP = (uint8_t**) malloc((WORLD_HEIGHT_BLOCKS/CAVE_SAMPLES_PER_CELL) * sizeof(uint8_t*));
 8003350:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8003354:	f00b f864 	bl	800e420 <malloc>
 8003358:	4ba9      	ldr	r3, [pc, #676]	; (8003600 <generate_caves+0x2b4>)
 800335a:	6018      	str	r0, [r3, #0]
	for (uint16_t j = 0; j < WORLD_HEIGHT_BLOCKS/CAVE_SAMPLES_PER_CELL; j++) {
 800335c:	2400      	movs	r4, #0
 800335e:	2c77      	cmp	r4, #119	; 0x77
 8003360:	d809      	bhi.n	8003376 <generate_caves+0x2a>
		CAVE_MAP[j] = (uint8_t*) malloc((WORLD_WIDTH_BLOCKS/(2*CAVE_SAMPLES_PER_CELL)) * sizeof(uint8_t));
 8003362:	4ba7      	ldr	r3, [pc, #668]	; (8003600 <generate_caves+0x2b4>)
 8003364:	681d      	ldr	r5, [r3, #0]
 8003366:	2064      	movs	r0, #100	; 0x64
 8003368:	f00b f85a 	bl	800e420 <malloc>
 800336c:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (uint16_t j = 0; j < WORLD_HEIGHT_BLOCKS/CAVE_SAMPLES_PER_CELL; j++) {
 8003370:	3401      	adds	r4, #1
 8003372:	b2a4      	uxth	r4, r4
 8003374:	e7f3      	b.n	800335e <generate_caves+0x12>
	for (uint16_t x = 0; x < map_width; x++) {
 8003376:	2500      	movs	r5, #0
 8003378:	e01f      	b.n	80033ba <generate_caves+0x6e>
		for (uint16_t y = 0; y < map_height; y++) {	// Caves start 5 blocks under ground
 800337a:	3401      	adds	r4, #1
 800337c:	b2a4      	uxth	r4, r4
 800337e:	2c77      	cmp	r4, #119	; 0x77
 8003380:	d819      	bhi.n	80033b6 <generate_caves+0x6a>
			CAVE_MAP[y][x] = dirt_value;
 8003382:	4b9f      	ldr	r3, [pc, #636]	; (8003600 <generate_caves+0x2b4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800338a:	2211      	movs	r2, #17
 800338c:	555a      	strb	r2, [r3, r5]
			if (rand() % 100 < CAVE_THRESH) {
 800338e:	f00b ffe7 	bl	800f360 <rand>
 8003392:	4a9c      	ldr	r2, [pc, #624]	; (8003604 <generate_caves+0x2b8>)
 8003394:	fb82 3200 	smull	r3, r2, r2, r0
 8003398:	17c3      	asrs	r3, r0, #31
 800339a:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800339e:	2264      	movs	r2, #100	; 0x64
 80033a0:	fb02 0313 	mls	r3, r2, r3, r0
 80033a4:	2b0b      	cmp	r3, #11
 80033a6:	dce8      	bgt.n	800337a <generate_caves+0x2e>
				CAVE_MAP[y][x] = cave_value;
 80033a8:	4b95      	ldr	r3, [pc, #596]	; (8003600 <generate_caves+0x2b4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80033b0:	22cc      	movs	r2, #204	; 0xcc
 80033b2:	555a      	strb	r2, [r3, r5]
 80033b4:	e7e1      	b.n	800337a <generate_caves+0x2e>
	for (uint16_t x = 0; x < map_width; x++) {
 80033b6:	3501      	adds	r5, #1
 80033b8:	b2ad      	uxth	r5, r5
 80033ba:	2d63      	cmp	r5, #99	; 0x63
 80033bc:	d801      	bhi.n	80033c2 <generate_caves+0x76>
		for (uint16_t y = 0; y < map_height; y++) {	// Caves start 5 blocks under ground
 80033be:	2400      	movs	r4, #0
 80033c0:	e7dd      	b.n	800337e <generate_caves+0x32>
	for (uint8_t iter = 0; iter < CAVE_ITER; iter++) {
 80033c2:	2600      	movs	r6, #0
 80033c4:	e0ee      	b.n	80035a4 <generate_caves+0x258>
				uint8_t neighbor_cave_count = 0;
 80033c6:	2300      	movs	r3, #0
				if (i > 0 && CAVE_MAP[i-1][j] == cave_value) {
 80033c8:	b14c      	cbz	r4, 80033de <generate_caves+0x92>
 80033ca:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 80033ce:	3a01      	subs	r2, #1
 80033d0:	498b      	ldr	r1, [pc, #556]	; (8003600 <generate_caves+0x2b4>)
 80033d2:	6809      	ldr	r1, [r1, #0]
 80033d4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80033d8:	5d52      	ldrb	r2, [r2, r5]
 80033da:	2acc      	cmp	r2, #204	; 0xcc
 80033dc:	d07f      	beq.n	80034de <generate_caves+0x192>
				if (i > 0 && j < map_height-1 && CAVE_MAP[i-1][j+1] == cave_value) {
 80033de:	b164      	cbz	r4, 80033fa <generate_caves+0xae>
 80033e0:	2d76      	cmp	r5, #118	; 0x76
 80033e2:	d80a      	bhi.n	80033fa <generate_caves+0xae>
 80033e4:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 80033e8:	3a01      	subs	r2, #1
 80033ea:	4985      	ldr	r1, [pc, #532]	; (8003600 <generate_caves+0x2b4>)
 80033ec:	6809      	ldr	r1, [r1, #0]
 80033ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80033f2:	442a      	add	r2, r5
 80033f4:	7852      	ldrb	r2, [r2, #1]
 80033f6:	2acc      	cmp	r2, #204	; 0xcc
 80033f8:	d074      	beq.n	80034e4 <generate_caves+0x198>
				if (j > 0 && CAVE_MAP[i][j-1] == cave_value) {
 80033fa:	b145      	cbz	r5, 800340e <generate_caves+0xc2>
 80033fc:	4a80      	ldr	r2, [pc, #512]	; (8003600 <generate_caves+0x2b4>)
 80033fe:	6812      	ldr	r2, [r2, #0]
 8003400:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8003404:	442a      	add	r2, r5
 8003406:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800340a:	2acc      	cmp	r2, #204	; 0xcc
 800340c:	d06d      	beq.n	80034ea <generate_caves+0x19e>
				if (j < map_height-1 && CAVE_MAP[i][j+1] == cave_value) {
 800340e:	2d76      	cmp	r5, #118	; 0x76
 8003410:	d807      	bhi.n	8003422 <generate_caves+0xd6>
 8003412:	4a7b      	ldr	r2, [pc, #492]	; (8003600 <generate_caves+0x2b4>)
 8003414:	6812      	ldr	r2, [r2, #0]
 8003416:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800341a:	442a      	add	r2, r5
 800341c:	7852      	ldrb	r2, [r2, #1]
 800341e:	2acc      	cmp	r2, #204	; 0xcc
 8003420:	d066      	beq.n	80034f0 <generate_caves+0x1a4>
				if (i < map_width-1 && j > 0 && CAVE_MAP[i+1][j-1] == cave_value) {
 8003422:	2c62      	cmp	r4, #98	; 0x62
 8003424:	d80a      	bhi.n	800343c <generate_caves+0xf0>
 8003426:	b14d      	cbz	r5, 800343c <generate_caves+0xf0>
 8003428:	1c62      	adds	r2, r4, #1
 800342a:	4975      	ldr	r1, [pc, #468]	; (8003600 <generate_caves+0x2b4>)
 800342c:	6809      	ldr	r1, [r1, #0]
 800342e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003432:	442a      	add	r2, r5
 8003434:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8003438:	2acc      	cmp	r2, #204	; 0xcc
 800343a:	d05c      	beq.n	80034f6 <generate_caves+0x1aa>
				if (i < map_width-1 && CAVE_MAP[i+1][j] == cave_value) {
 800343c:	2c62      	cmp	r4, #98	; 0x62
 800343e:	d807      	bhi.n	8003450 <generate_caves+0x104>
 8003440:	1c62      	adds	r2, r4, #1
 8003442:	496f      	ldr	r1, [pc, #444]	; (8003600 <generate_caves+0x2b4>)
 8003444:	6809      	ldr	r1, [r1, #0]
 8003446:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800344a:	5d52      	ldrb	r2, [r2, r5]
 800344c:	2acc      	cmp	r2, #204	; 0xcc
 800344e:	d055      	beq.n	80034fc <generate_caves+0x1b0>
				if (i < map_width-1 && j < map_height-1 && CAVE_MAP[i+1][j+1] == cave_value) {
 8003450:	2c62      	cmp	r4, #98	; 0x62
 8003452:	d80a      	bhi.n	800346a <generate_caves+0x11e>
 8003454:	2d76      	cmp	r5, #118	; 0x76
 8003456:	d808      	bhi.n	800346a <generate_caves+0x11e>
 8003458:	1c62      	adds	r2, r4, #1
 800345a:	4969      	ldr	r1, [pc, #420]	; (8003600 <generate_caves+0x2b4>)
 800345c:	6809      	ldr	r1, [r1, #0]
 800345e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003462:	442a      	add	r2, r5
 8003464:	7852      	ldrb	r2, [r2, #1]
 8003466:	2acc      	cmp	r2, #204	; 0xcc
 8003468:	d04b      	beq.n	8003502 <generate_caves+0x1b6>
				if (CAVE_MAP[i][j] == dirt_value) {
 800346a:	00a7      	lsls	r7, r4, #2
 800346c:	4a64      	ldr	r2, [pc, #400]	; (8003600 <generate_caves+0x2b4>)
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8003474:	46a8      	mov	r8, r5
 8003476:	1951      	adds	r1, r2, r5
 8003478:	5d52      	ldrb	r2, [r2, r5]
 800347a:	2a11      	cmp	r2, #17
 800347c:	d044      	beq.n	8003508 <generate_caves+0x1bc>
					if (neighbor_cave_count < CAVE_DEATH_THRESH || (neighbor_cave_count > 6 && rand() % 100 < 40)) {
 800347e:	2b04      	cmp	r3, #4
 8003480:	d967      	bls.n	8003552 <generate_caves+0x206>
 8003482:	2b06      	cmp	r3, #6
 8003484:	d858      	bhi.n	8003538 <generate_caves+0x1ec>
					CAVE_MAP[i][j] = cave_value;
 8003486:	4b5e      	ldr	r3, [pc, #376]	; (8003600 <generate_caves+0x2b4>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	59db      	ldr	r3, [r3, r7]
 800348c:	22cc      	movs	r2, #204	; 0xcc
 800348e:	f803 2008 	strb.w	r2, [r3, r8]
					if (rand() % 100 < blob_probability) {
 8003492:	f00b ff65 	bl	800f360 <rand>
 8003496:	4a5b      	ldr	r2, [pc, #364]	; (8003604 <generate_caves+0x2b8>)
 8003498:	fb82 3200 	smull	r3, r2, r2, r0
 800349c:	17c3      	asrs	r3, r0, #31
 800349e:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 80034a2:	2264      	movs	r2, #100	; 0x64
 80034a4:	fb02 0313 	mls	r3, r2, r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	db6c      	blt.n	8003586 <generate_caves+0x23a>
			for (uint16_t i = 0; i < map_height; i++) {
 80034ac:	3401      	adds	r4, #1
 80034ae:	b2a4      	uxth	r4, r4
 80034b0:	2c77      	cmp	r4, #119	; 0x77
 80034b2:	d86f      	bhi.n	8003594 <generate_caves+0x248>
				if (i > 0 && j > 0 && CAVE_MAP[i-1][j-1] == cave_value) {
 80034b4:	2c00      	cmp	r4, #0
 80034b6:	d086      	beq.n	80033c6 <generate_caves+0x7a>
 80034b8:	b16d      	cbz	r5, 80034d6 <generate_caves+0x18a>
 80034ba:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80034be:	3b01      	subs	r3, #1
 80034c0:	4a4f      	ldr	r2, [pc, #316]	; (8003600 <generate_caves+0x2b4>)
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c8:	442b      	add	r3, r5
 80034ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80034ce:	2bcc      	cmp	r3, #204	; 0xcc
 80034d0:	d003      	beq.n	80034da <generate_caves+0x18e>
				uint8_t neighbor_cave_count = 0;
 80034d2:	2300      	movs	r3, #0
 80034d4:	e778      	b.n	80033c8 <generate_caves+0x7c>
 80034d6:	2300      	movs	r3, #0
 80034d8:	e776      	b.n	80033c8 <generate_caves+0x7c>
					neighbor_cave_count++;
 80034da:	2301      	movs	r3, #1
 80034dc:	e774      	b.n	80033c8 <generate_caves+0x7c>
					neighbor_cave_count++;
 80034de:	3301      	adds	r3, #1
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	e77c      	b.n	80033de <generate_caves+0x92>
					neighbor_cave_count++;
 80034e4:	3301      	adds	r3, #1
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	e787      	b.n	80033fa <generate_caves+0xae>
					neighbor_cave_count++;
 80034ea:	3301      	adds	r3, #1
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e78e      	b.n	800340e <generate_caves+0xc2>
					neighbor_cave_count++;
 80034f0:	3301      	adds	r3, #1
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	e795      	b.n	8003422 <generate_caves+0xd6>
					neighbor_cave_count++;
 80034f6:	3301      	adds	r3, #1
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	e79f      	b.n	800343c <generate_caves+0xf0>
					neighbor_cave_count++;
 80034fc:	3301      	adds	r3, #1
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	e7a6      	b.n	8003450 <generate_caves+0x104>
					neighbor_cave_count++;
 8003502:	3301      	adds	r3, #1
 8003504:	b2db      	uxtb	r3, r3
 8003506:	e7b0      	b.n	800346a <generate_caves+0x11e>
					if (neighbor_cave_count > CAVE_BIRTH_THRESH) {
 8003508:	2b03      	cmp	r3, #3
 800350a:	d9cf      	bls.n	80034ac <generate_caves+0x160>
						CAVE_MAP[i][j] = cave_value;
 800350c:	23cc      	movs	r3, #204	; 0xcc
 800350e:	700b      	strb	r3, [r1, #0]
						if (rand() % 100 < blob_probability) {
 8003510:	f00b ff26 	bl	800f360 <rand>
 8003514:	4a3b      	ldr	r2, [pc, #236]	; (8003604 <generate_caves+0x2b8>)
 8003516:	fb82 3200 	smull	r3, r2, r2, r0
 800351a:	17c3      	asrs	r3, r0, #31
 800351c:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8003520:	2264      	movs	r2, #100	; 0x64
 8003522:	fb02 0313 	mls	r3, r2, r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	dac0      	bge.n	80034ac <generate_caves+0x160>
							draw_circle(i, j, radius, cave_value);
 800352a:	23cc      	movs	r3, #204	; 0xcc
 800352c:	2203      	movs	r2, #3
 800352e:	4629      	mov	r1, r5
 8003530:	4620      	mov	r0, r4
 8003532:	f7ff fedb 	bl	80032ec <draw_circle>
 8003536:	e7b9      	b.n	80034ac <generate_caves+0x160>
					if (neighbor_cave_count < CAVE_DEATH_THRESH || (neighbor_cave_count > 6 && rand() % 100 < 40)) {
 8003538:	f00b ff12 	bl	800f360 <rand>
 800353c:	4a31      	ldr	r2, [pc, #196]	; (8003604 <generate_caves+0x2b8>)
 800353e:	fb82 3200 	smull	r3, r2, r2, r0
 8003542:	17c3      	asrs	r3, r0, #31
 8003544:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8003548:	2264      	movs	r2, #100	; 0x64
 800354a:	fb02 0313 	mls	r3, r2, r3, r0
 800354e:	2b27      	cmp	r3, #39	; 0x27
 8003550:	dc99      	bgt.n	8003486 <generate_caves+0x13a>
						CAVE_MAP[i][j] = dirt_value;
 8003552:	4b2b      	ldr	r3, [pc, #172]	; (8003600 <generate_caves+0x2b4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	59db      	ldr	r3, [r3, r7]
 8003558:	2211      	movs	r2, #17
 800355a:	f803 2008 	strb.w	r2, [r3, r8]
						if (rand() % 100 < blob_probability) {
 800355e:	f00b feff 	bl	800f360 <rand>
 8003562:	4a28      	ldr	r2, [pc, #160]	; (8003604 <generate_caves+0x2b8>)
 8003564:	fb82 3200 	smull	r3, r2, r2, r0
 8003568:	17c3      	asrs	r3, r0, #31
 800356a:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800356e:	2264      	movs	r2, #100	; 0x64
 8003570:	fb02 0313 	mls	r3, r2, r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	da86      	bge.n	8003486 <generate_caves+0x13a>
							draw_circle(i, j, radius, dirt_value);
 8003578:	2311      	movs	r3, #17
 800357a:	2203      	movs	r2, #3
 800357c:	4629      	mov	r1, r5
 800357e:	4620      	mov	r0, r4
 8003580:	f7ff feb4 	bl	80032ec <draw_circle>
 8003584:	e77f      	b.n	8003486 <generate_caves+0x13a>
						draw_circle(i, j, radius, cave_value);
 8003586:	23cc      	movs	r3, #204	; 0xcc
 8003588:	2203      	movs	r2, #3
 800358a:	4629      	mov	r1, r5
 800358c:	4620      	mov	r0, r4
 800358e:	f7ff fead 	bl	80032ec <draw_circle>
 8003592:	e78b      	b.n	80034ac <generate_caves+0x160>
		for (uint16_t j = 0; j < map_width; j++) {
 8003594:	3501      	adds	r5, #1
 8003596:	b2ad      	uxth	r5, r5
 8003598:	2d63      	cmp	r5, #99	; 0x63
 800359a:	d801      	bhi.n	80035a0 <generate_caves+0x254>
			for (uint16_t i = 0; i < map_height; i++) {
 800359c:	2400      	movs	r4, #0
 800359e:	e787      	b.n	80034b0 <generate_caves+0x164>
	for (uint8_t iter = 0; iter < CAVE_ITER; iter++) {
 80035a0:	3601      	adds	r6, #1
 80035a2:	b2f6      	uxtb	r6, r6
 80035a4:	2e09      	cmp	r6, #9
 80035a6:	d801      	bhi.n	80035ac <generate_caves+0x260>
		for (uint16_t j = 0; j < map_width; j++) {
 80035a8:	2500      	movs	r5, #0
 80035aa:	e7f5      	b.n	8003598 <generate_caves+0x24c>
	for (uint16_t x = 0; x < map_width; x += 1) {
 80035ac:	2700      	movs	r7, #0
 80035ae:	e047      	b.n	8003640 <generate_caves+0x2f4>
				for (int8_t cy = 0; cy < CAVE_SAMPLES_PER_CELL; cy++) {
 80035b0:	3401      	adds	r4, #1
 80035b2:	b264      	sxtb	r4, r4
 80035b4:	2c01      	cmp	r4, #1
 80035b6:	dc2d      	bgt.n	8003614 <generate_caves+0x2c8>
					uint8_t depth = rand() % 6 + 7;
 80035b8:	f00b fed2 	bl	800f360 <rand>
 80035bc:	4b12      	ldr	r3, [pc, #72]	; (8003608 <generate_caves+0x2bc>)
 80035be:	fb83 2300 	smull	r2, r3, r3, r0
 80035c2:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 80035c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80035ca:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	3307      	adds	r3, #7
					uint16_t y_coor = y * CAVE_SAMPLES_PER_CELL + cy;
 80035d2:	0071      	lsls	r1, r6, #1
 80035d4:	b289      	uxth	r1, r1
 80035d6:	fa11 f184 	uxtah	r1, r1, r4
 80035da:	b289      	uxth	r1, r1
					uint16_t x_coor = x * CAVE_SAMPLES_PER_CELL + cx;
 80035dc:	007a      	lsls	r2, r7, #1
 80035de:	b292      	uxth	r2, r2
 80035e0:	442a      	add	r2, r5
 80035e2:	b292      	uxth	r2, r2
					if (y_coor > LVL1_HMAP[x_coor] + depth) {
 80035e4:	4809      	ldr	r0, [pc, #36]	; (800360c <generate_caves+0x2c0>)
 80035e6:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 80035ea:	fa50 f383 	uxtab	r3, r0, r3
 80035ee:	4299      	cmp	r1, r3
 80035f0:	ddde      	ble.n	80035b0 <generate_caves+0x264>
						WORLD[y_coor][x_coor] = value;
 80035f2:	4b07      	ldr	r3, [pc, #28]	; (8003610 <generate_caves+0x2c4>)
 80035f4:	20c8      	movs	r0, #200	; 0xc8
 80035f6:	fb00 3101 	mla	r1, r0, r1, r3
 80035fa:	f801 8002 	strb.w	r8, [r1, r2]
 80035fe:	e7d7      	b.n	80035b0 <generate_caves+0x264>
 8003600:	200019a8 	.word	0x200019a8
 8003604:	51eb851f 	.word	0x51eb851f
 8003608:	2aaaaaab 	.word	0x2aaaaaab
 800360c:	20004f14 	.word	0x20004f14
 8003610:	20006528 	.word	0x20006528
			for (uint8_t cx = 0; cx < CAVE_SAMPLES_PER_CELL; cx++) {
 8003614:	3501      	adds	r5, #1
 8003616:	b2ed      	uxtb	r5, r5
 8003618:	2d01      	cmp	r5, #1
 800361a:	d801      	bhi.n	8003620 <generate_caves+0x2d4>
				for (int8_t cy = 0; cy < CAVE_SAMPLES_PER_CELL; cy++) {
 800361c:	2400      	movs	r4, #0
 800361e:	e7c9      	b.n	80035b4 <generate_caves+0x268>
		for (uint16_t y = 0; y < map_height; y += 1) {
 8003620:	3601      	adds	r6, #1
 8003622:	b2b6      	uxth	r6, r6
 8003624:	2e77      	cmp	r6, #119	; 0x77
 8003626:	d809      	bhi.n	800363c <generate_caves+0x2f0>
			uint8_t value = CAVE_MAP[map_height - y][x];
 8003628:	f1c6 0378 	rsb	r3, r6, #120	; 0x78
 800362c:	4a0f      	ldr	r2, [pc, #60]	; (800366c <generate_caves+0x320>)
 800362e:	6812      	ldr	r2, [r2, #0]
 8003630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003634:	f813 8007 	ldrb.w	r8, [r3, r7]
			for (uint8_t cx = 0; cx < CAVE_SAMPLES_PER_CELL; cx++) {
 8003638:	2500      	movs	r5, #0
 800363a:	e7ed      	b.n	8003618 <generate_caves+0x2cc>
	for (uint16_t x = 0; x < map_width; x += 1) {
 800363c:	3701      	adds	r7, #1
 800363e:	b2bf      	uxth	r7, r7
 8003640:	2f63      	cmp	r7, #99	; 0x63
 8003642:	d801      	bhi.n	8003648 <generate_caves+0x2fc>
		for (uint16_t y = 0; y < map_height; y += 1) {
 8003644:	2600      	movs	r6, #0
 8003646:	e7ed      	b.n	8003624 <generate_caves+0x2d8>
	for (uint16_t j = 0; j < WORLD_HEIGHT_BLOCKS/CAVE_SAMPLES_PER_CELL; j++) {
 8003648:	2400      	movs	r4, #0
 800364a:	2c77      	cmp	r4, #119	; 0x77
 800364c:	d808      	bhi.n	8003660 <generate_caves+0x314>
		free(CAVE_MAP[j]);
 800364e:	4b07      	ldr	r3, [pc, #28]	; (800366c <generate_caves+0x320>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003656:	f00a feeb 	bl	800e430 <free>
	for (uint16_t j = 0; j < WORLD_HEIGHT_BLOCKS/CAVE_SAMPLES_PER_CELL; j++) {
 800365a:	3401      	adds	r4, #1
 800365c:	b2a4      	uxth	r4, r4
 800365e:	e7f4      	b.n	800364a <generate_caves+0x2fe>
	free(CAVE_MAP);
 8003660:	4b02      	ldr	r3, [pc, #8]	; (800366c <generate_caves+0x320>)
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	f00a fee4 	bl	800e430 <free>
}
 8003668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800366c:	200019a8 	.word	0x200019a8

08003670 <gauss_kernel>:
>>>>>>> render
	filter_level(WORLD_WIDTH_BLOCKS, KERNEL_WIDTH, LEVEL_SMOOTHING_FACTOR, true);

}

// Returns gauss kernel of width width and given sigma
float* gauss_kernel(uint8_t width, uint8_t sigma) {
<<<<<<< HEAD
 8003638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800363c:	ed2d 8b02 	vpush	{d8}
 8003640:	4605      	mov	r5, r0
 8003642:	4688      	mov	r8, r1
	float* filter = (float*) malloc(width * sizeof(float));
 8003644:	0080      	lsls	r0, r0, #2
 8003646:	f00a ffb7 	bl	800e5b8 <malloc>
 800364a:	4681      	mov	r9, r0
=======
 8003670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003674:	ed2d 8b02 	vpush	{d8}
 8003678:	4605      	mov	r5, r0
 800367a:	4688      	mov	r8, r1
	float* filter = (float*) malloc(width * sizeof(float));
 800367c:	0080      	lsls	r0, r0, #2
 800367e:	f00a fecf 	bl	800e420 <malloc>
 8003682:	4681      	mov	r9, r0
>>>>>>> render

    float sum = 0.0;

    // Compute the filter values
    for (int i = 0; i < width; i++) {
<<<<<<< HEAD
 800364c:	2400      	movs	r4, #0
    float sum = 0.0;
 800364e:	ed9f 8a26 	vldr	s16, [pc, #152]	; 80036e8 <gauss_kernel+0xb0>
    for (int i = 0; i < width; i++) {
 8003652:	e02e      	b.n	80036b2 <gauss_kernel+0x7a>
        int x = i - (width - 1) / 2;
 8003654:	1e6b      	subs	r3, r5, #1
 8003656:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800365a:	eba4 0063 	sub.w	r0, r4, r3, asr #1
        filter[i] = exp(-x * x / (2 * sigma * sigma)) / (sqrt(2 * M_PI) * sigma);
 800365e:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 8003662:	fb00 f303 	mul.w	r3, r0, r3
 8003666:	fb08 f008 	mul.w	r0, r8, r8
 800366a:	0040      	lsls	r0, r0, #1
 800366c:	fb93 f0f0 	sdiv	r0, r3, r0
 8003670:	f7fc ff80 	bl	8000574 <__aeabi_i2d>
 8003674:	ec41 0b10 	vmov	d0, r0, r1
 8003678:	f009 fe62 	bl	800d340 <exp>
 800367c:	ec57 6b10 	vmov	r6, r7, d0
 8003680:	4640      	mov	r0, r8
 8003682:	f7fc ff77 	bl	8000574 <__aeabi_i2d>
 8003686:	a316      	add	r3, pc, #88	; (adr r3, 80036e0 <gauss_kernel+0xa8>)
 8003688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368c:	f7fc ffdc 	bl	8000648 <__aeabi_dmul>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	eb09 0a84 	add.w	sl, r9, r4, lsl #2
 8003698:	4630      	mov	r0, r6
 800369a:	4639      	mov	r1, r7
 800369c:	f7fd f8fe 	bl	800089c <__aeabi_ddiv>
 80036a0:	f7fd faca 	bl	8000c38 <__aeabi_d2f>
 80036a4:	ee07 0a90 	vmov	s15, r0
 80036a8:	f8ca 0000 	str.w	r0, [sl]
        sum += filter[i];
 80036ac:	ee38 8a27 	vadd.f32	s16, s16, s15
    for (int i = 0; i < width; i++) {
 80036b0:	3401      	adds	r4, #1
 80036b2:	42a5      	cmp	r5, r4
 80036b4:	dcce      	bgt.n	8003654 <gauss_kernel+0x1c>
=======
 8003684:	2400      	movs	r4, #0
    float sum = 0.0;
 8003686:	ed9f 8a26 	vldr	s16, [pc, #152]	; 8003720 <gauss_kernel+0xb0>
    for (int i = 0; i < width; i++) {
 800368a:	e02e      	b.n	80036ea <gauss_kernel+0x7a>
        int x = i - (width - 1) / 2;
 800368c:	1e6b      	subs	r3, r5, #1
 800368e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8003692:	eba4 0063 	sub.w	r0, r4, r3, asr #1
        filter[i] = exp(-x * x / (2 * sigma * sigma)) / (sqrt(2 * M_PI) * sigma);
 8003696:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 800369a:	fb00 f303 	mul.w	r3, r0, r3
 800369e:	fb08 f008 	mul.w	r0, r8, r8
 80036a2:	0040      	lsls	r0, r0, #1
 80036a4:	fb93 f0f0 	sdiv	r0, r3, r0
 80036a8:	f7fc ff64 	bl	8000574 <__aeabi_i2d>
 80036ac:	ec41 0b10 	vmov	d0, r0, r1
 80036b0:	f009 fd7a 	bl	800d1a8 <exp>
 80036b4:	ec57 6b10 	vmov	r6, r7, d0
 80036b8:	4640      	mov	r0, r8
 80036ba:	f7fc ff5b 	bl	8000574 <__aeabi_i2d>
 80036be:	a316      	add	r3, pc, #88	; (adr r3, 8003718 <gauss_kernel+0xa8>)
 80036c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c4:	f7fc ffc0 	bl	8000648 <__aeabi_dmul>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	eb09 0a84 	add.w	sl, r9, r4, lsl #2
 80036d0:	4630      	mov	r0, r6
 80036d2:	4639      	mov	r1, r7
 80036d4:	f7fd f8e2 	bl	800089c <__aeabi_ddiv>
 80036d8:	f7fd faae 	bl	8000c38 <__aeabi_d2f>
 80036dc:	ee07 0a90 	vmov	s15, r0
 80036e0:	f8ca 0000 	str.w	r0, [sl]
        sum += filter[i];
 80036e4:	ee38 8a27 	vadd.f32	s16, s16, s15
    for (int i = 0; i < width; i++) {
 80036e8:	3401      	adds	r4, #1
 80036ea:	42a5      	cmp	r5, r4
 80036ec:	dcce      	bgt.n	800368c <gauss_kernel+0x1c>
>>>>>>> render
    }

    // Normalize the filter values
    for (int i = 0; i < width; i++) {
<<<<<<< HEAD
 80036b6:	2300      	movs	r3, #0
 80036b8:	e008      	b.n	80036cc <gauss_kernel+0x94>
        filter[i] /= sum;
 80036ba:	eb09 0283 	add.w	r2, r9, r3, lsl #2
 80036be:	ed92 7a00 	vldr	s14, [r2]
 80036c2:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80036c6:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < width; i++) {
 80036ca:	3301      	adds	r3, #1
 80036cc:	429d      	cmp	r5, r3
 80036ce:	dcf4      	bgt.n	80036ba <gauss_kernel+0x82>
=======
 80036ee:	2300      	movs	r3, #0
 80036f0:	e008      	b.n	8003704 <gauss_kernel+0x94>
        filter[i] /= sum;
 80036f2:	eb09 0283 	add.w	r2, r9, r3, lsl #2
 80036f6:	ed92 7a00 	vldr	s14, [r2]
 80036fa:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80036fe:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < width; i++) {
 8003702:	3301      	adds	r3, #1
 8003704:	429d      	cmp	r5, r3
 8003706:	dcf4      	bgt.n	80036f2 <gauss_kernel+0x82>
>>>>>>> render
    }

    return filter;
}
<<<<<<< HEAD
 80036d0:	4648      	mov	r0, r9
 80036d2:	ecbd 8b02 	vpop	{d8}
 80036d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036da:	bf00      	nop
 80036dc:	f3af 8000 	nop.w
 80036e0:	1ff62705 	.word	0x1ff62705
 80036e4:	40040d93 	.word	0x40040d93
 80036e8:	00000000 	.word	0x00000000

080036ec <erosion>:
=======
 8003708:	4648      	mov	r0, r9
 800370a:	ecbd 8b02 	vpop	{d8}
 800370e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003712:	bf00      	nop
 8003714:	f3af 8000 	nop.w
 8003718:	1ff62705 	.word	0x1ff62705
 800371c:	40040d93 	.word	0x40040d93
 8003720:	00000000 	.word	0x00000000

08003724 <erosion>:
>>>>>>> render
	}


}

void erosion(uint8_t SE[SE_SIZE_EROSION][SE_SIZE_EROSION], uint16_t map_width, uint16_t map_height, uint8_t foreground) {
<<<<<<< HEAD
 80036ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	4686      	mov	lr, r0
 80036f6:	460d      	mov	r5, r1
 80036f8:	4691      	mov	r9, r2
 80036fa:	469c      	mov	ip, r3
	uint8_t se_size = SE_SIZE_EROSION;

	uint8_t temp[map_height][map_width];
 80036fc:	fb01 f302 	mul.w	r3, r1, r2
 8003700:	3307      	adds	r3, #7
 8003702:	f023 0307 	bic.w	r3, r3, #7
 8003706:	ebad 0d03 	sub.w	sp, sp, r3
 800370a:	f8c7 d000 	str.w	sp, [r7]

	for (uint16_t i = 0; i < map_width; i++) {
 800370e:	2600      	movs	r6, #0
 8003710:	e036      	b.n	8003780 <erosion+0x94>
=======
 8003724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	4686      	mov	lr, r0
 800372e:	460d      	mov	r5, r1
 8003730:	4691      	mov	r9, r2
 8003732:	469c      	mov	ip, r3
	uint8_t se_size = SE_SIZE_EROSION;

	uint8_t temp[map_height][map_width];
 8003734:	fb01 f302 	mul.w	r3, r1, r2
 8003738:	3307      	adds	r3, #7
 800373a:	f023 0307 	bic.w	r3, r3, #7
 800373e:	ebad 0d03 	sub.w	sp, sp, r3
 8003742:	f8c7 d000 	str.w	sp, [r7]

	for (uint16_t i = 0; i < map_width; i++) {
 8003746:	2600      	movs	r6, #0
 8003748:	e036      	b.n	80037b8 <erosion+0x94>
>>>>>>> render
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
			uint8_t min_value = foreground;
			for (uint16_t k = 0; k < se_size; k++) {
				for (uint16_t l = 0; l < se_size; l++) {
<<<<<<< HEAD
 8003712:	3301      	adds	r3, #1
 8003714:	b29b      	uxth	r3, r3
 8003716:	2b04      	cmp	r3, #4
 8003718:	d81c      	bhi.n	8003754 <erosion+0x68>
					if (SE[k][l] == foreground) {
 800371a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800371e:	4471      	add	r1, lr
 8003720:	5cc9      	ldrb	r1, [r1, r3]
 8003722:	4561      	cmp	r1, ip
 8003724:	d1f5      	bne.n	8003712 <erosion+0x26>
						uint16_t x = i - k + se_size / 2;
 8003726:	1ab1      	subs	r1, r6, r2
 8003728:	b289      	uxth	r1, r1
 800372a:	3102      	adds	r1, #2
 800372c:	b289      	uxth	r1, r1
						uint16_t y = j - l + se_size / 2;
 800372e:	1ae0      	subs	r0, r4, r3
 8003730:	b280      	uxth	r0, r0
 8003732:	3002      	adds	r0, #2
 8003734:	b280      	uxth	r0, r0
						if (x >= 0 && x < map_width && y >= 0 && y < map_height) {
 8003736:	428d      	cmp	r5, r1
 8003738:	d9eb      	bls.n	8003712 <erosion+0x26>
 800373a:	4581      	cmp	r9, r0
 800373c:	d9e9      	bls.n	8003712 <erosion+0x26>
							min_value = min_value < WORLD[y][x] ? min_value : WORLD[y][x];
 800373e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80037d0 <erosion+0xe4>
 8003742:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
 8003746:	fb0b 8000 	mla	r0, fp, r0, r8
 800374a:	5c41      	ldrb	r1, [r0, r1]
 800374c:	458a      	cmp	sl, r1
 800374e:	bf28      	it	cs
 8003750:	468a      	movcs	sl, r1
 8003752:	e7de      	b.n	8003712 <erosion+0x26>
			for (uint16_t k = 0; k < se_size; k++) {
 8003754:	3201      	adds	r2, #1
 8003756:	b292      	uxth	r2, r2
 8003758:	2a04      	cmp	r2, #4
 800375a:	d801      	bhi.n	8003760 <erosion+0x74>
				for (uint16_t l = 0; l < se_size; l++) {
 800375c:	2300      	movs	r3, #0
 800375e:	e7da      	b.n	8003716 <erosion+0x2a>
=======
 800374a:	3301      	adds	r3, #1
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b04      	cmp	r3, #4
 8003750:	d81c      	bhi.n	800378c <erosion+0x68>
					if (SE[k][l] == foreground) {
 8003752:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003756:	4471      	add	r1, lr
 8003758:	5cc9      	ldrb	r1, [r1, r3]
 800375a:	4561      	cmp	r1, ip
 800375c:	d1f5      	bne.n	800374a <erosion+0x26>
						uint16_t x = i - k + se_size / 2;
 800375e:	1ab1      	subs	r1, r6, r2
 8003760:	b289      	uxth	r1, r1
 8003762:	3102      	adds	r1, #2
 8003764:	b289      	uxth	r1, r1
						uint16_t y = j - l + se_size / 2;
 8003766:	1ae0      	subs	r0, r4, r3
 8003768:	b280      	uxth	r0, r0
 800376a:	3002      	adds	r0, #2
 800376c:	b280      	uxth	r0, r0
						if (x >= 0 && x < map_width && y >= 0 && y < map_height) {
 800376e:	428d      	cmp	r5, r1
 8003770:	d9eb      	bls.n	800374a <erosion+0x26>
 8003772:	4581      	cmp	r9, r0
 8003774:	d9e9      	bls.n	800374a <erosion+0x26>
							min_value = min_value < WORLD[y][x] ? min_value : WORLD[y][x];
 8003776:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8003808 <erosion+0xe4>
 800377a:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
 800377e:	fb0b 8000 	mla	r0, fp, r0, r8
 8003782:	5c41      	ldrb	r1, [r0, r1]
 8003784:	458a      	cmp	sl, r1
 8003786:	bf28      	it	cs
 8003788:	468a      	movcs	sl, r1
 800378a:	e7de      	b.n	800374a <erosion+0x26>
			for (uint16_t k = 0; k < se_size; k++) {
 800378c:	3201      	adds	r2, #1
 800378e:	b292      	uxth	r2, r2
 8003790:	2a04      	cmp	r2, #4
 8003792:	d801      	bhi.n	8003798 <erosion+0x74>
				for (uint16_t l = 0; l < se_size; l++) {
 8003794:	2300      	movs	r3, #0
 8003796:	e7da      	b.n	800374e <erosion+0x2a>
>>>>>>> render
						}
					}
				}
			}

			temp[j][i] = min_value;
<<<<<<< HEAD
 8003760:	fb05 f304 	mul.w	r3, r5, r4
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	440a      	add	r2, r1
 800376a:	f802 a003 	strb.w	sl, [r2, r3]
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
 800376e:	3401      	adds	r4, #1
 8003770:	b2a4      	uxth	r4, r4
 8003772:	454c      	cmp	r4, r9
 8003774:	d202      	bcs.n	800377c <erosion+0x90>
			uint8_t min_value = foreground;
 8003776:	46e2      	mov	sl, ip
			for (uint16_t k = 0; k < se_size; k++) {
 8003778:	2200      	movs	r2, #0
 800377a:	e7ed      	b.n	8003758 <erosion+0x6c>
	for (uint16_t i = 0; i < map_width; i++) {
 800377c:	3601      	adds	r6, #1
 800377e:	b2b6      	uxth	r6, r6
 8003780:	42ae      	cmp	r6, r5
 8003782:	d204      	bcs.n	800378e <erosion+0xa2>
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
 8003784:	607e      	str	r6, [r7, #4]
 8003786:	4b11      	ldr	r3, [pc, #68]	; (80037cc <erosion+0xe0>)
 8003788:	f833 4016 	ldrh.w	r4, [r3, r6, lsl #1]
 800378c:	e7f1      	b.n	8003772 <erosion+0x86>
=======
 8003798:	fb05 f304 	mul.w	r3, r5, r4
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	440a      	add	r2, r1
 80037a2:	f802 a003 	strb.w	sl, [r2, r3]
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
 80037a6:	3401      	adds	r4, #1
 80037a8:	b2a4      	uxth	r4, r4
 80037aa:	454c      	cmp	r4, r9
 80037ac:	d202      	bcs.n	80037b4 <erosion+0x90>
			uint8_t min_value = foreground;
 80037ae:	46e2      	mov	sl, ip
			for (uint16_t k = 0; k < se_size; k++) {
 80037b0:	2200      	movs	r2, #0
 80037b2:	e7ed      	b.n	8003790 <erosion+0x6c>
	for (uint16_t i = 0; i < map_width; i++) {
 80037b4:	3601      	adds	r6, #1
 80037b6:	b2b6      	uxth	r6, r6
 80037b8:	42ae      	cmp	r6, r5
 80037ba:	d204      	bcs.n	80037c6 <erosion+0xa2>
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
 80037bc:	607e      	str	r6, [r7, #4]
 80037be:	4b11      	ldr	r3, [pc, #68]	; (8003804 <erosion+0xe0>)
 80037c0:	f833 4016 	ldrh.w	r4, [r3, r6, lsl #1]
 80037c4:	e7f1      	b.n	80037aa <erosion+0x86>
>>>>>>> render
		}
	}

	for (uint16_t i = 0; i < map_width; i++) {
<<<<<<< HEAD
 800378e:	2600      	movs	r6, #0
 8003790:	f8d7 c000 	ldr.w	ip, [r7]
 8003794:	e00f      	b.n	80037b6 <erosion+0xca>
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
			WORLD[j][i] = temp[j][i];
 8003796:	fb05 f203 	mul.w	r2, r5, r3
 800379a:	eb0c 0001 	add.w	r0, ip, r1
 800379e:	5c80      	ldrb	r0, [r0, r2]
 80037a0:	4a0b      	ldr	r2, [pc, #44]	; (80037d0 <erosion+0xe4>)
 80037a2:	24c8      	movs	r4, #200	; 0xc8
 80037a4:	fb04 2203 	mla	r2, r4, r3, r2
 80037a8:	5450      	strb	r0, [r2, r1]
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
 80037aa:	3301      	adds	r3, #1
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	454b      	cmp	r3, r9
 80037b0:	d3f1      	bcc.n	8003796 <erosion+0xaa>
	for (uint16_t i = 0; i < map_width; i++) {
 80037b2:	3601      	adds	r6, #1
 80037b4:	b2b6      	uxth	r6, r6
 80037b6:	42ae      	cmp	r6, r5
 80037b8:	d204      	bcs.n	80037c4 <erosion+0xd8>
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
 80037ba:	4631      	mov	r1, r6
 80037bc:	4b03      	ldr	r3, [pc, #12]	; (80037cc <erosion+0xe0>)
 80037be:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 80037c2:	e7f4      	b.n	80037ae <erosion+0xc2>
		}
	}
}
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037cc:	20003f24 	.word	0x20003f24
 80037d0:	20005538 	.word	0x20005538

080037d4 <dilation>:

void dilation(uint8_t SE[SE_SIZE_DILATION][SE_SIZE_DILATION], uint16_t map_width, uint16_t map_height, uint8_t dirt, uint8_t foreground) {
 80037d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037d8:	b085      	sub	sp, #20
 80037da:	af00      	add	r7, sp, #0
 80037dc:	4604      	mov	r4, r0
 80037de:	460e      	mov	r6, r1
 80037e0:	4692      	mov	sl, r2
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	f897 5038 	ldrb.w	r5, [r7, #56]	; 0x38
=======
 80037c6:	2600      	movs	r6, #0
 80037c8:	f8d7 c000 	ldr.w	ip, [r7]
 80037cc:	e00f      	b.n	80037ee <erosion+0xca>
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
			WORLD[j][i] = temp[j][i];
 80037ce:	fb05 f203 	mul.w	r2, r5, r3
 80037d2:	eb0c 0001 	add.w	r0, ip, r1
 80037d6:	5c80      	ldrb	r0, [r0, r2]
 80037d8:	4a0b      	ldr	r2, [pc, #44]	; (8003808 <erosion+0xe4>)
 80037da:	24c8      	movs	r4, #200	; 0xc8
 80037dc:	fb04 2203 	mla	r2, r4, r3, r2
 80037e0:	5450      	strb	r0, [r2, r1]
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
 80037e2:	3301      	adds	r3, #1
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	454b      	cmp	r3, r9
 80037e8:	d3f1      	bcc.n	80037ce <erosion+0xaa>
	for (uint16_t i = 0; i < map_width; i++) {
 80037ea:	3601      	adds	r6, #1
 80037ec:	b2b6      	uxth	r6, r6
 80037ee:	42ae      	cmp	r6, r5
 80037f0:	d204      	bcs.n	80037fc <erosion+0xd8>
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
 80037f2:	4631      	mov	r1, r6
 80037f4:	4b03      	ldr	r3, [pc, #12]	; (8003804 <erosion+0xe0>)
 80037f6:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 80037fa:	e7f4      	b.n	80037e6 <erosion+0xc2>
		}
	}
}
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003804:	20004f14 	.word	0x20004f14
 8003808:	20006528 	.word	0x20006528

0800380c <dilation>:

void dilation(uint8_t SE[SE_SIZE_DILATION][SE_SIZE_DILATION], uint16_t map_width, uint16_t map_height, uint8_t dirt, uint8_t foreground) {
 800380c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003810:	b085      	sub	sp, #20
 8003812:	af00      	add	r7, sp, #0
 8003814:	4604      	mov	r4, r0
 8003816:	460e      	mov	r6, r1
 8003818:	4692      	mov	sl, r2
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	f897 5038 	ldrb.w	r5, [r7, #56]	; 0x38
>>>>>>> render

	uint8_t se_size = SE_SIZE_DILATION;

	uint8_t temp[map_height][map_width];
<<<<<<< HEAD
 80037e8:	fb01 f302 	mul.w	r3, r1, r2
 80037ec:	3307      	adds	r3, #7
 80037ee:	f023 0307 	bic.w	r3, r3, #7
 80037f2:	ebad 0d03 	sub.w	sp, sp, r3
 80037f6:	46eb      	mov	fp, sp

	uint8_t depth = rand() % 5 + 5;
 80037f8:	f00b fe7e 	bl	800f4f8 <rand>
 80037fc:	4942      	ldr	r1, [pc, #264]	; (8003908 <dilation+0x134>)
 80037fe:	fb81 3100 	smull	r3, r1, r1, r0
 8003802:	17c3      	asrs	r3, r0, #31
 8003804:	ebc3 0361 	rsb	r3, r3, r1, asr #1
 8003808:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800380c:	1ac3      	subs	r3, r0, r3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	3305      	adds	r3, #5
 8003812:	b2db      	uxtb	r3, r3

	for (uint16_t i = 0; i < map_width; i++) {
 8003814:	f04f 0e00 	mov.w	lr, #0
 8003818:	f8c7 b004 	str.w	fp, [r7, #4]
 800381c:	469b      	mov	fp, r3
 800381e:	e048      	b.n	80038b2 <dilation+0xde>
=======
 8003820:	fb01 f302 	mul.w	r3, r1, r2
 8003824:	3307      	adds	r3, #7
 8003826:	f023 0307 	bic.w	r3, r3, #7
 800382a:	ebad 0d03 	sub.w	sp, sp, r3
 800382e:	46eb      	mov	fp, sp

	uint8_t depth = rand() % 5 + 5;
 8003830:	f00b fd96 	bl	800f360 <rand>
 8003834:	4942      	ldr	r1, [pc, #264]	; (8003940 <dilation+0x134>)
 8003836:	fb81 3100 	smull	r3, r1, r1, r0
 800383a:	17c3      	asrs	r3, r0, #31
 800383c:	ebc3 0361 	rsb	r3, r3, r1, asr #1
 8003840:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003844:	1ac3      	subs	r3, r0, r3
 8003846:	b2db      	uxtb	r3, r3
 8003848:	3305      	adds	r3, #5
 800384a:	b2db      	uxtb	r3, r3

	for (uint16_t i = 0; i < map_width; i++) {
 800384c:	f04f 0e00 	mov.w	lr, #0
 8003850:	f8c7 b004 	str.w	fp, [r7, #4]
 8003854:	469b      	mov	fp, r3
 8003856:	e048      	b.n	80038ea <dilation+0xde>
>>>>>>> render
		for (uint16_t j = LVL1_HMAP[i] + depth; j < map_height; j++) {
			uint8_t max_value = dirt;
			for (uint16_t k = 0; k < se_size; k++) {
				for (uint16_t l = 0; l < se_size; l++) {
<<<<<<< HEAD
 8003820:	3301      	adds	r3, #1
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d825      	bhi.n	8003874 <dilation+0xa0>
					if (SE[k][l] == foreground) {
 8003828:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800382c:	4421      	add	r1, r4
 800382e:	5cc9      	ldrb	r1, [r1, r3]
 8003830:	42a9      	cmp	r1, r5
 8003832:	d1f5      	bne.n	8003820 <dilation+0x4c>
						uint16_t x = i - k + se_size / 2;
 8003834:	ebae 0102 	sub.w	r1, lr, r2
 8003838:	b289      	uxth	r1, r1
 800383a:	3101      	adds	r1, #1
 800383c:	fa1f f881 	uxth.w	r8, r1
						uint16_t y = j - l + se_size / 2;
 8003840:	ebac 0103 	sub.w	r1, ip, r3
 8003844:	b289      	uxth	r1, r1
 8003846:	3101      	adds	r1, #1
 8003848:	b289      	uxth	r1, r1
						if (x >= 0 && x < map_width && y > GROUND_SKY_RATIO + depth && y < map_height) {
 800384a:	4546      	cmp	r6, r8
 800384c:	d9e8      	bls.n	8003820 <dilation+0x4c>
 800384e:	f10b 0050 	add.w	r0, fp, #80	; 0x50
 8003852:	4281      	cmp	r1, r0
 8003854:	dde4      	ble.n	8003820 <dilation+0x4c>
 8003856:	458a      	cmp	sl, r1
 8003858:	d9e2      	bls.n	8003820 <dilation+0x4c>
							max_value = max_value > WORLD[y][x] ? max_value : WORLD[y][x];
 800385a:	482c      	ldr	r0, [pc, #176]	; (800390c <dilation+0x138>)
 800385c:	f04f 09c8 	mov.w	r9, #200	; 0xc8
 8003860:	fb09 0101 	mla	r1, r9, r1, r0
 8003864:	f811 1008 	ldrb.w	r1, [r1, r8]
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	4288      	cmp	r0, r1
 800386c:	bf38      	it	cc
 800386e:	4608      	movcc	r0, r1
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	e7d5      	b.n	8003820 <dilation+0x4c>
			for (uint16_t k = 0; k < se_size; k++) {
 8003874:	f8d7 900c 	ldr.w	r9, [r7, #12]
 8003878:	3201      	adds	r2, #1
 800387a:	b292      	uxth	r2, r2
 800387c:	2a02      	cmp	r2, #2
 800387e:	d803      	bhi.n	8003888 <dilation+0xb4>
				for (uint16_t l = 0; l < se_size; l++) {
 8003880:	2300      	movs	r3, #0
 8003882:	f8c7 900c 	str.w	r9, [r7, #12]
 8003886:	e7cd      	b.n	8003824 <dilation+0x50>
=======
 8003858:	3301      	adds	r3, #1
 800385a:	b29b      	uxth	r3, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d825      	bhi.n	80038ac <dilation+0xa0>
					if (SE[k][l] == foreground) {
 8003860:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8003864:	4421      	add	r1, r4
 8003866:	5cc9      	ldrb	r1, [r1, r3]
 8003868:	42a9      	cmp	r1, r5
 800386a:	d1f5      	bne.n	8003858 <dilation+0x4c>
						uint16_t x = i - k + se_size / 2;
 800386c:	ebae 0102 	sub.w	r1, lr, r2
 8003870:	b289      	uxth	r1, r1
 8003872:	3101      	adds	r1, #1
 8003874:	fa1f f881 	uxth.w	r8, r1
						uint16_t y = j - l + se_size / 2;
 8003878:	ebac 0103 	sub.w	r1, ip, r3
 800387c:	b289      	uxth	r1, r1
 800387e:	3101      	adds	r1, #1
 8003880:	b289      	uxth	r1, r1
						if (x >= 0 && x < map_width && y > GROUND_SKY_RATIO + depth && y < map_height) {
 8003882:	4546      	cmp	r6, r8
 8003884:	d9e8      	bls.n	8003858 <dilation+0x4c>
 8003886:	f10b 0050 	add.w	r0, fp, #80	; 0x50
 800388a:	4281      	cmp	r1, r0
 800388c:	dde4      	ble.n	8003858 <dilation+0x4c>
 800388e:	458a      	cmp	sl, r1
 8003890:	d9e2      	bls.n	8003858 <dilation+0x4c>
							max_value = max_value > WORLD[y][x] ? max_value : WORLD[y][x];
 8003892:	482c      	ldr	r0, [pc, #176]	; (8003944 <dilation+0x138>)
 8003894:	f04f 09c8 	mov.w	r9, #200	; 0xc8
 8003898:	fb09 0101 	mla	r1, r9, r1, r0
 800389c:	f811 1008 	ldrb.w	r1, [r1, r8]
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	4288      	cmp	r0, r1
 80038a4:	bf38      	it	cc
 80038a6:	4608      	movcc	r0, r1
 80038a8:	60f8      	str	r0, [r7, #12]
 80038aa:	e7d5      	b.n	8003858 <dilation+0x4c>
			for (uint16_t k = 0; k < se_size; k++) {
 80038ac:	f8d7 900c 	ldr.w	r9, [r7, #12]
 80038b0:	3201      	adds	r2, #1
 80038b2:	b292      	uxth	r2, r2
 80038b4:	2a02      	cmp	r2, #2
 80038b6:	d803      	bhi.n	80038c0 <dilation+0xb4>
				for (uint16_t l = 0; l < se_size; l++) {
 80038b8:	2300      	movs	r3, #0
 80038ba:	f8c7 900c 	str.w	r9, [r7, #12]
 80038be:	e7cd      	b.n	800385c <dilation+0x50>
>>>>>>> render
						}
					}
				}
			}

			temp[j][i] = max_value;
<<<<<<< HEAD
 8003888:	fb06 f30c 	mul.w	r3, r6, ip
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	440a      	add	r2, r1
 8003892:	f802 9003 	strb.w	r9, [r2, r3]
		for (uint16_t j = LVL1_HMAP[i] + depth; j < map_height; j++) {
 8003896:	f10c 0c01 	add.w	ip, ip, #1
 800389a:	fa1f fc8c 	uxth.w	ip, ip
 800389e:	45d4      	cmp	ip, sl
 80038a0:	d203      	bcs.n	80038aa <dilation+0xd6>
			uint8_t max_value = dirt;
 80038a2:	f8d7 9000 	ldr.w	r9, [r7]
			for (uint16_t k = 0; k < se_size; k++) {
 80038a6:	2200      	movs	r2, #0
 80038a8:	e7e8      	b.n	800387c <dilation+0xa8>
	for (uint16_t i = 0; i < map_width; i++) {
 80038aa:	f10e 0e01 	add.w	lr, lr, #1
 80038ae:	fa1f fe8e 	uxth.w	lr, lr
 80038b2:	45b6      	cmp	lr, r6
 80038b4:	d208      	bcs.n	80038c8 <dilation+0xf4>
		for (uint16_t j = LVL1_HMAP[i] + depth; j < map_height; j++) {
 80038b6:	f8c7 e008 	str.w	lr, [r7, #8]
 80038ba:	4b15      	ldr	r3, [pc, #84]	; (8003910 <dilation+0x13c>)
 80038bc:	f833 c01e 	ldrh.w	ip, [r3, lr, lsl #1]
 80038c0:	44dc      	add	ip, fp
 80038c2:	fa1f fc8c 	uxth.w	ip, ip
 80038c6:	e7ea      	b.n	800389e <dilation+0xca>
=======
 80038c0:	fb06 f30c 	mul.w	r3, r6, ip
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	68b9      	ldr	r1, [r7, #8]
 80038c8:	440a      	add	r2, r1
 80038ca:	f802 9003 	strb.w	r9, [r2, r3]
		for (uint16_t j = LVL1_HMAP[i] + depth; j < map_height; j++) {
 80038ce:	f10c 0c01 	add.w	ip, ip, #1
 80038d2:	fa1f fc8c 	uxth.w	ip, ip
 80038d6:	45d4      	cmp	ip, sl
 80038d8:	d203      	bcs.n	80038e2 <dilation+0xd6>
			uint8_t max_value = dirt;
 80038da:	f8d7 9000 	ldr.w	r9, [r7]
			for (uint16_t k = 0; k < se_size; k++) {
 80038de:	2200      	movs	r2, #0
 80038e0:	e7e8      	b.n	80038b4 <dilation+0xa8>
	for (uint16_t i = 0; i < map_width; i++) {
 80038e2:	f10e 0e01 	add.w	lr, lr, #1
 80038e6:	fa1f fe8e 	uxth.w	lr, lr
 80038ea:	45b6      	cmp	lr, r6
 80038ec:	d208      	bcs.n	8003900 <dilation+0xf4>
		for (uint16_t j = LVL1_HMAP[i] + depth; j < map_height; j++) {
 80038ee:	f8c7 e008 	str.w	lr, [r7, #8]
 80038f2:	4b15      	ldr	r3, [pc, #84]	; (8003948 <dilation+0x13c>)
 80038f4:	f833 c01e 	ldrh.w	ip, [r3, lr, lsl #1]
 80038f8:	44dc      	add	ip, fp
 80038fa:	fa1f fc8c 	uxth.w	ip, ip
 80038fe:	e7ea      	b.n	80038d6 <dilation+0xca>
>>>>>>> render
		}
	}

	for (uint16_t i = 0; i < map_width; i++) {
<<<<<<< HEAD
 80038c8:	f8d7 b004 	ldr.w	fp, [r7, #4]
 80038cc:	2500      	movs	r5, #0
 80038ce:	e00f      	b.n	80038f0 <dilation+0x11c>
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
			WORLD[j][i] = temp[j][i];
 80038d0:	fb06 f203 	mul.w	r2, r6, r3
 80038d4:	eb0b 0001 	add.w	r0, fp, r1
 80038d8:	5c80      	ldrb	r0, [r0, r2]
 80038da:	4a0c      	ldr	r2, [pc, #48]	; (800390c <dilation+0x138>)
 80038dc:	24c8      	movs	r4, #200	; 0xc8
 80038de:	fb04 2203 	mla	r2, r4, r3, r2
 80038e2:	5450      	strb	r0, [r2, r1]
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
 80038e4:	3301      	adds	r3, #1
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	4553      	cmp	r3, sl
 80038ea:	d3f1      	bcc.n	80038d0 <dilation+0xfc>
	for (uint16_t i = 0; i < map_width; i++) {
 80038ec:	3501      	adds	r5, #1
 80038ee:	b2ad      	uxth	r5, r5
 80038f0:	42b5      	cmp	r5, r6
 80038f2:	d204      	bcs.n	80038fe <dilation+0x12a>
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
 80038f4:	4629      	mov	r1, r5
 80038f6:	4b06      	ldr	r3, [pc, #24]	; (8003910 <dilation+0x13c>)
 80038f8:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 80038fc:	e7f4      	b.n	80038e8 <dilation+0x114>
		}
	}
}
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003906:	bf00      	nop
 8003908:	66666667 	.word	0x66666667
 800390c:	20005538 	.word	0x20005538
 8003910:	20003f24 	.word	0x20003f24

08003914 <shape_caves_with_morphological_operations>:
void shape_caves_with_morphological_operations(uint8_t dirt, uint8_t foreground) {
 8003914:	b530      	push	{r4, r5, lr}
 8003916:	b08d      	sub	sp, #52	; 0x34
 8003918:	4605      	mov	r5, r0
 800391a:	460c      	mov	r4, r1
	for (uint8_t i = 0; i < SE_SIZE_EROSION; i++) {
 800391c:	f04f 0e00 	mov.w	lr, #0
 8003920:	e015      	b.n	800394e <shape_caves_with_morphological_operations+0x3a>
			if ((i < SE_SIZE_EROSION/3 || i > 2*SE_SIZE_EROSION/3) && (j < SE_SIZE_EROSION/3 || j > 2*SE_SIZE_EROSION/3)) {
 8003922:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d815      	bhi.n	8003958 <shape_caves_with_morphological_operations+0x44>
				EROSION_SE[i][j] = foreground;
 800392c:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
 8003930:	f10c 0330 	add.w	r3, ip, #48	; 0x30
 8003934:	eb0d 0c03 	add.w	ip, sp, r3
 8003938:	4494      	add	ip, r2
 800393a:	f80c 4c1c 	strb.w	r4, [ip, #-28]
		for (uint8_t j = 0; j < SE_SIZE_EROSION; j++) {
 800393e:	3201      	adds	r2, #1
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	2a04      	cmp	r2, #4
 8003944:	d9ed      	bls.n	8003922 <shape_caves_with_morphological_operations+0xe>
	for (uint8_t i = 0; i < SE_SIZE_EROSION; i++) {
 8003946:	f10e 0e01 	add.w	lr, lr, #1
 800394a:	fa5f fe8e 	uxtb.w	lr, lr
 800394e:	f1be 0f04 	cmp.w	lr, #4
 8003952:	d80d      	bhi.n	8003970 <shape_caves_with_morphological_operations+0x5c>
		for (uint8_t j = 0; j < SE_SIZE_EROSION; j++) {
 8003954:	2200      	movs	r2, #0
 8003956:	e7f4      	b.n	8003942 <shape_caves_with_morphological_operations+0x2e>
			if ((i < SE_SIZE_EROSION/3 || i > 2*SE_SIZE_EROSION/3) && (j < SE_SIZE_EROSION/3 || j > 2*SE_SIZE_EROSION/3)) {
 8003958:	1e53      	subs	r3, r2, #1
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d9e5      	bls.n	800392c <shape_caves_with_morphological_operations+0x18>
				EROSION_SE[i][j] = dirt;
 8003960:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 8003964:	3330      	adds	r3, #48	; 0x30
 8003966:	446b      	add	r3, sp
 8003968:	4413      	add	r3, r2
 800396a:	f803 5c1c 	strb.w	r5, [r3, #-28]
 800396e:	e7e6      	b.n	800393e <shape_caves_with_morphological_operations+0x2a>
	for (uint8_t i = 0; i < SE_SIZE_DILATION; i++) {
 8003970:	2100      	movs	r1, #0
 8003972:	e010      	b.n	8003996 <shape_caves_with_morphological_operations+0x82>
			if ((i < SE_SIZE_DILATION/3 || i > 2*SE_SIZE_DILATION/3) && (j < SE_SIZE_DILATION/3 || j > 2*SE_SIZE_DILATION/3)) {
 8003974:	1e4a      	subs	r2, r1, #1
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	2a01      	cmp	r2, #1
 800397a:	d810      	bhi.n	800399e <shape_caves_with_morphological_operations+0x8a>
				DILATION_SE[i][j] = foreground;
 800397c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8003980:	3230      	adds	r2, #48	; 0x30
 8003982:	446a      	add	r2, sp
 8003984:	441a      	add	r2, r3
 8003986:	f802 4c28 	strb.w	r4, [r2, #-40]
		for (uint8_t j = 0; j < SE_SIZE_DILATION; j++) {
 800398a:	3301      	adds	r3, #1
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d9f0      	bls.n	8003974 <shape_caves_with_morphological_operations+0x60>
	for (uint8_t i = 0; i < SE_SIZE_DILATION; i++) {
 8003992:	3101      	adds	r1, #1
 8003994:	b2c9      	uxtb	r1, r1
 8003996:	2902      	cmp	r1, #2
 8003998:	d80d      	bhi.n	80039b6 <shape_caves_with_morphological_operations+0xa2>
		for (uint8_t j = 0; j < SE_SIZE_DILATION; j++) {
 800399a:	2300      	movs	r3, #0
 800399c:	e7f7      	b.n	800398e <shape_caves_with_morphological_operations+0x7a>
			if ((i < SE_SIZE_DILATION/3 || i > 2*SE_SIZE_DILATION/3) && (j < SE_SIZE_DILATION/3 || j > 2*SE_SIZE_DILATION/3)) {
 800399e:	1e5a      	subs	r2, r3, #1
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	2a01      	cmp	r2, #1
 80039a4:	d9ea      	bls.n	800397c <shape_caves_with_morphological_operations+0x68>
				DILATION_SE[i][j] = dirt;
 80039a6:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80039aa:	3230      	adds	r2, #48	; 0x30
 80039ac:	446a      	add	r2, sp
 80039ae:	441a      	add	r2, r3
 80039b0:	f802 5c28 	strb.w	r5, [r2, #-40]
 80039b4:	e7e9      	b.n	800398a <shape_caves_with_morphological_operations+0x76>
	if (foreground == cave) {
 80039b6:	2ccc      	cmp	r4, #204	; 0xcc
 80039b8:	d01d      	beq.n	80039f6 <shape_caves_with_morphological_operations+0xe2>
		dilation(DILATION_SE, width, height, dirt, foreground);
 80039ba:	9400      	str	r4, [sp, #0]
 80039bc:	462b      	mov	r3, r5
 80039be:	22f0      	movs	r2, #240	; 0xf0
 80039c0:	21c8      	movs	r1, #200	; 0xc8
 80039c2:	a802      	add	r0, sp, #8
 80039c4:	f7ff ff06 	bl	80037d4 <dilation>
		dilation(DILATION_SE, width, height, dirt, foreground);
 80039c8:	9400      	str	r4, [sp, #0]
 80039ca:	462b      	mov	r3, r5
 80039cc:	22f0      	movs	r2, #240	; 0xf0
 80039ce:	21c8      	movs	r1, #200	; 0xc8
 80039d0:	a802      	add	r0, sp, #8
 80039d2:	f7ff feff 	bl	80037d4 <dilation>
		dilation(DILATION_SE, width, height, dirt, foreground);
 80039d6:	9400      	str	r4, [sp, #0]
 80039d8:	462b      	mov	r3, r5
 80039da:	22f0      	movs	r2, #240	; 0xf0
 80039dc:	21c8      	movs	r1, #200	; 0xc8
 80039de:	a802      	add	r0, sp, #8
 80039e0:	f7ff fef8 	bl	80037d4 <dilation>
		dilation(DILATION_SE, width, height, dirt, foreground);
 80039e4:	9400      	str	r4, [sp, #0]
 80039e6:	462b      	mov	r3, r5
 80039e8:	22f0      	movs	r2, #240	; 0xf0
 80039ea:	21c8      	movs	r1, #200	; 0xc8
 80039ec:	a802      	add	r0, sp, #8
 80039ee:	f7ff fef1 	bl	80037d4 <dilation>
}
 80039f2:	b00d      	add	sp, #52	; 0x34
 80039f4:	bd30      	pop	{r4, r5, pc}
		dilation(DILATION_SE, width, height, dirt, foreground);
 80039f6:	9400      	str	r4, [sp, #0]
 80039f8:	462b      	mov	r3, r5
 80039fa:	22f0      	movs	r2, #240	; 0xf0
 80039fc:	21c8      	movs	r1, #200	; 0xc8
 80039fe:	a802      	add	r0, sp, #8
 8003a00:	f7ff fee8 	bl	80037d4 <dilation>
		erosion(EROSION_SE, width, height, foreground);
 8003a04:	4623      	mov	r3, r4
 8003a06:	22f0      	movs	r2, #240	; 0xf0
 8003a08:	21c8      	movs	r1, #200	; 0xc8
 8003a0a:	a805      	add	r0, sp, #20
 8003a0c:	f7ff fe6e 	bl	80036ec <erosion>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003a10:	9400      	str	r4, [sp, #0]
 8003a12:	462b      	mov	r3, r5
 8003a14:	22f0      	movs	r2, #240	; 0xf0
 8003a16:	21c8      	movs	r1, #200	; 0xc8
 8003a18:	a802      	add	r0, sp, #8
 8003a1a:	f7ff fedb 	bl	80037d4 <dilation>
		erosion(EROSION_SE, width, height, foreground);
 8003a1e:	4623      	mov	r3, r4
 8003a20:	22f0      	movs	r2, #240	; 0xf0
 8003a22:	21c8      	movs	r1, #200	; 0xc8
 8003a24:	a805      	add	r0, sp, #20
 8003a26:	f7ff fe61 	bl	80036ec <erosion>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003a2a:	9400      	str	r4, [sp, #0]
 8003a2c:	462b      	mov	r3, r5
 8003a2e:	22f0      	movs	r2, #240	; 0xf0
 8003a30:	21c8      	movs	r1, #200	; 0xc8
 8003a32:	a802      	add	r0, sp, #8
 8003a34:	f7ff fece 	bl	80037d4 <dilation>
		erosion(EROSION_SE, width, height, foreground);
 8003a38:	4623      	mov	r3, r4
 8003a3a:	22f0      	movs	r2, #240	; 0xf0
 8003a3c:	21c8      	movs	r1, #200	; 0xc8
 8003a3e:	a805      	add	r0, sp, #20
 8003a40:	f7ff fe54 	bl	80036ec <erosion>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003a44:	9400      	str	r4, [sp, #0]
 8003a46:	462b      	mov	r3, r5
 8003a48:	22f0      	movs	r2, #240	; 0xf0
 8003a4a:	21c8      	movs	r1, #200	; 0xc8
 8003a4c:	a802      	add	r0, sp, #8
 8003a4e:	f7ff fec1 	bl	80037d4 <dilation>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003a52:	9400      	str	r4, [sp, #0]
 8003a54:	462b      	mov	r3, r5
 8003a56:	22f0      	movs	r2, #240	; 0xf0
 8003a58:	21c8      	movs	r1, #200	; 0xc8
 8003a5a:	a802      	add	r0, sp, #8
 8003a5c:	f7ff feba 	bl	80037d4 <dilation>
 8003a60:	e7c7      	b.n	80039f2 <shape_caves_with_morphological_operations+0xde>
	...

08003a64 <place_lava>:
void place_lava() {
 8003a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	srand(time(NULL));
 8003a66:	2000      	movs	r0, #0
 8003a68:	f00c fc66 	bl	8010338 <time>
 8003a6c:	f00b fd16 	bl	800f49c <srand>
	uint8_t lava_blob_radius = rand() % 3;
 8003a70:	f00b fd42 	bl	800f4f8 <rand>
 8003a74:	4f1f      	ldr	r7, [pc, #124]	; (8003af4 <place_lava+0x90>)
 8003a76:	fb87 2700 	smull	r2, r7, r7, r0
 8003a7a:	eba7 77e0 	sub.w	r7, r7, r0, asr #31
 8003a7e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8003a82:	1bc7      	subs	r7, r0, r7
 8003a84:	b2ff      	uxtb	r7, r7
	for (cell_c i = 0; i < WORLD_WIDTH_CELLS; i++) {
 8003a86:	2500      	movs	r5, #0
 8003a88:	e026      	b.n	8003ad8 <place_lava+0x74>
				draw_blob(i, j, lava_blob_radius, lava_block);
 8003a8a:	2388      	movs	r3, #136	; 0x88
 8003a8c:	463a      	mov	r2, r7
 8003a8e:	4621      	mov	r1, r4
 8003a90:	4628      	mov	r0, r5
 8003a92:	f7ff fbe7 	bl	8003264 <draw_blob>
 8003a96:	e014      	b.n	8003ac2 <place_lava+0x5e>
		for (uint16_t j = starting_depth; j < WORLD_HEIGHT_CELLS; j++) {
 8003a98:	3401      	adds	r4, #1
 8003a9a:	b2a4      	uxth	r4, r4
 8003a9c:	2cef      	cmp	r4, #239	; 0xef
 8003a9e:	d819      	bhi.n	8003ad4 <place_lava+0x70>
			if ((float) rand() / (float) (RAND_MAX / 100) < chance_of_lava) { // && WORLD[j][i] & 0xF0 != _dirt_bg) {
 8003aa0:	f00b fd2a 	bl	800f4f8 <rand>
 8003aa4:	ee07 0a90 	vmov	s15, r0
 8003aa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aac:	eddf 6a12 	vldr	s13, [pc, #72]	; 8003af8 <place_lava+0x94>
 8003ab0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003ab4:	eddf 7a11 	vldr	s15, [pc, #68]	; 8003afc <place_lava+0x98>
 8003ab8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac0:	d4e3      	bmi.n	8003a8a <place_lava+0x26>
			if (j >= WORLD_HEIGHT_CELLS - 2) {
 8003ac2:	2ced      	cmp	r4, #237	; 0xed
 8003ac4:	d9e8      	bls.n	8003a98 <place_lava+0x34>
				WORLD[j][i] = lava_block;
 8003ac6:	4b0e      	ldr	r3, [pc, #56]	; (8003b00 <place_lava+0x9c>)
 8003ac8:	22c8      	movs	r2, #200	; 0xc8
 8003aca:	fb02 3304 	mla	r3, r2, r4, r3
 8003ace:	2288      	movs	r2, #136	; 0x88
 8003ad0:	559a      	strb	r2, [r3, r6]
 8003ad2:	e7e1      	b.n	8003a98 <place_lava+0x34>
	for (cell_c i = 0; i < WORLD_WIDTH_CELLS; i++) {
 8003ad4:	3501      	adds	r5, #1
 8003ad6:	b2ad      	uxth	r5, r5
 8003ad8:	2dc7      	cmp	r5, #199	; 0xc7
 8003ada:	d806      	bhi.n	8003aea <place_lava+0x86>
		cell_c starting_depth = LVL1_HMAP[2*i] + 10;
 8003adc:	462e      	mov	r6, r5
 8003ade:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <place_lava+0xa0>)
 8003ae0:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8003ae4:	340a      	adds	r4, #10
 8003ae6:	b2a4      	uxth	r4, r4
		for (uint16_t j = starting_depth; j < WORLD_HEIGHT_CELLS; j++) {
 8003ae8:	e7d8      	b.n	8003a9c <place_lava+0x38>
	shape_caves_with_morphological_operations(dirt_block, lava_block);
 8003aea:	2188      	movs	r1, #136	; 0x88
 8003aec:	2011      	movs	r0, #17
 8003aee:	f7ff ff11 	bl	8003914 <shape_caves_with_morphological_operations>
}
 8003af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003af4:	55555556 	.word	0x55555556
 8003af8:	4ba3d70a 	.word	0x4ba3d70a
 8003afc:	3dcccccd 	.word	0x3dcccccd
 8003b00:	20005538 	.word	0x20005538
 8003b04:	20003f24 	.word	0x20003f24

08003b08 <filter_level>:

void filter_level(uint16_t array_size, uint8_t kernel_width, uint8_t sigma, bool only_sharp_edges) {
 8003b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b0c:	ed2d 8b04 	vpush	{d8-d9}
 8003b10:	b083      	sub	sp, #12
 8003b12:	4607      	mov	r7, r0
 8003b14:	460c      	mov	r4, r1
 8003b16:	4615      	mov	r5, r2
 8003b18:	4699      	mov	r9, r3
	int8_t* result = malloc(array_size);
 8003b1a:	f00a fd4d 	bl	800e5b8 <malloc>
 8003b1e:	4683      	mov	fp, r0

	float* filter = gauss_kernel(kernel_width, sigma);
 8003b20:	4629      	mov	r1, r5
 8003b22:	4620      	mov	r0, r4
 8003b24:	f7ff fd88 	bl	8003638 <gauss_kernel>
 8003b28:	4682      	mov	sl, r0


	for (uint16_t i = 0; i < array_size; i++) {
 8003b2a:	2500      	movs	r5, #0
 8003b2c:	e03f      	b.n	8003bae <filter_level+0xa6>
=======
 8003900:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8003904:	2500      	movs	r5, #0
 8003906:	e00f      	b.n	8003928 <dilation+0x11c>
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
			WORLD[j][i] = temp[j][i];
 8003908:	fb06 f203 	mul.w	r2, r6, r3
 800390c:	eb0b 0001 	add.w	r0, fp, r1
 8003910:	5c80      	ldrb	r0, [r0, r2]
 8003912:	4a0c      	ldr	r2, [pc, #48]	; (8003944 <dilation+0x138>)
 8003914:	24c8      	movs	r4, #200	; 0xc8
 8003916:	fb04 2203 	mla	r2, r4, r3, r2
 800391a:	5450      	strb	r0, [r2, r1]
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
 800391c:	3301      	adds	r3, #1
 800391e:	b29b      	uxth	r3, r3
 8003920:	4553      	cmp	r3, sl
 8003922:	d3f1      	bcc.n	8003908 <dilation+0xfc>
	for (uint16_t i = 0; i < map_width; i++) {
 8003924:	3501      	adds	r5, #1
 8003926:	b2ad      	uxth	r5, r5
 8003928:	42b5      	cmp	r5, r6
 800392a:	d204      	bcs.n	8003936 <dilation+0x12a>
		for (uint16_t j = LVL1_HMAP[i]; j < map_height; j++) {
 800392c:	4629      	mov	r1, r5
 800392e:	4b06      	ldr	r3, [pc, #24]	; (8003948 <dilation+0x13c>)
 8003930:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8003934:	e7f4      	b.n	8003920 <dilation+0x114>
		}
	}
}
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800393e:	bf00      	nop
 8003940:	66666667 	.word	0x66666667
 8003944:	20006528 	.word	0x20006528
 8003948:	20004f14 	.word	0x20004f14

0800394c <shape_caves_with_morphological_operations>:
void shape_caves_with_morphological_operations(uint8_t dirt, uint8_t foreground) {
 800394c:	b530      	push	{r4, r5, lr}
 800394e:	b08d      	sub	sp, #52	; 0x34
 8003950:	4605      	mov	r5, r0
 8003952:	460c      	mov	r4, r1
	for (uint8_t i = 0; i < SE_SIZE_EROSION; i++) {
 8003954:	f04f 0e00 	mov.w	lr, #0
 8003958:	e015      	b.n	8003986 <shape_caves_with_morphological_operations+0x3a>
			if ((i < SE_SIZE_EROSION/3 || i > 2*SE_SIZE_EROSION/3) && (j < SE_SIZE_EROSION/3 || j > 2*SE_SIZE_EROSION/3)) {
 800395a:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d815      	bhi.n	8003990 <shape_caves_with_morphological_operations+0x44>
				EROSION_SE[i][j] = foreground;
 8003964:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
 8003968:	f10c 0330 	add.w	r3, ip, #48	; 0x30
 800396c:	eb0d 0c03 	add.w	ip, sp, r3
 8003970:	4494      	add	ip, r2
 8003972:	f80c 4c1c 	strb.w	r4, [ip, #-28]
		for (uint8_t j = 0; j < SE_SIZE_EROSION; j++) {
 8003976:	3201      	adds	r2, #1
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	2a04      	cmp	r2, #4
 800397c:	d9ed      	bls.n	800395a <shape_caves_with_morphological_operations+0xe>
	for (uint8_t i = 0; i < SE_SIZE_EROSION; i++) {
 800397e:	f10e 0e01 	add.w	lr, lr, #1
 8003982:	fa5f fe8e 	uxtb.w	lr, lr
 8003986:	f1be 0f04 	cmp.w	lr, #4
 800398a:	d80d      	bhi.n	80039a8 <shape_caves_with_morphological_operations+0x5c>
		for (uint8_t j = 0; j < SE_SIZE_EROSION; j++) {
 800398c:	2200      	movs	r2, #0
 800398e:	e7f4      	b.n	800397a <shape_caves_with_morphological_operations+0x2e>
			if ((i < SE_SIZE_EROSION/3 || i > 2*SE_SIZE_EROSION/3) && (j < SE_SIZE_EROSION/3 || j > 2*SE_SIZE_EROSION/3)) {
 8003990:	1e53      	subs	r3, r2, #1
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d9e5      	bls.n	8003964 <shape_caves_with_morphological_operations+0x18>
				EROSION_SE[i][j] = dirt;
 8003998:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 800399c:	3330      	adds	r3, #48	; 0x30
 800399e:	446b      	add	r3, sp
 80039a0:	4413      	add	r3, r2
 80039a2:	f803 5c1c 	strb.w	r5, [r3, #-28]
 80039a6:	e7e6      	b.n	8003976 <shape_caves_with_morphological_operations+0x2a>
	for (uint8_t i = 0; i < SE_SIZE_DILATION; i++) {
 80039a8:	2100      	movs	r1, #0
 80039aa:	e010      	b.n	80039ce <shape_caves_with_morphological_operations+0x82>
			if ((i < SE_SIZE_DILATION/3 || i > 2*SE_SIZE_DILATION/3) && (j < SE_SIZE_DILATION/3 || j > 2*SE_SIZE_DILATION/3)) {
 80039ac:	1e4a      	subs	r2, r1, #1
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	2a01      	cmp	r2, #1
 80039b2:	d810      	bhi.n	80039d6 <shape_caves_with_morphological_operations+0x8a>
				DILATION_SE[i][j] = foreground;
 80039b4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80039b8:	3230      	adds	r2, #48	; 0x30
 80039ba:	446a      	add	r2, sp
 80039bc:	441a      	add	r2, r3
 80039be:	f802 4c28 	strb.w	r4, [r2, #-40]
		for (uint8_t j = 0; j < SE_SIZE_DILATION; j++) {
 80039c2:	3301      	adds	r3, #1
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d9f0      	bls.n	80039ac <shape_caves_with_morphological_operations+0x60>
	for (uint8_t i = 0; i < SE_SIZE_DILATION; i++) {
 80039ca:	3101      	adds	r1, #1
 80039cc:	b2c9      	uxtb	r1, r1
 80039ce:	2902      	cmp	r1, #2
 80039d0:	d80d      	bhi.n	80039ee <shape_caves_with_morphological_operations+0xa2>
		for (uint8_t j = 0; j < SE_SIZE_DILATION; j++) {
 80039d2:	2300      	movs	r3, #0
 80039d4:	e7f7      	b.n	80039c6 <shape_caves_with_morphological_operations+0x7a>
			if ((i < SE_SIZE_DILATION/3 || i > 2*SE_SIZE_DILATION/3) && (j < SE_SIZE_DILATION/3 || j > 2*SE_SIZE_DILATION/3)) {
 80039d6:	1e5a      	subs	r2, r3, #1
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	2a01      	cmp	r2, #1
 80039dc:	d9ea      	bls.n	80039b4 <shape_caves_with_morphological_operations+0x68>
				DILATION_SE[i][j] = dirt;
 80039de:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80039e2:	3230      	adds	r2, #48	; 0x30
 80039e4:	446a      	add	r2, sp
 80039e6:	441a      	add	r2, r3
 80039e8:	f802 5c28 	strb.w	r5, [r2, #-40]
 80039ec:	e7e9      	b.n	80039c2 <shape_caves_with_morphological_operations+0x76>
	if (foreground == cave) {
 80039ee:	2ccc      	cmp	r4, #204	; 0xcc
 80039f0:	d01d      	beq.n	8003a2e <shape_caves_with_morphological_operations+0xe2>
		dilation(DILATION_SE, width, height, dirt, foreground);
 80039f2:	9400      	str	r4, [sp, #0]
 80039f4:	462b      	mov	r3, r5
 80039f6:	22f0      	movs	r2, #240	; 0xf0
 80039f8:	21c8      	movs	r1, #200	; 0xc8
 80039fa:	a802      	add	r0, sp, #8
 80039fc:	f7ff ff06 	bl	800380c <dilation>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003a00:	9400      	str	r4, [sp, #0]
 8003a02:	462b      	mov	r3, r5
 8003a04:	22f0      	movs	r2, #240	; 0xf0
 8003a06:	21c8      	movs	r1, #200	; 0xc8
 8003a08:	a802      	add	r0, sp, #8
 8003a0a:	f7ff feff 	bl	800380c <dilation>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003a0e:	9400      	str	r4, [sp, #0]
 8003a10:	462b      	mov	r3, r5
 8003a12:	22f0      	movs	r2, #240	; 0xf0
 8003a14:	21c8      	movs	r1, #200	; 0xc8
 8003a16:	a802      	add	r0, sp, #8
 8003a18:	f7ff fef8 	bl	800380c <dilation>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003a1c:	9400      	str	r4, [sp, #0]
 8003a1e:	462b      	mov	r3, r5
 8003a20:	22f0      	movs	r2, #240	; 0xf0
 8003a22:	21c8      	movs	r1, #200	; 0xc8
 8003a24:	a802      	add	r0, sp, #8
 8003a26:	f7ff fef1 	bl	800380c <dilation>
}
 8003a2a:	b00d      	add	sp, #52	; 0x34
 8003a2c:	bd30      	pop	{r4, r5, pc}
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003a2e:	9400      	str	r4, [sp, #0]
 8003a30:	462b      	mov	r3, r5
 8003a32:	22f0      	movs	r2, #240	; 0xf0
 8003a34:	21c8      	movs	r1, #200	; 0xc8
 8003a36:	a802      	add	r0, sp, #8
 8003a38:	f7ff fee8 	bl	800380c <dilation>
		erosion(EROSION_SE, width, height, foreground);
 8003a3c:	4623      	mov	r3, r4
 8003a3e:	22f0      	movs	r2, #240	; 0xf0
 8003a40:	21c8      	movs	r1, #200	; 0xc8
 8003a42:	a805      	add	r0, sp, #20
 8003a44:	f7ff fe6e 	bl	8003724 <erosion>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003a48:	9400      	str	r4, [sp, #0]
 8003a4a:	462b      	mov	r3, r5
 8003a4c:	22f0      	movs	r2, #240	; 0xf0
 8003a4e:	21c8      	movs	r1, #200	; 0xc8
 8003a50:	a802      	add	r0, sp, #8
 8003a52:	f7ff fedb 	bl	800380c <dilation>
		erosion(EROSION_SE, width, height, foreground);
 8003a56:	4623      	mov	r3, r4
 8003a58:	22f0      	movs	r2, #240	; 0xf0
 8003a5a:	21c8      	movs	r1, #200	; 0xc8
 8003a5c:	a805      	add	r0, sp, #20
 8003a5e:	f7ff fe61 	bl	8003724 <erosion>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003a62:	9400      	str	r4, [sp, #0]
 8003a64:	462b      	mov	r3, r5
 8003a66:	22f0      	movs	r2, #240	; 0xf0
 8003a68:	21c8      	movs	r1, #200	; 0xc8
 8003a6a:	a802      	add	r0, sp, #8
 8003a6c:	f7ff fece 	bl	800380c <dilation>
		erosion(EROSION_SE, width, height, foreground);
 8003a70:	4623      	mov	r3, r4
 8003a72:	22f0      	movs	r2, #240	; 0xf0
 8003a74:	21c8      	movs	r1, #200	; 0xc8
 8003a76:	a805      	add	r0, sp, #20
 8003a78:	f7ff fe54 	bl	8003724 <erosion>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003a7c:	9400      	str	r4, [sp, #0]
 8003a7e:	462b      	mov	r3, r5
 8003a80:	22f0      	movs	r2, #240	; 0xf0
 8003a82:	21c8      	movs	r1, #200	; 0xc8
 8003a84:	a802      	add	r0, sp, #8
 8003a86:	f7ff fec1 	bl	800380c <dilation>
		dilation(DILATION_SE, width, height, dirt, foreground);
 8003a8a:	9400      	str	r4, [sp, #0]
 8003a8c:	462b      	mov	r3, r5
 8003a8e:	22f0      	movs	r2, #240	; 0xf0
 8003a90:	21c8      	movs	r1, #200	; 0xc8
 8003a92:	a802      	add	r0, sp, #8
 8003a94:	f7ff feba 	bl	800380c <dilation>
 8003a98:	e7c7      	b.n	8003a2a <shape_caves_with_morphological_operations+0xde>
	...

08003a9c <place_lava>:
void place_lava() {
 8003a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	srand(time(NULL));
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	f00c fb7e 	bl	80101a0 <time>
 8003aa4:	f00b fc2e 	bl	800f304 <srand>
	uint8_t lava_blob_radius = rand() % 3;
 8003aa8:	f00b fc5a 	bl	800f360 <rand>
 8003aac:	4f1f      	ldr	r7, [pc, #124]	; (8003b2c <place_lava+0x90>)
 8003aae:	fb87 2700 	smull	r2, r7, r7, r0
 8003ab2:	eba7 77e0 	sub.w	r7, r7, r0, asr #31
 8003ab6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8003aba:	1bc7      	subs	r7, r0, r7
 8003abc:	b2ff      	uxtb	r7, r7
	for (cell_c i = 0; i < WORLD_WIDTH_CELLS; i++) {
 8003abe:	2500      	movs	r5, #0
 8003ac0:	e026      	b.n	8003b10 <place_lava+0x74>
				draw_blob(i, j, lava_blob_radius, lava_block);
 8003ac2:	2388      	movs	r3, #136	; 0x88
 8003ac4:	463a      	mov	r2, r7
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	4628      	mov	r0, r5
 8003aca:	f7ff fbe7 	bl	800329c <draw_blob>
 8003ace:	e014      	b.n	8003afa <place_lava+0x5e>
		for (uint16_t j = starting_depth; j < WORLD_HEIGHT_CELLS; j++) {
 8003ad0:	3401      	adds	r4, #1
 8003ad2:	b2a4      	uxth	r4, r4
 8003ad4:	2cef      	cmp	r4, #239	; 0xef
 8003ad6:	d819      	bhi.n	8003b0c <place_lava+0x70>
			if ((float) rand() / (float) (RAND_MAX / 100) < chance_of_lava) { // && WORLD[j][i] & 0xF0 != _dirt_bg) {
 8003ad8:	f00b fc42 	bl	800f360 <rand>
 8003adc:	ee07 0a90 	vmov	s15, r0
 8003ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ae4:	eddf 6a12 	vldr	s13, [pc, #72]	; 8003b30 <place_lava+0x94>
 8003ae8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003aec:	eddf 7a11 	vldr	s15, [pc, #68]	; 8003b34 <place_lava+0x98>
 8003af0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af8:	d4e3      	bmi.n	8003ac2 <place_lava+0x26>
			if (j >= WORLD_HEIGHT_CELLS - 2) {
 8003afa:	2ced      	cmp	r4, #237	; 0xed
 8003afc:	d9e8      	bls.n	8003ad0 <place_lava+0x34>
				WORLD[j][i] = lava_block;
 8003afe:	4b0e      	ldr	r3, [pc, #56]	; (8003b38 <place_lava+0x9c>)
 8003b00:	22c8      	movs	r2, #200	; 0xc8
 8003b02:	fb02 3304 	mla	r3, r2, r4, r3
 8003b06:	2288      	movs	r2, #136	; 0x88
 8003b08:	559a      	strb	r2, [r3, r6]
 8003b0a:	e7e1      	b.n	8003ad0 <place_lava+0x34>
	for (cell_c i = 0; i < WORLD_WIDTH_CELLS; i++) {
 8003b0c:	3501      	adds	r5, #1
 8003b0e:	b2ad      	uxth	r5, r5
 8003b10:	2dc7      	cmp	r5, #199	; 0xc7
 8003b12:	d806      	bhi.n	8003b22 <place_lava+0x86>
		cell_c starting_depth = LVL1_HMAP[2*i] + 10;
 8003b14:	462e      	mov	r6, r5
 8003b16:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <place_lava+0xa0>)
 8003b18:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8003b1c:	340a      	adds	r4, #10
 8003b1e:	b2a4      	uxth	r4, r4
		for (uint16_t j = starting_depth; j < WORLD_HEIGHT_CELLS; j++) {
 8003b20:	e7d8      	b.n	8003ad4 <place_lava+0x38>
	shape_caves_with_morphological_operations(dirt_block, lava_block);
 8003b22:	2188      	movs	r1, #136	; 0x88
 8003b24:	2011      	movs	r0, #17
 8003b26:	f7ff ff11 	bl	800394c <shape_caves_with_morphological_operations>
}
 8003b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b2c:	55555556 	.word	0x55555556
 8003b30:	4ba3d70a 	.word	0x4ba3d70a
 8003b34:	3dcccccd 	.word	0x3dcccccd
 8003b38:	20006528 	.word	0x20006528
 8003b3c:	20004f14 	.word	0x20004f14

08003b40 <filter_level>:

void filter_level(uint16_t array_size, uint8_t kernel_width, uint8_t sigma, bool only_sharp_edges) {
 8003b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b44:	ed2d 8b04 	vpush	{d8-d9}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	4607      	mov	r7, r0
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	4615      	mov	r5, r2
 8003b50:	4699      	mov	r9, r3
	int8_t* result = malloc(array_size);
 8003b52:	f00a fc65 	bl	800e420 <malloc>
 8003b56:	4683      	mov	fp, r0

	float* filter = gauss_kernel(kernel_width, sigma);
 8003b58:	4629      	mov	r1, r5
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f7ff fd88 	bl	8003670 <gauss_kernel>
 8003b60:	4682      	mov	sl, r0


	for (uint16_t i = 0; i < array_size; i++) {
 8003b62:	2500      	movs	r5, #0
 8003b64:	e03f      	b.n	8003be6 <filter_level+0xa6>
>>>>>>> render
		float sum = 0.0;

		float std = 0.0;
		float mean = 0.0;

		for (int j = 0; j < kernel_width; j++) {
<<<<<<< HEAD
 8003b2e:	3101      	adds	r1, #1
 8003b30:	428c      	cmp	r4, r1
 8003b32:	dd1a      	ble.n	8003b6a <filter_level+0x62>
			int k = i + j - (kernel_width - 1) / 2;
 8003b34:	186b      	adds	r3, r5, r1
 8003b36:	1e62      	subs	r2, r4, #1
 8003b38:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
			if (k >= 0 && k < array_size) {
 8003b3c:	ebb3 0362 	subs.w	r3, r3, r2, asr #1
 8003b40:	d4f5      	bmi.n	8003b2e <filter_level+0x26>
 8003b42:	429f      	cmp	r7, r3
 8003b44:	ddf3      	ble.n	8003b2e <filter_level+0x26>
				sum += LVL1_HMAP[k] * filter[j];
 8003b46:	4a54      	ldr	r2, [pc, #336]	; (8003c98 <filter_level+0x190>)
 8003b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b4c:	ee07 3a90 	vmov	s15, r3
 8003b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b54:	eb0a 0381 	add.w	r3, sl, r1, lsl #2
 8003b58:	ed93 7a00 	vldr	s14, [r3]
 8003b5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b60:	ee38 8a07 	vadd.f32	s16, s16, s14
				mean += LVL1_HMAP[k];
 8003b64:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003b68:	e7e1      	b.n	8003b2e <filter_level+0x26>
=======
 8003b66:	3101      	adds	r1, #1
 8003b68:	428c      	cmp	r4, r1
 8003b6a:	dd1a      	ble.n	8003ba2 <filter_level+0x62>
			int k = i + j - (kernel_width - 1) / 2;
 8003b6c:	186b      	adds	r3, r5, r1
 8003b6e:	1e62      	subs	r2, r4, #1
 8003b70:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
			if (k >= 0 && k < array_size) {
 8003b74:	ebb3 0362 	subs.w	r3, r3, r2, asr #1
 8003b78:	d4f5      	bmi.n	8003b66 <filter_level+0x26>
 8003b7a:	429f      	cmp	r7, r3
 8003b7c:	ddf3      	ble.n	8003b66 <filter_level+0x26>
				sum += LVL1_HMAP[k] * filter[j];
 8003b7e:	4a54      	ldr	r2, [pc, #336]	; (8003cd0 <filter_level+0x190>)
 8003b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b84:	ee07 3a90 	vmov	s15, r3
 8003b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b8c:	eb0a 0381 	add.w	r3, sl, r1, lsl #2
 8003b90:	ed93 7a00 	vldr	s14, [r3]
 8003b94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b98:	ee38 8a07 	vadd.f32	s16, s16, s14
				mean += LVL1_HMAP[k];
 8003b9c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003ba0:	e7e1      	b.n	8003b66 <filter_level+0x26>
>>>>>>> render
			}
		}

		// Calculate standard deviation
		if (only_sharp_edges) {
<<<<<<< HEAD
 8003b6a:	f1b9 0f00 	cmp.w	r9, #0
 8003b6e:	d126      	bne.n	8003bbe <filter_level+0xb6>
		float std = 0.0;
 8003b70:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8003c9c <filter_level+0x194>
=======
 8003ba2:	f1b9 0f00 	cmp.w	r9, #0
 8003ba6:	d126      	bne.n	8003bf6 <filter_level+0xb6>
		float std = 0.0;
 8003ba8:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8003cd4 <filter_level+0x194>
>>>>>>> render
			}
			std /= (kernel_width - 1);
			std = sqrt(std);
		}

		if ((only_sharp_edges && std > TERRAIN_STD_THRESH) || !only_sharp_edges) {
<<<<<<< HEAD
 8003b74:	f1b9 0f00 	cmp.w	r9, #0
 8003b78:	d006      	beq.n	8003b88 <filter_level+0x80>
 8003b7a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003b7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b86:	dc02      	bgt.n	8003b8e <filter_level+0x86>
 8003b88:	f1b9 0f00 	cmp.w	r9, #0
 8003b8c:	d161      	bne.n	8003c52 <filter_level+0x14a>
			result[i] = (int8_t) round(sum);
 8003b8e:	ee18 0a10 	vmov	r0, s16
 8003b92:	f7fc fd01 	bl	8000598 <__aeabi_f2d>
 8003b96:	ec41 0b10 	vmov	d0, r0, r1
 8003b9a:	f009 fb8b 	bl	800d2b4 <round>
 8003b9e:	ec51 0b10 	vmov	r0, r1, d0
 8003ba2:	f7fd f801 	bl	8000ba8 <__aeabi_d2iz>
 8003ba6:	f80b 0005 	strb.w	r0, [fp, r5]
	for (uint16_t i = 0; i < array_size; i++) {
 8003baa:	3501      	adds	r5, #1
 8003bac:	b2ad      	uxth	r5, r5
 8003bae:	42bd      	cmp	r5, r7
 8003bb0:	d255      	bcs.n	8003c5e <filter_level+0x156>
		for (int j = 0; j < kernel_width; j++) {
 8003bb2:	2100      	movs	r1, #0
		float mean = 0.0;
 8003bb4:	eddf 6a39 	vldr	s13, [pc, #228]	; 8003c9c <filter_level+0x194>
		float sum = 0.0;
 8003bb8:	eeb0 8a66 	vmov.f32	s16, s13
 8003bbc:	e7b8      	b.n	8003b30 <filter_level+0x28>
			mean = mean / (kernel_width-1);
 8003bbe:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
 8003bc2:	ee07 8a90 	vmov	s15, r8
 8003bc6:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 8003bca:	eec6 9a89 	vdiv.f32	s19, s13, s18
			for (int j = 0; j < kernel_width; j++) {
 8003bce:	2600      	movs	r6, #0
		float std = 0.0;
 8003bd0:	eddf 8a32 	vldr	s17, [pc, #200]	; 8003c9c <filter_level+0x194>
			for (int j = 0; j < kernel_width; j++) {
 8003bd4:	e000      	b.n	8003bd8 <filter_level+0xd0>
 8003bd6:	3601      	adds	r6, #1
 8003bd8:	42b4      	cmp	r4, r6
 8003bda:	dd29      	ble.n	8003c30 <filter_level+0x128>
				int k = i + j - (kernel_width - 1) / 2;
 8003bdc:	19ab      	adds	r3, r5, r6
 8003bde:	eb08 72d8 	add.w	r2, r8, r8, lsr #31
				if (k >= 0 && k < array_size) {
 8003be2:	ebb3 0362 	subs.w	r3, r3, r2, asr #1
 8003be6:	d4f6      	bmi.n	8003bd6 <filter_level+0xce>
 8003be8:	429f      	cmp	r7, r3
 8003bea:	ddf4      	ble.n	8003bd6 <filter_level+0xce>
					std += pow(LVL1_HMAP[k] - mean, 2);
 8003bec:	4a2a      	ldr	r2, [pc, #168]	; (8003c98 <filter_level+0x190>)
 8003bee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bfa:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8003bfe:	ee17 0a90 	vmov	r0, s15
 8003c02:	f7fc fcc9 	bl	8000598 <__aeabi_f2d>
 8003c06:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8003c90 <filter_level+0x188>
 8003c0a:	ec41 0b10 	vmov	d0, r0, r1
 8003c0e:	f009 fbdf 	bl	800d3d0 <pow>
 8003c12:	ed8d 0b00 	vstr	d0, [sp]
 8003c16:	ee18 0a90 	vmov	r0, s17
 8003c1a:	f7fc fcbd 	bl	8000598 <__aeabi_f2d>
 8003c1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c22:	f7fc fb5b 	bl	80002dc <__adddf3>
 8003c26:	f7fd f807 	bl	8000c38 <__aeabi_d2f>
 8003c2a:	ee08 0a90 	vmov	s17, r0
 8003c2e:	e7d2      	b.n	8003bd6 <filter_level+0xce>
			std = sqrt(std);
 8003c30:	eec8 7a89 	vdiv.f32	s15, s17, s18
 8003c34:	ee17 0a90 	vmov	r0, s15
 8003c38:	f7fc fcae 	bl	8000598 <__aeabi_f2d>
 8003c3c:	ec41 0b10 	vmov	d0, r0, r1
 8003c40:	f009 fc36 	bl	800d4b0 <sqrt>
 8003c44:	ec51 0b10 	vmov	r0, r1, d0
 8003c48:	f7fc fff6 	bl	8000c38 <__aeabi_d2f>
 8003c4c:	ee07 0a90 	vmov	s15, r0
 8003c50:	e790      	b.n	8003b74 <filter_level+0x6c>
		} else {
			result[i] = LVL1_HMAP[i];
 8003c52:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <filter_level+0x190>)
 8003c54:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8003c58:	f80b 3005 	strb.w	r3, [fp, r5]
 8003c5c:	e7a5      	b.n	8003baa <filter_level+0xa2>
=======
 8003bac:	f1b9 0f00 	cmp.w	r9, #0
 8003bb0:	d006      	beq.n	8003bc0 <filter_level+0x80>
 8003bb2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bbe:	dc02      	bgt.n	8003bc6 <filter_level+0x86>
 8003bc0:	f1b9 0f00 	cmp.w	r9, #0
 8003bc4:	d161      	bne.n	8003c8a <filter_level+0x14a>
			result[i] = (int8_t) round(sum);
 8003bc6:	ee18 0a10 	vmov	r0, s16
 8003bca:	f7fc fce5 	bl	8000598 <__aeabi_f2d>
 8003bce:	ec41 0b10 	vmov	d0, r0, r1
 8003bd2:	f009 faa3 	bl	800d11c <round>
 8003bd6:	ec51 0b10 	vmov	r0, r1, d0
 8003bda:	f7fc ffe5 	bl	8000ba8 <__aeabi_d2iz>
 8003bde:	f80b 0005 	strb.w	r0, [fp, r5]
	for (uint16_t i = 0; i < array_size; i++) {
 8003be2:	3501      	adds	r5, #1
 8003be4:	b2ad      	uxth	r5, r5
 8003be6:	42bd      	cmp	r5, r7
 8003be8:	d255      	bcs.n	8003c96 <filter_level+0x156>
		for (int j = 0; j < kernel_width; j++) {
 8003bea:	2100      	movs	r1, #0
		float mean = 0.0;
 8003bec:	eddf 6a39 	vldr	s13, [pc, #228]	; 8003cd4 <filter_level+0x194>
		float sum = 0.0;
 8003bf0:	eeb0 8a66 	vmov.f32	s16, s13
 8003bf4:	e7b8      	b.n	8003b68 <filter_level+0x28>
			mean = mean / (kernel_width-1);
 8003bf6:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
 8003bfa:	ee07 8a90 	vmov	s15, r8
 8003bfe:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 8003c02:	eec6 9a89 	vdiv.f32	s19, s13, s18
			for (int j = 0; j < kernel_width; j++) {
 8003c06:	2600      	movs	r6, #0
		float std = 0.0;
 8003c08:	eddf 8a32 	vldr	s17, [pc, #200]	; 8003cd4 <filter_level+0x194>
			for (int j = 0; j < kernel_width; j++) {
 8003c0c:	e000      	b.n	8003c10 <filter_level+0xd0>
 8003c0e:	3601      	adds	r6, #1
 8003c10:	42b4      	cmp	r4, r6
 8003c12:	dd29      	ble.n	8003c68 <filter_level+0x128>
				int k = i + j - (kernel_width - 1) / 2;
 8003c14:	19ab      	adds	r3, r5, r6
 8003c16:	eb08 72d8 	add.w	r2, r8, r8, lsr #31
				if (k >= 0 && k < array_size) {
 8003c1a:	ebb3 0362 	subs.w	r3, r3, r2, asr #1
 8003c1e:	d4f6      	bmi.n	8003c0e <filter_level+0xce>
 8003c20:	429f      	cmp	r7, r3
 8003c22:	ddf4      	ble.n	8003c0e <filter_level+0xce>
					std += pow(LVL1_HMAP[k] - mean, 2);
 8003c24:	4a2a      	ldr	r2, [pc, #168]	; (8003cd0 <filter_level+0x190>)
 8003c26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c32:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8003c36:	ee17 0a90 	vmov	r0, s15
 8003c3a:	f7fc fcad 	bl	8000598 <__aeabi_f2d>
 8003c3e:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8003cc8 <filter_level+0x188>
 8003c42:	ec41 0b10 	vmov	d0, r0, r1
 8003c46:	f009 faf7 	bl	800d238 <pow>
 8003c4a:	ed8d 0b00 	vstr	d0, [sp]
 8003c4e:	ee18 0a90 	vmov	r0, s17
 8003c52:	f7fc fca1 	bl	8000598 <__aeabi_f2d>
 8003c56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c5a:	f7fc fb3f 	bl	80002dc <__adddf3>
 8003c5e:	f7fc ffeb 	bl	8000c38 <__aeabi_d2f>
 8003c62:	ee08 0a90 	vmov	s17, r0
 8003c66:	e7d2      	b.n	8003c0e <filter_level+0xce>
			std = sqrt(std);
 8003c68:	eec8 7a89 	vdiv.f32	s15, s17, s18
 8003c6c:	ee17 0a90 	vmov	r0, s15
 8003c70:	f7fc fc92 	bl	8000598 <__aeabi_f2d>
 8003c74:	ec41 0b10 	vmov	d0, r0, r1
 8003c78:	f009 fb4e 	bl	800d318 <sqrt>
 8003c7c:	ec51 0b10 	vmov	r0, r1, d0
 8003c80:	f7fc ffda 	bl	8000c38 <__aeabi_d2f>
 8003c84:	ee07 0a90 	vmov	s15, r0
 8003c88:	e790      	b.n	8003bac <filter_level+0x6c>
		} else {
			result[i] = LVL1_HMAP[i];
 8003c8a:	4b11      	ldr	r3, [pc, #68]	; (8003cd0 <filter_level+0x190>)
 8003c8c:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8003c90:	f80b 3005 	strb.w	r3, [fp, r5]
 8003c94:	e7a5      	b.n	8003be2 <filter_level+0xa2>
>>>>>>> render
		}
	}

	// Write back
	for (uint16_t i = 0; i < array_size; i++) {
<<<<<<< HEAD
 8003c5e:	2300      	movs	r3, #0
 8003c60:	e006      	b.n	8003c70 <filter_level+0x168>
		LVL1_HMAP[i] = result[i];
 8003c62:	f91b 1003 	ldrsb.w	r1, [fp, r3]
 8003c66:	4a0c      	ldr	r2, [pc, #48]	; (8003c98 <filter_level+0x190>)
 8003c68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint16_t i = 0; i < array_size; i++) {
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	42bb      	cmp	r3, r7
 8003c72:	d3f6      	bcc.n	8003c62 <filter_level+0x15a>
	}

	free(filter);
 8003c74:	4650      	mov	r0, sl
 8003c76:	f00a fca7 	bl	800e5c8 <free>
	free(result);
 8003c7a:	4658      	mov	r0, fp
 8003c7c:	f00a fca4 	bl	800e5c8 <free>
}
 8003c80:	b003      	add	sp, #12
 8003c82:	ecbd 8b04 	vpop	{d8-d9}
 8003c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c8a:	bf00      	nop
 8003c8c:	f3af 8000 	nop.w
 8003c90:	00000000 	.word	0x00000000
 8003c94:	40000000 	.word	0x40000000
 8003c98:	20003f24 	.word	0x20003f24
 8003c9c:	00000000 	.word	0x00000000

08003ca0 <generate_height_map>:
void generate_height_map(uint8_t random_lower, uint8_t random_upper, float roughness) {
 8003ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca4:	ed2d 8b02 	vpush	{d8}
 8003ca8:	b085      	sub	sp, #20
 8003caa:	4681      	mov	r9, r0
 8003cac:	9101      	str	r1, [sp, #4]
 8003cae:	eeb0 8a40 	vmov.f32	s16, s0
	srand(time(NULL));
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	f00c fb40 	bl	8010338 <time>
 8003cb8:	f00b fbf0 	bl	800f49c <srand>
	HEIGHT_MAP[0][0] = 0;			// Elevated on edge
 8003cbc:	4b94      	ldr	r3, [pc, #592]	; (8003f10 <generate_height_map+0x270>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	801a      	strh	r2, [r3, #0]
	HEIGHT_MAP[0][map_size-1] = 0;
 8003cc2:	f8a3 2320 	strh.w	r2, [r3, #800]	; 0x320
	HEIGHT_MAP[map_size-1][0] = 0;	// Elevated on edge
 8003cc6:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8003cca:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
	HEIGHT_MAP[map_size-1][map_size-1] = 0;
 8003cce:	f8a3 2460 	strh.w	r2, [r3, #1120]	; 0x460
	uint8_t step = map_size - 1;
 8003cd2:	f04f 0b90 	mov.w	fp, #144	; 0x90
	while (step > 1) {
 8003cd6:	e0da      	b.n	8003e8e <generate_height_map+0x1ee>
				uint8_t sum = 	HEIGHT_MAP[y-half_step][x-half_step] +
 8003cd8:	ebaa 0306 	sub.w	r3, sl, r6
 8003cdc:	1baa      	subs	r2, r5, r6
 8003cde:	4f8c      	ldr	r7, [pc, #560]	; (8003f10 <generate_height_map+0x270>)
 8003ce0:	f04f 081a 	mov.w	r8, #26
 8003ce4:	fb08 f303 	mul.w	r3, r8, r3
 8003ce8:	1899      	adds	r1, r3, r2
 8003cea:	f937 4011 	ldrsh.w	r4, [r7, r1, lsl #1]
								HEIGHT_MAP[y-half_step][x+half_step] +
 8003cee:	1971      	adds	r1, r6, r5
 8003cf0:	440b      	add	r3, r1
 8003cf2:	f937 3013 	ldrsh.w	r3, [r7, r3, lsl #1]
				uint8_t sum = 	HEIGHT_MAP[y-half_step][x-half_step] +
 8003cf6:	441c      	add	r4, r3
								HEIGHT_MAP[y+half_step][x-half_step] +
 8003cf8:	eb06 030a 	add.w	r3, r6, sl
 8003cfc:	fb08 f303 	mul.w	r3, r8, r3
 8003d00:	441a      	add	r2, r3
 8003d02:	f937 2012 	ldrsh.w	r2, [r7, r2, lsl #1]
								HEIGHT_MAP[y-half_step][x+half_step] +
 8003d06:	fa52 f484 	uxtab	r4, r2, r4
								HEIGHT_MAP[y+half_step][x+half_step];
 8003d0a:	440b      	add	r3, r1
 8003d0c:	f937 3013 	ldrsh.w	r3, [r7, r3, lsl #1]
								HEIGHT_MAP[y+half_step][x-half_step] +
 8003d10:	b2db      	uxtb	r3, r3
				uint8_t sum = 	HEIGHT_MAP[y-half_step][x-half_step] +
 8003d12:	fa53 f484 	uxtab	r4, r3, r4
 8003d16:	b2e4      	uxtb	r4, r4
				uint8_t random_n = random_lower + (uint8_t) ( (int) rand() % (random_upper - random_lower + 1));
 8003d18:	f00b fbee 	bl	800f4f8 <rand>
 8003d1c:	9b01      	ldr	r3, [sp, #4]
 8003d1e:	eba3 0309 	sub.w	r3, r3, r9
 8003d22:	3301      	adds	r3, #1
 8003d24:	fb90 f2f3 	sdiv	r2, r0, r3
 8003d28:	fb03 0012 	mls	r0, r3, r2, r0
 8003d2c:	fa59 f080 	uxtab	r0, r9, r0
 8003d30:	b2c0      	uxtb	r0, r0
				uint8_t average = (uint8_t) round(sum / 4);
 8003d32:	08a4      	lsrs	r4, r4, #2
				HEIGHT_MAP[y][x] = average + random_n * roughness;
 8003d34:	ee07 0a90 	vmov	s15, r0
 8003d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d3c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8003d40:	ee07 4a10 	vmov	s14, r4
 8003d44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d4c:	fb08 580a 	mla	r8, r8, sl, r5
 8003d50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d54:	ee17 3a90 	vmov	r3, s15
 8003d58:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
			for (uint16_t x = step / 2; x < map_size- 1; x += step) {
 8003d5c:	445d      	add	r5, fp
 8003d5e:	b2ad      	uxth	r5, r5
 8003d60:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
 8003d64:	d3b8      	bcc.n	8003cd8 <generate_height_map+0x38>
		for (uint16_t y = step / 2; y < map_size - 1; y += step) {
 8003d66:	9b02      	ldr	r3, [sp, #8]
 8003d68:	445b      	add	r3, fp
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	9302      	str	r3, [sp, #8]
 8003d6e:	9b02      	ldr	r3, [sp, #8]
 8003d70:	469a      	mov	sl, r3
 8003d72:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003d76:	d201      	bcs.n	8003d7c <generate_height_map+0xdc>
			for (uint16_t x = step / 2; x < map_size- 1; x += step) {
 8003d78:	9d03      	ldr	r5, [sp, #12]
 8003d7a:	e7f1      	b.n	8003d60 <generate_height_map+0xc0>
		for (uint16_t y = 0; y < map_size; y += step/2) {
 8003d7c:	f04f 0a00 	mov.w	sl, #0
 8003d80:	f8cd 9008 	str.w	r9, [sp, #8]
 8003d84:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003d88:	e067      	b.n	8003e5a <generate_height_map+0x1ba>
				uint8_t count = 0;
 8003d8a:	2300      	movs	r3, #0
				uint8_t sum = 0;
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	e034      	b.n	8003dfa <generate_height_map+0x15a>
				uint8_t average = sum / count;
 8003d90:	fbb2 f5f3 	udiv	r5, r2, r3
				uint8_t random_n = random_lower + (uint8_t) ((int) rand() % (random_upper - random_lower + 1)) * roughness;
 8003d94:	f00b fbb0 	bl	800f4f8 <rand>
 8003d98:	9b01      	ldr	r3, [sp, #4]
 8003d9a:	9902      	ldr	r1, [sp, #8]
 8003d9c:	1a5b      	subs	r3, r3, r1
 8003d9e:	3301      	adds	r3, #1
 8003da0:	fb90 f2f3 	sdiv	r2, r0, r3
 8003da4:	fb03 0012 	mls	r0, r3, r2, r0
 8003da8:	b2c0      	uxtb	r0, r0
 8003daa:	ee07 0a90 	vmov	s15, r0
 8003dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003db2:	ee67 7a88 	vmul.f32	s15, s15, s16
 8003db6:	ee07 1a10 	vmov	s14, r1
 8003dba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dc6:	ee17 3a90 	vmov	r3, s15
				HEIGHT_MAP[y][x] = average + random_n;
 8003dca:	fa55 f583 	uxtab	r5, r5, r3
 8003dce:	231a      	movs	r3, #26
 8003dd0:	fb03 7708 	mla	r7, r3, r8, r7
 8003dd4:	4b4e      	ldr	r3, [pc, #312]	; (8003f10 <generate_height_map+0x270>)
 8003dd6:	f823 5017 	strh.w	r5, [r3, r7, lsl #1]
			for (uint16_t x = x0; x < map_size; x += step) {
 8003dda:	445c      	add	r4, fp
 8003ddc:	b2a4      	uxth	r4, r4
 8003dde:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 8003de2:	d837      	bhi.n	8003e54 <generate_height_map+0x1b4>
				if (x >= half_step ) {
 8003de4:	454c      	cmp	r4, r9
 8003de6:	d3d0      	bcc.n	8003d8a <generate_height_map+0xea>
					sum += HEIGHT_MAP[y][x-half_step];
 8003de8:	1ba3      	subs	r3, r4, r6
 8003dea:	221a      	movs	r2, #26
 8003dec:	fb02 3308 	mla	r3, r2, r8, r3
 8003df0:	4a47      	ldr	r2, [pc, #284]	; (8003f10 <generate_height_map+0x270>)
 8003df2:	f932 5013 	ldrsh.w	r5, [r2, r3, lsl #1]
 8003df6:	b2ea      	uxtb	r2, r5
					count++;
 8003df8:	2301      	movs	r3, #1
				if (x < map_size - half_step ) {
 8003dfa:	4627      	mov	r7, r4
 8003dfc:	f5c6 71c8 	rsb	r1, r6, #400	; 0x190
 8003e00:	3101      	adds	r1, #1
 8003e02:	428c      	cmp	r4, r1
 8003e04:	da0a      	bge.n	8003e1c <generate_height_map+0x17c>
					sum += HEIGHT_MAP[y][x+half_step];
 8003e06:	1930      	adds	r0, r6, r4
 8003e08:	251a      	movs	r5, #26
 8003e0a:	fb05 0008 	mla	r0, r5, r8, r0
 8003e0e:	4d40      	ldr	r5, [pc, #256]	; (8003f10 <generate_height_map+0x270>)
 8003e10:	f935 5010 	ldrsh.w	r5, [r5, r0, lsl #1]
 8003e14:	4415      	add	r5, r2
 8003e16:	b2ea      	uxtb	r2, r5
					count++;
 8003e18:	1c5d      	adds	r5, r3, #1
 8003e1a:	b2eb      	uxtb	r3, r5
				if (y >= half_step ) {
 8003e1c:	45ca      	cmp	sl, r9
 8003e1e:	d30b      	bcc.n	8003e38 <generate_height_map+0x198>
					sum += HEIGHT_MAP[y-half_step][x];
 8003e20:	eba8 0006 	sub.w	r0, r8, r6
 8003e24:	251a      	movs	r5, #26
 8003e26:	fb05 7000 	mla	r0, r5, r0, r7
 8003e2a:	4d39      	ldr	r5, [pc, #228]	; (8003f10 <generate_height_map+0x270>)
 8003e2c:	f935 5010 	ldrsh.w	r5, [r5, r0, lsl #1]
 8003e30:	4415      	add	r5, r2
 8003e32:	b2ea      	uxtb	r2, r5
					count++;
 8003e34:	1c5d      	adds	r5, r3, #1
 8003e36:	b2eb      	uxtb	r3, r5
				if (y < map_size - half_step ) {
 8003e38:	4588      	cmp	r8, r1
 8003e3a:	daa9      	bge.n	8003d90 <generate_height_map+0xf0>
					sum += HEIGHT_MAP[y+half_step][x];
 8003e3c:	211a      	movs	r1, #26
 8003e3e:	9803      	ldr	r0, [sp, #12]
 8003e40:	fb01 7100 	mla	r1, r1, r0, r7
 8003e44:	4832      	ldr	r0, [pc, #200]	; (8003f10 <generate_height_map+0x270>)
 8003e46:	f930 5011 	ldrsh.w	r5, [r0, r1, lsl #1]
 8003e4a:	4415      	add	r5, r2
 8003e4c:	b2ea      	uxtb	r2, r5
					count++;
 8003e4e:	1c5d      	adds	r5, r3, #1
 8003e50:	b2eb      	uxtb	r3, r5
 8003e52:	e79d      	b.n	8003d90 <generate_height_map+0xf0>
		for (uint16_t y = 0; y < map_size; y += step/2) {
 8003e54:	44ca      	add	sl, r9
 8003e56:	fa1f fa8a 	uxth.w	sl, sl
 8003e5a:	f5ba 7fc8 	cmp.w	sl, #400	; 0x190
 8003e5e:	d809      	bhi.n	8003e74 <generate_height_map+0x1d4>
			uint16_t x0 = (y + step/2) % step;		// CHECK IF OK
 8003e60:	46d0      	mov	r8, sl
 8003e62:	eb0a 0306 	add.w	r3, sl, r6
 8003e66:	9303      	str	r3, [sp, #12]
 8003e68:	fb93 f4fb 	sdiv	r4, r3, fp
 8003e6c:	fb0b 3414 	mls	r4, fp, r4, r3
 8003e70:	b2a4      	uxth	r4, r4
			for (uint16_t x = x0; x < map_size; x += step) {
 8003e72:	e7b4      	b.n	8003dde <generate_height_map+0x13e>
		if (abs(random_lower) > 1 && abs(random_upper) > 1) {
 8003e74:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8003e78:	f1b9 0f01 	cmp.w	r9, #1
 8003e7c:	d906      	bls.n	8003e8c <generate_height_map+0x1ec>
 8003e7e:	9b01      	ldr	r3, [sp, #4]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d903      	bls.n	8003e8c <generate_height_map+0x1ec>
			random_lower /= 2;
 8003e84:	ea4f 0959 	mov.w	r9, r9, lsr #1
			random_upper /= 2;
 8003e88:	085b      	lsrs	r3, r3, #1
 8003e8a:	9301      	str	r3, [sp, #4]
		for (uint16_t y = 0; y < map_size; y += step/2) {
 8003e8c:	46b3      	mov	fp, r6
	while (step > 1) {
 8003e8e:	f1bb 0f01 	cmp.w	fp, #1
 8003e92:	d904      	bls.n	8003e9e <generate_height_map+0x1fe>
		for (uint16_t y = step / 2; y < map_size - 1; y += step) {
 8003e94:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8003e98:	9603      	str	r6, [sp, #12]
 8003e9a:	9602      	str	r6, [sp, #8]
 8003e9c:	e767      	b.n	8003d6e <generate_height_map+0xce>
	for (uint16_t i = 0; i < WORLD_WIDTH_BLOCKS; i+=HMAP_SAMPLES_PER_CELL) {
 8003e9e:	2400      	movs	r4, #0
 8003ea0:	e00b      	b.n	8003eba <generate_height_map+0x21a>
		uint8_t val = HEIGHT_MAP[WORLD_WIDTH_BLOCKS/HMAP_SAMPLES_PER_CELL][i/HMAP_SAMPLES_PER_CELL] / HMAP_SAMPLES_PER_CELL + GROUND_SKY_RATIO;
 8003ea2:	330f      	adds	r3, #15
 8003ea4:	e014      	b.n	8003ed0 <generate_height_map+0x230>
			LVL1_HMAP[i+j] = val;
 8003ea6:	18e1      	adds	r1, r4, r3
 8003ea8:	4a1a      	ldr	r2, [pc, #104]	; (8003f14 <generate_height_map+0x274>)
 8003eaa:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
		for (uint8_t j = 0; j < HMAP_SAMPLES_PER_CELL; j++) {
 8003eae:	3301      	adds	r3, #1
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b0f      	cmp	r3, #15
 8003eb4:	d9f7      	bls.n	8003ea6 <generate_height_map+0x206>
	for (uint16_t i = 0; i < WORLD_WIDTH_BLOCKS; i+=HMAP_SAMPLES_PER_CELL) {
 8003eb6:	3410      	adds	r4, #16
 8003eb8:	b2a4      	uxth	r4, r4
 8003eba:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 8003ebe:	d20d      	bcs.n	8003edc <generate_height_map+0x23c>
		uint8_t val = HEIGHT_MAP[WORLD_WIDTH_BLOCKS/HMAP_SAMPLES_PER_CELL][i/HMAP_SAMPLES_PER_CELL] / HMAP_SAMPLES_PER_CELL + GROUND_SKY_RATIO;
 8003ec0:	0923      	lsrs	r3, r4, #4
 8003ec2:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8003ec6:	4a12      	ldr	r2, [pc, #72]	; (8003f10 <generate_height_map+0x270>)
 8003ec8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	dbe8      	blt.n	8003ea2 <generate_height_map+0x202>
 8003ed0:	f3c3 1007 	ubfx	r0, r3, #4, #8
 8003ed4:	3050      	adds	r0, #80	; 0x50
 8003ed6:	b2c0      	uxtb	r0, r0
		for (uint8_t j = 0; j < HMAP_SAMPLES_PER_CELL; j++) {
 8003ed8:	2300      	movs	r3, #0
 8003eda:	e7ea      	b.n	8003eb2 <generate_height_map+0x212>
	filter_level(WORLD_WIDTH_BLOCKS, KERNEL_WIDTH, LEVEL_SMOOTHING_FACTOR, false);
 8003edc:	2300      	movs	r3, #0
 8003ede:	220c      	movs	r2, #12
 8003ee0:	2120      	movs	r1, #32
 8003ee2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003ee6:	f7ff fe0f 	bl	8003b08 <filter_level>
	filter_level(WORLD_WIDTH_BLOCKS, KERNEL_WIDTH, LEVEL_SMOOTHING_FACTOR, true);
 8003eea:	2301      	movs	r3, #1
 8003eec:	220c      	movs	r2, #12
 8003eee:	2120      	movs	r1, #32
 8003ef0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003ef4:	f7ff fe08 	bl	8003b08 <filter_level>
	filter_level(WORLD_WIDTH_BLOCKS, KERNEL_WIDTH, LEVEL_SMOOTHING_FACTOR, true);
 8003ef8:	2301      	movs	r3, #1
 8003efa:	220c      	movs	r2, #12
 8003efc:	2120      	movs	r1, #32
 8003efe:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003f02:	f7ff fe01 	bl	8003b08 <filter_level>
}
 8003f06:	b005      	add	sp, #20
 8003f08:	ecbd 8b02 	vpop	{d8}
 8003f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f10:	20000a3c 	.word	0x20000a3c
 8003f14:	20003f24 	.word	0x20003f24

08003f18 <init_world>:
void init_world() {
 8003f18:	b508      	push	{r3, lr}
	generate_height_map(-3, 3, 5);
 8003f1a:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8003f1e:	2103      	movs	r1, #3
 8003f20:	20fd      	movs	r0, #253	; 0xfd
 8003f22:	f7ff febd 	bl	8003ca0 <generate_height_map>
	generate_caves();
 8003f26:	f7ff f9f5 	bl	8003314 <generate_caves>
	shape_caves_with_morphological_operations(dirt, cave);
 8003f2a:	21cc      	movs	r1, #204	; 0xcc
 8003f2c:	2011      	movs	r0, #17
 8003f2e:	f7ff fcf1 	bl	8003914 <shape_caves_with_morphological_operations>
	place_lava();
 8003f32:	f7ff fd97 	bl	8003a64 <place_lava>
	precompute_euclidean();
 8003f36:	f7ff f837 	bl	8002fa8 <precompute_euclidean>
	precompute_light_intensity();
 8003f3a:	f7ff f8ed 	bl	8003118 <precompute_light_intensity>
	init_stage_0();
 8003f3e:	f7ff f955 	bl	80031ec <init_stage_0>
	init_light_map();
 8003f42:	f7fe ff95 	bl	8002e70 <init_light_map>
	place_trees();
 8003f46:	f7fe ff43 	bl	8002dd0 <place_trees>
	uint16_t zero_height = LVL1_HMAP[WORLD_WIDTH_BLOCKS/2];
 8003f4a:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <init_world+0x44>)
 8003f4c:	f8b3 1190 	ldrh.w	r1, [r3, #400]	; 0x190
	update_camera_center((uint16_t) floor(WORLD_WIDTH_BLOCKS/3), zero_height - SKY_GROUND_OFFSET);	// zero level height should be at 1/3 of the screen
 8003f50:	390f      	subs	r1, #15
 8003f52:	b289      	uxth	r1, r1
 8003f54:	2085      	movs	r0, #133	; 0x85
 8003f56:	f7fe ff21 	bl	8002d9c <update_camera_center>
}
 8003f5a:	bd08      	pop	{r3, pc}
 8003f5c:	20003f24 	.word	0x20003f24

08003f60 <get_block>:
=======
 8003c96:	2300      	movs	r3, #0
 8003c98:	e006      	b.n	8003ca8 <filter_level+0x168>
		LVL1_HMAP[i] = result[i];
 8003c9a:	f91b 1003 	ldrsb.w	r1, [fp, r3]
 8003c9e:	4a0c      	ldr	r2, [pc, #48]	; (8003cd0 <filter_level+0x190>)
 8003ca0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint16_t i = 0; i < array_size; i++) {
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	42bb      	cmp	r3, r7
 8003caa:	d3f6      	bcc.n	8003c9a <filter_level+0x15a>
	}

	free(filter);
 8003cac:	4650      	mov	r0, sl
 8003cae:	f00a fbbf 	bl	800e430 <free>
	free(result);
 8003cb2:	4658      	mov	r0, fp
 8003cb4:	f00a fbbc 	bl	800e430 <free>
}
 8003cb8:	b003      	add	sp, #12
 8003cba:	ecbd 8b04 	vpop	{d8-d9}
 8003cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cc2:	bf00      	nop
 8003cc4:	f3af 8000 	nop.w
 8003cc8:	00000000 	.word	0x00000000
 8003ccc:	40000000 	.word	0x40000000
 8003cd0:	20004f14 	.word	0x20004f14
 8003cd4:	00000000 	.word	0x00000000

08003cd8 <generate_height_map>:
void generate_height_map(uint8_t random_lower, uint8_t random_upper, float roughness) {
 8003cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cdc:	ed2d 8b02 	vpush	{d8}
 8003ce0:	b085      	sub	sp, #20
 8003ce2:	4681      	mov	r9, r0
 8003ce4:	9101      	str	r1, [sp, #4]
 8003ce6:	eeb0 8a40 	vmov.f32	s16, s0
	srand(time(NULL));
 8003cea:	2000      	movs	r0, #0
 8003cec:	f00c fa58 	bl	80101a0 <time>
 8003cf0:	f00b fb08 	bl	800f304 <srand>
	HEIGHT_MAP[0][0] = 0;			// Elevated on edge
 8003cf4:	4b94      	ldr	r3, [pc, #592]	; (8003f48 <generate_height_map+0x270>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	801a      	strh	r2, [r3, #0]
	HEIGHT_MAP[0][map_size-1] = 0;
 8003cfa:	f8a3 2320 	strh.w	r2, [r3, #800]	; 0x320
	HEIGHT_MAP[map_size-1][0] = 0;	// Elevated on edge
 8003cfe:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8003d02:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
	HEIGHT_MAP[map_size-1][map_size-1] = 0;
 8003d06:	f8a3 2460 	strh.w	r2, [r3, #1120]	; 0x460
	uint8_t step = map_size - 1;
 8003d0a:	f04f 0b90 	mov.w	fp, #144	; 0x90
	while (step > 1) {
 8003d0e:	e0da      	b.n	8003ec6 <generate_height_map+0x1ee>
				uint8_t sum = 	HEIGHT_MAP[y-half_step][x-half_step] +
 8003d10:	ebaa 0306 	sub.w	r3, sl, r6
 8003d14:	1baa      	subs	r2, r5, r6
 8003d16:	4f8c      	ldr	r7, [pc, #560]	; (8003f48 <generate_height_map+0x270>)
 8003d18:	f04f 081a 	mov.w	r8, #26
 8003d1c:	fb08 f303 	mul.w	r3, r8, r3
 8003d20:	1899      	adds	r1, r3, r2
 8003d22:	f937 4011 	ldrsh.w	r4, [r7, r1, lsl #1]
								HEIGHT_MAP[y-half_step][x+half_step] +
 8003d26:	1971      	adds	r1, r6, r5
 8003d28:	440b      	add	r3, r1
 8003d2a:	f937 3013 	ldrsh.w	r3, [r7, r3, lsl #1]
				uint8_t sum = 	HEIGHT_MAP[y-half_step][x-half_step] +
 8003d2e:	441c      	add	r4, r3
								HEIGHT_MAP[y+half_step][x-half_step] +
 8003d30:	eb06 030a 	add.w	r3, r6, sl
 8003d34:	fb08 f303 	mul.w	r3, r8, r3
 8003d38:	441a      	add	r2, r3
 8003d3a:	f937 2012 	ldrsh.w	r2, [r7, r2, lsl #1]
								HEIGHT_MAP[y-half_step][x+half_step] +
 8003d3e:	fa52 f484 	uxtab	r4, r2, r4
								HEIGHT_MAP[y+half_step][x+half_step];
 8003d42:	440b      	add	r3, r1
 8003d44:	f937 3013 	ldrsh.w	r3, [r7, r3, lsl #1]
								HEIGHT_MAP[y+half_step][x-half_step] +
 8003d48:	b2db      	uxtb	r3, r3
				uint8_t sum = 	HEIGHT_MAP[y-half_step][x-half_step] +
 8003d4a:	fa53 f484 	uxtab	r4, r3, r4
 8003d4e:	b2e4      	uxtb	r4, r4
				uint8_t random_n = random_lower + (uint8_t) ( (int) rand() % (random_upper - random_lower + 1));
 8003d50:	f00b fb06 	bl	800f360 <rand>
 8003d54:	9b01      	ldr	r3, [sp, #4]
 8003d56:	eba3 0309 	sub.w	r3, r3, r9
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	fb90 f2f3 	sdiv	r2, r0, r3
 8003d60:	fb03 0012 	mls	r0, r3, r2, r0
 8003d64:	fa59 f080 	uxtab	r0, r9, r0
 8003d68:	b2c0      	uxtb	r0, r0
				uint8_t average = (uint8_t) round(sum / 4);
 8003d6a:	08a4      	lsrs	r4, r4, #2
				HEIGHT_MAP[y][x] = average + random_n * roughness;
 8003d6c:	ee07 0a90 	vmov	s15, r0
 8003d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d74:	ee67 7a88 	vmul.f32	s15, s15, s16
 8003d78:	ee07 4a10 	vmov	s14, r4
 8003d7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d84:	fb08 580a 	mla	r8, r8, sl, r5
 8003d88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d8c:	ee17 3a90 	vmov	r3, s15
 8003d90:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
			for (uint16_t x = step / 2; x < map_size- 1; x += step) {
 8003d94:	445d      	add	r5, fp
 8003d96:	b2ad      	uxth	r5, r5
 8003d98:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
 8003d9c:	d3b8      	bcc.n	8003d10 <generate_height_map+0x38>
		for (uint16_t y = step / 2; y < map_size - 1; y += step) {
 8003d9e:	9b02      	ldr	r3, [sp, #8]
 8003da0:	445b      	add	r3, fp
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	9302      	str	r3, [sp, #8]
 8003da6:	9b02      	ldr	r3, [sp, #8]
 8003da8:	469a      	mov	sl, r3
 8003daa:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003dae:	d201      	bcs.n	8003db4 <generate_height_map+0xdc>
			for (uint16_t x = step / 2; x < map_size- 1; x += step) {
 8003db0:	9d03      	ldr	r5, [sp, #12]
 8003db2:	e7f1      	b.n	8003d98 <generate_height_map+0xc0>
		for (uint16_t y = 0; y < map_size; y += step/2) {
 8003db4:	f04f 0a00 	mov.w	sl, #0
 8003db8:	f8cd 9008 	str.w	r9, [sp, #8]
 8003dbc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003dc0:	e067      	b.n	8003e92 <generate_height_map+0x1ba>
				uint8_t count = 0;
 8003dc2:	2300      	movs	r3, #0
				uint8_t sum = 0;
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	e034      	b.n	8003e32 <generate_height_map+0x15a>
				uint8_t average = sum / count;
 8003dc8:	fbb2 f5f3 	udiv	r5, r2, r3
				uint8_t random_n = random_lower + (uint8_t) ((int) rand() % (random_upper - random_lower + 1)) * roughness;
 8003dcc:	f00b fac8 	bl	800f360 <rand>
 8003dd0:	9b01      	ldr	r3, [sp, #4]
 8003dd2:	9902      	ldr	r1, [sp, #8]
 8003dd4:	1a5b      	subs	r3, r3, r1
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	fb90 f2f3 	sdiv	r2, r0, r3
 8003ddc:	fb03 0012 	mls	r0, r3, r2, r0
 8003de0:	b2c0      	uxtb	r0, r0
 8003de2:	ee07 0a90 	vmov	s15, r0
 8003de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dea:	ee67 7a88 	vmul.f32	s15, s15, s16
 8003dee:	ee07 1a10 	vmov	s14, r1
 8003df2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dfe:	ee17 3a90 	vmov	r3, s15
				HEIGHT_MAP[y][x] = average + random_n;
 8003e02:	fa55 f583 	uxtab	r5, r5, r3
 8003e06:	231a      	movs	r3, #26
 8003e08:	fb03 7708 	mla	r7, r3, r8, r7
 8003e0c:	4b4e      	ldr	r3, [pc, #312]	; (8003f48 <generate_height_map+0x270>)
 8003e0e:	f823 5017 	strh.w	r5, [r3, r7, lsl #1]
			for (uint16_t x = x0; x < map_size; x += step) {
 8003e12:	445c      	add	r4, fp
 8003e14:	b2a4      	uxth	r4, r4
 8003e16:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 8003e1a:	d837      	bhi.n	8003e8c <generate_height_map+0x1b4>
				if (x >= half_step ) {
 8003e1c:	454c      	cmp	r4, r9
 8003e1e:	d3d0      	bcc.n	8003dc2 <generate_height_map+0xea>
					sum += HEIGHT_MAP[y][x-half_step];
 8003e20:	1ba3      	subs	r3, r4, r6
 8003e22:	221a      	movs	r2, #26
 8003e24:	fb02 3308 	mla	r3, r2, r8, r3
 8003e28:	4a47      	ldr	r2, [pc, #284]	; (8003f48 <generate_height_map+0x270>)
 8003e2a:	f932 5013 	ldrsh.w	r5, [r2, r3, lsl #1]
 8003e2e:	b2ea      	uxtb	r2, r5
					count++;
 8003e30:	2301      	movs	r3, #1
				if (x < map_size - half_step ) {
 8003e32:	4627      	mov	r7, r4
 8003e34:	f5c6 71c8 	rsb	r1, r6, #400	; 0x190
 8003e38:	3101      	adds	r1, #1
 8003e3a:	428c      	cmp	r4, r1
 8003e3c:	da0a      	bge.n	8003e54 <generate_height_map+0x17c>
					sum += HEIGHT_MAP[y][x+half_step];
 8003e3e:	1930      	adds	r0, r6, r4
 8003e40:	251a      	movs	r5, #26
 8003e42:	fb05 0008 	mla	r0, r5, r8, r0
 8003e46:	4d40      	ldr	r5, [pc, #256]	; (8003f48 <generate_height_map+0x270>)
 8003e48:	f935 5010 	ldrsh.w	r5, [r5, r0, lsl #1]
 8003e4c:	4415      	add	r5, r2
 8003e4e:	b2ea      	uxtb	r2, r5
					count++;
 8003e50:	1c5d      	adds	r5, r3, #1
 8003e52:	b2eb      	uxtb	r3, r5
				if (y >= half_step ) {
 8003e54:	45ca      	cmp	sl, r9
 8003e56:	d30b      	bcc.n	8003e70 <generate_height_map+0x198>
					sum += HEIGHT_MAP[y-half_step][x];
 8003e58:	eba8 0006 	sub.w	r0, r8, r6
 8003e5c:	251a      	movs	r5, #26
 8003e5e:	fb05 7000 	mla	r0, r5, r0, r7
 8003e62:	4d39      	ldr	r5, [pc, #228]	; (8003f48 <generate_height_map+0x270>)
 8003e64:	f935 5010 	ldrsh.w	r5, [r5, r0, lsl #1]
 8003e68:	4415      	add	r5, r2
 8003e6a:	b2ea      	uxtb	r2, r5
					count++;
 8003e6c:	1c5d      	adds	r5, r3, #1
 8003e6e:	b2eb      	uxtb	r3, r5
				if (y < map_size - half_step ) {
 8003e70:	4588      	cmp	r8, r1
 8003e72:	daa9      	bge.n	8003dc8 <generate_height_map+0xf0>
					sum += HEIGHT_MAP[y+half_step][x];
 8003e74:	211a      	movs	r1, #26
 8003e76:	9803      	ldr	r0, [sp, #12]
 8003e78:	fb01 7100 	mla	r1, r1, r0, r7
 8003e7c:	4832      	ldr	r0, [pc, #200]	; (8003f48 <generate_height_map+0x270>)
 8003e7e:	f930 5011 	ldrsh.w	r5, [r0, r1, lsl #1]
 8003e82:	4415      	add	r5, r2
 8003e84:	b2ea      	uxtb	r2, r5
					count++;
 8003e86:	1c5d      	adds	r5, r3, #1
 8003e88:	b2eb      	uxtb	r3, r5
 8003e8a:	e79d      	b.n	8003dc8 <generate_height_map+0xf0>
		for (uint16_t y = 0; y < map_size; y += step/2) {
 8003e8c:	44ca      	add	sl, r9
 8003e8e:	fa1f fa8a 	uxth.w	sl, sl
 8003e92:	f5ba 7fc8 	cmp.w	sl, #400	; 0x190
 8003e96:	d809      	bhi.n	8003eac <generate_height_map+0x1d4>
			uint16_t x0 = (y + step/2) % step;		// CHECK IF OK
 8003e98:	46d0      	mov	r8, sl
 8003e9a:	eb0a 0306 	add.w	r3, sl, r6
 8003e9e:	9303      	str	r3, [sp, #12]
 8003ea0:	fb93 f4fb 	sdiv	r4, r3, fp
 8003ea4:	fb0b 3414 	mls	r4, fp, r4, r3
 8003ea8:	b2a4      	uxth	r4, r4
			for (uint16_t x = x0; x < map_size; x += step) {
 8003eaa:	e7b4      	b.n	8003e16 <generate_height_map+0x13e>
		if (abs(random_lower) > 1 && abs(random_upper) > 1) {
 8003eac:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8003eb0:	f1b9 0f01 	cmp.w	r9, #1
 8003eb4:	d906      	bls.n	8003ec4 <generate_height_map+0x1ec>
 8003eb6:	9b01      	ldr	r3, [sp, #4]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d903      	bls.n	8003ec4 <generate_height_map+0x1ec>
			random_lower /= 2;
 8003ebc:	ea4f 0959 	mov.w	r9, r9, lsr #1
			random_upper /= 2;
 8003ec0:	085b      	lsrs	r3, r3, #1
 8003ec2:	9301      	str	r3, [sp, #4]
		for (uint16_t y = 0; y < map_size; y += step/2) {
 8003ec4:	46b3      	mov	fp, r6
	while (step > 1) {
 8003ec6:	f1bb 0f01 	cmp.w	fp, #1
 8003eca:	d904      	bls.n	8003ed6 <generate_height_map+0x1fe>
		for (uint16_t y = step / 2; y < map_size - 1; y += step) {
 8003ecc:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8003ed0:	9603      	str	r6, [sp, #12]
 8003ed2:	9602      	str	r6, [sp, #8]
 8003ed4:	e767      	b.n	8003da6 <generate_height_map+0xce>
	for (uint16_t i = 0; i < WORLD_WIDTH_BLOCKS; i+=HMAP_SAMPLES_PER_CELL) {
 8003ed6:	2400      	movs	r4, #0
 8003ed8:	e00b      	b.n	8003ef2 <generate_height_map+0x21a>
		uint8_t val = HEIGHT_MAP[WORLD_WIDTH_BLOCKS/HMAP_SAMPLES_PER_CELL][i/HMAP_SAMPLES_PER_CELL] / HMAP_SAMPLES_PER_CELL + GROUND_SKY_RATIO;
 8003eda:	330f      	adds	r3, #15
 8003edc:	e014      	b.n	8003f08 <generate_height_map+0x230>
			LVL1_HMAP[i+j] = val;
 8003ede:	18e1      	adds	r1, r4, r3
 8003ee0:	4a1a      	ldr	r2, [pc, #104]	; (8003f4c <generate_height_map+0x274>)
 8003ee2:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
		for (uint8_t j = 0; j < HMAP_SAMPLES_PER_CELL; j++) {
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b0f      	cmp	r3, #15
 8003eec:	d9f7      	bls.n	8003ede <generate_height_map+0x206>
	for (uint16_t i = 0; i < WORLD_WIDTH_BLOCKS; i+=HMAP_SAMPLES_PER_CELL) {
 8003eee:	3410      	adds	r4, #16
 8003ef0:	b2a4      	uxth	r4, r4
 8003ef2:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 8003ef6:	d20d      	bcs.n	8003f14 <generate_height_map+0x23c>
		uint8_t val = HEIGHT_MAP[WORLD_WIDTH_BLOCKS/HMAP_SAMPLES_PER_CELL][i/HMAP_SAMPLES_PER_CELL] / HMAP_SAMPLES_PER_CELL + GROUND_SKY_RATIO;
 8003ef8:	0923      	lsrs	r3, r4, #4
 8003efa:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8003efe:	4a12      	ldr	r2, [pc, #72]	; (8003f48 <generate_height_map+0x270>)
 8003f00:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	dbe8      	blt.n	8003eda <generate_height_map+0x202>
 8003f08:	f3c3 1007 	ubfx	r0, r3, #4, #8
 8003f0c:	3050      	adds	r0, #80	; 0x50
 8003f0e:	b2c0      	uxtb	r0, r0
		for (uint8_t j = 0; j < HMAP_SAMPLES_PER_CELL; j++) {
 8003f10:	2300      	movs	r3, #0
 8003f12:	e7ea      	b.n	8003eea <generate_height_map+0x212>
	filter_level(WORLD_WIDTH_BLOCKS, KERNEL_WIDTH, LEVEL_SMOOTHING_FACTOR, false);
 8003f14:	2300      	movs	r3, #0
 8003f16:	220c      	movs	r2, #12
 8003f18:	2120      	movs	r1, #32
 8003f1a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003f1e:	f7ff fe0f 	bl	8003b40 <filter_level>
	filter_level(WORLD_WIDTH_BLOCKS, KERNEL_WIDTH, LEVEL_SMOOTHING_FACTOR, true);
 8003f22:	2301      	movs	r3, #1
 8003f24:	220c      	movs	r2, #12
 8003f26:	2120      	movs	r1, #32
 8003f28:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003f2c:	f7ff fe08 	bl	8003b40 <filter_level>
	filter_level(WORLD_WIDTH_BLOCKS, KERNEL_WIDTH, LEVEL_SMOOTHING_FACTOR, true);
 8003f30:	2301      	movs	r3, #1
 8003f32:	220c      	movs	r2, #12
 8003f34:	2120      	movs	r1, #32
 8003f36:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003f3a:	f7ff fe01 	bl	8003b40 <filter_level>
}
 8003f3e:	b005      	add	sp, #20
 8003f40:	ecbd 8b02 	vpop	{d8}
 8003f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f48:	20001a2c 	.word	0x20001a2c
 8003f4c:	20004f14 	.word	0x20004f14

08003f50 <init_world>:
void init_world() {
 8003f50:	b508      	push	{r3, lr}
	generate_height_map(-3, 3, 5);
 8003f52:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8003f56:	2103      	movs	r1, #3
 8003f58:	20fd      	movs	r0, #253	; 0xfd
 8003f5a:	f7ff febd 	bl	8003cd8 <generate_height_map>
	generate_caves();
 8003f5e:	f7ff f9f5 	bl	800334c <generate_caves>
	shape_caves_with_morphological_operations(dirt, cave);
 8003f62:	21cc      	movs	r1, #204	; 0xcc
 8003f64:	2011      	movs	r0, #17
 8003f66:	f7ff fcf1 	bl	800394c <shape_caves_with_morphological_operations>
	place_lava();
 8003f6a:	f7ff fd97 	bl	8003a9c <place_lava>
	precompute_euclidean();
 8003f6e:	f7ff f837 	bl	8002fe0 <precompute_euclidean>
	precompute_light_intensity();
 8003f72:	f7ff f8ed 	bl	8003150 <precompute_light_intensity>
	init_stage_0();
 8003f76:	f7ff f955 	bl	8003224 <init_stage_0>
	init_light_map();
 8003f7a:	f7fe ff93 	bl	8002ea4 <init_light_map>
	place_trees();
 8003f7e:	f7fe ff23 	bl	8002dc8 <place_trees>
	uint16_t zero_height = LVL1_HMAP[WORLD_WIDTH_BLOCKS/2];
 8003f82:	4b04      	ldr	r3, [pc, #16]	; (8003f94 <init_world+0x44>)
 8003f84:	f8b3 1190 	ldrh.w	r1, [r3, #400]	; 0x190
	update_camera_center((uint16_t) floor(WORLD_WIDTH_BLOCKS/3), zero_height - SKY_GROUND_OFFSET);	// zero level height should be at 1/3 of the screen
 8003f88:	390f      	subs	r1, #15
 8003f8a:	b289      	uxth	r1, r1
 8003f8c:	2085      	movs	r0, #133	; 0x85
 8003f8e:	f7fe ff01 	bl	8002d94 <update_camera_center>
}
 8003f92:	bd08      	pop	{r3, pc}
 8003f94:	20004f14 	.word	0x20004f14

08003f98 <get_block_with_pixels_from_WORLD>:
>>>>>>> render
    return (uint8_t) rand() % (max - min + 1) + min;
}

// x and y are postion of pixels on world
// function used for movables to get what is around them
<<<<<<< HEAD
uint8_t get_block(pixel_c x, pixel_c y) {
 8003f60:	b538      	push	{r3, r4, r5, lr}
 8003f62:	4604      	mov	r4, r0
 8003f64:	4608      	mov	r0, r1
	// Same as x % 2 but for pixel coordinates
	if (x % 8 >= 4) {
 8003f66:	f014 0f04 	tst.w	r4, #4
 8003f6a:	d10d      	bne.n	8003f88 <get_block+0x28>
=======
block_t get_block_with_pixels_from_WORLD(pixel_c x, pixel_c y) {
 8003f98:	b538      	push	{r3, r4, r5, lr}
 8003f9a:	4604      	mov	r4, r0
 8003f9c:	4608      	mov	r0, r1
	// Same as x % 2 but for pixel coordinates
	if (x % 8 >= 4) {
 8003f9e:	f014 0f04 	tst.w	r4, #4
 8003fa2:	d10d      	bne.n	8003fc0 <get_block_with_pixels_from_WORLD+0x28>
>>>>>>> render
		return lower(WORLD[pixel_to_cell_y(y)][pixel_to_cell_x(x)]);
	}

	return upper(WORLD[pixel_to_cell_y(y)][pixel_to_cell_x(x)]);
<<<<<<< HEAD
 8003f6c:	f000 ff91 	bl	8004e92 <pixel_to_cell_y>
 8003f70:	4605      	mov	r5, r0
 8003f72:	4620      	mov	r0, r4
 8003f74:	f000 ff87 	bl	8004e86 <pixel_to_cell_x>
 8003f78:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <get_block+0x44>)
 8003f7a:	22c8      	movs	r2, #200	; 0xc8
 8003f7c:	fb02 3305 	mla	r3, r2, r5, r3
 8003f80:	5c18      	ldrb	r0, [r3, r0]
 8003f82:	f000 ff71 	bl	8004e68 <upper>
}
 8003f86:	bd38      	pop	{r3, r4, r5, pc}
		return lower(WORLD[pixel_to_cell_y(y)][pixel_to_cell_x(x)]);
 8003f88:	f000 ff83 	bl	8004e92 <pixel_to_cell_y>
 8003f8c:	4605      	mov	r5, r0
 8003f8e:	4620      	mov	r0, r4
 8003f90:	f000 ff79 	bl	8004e86 <pixel_to_cell_x>
 8003f94:	4b03      	ldr	r3, [pc, #12]	; (8003fa4 <get_block+0x44>)
 8003f96:	22c8      	movs	r2, #200	; 0xc8
 8003f98:	fb02 3305 	mla	r3, r2, r5, r3
 8003f9c:	5c18      	ldrb	r0, [r3, r0]
 8003f9e:	f000 ff65 	bl	8004e6c <lower>
 8003fa2:	e7f0      	b.n	8003f86 <get_block+0x26>
 8003fa4:	20005538 	.word	0x20005538

08003fa8 <isSolid>:

bool isSolid (block_t block) {
	if (block == _dirt || block == _grass || block == _wood || block == _sand || block == _rock || block == _red_wood || block == _gold || block == _diamond) {
 8003fa8:	1e43      	subs	r3, r0, #1
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d90b      	bls.n	8003fc8 <isSolid+0x20>
 8003fb0:	2806      	cmp	r0, #6
 8003fb2:	d00b      	beq.n	8003fcc <isSolid+0x24>
 8003fb4:	2807      	cmp	r0, #7
 8003fb6:	d00b      	beq.n	8003fd0 <isSolid+0x28>
 8003fb8:	2809      	cmp	r0, #9
 8003fba:	d00b      	beq.n	8003fd4 <isSolid+0x2c>
 8003fbc:	280a      	cmp	r0, #10
 8003fbe:	d00b      	beq.n	8003fd8 <isSolid+0x30>
 8003fc0:	280b      	cmp	r0, #11
 8003fc2:	d00b      	beq.n	8003fdc <isSolid+0x34>
		return true;
	}
	return false;
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	4770      	bx	lr
		return true;
 8003fc8:	2001      	movs	r0, #1
 8003fca:	4770      	bx	lr
 8003fcc:	2001      	movs	r0, #1
 8003fce:	4770      	bx	lr
 8003fd0:	2001      	movs	r0, #1
 8003fd2:	4770      	bx	lr
 8003fd4:	2001      	movs	r0, #1
 8003fd6:	4770      	bx	lr
 8003fd8:	2001      	movs	r0, #1
 8003fda:	4770      	bx	lr
 8003fdc:	2001      	movs	r0, #1
}
 8003fde:	4770      	bx	lr

08003fe0 <w_pixel_to_scene_pixel_x>:
 * returns the pixel that is represented in WORLD position to
 * position that is represented in SCENE position
 * for x axis
 */
pixel_c w_pixel_to_scene_pixel_x (pixel_c pos_x) {
	return pos_x - ((camera_x_block * BLOCK_WIDTH) - (SCENE_WIDTH_BLOCKS * BLOCK_WIDTH / 2));
 8003fe0:	4b03      	ldr	r3, [pc, #12]	; (8003ff0 <w_pixel_to_scene_pixel_x+0x10>)
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	3b28      	subs	r3, #40	; 0x28
 8003fe6:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
//	return pos_x - ((camera_x_block * BLOCK_WIDTH - (SCENE_WIDTH_BLOCKS / 2) * BLOCK_WIDTH) - (pos_x - camera_x_block * BLOCK_WIDTH));
}
 8003fea:	b280      	uxth	r0, r0
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	200110b8 	.word	0x200110b8

08003ff4 <w_pixel_to_scene_pixel_y>:
 * position that is represented in SCENE position
 * for y axis
 */
pixel_c w_pixel_to_scene_pixel_y (pixel_c pos_y) {
//	return pos_y - ((pos_y - camera_y_block * BLOCK_WIDTH) - );
	return pos_y - ((camera_y_block * BLOCK_WIDTH) - (SCENE_HEIGHT_BLOCKS * BLOCK_WIDTH / 2));
 8003ff4:	4b03      	ldr	r3, [pc, #12]	; (8004004 <w_pixel_to_scene_pixel_y+0x10>)
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	3b1e      	subs	r3, #30
 8003ffa:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
}
 8003ffe:	b280      	uxth	r0, r0
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	200110ba 	.word	0x200110ba

08004008 <MX_SPI1_Init>:
=======
 8003fa4:	f000 ff91 	bl	8004eca <pixel_to_cell_y>
 8003fa8:	4605      	mov	r5, r0
 8003faa:	4620      	mov	r0, r4
 8003fac:	f000 ff87 	bl	8004ebe <pixel_to_cell_x>
 8003fb0:	4b0a      	ldr	r3, [pc, #40]	; (8003fdc <get_block_with_pixels_from_WORLD+0x44>)
 8003fb2:	22c8      	movs	r2, #200	; 0xc8
 8003fb4:	fb02 3305 	mla	r3, r2, r5, r3
 8003fb8:	5c18      	ldrb	r0, [r3, r0]
 8003fba:	f000 ff71 	bl	8004ea0 <upper>
}
 8003fbe:	bd38      	pop	{r3, r4, r5, pc}
		return lower(WORLD[pixel_to_cell_y(y)][pixel_to_cell_x(x)]);
 8003fc0:	f000 ff83 	bl	8004eca <pixel_to_cell_y>
 8003fc4:	4605      	mov	r5, r0
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	f000 ff79 	bl	8004ebe <pixel_to_cell_x>
 8003fcc:	4b03      	ldr	r3, [pc, #12]	; (8003fdc <get_block_with_pixels_from_WORLD+0x44>)
 8003fce:	22c8      	movs	r2, #200	; 0xc8
 8003fd0:	fb02 3305 	mla	r3, r2, r5, r3
 8003fd4:	5c18      	ldrb	r0, [r3, r0]
 8003fd6:	f000 ff65 	bl	8004ea4 <lower>
 8003fda:	e7f0      	b.n	8003fbe <get_block_with_pixels_from_WORLD+0x26>
 8003fdc:	20006528 	.word	0x20006528

08003fe0 <isSolid>:

bool isSolid (block_t block) {
	if (block == _dirt || block == _grass || block == _wood || block == _sand || block == _rock || block == _red_wood || block == _gold || block == _diamond) {
 8003fe0:	1e43      	subs	r3, r0, #1
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d90b      	bls.n	8004000 <isSolid+0x20>
 8003fe8:	2806      	cmp	r0, #6
 8003fea:	d00b      	beq.n	8004004 <isSolid+0x24>
 8003fec:	2807      	cmp	r0, #7
 8003fee:	d00b      	beq.n	8004008 <isSolid+0x28>
 8003ff0:	2809      	cmp	r0, #9
 8003ff2:	d00b      	beq.n	800400c <isSolid+0x2c>
 8003ff4:	280a      	cmp	r0, #10
 8003ff6:	d00b      	beq.n	8004010 <isSolid+0x30>
 8003ff8:	280b      	cmp	r0, #11
 8003ffa:	d00b      	beq.n	8004014 <isSolid+0x34>
		return true;
	}
	return false;
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	4770      	bx	lr
		return true;
 8004000:	2001      	movs	r0, #1
 8004002:	4770      	bx	lr
 8004004:	2001      	movs	r0, #1
 8004006:	4770      	bx	lr
 8004008:	2001      	movs	r0, #1
 800400a:	4770      	bx	lr
 800400c:	2001      	movs	r0, #1
 800400e:	4770      	bx	lr
 8004010:	2001      	movs	r0, #1
 8004012:	4770      	bx	lr
 8004014:	2001      	movs	r0, #1
}
 8004016:	4770      	bx	lr

08004018 <world_pixel_to_scene_pixel_x_band>:
	if (mapped_pos >= SCENE_HEIGHT_PIXELS) mapped_pos = SCENE_HEIGHT_PIXELS - 1;
	return mapped_pos;
}

posx_pixel world_pixel_to_scene_pixel_x_band (posx_pixel pos_x) {
	posx_pixel mapped_pos = pos_x - ((camera_x_block * BLOCK_WIDTH) - (SCENE_WIDTH_BLOCKS * BLOCK_WIDTH / 2));
 8004018:	4b03      	ldr	r3, [pc, #12]	; (8004028 <world_pixel_to_scene_pixel_x_band+0x10>)
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	3b28      	subs	r3, #40	; 0x28
 800401e:	eba0 0083 	sub.w	r0, r0, r3, lsl #2

	return mapped_pos;
}
 8004022:	b200      	sxth	r0, r0
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	200120a8 	.word	0x200120a8

0800402c <world_pixel_to_scene_pixel_y_band>:
posy_pixel world_pixel_to_scene_pixel_y_band (posy_pixel pos_y) {
	posx_pixel mapped_pos = pos_y - ((camera_y_block * BLOCK_WIDTH) - (SCENE_HEIGHT_BLOCKS * BLOCK_WIDTH / 2));
 800402c:	4b03      	ldr	r3, [pc, #12]	; (800403c <world_pixel_to_scene_pixel_y_band+0x10>)
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	3b1e      	subs	r3, #30
 8004032:	eba0 0083 	sub.w	r0, r0, r3, lsl #2

	return mapped_pos;
}
 8004036:	b200      	sxth	r0, r0
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	200120aa 	.word	0x200120aa

08004040 <MX_SPI1_Init>:
>>>>>>> render

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
<<<<<<< HEAD
 8004008:	b508      	push	{r3, lr}
=======
 8004040:	b508      	push	{r3, lr}
>>>>>>> render
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
<<<<<<< HEAD
 800400a:	4810      	ldr	r0, [pc, #64]	; (800404c <MX_SPI1_Init+0x44>)
 800400c:	4b10      	ldr	r3, [pc, #64]	; (8004050 <MX_SPI1_Init+0x48>)
 800400e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004010:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004014:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004016:	2300      	movs	r3, #0
 8004018:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800401a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800401e:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004020:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004022:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004028:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800402a:	2228      	movs	r2, #40	; 0x28
 800402c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800402e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004030:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004032:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004034:	2207      	movs	r2, #7
 8004036:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004038:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800403a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800403c:	f005 f9d4 	bl	80093e8 <HAL_SPI_Init>
 8004040:	b900      	cbnz	r0, 8004044 <MX_SPI1_Init+0x3c>
=======
 8004042:	4810      	ldr	r0, [pc, #64]	; (8004084 <MX_SPI1_Init+0x44>)
 8004044:	4b10      	ldr	r3, [pc, #64]	; (8004088 <MX_SPI1_Init+0x48>)
 8004046:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004048:	f44f 7382 	mov.w	r3, #260	; 0x104
 800404c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800404e:	2300      	movs	r3, #0
 8004050:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004052:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004056:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004058:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800405a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800405c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004060:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004062:	2228      	movs	r2, #40	; 0x28
 8004064:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004066:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004068:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800406a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800406c:	2207      	movs	r2, #7
 800406e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004070:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004072:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004074:	f005 f924 	bl	80092c0 <HAL_SPI_Init>
 8004078:	b900      	cbnz	r0, 800407c <MX_SPI1_Init+0x3c>
>>>>>>> render
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
<<<<<<< HEAD
 8004042:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004044:	f7fd ff98 	bl	8001f78 <Error_Handler>
}
 8004048:	e7fb      	b.n	8004042 <MX_SPI1_Init+0x3a>
 800404a:	bf00      	nop
 800404c:	200110c4 	.word	0x200110c4
 8004050:	40013000 	.word	0x40013000

08004054 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004054:	b500      	push	{lr}
 8004056:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004058:	2300      	movs	r3, #0
 800405a:	9303      	str	r3, [sp, #12]
 800405c:	9304      	str	r3, [sp, #16]
 800405e:	9305      	str	r3, [sp, #20]
 8004060:	9306      	str	r3, [sp, #24]
 8004062:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 8004064:	6802      	ldr	r2, [r0, #0]
 8004066:	4b12      	ldr	r3, [pc, #72]	; (80040b0 <HAL_SPI_MspInit+0x5c>)
 8004068:	429a      	cmp	r2, r3
 800406a:	d002      	beq.n	8004072 <HAL_SPI_MspInit+0x1e>
=======
 800407a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800407c:	f7fd ff7c 	bl	8001f78 <Error_Handler>
}
 8004080:	e7fb      	b.n	800407a <MX_SPI1_Init+0x3a>
 8004082:	bf00      	nop
 8004084:	200120b4 	.word	0x200120b4
 8004088:	40013000 	.word	0x40013000

0800408c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800408c:	b500      	push	{lr}
 800408e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004090:	2300      	movs	r3, #0
 8004092:	9303      	str	r3, [sp, #12]
 8004094:	9304      	str	r3, [sp, #16]
 8004096:	9305      	str	r3, [sp, #20]
 8004098:	9306      	str	r3, [sp, #24]
 800409a:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 800409c:	6802      	ldr	r2, [r0, #0]
 800409e:	4b12      	ldr	r3, [pc, #72]	; (80040e8 <HAL_SPI_MspInit+0x5c>)
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d002      	beq.n	80040aa <HAL_SPI_MspInit+0x1e>
>>>>>>> render

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
<<<<<<< HEAD
 800406c:	b009      	add	sp, #36	; 0x24
 800406e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004072:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8004076:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004078:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800407c:	661a      	str	r2, [r3, #96]	; 0x60
 800407e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004080:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004084:	9201      	str	r2, [sp, #4]
 8004086:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004088:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800408a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800408e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004096:	9302      	str	r3, [sp, #8]
 8004098:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800409a:	231c      	movs	r3, #28
 800409c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409e:	2302      	movs	r3, #2
 80040a0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80040a2:	2305      	movs	r3, #5
 80040a4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80040a6:	a903      	add	r1, sp, #12
 80040a8:	4802      	ldr	r0, [pc, #8]	; (80040b4 <HAL_SPI_MspInit+0x60>)
 80040aa:	f002 fdcf 	bl	8006c4c <HAL_GPIO_Init>
}
 80040ae:	e7dd      	b.n	800406c <HAL_SPI_MspInit+0x18>
 80040b0:	40013000 	.word	0x40013000
 80040b4:	48001800 	.word	0x48001800

080040b8 <HAL_MspInit>:
=======
 80040a4:	b009      	add	sp, #36	; 0x24
 80040a6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80040aa:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80040ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040b4:	661a      	str	r2, [r3, #96]	; 0x60
 80040b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040b8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80040bc:	9201      	str	r2, [sp, #4]
 80040be:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80040c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80040c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ce:	9302      	str	r3, [sp, #8]
 80040d0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80040d2:	231c      	movs	r3, #28
 80040d4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d6:	2302      	movs	r3, #2
 80040d8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80040da:	2305      	movs	r3, #5
 80040dc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80040de:	a903      	add	r1, sp, #12
 80040e0:	4802      	ldr	r0, [pc, #8]	; (80040ec <HAL_SPI_MspInit+0x60>)
 80040e2:	f002 fd1f 	bl	8006b24 <HAL_GPIO_Init>
}
 80040e6:	e7dd      	b.n	80040a4 <HAL_SPI_MspInit+0x18>
 80040e8:	40013000 	.word	0x40013000
 80040ec:	48001800 	.word	0x48001800

080040f0 <HAL_MspInit>:
>>>>>>> render
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 80040b8:	b500      	push	{lr}
 80040ba:	b083      	sub	sp, #12
=======
 80040f0:	b500      	push	{lr}
 80040f2:	b083      	sub	sp, #12
>>>>>>> render
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 80040bc:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <HAL_MspInit+0x34>)
 80040be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040c0:	f042 0201 	orr.w	r2, r2, #1
 80040c4:	661a      	str	r2, [r3, #96]	; 0x60
 80040c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040c8:	f002 0201 	and.w	r2, r2, #1
 80040cc:	9200      	str	r2, [sp, #0]
 80040ce:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80040d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80040d6:	659a      	str	r2, [r3, #88]	; 0x58
 80040d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040de:	9301      	str	r3, [sp, #4]
 80040e0:	9b01      	ldr	r3, [sp, #4]
=======
 80040f4:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <HAL_MspInit+0x34>)
 80040f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040f8:	f042 0201 	orr.w	r2, r2, #1
 80040fc:	661a      	str	r2, [r3, #96]	; 0x60
 80040fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004100:	f002 0201 	and.w	r2, r2, #1
 8004104:	9200      	str	r2, [sp, #0]
 8004106:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004108:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800410a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800410e:	659a      	str	r2, [r3, #88]	; 0x58
 8004110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004116:	9301      	str	r3, [sp, #4]
 8004118:	9b01      	ldr	r3, [sp, #4]
>>>>>>> render

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
<<<<<<< HEAD
 80040e2:	f004 fb2f 	bl	8008744 <HAL_PWREx_DisableUCPDDeadBattery>
=======
 800411a:	f004 fa7f 	bl	800861c <HAL_PWREx_DisableUCPDDeadBattery>
>>>>>>> render

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 80040e6:	b003      	add	sp, #12
 80040e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80040ec:	40021000 	.word	0x40021000

080040f0 <NMI_Handler>:
=======
 800411e:	b003      	add	sp, #12
 8004120:	f85d fb04 	ldr.w	pc, [sp], #4
 8004124:	40021000 	.word	0x40021000

08004128 <NMI_Handler>:
>>>>>>> render
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 80040f0:	e7fe      	b.n	80040f0 <NMI_Handler>

080040f2 <HardFault_Handler>:
=======
 8004128:	e7fe      	b.n	8004128 <NMI_Handler>

0800412a <HardFault_Handler>:
>>>>>>> render
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80040f2:	e7fe      	b.n	80040f2 <HardFault_Handler>

080040f4 <MemManage_Handler>:
=======
 800412a:	e7fe      	b.n	800412a <HardFault_Handler>

0800412c <MemManage_Handler>:
>>>>>>> render
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80040f4:	e7fe      	b.n	80040f4 <MemManage_Handler>

080040f6 <BusFault_Handler>:
=======
 800412c:	e7fe      	b.n	800412c <MemManage_Handler>

0800412e <BusFault_Handler>:
>>>>>>> render
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80040f6:	e7fe      	b.n	80040f6 <BusFault_Handler>

080040f8 <UsageFault_Handler>:
=======
 800412e:	e7fe      	b.n	800412e <BusFault_Handler>

08004130 <UsageFault_Handler>:
>>>>>>> render
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80040f8:	e7fe      	b.n	80040f8 <UsageFault_Handler>

080040fa <SVC_Handler>:
=======
 8004130:	e7fe      	b.n	8004130 <UsageFault_Handler>

08004132 <SVC_Handler>:
>>>>>>> render

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 80040fa:	4770      	bx	lr

080040fc <DebugMon_Handler>:
=======
 8004132:	4770      	bx	lr

08004134 <DebugMon_Handler>:
>>>>>>> render

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 80040fc:	4770      	bx	lr

080040fe <PendSV_Handler>:
=======
 8004134:	4770      	bx	lr

08004136 <PendSV_Handler>:
>>>>>>> render

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 80040fe:	4770      	bx	lr

08004100 <SysTick_Handler>:
=======
 8004136:	4770      	bx	lr

08004138 <SysTick_Handler>:
>>>>>>> render
volatile	uint8_t	milliseconds 	= 0;
extern bool cycle;
extern uint8_t FPS;

void SysTick_Handler(void)
{
<<<<<<< HEAD
 8004100:	b508      	push	{r3, lr}
=======
 8004138:	b508      	push	{r3, lr}
>>>>>>> render
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 8004102:	f001 fa2d 	bl	8005560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  	// Here the frame rate of TERRSKO is set to values of 10 to 100 FPS
    if (milliseconds >= FPS) {
 8004106:	4b09      	ldr	r3, [pc, #36]	; (800412c <SysTick_Handler+0x2c>)
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	b2db      	uxtb	r3, r3
 800410c:	4a08      	ldr	r2, [pc, #32]	; (8004130 <SysTick_Handler+0x30>)
 800410e:	7812      	ldrb	r2, [r2, #0]
 8004110:	4293      	cmp	r3, r2
 8004112:	d305      	bcc.n	8004120 <SysTick_Handler+0x20>
    	milliseconds = 0;
 8004114:	4b05      	ldr	r3, [pc, #20]	; (800412c <SysTick_Handler+0x2c>)
 8004116:	2200      	movs	r2, #0
 8004118:	701a      	strb	r2, [r3, #0]
    	cycle = true;
 800411a:	4b06      	ldr	r3, [pc, #24]	; (8004134 <SysTick_Handler+0x34>)
 800411c:	2201      	movs	r2, #1
 800411e:	701a      	strb	r2, [r3, #0]
    }
    milliseconds++;
 8004120:	4a02      	ldr	r2, [pc, #8]	; (800412c <SysTick_Handler+0x2c>)
 8004122:	7813      	ldrb	r3, [r2, #0]
 8004124:	3301      	adds	r3, #1
 8004126:	b2db      	uxtb	r3, r3
 8004128:	7013      	strb	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 800412a:	bd08      	pop	{r3, pc}
 800412c:	20011128 	.word	0x20011128
 8004130:	20000000 	.word	0x20000000
 8004134:	20000960 	.word	0x20000960

08004138 <DMA1_Channel1_IRQHandler>:
=======
 800413a:	f001 f97d 	bl	8005438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  	// Here the frame rate of TERRSKO is set to values of 10 to 100 FPS
    if (milliseconds >= FPS) {
 800413e:	4b09      	ldr	r3, [pc, #36]	; (8004164 <SysTick_Handler+0x2c>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	b2db      	uxtb	r3, r3
 8004144:	4a08      	ldr	r2, [pc, #32]	; (8004168 <SysTick_Handler+0x30>)
 8004146:	7812      	ldrb	r2, [r2, #0]
 8004148:	4293      	cmp	r3, r2
 800414a:	d305      	bcc.n	8004158 <SysTick_Handler+0x20>
    	milliseconds = 0;
 800414c:	4b05      	ldr	r3, [pc, #20]	; (8004164 <SysTick_Handler+0x2c>)
 800414e:	2200      	movs	r2, #0
 8004150:	701a      	strb	r2, [r3, #0]
    	cycle = true;
 8004152:	4b06      	ldr	r3, [pc, #24]	; (800416c <SysTick_Handler+0x34>)
 8004154:	2201      	movs	r2, #1
 8004156:	701a      	strb	r2, [r3, #0]
    }
    milliseconds++;
 8004158:	4a02      	ldr	r2, [pc, #8]	; (8004164 <SysTick_Handler+0x2c>)
 800415a:	7813      	ldrb	r3, [r2, #0]
 800415c:	3301      	adds	r3, #1
 800415e:	b2db      	uxtb	r3, r3
 8004160:	7013      	strb	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8004162:	bd08      	pop	{r3, pc}
 8004164:	20012118 	.word	0x20012118
 8004168:	20001000 	.word	0x20001000
 800416c:	20001950 	.word	0x20001950

08004170 <DMA1_Channel1_IRQHandler>:
>>>>>>> render

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
<<<<<<< HEAD
 8004138:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 800413a:	4802      	ldr	r0, [pc, #8]	; (8004144 <DMA1_Channel1_IRQHandler+0xc>)
 800413c:	f002 fbf1 	bl	8006922 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004140:	bd08      	pop	{r3, pc}
 8004142:	bf00      	nop
 8004144:	200006e8 	.word	0x200006e8

08004148 <DMA1_Channel3_IRQHandler>:
=======
 8004170:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 8004172:	4802      	ldr	r0, [pc, #8]	; (800417c <DMA1_Channel1_IRQHandler+0xc>)
 8004174:	f002 fb41 	bl	80067fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004178:	bd08      	pop	{r3, pc}
 800417a:	bf00      	nop
 800417c:	200016d8 	.word	0x200016d8

08004180 <DMA1_Channel3_IRQHandler>:
>>>>>>> render

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
<<<<<<< HEAD
 8004148:	b508      	push	{r3, lr}
=======
 8004180:	b508      	push	{r3, lr}
>>>>>>> render
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
<<<<<<< HEAD
 800414a:	4802      	ldr	r0, [pc, #8]	; (8004154 <DMA1_Channel3_IRQHandler+0xc>)
 800414c:	f002 fbe9 	bl	8006922 <HAL_DMA_IRQHandler>
=======
 8004182:	4802      	ldr	r0, [pc, #8]	; (800418c <DMA1_Channel3_IRQHandler+0xc>)
 8004184:	f002 fb39 	bl	80067fa <HAL_DMA_IRQHandler>
>>>>>>> render
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
<<<<<<< HEAD
 8004150:	bd08      	pop	{r3, pc}
 8004152:	bf00      	nop
 8004154:	20000808 	.word	0x20000808

08004158 <DMA1_Channel4_IRQHandler>:
=======
 8004188:	bd08      	pop	{r3, pc}
 800418a:	bf00      	nop
 800418c:	200017f8 	.word	0x200017f8

08004190 <DMA1_Channel4_IRQHandler>:
>>>>>>> render

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
<<<<<<< HEAD
 8004158:	b508      	push	{r3, lr}
=======
 8004190:	b508      	push	{r3, lr}
>>>>>>> render
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
<<<<<<< HEAD
 800415a:	4802      	ldr	r0, [pc, #8]	; (8004164 <DMA1_Channel4_IRQHandler+0xc>)
 800415c:	f002 fbe1 	bl	8006922 <HAL_DMA_IRQHandler>
=======
 8004192:	4802      	ldr	r0, [pc, #8]	; (800419c <DMA1_Channel4_IRQHandler+0xc>)
 8004194:	f002 fb31 	bl	80067fa <HAL_DMA_IRQHandler>
>>>>>>> render
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
<<<<<<< HEAD
 8004160:	bd08      	pop	{r3, pc}
 8004162:	bf00      	nop
 8004164:	20000868 	.word	0x20000868

08004168 <DMA1_Channel5_IRQHandler>:
=======
 8004198:	bd08      	pop	{r3, pc}
 800419a:	bf00      	nop
 800419c:	20001858 	.word	0x20001858

080041a0 <DMA1_Channel5_IRQHandler>:
>>>>>>> render

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
<<<<<<< HEAD
 8004168:	b508      	push	{r3, lr}
=======
 80041a0:	b508      	push	{r3, lr}
>>>>>>> render
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
<<<<<<< HEAD
 800416a:	4802      	ldr	r0, [pc, #8]	; (8004174 <DMA1_Channel5_IRQHandler+0xc>)
 800416c:	f002 fbd9 	bl	8006922 <HAL_DMA_IRQHandler>
=======
 80041a2:	4802      	ldr	r0, [pc, #8]	; (80041ac <DMA1_Channel5_IRQHandler+0xc>)
 80041a4:	f002 fb29 	bl	80067fa <HAL_DMA_IRQHandler>
>>>>>>> render
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
<<<<<<< HEAD
 8004170:	bd08      	pop	{r3, pc}
 8004172:	bf00      	nop
 8004174:	2000063c 	.word	0x2000063c

08004178 <DMA1_Channel6_IRQHandler>:
=======
 80041a8:	bd08      	pop	{r3, pc}
 80041aa:	bf00      	nop
 80041ac:	2000162c 	.word	0x2000162c

080041b0 <DMA1_Channel6_IRQHandler>:
>>>>>>> render
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
<<<<<<< HEAD
 8004178:	4770      	bx	lr

0800417a <DMA1_Channel7_IRQHandler>:
=======
 80041b0:	4770      	bx	lr

080041b2 <DMA1_Channel7_IRQHandler>:
>>>>>>> render
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
<<<<<<< HEAD
 800417a:	4770      	bx	lr

0800417c <USB_LP_IRQHandler>:
=======
 80041b2:	4770      	bx	lr

080041b4 <USB_LP_IRQHandler>:
>>>>>>> render

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
<<<<<<< HEAD
 800417c:	b508      	push	{r3, lr}
=======
 80041b4:	b508      	push	{r3, lr}
>>>>>>> render
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
<<<<<<< HEAD
 800417e:	4802      	ldr	r0, [pc, #8]	; (8004188 <USB_LP_IRQHandler+0xc>)
 8004180:	f004 f817 	bl	80081b2 <HAL_PCD_IRQHandler>
=======
 80041b6:	4802      	ldr	r0, [pc, #8]	; (80041c0 <USB_LP_IRQHandler+0xc>)
 80041b8:	f003 ff67 	bl	800808a <HAL_PCD_IRQHandler>
>>>>>>> render
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
<<<<<<< HEAD
 8004184:	bd08      	pop	{r3, pc}
 8004186:	bf00      	nop
 8004188:	200129ec 	.word	0x200129ec

0800418c <I2C1_EV_IRQHandler>:
=======
 80041bc:	bd08      	pop	{r3, pc}
 80041be:	bf00      	nop
 80041c0:	200139dc 	.word	0x200139dc

080041c4 <I2C1_EV_IRQHandler>:
>>>>>>> render

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
<<<<<<< HEAD
 800418c:	b508      	push	{r3, lr}
=======
 80041c4:	b508      	push	{r3, lr}
>>>>>>> render
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
<<<<<<< HEAD
 800418e:	4802      	ldr	r0, [pc, #8]	; (8004198 <I2C1_EV_IRQHandler+0xc>)
 8004190:	f002 fef2 	bl	8006f78 <HAL_I2C_EV_IRQHandler>
=======
 80041c6:	4802      	ldr	r0, [pc, #8]	; (80041d0 <I2C1_EV_IRQHandler+0xc>)
 80041c8:	f002 fe42 	bl	8006e50 <HAL_I2C_EV_IRQHandler>
>>>>>>> render
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
<<<<<<< HEAD
 8004194:	bd08      	pop	{r3, pc}
 8004196:	bf00      	nop
 8004198:	200008c8 	.word	0x200008c8

0800419c <I2C1_ER_IRQHandler>:
=======
 80041cc:	bd08      	pop	{r3, pc}
 80041ce:	bf00      	nop
 80041d0:	200018b8 	.word	0x200018b8

080041d4 <I2C1_ER_IRQHandler>:
>>>>>>> render

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
<<<<<<< HEAD
 800419c:	b508      	push	{r3, lr}
=======
 80041d4:	b508      	push	{r3, lr}
>>>>>>> render
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
<<<<<<< HEAD
 800419e:	4802      	ldr	r0, [pc, #8]	; (80041a8 <I2C1_ER_IRQHandler+0xc>)
 80041a0:	f003 f9b5 	bl	800750e <HAL_I2C_ER_IRQHandler>
=======
 80041d6:	4802      	ldr	r0, [pc, #8]	; (80041e0 <I2C1_ER_IRQHandler+0xc>)
 80041d8:	f003 f905 	bl	80073e6 <HAL_I2C_ER_IRQHandler>
>>>>>>> render
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
<<<<<<< HEAD
 80041a4:	bd08      	pop	{r3, pc}
 80041a6:	bf00      	nop
 80041a8:	200008c8 	.word	0x200008c8

080041ac <EXTI0_IRQHandler>:
=======
 80041dc:	bd08      	pop	{r3, pc}
 80041de:	bf00      	nop
 80041e0:	200018b8 	.word	0x200018b8

080041e4 <EXTI0_IRQHandler>:
>>>>>>> render
//	}
//}
/*	TIM2 IS READY FOR ACTIVITY IN FREQUENCY: 1HZ */

void EXTI0_IRQHandler() {
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0)) {
<<<<<<< HEAD
 80041ac:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <EXTI0_IRQHandler+0x18>)
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	f013 0f01 	tst.w	r3, #1
 80041b4:	d002      	beq.n	80041bc <EXTI0_IRQHandler+0x10>
			act_up = true;
 80041b6:	4b04      	ldr	r3, [pc, #16]	; (80041c8 <EXTI0_IRQHandler+0x1c>)
 80041b8:	2201      	movs	r2, #1
 80041ba:	701a      	strb	r2, [r3, #0]
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 80041bc:	4b01      	ldr	r3, [pc, #4]	; (80041c4 <EXTI0_IRQHandler+0x18>)
 80041be:	2201      	movs	r2, #1
 80041c0:	615a      	str	r2, [r3, #20]
}
 80041c2:	4770      	bx	lr
 80041c4:	40010400 	.word	0x40010400
 80041c8:	2000047b 	.word	0x2000047b

080041cc <EXTI1_IRQHandler>:
void EXTI1_IRQHandler() {
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_1)) {
 80041cc:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <EXTI1_IRQHandler+0x18>)
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	f013 0f02 	tst.w	r3, #2
 80041d4:	d002      	beq.n	80041dc <EXTI1_IRQHandler+0x10>
		act_left = true;
 80041d6:	4b04      	ldr	r3, [pc, #16]	; (80041e8 <EXTI1_IRQHandler+0x1c>)
 80041d8:	2201      	movs	r2, #1
 80041da:	701a      	strb	r2, [r3, #0]
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
 80041dc:	4b01      	ldr	r3, [pc, #4]	; (80041e4 <EXTI1_IRQHandler+0x18>)
 80041de:	2202      	movs	r2, #2
 80041e0:	615a      	str	r2, [r3, #20]
}
 80041e2:	4770      	bx	lr
 80041e4:	40010400 	.word	0x40010400
 80041e8:	20000479 	.word	0x20000479

080041ec <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler() {
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6)) {
 80041ec:	4b0b      	ldr	r3, [pc, #44]	; (800421c <EXTI9_5_IRQHandler+0x30>)
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80041f4:	d002      	beq.n	80041fc <EXTI9_5_IRQHandler+0x10>
		act_down = true;
 80041f6:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <EXTI9_5_IRQHandler+0x34>)
 80041f8:	2201      	movs	r2, #1
 80041fa:	701a      	strb	r2, [r3, #0]
=======
 80041e4:	4b05      	ldr	r3, [pc, #20]	; (80041fc <EXTI0_IRQHandler+0x18>)
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f013 0f01 	tst.w	r3, #1
 80041ec:	d002      	beq.n	80041f4 <EXTI0_IRQHandler+0x10>
			act_up = true;
 80041ee:	4b04      	ldr	r3, [pc, #16]	; (8004200 <EXTI0_IRQHandler+0x1c>)
 80041f0:	2201      	movs	r2, #1
 80041f2:	701a      	strb	r2, [r3, #0]
>>>>>>> render
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 80041f4:	4b01      	ldr	r3, [pc, #4]	; (80041fc <EXTI0_IRQHandler+0x18>)
 80041f6:	2201      	movs	r2, #1
 80041f8:	615a      	str	r2, [r3, #20]
}
 80041fa:	4770      	bx	lr
 80041fc:	40010400 	.word	0x40010400
 8004200:	2000146b 	.word	0x2000146b

08004204 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler() {
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_1)) {
 8004204:	4b05      	ldr	r3, [pc, #20]	; (800421c <EXTI1_IRQHandler+0x18>)
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	f013 0f02 	tst.w	r3, #2
 800420c:	d002      	beq.n	8004214 <EXTI1_IRQHandler+0x10>
		act_left = true;
 800420e:	4b04      	ldr	r3, [pc, #16]	; (8004220 <EXTI1_IRQHandler+0x1c>)
 8004210:	2201      	movs	r2, #1
 8004212:	701a      	strb	r2, [r3, #0]
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
 8004214:	4b01      	ldr	r3, [pc, #4]	; (800421c <EXTI1_IRQHandler+0x18>)
 8004216:	2202      	movs	r2, #2
 8004218:	615a      	str	r2, [r3, #20]
}
 800421a:	4770      	bx	lr
 800421c:	40010400 	.word	0x40010400
 8004220:	20001469 	.word	0x20001469

08004224 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler() {
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6)) {
 8004224:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <EXTI9_5_IRQHandler+0x30>)
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	f013 0f40 	tst.w	r3, #64	; 0x40
 800422c:	d002      	beq.n	8004234 <EXTI9_5_IRQHandler+0x10>
		act_down = true;
 800422e:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <EXTI9_5_IRQHandler+0x34>)
 8004230:	2201      	movs	r2, #1
 8004232:	701a      	strb	r2, [r3, #0]
	}
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8)) {
<<<<<<< HEAD
 80041fc:	4b07      	ldr	r3, [pc, #28]	; (800421c <EXTI9_5_IRQHandler+0x30>)
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004204:	d002      	beq.n	800420c <EXTI9_5_IRQHandler+0x20>
		act_right = true;
 8004206:	4b07      	ldr	r3, [pc, #28]	; (8004224 <EXTI9_5_IRQHandler+0x38>)
 8004208:	2201      	movs	r2, #1
 800420a:	701a      	strb	r2, [r3, #0]
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 800420c:	4b03      	ldr	r3, [pc, #12]	; (800421c <EXTI9_5_IRQHandler+0x30>)
 800420e:	2240      	movs	r2, #64	; 0x40
 8004210:	615a      	str	r2, [r3, #20]
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 8004212:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004216:	615a      	str	r2, [r3, #20]
}
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40010400 	.word	0x40010400
 8004220:	20000478 	.word	0x20000478
 8004224:	2000047a 	.word	0x2000047a

08004228 <_getpid>:
=======
 8004234:	4b07      	ldr	r3, [pc, #28]	; (8004254 <EXTI9_5_IRQHandler+0x30>)
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	f413 7f80 	tst.w	r3, #256	; 0x100
 800423c:	d002      	beq.n	8004244 <EXTI9_5_IRQHandler+0x20>
		act_right = true;
 800423e:	4b07      	ldr	r3, [pc, #28]	; (800425c <EXTI9_5_IRQHandler+0x38>)
 8004240:	2201      	movs	r2, #1
 8004242:	701a      	strb	r2, [r3, #0]
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8004244:	4b03      	ldr	r3, [pc, #12]	; (8004254 <EXTI9_5_IRQHandler+0x30>)
 8004246:	2240      	movs	r2, #64	; 0x40
 8004248:	615a      	str	r2, [r3, #20]
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 800424a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800424e:	615a      	str	r2, [r3, #20]
}
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40010400 	.word	0x40010400
 8004258:	20001468 	.word	0x20001468
 800425c:	2000146a 	.word	0x2000146a

08004260 <_getpid>:
>>>>>>> render
}

int _getpid(void)
{
	return 1;
}
<<<<<<< HEAD
 8004228:	2001      	movs	r0, #1
 800422a:	4770      	bx	lr

0800422c <_kill>:

int _kill(int pid, int sig)
{
 800422c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800422e:	f00a f999 	bl	800e564 <__errno>
 8004232:	2316      	movs	r3, #22
 8004234:	6003      	str	r3, [r0, #0]
	return -1;
}
 8004236:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800423a:	bd08      	pop	{r3, pc}

0800423c <_exit>:

void _exit (int status)
{
 800423c:	b508      	push	{r3, lr}
	_kill(status, -1);
 800423e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004242:	f7ff fff3 	bl	800422c <_kill>
	while (1) {}		/* Make sure we hang here */
 8004246:	e7fe      	b.n	8004246 <_exit+0xa>

08004248 <_read>:
=======
 8004260:	2001      	movs	r0, #1
 8004262:	4770      	bx	lr

08004264 <_kill>:

int _kill(int pid, int sig)
{
 8004264:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004266:	f00a f8b1 	bl	800e3cc <__errno>
 800426a:	2316      	movs	r3, #22
 800426c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800426e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004272:	bd08      	pop	{r3, pc}

08004274 <_exit>:

void _exit (int status)
{
 8004274:	b508      	push	{r3, lr}
	_kill(status, -1);
 8004276:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800427a:	f7ff fff3 	bl	8004264 <_kill>
	while (1) {}		/* Make sure we hang here */
 800427e:	e7fe      	b.n	800427e <_exit+0xa>

08004280 <_read>:
>>>>>>> render
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< HEAD
 8004248:	b570      	push	{r4, r5, r6, lr}
 800424a:	460c      	mov	r4, r1
 800424c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800424e:	2500      	movs	r5, #0
 8004250:	e006      	b.n	8004260 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 8004252:	f3af 8000 	nop.w
 8004256:	4621      	mov	r1, r4
 8004258:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800425c:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 800425e:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004260:	42b5      	cmp	r5, r6
 8004262:	dbf6      	blt.n	8004252 <_read+0xa>
=======
 8004280:	b570      	push	{r4, r5, r6, lr}
 8004282:	460c      	mov	r4, r1
 8004284:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004286:	2500      	movs	r5, #0
 8004288:	e006      	b.n	8004298 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 800428a:	f3af 8000 	nop.w
 800428e:	4621      	mov	r1, r4
 8004290:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004294:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8004296:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004298:	42b5      	cmp	r5, r6
 800429a:	dbf6      	blt.n	800428a <_read+0xa>
>>>>>>> render
	}

return len;
}
<<<<<<< HEAD
 8004264:	4630      	mov	r0, r6
 8004266:	bd70      	pop	{r4, r5, r6, pc}

08004268 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004268:	b570      	push	{r4, r5, r6, lr}
 800426a:	460c      	mov	r4, r1
 800426c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800426e:	2500      	movs	r5, #0
 8004270:	e004      	b.n	800427c <_write+0x14>
	{
		__io_putchar(*ptr++);
 8004272:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004276:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800427a:	3501      	adds	r5, #1
 800427c:	42b5      	cmp	r5, r6
 800427e:	dbf8      	blt.n	8004272 <_write+0xa>
	}
	return len;
}
 8004280:	4630      	mov	r0, r6
 8004282:	bd70      	pop	{r4, r5, r6, pc}

08004284 <_close>:
=======
 800429c:	4630      	mov	r0, r6
 800429e:	bd70      	pop	{r4, r5, r6, pc}

080042a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042a0:	b570      	push	{r4, r5, r6, lr}
 80042a2:	460c      	mov	r4, r1
 80042a4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042a6:	2500      	movs	r5, #0
 80042a8:	e004      	b.n	80042b4 <_write+0x14>
	{
		__io_putchar(*ptr++);
 80042aa:	f814 0b01 	ldrb.w	r0, [r4], #1
 80042ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042b2:	3501      	adds	r5, #1
 80042b4:	42b5      	cmp	r5, r6
 80042b6:	dbf8      	blt.n	80042aa <_write+0xa>
	}
	return len;
}
 80042b8:	4630      	mov	r0, r6
 80042ba:	bd70      	pop	{r4, r5, r6, pc}

080042bc <_close>:
>>>>>>> render

int _close(int file)
{
	return -1;
}
<<<<<<< HEAD
 8004284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004288:	4770      	bx	lr

0800428a <_fstat>:
=======
 80042bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042c0:	4770      	bx	lr

080042c2 <_fstat>:
>>>>>>> render


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
<<<<<<< HEAD
 800428a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800428e:	604b      	str	r3, [r1, #4]
=======
 80042c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042c6:	604b      	str	r3, [r1, #4]
	return 0;
}
 80042c8:	2000      	movs	r0, #0
 80042ca:	4770      	bx	lr

080042cc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80042cc:	2001      	movs	r0, #1
 80042ce:	4770      	bx	lr

080042d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
>>>>>>> render
	return 0;
}
 80042d0:	2000      	movs	r0, #0
 80042d2:	4770      	bx	lr

<<<<<<< HEAD
08004294 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004294:	2001      	movs	r0, #1
 8004296:	4770      	bx	lr

08004298 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004298:	2000      	movs	r0, #0
 800429a:	4770      	bx	lr

0800429c <_sbrk>:
=======
080042d4 <_sbrk>:
>>>>>>> render
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< HEAD
 800429c:	b510      	push	{r4, lr}
 800429e:	4603      	mov	r3, r0
=======
 80042d4:	b510      	push	{r4, lr}
 80042d6:	4603      	mov	r3, r0
>>>>>>> render
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< HEAD
 80042a0:	4a0c      	ldr	r2, [pc, #48]	; (80042d4 <_sbrk+0x38>)
 80042a2:	490d      	ldr	r1, [pc, #52]	; (80042d8 <_sbrk+0x3c>)
=======
 80042d8:	4a0c      	ldr	r2, [pc, #48]	; (800430c <_sbrk+0x38>)
 80042da:	490d      	ldr	r1, [pc, #52]	; (8004310 <_sbrk+0x3c>)
>>>>>>> render
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
 80042a4:	480d      	ldr	r0, [pc, #52]	; (80042dc <_sbrk+0x40>)
 80042a6:	6800      	ldr	r0, [r0, #0]
 80042a8:	b140      	cbz	r0, 80042bc <_sbrk+0x20>
=======
 80042dc:	480d      	ldr	r0, [pc, #52]	; (8004314 <_sbrk+0x40>)
 80042de:	6800      	ldr	r0, [r0, #0]
 80042e0:	b140      	cbz	r0, 80042f4 <_sbrk+0x20>
>>>>>>> render
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
 80042aa:	480c      	ldr	r0, [pc, #48]	; (80042dc <_sbrk+0x40>)
 80042ac:	6800      	ldr	r0, [r0, #0]
 80042ae:	4403      	add	r3, r0
 80042b0:	1a52      	subs	r2, r2, r1
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d806      	bhi.n	80042c4 <_sbrk+0x28>
=======
 80042e2:	480c      	ldr	r0, [pc, #48]	; (8004314 <_sbrk+0x40>)
 80042e4:	6800      	ldr	r0, [r0, #0]
 80042e6:	4403      	add	r3, r0
 80042e8:	1a52      	subs	r2, r2, r1
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d806      	bhi.n	80042fc <_sbrk+0x28>
>>>>>>> render
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
<<<<<<< HEAD
 80042b6:	4a09      	ldr	r2, [pc, #36]	; (80042dc <_sbrk+0x40>)
 80042b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80042ba:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80042bc:	4807      	ldr	r0, [pc, #28]	; (80042dc <_sbrk+0x40>)
 80042be:	4c08      	ldr	r4, [pc, #32]	; (80042e0 <_sbrk+0x44>)
 80042c0:	6004      	str	r4, [r0, #0]
 80042c2:	e7f2      	b.n	80042aa <_sbrk+0xe>
    errno = ENOMEM;
 80042c4:	f00a f94e 	bl	800e564 <__errno>
 80042c8:	230c      	movs	r3, #12
 80042ca:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80042cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042d0:	e7f3      	b.n	80042ba <_sbrk+0x1e>
 80042d2:	bf00      	nop
 80042d4:	20020000 	.word	0x20020000
 80042d8:	00000400 	.word	0x00000400
 80042dc:	2001112c 	.word	0x2001112c
 80042e0:	20012f10 	.word	0x20012f10

080042e4 <SystemInit>:
=======
 80042ee:	4a09      	ldr	r2, [pc, #36]	; (8004314 <_sbrk+0x40>)
 80042f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80042f2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80042f4:	4807      	ldr	r0, [pc, #28]	; (8004314 <_sbrk+0x40>)
 80042f6:	4c08      	ldr	r4, [pc, #32]	; (8004318 <_sbrk+0x44>)
 80042f8:	6004      	str	r4, [r0, #0]
 80042fa:	e7f2      	b.n	80042e2 <_sbrk+0xe>
    errno = ENOMEM;
 80042fc:	f00a f866 	bl	800e3cc <__errno>
 8004300:	230c      	movs	r3, #12
 8004302:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004308:	e7f3      	b.n	80042f2 <_sbrk+0x1e>
 800430a:	bf00      	nop
 800430c:	20020000 	.word	0x20020000
 8004310:	00000400 	.word	0x00000400
 8004314:	2001211c 	.word	0x2001211c
 8004318:	20013f00 	.word	0x20013f00

0800431c <SystemInit>:
>>>>>>> render

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
<<<<<<< HEAD
 80042e4:	4a03      	ldr	r2, [pc, #12]	; (80042f4 <SystemInit+0x10>)
 80042e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80042ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 800431c:	4a03      	ldr	r2, [pc, #12]	; (800432c <SystemInit+0x10>)
 800431e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004322:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004326:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> render

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 80042f2:	4770      	bx	lr
 80042f4:	e000ed00 	.word	0xe000ed00

080042f8 <HAL_TIM_Base_MspInit>:
=======
 800432a:	4770      	bx	lr
 800432c:	e000ed00 	.word	0xe000ed00

08004330 <HAL_TIM_Base_MspInit>:
>>>>>>> render
  HAL_TIM_MspPostInit(&htim20);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
<<<<<<< HEAD
 80042f8:	b084      	sub	sp, #16

  if(tim_baseHandle->Instance==TIM5)
 80042fa:	6803      	ldr	r3, [r0, #0]
 80042fc:	4a1c      	ldr	r2, [pc, #112]	; (8004370 <HAL_TIM_Base_MspInit+0x78>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d013      	beq.n	800432a <HAL_TIM_Base_MspInit+0x32>
=======
 8004330:	b084      	sub	sp, #16

  if(tim_baseHandle->Instance==TIM5)
 8004332:	6803      	ldr	r3, [r0, #0]
 8004334:	4a1c      	ldr	r2, [pc, #112]	; (80043a8 <HAL_TIM_Base_MspInit+0x78>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d013      	beq.n	8004362 <HAL_TIM_Base_MspInit+0x32>
>>>>>>> render
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM8)
<<<<<<< HEAD
 8004302:	4a1c      	ldr	r2, [pc, #112]	; (8004374 <HAL_TIM_Base_MspInit+0x7c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d01c      	beq.n	8004342 <HAL_TIM_Base_MspInit+0x4a>
=======
 800433a:	4a1c      	ldr	r2, [pc, #112]	; (80043ac <HAL_TIM_Base_MspInit+0x7c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d01c      	beq.n	800437a <HAL_TIM_Base_MspInit+0x4a>
>>>>>>> render
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM15)
<<<<<<< HEAD
 8004308:	4a1b      	ldr	r2, [pc, #108]	; (8004378 <HAL_TIM_Base_MspInit+0x80>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d024      	beq.n	8004358 <HAL_TIM_Base_MspInit+0x60>
=======
 8004340:	4a1b      	ldr	r2, [pc, #108]	; (80043b0 <HAL_TIM_Base_MspInit+0x80>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d024      	beq.n	8004390 <HAL_TIM_Base_MspInit+0x60>
>>>>>>> render
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM20)
<<<<<<< HEAD
 800430e:	4a1b      	ldr	r2, [pc, #108]	; (800437c <HAL_TIM_Base_MspInit+0x84>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d114      	bne.n	800433e <HAL_TIM_Base_MspInit+0x46>
=======
 8004346:	4a1b      	ldr	r2, [pc, #108]	; (80043b4 <HAL_TIM_Base_MspInit+0x84>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d114      	bne.n	8004376 <HAL_TIM_Base_MspInit+0x46>
>>>>>>> render
  {
  /* USER CODE BEGIN TIM20_MspInit 0 */

  /* USER CODE END TIM20_MspInit 0 */
    /* TIM20 clock enable */
    __HAL_RCC_TIM20_CLK_ENABLE();
<<<<<<< HEAD
 8004314:	4b1a      	ldr	r3, [pc, #104]	; (8004380 <HAL_TIM_Base_MspInit+0x88>)
 8004316:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004318:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800431c:	661a      	str	r2, [r3, #96]	; 0x60
 800431e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004320:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004324:	9303      	str	r3, [sp, #12]
 8004326:	9b03      	ldr	r3, [sp, #12]
=======
 800434c:	4b1a      	ldr	r3, [pc, #104]	; (80043b8 <HAL_TIM_Base_MspInit+0x88>)
 800434e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004350:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004354:	661a      	str	r2, [r3, #96]	; 0x60
 8004356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800435c:	9303      	str	r3, [sp, #12]
 800435e:	9b03      	ldr	r3, [sp, #12]
>>>>>>> render
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
<<<<<<< HEAD
 8004328:	e009      	b.n	800433e <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800432a:	4b15      	ldr	r3, [pc, #84]	; (8004380 <HAL_TIM_Base_MspInit+0x88>)
 800432c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800432e:	f042 0208 	orr.w	r2, r2, #8
 8004332:	659a      	str	r2, [r3, #88]	; 0x58
 8004334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	9b00      	ldr	r3, [sp, #0]
}
 800433e:	b004      	add	sp, #16
 8004340:	4770      	bx	lr
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004342:	4b0f      	ldr	r3, [pc, #60]	; (8004380 <HAL_TIM_Base_MspInit+0x88>)
 8004344:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004346:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800434a:	661a      	str	r2, [r3, #96]	; 0x60
 800434c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800434e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004352:	9301      	str	r3, [sp, #4]
 8004354:	9b01      	ldr	r3, [sp, #4]
 8004356:	e7f2      	b.n	800433e <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004358:	4b09      	ldr	r3, [pc, #36]	; (8004380 <HAL_TIM_Base_MspInit+0x88>)
 800435a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800435c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004360:	661a      	str	r2, [r3, #96]	; 0x60
 8004362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004368:	9302      	str	r3, [sp, #8]
 800436a:	9b02      	ldr	r3, [sp, #8]
 800436c:	e7e7      	b.n	800433e <HAL_TIM_Base_MspInit+0x46>
 800436e:	bf00      	nop
 8004370:	40000c00 	.word	0x40000c00
 8004374:	40013400 	.word	0x40013400
 8004378:	40014000 	.word	0x40014000
 800437c:	40015000 	.word	0x40015000
 8004380:	40021000 	.word	0x40021000

08004384 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004384:	b500      	push	{lr}
 8004386:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004388:	2300      	movs	r3, #0
 800438a:	9305      	str	r3, [sp, #20]
 800438c:	9306      	str	r3, [sp, #24]
 800438e:	9307      	str	r3, [sp, #28]
 8004390:	9308      	str	r3, [sp, #32]
 8004392:	9309      	str	r3, [sp, #36]	; 0x24
  if(timHandle->Instance==TIM5)
 8004394:	6803      	ldr	r3, [r0, #0]
 8004396:	4a33      	ldr	r2, [pc, #204]	; (8004464 <HAL_TIM_MspPostInit+0xe0>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00b      	beq.n	80043b4 <HAL_TIM_MspPostInit+0x30>
=======
 8004360:	e009      	b.n	8004376 <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004362:	4b15      	ldr	r3, [pc, #84]	; (80043b8 <HAL_TIM_Base_MspInit+0x88>)
 8004364:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004366:	f042 0208 	orr.w	r2, r2, #8
 800436a:	659a      	str	r2, [r3, #88]	; 0x58
 800436c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	9b00      	ldr	r3, [sp, #0]
}
 8004376:	b004      	add	sp, #16
 8004378:	4770      	bx	lr
    __HAL_RCC_TIM8_CLK_ENABLE();
 800437a:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <HAL_TIM_Base_MspInit+0x88>)
 800437c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800437e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004382:	661a      	str	r2, [r3, #96]	; 0x60
 8004384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800438a:	9301      	str	r3, [sp, #4]
 800438c:	9b01      	ldr	r3, [sp, #4]
 800438e:	e7f2      	b.n	8004376 <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004390:	4b09      	ldr	r3, [pc, #36]	; (80043b8 <HAL_TIM_Base_MspInit+0x88>)
 8004392:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004394:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004398:	661a      	str	r2, [r3, #96]	; 0x60
 800439a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800439c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a0:	9302      	str	r3, [sp, #8]
 80043a2:	9b02      	ldr	r3, [sp, #8]
 80043a4:	e7e7      	b.n	8004376 <HAL_TIM_Base_MspInit+0x46>
 80043a6:	bf00      	nop
 80043a8:	40000c00 	.word	0x40000c00
 80043ac:	40013400 	.word	0x40013400
 80043b0:	40014000 	.word	0x40014000
 80043b4:	40015000 	.word	0x40015000
 80043b8:	40021000 	.word	0x40021000

080043bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80043bc:	b500      	push	{lr}
 80043be:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c0:	2300      	movs	r3, #0
 80043c2:	9305      	str	r3, [sp, #20]
 80043c4:	9306      	str	r3, [sp, #24]
 80043c6:	9307      	str	r3, [sp, #28]
 80043c8:	9308      	str	r3, [sp, #32]
 80043ca:	9309      	str	r3, [sp, #36]	; 0x24
  if(timHandle->Instance==TIM5)
 80043cc:	6803      	ldr	r3, [r0, #0]
 80043ce:	4a33      	ldr	r2, [pc, #204]	; (800449c <HAL_TIM_MspPostInit+0xe0>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d00b      	beq.n	80043ec <HAL_TIM_MspPostInit+0x30>
>>>>>>> render

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM8)
<<<<<<< HEAD
 800439c:	4a32      	ldr	r2, [pc, #200]	; (8004468 <HAL_TIM_MspPostInit+0xe4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d01e      	beq.n	80043e0 <HAL_TIM_MspPostInit+0x5c>
=======
 80043d4:	4a32      	ldr	r2, [pc, #200]	; (80044a0 <HAL_TIM_MspPostInit+0xe4>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d01e      	beq.n	8004418 <HAL_TIM_MspPostInit+0x5c>
>>>>>>> render

  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM15)
<<<<<<< HEAD
 80043a2:	4a32      	ldr	r2, [pc, #200]	; (800446c <HAL_TIM_MspPostInit+0xe8>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d031      	beq.n	800440c <HAL_TIM_MspPostInit+0x88>
=======
 80043da:	4a32      	ldr	r2, [pc, #200]	; (80044a4 <HAL_TIM_MspPostInit+0xe8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d031      	beq.n	8004444 <HAL_TIM_MspPostInit+0x88>
>>>>>>> render

  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM20)
<<<<<<< HEAD
 80043a8:	4a31      	ldr	r2, [pc, #196]	; (8004470 <HAL_TIM_MspPostInit+0xec>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d044      	beq.n	8004438 <HAL_TIM_MspPostInit+0xb4>
=======
 80043e0:	4a31      	ldr	r2, [pc, #196]	; (80044a8 <HAL_TIM_MspPostInit+0xec>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d044      	beq.n	8004470 <HAL_TIM_MspPostInit+0xb4>
>>>>>>> render
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
<<<<<<< HEAD
 80043ae:	b00b      	add	sp, #44	; 0x2c
 80043b0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80043b4:	4b2f      	ldr	r3, [pc, #188]	; (8004474 <HAL_TIM_MspPostInit+0xf0>)
 80043b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043b8:	f042 0220 	orr.w	r2, r2, #32
 80043bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80043be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c0:	f003 0320 	and.w	r3, r3, #32
 80043c4:	9301      	str	r3, [sp, #4]
 80043c6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM2_Pin|PWM3_Pin|PWM4_Pin;
 80043c8:	f44f 7360 	mov.w	r3, #896	; 0x380
 80043cc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ce:	2302      	movs	r3, #2
 80043d0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM5;
 80043d2:	2306      	movs	r3, #6
 80043d4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80043d6:	a905      	add	r1, sp, #20
 80043d8:	4827      	ldr	r0, [pc, #156]	; (8004478 <HAL_TIM_MspPostInit+0xf4>)
 80043da:	f002 fc37 	bl	8006c4c <HAL_GPIO_Init>
 80043de:	e7e6      	b.n	80043ae <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043e0:	4b24      	ldr	r3, [pc, #144]	; (8004474 <HAL_TIM_MspPostInit+0xf0>)
 80043e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043e4:	f042 0204 	orr.w	r2, r2, #4
 80043e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80043ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	9302      	str	r3, [sp, #8]
 80043f2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = PWM10_Pin|PWM11_Pin|PWM12_Pin|PWM13_Pin;
 80043f4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80043f8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043fa:	2302      	movs	r3, #2
 80043fc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80043fe:	2304      	movs	r3, #4
 8004400:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004402:	a905      	add	r1, sp, #20
 8004404:	481d      	ldr	r0, [pc, #116]	; (800447c <HAL_TIM_MspPostInit+0xf8>)
 8004406:	f002 fc21 	bl	8006c4c <HAL_GPIO_Init>
 800440a:	e7d0      	b.n	80043ae <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800440c:	4b19      	ldr	r3, [pc, #100]	; (8004474 <HAL_TIM_MspPostInit+0xf0>)
 800440e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004410:	f042 0220 	orr.w	r2, r2, #32
 8004414:	64da      	str	r2, [r3, #76]	; 0x4c
 8004416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	9303      	str	r3, [sp, #12]
 800441e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = PWM5_Pin;
 8004420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004424:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004426:	2302      	movs	r3, #2
 8004428:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM15;
 800442a:	2303      	movs	r3, #3
 800442c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(PWM5_GPIO_Port, &GPIO_InitStruct);
 800442e:	a905      	add	r1, sp, #20
 8004430:	4811      	ldr	r0, [pc, #68]	; (8004478 <HAL_TIM_MspPostInit+0xf4>)
 8004432:	f002 fc0b 	bl	8006c4c <HAL_GPIO_Init>
 8004436:	e7ba      	b.n	80043ae <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004438:	4b0e      	ldr	r3, [pc, #56]	; (8004474 <HAL_TIM_MspPostInit+0xf0>)
 800443a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800443c:	f042 0220 	orr.w	r2, r2, #32
 8004440:	64da      	str	r2, [r3, #76]	; 0x4c
 8004442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	9304      	str	r3, [sp, #16]
 800444a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = PWM6_Pin|PWM7_Pin|PWM8_Pin|PWM9_Pin;
 800444c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004450:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004452:	2302      	movs	r3, #2
 8004454:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM20;
 8004456:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004458:	a905      	add	r1, sp, #20
 800445a:	4807      	ldr	r0, [pc, #28]	; (8004478 <HAL_TIM_MspPostInit+0xf4>)
 800445c:	f002 fbf6 	bl	8006c4c <HAL_GPIO_Init>
}
 8004460:	e7a5      	b.n	80043ae <HAL_TIM_MspPostInit+0x2a>
 8004462:	bf00      	nop
 8004464:	40000c00 	.word	0x40000c00
 8004468:	40013400 	.word	0x40013400
 800446c:	40014000 	.word	0x40014000
 8004470:	40015000 	.word	0x40015000
 8004474:	40021000 	.word	0x40021000
 8004478:	48001400 	.word	0x48001400
 800447c:	48000800 	.word	0x48000800

08004480 <MX_TIM5_Init>:
{
 8004480:	b500      	push	{lr}
 8004482:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004484:	2300      	movs	r3, #0
 8004486:	930a      	str	r3, [sp, #40]	; 0x28
 8004488:	930b      	str	r3, [sp, #44]	; 0x2c
 800448a:	930c      	str	r3, [sp, #48]	; 0x30
 800448c:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800448e:	9307      	str	r3, [sp, #28]
 8004490:	9308      	str	r3, [sp, #32]
 8004492:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	9301      	str	r3, [sp, #4]
 8004498:	9302      	str	r3, [sp, #8]
 800449a:	9303      	str	r3, [sp, #12]
 800449c:	9304      	str	r3, [sp, #16]
 800449e:	9305      	str	r3, [sp, #20]
 80044a0:	9306      	str	r3, [sp, #24]
  htim5.Instance = TIM5;
 80044a2:	4830      	ldr	r0, [pc, #192]	; (8004564 <MX_TIM5_Init+0xe4>)
 80044a4:	4a30      	ldr	r2, [pc, #192]	; (8004568 <MX_TIM5_Init+0xe8>)
 80044a6:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 10;
 80044a8:	220a      	movs	r2, #10
 80044aa:	6042      	str	r2, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044ac:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 10000;
 80044ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80044b2:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044b4:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80044b6:	2380      	movs	r3, #128	; 0x80
 80044b8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80044ba:	f005 fa3d 	bl	8009938 <HAL_TIM_Base_Init>
 80044be:	2800      	cmp	r0, #0
 80044c0:	d13a      	bne.n	8004538 <MX_TIM5_Init+0xb8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044c6:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80044c8:	a90a      	add	r1, sp, #40	; 0x28
 80044ca:	4826      	ldr	r0, [pc, #152]	; (8004564 <MX_TIM5_Init+0xe4>)
 80044cc:	f005 fb8c 	bl	8009be8 <HAL_TIM_ConfigClockSource>
 80044d0:	2800      	cmp	r0, #0
 80044d2:	d134      	bne.n	800453e <MX_TIM5_Init+0xbe>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80044d4:	4823      	ldr	r0, [pc, #140]	; (8004564 <MX_TIM5_Init+0xe4>)
 80044d6:	f005 fa5f 	bl	8009998 <HAL_TIM_PWM_Init>
 80044da:	2800      	cmp	r0, #0
 80044dc:	d132      	bne.n	8004544 <MX_TIM5_Init+0xc4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044de:	2300      	movs	r3, #0
 80044e0:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044e2:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80044e4:	a907      	add	r1, sp, #28
 80044e6:	481f      	ldr	r0, [pc, #124]	; (8004564 <MX_TIM5_Init+0xe4>)
 80044e8:	f005 fc28 	bl	8009d3c <HAL_TIMEx_MasterConfigSynchronization>
 80044ec:	bb68      	cbnz	r0, 800454a <MX_TIM5_Init+0xca>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044ee:	2360      	movs	r3, #96	; 0x60
 80044f0:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 200;
 80044f2:	23c8      	movs	r3, #200	; 0xc8
 80044f4:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044f6:	2300      	movs	r3, #0
 80044f8:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044fa:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80044fc:	2204      	movs	r2, #4
 80044fe:	4669      	mov	r1, sp
 8004500:	4818      	ldr	r0, [pc, #96]	; (8004564 <MX_TIM5_Init+0xe4>)
 8004502:	f005 fac7 	bl	8009a94 <HAL_TIM_PWM_ConfigChannel>
 8004506:	bb18      	cbnz	r0, 8004550 <MX_TIM5_Init+0xd0>
  sConfigOC.Pulse = 400;
 8004508:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800450c:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800450e:	2208      	movs	r2, #8
 8004510:	4669      	mov	r1, sp
 8004512:	4814      	ldr	r0, [pc, #80]	; (8004564 <MX_TIM5_Init+0xe4>)
 8004514:	f005 fabe 	bl	8009a94 <HAL_TIM_PWM_ConfigChannel>
 8004518:	b9e8      	cbnz	r0, 8004556 <MX_TIM5_Init+0xd6>
  sConfigOC.Pulse = 600;
 800451a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800451e:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004520:	220c      	movs	r2, #12
 8004522:	4669      	mov	r1, sp
 8004524:	480f      	ldr	r0, [pc, #60]	; (8004564 <MX_TIM5_Init+0xe4>)
 8004526:	f005 fab5 	bl	8009a94 <HAL_TIM_PWM_ConfigChannel>
 800452a:	b9b8      	cbnz	r0, 800455c <MX_TIM5_Init+0xdc>
  HAL_TIM_MspPostInit(&htim5);
 800452c:	480d      	ldr	r0, [pc, #52]	; (8004564 <MX_TIM5_Init+0xe4>)
 800452e:	f7ff ff29 	bl	8004384 <HAL_TIM_MspPostInit>
}
 8004532:	b00f      	add	sp, #60	; 0x3c
 8004534:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004538:	f7fd fd1e 	bl	8001f78 <Error_Handler>
 800453c:	e7c1      	b.n	80044c2 <MX_TIM5_Init+0x42>
    Error_Handler();
 800453e:	f7fd fd1b 	bl	8001f78 <Error_Handler>
 8004542:	e7c7      	b.n	80044d4 <MX_TIM5_Init+0x54>
    Error_Handler();
 8004544:	f7fd fd18 	bl	8001f78 <Error_Handler>
 8004548:	e7c9      	b.n	80044de <MX_TIM5_Init+0x5e>
    Error_Handler();
 800454a:	f7fd fd15 	bl	8001f78 <Error_Handler>
 800454e:	e7ce      	b.n	80044ee <MX_TIM5_Init+0x6e>
    Error_Handler();
 8004550:	f7fd fd12 	bl	8001f78 <Error_Handler>
 8004554:	e7d8      	b.n	8004508 <MX_TIM5_Init+0x88>
    Error_Handler();
 8004556:	f7fd fd0f 	bl	8001f78 <Error_Handler>
 800455a:	e7de      	b.n	800451a <MX_TIM5_Init+0x9a>
    Error_Handler();
 800455c:	f7fd fd0c 	bl	8001f78 <Error_Handler>
 8004560:	e7e4      	b.n	800452c <MX_TIM5_Init+0xac>
 8004562:	bf00      	nop
 8004564:	200111c8 	.word	0x200111c8
 8004568:	40000c00 	.word	0x40000c00

0800456c <MX_TIM8_Init>:
{
 800456c:	b510      	push	{r4, lr}
 800456e:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004570:	2400      	movs	r4, #0
 8004572:	9418      	str	r4, [sp, #96]	; 0x60
 8004574:	9419      	str	r4, [sp, #100]	; 0x64
 8004576:	941a      	str	r4, [sp, #104]	; 0x68
 8004578:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800457a:	9415      	str	r4, [sp, #84]	; 0x54
 800457c:	9416      	str	r4, [sp, #88]	; 0x58
 800457e:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004580:	940e      	str	r4, [sp, #56]	; 0x38
 8004582:	940f      	str	r4, [sp, #60]	; 0x3c
 8004584:	9410      	str	r4, [sp, #64]	; 0x40
 8004586:	9411      	str	r4, [sp, #68]	; 0x44
 8004588:	9412      	str	r4, [sp, #72]	; 0x48
 800458a:	9413      	str	r4, [sp, #76]	; 0x4c
 800458c:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800458e:	2234      	movs	r2, #52	; 0x34
 8004590:	4621      	mov	r1, r4
 8004592:	a801      	add	r0, sp, #4
 8004594:	f00a f820 	bl	800e5d8 <memset>
  htim8.Instance = TIM8;
 8004598:	4846      	ldr	r0, [pc, #280]	; (80046b4 <MX_TIM8_Init+0x148>)
 800459a:	4b47      	ldr	r3, [pc, #284]	; (80046b8 <MX_TIM8_Init+0x14c>)
 800459c:	6003      	str	r3, [r0, #0]
  htim8.Init.Prescaler = 0;
 800459e:	6044      	str	r4, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045a0:	6084      	str	r4, [r0, #8]
  htim8.Init.Period = 65535;
 80045a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045a6:	60c3      	str	r3, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045a8:	6104      	str	r4, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 80045aa:	6144      	str	r4, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045ac:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80045ae:	f005 f9c3 	bl	8009938 <HAL_TIM_Base_Init>
 80045b2:	2800      	cmp	r0, #0
 80045b4:	d162      	bne.n	800467c <MX_TIM8_Init+0x110>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045ba:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80045bc:	a918      	add	r1, sp, #96	; 0x60
 80045be:	483d      	ldr	r0, [pc, #244]	; (80046b4 <MX_TIM8_Init+0x148>)
 80045c0:	f005 fb12 	bl	8009be8 <HAL_TIM_ConfigClockSource>
 80045c4:	2800      	cmp	r0, #0
 80045c6:	d15c      	bne.n	8004682 <MX_TIM8_Init+0x116>
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80045c8:	483a      	ldr	r0, [pc, #232]	; (80046b4 <MX_TIM8_Init+0x148>)
 80045ca:	f005 f9e5 	bl	8009998 <HAL_TIM_PWM_Init>
 80045ce:	2800      	cmp	r0, #0
 80045d0:	d15a      	bne.n	8004688 <MX_TIM8_Init+0x11c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045d2:	2300      	movs	r3, #0
 80045d4:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80045d6:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045d8:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80045da:	a915      	add	r1, sp, #84	; 0x54
 80045dc:	4835      	ldr	r0, [pc, #212]	; (80046b4 <MX_TIM8_Init+0x148>)
 80045de:	f005 fbad 	bl	8009d3c <HAL_TIMEx_MasterConfigSynchronization>
 80045e2:	2800      	cmp	r0, #0
 80045e4:	d153      	bne.n	800468e <MX_TIM8_Init+0x122>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80045e6:	2360      	movs	r3, #96	; 0x60
 80045e8:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 1000;
 80045ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045ee:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80045f0:	2200      	movs	r2, #0
 80045f2:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80045f4:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80045f6:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80045f8:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80045fa:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80045fc:	a90e      	add	r1, sp, #56	; 0x38
 80045fe:	482d      	ldr	r0, [pc, #180]	; (80046b4 <MX_TIM8_Init+0x148>)
 8004600:	f005 fa48 	bl	8009a94 <HAL_TIM_PWM_ConfigChannel>
 8004604:	2800      	cmp	r0, #0
 8004606:	d145      	bne.n	8004694 <MX_TIM8_Init+0x128>
  sConfigOC.Pulse = 2000;
 8004608:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800460c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800460e:	2204      	movs	r2, #4
 8004610:	a90e      	add	r1, sp, #56	; 0x38
 8004612:	4828      	ldr	r0, [pc, #160]	; (80046b4 <MX_TIM8_Init+0x148>)
 8004614:	f005 fa3e 	bl	8009a94 <HAL_TIM_PWM_ConfigChannel>
 8004618:	2800      	cmp	r0, #0
 800461a:	d13e      	bne.n	800469a <MX_TIM8_Init+0x12e>
  sConfigOC.Pulse = 4000;
 800461c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8004620:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004622:	2208      	movs	r2, #8
 8004624:	a90e      	add	r1, sp, #56	; 0x38
 8004626:	4823      	ldr	r0, [pc, #140]	; (80046b4 <MX_TIM8_Init+0x148>)
 8004628:	f005 fa34 	bl	8009a94 <HAL_TIM_PWM_ConfigChannel>
 800462c:	2800      	cmp	r0, #0
 800462e:	d137      	bne.n	80046a0 <MX_TIM8_Init+0x134>
  sConfigOC.Pulse = 8000;
 8004630:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8004634:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004636:	220c      	movs	r2, #12
 8004638:	a90e      	add	r1, sp, #56	; 0x38
 800463a:	481e      	ldr	r0, [pc, #120]	; (80046b4 <MX_TIM8_Init+0x148>)
 800463c:	f005 fa2a 	bl	8009a94 <HAL_TIM_PWM_ConfigChannel>
 8004640:	2800      	cmp	r0, #0
 8004642:	d130      	bne.n	80046a6 <MX_TIM8_Init+0x13a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004644:	2300      	movs	r3, #0
 8004646:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004648:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800464a:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800464c:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800464e:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004650:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004654:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004656:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004658:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800465a:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800465c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004660:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004662:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004664:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004666:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004668:	a901      	add	r1, sp, #4
 800466a:	4812      	ldr	r0, [pc, #72]	; (80046b4 <MX_TIM8_Init+0x148>)
 800466c:	f005 fbbc 	bl	8009de8 <HAL_TIMEx_ConfigBreakDeadTime>
 8004670:	b9e0      	cbnz	r0, 80046ac <MX_TIM8_Init+0x140>
  HAL_TIM_MspPostInit(&htim8);
 8004672:	4810      	ldr	r0, [pc, #64]	; (80046b4 <MX_TIM8_Init+0x148>)
 8004674:	f7ff fe86 	bl	8004384 <HAL_TIM_MspPostInit>
}
 8004678:	b01c      	add	sp, #112	; 0x70
 800467a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800467c:	f7fd fc7c 	bl	8001f78 <Error_Handler>
 8004680:	e799      	b.n	80045b6 <MX_TIM8_Init+0x4a>
    Error_Handler();
 8004682:	f7fd fc79 	bl	8001f78 <Error_Handler>
 8004686:	e79f      	b.n	80045c8 <MX_TIM8_Init+0x5c>
    Error_Handler();
 8004688:	f7fd fc76 	bl	8001f78 <Error_Handler>
 800468c:	e7a1      	b.n	80045d2 <MX_TIM8_Init+0x66>
    Error_Handler();
 800468e:	f7fd fc73 	bl	8001f78 <Error_Handler>
 8004692:	e7a8      	b.n	80045e6 <MX_TIM8_Init+0x7a>
    Error_Handler();
 8004694:	f7fd fc70 	bl	8001f78 <Error_Handler>
 8004698:	e7b6      	b.n	8004608 <MX_TIM8_Init+0x9c>
    Error_Handler();
 800469a:	f7fd fc6d 	bl	8001f78 <Error_Handler>
 800469e:	e7bd      	b.n	800461c <MX_TIM8_Init+0xb0>
    Error_Handler();
 80046a0:	f7fd fc6a 	bl	8001f78 <Error_Handler>
 80046a4:	e7c4      	b.n	8004630 <MX_TIM8_Init+0xc4>
    Error_Handler();
 80046a6:	f7fd fc67 	bl	8001f78 <Error_Handler>
 80046aa:	e7cb      	b.n	8004644 <MX_TIM8_Init+0xd8>
    Error_Handler();
 80046ac:	f7fd fc64 	bl	8001f78 <Error_Handler>
 80046b0:	e7df      	b.n	8004672 <MX_TIM8_Init+0x106>
 80046b2:	bf00      	nop
 80046b4:	20011214 	.word	0x20011214
 80046b8:	40013400 	.word	0x40013400

080046bc <MX_TIM15_Init>:
{
 80046bc:	b510      	push	{r4, lr}
 80046be:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046c0:	2400      	movs	r4, #0
 80046c2:	9418      	str	r4, [sp, #96]	; 0x60
 80046c4:	9419      	str	r4, [sp, #100]	; 0x64
 80046c6:	941a      	str	r4, [sp, #104]	; 0x68
 80046c8:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046ca:	9415      	str	r4, [sp, #84]	; 0x54
 80046cc:	9416      	str	r4, [sp, #88]	; 0x58
 80046ce:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80046d0:	940e      	str	r4, [sp, #56]	; 0x38
 80046d2:	940f      	str	r4, [sp, #60]	; 0x3c
 80046d4:	9410      	str	r4, [sp, #64]	; 0x40
 80046d6:	9411      	str	r4, [sp, #68]	; 0x44
 80046d8:	9412      	str	r4, [sp, #72]	; 0x48
 80046da:	9413      	str	r4, [sp, #76]	; 0x4c
 80046dc:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80046de:	2234      	movs	r2, #52	; 0x34
 80046e0:	4621      	mov	r1, r4
 80046e2:	a801      	add	r0, sp, #4
 80046e4:	f009 ff78 	bl	800e5d8 <memset>
  htim15.Instance = TIM15;
 80046e8:	482e      	ldr	r0, [pc, #184]	; (80047a4 <MX_TIM15_Init+0xe8>)
 80046ea:	4b2f      	ldr	r3, [pc, #188]	; (80047a8 <MX_TIM15_Init+0xec>)
 80046ec:	6003      	str	r3, [r0, #0]
  htim15.Init.Prescaler = 0;
 80046ee:	6044      	str	r4, [r0, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046f0:	6084      	str	r4, [r0, #8]
  htim15.Init.Period = 32768;
 80046f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046f6:	60c3      	str	r3, [r0, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046f8:	6104      	str	r4, [r0, #16]
  htim15.Init.RepetitionCounter = 0;
 80046fa:	6144      	str	r4, [r0, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046fc:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80046fe:	f005 f91b 	bl	8009938 <HAL_TIM_Base_Init>
 8004702:	2800      	cmp	r0, #0
 8004704:	d13c      	bne.n	8004780 <MX_TIM15_Init+0xc4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800470a:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800470c:	a918      	add	r1, sp, #96	; 0x60
 800470e:	4825      	ldr	r0, [pc, #148]	; (80047a4 <MX_TIM15_Init+0xe8>)
 8004710:	f005 fa6a 	bl	8009be8 <HAL_TIM_ConfigClockSource>
 8004714:	2800      	cmp	r0, #0
 8004716:	d136      	bne.n	8004786 <MX_TIM15_Init+0xca>
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8004718:	4822      	ldr	r0, [pc, #136]	; (80047a4 <MX_TIM15_Init+0xe8>)
 800471a:	f005 f93d 	bl	8009998 <HAL_TIM_PWM_Init>
 800471e:	2800      	cmp	r0, #0
 8004720:	d134      	bne.n	800478c <MX_TIM15_Init+0xd0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004722:	2300      	movs	r3, #0
 8004724:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004726:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004728:	a915      	add	r1, sp, #84	; 0x54
 800472a:	481e      	ldr	r0, [pc, #120]	; (80047a4 <MX_TIM15_Init+0xe8>)
 800472c:	f005 fb06 	bl	8009d3c <HAL_TIMEx_MasterConfigSynchronization>
 8004730:	2800      	cmp	r0, #0
 8004732:	d12e      	bne.n	8004792 <MX_TIM15_Init+0xd6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004734:	2360      	movs	r3, #96	; 0x60
 8004736:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 16000;
 8004738:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800473c:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800473e:	2300      	movs	r3, #0
 8004740:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004742:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004744:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004746:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004748:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800474a:	2204      	movs	r2, #4
 800474c:	a90e      	add	r1, sp, #56	; 0x38
 800474e:	4815      	ldr	r0, [pc, #84]	; (80047a4 <MX_TIM15_Init+0xe8>)
 8004750:	f005 f9a0 	bl	8009a94 <HAL_TIM_PWM_ConfigChannel>
 8004754:	bb00      	cbnz	r0, 8004798 <MX_TIM15_Init+0xdc>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004756:	2300      	movs	r3, #0
 8004758:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800475a:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800475c:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800475e:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004760:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004762:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004766:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004768:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800476a:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800476c:	a901      	add	r1, sp, #4
 800476e:	480d      	ldr	r0, [pc, #52]	; (80047a4 <MX_TIM15_Init+0xe8>)
 8004770:	f005 fb3a 	bl	8009de8 <HAL_TIMEx_ConfigBreakDeadTime>
 8004774:	b998      	cbnz	r0, 800479e <MX_TIM15_Init+0xe2>
  HAL_TIM_MspPostInit(&htim15);
 8004776:	480b      	ldr	r0, [pc, #44]	; (80047a4 <MX_TIM15_Init+0xe8>)
 8004778:	f7ff fe04 	bl	8004384 <HAL_TIM_MspPostInit>
}
 800477c:	b01c      	add	sp, #112	; 0x70
 800477e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004780:	f7fd fbfa 	bl	8001f78 <Error_Handler>
 8004784:	e7bf      	b.n	8004706 <MX_TIM15_Init+0x4a>
    Error_Handler();
 8004786:	f7fd fbf7 	bl	8001f78 <Error_Handler>
 800478a:	e7c5      	b.n	8004718 <MX_TIM15_Init+0x5c>
    Error_Handler();
 800478c:	f7fd fbf4 	bl	8001f78 <Error_Handler>
 8004790:	e7c7      	b.n	8004722 <MX_TIM15_Init+0x66>
    Error_Handler();
 8004792:	f7fd fbf1 	bl	8001f78 <Error_Handler>
 8004796:	e7cd      	b.n	8004734 <MX_TIM15_Init+0x78>
    Error_Handler();
 8004798:	f7fd fbee 	bl	8001f78 <Error_Handler>
 800479c:	e7db      	b.n	8004756 <MX_TIM15_Init+0x9a>
    Error_Handler();
 800479e:	f7fd fbeb 	bl	8001f78 <Error_Handler>
 80047a2:	e7e8      	b.n	8004776 <MX_TIM15_Init+0xba>
 80047a4:	20011130 	.word	0x20011130
 80047a8:	40014000 	.word	0x40014000

080047ac <MX_TIM20_Init>:
{
 80047ac:	b510      	push	{r4, lr}
 80047ae:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047b0:	2400      	movs	r4, #0
 80047b2:	9418      	str	r4, [sp, #96]	; 0x60
 80047b4:	9419      	str	r4, [sp, #100]	; 0x64
 80047b6:	941a      	str	r4, [sp, #104]	; 0x68
 80047b8:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047ba:	9415      	str	r4, [sp, #84]	; 0x54
 80047bc:	9416      	str	r4, [sp, #88]	; 0x58
 80047be:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80047c0:	940e      	str	r4, [sp, #56]	; 0x38
 80047c2:	940f      	str	r4, [sp, #60]	; 0x3c
 80047c4:	9410      	str	r4, [sp, #64]	; 0x40
 80047c6:	9411      	str	r4, [sp, #68]	; 0x44
 80047c8:	9412      	str	r4, [sp, #72]	; 0x48
 80047ca:	9413      	str	r4, [sp, #76]	; 0x4c
 80047cc:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80047ce:	2234      	movs	r2, #52	; 0x34
 80047d0:	4621      	mov	r1, r4
 80047d2:	a801      	add	r0, sp, #4
 80047d4:	f009 ff00 	bl	800e5d8 <memset>
  htim20.Instance = TIM20;
 80047d8:	4846      	ldr	r0, [pc, #280]	; (80048f4 <MX_TIM20_Init+0x148>)
 80047da:	4b47      	ldr	r3, [pc, #284]	; (80048f8 <MX_TIM20_Init+0x14c>)
 80047dc:	6003      	str	r3, [r0, #0]
  htim20.Init.Prescaler = 0;
 80047de:	6044      	str	r4, [r0, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047e0:	6084      	str	r4, [r0, #8]
  htim20.Init.Period = 16000;
 80047e2:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 80047e6:	60c3      	str	r3, [r0, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047e8:	6104      	str	r4, [r0, #16]
  htim20.Init.RepetitionCounter = 0;
 80047ea:	6144      	str	r4, [r0, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047ec:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 80047ee:	f005 f8a3 	bl	8009938 <HAL_TIM_Base_Init>
 80047f2:	2800      	cmp	r0, #0
 80047f4:	d162      	bne.n	80048bc <MX_TIM20_Init+0x110>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047fa:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 80047fc:	a918      	add	r1, sp, #96	; 0x60
 80047fe:	483d      	ldr	r0, [pc, #244]	; (80048f4 <MX_TIM20_Init+0x148>)
 8004800:	f005 f9f2 	bl	8009be8 <HAL_TIM_ConfigClockSource>
 8004804:	2800      	cmp	r0, #0
 8004806:	d15c      	bne.n	80048c2 <MX_TIM20_Init+0x116>
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8004808:	483a      	ldr	r0, [pc, #232]	; (80048f4 <MX_TIM20_Init+0x148>)
 800480a:	f005 f8c5 	bl	8009998 <HAL_TIM_PWM_Init>
 800480e:	2800      	cmp	r0, #0
 8004810:	d15a      	bne.n	80048c8 <MX_TIM20_Init+0x11c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004812:	2300      	movs	r3, #0
 8004814:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004816:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004818:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 800481a:	a915      	add	r1, sp, #84	; 0x54
 800481c:	4835      	ldr	r0, [pc, #212]	; (80048f4 <MX_TIM20_Init+0x148>)
 800481e:	f005 fa8d 	bl	8009d3c <HAL_TIMEx_MasterConfigSynchronization>
 8004822:	2800      	cmp	r0, #0
 8004824:	d153      	bne.n	80048ce <MX_TIM20_Init+0x122>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004826:	2360      	movs	r3, #96	; 0x60
 8004828:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 8000;
 800482a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800482e:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004830:	2200      	movs	r2, #0
 8004832:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004834:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004836:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004838:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800483a:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800483c:	a90e      	add	r1, sp, #56	; 0x38
 800483e:	482d      	ldr	r0, [pc, #180]	; (80048f4 <MX_TIM20_Init+0x148>)
 8004840:	f005 f928 	bl	8009a94 <HAL_TIM_PWM_ConfigChannel>
 8004844:	2800      	cmp	r0, #0
 8004846:	d145      	bne.n	80048d4 <MX_TIM20_Init+0x128>
  sConfigOC.Pulse = 10000;
 8004848:	f242 7310 	movw	r3, #10000	; 0x2710
 800484c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800484e:	2204      	movs	r2, #4
 8004850:	a90e      	add	r1, sp, #56	; 0x38
 8004852:	4828      	ldr	r0, [pc, #160]	; (80048f4 <MX_TIM20_Init+0x148>)
 8004854:	f005 f91e 	bl	8009a94 <HAL_TIM_PWM_ConfigChannel>
 8004858:	2800      	cmp	r0, #0
 800485a:	d13e      	bne.n	80048da <MX_TIM20_Init+0x12e>
  sConfigOC.Pulse = 12000;
 800485c:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8004860:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004862:	2208      	movs	r2, #8
 8004864:	a90e      	add	r1, sp, #56	; 0x38
 8004866:	4823      	ldr	r0, [pc, #140]	; (80048f4 <MX_TIM20_Init+0x148>)
 8004868:	f005 f914 	bl	8009a94 <HAL_TIM_PWM_ConfigChannel>
 800486c:	2800      	cmp	r0, #0
 800486e:	d137      	bne.n	80048e0 <MX_TIM20_Init+0x134>
  sConfigOC.Pulse = 15000;
 8004870:	f643 2398 	movw	r3, #15000	; 0x3a98
 8004874:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004876:	220c      	movs	r2, #12
 8004878:	a90e      	add	r1, sp, #56	; 0x38
 800487a:	481e      	ldr	r0, [pc, #120]	; (80048f4 <MX_TIM20_Init+0x148>)
 800487c:	f005 f90a 	bl	8009a94 <HAL_TIM_PWM_ConfigChannel>
 8004880:	2800      	cmp	r0, #0
 8004882:	d130      	bne.n	80048e6 <MX_TIM20_Init+0x13a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004884:	2300      	movs	r3, #0
 8004886:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004888:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800488a:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800488c:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800488e:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004890:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004894:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004896:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004898:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800489a:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800489c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048a0:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80048a2:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80048a4:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80048a6:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 80048a8:	a901      	add	r1, sp, #4
 80048aa:	4812      	ldr	r0, [pc, #72]	; (80048f4 <MX_TIM20_Init+0x148>)
 80048ac:	f005 fa9c 	bl	8009de8 <HAL_TIMEx_ConfigBreakDeadTime>
 80048b0:	b9e0      	cbnz	r0, 80048ec <MX_TIM20_Init+0x140>
  HAL_TIM_MspPostInit(&htim20);
 80048b2:	4810      	ldr	r0, [pc, #64]	; (80048f4 <MX_TIM20_Init+0x148>)
 80048b4:	f7ff fd66 	bl	8004384 <HAL_TIM_MspPostInit>
}
 80048b8:	b01c      	add	sp, #112	; 0x70
 80048ba:	bd10      	pop	{r4, pc}
    Error_Handler();
 80048bc:	f7fd fb5c 	bl	8001f78 <Error_Handler>
 80048c0:	e799      	b.n	80047f6 <MX_TIM20_Init+0x4a>
    Error_Handler();
 80048c2:	f7fd fb59 	bl	8001f78 <Error_Handler>
 80048c6:	e79f      	b.n	8004808 <MX_TIM20_Init+0x5c>
    Error_Handler();
 80048c8:	f7fd fb56 	bl	8001f78 <Error_Handler>
 80048cc:	e7a1      	b.n	8004812 <MX_TIM20_Init+0x66>
    Error_Handler();
 80048ce:	f7fd fb53 	bl	8001f78 <Error_Handler>
 80048d2:	e7a8      	b.n	8004826 <MX_TIM20_Init+0x7a>
    Error_Handler();
 80048d4:	f7fd fb50 	bl	8001f78 <Error_Handler>
 80048d8:	e7b6      	b.n	8004848 <MX_TIM20_Init+0x9c>
    Error_Handler();
 80048da:	f7fd fb4d 	bl	8001f78 <Error_Handler>
 80048de:	e7bd      	b.n	800485c <MX_TIM20_Init+0xb0>
    Error_Handler();
 80048e0:	f7fd fb4a 	bl	8001f78 <Error_Handler>
 80048e4:	e7c4      	b.n	8004870 <MX_TIM20_Init+0xc4>
    Error_Handler();
 80048e6:	f7fd fb47 	bl	8001f78 <Error_Handler>
 80048ea:	e7cb      	b.n	8004884 <MX_TIM20_Init+0xd8>
    Error_Handler();
 80048ec:	f7fd fb44 	bl	8001f78 <Error_Handler>
 80048f0:	e7df      	b.n	80048b2 <MX_TIM20_Init+0x106>
 80048f2:	bf00      	nop
 80048f4:	2001117c 	.word	0x2001117c
 80048f8:	40015000 	.word	0x40015000

080048fc <MX_UART4_Init>:
=======
 80043e6:	b00b      	add	sp, #44	; 0x2c
 80043e8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80043ec:	4b2f      	ldr	r3, [pc, #188]	; (80044ac <HAL_TIM_MspPostInit+0xf0>)
 80043ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043f0:	f042 0220 	orr.w	r2, r2, #32
 80043f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80043f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM2_Pin|PWM3_Pin|PWM4_Pin;
 8004400:	f44f 7360 	mov.w	r3, #896	; 0x380
 8004404:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004406:	2302      	movs	r3, #2
 8004408:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM5;
 800440a:	2306      	movs	r3, #6
 800440c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800440e:	a905      	add	r1, sp, #20
 8004410:	4827      	ldr	r0, [pc, #156]	; (80044b0 <HAL_TIM_MspPostInit+0xf4>)
 8004412:	f002 fb87 	bl	8006b24 <HAL_GPIO_Init>
 8004416:	e7e6      	b.n	80043e6 <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004418:	4b24      	ldr	r3, [pc, #144]	; (80044ac <HAL_TIM_MspPostInit+0xf0>)
 800441a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800441c:	f042 0204 	orr.w	r2, r2, #4
 8004420:	64da      	str	r2, [r3, #76]	; 0x4c
 8004422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	9302      	str	r3, [sp, #8]
 800442a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = PWM10_Pin|PWM11_Pin|PWM12_Pin|PWM13_Pin;
 800442c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004430:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004432:	2302      	movs	r3, #2
 8004434:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004436:	2304      	movs	r3, #4
 8004438:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800443a:	a905      	add	r1, sp, #20
 800443c:	481d      	ldr	r0, [pc, #116]	; (80044b4 <HAL_TIM_MspPostInit+0xf8>)
 800443e:	f002 fb71 	bl	8006b24 <HAL_GPIO_Init>
 8004442:	e7d0      	b.n	80043e6 <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004444:	4b19      	ldr	r3, [pc, #100]	; (80044ac <HAL_TIM_MspPostInit+0xf0>)
 8004446:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004448:	f042 0220 	orr.w	r2, r2, #32
 800444c:	64da      	str	r2, [r3, #76]	; 0x4c
 800444e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004450:	f003 0320 	and.w	r3, r3, #32
 8004454:	9303      	str	r3, [sp, #12]
 8004456:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = PWM5_Pin;
 8004458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800445c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800445e:	2302      	movs	r3, #2
 8004460:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM15;
 8004462:	2303      	movs	r3, #3
 8004464:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(PWM5_GPIO_Port, &GPIO_InitStruct);
 8004466:	a905      	add	r1, sp, #20
 8004468:	4811      	ldr	r0, [pc, #68]	; (80044b0 <HAL_TIM_MspPostInit+0xf4>)
 800446a:	f002 fb5b 	bl	8006b24 <HAL_GPIO_Init>
 800446e:	e7ba      	b.n	80043e6 <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004470:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <HAL_TIM_MspPostInit+0xf0>)
 8004472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004474:	f042 0220 	orr.w	r2, r2, #32
 8004478:	64da      	str	r2, [r3, #76]	; 0x4c
 800447a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447c:	f003 0320 	and.w	r3, r3, #32
 8004480:	9304      	str	r3, [sp, #16]
 8004482:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = PWM6_Pin|PWM7_Pin|PWM8_Pin|PWM9_Pin;
 8004484:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004488:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800448a:	2302      	movs	r3, #2
 800448c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM20;
 800448e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004490:	a905      	add	r1, sp, #20
 8004492:	4807      	ldr	r0, [pc, #28]	; (80044b0 <HAL_TIM_MspPostInit+0xf4>)
 8004494:	f002 fb46 	bl	8006b24 <HAL_GPIO_Init>
}
 8004498:	e7a5      	b.n	80043e6 <HAL_TIM_MspPostInit+0x2a>
 800449a:	bf00      	nop
 800449c:	40000c00 	.word	0x40000c00
 80044a0:	40013400 	.word	0x40013400
 80044a4:	40014000 	.word	0x40014000
 80044a8:	40015000 	.word	0x40015000
 80044ac:	40021000 	.word	0x40021000
 80044b0:	48001400 	.word	0x48001400
 80044b4:	48000800 	.word	0x48000800

080044b8 <MX_TIM5_Init>:
{
 80044b8:	b500      	push	{lr}
 80044ba:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044bc:	2300      	movs	r3, #0
 80044be:	930a      	str	r3, [sp, #40]	; 0x28
 80044c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80044c2:	930c      	str	r3, [sp, #48]	; 0x30
 80044c4:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044c6:	9307      	str	r3, [sp, #28]
 80044c8:	9308      	str	r3, [sp, #32]
 80044ca:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	9301      	str	r3, [sp, #4]
 80044d0:	9302      	str	r3, [sp, #8]
 80044d2:	9303      	str	r3, [sp, #12]
 80044d4:	9304      	str	r3, [sp, #16]
 80044d6:	9305      	str	r3, [sp, #20]
 80044d8:	9306      	str	r3, [sp, #24]
  htim5.Instance = TIM5;
 80044da:	4830      	ldr	r0, [pc, #192]	; (800459c <MX_TIM5_Init+0xe4>)
 80044dc:	4a30      	ldr	r2, [pc, #192]	; (80045a0 <MX_TIM5_Init+0xe8>)
 80044de:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 10;
 80044e0:	220a      	movs	r2, #10
 80044e2:	6042      	str	r2, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044e4:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 10000;
 80044e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80044ea:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044ec:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80044ee:	2380      	movs	r3, #128	; 0x80
 80044f0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80044f2:	f005 f98d 	bl	8009810 <HAL_TIM_Base_Init>
 80044f6:	2800      	cmp	r0, #0
 80044f8:	d13a      	bne.n	8004570 <MX_TIM5_Init+0xb8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044fe:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004500:	a90a      	add	r1, sp, #40	; 0x28
 8004502:	4826      	ldr	r0, [pc, #152]	; (800459c <MX_TIM5_Init+0xe4>)
 8004504:	f005 fadc 	bl	8009ac0 <HAL_TIM_ConfigClockSource>
 8004508:	2800      	cmp	r0, #0
 800450a:	d134      	bne.n	8004576 <MX_TIM5_Init+0xbe>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800450c:	4823      	ldr	r0, [pc, #140]	; (800459c <MX_TIM5_Init+0xe4>)
 800450e:	f005 f9af 	bl	8009870 <HAL_TIM_PWM_Init>
 8004512:	2800      	cmp	r0, #0
 8004514:	d132      	bne.n	800457c <MX_TIM5_Init+0xc4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004516:	2300      	movs	r3, #0
 8004518:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800451a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800451c:	a907      	add	r1, sp, #28
 800451e:	481f      	ldr	r0, [pc, #124]	; (800459c <MX_TIM5_Init+0xe4>)
 8004520:	f005 fb78 	bl	8009c14 <HAL_TIMEx_MasterConfigSynchronization>
 8004524:	bb68      	cbnz	r0, 8004582 <MX_TIM5_Init+0xca>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004526:	2360      	movs	r3, #96	; 0x60
 8004528:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 200;
 800452a:	23c8      	movs	r3, #200	; 0xc8
 800452c:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800452e:	2300      	movs	r3, #0
 8004530:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004532:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004534:	2204      	movs	r2, #4
 8004536:	4669      	mov	r1, sp
 8004538:	4818      	ldr	r0, [pc, #96]	; (800459c <MX_TIM5_Init+0xe4>)
 800453a:	f005 fa17 	bl	800996c <HAL_TIM_PWM_ConfigChannel>
 800453e:	bb18      	cbnz	r0, 8004588 <MX_TIM5_Init+0xd0>
  sConfigOC.Pulse = 400;
 8004540:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8004544:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004546:	2208      	movs	r2, #8
 8004548:	4669      	mov	r1, sp
 800454a:	4814      	ldr	r0, [pc, #80]	; (800459c <MX_TIM5_Init+0xe4>)
 800454c:	f005 fa0e 	bl	800996c <HAL_TIM_PWM_ConfigChannel>
 8004550:	b9e8      	cbnz	r0, 800458e <MX_TIM5_Init+0xd6>
  sConfigOC.Pulse = 600;
 8004552:	f44f 7316 	mov.w	r3, #600	; 0x258
 8004556:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004558:	220c      	movs	r2, #12
 800455a:	4669      	mov	r1, sp
 800455c:	480f      	ldr	r0, [pc, #60]	; (800459c <MX_TIM5_Init+0xe4>)
 800455e:	f005 fa05 	bl	800996c <HAL_TIM_PWM_ConfigChannel>
 8004562:	b9b8      	cbnz	r0, 8004594 <MX_TIM5_Init+0xdc>
  HAL_TIM_MspPostInit(&htim5);
 8004564:	480d      	ldr	r0, [pc, #52]	; (800459c <MX_TIM5_Init+0xe4>)
 8004566:	f7ff ff29 	bl	80043bc <HAL_TIM_MspPostInit>
}
 800456a:	b00f      	add	sp, #60	; 0x3c
 800456c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004570:	f7fd fd02 	bl	8001f78 <Error_Handler>
 8004574:	e7c1      	b.n	80044fa <MX_TIM5_Init+0x42>
    Error_Handler();
 8004576:	f7fd fcff 	bl	8001f78 <Error_Handler>
 800457a:	e7c7      	b.n	800450c <MX_TIM5_Init+0x54>
    Error_Handler();
 800457c:	f7fd fcfc 	bl	8001f78 <Error_Handler>
 8004580:	e7c9      	b.n	8004516 <MX_TIM5_Init+0x5e>
    Error_Handler();
 8004582:	f7fd fcf9 	bl	8001f78 <Error_Handler>
 8004586:	e7ce      	b.n	8004526 <MX_TIM5_Init+0x6e>
    Error_Handler();
 8004588:	f7fd fcf6 	bl	8001f78 <Error_Handler>
 800458c:	e7d8      	b.n	8004540 <MX_TIM5_Init+0x88>
    Error_Handler();
 800458e:	f7fd fcf3 	bl	8001f78 <Error_Handler>
 8004592:	e7de      	b.n	8004552 <MX_TIM5_Init+0x9a>
    Error_Handler();
 8004594:	f7fd fcf0 	bl	8001f78 <Error_Handler>
 8004598:	e7e4      	b.n	8004564 <MX_TIM5_Init+0xac>
 800459a:	bf00      	nop
 800459c:	200121b8 	.word	0x200121b8
 80045a0:	40000c00 	.word	0x40000c00

080045a4 <MX_TIM8_Init>:
{
 80045a4:	b510      	push	{r4, lr}
 80045a6:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045a8:	2400      	movs	r4, #0
 80045aa:	9418      	str	r4, [sp, #96]	; 0x60
 80045ac:	9419      	str	r4, [sp, #100]	; 0x64
 80045ae:	941a      	str	r4, [sp, #104]	; 0x68
 80045b0:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045b2:	9415      	str	r4, [sp, #84]	; 0x54
 80045b4:	9416      	str	r4, [sp, #88]	; 0x58
 80045b6:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045b8:	940e      	str	r4, [sp, #56]	; 0x38
 80045ba:	940f      	str	r4, [sp, #60]	; 0x3c
 80045bc:	9410      	str	r4, [sp, #64]	; 0x40
 80045be:	9411      	str	r4, [sp, #68]	; 0x44
 80045c0:	9412      	str	r4, [sp, #72]	; 0x48
 80045c2:	9413      	str	r4, [sp, #76]	; 0x4c
 80045c4:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80045c6:	2234      	movs	r2, #52	; 0x34
 80045c8:	4621      	mov	r1, r4
 80045ca:	a801      	add	r0, sp, #4
 80045cc:	f009 ff38 	bl	800e440 <memset>
  htim8.Instance = TIM8;
 80045d0:	4846      	ldr	r0, [pc, #280]	; (80046ec <MX_TIM8_Init+0x148>)
 80045d2:	4b47      	ldr	r3, [pc, #284]	; (80046f0 <MX_TIM8_Init+0x14c>)
 80045d4:	6003      	str	r3, [r0, #0]
  htim8.Init.Prescaler = 0;
 80045d6:	6044      	str	r4, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045d8:	6084      	str	r4, [r0, #8]
  htim8.Init.Period = 65535;
 80045da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045de:	60c3      	str	r3, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045e0:	6104      	str	r4, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 80045e2:	6144      	str	r4, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045e4:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80045e6:	f005 f913 	bl	8009810 <HAL_TIM_Base_Init>
 80045ea:	2800      	cmp	r0, #0
 80045ec:	d162      	bne.n	80046b4 <MX_TIM8_Init+0x110>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045f2:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80045f4:	a918      	add	r1, sp, #96	; 0x60
 80045f6:	483d      	ldr	r0, [pc, #244]	; (80046ec <MX_TIM8_Init+0x148>)
 80045f8:	f005 fa62 	bl	8009ac0 <HAL_TIM_ConfigClockSource>
 80045fc:	2800      	cmp	r0, #0
 80045fe:	d15c      	bne.n	80046ba <MX_TIM8_Init+0x116>
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004600:	483a      	ldr	r0, [pc, #232]	; (80046ec <MX_TIM8_Init+0x148>)
 8004602:	f005 f935 	bl	8009870 <HAL_TIM_PWM_Init>
 8004606:	2800      	cmp	r0, #0
 8004608:	d15a      	bne.n	80046c0 <MX_TIM8_Init+0x11c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800460a:	2300      	movs	r3, #0
 800460c:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800460e:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004610:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004612:	a915      	add	r1, sp, #84	; 0x54
 8004614:	4835      	ldr	r0, [pc, #212]	; (80046ec <MX_TIM8_Init+0x148>)
 8004616:	f005 fafd 	bl	8009c14 <HAL_TIMEx_MasterConfigSynchronization>
 800461a:	2800      	cmp	r0, #0
 800461c:	d153      	bne.n	80046c6 <MX_TIM8_Init+0x122>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800461e:	2360      	movs	r3, #96	; 0x60
 8004620:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 1000;
 8004622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004626:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004628:	2200      	movs	r2, #0
 800462a:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800462c:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800462e:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004630:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004632:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004634:	a90e      	add	r1, sp, #56	; 0x38
 8004636:	482d      	ldr	r0, [pc, #180]	; (80046ec <MX_TIM8_Init+0x148>)
 8004638:	f005 f998 	bl	800996c <HAL_TIM_PWM_ConfigChannel>
 800463c:	2800      	cmp	r0, #0
 800463e:	d145      	bne.n	80046cc <MX_TIM8_Init+0x128>
  sConfigOC.Pulse = 2000;
 8004640:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004644:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004646:	2204      	movs	r2, #4
 8004648:	a90e      	add	r1, sp, #56	; 0x38
 800464a:	4828      	ldr	r0, [pc, #160]	; (80046ec <MX_TIM8_Init+0x148>)
 800464c:	f005 f98e 	bl	800996c <HAL_TIM_PWM_ConfigChannel>
 8004650:	2800      	cmp	r0, #0
 8004652:	d13e      	bne.n	80046d2 <MX_TIM8_Init+0x12e>
  sConfigOC.Pulse = 4000;
 8004654:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8004658:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800465a:	2208      	movs	r2, #8
 800465c:	a90e      	add	r1, sp, #56	; 0x38
 800465e:	4823      	ldr	r0, [pc, #140]	; (80046ec <MX_TIM8_Init+0x148>)
 8004660:	f005 f984 	bl	800996c <HAL_TIM_PWM_ConfigChannel>
 8004664:	2800      	cmp	r0, #0
 8004666:	d137      	bne.n	80046d8 <MX_TIM8_Init+0x134>
  sConfigOC.Pulse = 8000;
 8004668:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800466c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800466e:	220c      	movs	r2, #12
 8004670:	a90e      	add	r1, sp, #56	; 0x38
 8004672:	481e      	ldr	r0, [pc, #120]	; (80046ec <MX_TIM8_Init+0x148>)
 8004674:	f005 f97a 	bl	800996c <HAL_TIM_PWM_ConfigChannel>
 8004678:	2800      	cmp	r0, #0
 800467a:	d130      	bne.n	80046de <MX_TIM8_Init+0x13a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800467c:	2300      	movs	r3, #0
 800467e:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004680:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004682:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004684:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004686:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004688:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800468c:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800468e:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004690:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004692:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004694:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004698:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800469a:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800469c:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800469e:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80046a0:	a901      	add	r1, sp, #4
 80046a2:	4812      	ldr	r0, [pc, #72]	; (80046ec <MX_TIM8_Init+0x148>)
 80046a4:	f005 fb0c 	bl	8009cc0 <HAL_TIMEx_ConfigBreakDeadTime>
 80046a8:	b9e0      	cbnz	r0, 80046e4 <MX_TIM8_Init+0x140>
  HAL_TIM_MspPostInit(&htim8);
 80046aa:	4810      	ldr	r0, [pc, #64]	; (80046ec <MX_TIM8_Init+0x148>)
 80046ac:	f7ff fe86 	bl	80043bc <HAL_TIM_MspPostInit>
}
 80046b0:	b01c      	add	sp, #112	; 0x70
 80046b2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80046b4:	f7fd fc60 	bl	8001f78 <Error_Handler>
 80046b8:	e799      	b.n	80045ee <MX_TIM8_Init+0x4a>
    Error_Handler();
 80046ba:	f7fd fc5d 	bl	8001f78 <Error_Handler>
 80046be:	e79f      	b.n	8004600 <MX_TIM8_Init+0x5c>
    Error_Handler();
 80046c0:	f7fd fc5a 	bl	8001f78 <Error_Handler>
 80046c4:	e7a1      	b.n	800460a <MX_TIM8_Init+0x66>
    Error_Handler();
 80046c6:	f7fd fc57 	bl	8001f78 <Error_Handler>
 80046ca:	e7a8      	b.n	800461e <MX_TIM8_Init+0x7a>
    Error_Handler();
 80046cc:	f7fd fc54 	bl	8001f78 <Error_Handler>
 80046d0:	e7b6      	b.n	8004640 <MX_TIM8_Init+0x9c>
    Error_Handler();
 80046d2:	f7fd fc51 	bl	8001f78 <Error_Handler>
 80046d6:	e7bd      	b.n	8004654 <MX_TIM8_Init+0xb0>
    Error_Handler();
 80046d8:	f7fd fc4e 	bl	8001f78 <Error_Handler>
 80046dc:	e7c4      	b.n	8004668 <MX_TIM8_Init+0xc4>
    Error_Handler();
 80046de:	f7fd fc4b 	bl	8001f78 <Error_Handler>
 80046e2:	e7cb      	b.n	800467c <MX_TIM8_Init+0xd8>
    Error_Handler();
 80046e4:	f7fd fc48 	bl	8001f78 <Error_Handler>
 80046e8:	e7df      	b.n	80046aa <MX_TIM8_Init+0x106>
 80046ea:	bf00      	nop
 80046ec:	20012204 	.word	0x20012204
 80046f0:	40013400 	.word	0x40013400

080046f4 <MX_TIM15_Init>:
{
 80046f4:	b510      	push	{r4, lr}
 80046f6:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046f8:	2400      	movs	r4, #0
 80046fa:	9418      	str	r4, [sp, #96]	; 0x60
 80046fc:	9419      	str	r4, [sp, #100]	; 0x64
 80046fe:	941a      	str	r4, [sp, #104]	; 0x68
 8004700:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004702:	9415      	str	r4, [sp, #84]	; 0x54
 8004704:	9416      	str	r4, [sp, #88]	; 0x58
 8004706:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004708:	940e      	str	r4, [sp, #56]	; 0x38
 800470a:	940f      	str	r4, [sp, #60]	; 0x3c
 800470c:	9410      	str	r4, [sp, #64]	; 0x40
 800470e:	9411      	str	r4, [sp, #68]	; 0x44
 8004710:	9412      	str	r4, [sp, #72]	; 0x48
 8004712:	9413      	str	r4, [sp, #76]	; 0x4c
 8004714:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004716:	2234      	movs	r2, #52	; 0x34
 8004718:	4621      	mov	r1, r4
 800471a:	a801      	add	r0, sp, #4
 800471c:	f009 fe90 	bl	800e440 <memset>
  htim15.Instance = TIM15;
 8004720:	482e      	ldr	r0, [pc, #184]	; (80047dc <MX_TIM15_Init+0xe8>)
 8004722:	4b2f      	ldr	r3, [pc, #188]	; (80047e0 <MX_TIM15_Init+0xec>)
 8004724:	6003      	str	r3, [r0, #0]
  htim15.Init.Prescaler = 0;
 8004726:	6044      	str	r4, [r0, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004728:	6084      	str	r4, [r0, #8]
  htim15.Init.Period = 32768;
 800472a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800472e:	60c3      	str	r3, [r0, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004730:	6104      	str	r4, [r0, #16]
  htim15.Init.RepetitionCounter = 0;
 8004732:	6144      	str	r4, [r0, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004734:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004736:	f005 f86b 	bl	8009810 <HAL_TIM_Base_Init>
 800473a:	2800      	cmp	r0, #0
 800473c:	d13c      	bne.n	80047b8 <MX_TIM15_Init+0xc4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800473e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004742:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004744:	a918      	add	r1, sp, #96	; 0x60
 8004746:	4825      	ldr	r0, [pc, #148]	; (80047dc <MX_TIM15_Init+0xe8>)
 8004748:	f005 f9ba 	bl	8009ac0 <HAL_TIM_ConfigClockSource>
 800474c:	2800      	cmp	r0, #0
 800474e:	d136      	bne.n	80047be <MX_TIM15_Init+0xca>
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8004750:	4822      	ldr	r0, [pc, #136]	; (80047dc <MX_TIM15_Init+0xe8>)
 8004752:	f005 f88d 	bl	8009870 <HAL_TIM_PWM_Init>
 8004756:	2800      	cmp	r0, #0
 8004758:	d134      	bne.n	80047c4 <MX_TIM15_Init+0xd0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800475a:	2300      	movs	r3, #0
 800475c:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800475e:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004760:	a915      	add	r1, sp, #84	; 0x54
 8004762:	481e      	ldr	r0, [pc, #120]	; (80047dc <MX_TIM15_Init+0xe8>)
 8004764:	f005 fa56 	bl	8009c14 <HAL_TIMEx_MasterConfigSynchronization>
 8004768:	2800      	cmp	r0, #0
 800476a:	d12e      	bne.n	80047ca <MX_TIM15_Init+0xd6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800476c:	2360      	movs	r3, #96	; 0x60
 800476e:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 16000;
 8004770:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8004774:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004776:	2300      	movs	r3, #0
 8004778:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800477a:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800477c:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800477e:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004780:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004782:	2204      	movs	r2, #4
 8004784:	a90e      	add	r1, sp, #56	; 0x38
 8004786:	4815      	ldr	r0, [pc, #84]	; (80047dc <MX_TIM15_Init+0xe8>)
 8004788:	f005 f8f0 	bl	800996c <HAL_TIM_PWM_ConfigChannel>
 800478c:	bb00      	cbnz	r0, 80047d0 <MX_TIM15_Init+0xdc>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800478e:	2300      	movs	r3, #0
 8004790:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004792:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004794:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004796:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004798:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800479a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800479e:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80047a0:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80047a2:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80047a4:	a901      	add	r1, sp, #4
 80047a6:	480d      	ldr	r0, [pc, #52]	; (80047dc <MX_TIM15_Init+0xe8>)
 80047a8:	f005 fa8a 	bl	8009cc0 <HAL_TIMEx_ConfigBreakDeadTime>
 80047ac:	b998      	cbnz	r0, 80047d6 <MX_TIM15_Init+0xe2>
  HAL_TIM_MspPostInit(&htim15);
 80047ae:	480b      	ldr	r0, [pc, #44]	; (80047dc <MX_TIM15_Init+0xe8>)
 80047b0:	f7ff fe04 	bl	80043bc <HAL_TIM_MspPostInit>
}
 80047b4:	b01c      	add	sp, #112	; 0x70
 80047b6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80047b8:	f7fd fbde 	bl	8001f78 <Error_Handler>
 80047bc:	e7bf      	b.n	800473e <MX_TIM15_Init+0x4a>
    Error_Handler();
 80047be:	f7fd fbdb 	bl	8001f78 <Error_Handler>
 80047c2:	e7c5      	b.n	8004750 <MX_TIM15_Init+0x5c>
    Error_Handler();
 80047c4:	f7fd fbd8 	bl	8001f78 <Error_Handler>
 80047c8:	e7c7      	b.n	800475a <MX_TIM15_Init+0x66>
    Error_Handler();
 80047ca:	f7fd fbd5 	bl	8001f78 <Error_Handler>
 80047ce:	e7cd      	b.n	800476c <MX_TIM15_Init+0x78>
    Error_Handler();
 80047d0:	f7fd fbd2 	bl	8001f78 <Error_Handler>
 80047d4:	e7db      	b.n	800478e <MX_TIM15_Init+0x9a>
    Error_Handler();
 80047d6:	f7fd fbcf 	bl	8001f78 <Error_Handler>
 80047da:	e7e8      	b.n	80047ae <MX_TIM15_Init+0xba>
 80047dc:	20012120 	.word	0x20012120
 80047e0:	40014000 	.word	0x40014000

080047e4 <MX_TIM20_Init>:
{
 80047e4:	b510      	push	{r4, lr}
 80047e6:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047e8:	2400      	movs	r4, #0
 80047ea:	9418      	str	r4, [sp, #96]	; 0x60
 80047ec:	9419      	str	r4, [sp, #100]	; 0x64
 80047ee:	941a      	str	r4, [sp, #104]	; 0x68
 80047f0:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047f2:	9415      	str	r4, [sp, #84]	; 0x54
 80047f4:	9416      	str	r4, [sp, #88]	; 0x58
 80047f6:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80047f8:	940e      	str	r4, [sp, #56]	; 0x38
 80047fa:	940f      	str	r4, [sp, #60]	; 0x3c
 80047fc:	9410      	str	r4, [sp, #64]	; 0x40
 80047fe:	9411      	str	r4, [sp, #68]	; 0x44
 8004800:	9412      	str	r4, [sp, #72]	; 0x48
 8004802:	9413      	str	r4, [sp, #76]	; 0x4c
 8004804:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004806:	2234      	movs	r2, #52	; 0x34
 8004808:	4621      	mov	r1, r4
 800480a:	a801      	add	r0, sp, #4
 800480c:	f009 fe18 	bl	800e440 <memset>
  htim20.Instance = TIM20;
 8004810:	4846      	ldr	r0, [pc, #280]	; (800492c <MX_TIM20_Init+0x148>)
 8004812:	4b47      	ldr	r3, [pc, #284]	; (8004930 <MX_TIM20_Init+0x14c>)
 8004814:	6003      	str	r3, [r0, #0]
  htim20.Init.Prescaler = 0;
 8004816:	6044      	str	r4, [r0, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004818:	6084      	str	r4, [r0, #8]
  htim20.Init.Period = 16000;
 800481a:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800481e:	60c3      	str	r3, [r0, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004820:	6104      	str	r4, [r0, #16]
  htim20.Init.RepetitionCounter = 0;
 8004822:	6144      	str	r4, [r0, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004824:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8004826:	f004 fff3 	bl	8009810 <HAL_TIM_Base_Init>
 800482a:	2800      	cmp	r0, #0
 800482c:	d162      	bne.n	80048f4 <MX_TIM20_Init+0x110>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800482e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004832:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8004834:	a918      	add	r1, sp, #96	; 0x60
 8004836:	483d      	ldr	r0, [pc, #244]	; (800492c <MX_TIM20_Init+0x148>)
 8004838:	f005 f942 	bl	8009ac0 <HAL_TIM_ConfigClockSource>
 800483c:	2800      	cmp	r0, #0
 800483e:	d15c      	bne.n	80048fa <MX_TIM20_Init+0x116>
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8004840:	483a      	ldr	r0, [pc, #232]	; (800492c <MX_TIM20_Init+0x148>)
 8004842:	f005 f815 	bl	8009870 <HAL_TIM_PWM_Init>
 8004846:	2800      	cmp	r0, #0
 8004848:	d15a      	bne.n	8004900 <MX_TIM20_Init+0x11c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800484a:	2300      	movs	r3, #0
 800484c:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800484e:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004850:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8004852:	a915      	add	r1, sp, #84	; 0x54
 8004854:	4835      	ldr	r0, [pc, #212]	; (800492c <MX_TIM20_Init+0x148>)
 8004856:	f005 f9dd 	bl	8009c14 <HAL_TIMEx_MasterConfigSynchronization>
 800485a:	2800      	cmp	r0, #0
 800485c:	d153      	bne.n	8004906 <MX_TIM20_Init+0x122>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800485e:	2360      	movs	r3, #96	; 0x60
 8004860:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 8000;
 8004862:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8004866:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004868:	2200      	movs	r2, #0
 800486a:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800486c:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800486e:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004870:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004872:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004874:	a90e      	add	r1, sp, #56	; 0x38
 8004876:	482d      	ldr	r0, [pc, #180]	; (800492c <MX_TIM20_Init+0x148>)
 8004878:	f005 f878 	bl	800996c <HAL_TIM_PWM_ConfigChannel>
 800487c:	2800      	cmp	r0, #0
 800487e:	d145      	bne.n	800490c <MX_TIM20_Init+0x128>
  sConfigOC.Pulse = 10000;
 8004880:	f242 7310 	movw	r3, #10000	; 0x2710
 8004884:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004886:	2204      	movs	r2, #4
 8004888:	a90e      	add	r1, sp, #56	; 0x38
 800488a:	4828      	ldr	r0, [pc, #160]	; (800492c <MX_TIM20_Init+0x148>)
 800488c:	f005 f86e 	bl	800996c <HAL_TIM_PWM_ConfigChannel>
 8004890:	2800      	cmp	r0, #0
 8004892:	d13e      	bne.n	8004912 <MX_TIM20_Init+0x12e>
  sConfigOC.Pulse = 12000;
 8004894:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8004898:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800489a:	2208      	movs	r2, #8
 800489c:	a90e      	add	r1, sp, #56	; 0x38
 800489e:	4823      	ldr	r0, [pc, #140]	; (800492c <MX_TIM20_Init+0x148>)
 80048a0:	f005 f864 	bl	800996c <HAL_TIM_PWM_ConfigChannel>
 80048a4:	2800      	cmp	r0, #0
 80048a6:	d137      	bne.n	8004918 <MX_TIM20_Init+0x134>
  sConfigOC.Pulse = 15000;
 80048a8:	f643 2398 	movw	r3, #15000	; 0x3a98
 80048ac:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80048ae:	220c      	movs	r2, #12
 80048b0:	a90e      	add	r1, sp, #56	; 0x38
 80048b2:	481e      	ldr	r0, [pc, #120]	; (800492c <MX_TIM20_Init+0x148>)
 80048b4:	f005 f85a 	bl	800996c <HAL_TIM_PWM_ConfigChannel>
 80048b8:	2800      	cmp	r0, #0
 80048ba:	d130      	bne.n	800491e <MX_TIM20_Init+0x13a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80048bc:	2300      	movs	r3, #0
 80048be:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80048c0:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80048c2:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80048c4:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80048c6:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80048c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048cc:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80048ce:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80048d0:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80048d2:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80048d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048d8:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80048da:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80048dc:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80048de:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 80048e0:	a901      	add	r1, sp, #4
 80048e2:	4812      	ldr	r0, [pc, #72]	; (800492c <MX_TIM20_Init+0x148>)
 80048e4:	f005 f9ec 	bl	8009cc0 <HAL_TIMEx_ConfigBreakDeadTime>
 80048e8:	b9e0      	cbnz	r0, 8004924 <MX_TIM20_Init+0x140>
  HAL_TIM_MspPostInit(&htim20);
 80048ea:	4810      	ldr	r0, [pc, #64]	; (800492c <MX_TIM20_Init+0x148>)
 80048ec:	f7ff fd66 	bl	80043bc <HAL_TIM_MspPostInit>
}
 80048f0:	b01c      	add	sp, #112	; 0x70
 80048f2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80048f4:	f7fd fb40 	bl	8001f78 <Error_Handler>
 80048f8:	e799      	b.n	800482e <MX_TIM20_Init+0x4a>
    Error_Handler();
 80048fa:	f7fd fb3d 	bl	8001f78 <Error_Handler>
 80048fe:	e79f      	b.n	8004840 <MX_TIM20_Init+0x5c>
    Error_Handler();
 8004900:	f7fd fb3a 	bl	8001f78 <Error_Handler>
 8004904:	e7a1      	b.n	800484a <MX_TIM20_Init+0x66>
    Error_Handler();
 8004906:	f7fd fb37 	bl	8001f78 <Error_Handler>
 800490a:	e7a8      	b.n	800485e <MX_TIM20_Init+0x7a>
    Error_Handler();
 800490c:	f7fd fb34 	bl	8001f78 <Error_Handler>
 8004910:	e7b6      	b.n	8004880 <MX_TIM20_Init+0x9c>
    Error_Handler();
 8004912:	f7fd fb31 	bl	8001f78 <Error_Handler>
 8004916:	e7bd      	b.n	8004894 <MX_TIM20_Init+0xb0>
    Error_Handler();
 8004918:	f7fd fb2e 	bl	8001f78 <Error_Handler>
 800491c:	e7c4      	b.n	80048a8 <MX_TIM20_Init+0xc4>
    Error_Handler();
 800491e:	f7fd fb2b 	bl	8001f78 <Error_Handler>
 8004922:	e7cb      	b.n	80048bc <MX_TIM20_Init+0xd8>
    Error_Handler();
 8004924:	f7fd fb28 	bl	8001f78 <Error_Handler>
 8004928:	e7df      	b.n	80048ea <MX_TIM20_Init+0x106>
 800492a:	bf00      	nop
 800492c:	2001216c 	.word	0x2001216c
 8004930:	40015000 	.word	0x40015000

08004934 <MX_UART4_Init>:
>>>>>>> render
UART_HandleTypeDef huart3;


/* UART4 init function */
void MX_UART4_Init(void)
{
<<<<<<< HEAD
 80048fc:	b508      	push	{r3, lr}
=======
 8004934:	b508      	push	{r3, lr}
>>>>>>> render
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
<<<<<<< HEAD
 80048fe:	4817      	ldr	r0, [pc, #92]	; (800495c <MX_UART4_Init+0x60>)
 8004900:	4b17      	ldr	r3, [pc, #92]	; (8004960 <MX_UART4_Init+0x64>)
 8004902:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 8004904:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004908:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800490a:	2300      	movs	r3, #0
 800490c:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800490e:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004910:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004912:	220c      	movs	r2, #12
 8004914:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004916:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004918:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800491a:	6203      	str	r3, [r0, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800491c:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800491e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004920:	f005 fd9d 	bl	800a45e <HAL_UART_Init>
 8004924:	b970      	cbnz	r0, 8004944 <MX_UART4_Init+0x48>
=======
 8004936:	4817      	ldr	r0, [pc, #92]	; (8004994 <MX_UART4_Init+0x60>)
 8004938:	4b17      	ldr	r3, [pc, #92]	; (8004998 <MX_UART4_Init+0x64>)
 800493a:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 800493c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004940:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004942:	2300      	movs	r3, #0
 8004944:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004946:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004948:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800494a:	220c      	movs	r2, #12
 800494c:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800494e:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004950:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004952:	6203      	str	r3, [r0, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004954:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004956:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004958:	f005 fced 	bl	800a336 <HAL_UART_Init>
 800495c:	b970      	cbnz	r0, 800497c <MX_UART4_Init+0x48>
>>>>>>> render
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
<<<<<<< HEAD
 8004926:	2100      	movs	r1, #0
 8004928:	480c      	ldr	r0, [pc, #48]	; (800495c <MX_UART4_Init+0x60>)
 800492a:	f005 fe10 	bl	800a54e <HAL_UARTEx_SetTxFifoThreshold>
 800492e:	b960      	cbnz	r0, 800494a <MX_UART4_Init+0x4e>
=======
 800495e:	2100      	movs	r1, #0
 8004960:	480c      	ldr	r0, [pc, #48]	; (8004994 <MX_UART4_Init+0x60>)
 8004962:	f005 fd60 	bl	800a426 <HAL_UARTEx_SetTxFifoThreshold>
 8004966:	b960      	cbnz	r0, 8004982 <MX_UART4_Init+0x4e>
>>>>>>> render
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
<<<<<<< HEAD
 8004930:	2100      	movs	r1, #0
 8004932:	480a      	ldr	r0, [pc, #40]	; (800495c <MX_UART4_Init+0x60>)
 8004934:	f005 fe30 	bl	800a598 <HAL_UARTEx_SetRxFifoThreshold>
 8004938:	b950      	cbnz	r0, 8004950 <MX_UART4_Init+0x54>
=======
 8004968:	2100      	movs	r1, #0
 800496a:	480a      	ldr	r0, [pc, #40]	; (8004994 <MX_UART4_Init+0x60>)
 800496c:	f005 fd80 	bl	800a470 <HAL_UARTEx_SetRxFifoThreshold>
 8004970:	b950      	cbnz	r0, 8004988 <MX_UART4_Init+0x54>
>>>>>>> render
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
<<<<<<< HEAD
 800493a:	4808      	ldr	r0, [pc, #32]	; (800495c <MX_UART4_Init+0x60>)
 800493c:	f005 fde8 	bl	800a510 <HAL_UARTEx_DisableFifoMode>
 8004940:	b948      	cbnz	r0, 8004956 <MX_UART4_Init+0x5a>
=======
 8004972:	4808      	ldr	r0, [pc, #32]	; (8004994 <MX_UART4_Init+0x60>)
 8004974:	f005 fd38 	bl	800a3e8 <HAL_UARTEx_DisableFifoMode>
 8004978:	b948      	cbnz	r0, 800498e <MX_UART4_Init+0x5a>
>>>>>>> render
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
<<<<<<< HEAD
 8004942:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004944:	f7fd fb18 	bl	8001f78 <Error_Handler>
 8004948:	e7ed      	b.n	8004926 <MX_UART4_Init+0x2a>
    Error_Handler();
 800494a:	f7fd fb15 	bl	8001f78 <Error_Handler>
 800494e:	e7ef      	b.n	8004930 <MX_UART4_Init+0x34>
    Error_Handler();
 8004950:	f7fd fb12 	bl	8001f78 <Error_Handler>
 8004954:	e7f1      	b.n	800493a <MX_UART4_Init+0x3e>
    Error_Handler();
 8004956:	f7fd fb0f 	bl	8001f78 <Error_Handler>
}
 800495a:	e7f2      	b.n	8004942 <MX_UART4_Init+0x46>
 800495c:	20011380 	.word	0x20011380
 8004960:	40004c00 	.word	0x40004c00

08004964 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8004964:	b508      	push	{r3, lr}
=======
 800497a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800497c:	f7fd fafc 	bl	8001f78 <Error_Handler>
 8004980:	e7ed      	b.n	800495e <MX_UART4_Init+0x2a>
    Error_Handler();
 8004982:	f7fd faf9 	bl	8001f78 <Error_Handler>
 8004986:	e7ef      	b.n	8004968 <MX_UART4_Init+0x34>
    Error_Handler();
 8004988:	f7fd faf6 	bl	8001f78 <Error_Handler>
 800498c:	e7f1      	b.n	8004972 <MX_UART4_Init+0x3e>
    Error_Handler();
 800498e:	f7fd faf3 	bl	8001f78 <Error_Handler>
}
 8004992:	e7f2      	b.n	800497a <MX_UART4_Init+0x46>
 8004994:	20012370 	.word	0x20012370
 8004998:	40004c00 	.word	0x40004c00

0800499c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800499c:	b508      	push	{r3, lr}
>>>>>>> render
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
<<<<<<< HEAD
 8004966:	4817      	ldr	r0, [pc, #92]	; (80049c4 <MX_UART5_Init+0x60>)
 8004968:	4b17      	ldr	r3, [pc, #92]	; (80049c8 <MX_UART5_Init+0x64>)
 800496a:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 115200;
 800496c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004970:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004972:	2300      	movs	r3, #0
 8004974:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004976:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004978:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800497a:	220c      	movs	r2, #12
 800497c:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800497e:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004980:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004982:	6203      	str	r3, [r0, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004984:	6243      	str	r3, [r0, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004986:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004988:	f005 fd69 	bl	800a45e <HAL_UART_Init>
 800498c:	b970      	cbnz	r0, 80049ac <MX_UART5_Init+0x48>
=======
 800499e:	4817      	ldr	r0, [pc, #92]	; (80049fc <MX_UART5_Init+0x60>)
 80049a0:	4b17      	ldr	r3, [pc, #92]	; (8004a00 <MX_UART5_Init+0x64>)
 80049a2:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 115200;
 80049a4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80049a8:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80049aa:	2300      	movs	r3, #0
 80049ac:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80049ae:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80049b0:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80049b2:	220c      	movs	r2, #12
 80049b4:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049b6:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80049b8:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80049ba:	6203      	str	r3, [r0, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80049bc:	6243      	str	r3, [r0, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049be:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80049c0:	f005 fcb9 	bl	800a336 <HAL_UART_Init>
 80049c4:	b970      	cbnz	r0, 80049e4 <MX_UART5_Init+0x48>
>>>>>>> render
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
<<<<<<< HEAD
 800498e:	2100      	movs	r1, #0
 8004990:	480c      	ldr	r0, [pc, #48]	; (80049c4 <MX_UART5_Init+0x60>)
 8004992:	f005 fddc 	bl	800a54e <HAL_UARTEx_SetTxFifoThreshold>
 8004996:	b960      	cbnz	r0, 80049b2 <MX_UART5_Init+0x4e>
=======
 80049c6:	2100      	movs	r1, #0
 80049c8:	480c      	ldr	r0, [pc, #48]	; (80049fc <MX_UART5_Init+0x60>)
 80049ca:	f005 fd2c 	bl	800a426 <HAL_UARTEx_SetTxFifoThreshold>
 80049ce:	b960      	cbnz	r0, 80049ea <MX_UART5_Init+0x4e>
>>>>>>> render
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
<<<<<<< HEAD
 8004998:	2100      	movs	r1, #0
 800499a:	480a      	ldr	r0, [pc, #40]	; (80049c4 <MX_UART5_Init+0x60>)
 800499c:	f005 fdfc 	bl	800a598 <HAL_UARTEx_SetRxFifoThreshold>
 80049a0:	b950      	cbnz	r0, 80049b8 <MX_UART5_Init+0x54>
=======
 80049d0:	2100      	movs	r1, #0
 80049d2:	480a      	ldr	r0, [pc, #40]	; (80049fc <MX_UART5_Init+0x60>)
 80049d4:	f005 fd4c 	bl	800a470 <HAL_UARTEx_SetRxFifoThreshold>
 80049d8:	b950      	cbnz	r0, 80049f0 <MX_UART5_Init+0x54>
>>>>>>> render
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
<<<<<<< HEAD
 80049a2:	4808      	ldr	r0, [pc, #32]	; (80049c4 <MX_UART5_Init+0x60>)
 80049a4:	f005 fdb4 	bl	800a510 <HAL_UARTEx_DisableFifoMode>
 80049a8:	b948      	cbnz	r0, 80049be <MX_UART5_Init+0x5a>
=======
 80049da:	4808      	ldr	r0, [pc, #32]	; (80049fc <MX_UART5_Init+0x60>)
 80049dc:	f005 fd04 	bl	800a3e8 <HAL_UARTEx_DisableFifoMode>
 80049e0:	b948      	cbnz	r0, 80049f6 <MX_UART5_Init+0x5a>
>>>>>>> render
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
<<<<<<< HEAD
 80049aa:	bd08      	pop	{r3, pc}
    Error_Handler();
 80049ac:	f7fd fae4 	bl	8001f78 <Error_Handler>
 80049b0:	e7ed      	b.n	800498e <MX_UART5_Init+0x2a>
    Error_Handler();
 80049b2:	f7fd fae1 	bl	8001f78 <Error_Handler>
 80049b6:	e7ef      	b.n	8004998 <MX_UART5_Init+0x34>
    Error_Handler();
 80049b8:	f7fd fade 	bl	8001f78 <Error_Handler>
 80049bc:	e7f1      	b.n	80049a2 <MX_UART5_Init+0x3e>
    Error_Handler();
 80049be:	f7fd fadb 	bl	8001f78 <Error_Handler>
}
 80049c2:	e7f2      	b.n	80049aa <MX_UART5_Init+0x46>
 80049c4:	20011410 	.word	0x20011410
 80049c8:	40005000 	.word	0x40005000

080049cc <MX_USART1_UART_Init>:
=======
 80049e2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80049e4:	f7fd fac8 	bl	8001f78 <Error_Handler>
 80049e8:	e7ed      	b.n	80049c6 <MX_UART5_Init+0x2a>
    Error_Handler();
 80049ea:	f7fd fac5 	bl	8001f78 <Error_Handler>
 80049ee:	e7ef      	b.n	80049d0 <MX_UART5_Init+0x34>
    Error_Handler();
 80049f0:	f7fd fac2 	bl	8001f78 <Error_Handler>
 80049f4:	e7f1      	b.n	80049da <MX_UART5_Init+0x3e>
    Error_Handler();
 80049f6:	f7fd fabf 	bl	8001f78 <Error_Handler>
}
 80049fa:	e7f2      	b.n	80049e2 <MX_UART5_Init+0x46>
 80049fc:	20012400 	.word	0x20012400
 8004a00:	40005000 	.word	0x40005000

08004a04 <MX_USART1_UART_Init>:
>>>>>>> render
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
<<<<<<< HEAD
 80049cc:	b570      	push	{r4, r5, r6, lr}
 80049ce:	b0a6      	sub	sp, #152	; 0x98
=======
 8004a04:	b570      	push	{r4, r5, r6, lr}
 8004a06:	b0a6      	sub	sp, #152	; 0x98
>>>>>>> render

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
<<<<<<< HEAD
 80049d0:	2220      	movs	r2, #32
 80049d2:	2100      	movs	r1, #0
 80049d4:	a81e      	add	r0, sp, #120	; 0x78
 80049d6:	f009 fdff 	bl	800e5d8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049da:	2100      	movs	r1, #0
 80049dc:	9118      	str	r1, [sp, #96]	; 0x60
 80049de:	9119      	str	r1, [sp, #100]	; 0x64
 80049e0:	911a      	str	r1, [sp, #104]	; 0x68
 80049e2:	911b      	str	r1, [sp, #108]	; 0x6c
 80049e4:	911c      	str	r1, [sp, #112]	; 0x70
 80049e6:	911d      	str	r1, [sp, #116]	; 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049e8:	2254      	movs	r2, #84	; 0x54
 80049ea:	a803      	add	r0, sp, #12
 80049ec:	f009 fdf4 	bl	800e5d8 <memset>
=======
 8004a08:	2220      	movs	r2, #32
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	a81e      	add	r0, sp, #120	; 0x78
 8004a0e:	f009 fd17 	bl	800e440 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a12:	2100      	movs	r1, #0
 8004a14:	9118      	str	r1, [sp, #96]	; 0x60
 8004a16:	9119      	str	r1, [sp, #100]	; 0x64
 8004a18:	911a      	str	r1, [sp, #104]	; 0x68
 8004a1a:	911b      	str	r1, [sp, #108]	; 0x6c
 8004a1c:	911c      	str	r1, [sp, #112]	; 0x70
 8004a1e:	911d      	str	r1, [sp, #116]	; 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a20:	2254      	movs	r2, #84	; 0x54
 8004a22:	a803      	add	r0, sp, #12
 8004a24:	f009 fd0c 	bl	800e440 <memset>
>>>>>>> render

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
<<<<<<< HEAD
 80049f0:	2301      	movs	r3, #1
 80049f2:	9303      	str	r3, [sp, #12]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049f4:	a803      	add	r0, sp, #12
 80049f6:	f004 fb3b 	bl	8009070 <HAL_RCCEx_PeriphCLKConfig>
 80049fa:	2800      	cmp	r0, #0
 80049fc:	f040 80d2 	bne.w	8004ba4 <MX_USART1_UART_Init+0x1d8>
=======
 8004a28:	2301      	movs	r3, #1
 8004a2a:	9303      	str	r3, [sp, #12]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a2c:	a803      	add	r0, sp, #12
 8004a2e:	f004 fa8b 	bl	8008f48 <HAL_RCCEx_PeriphCLKConfig>
 8004a32:	2800      	cmp	r0, #0
 8004a34:	f040 80d2 	bne.w	8004bdc <MX_USART1_UART_Init+0x1d8>
>>>>>>> render
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
<<<<<<< HEAD
 8004a00:	4b6a      	ldr	r3, [pc, #424]	; (8004bac <MX_USART1_UART_Init+0x1e0>)
 8004a02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a08:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004a0a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a0c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004a10:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8004a12:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004a14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a16:	f042 0201 	orr.w	r2, r2, #1
 8004a1a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004a1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a1e:	f002 0201 	and.w	r2, r2, #1
 8004a22:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8004a24:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a2c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a34:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8004a36:	9b00      	ldr	r3, [sp, #0]
=======
 8004a38:	4b6a      	ldr	r3, [pc, #424]	; (8004be4 <MX_USART1_UART_Init+0x1e0>)
 8004a3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a40:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004a42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a44:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004a48:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8004a4a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004a4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a4e:	f042 0201 	orr.w	r2, r2, #1
 8004a52:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004a54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a56:	f002 0201 	and.w	r2, r2, #1
 8004a5a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8004a5c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004a5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a64:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8004a6e:	9b00      	ldr	r3, [sp, #0]
>>>>>>> render
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOG);
  /**USART1 GPIO Configuration
  PA10   ------> USART1_RX
  PG9   ------> USART1_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
<<<<<<< HEAD
 8004a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a3c:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004a3e:	2602      	movs	r6, #2
 8004a40:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004a42:	2400      	movs	r4, #0
 8004a44:	941a      	str	r4, [sp, #104]	; 0x68
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004a46:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004a48:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004a4a:	2507      	movs	r5, #7
 8004a4c:	951d      	str	r5, [sp, #116]	; 0x74
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a4e:	a918      	add	r1, sp, #96	; 0x60
 8004a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a54:	f005 fe8e 	bl	800a774 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8004a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a5c:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004a5e:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004a60:	941a      	str	r4, [sp, #104]	; 0x68
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004a62:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004a64:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004a66:	951d      	str	r5, [sp, #116]	; 0x74
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004a68:	a918      	add	r1, sp, #96	; 0x60
 8004a6a:	4851      	ldr	r0, [pc, #324]	; (8004bb0 <MX_USART1_UART_Init+0x1e4>)
 8004a6c:	f005 fe82 	bl	800a774 <LL_GPIO_Init>
=======
 8004a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a74:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004a76:	2602      	movs	r6, #2
 8004a78:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004a7a:	2400      	movs	r4, #0
 8004a7c:	941a      	str	r4, [sp, #104]	; 0x68
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004a7e:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004a80:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004a82:	2507      	movs	r5, #7
 8004a84:	951d      	str	r5, [sp, #116]	; 0x74
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a86:	a918      	add	r1, sp, #96	; 0x60
 8004a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a8c:	f005 fdde 	bl	800a64c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8004a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a94:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004a96:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004a98:	941a      	str	r4, [sp, #104]	; 0x68
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004a9a:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004a9c:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004a9e:	951d      	str	r5, [sp, #116]	; 0x74
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004aa0:	a918      	add	r1, sp, #96	; 0x60
 8004aa2:	4851      	ldr	r0, [pc, #324]	; (8004be8 <MX_USART1_UART_Init+0x1e4>)
 8004aa4:	f005 fdd2 	bl	800a64c <LL_GPIO_Init>
>>>>>>> render
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
<<<<<<< HEAD
 8004a70:	4b50      	ldr	r3, [pc, #320]	; (8004bb4 <MX_USART1_UART_Init+0x1e8>)
 8004a72:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8004a76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a7a:	f042 0218 	orr.w	r2, r2, #24
 8004a7e:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8004a82:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004a84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a88:	f022 0210 	bic.w	r2, r2, #16
 8004a8c:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8004a8e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004a90:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004a94:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8004a96:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004a98:	f022 0220 	bic.w	r2, r2, #32
 8004a9c:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8004a9e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004aa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aa4:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8004aa6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004aa8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004aac:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8004aae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004ab0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ab4:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8004ab6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004ab8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004abc:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8004abe:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8004ac2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004ac6:	f042 0219 	orr.w	r2, r2, #25
 8004aca:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8004ace:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004ad2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ad6:	f022 0210 	bic.w	r2, r2, #16
 8004ada:	f042 0210 	orr.w	r2, r2, #16
 8004ade:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8004ae2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004ae6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004aea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8004aee:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004af2:	f022 0220 	bic.w	r2, r2, #32
 8004af6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8004afa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004afe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8004b06:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004b0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8004b12:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004b16:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8004b1e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004b22:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
 8004aa8:	4b50      	ldr	r3, [pc, #320]	; (8004bec <MX_USART1_UART_Init+0x1e8>)
 8004aaa:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8004aae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004ab2:	f042 0218 	orr.w	r2, r2, #24
 8004ab6:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8004aba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004abc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ac0:	f022 0210 	bic.w	r2, r2, #16
 8004ac4:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8004ac6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004ac8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004acc:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8004ace:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004ad0:	f022 0220 	bic.w	r2, r2, #32
 8004ad4:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8004ad6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004ad8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004adc:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8004ade:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004ae0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ae4:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8004ae6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004ae8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004aec:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8004aee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004af0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004af4:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8004af6:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8004afa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004afe:	f042 0219 	orr.w	r2, r2, #25
 8004b02:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8004b06:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004b0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b0e:	f022 0210 	bic.w	r2, r2, #16
 8004b12:	f042 0210 	orr.w	r2, r2, #16
 8004b16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8004b1a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004b1e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004b22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8004b26:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004b2a:	f022 0220 	bic.w	r2, r2, #32
 8004b2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8004b32:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8004b3e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004b42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8004b4a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004b4e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8004b56:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004b5a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> render
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
<<<<<<< HEAD
 8004b2a:	941e      	str	r4, [sp, #120]	; 0x78
  USART_InitStruct.BaudRate = 115200;
 8004b2c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004b30:	931f      	str	r3, [sp, #124]	; 0x7c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004b32:	9420      	str	r4, [sp, #128]	; 0x80
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004b34:	9421      	str	r4, [sp, #132]	; 0x84
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004b36:	9422      	str	r4, [sp, #136]	; 0x88
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004b38:	230c      	movs	r3, #12
 8004b3a:	9323      	str	r3, [sp, #140]	; 0x8c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004b3c:	9424      	str	r4, [sp, #144]	; 0x90
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004b3e:	9425      	str	r4, [sp, #148]	; 0x94
  LL_USART_Init(USART1, &USART_InitStruct);
 8004b40:	a91e      	add	r1, sp, #120	; 0x78
 8004b42:	481d      	ldr	r0, [pc, #116]	; (8004bb8 <MX_USART1_UART_Init+0x1ec>)
 8004b44:	f006 f82c 	bl	800aba0 <LL_USART_Init>
=======
 8004b62:	941e      	str	r4, [sp, #120]	; 0x78
  USART_InitStruct.BaudRate = 115200;
 8004b64:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004b68:	931f      	str	r3, [sp, #124]	; 0x7c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004b6a:	9420      	str	r4, [sp, #128]	; 0x80
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004b6c:	9421      	str	r4, [sp, #132]	; 0x84
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004b6e:	9422      	str	r4, [sp, #136]	; 0x88
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004b70:	230c      	movs	r3, #12
 8004b72:	9323      	str	r3, [sp, #140]	; 0x8c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004b74:	9424      	str	r4, [sp, #144]	; 0x90
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004b76:	9425      	str	r4, [sp, #148]	; 0x94
  LL_USART_Init(USART1, &USART_InitStruct);
 8004b78:	a91e      	add	r1, sp, #120	; 0x78
 8004b7a:	481d      	ldr	r0, [pc, #116]	; (8004bf0 <MX_USART1_UART_Init+0x1ec>)
 8004b7c:	f005 ff7c 	bl	800aa78 <LL_USART_Init>
>>>>>>> render
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
<<<<<<< HEAD
 8004b48:	4b1c      	ldr	r3, [pc, #112]	; (8004bbc <MX_USART1_UART_Init+0x1f0>)
=======
 8004b80:	4b1c      	ldr	r3, [pc, #112]	; (8004bf4 <MX_USART1_UART_Init+0x1f0>)
>>>>>>> render
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 8004b4a:	e853 2f00 	ldrex	r2, [r3]
 8004b4e:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
=======
 8004b82:	e853 2f00 	ldrex	r2, [r3]
 8004b86:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
>>>>>>> render
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 8004b52:	e843 2100 	strex	r1, r2, [r3]
 8004b56:	2900      	cmp	r1, #0
 8004b58:	d1f6      	bne.n	8004b48 <MX_USART1_UART_Init+0x17c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5a:	e853 2f00 	ldrex	r2, [r3]
=======
 8004b8a:	e843 2100 	strex	r1, r2, [r3]
 8004b8e:	2900      	cmp	r1, #0
 8004b90:	d1f6      	bne.n	8004b80 <MX_USART1_UART_Init+0x17c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b92:	e853 2f00 	ldrex	r2, [r3]
>>>>>>> render
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
<<<<<<< HEAD
 8004b5e:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b62:	e843 2100 	strex	r1, r2, [r3]
 8004b66:	2900      	cmp	r1, #0
 8004b68:	d1f7      	bne.n	8004b5a <MX_USART1_UART_Init+0x18e>
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8004b6a:	4b13      	ldr	r3, [pc, #76]	; (8004bb8 <MX_USART1_UART_Init+0x1ec>)
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004b72:	601a      	str	r2, [r3, #0]
=======
 8004b96:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9a:	e843 2100 	strex	r1, r2, [r3]
 8004b9e:	2900      	cmp	r1, #0
 8004ba0:	d1f7      	bne.n	8004b92 <MX_USART1_UART_Init+0x18e>
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8004ba2:	4b13      	ldr	r3, [pc, #76]	; (8004bf0 <MX_USART1_UART_Init+0x1ec>)
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004baa:	601a      	str	r2, [r3, #0]
>>>>>>> render
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b7a:	605a      	str	r2, [r3, #4]

  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b82:	609a      	str	r2, [r3, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	f042 0201 	orr.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]
=======
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bb2:	605a      	str	r2, [r3, #4]

  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bba:	609a      	str	r2, [r3, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	f042 0201 	orr.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]
>>>>>>> render
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
<<<<<<< HEAD
 8004b8c:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <MX_USART1_UART_Init+0x1ec>)
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004b94:	d0fa      	beq.n	8004b8c <MX_USART1_UART_Init+0x1c0>
=======
 8004bc4:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <MX_USART1_UART_Init+0x1ec>)
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004bcc:	d0fa      	beq.n	8004bc4 <MX_USART1_UART_Init+0x1c0>
>>>>>>> render
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
<<<<<<< HEAD
 8004b96:	4b08      	ldr	r3, [pc, #32]	; (8004bb8 <MX_USART1_UART_Init+0x1ec>)
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004b9e:	d0f5      	beq.n	8004b8c <MX_USART1_UART_Init+0x1c0>
=======
 8004bce:	4b08      	ldr	r3, [pc, #32]	; (8004bf0 <MX_USART1_UART_Init+0x1ec>)
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004bd6:	d0f5      	beq.n	8004bc4 <MX_USART1_UART_Init+0x1c0>
>>>>>>> render
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
 8004ba0:	b026      	add	sp, #152	; 0x98
 8004ba2:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8004ba4:	f7fd f9e8 	bl	8001f78 <Error_Handler>
 8004ba8:	e72a      	b.n	8004a00 <MX_USART1_UART_Init+0x34>
 8004baa:	bf00      	nop
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	48001800 	.word	0x48001800
 8004bb4:	40020000 	.word	0x40020000
 8004bb8:	40013800 	.word	0x40013800
 8004bbc:	40013808 	.word	0x40013808

08004bc0 <MX_USART2_UART_Init>:
=======
 8004bd8:	b026      	add	sp, #152	; 0x98
 8004bda:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8004bdc:	f7fd f9cc 	bl	8001f78 <Error_Handler>
 8004be0:	e72a      	b.n	8004a38 <MX_USART1_UART_Init+0x34>
 8004be2:	bf00      	nop
 8004be4:	40021000 	.word	0x40021000
 8004be8:	48001800 	.word	0x48001800
 8004bec:	40020000 	.word	0x40020000
 8004bf0:	40013800 	.word	0x40013800
 8004bf4:	40013808 	.word	0x40013808

08004bf8 <MX_USART2_UART_Init>:
>>>>>>> render
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
<<<<<<< HEAD
 8004bc0:	b508      	push	{r3, lr}
=======
 8004bf8:	b508      	push	{r3, lr}
>>>>>>> render
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
<<<<<<< HEAD
 8004bc2:	4817      	ldr	r0, [pc, #92]	; (8004c20 <MX_USART2_UART_Init+0x60>)
 8004bc4:	4b17      	ldr	r3, [pc, #92]	; (8004c24 <MX_USART2_UART_Init+0x64>)
 8004bc6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8004bc8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004bcc:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004bd2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004bd4:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004bd6:	220c      	movs	r2, #12
 8004bd8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bda:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bdc:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004bde:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004be0:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004be2:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004be4:	f005 fc3b 	bl	800a45e <HAL_UART_Init>
 8004be8:	b970      	cbnz	r0, 8004c08 <MX_USART2_UART_Init+0x48>
=======
 8004bfa:	4817      	ldr	r0, [pc, #92]	; (8004c58 <MX_USART2_UART_Init+0x60>)
 8004bfc:	4b17      	ldr	r3, [pc, #92]	; (8004c5c <MX_USART2_UART_Init+0x64>)
 8004bfe:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8004c00:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004c04:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004c06:	2300      	movs	r3, #0
 8004c08:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004c0a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004c0c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004c0e:	220c      	movs	r2, #12
 8004c10:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c12:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c14:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c16:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004c18:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c1a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004c1c:	f005 fb8b 	bl	800a336 <HAL_UART_Init>
 8004c20:	b970      	cbnz	r0, 8004c40 <MX_USART2_UART_Init+0x48>
>>>>>>> render
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
<<<<<<< HEAD
 8004bea:	2100      	movs	r1, #0
 8004bec:	480c      	ldr	r0, [pc, #48]	; (8004c20 <MX_USART2_UART_Init+0x60>)
 8004bee:	f005 fcae 	bl	800a54e <HAL_UARTEx_SetTxFifoThreshold>
 8004bf2:	b960      	cbnz	r0, 8004c0e <MX_USART2_UART_Init+0x4e>
=======
 8004c22:	2100      	movs	r1, #0
 8004c24:	480c      	ldr	r0, [pc, #48]	; (8004c58 <MX_USART2_UART_Init+0x60>)
 8004c26:	f005 fbfe 	bl	800a426 <HAL_UARTEx_SetTxFifoThreshold>
 8004c2a:	b960      	cbnz	r0, 8004c46 <MX_USART2_UART_Init+0x4e>
>>>>>>> render
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
<<<<<<< HEAD
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	480a      	ldr	r0, [pc, #40]	; (8004c20 <MX_USART2_UART_Init+0x60>)
 8004bf8:	f005 fcce 	bl	800a598 <HAL_UARTEx_SetRxFifoThreshold>
 8004bfc:	b950      	cbnz	r0, 8004c14 <MX_USART2_UART_Init+0x54>
=======
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	480a      	ldr	r0, [pc, #40]	; (8004c58 <MX_USART2_UART_Init+0x60>)
 8004c30:	f005 fc1e 	bl	800a470 <HAL_UARTEx_SetRxFifoThreshold>
 8004c34:	b950      	cbnz	r0, 8004c4c <MX_USART2_UART_Init+0x54>
>>>>>>> render
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
<<<<<<< HEAD
 8004bfe:	4808      	ldr	r0, [pc, #32]	; (8004c20 <MX_USART2_UART_Init+0x60>)
 8004c00:	f005 fc86 	bl	800a510 <HAL_UARTEx_DisableFifoMode>
 8004c04:	b948      	cbnz	r0, 8004c1a <MX_USART2_UART_Init+0x5a>
=======
 8004c36:	4808      	ldr	r0, [pc, #32]	; (8004c58 <MX_USART2_UART_Init+0x60>)
 8004c38:	f005 fbd6 	bl	800a3e8 <HAL_UARTEx_DisableFifoMode>
 8004c3c:	b948      	cbnz	r0, 8004c52 <MX_USART2_UART_Init+0x5a>
>>>>>>> render
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
<<<<<<< HEAD
 8004c06:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004c08:	f7fd f9b6 	bl	8001f78 <Error_Handler>
 8004c0c:	e7ed      	b.n	8004bea <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8004c0e:	f7fd f9b3 	bl	8001f78 <Error_Handler>
 8004c12:	e7ef      	b.n	8004bf4 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8004c14:	f7fd f9b0 	bl	8001f78 <Error_Handler>
 8004c18:	e7f1      	b.n	8004bfe <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8004c1a:	f7fd f9ad 	bl	8001f78 <Error_Handler>
}
 8004c1e:	e7f2      	b.n	8004c06 <MX_USART2_UART_Init+0x46>
 8004c20:	20011260 	.word	0x20011260
 8004c24:	40004400 	.word	0x40004400

08004c28 <MX_USART3_UART_Init>:
=======
 8004c3e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004c40:	f7fd f99a 	bl	8001f78 <Error_Handler>
 8004c44:	e7ed      	b.n	8004c22 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8004c46:	f7fd f997 	bl	8001f78 <Error_Handler>
 8004c4a:	e7ef      	b.n	8004c2c <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8004c4c:	f7fd f994 	bl	8001f78 <Error_Handler>
 8004c50:	e7f1      	b.n	8004c36 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8004c52:	f7fd f991 	bl	8001f78 <Error_Handler>
}
 8004c56:	e7f2      	b.n	8004c3e <MX_USART2_UART_Init+0x46>
 8004c58:	20012250 	.word	0x20012250
 8004c5c:	40004400 	.word	0x40004400

08004c60 <MX_USART3_UART_Init>:
>>>>>>> render
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
<<<<<<< HEAD
 8004c28:	b508      	push	{r3, lr}
=======
 8004c60:	b508      	push	{r3, lr}
>>>>>>> render
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
<<<<<<< HEAD
 8004c2a:	4817      	ldr	r0, [pc, #92]	; (8004c88 <MX_USART3_UART_Init+0x60>)
 8004c2c:	4b17      	ldr	r3, [pc, #92]	; (8004c8c <MX_USART3_UART_Init+0x64>)
 8004c2e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8004c30:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004c34:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004c36:	2300      	movs	r3, #0
 8004c38:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004c3a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004c3c:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004c3e:	220c      	movs	r2, #12
 8004c40:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c42:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c44:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c46:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004c48:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c4a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004c4c:	f005 fc07 	bl	800a45e <HAL_UART_Init>
 8004c50:	b970      	cbnz	r0, 8004c70 <MX_USART3_UART_Init+0x48>
=======
 8004c62:	4817      	ldr	r0, [pc, #92]	; (8004cc0 <MX_USART3_UART_Init+0x60>)
 8004c64:	4b17      	ldr	r3, [pc, #92]	; (8004cc4 <MX_USART3_UART_Init+0x64>)
 8004c66:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8004c68:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004c6c:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004c72:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004c74:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004c76:	220c      	movs	r2, #12
 8004c78:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c7a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c7c:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c7e:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004c80:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c82:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004c84:	f005 fb57 	bl	800a336 <HAL_UART_Init>
 8004c88:	b970      	cbnz	r0, 8004ca8 <MX_USART3_UART_Init+0x48>
>>>>>>> render
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
<<<<<<< HEAD
 8004c52:	2100      	movs	r1, #0
 8004c54:	480c      	ldr	r0, [pc, #48]	; (8004c88 <MX_USART3_UART_Init+0x60>)
 8004c56:	f005 fc7a 	bl	800a54e <HAL_UARTEx_SetTxFifoThreshold>
 8004c5a:	b960      	cbnz	r0, 8004c76 <MX_USART3_UART_Init+0x4e>
=======
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	480c      	ldr	r0, [pc, #48]	; (8004cc0 <MX_USART3_UART_Init+0x60>)
 8004c8e:	f005 fbca 	bl	800a426 <HAL_UARTEx_SetTxFifoThreshold>
 8004c92:	b960      	cbnz	r0, 8004cae <MX_USART3_UART_Init+0x4e>
>>>>>>> render
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
<<<<<<< HEAD
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	480a      	ldr	r0, [pc, #40]	; (8004c88 <MX_USART3_UART_Init+0x60>)
 8004c60:	f005 fc9a 	bl	800a598 <HAL_UARTEx_SetRxFifoThreshold>
 8004c64:	b950      	cbnz	r0, 8004c7c <MX_USART3_UART_Init+0x54>
=======
 8004c94:	2100      	movs	r1, #0
 8004c96:	480a      	ldr	r0, [pc, #40]	; (8004cc0 <MX_USART3_UART_Init+0x60>)
 8004c98:	f005 fbea 	bl	800a470 <HAL_UARTEx_SetRxFifoThreshold>
 8004c9c:	b950      	cbnz	r0, 8004cb4 <MX_USART3_UART_Init+0x54>
>>>>>>> render
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
<<<<<<< HEAD
 8004c66:	4808      	ldr	r0, [pc, #32]	; (8004c88 <MX_USART3_UART_Init+0x60>)
 8004c68:	f005 fc52 	bl	800a510 <HAL_UARTEx_DisableFifoMode>
 8004c6c:	b948      	cbnz	r0, 8004c82 <MX_USART3_UART_Init+0x5a>
=======
 8004c9e:	4808      	ldr	r0, [pc, #32]	; (8004cc0 <MX_USART3_UART_Init+0x60>)
 8004ca0:	f005 fba2 	bl	800a3e8 <HAL_UARTEx_DisableFifoMode>
 8004ca4:	b948      	cbnz	r0, 8004cba <MX_USART3_UART_Init+0x5a>
>>>>>>> render
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
<<<<<<< HEAD
 8004c6e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004c70:	f7fd f982 	bl	8001f78 <Error_Handler>
 8004c74:	e7ed      	b.n	8004c52 <MX_USART3_UART_Init+0x2a>
    Error_Handler();
 8004c76:	f7fd f97f 	bl	8001f78 <Error_Handler>
 8004c7a:	e7ef      	b.n	8004c5c <MX_USART3_UART_Init+0x34>
    Error_Handler();
 8004c7c:	f7fd f97c 	bl	8001f78 <Error_Handler>
 8004c80:	e7f1      	b.n	8004c66 <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 8004c82:	f7fd f979 	bl	8001f78 <Error_Handler>
}
 8004c86:	e7f2      	b.n	8004c6e <MX_USART3_UART_Init+0x46>
 8004c88:	200112f0 	.word	0x200112f0
 8004c8c:	40004800 	.word	0x40004800

08004c90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004c90:	b570      	push	{r4, r5, r6, lr}
 8004c92:	b0a4      	sub	sp, #144	; 0x90
 8004c94:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c96:	2100      	movs	r1, #0
 8004c98:	911f      	str	r1, [sp, #124]	; 0x7c
 8004c9a:	9120      	str	r1, [sp, #128]	; 0x80
 8004c9c:	9121      	str	r1, [sp, #132]	; 0x84
 8004c9e:	9122      	str	r1, [sp, #136]	; 0x88
 8004ca0:	9123      	str	r1, [sp, #140]	; 0x8c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ca2:	2254      	movs	r2, #84	; 0x54
 8004ca4:	a80a      	add	r0, sp, #40	; 0x28
 8004ca6:	f009 fc97 	bl	800e5d8 <memset>
  if(uartHandle->Instance==UART4)
 8004caa:	6823      	ldr	r3, [r4, #0]
 8004cac:	4a66      	ldr	r2, [pc, #408]	; (8004e48 <HAL_UART_MspInit+0x1b8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d00b      	beq.n	8004cca <HAL_UART_MspInit+0x3a>
=======
 8004ca6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004ca8:	f7fd f966 	bl	8001f78 <Error_Handler>
 8004cac:	e7ed      	b.n	8004c8a <MX_USART3_UART_Init+0x2a>
    Error_Handler();
 8004cae:	f7fd f963 	bl	8001f78 <Error_Handler>
 8004cb2:	e7ef      	b.n	8004c94 <MX_USART3_UART_Init+0x34>
    Error_Handler();
 8004cb4:	f7fd f960 	bl	8001f78 <Error_Handler>
 8004cb8:	e7f1      	b.n	8004c9e <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 8004cba:	f7fd f95d 	bl	8001f78 <Error_Handler>
}
 8004cbe:	e7f2      	b.n	8004ca6 <MX_USART3_UART_Init+0x46>
 8004cc0:	200122e0 	.word	0x200122e0
 8004cc4:	40004800 	.word	0x40004800

08004cc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004cc8:	b570      	push	{r4, r5, r6, lr}
 8004cca:	b0a4      	sub	sp, #144	; 0x90
 8004ccc:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cce:	2100      	movs	r1, #0
 8004cd0:	911f      	str	r1, [sp, #124]	; 0x7c
 8004cd2:	9120      	str	r1, [sp, #128]	; 0x80
 8004cd4:	9121      	str	r1, [sp, #132]	; 0x84
 8004cd6:	9122      	str	r1, [sp, #136]	; 0x88
 8004cd8:	9123      	str	r1, [sp, #140]	; 0x8c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004cda:	2254      	movs	r2, #84	; 0x54
 8004cdc:	a80a      	add	r0, sp, #40	; 0x28
 8004cde:	f009 fbaf 	bl	800e440 <memset>
  if(uartHandle->Instance==UART4)
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	4a66      	ldr	r2, [pc, #408]	; (8004e80 <HAL_UART_MspInit+0x1b8>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00b      	beq.n	8004d02 <HAL_UART_MspInit+0x3a>
>>>>>>> render

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==UART5)
<<<<<<< HEAD
 8004cb2:	4a66      	ldr	r2, [pc, #408]	; (8004e4c <HAL_UART_MspInit+0x1bc>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d033      	beq.n	8004d20 <HAL_UART_MspInit+0x90>
=======
 8004cea:	4a66      	ldr	r2, [pc, #408]	; (8004e84 <HAL_UART_MspInit+0x1bc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d033      	beq.n	8004d58 <HAL_UART_MspInit+0x90>
>>>>>>> render

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
<<<<<<< HEAD
 8004cb8:	4a65      	ldr	r2, [pc, #404]	; (8004e50 <HAL_UART_MspInit+0x1c0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d06f      	beq.n	8004d9e <HAL_UART_MspInit+0x10e>
=======
 8004cf0:	4a65      	ldr	r2, [pc, #404]	; (8004e88 <HAL_UART_MspInit+0x1c0>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d06f      	beq.n	8004dd6 <HAL_UART_MspInit+0x10e>
>>>>>>> render

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
<<<<<<< HEAD
 8004cbe:	4a65      	ldr	r2, [pc, #404]	; (8004e54 <HAL_UART_MspInit+0x1c4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	f000 8096 	beq.w	8004df2 <HAL_UART_MspInit+0x162>
=======
 8004cf6:	4a65      	ldr	r2, [pc, #404]	; (8004e8c <HAL_UART_MspInit+0x1c4>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	f000 8096 	beq.w	8004e2a <HAL_UART_MspInit+0x162>
>>>>>>> render

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
<<<<<<< HEAD
 8004cc6:	b024      	add	sp, #144	; 0x90
 8004cc8:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8004cca:	2308      	movs	r3, #8
 8004ccc:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004cce:	a80a      	add	r0, sp, #40	; 0x28
 8004cd0:	f004 f9ce 	bl	8009070 <HAL_RCCEx_PeriphCLKConfig>
 8004cd4:	bb08      	cbnz	r0, 8004d1a <HAL_UART_MspInit+0x8a>
    __HAL_RCC_UART4_CLK_ENABLE();
 8004cd6:	4b60      	ldr	r3, [pc, #384]	; (8004e58 <HAL_UART_MspInit+0x1c8>)
 8004cd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004cda:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004cde:	659a      	str	r2, [r3, #88]	; 0x58
 8004ce0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ce2:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8004ce6:	9201      	str	r2, [sp, #4]
 8004ce8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cec:	f042 0204 	orr.w	r2, r2, #4
 8004cf0:	64da      	str	r2, [r3, #76]	; 0x4c
 8004cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	9302      	str	r3, [sp, #8]
 8004cfa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004cfc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004d00:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d02:	2302      	movs	r3, #2
 8004d04:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d0a:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8004d0c:	2305      	movs	r3, #5
 8004d0e:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d10:	a91f      	add	r1, sp, #124	; 0x7c
 8004d12:	4852      	ldr	r0, [pc, #328]	; (8004e5c <HAL_UART_MspInit+0x1cc>)
 8004d14:	f001 ff9a 	bl	8006c4c <HAL_GPIO_Init>
 8004d18:	e7d5      	b.n	8004cc6 <HAL_UART_MspInit+0x36>
      Error_Handler();
 8004d1a:	f7fd f92d 	bl	8001f78 <Error_Handler>
 8004d1e:	e7da      	b.n	8004cd6 <HAL_UART_MspInit+0x46>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8004d20:	2310      	movs	r3, #16
 8004d22:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d24:	a80a      	add	r0, sp, #40	; 0x28
 8004d26:	f004 f9a3 	bl	8009070 <HAL_RCCEx_PeriphCLKConfig>
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	d134      	bne.n	8004d98 <HAL_UART_MspInit+0x108>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004d2e:	4b4a      	ldr	r3, [pc, #296]	; (8004e58 <HAL_UART_MspInit+0x1c8>)
 8004d30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d32:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004d36:	659a      	str	r2, [r3, #88]	; 0x58
 8004d38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d3a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004d3e:	9203      	str	r2, [sp, #12]
 8004d40:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d44:	f042 0204 	orr.w	r2, r2, #4
 8004d48:	64da      	str	r2, [r3, #76]	; 0x4c
 8004d4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d4c:	f002 0204 	and.w	r2, r2, #4
 8004d50:	9204      	str	r2, [sp, #16]
 8004d52:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d56:	f042 0208 	orr.w	r2, r2, #8
 8004d5a:	64da      	str	r2, [r3, #76]	; 0x4c
 8004d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d5e:	f003 0308 	and.w	r3, r3, #8
 8004d62:	9305      	str	r3, [sp, #20]
 8004d64:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = LIN_TX_Pin;
 8004d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d6a:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d6c:	2602      	movs	r6, #2
 8004d6e:	9620      	str	r6, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d70:	2400      	movs	r4, #0
 8004d72:	9421      	str	r4, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d74:	9422      	str	r4, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8004d76:	2505      	movs	r5, #5
 8004d78:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(LIN_TX_GPIO_Port, &GPIO_InitStruct);
 8004d7a:	a91f      	add	r1, sp, #124	; 0x7c
 8004d7c:	4837      	ldr	r0, [pc, #220]	; (8004e5c <HAL_UART_MspInit+0x1cc>)
 8004d7e:	f001 ff65 	bl	8006c4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LIN_RX_Pin;
 8004d82:	2304      	movs	r3, #4
 8004d84:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d86:	9620      	str	r6, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d88:	9421      	str	r4, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d8a:	9422      	str	r4, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8004d8c:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(LIN_RX_GPIO_Port, &GPIO_InitStruct);
 8004d8e:	a91f      	add	r1, sp, #124	; 0x7c
 8004d90:	4833      	ldr	r0, [pc, #204]	; (8004e60 <HAL_UART_MspInit+0x1d0>)
 8004d92:	f001 ff5b 	bl	8006c4c <HAL_GPIO_Init>
 8004d96:	e796      	b.n	8004cc6 <HAL_UART_MspInit+0x36>
      Error_Handler();
 8004d98:	f7fd f8ee 	bl	8001f78 <Error_Handler>
 8004d9c:	e7c7      	b.n	8004d2e <HAL_UART_MspInit+0x9e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004d9e:	2302      	movs	r3, #2
 8004da0:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004da2:	a80a      	add	r0, sp, #40	; 0x28
 8004da4:	f004 f964 	bl	8009070 <HAL_RCCEx_PeriphCLKConfig>
 8004da8:	bb00      	cbnz	r0, 8004dec <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004daa:	4b2b      	ldr	r3, [pc, #172]	; (8004e58 <HAL_UART_MspInit+0x1c8>)
 8004dac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004dae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004db2:	659a      	str	r2, [r3, #88]	; 0x58
 8004db4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004db6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004dba:	9206      	str	r2, [sp, #24]
 8004dbc:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004dc0:	f042 0202 	orr.w	r2, r2, #2
 8004dc4:	64da      	str	r2, [r3, #76]	; 0x4c
 8004dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	9307      	str	r3, [sp, #28]
 8004dce:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004dd0:	2318      	movs	r3, #24
 8004dd2:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ddc:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004dde:	2307      	movs	r3, #7
 8004de0:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004de2:	a91f      	add	r1, sp, #124	; 0x7c
 8004de4:	481f      	ldr	r0, [pc, #124]	; (8004e64 <HAL_UART_MspInit+0x1d4>)
 8004de6:	f001 ff31 	bl	8006c4c <HAL_GPIO_Init>
 8004dea:	e76c      	b.n	8004cc6 <HAL_UART_MspInit+0x36>
      Error_Handler();
 8004dec:	f7fd f8c4 	bl	8001f78 <Error_Handler>
 8004df0:	e7db      	b.n	8004daa <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004df2:	2304      	movs	r3, #4
 8004df4:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004df6:	a80a      	add	r0, sp, #40	; 0x28
 8004df8:	f004 f93a 	bl	8009070 <HAL_RCCEx_PeriphCLKConfig>
 8004dfc:	bb08      	cbnz	r0, 8004e42 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004dfe:	4b16      	ldr	r3, [pc, #88]	; (8004e58 <HAL_UART_MspInit+0x1c8>)
 8004e00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e02:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004e06:	659a      	str	r2, [r3, #88]	; 0x58
 8004e08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e0a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8004e0e:	9208      	str	r2, [sp, #32]
 8004e10:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e14:	f042 0202 	orr.w	r2, r2, #2
 8004e18:	64da      	str	r2, [r3, #76]	; 0x4c
 8004e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	9309      	str	r3, [sp, #36]	; 0x24
 8004e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004e24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004e28:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e32:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004e34:	2307      	movs	r3, #7
 8004e36:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e38:	a91f      	add	r1, sp, #124	; 0x7c
 8004e3a:	480a      	ldr	r0, [pc, #40]	; (8004e64 <HAL_UART_MspInit+0x1d4>)
 8004e3c:	f001 ff06 	bl	8006c4c <HAL_GPIO_Init>
}
 8004e40:	e741      	b.n	8004cc6 <HAL_UART_MspInit+0x36>
      Error_Handler();
 8004e42:	f7fd f899 	bl	8001f78 <Error_Handler>
 8004e46:	e7da      	b.n	8004dfe <HAL_UART_MspInit+0x16e>
 8004e48:	40004c00 	.word	0x40004c00
 8004e4c:	40005000 	.word	0x40005000
 8004e50:	40004400 	.word	0x40004400
 8004e54:	40004800 	.word	0x40004800
 8004e58:	40021000 	.word	0x40021000
 8004e5c:	48000800 	.word	0x48000800
 8004e60:	48000c00 	.word	0x48000c00
 8004e64:	48000400 	.word	0x48000400

08004e68 <upper>:
=======
 8004cfe:	b024      	add	sp, #144	; 0x90
 8004d00:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8004d02:	2308      	movs	r3, #8
 8004d04:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d06:	a80a      	add	r0, sp, #40	; 0x28
 8004d08:	f004 f91e 	bl	8008f48 <HAL_RCCEx_PeriphCLKConfig>
 8004d0c:	bb08      	cbnz	r0, 8004d52 <HAL_UART_MspInit+0x8a>
    __HAL_RCC_UART4_CLK_ENABLE();
 8004d0e:	4b60      	ldr	r3, [pc, #384]	; (8004e90 <HAL_UART_MspInit+0x1c8>)
 8004d10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d12:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004d16:	659a      	str	r2, [r3, #88]	; 0x58
 8004d18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d1a:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8004d1e:	9201      	str	r2, [sp, #4]
 8004d20:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d24:	f042 0204 	orr.w	r2, r2, #4
 8004d28:	64da      	str	r2, [r3, #76]	; 0x4c
 8004d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	9302      	str	r3, [sp, #8]
 8004d32:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004d34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004d38:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d42:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8004d44:	2305      	movs	r3, #5
 8004d46:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d48:	a91f      	add	r1, sp, #124	; 0x7c
 8004d4a:	4852      	ldr	r0, [pc, #328]	; (8004e94 <HAL_UART_MspInit+0x1cc>)
 8004d4c:	f001 feea 	bl	8006b24 <HAL_GPIO_Init>
 8004d50:	e7d5      	b.n	8004cfe <HAL_UART_MspInit+0x36>
      Error_Handler();
 8004d52:	f7fd f911 	bl	8001f78 <Error_Handler>
 8004d56:	e7da      	b.n	8004d0e <HAL_UART_MspInit+0x46>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8004d58:	2310      	movs	r3, #16
 8004d5a:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d5c:	a80a      	add	r0, sp, #40	; 0x28
 8004d5e:	f004 f8f3 	bl	8008f48 <HAL_RCCEx_PeriphCLKConfig>
 8004d62:	2800      	cmp	r0, #0
 8004d64:	d134      	bne.n	8004dd0 <HAL_UART_MspInit+0x108>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004d66:	4b4a      	ldr	r3, [pc, #296]	; (8004e90 <HAL_UART_MspInit+0x1c8>)
 8004d68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d6a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004d6e:	659a      	str	r2, [r3, #88]	; 0x58
 8004d70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d72:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004d76:	9203      	str	r2, [sp, #12]
 8004d78:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d7c:	f042 0204 	orr.w	r2, r2, #4
 8004d80:	64da      	str	r2, [r3, #76]	; 0x4c
 8004d82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d84:	f002 0204 	and.w	r2, r2, #4
 8004d88:	9204      	str	r2, [sp, #16]
 8004d8a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d8e:	f042 0208 	orr.w	r2, r2, #8
 8004d92:	64da      	str	r2, [r3, #76]	; 0x4c
 8004d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	9305      	str	r3, [sp, #20]
 8004d9c:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = LIN_TX_Pin;
 8004d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004da2:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004da4:	2602      	movs	r6, #2
 8004da6:	9620      	str	r6, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da8:	2400      	movs	r4, #0
 8004daa:	9421      	str	r4, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dac:	9422      	str	r4, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8004dae:	2505      	movs	r5, #5
 8004db0:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(LIN_TX_GPIO_Port, &GPIO_InitStruct);
 8004db2:	a91f      	add	r1, sp, #124	; 0x7c
 8004db4:	4837      	ldr	r0, [pc, #220]	; (8004e94 <HAL_UART_MspInit+0x1cc>)
 8004db6:	f001 feb5 	bl	8006b24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LIN_RX_Pin;
 8004dba:	2304      	movs	r3, #4
 8004dbc:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dbe:	9620      	str	r6, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc0:	9421      	str	r4, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dc2:	9422      	str	r4, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8004dc4:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(LIN_RX_GPIO_Port, &GPIO_InitStruct);
 8004dc6:	a91f      	add	r1, sp, #124	; 0x7c
 8004dc8:	4833      	ldr	r0, [pc, #204]	; (8004e98 <HAL_UART_MspInit+0x1d0>)
 8004dca:	f001 feab 	bl	8006b24 <HAL_GPIO_Init>
 8004dce:	e796      	b.n	8004cfe <HAL_UART_MspInit+0x36>
      Error_Handler();
 8004dd0:	f7fd f8d2 	bl	8001f78 <Error_Handler>
 8004dd4:	e7c7      	b.n	8004d66 <HAL_UART_MspInit+0x9e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004dda:	a80a      	add	r0, sp, #40	; 0x28
 8004ddc:	f004 f8b4 	bl	8008f48 <HAL_RCCEx_PeriphCLKConfig>
 8004de0:	bb00      	cbnz	r0, 8004e24 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004de2:	4b2b      	ldr	r3, [pc, #172]	; (8004e90 <HAL_UART_MspInit+0x1c8>)
 8004de4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004de6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004dea:	659a      	str	r2, [r3, #88]	; 0x58
 8004dec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004dee:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004df2:	9206      	str	r2, [sp, #24]
 8004df4:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004df6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004df8:	f042 0202 	orr.w	r2, r2, #2
 8004dfc:	64da      	str	r2, [r3, #76]	; 0x4c
 8004dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	9307      	str	r3, [sp, #28]
 8004e06:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004e08:	2318      	movs	r3, #24
 8004e0a:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e10:	2300      	movs	r3, #0
 8004e12:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e14:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004e16:	2307      	movs	r3, #7
 8004e18:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e1a:	a91f      	add	r1, sp, #124	; 0x7c
 8004e1c:	481f      	ldr	r0, [pc, #124]	; (8004e9c <HAL_UART_MspInit+0x1d4>)
 8004e1e:	f001 fe81 	bl	8006b24 <HAL_GPIO_Init>
 8004e22:	e76c      	b.n	8004cfe <HAL_UART_MspInit+0x36>
      Error_Handler();
 8004e24:	f7fd f8a8 	bl	8001f78 <Error_Handler>
 8004e28:	e7db      	b.n	8004de2 <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004e2a:	2304      	movs	r3, #4
 8004e2c:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e2e:	a80a      	add	r0, sp, #40	; 0x28
 8004e30:	f004 f88a 	bl	8008f48 <HAL_RCCEx_PeriphCLKConfig>
 8004e34:	bb08      	cbnz	r0, 8004e7a <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004e36:	4b16      	ldr	r3, [pc, #88]	; (8004e90 <HAL_UART_MspInit+0x1c8>)
 8004e38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e3a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004e3e:	659a      	str	r2, [r3, #88]	; 0x58
 8004e40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e42:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8004e46:	9208      	str	r2, [sp, #32]
 8004e48:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e4c:	f042 0202 	orr.w	r2, r2, #2
 8004e50:	64da      	str	r2, [r3, #76]	; 0x4c
 8004e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	9309      	str	r3, [sp, #36]	; 0x24
 8004e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004e5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004e60:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e62:	2302      	movs	r3, #2
 8004e64:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e66:	2300      	movs	r3, #0
 8004e68:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e6a:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004e6c:	2307      	movs	r3, #7
 8004e6e:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e70:	a91f      	add	r1, sp, #124	; 0x7c
 8004e72:	480a      	ldr	r0, [pc, #40]	; (8004e9c <HAL_UART_MspInit+0x1d4>)
 8004e74:	f001 fe56 	bl	8006b24 <HAL_GPIO_Init>
}
 8004e78:	e741      	b.n	8004cfe <HAL_UART_MspInit+0x36>
      Error_Handler();
 8004e7a:	f7fd f87d 	bl	8001f78 <Error_Handler>
 8004e7e:	e7da      	b.n	8004e36 <HAL_UART_MspInit+0x16e>
 8004e80:	40004c00 	.word	0x40004c00
 8004e84:	40005000 	.word	0x40005000
 8004e88:	40004400 	.word	0x40004400
 8004e8c:	40004800 	.word	0x40004800
 8004e90:	40021000 	.word	0x40021000
 8004e94:	48000800 	.word	0x48000800
 8004e98:	48000c00 	.word	0x48000c00
 8004e9c:	48000400 	.word	0x48000400

08004ea0 <upper>:
>>>>>>> render
/* Returns upper 4 bits of cell_t
 * 		@param block_t block
 * **/
block_t upper(block_t block) {
	return (block & 0xF0) >> 4;
}
<<<<<<< HEAD
 8004e68:	0900      	lsrs	r0, r0, #4
 8004e6a:	4770      	bx	lr

08004e6c <lower>:
=======
 8004ea0:	0900      	lsrs	r0, r0, #4
 8004ea2:	4770      	bx	lr

08004ea4 <lower>:
>>>>>>> render

/* Returns lower 4 bits of cell_t */
block_t lower(block_t block) {
	return block & 0x0F;
}
<<<<<<< HEAD
 8004e6c:	f000 000f 	and.w	r0, r0, #15
 8004e70:	4770      	bx	lr

08004e72 <pixel_to_block>:
=======
 8004ea4:	f000 000f 	and.w	r0, r0, #15
 8004ea8:	4770      	bx	lr

08004eaa <pixel_to_block>:
>>>>>>> render
 */


block_c pixel_to_block(pixel_c pixel_coord) {
	return pixel_coord / BLOCK_WIDTH;
}
<<<<<<< HEAD
 8004e72:	0880      	lsrs	r0, r0, #2
 8004e74:	4770      	bx	lr

08004e76 <block_to_pixel>:

pixel_c block_to_pixel(block_c block_coord) {
	return BLOCK_WIDTH + block_coord * BLOCK_WIDTH - 1;
 8004e76:	3001      	adds	r0, #1
 8004e78:	0080      	lsls	r0, r0, #2
 8004e7a:	3801      	subs	r0, #1
}
 8004e7c:	b280      	uxth	r0, r0
 8004e7e:	4770      	bx	lr

08004e80 <block_to_cell_x>:
=======
 8004eaa:	0880      	lsrs	r0, r0, #2
 8004eac:	4770      	bx	lr

08004eae <block_to_pixel>:

pixel_c block_to_pixel(block_c block_coord) {
	return BLOCK_WIDTH + block_coord * BLOCK_WIDTH - 1;
 8004eae:	3001      	adds	r0, #1
 8004eb0:	0080      	lsls	r0, r0, #2
 8004eb2:	3801      	subs	r0, #1
}
 8004eb4:	b280      	uxth	r0, r0
 8004eb6:	4770      	bx	lr

08004eb8 <block_to_cell_x>:
>>>>>>> render
	return cell_coord;
}

cell_c block_to_cell_x(block_c block_coord) {
	return block_coord / 2;
}
<<<<<<< HEAD
 8004e80:	0840      	lsrs	r0, r0, #1
 8004e82:	4770      	bx	lr

08004e84 <block_to_cell_y>:
=======
 8004eb8:	0840      	lsrs	r0, r0, #1
 8004eba:	4770      	bx	lr

08004ebc <block_to_cell_y>:
>>>>>>> render

cell_c block_to_cell_y(block_c block_coord) {
	return block_coord;
}
<<<<<<< HEAD
 8004e84:	4770      	bx	lr

08004e86 <pixel_to_cell_x>:

cell_c pixel_to_cell_x(pixel_c pixel_coord) {
 8004e86:	b508      	push	{r3, lr}
	return block_to_cell_x(
 8004e88:	f7ff fff3 	bl	8004e72 <pixel_to_block>
 8004e8c:	f7ff fff8 	bl	8004e80 <block_to_cell_x>
			pixel_to_block(pixel_coord));
}
 8004e90:	bd08      	pop	{r3, pc}

08004e92 <pixel_to_cell_y>:

cell_c pixel_to_cell_y(pixel_c pixel_coord) {
 8004e92:	b508      	push	{r3, lr}
	return pixel_to_block(pixel_coord);
 8004e94:	f7ff ffed 	bl	8004e72 <pixel_to_block>
}
 8004e98:	bd08      	pop	{r3, pc}
	...

08004e9c <update_guysko_position>:
=======
 8004ebc:	4770      	bx	lr

08004ebe <pixel_to_cell_x>:

cell_c pixel_to_cell_x(pixel_c pixel_coord) {
 8004ebe:	b508      	push	{r3, lr}
	return block_to_cell_x(
 8004ec0:	f7ff fff3 	bl	8004eaa <pixel_to_block>
 8004ec4:	f7ff fff8 	bl	8004eb8 <block_to_cell_x>
			pixel_to_block(pixel_coord));
}
 8004ec8:	bd08      	pop	{r3, pc}

08004eca <pixel_to_cell_y>:

cell_c pixel_to_cell_y(pixel_c pixel_coord) {
 8004eca:	b508      	push	{r3, lr}
	return pixel_to_block(pixel_coord);
 8004ecc:	f7ff ffed 	bl	8004eaa <pixel_to_block>
}
 8004ed0:	bd08      	pop	{r3, pc}

08004ed2 <update_guysko_position>:
>>>>>>> render
/*
 * Simpy calculated the movement guysko makes based on his move. But when he goes outside of range of world in
 * x axis, he is teleported on the opposite side of the world. This does not apply for the y axis, where he
 * can be stuck at the botton of the world and of course won't fall down againg from sky.
 */
void update_guysko_position (guysko* player) {
<<<<<<< HEAD
 8004e9c:	b510      	push	{r4, lr}
 8004e9e:	4602      	mov	r2, r0
	int new_guysko_pos_x = (player->pos->x + player->mov->x) % (WORLD_WIDTH_BLOCKS * BLOCK_WIDTH);
 8004ea0:	6900      	ldr	r0, [r0, #16]
 8004ea2:	8803      	ldrh	r3, [r0, #0]
 8004ea4:	68d4      	ldr	r4, [r2, #12]
 8004ea6:	f9b4 2000 	ldrsh.w	r2, [r4]
 8004eaa:	4413      	add	r3, r2
 8004eac:	4a10      	ldr	r2, [pc, #64]	; (8004ef0 <update_guysko_position+0x54>)
 8004eae:	fb82 1203 	smull	r1, r2, r2, r3
 8004eb2:	17d9      	asrs	r1, r3, #31
 8004eb4:	ebc1 2162 	rsb	r1, r1, r2, asr #9
 8004eb8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004ebc:	fb02 3111 	mls	r1, r2, r1, r3
	int new_guysko_pos_y = (player->pos->y - player->mov->y);
 8004ec0:	8842      	ldrh	r2, [r0, #2]
 8004ec2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8004ec6:	1ad2      	subs	r2, r2, r3
	if (new_guysko_pos_x < 0) {
 8004ec8:	2900      	cmp	r1, #0
 8004eca:	db07      	blt.n	8004edc <update_guysko_position+0x40>
		new_guysko_pos_x = WORLD_WIDTH_BLOCKS * BLOCK_WIDTH + new_guysko_pos_x;
	}
	if (new_guysko_pos_y < 0) {
 8004ecc:	2a00      	cmp	r2, #0
 8004ece:	db08      	blt.n	8004ee2 <update_guysko_position+0x46>
//		new_guysko_pos_y = WORLD_HEIGHT * 4 + new_guysko_pos_y;
		new_guysko_pos_y = 0;
	} else if (new_guysko_pos_y > WORLD_HEIGHT_BLOCKS * BLOCK_WIDTH) {
 8004ed0:	f5b2 7f70 	cmp.w	r2, #960	; 0x3c0
 8004ed4:	dd06      	ble.n	8004ee4 <update_guysko_position+0x48>
		new_guysko_pos_y = WORLD_HEIGHT_BLOCKS * BLOCK_WIDTH;
 8004ed6:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8004eda:	e003      	b.n	8004ee4 <update_guysko_position+0x48>
		new_guysko_pos_x = WORLD_WIDTH_BLOCKS * BLOCK_WIDTH + new_guysko_pos_x;
 8004edc:	f501 61c8 	add.w	r1, r1, #1600	; 0x640
 8004ee0:	e7f4      	b.n	8004ecc <update_guysko_position+0x30>
		new_guysko_pos_y = 0;
 8004ee2:	2200      	movs	r2, #0
	}
	set_postition(player->pos, new_guysko_pos_x, new_guysko_pos_y);
 8004ee4:	b292      	uxth	r2, r2
 8004ee6:	b289      	uxth	r1, r1
 8004ee8:	f000 fa8d 	bl	8005406 <set_postition>
}
 8004eec:	bd10      	pop	{r4, pc}
 8004eee:	bf00      	nop
 8004ef0:	51eb851f 	.word	0x51eb851f

08004ef4 <update_guysko_move>:
=======
 8004ed2:	b510      	push	{r4, lr}
 8004ed4:	4604      	mov	r4, r0
//		new_guysko_pos_y = 0;
//	} else if (new_guysko_pos_y > WORLD_HEIGHT_BLOCKS * BLOCK_WIDTH) {
//		new_guysko_pos_y = WORLD_HEIGHT_BLOCKS * BLOCK_WIDTH;
//	}
//	set_position(player->pos, new_guysko_pos_x, new_guysko_pos_y);
	update_position_x(player->pos, player->pos->x, player->mov->x);
 8004ed6:	6900      	ldr	r0, [r0, #16]
 8004ed8:	68e3      	ldr	r3, [r4, #12]
 8004eda:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004ede:	f9b0 1000 	ldrsh.w	r1, [r0]
 8004ee2:	f000 fa11 	bl	8005308 <update_position_x>
	update_position_y(player->pos, player->pos->y, (-1) * player->mov->y);
 8004ee6:	6920      	ldr	r0, [r4, #16]
 8004ee8:	68e3      	ldr	r3, [r4, #12]
 8004eea:	885a      	ldrh	r2, [r3, #2]
 8004eec:	4252      	negs	r2, r2
 8004eee:	b212      	sxth	r2, r2
 8004ef0:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8004ef4:	f000 fa21 	bl	800533a <update_position_y>
}
 8004ef8:	bd10      	pop	{r4, pc}
	...

08004efc <update_guysko_move>:
>>>>>>> render
/*
 * Because it is posible at slow speed and high FPS for guysko to move less than one pixel in difference of
 * one frame, the traveled distance that was not displayed in previos frame is at this frame taken into calculation
 * with respect to value in "player->mov->x_remainder".
 */
void update_guysko_move (guysko* player, int FPS) {
<<<<<<< HEAD
 8004ef4:	b510      	push	{r4, lr}
	float mov_x = ((float)1 / ((float) (1000 / FPS) / (float)player->vel->x)) + player->mov->x_remainder;
 8004ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004efa:	fb93 f3f1 	sdiv	r3, r3, r1
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f06:	6883      	ldr	r3, [r0, #8]
 8004f08:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004f0c:	ee07 2a10 	vmov	s14, r2
 8004f10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004f14:	eec7 5a87 	vdiv.f32	s11, s15, s14
 8004f18:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004f1c:	eec6 6a25 	vdiv.f32	s13, s12, s11
 8004f20:	68c4      	ldr	r4, [r0, #12]
 8004f22:	ed94 7a01 	vldr	s14, [r4, #4]
 8004f26:	ee76 6a87 	vadd.f32	s13, s13, s14
	float mov_y = ((float)1 / ((float) (1000 / FPS) / (float)player->vel->y)) + player->mov->y_remainder;
 8004f2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004f2e:	ee07 3a10 	vmov	s14, r3
 8004f32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004f36:	eec7 5a87 	vdiv.f32	s11, s15, s14
 8004f3a:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8004f3e:	edd4 7a02 	vldr	s15, [r4, #8]
 8004f42:	ee37 7a27 	vadd.f32	s14, s14, s15

	short pix_move_x = (short) mov_x % 100;
 8004f46:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8004f4a:	ee17 3a90 	vmov	r3, s15
 8004f4e:	b219      	sxth	r1, r3
 8004f50:	4b17      	ldr	r3, [pc, #92]	; (8004fb0 <update_guysko_move+0xbc>)
 8004f52:	fb83 c201 	smull	ip, r2, r3, r1
 8004f56:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 8004f5a:	ebcc 1c62 	rsb	ip, ip, r2, asr #5
 8004f5e:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8004f62:	fb0e 111c 	mls	r1, lr, ip, r1
 8004f66:	b209      	sxth	r1, r1
	short pix_move_y = (short) mov_y % 100;
 8004f68:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8004f6c:	ee17 2a90 	vmov	r2, s15
 8004f70:	b212      	sxth	r2, r2
 8004f72:	fb83 c302 	smull	ip, r3, r3, r2
 8004f76:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8004f7a:	ebcc 1363 	rsb	r3, ip, r3, asr #5
 8004f7e:	fb0e 2213 	mls	r2, lr, r3, r2
 8004f82:	b212      	sxth	r2, r2

	player->mov->x_remainder = mov_x - (float)pix_move_x;
 8004f84:	ee07 1a90 	vmov	s15, r1
 8004f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f8c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004f90:	edc4 6a01 	vstr	s13, [r4, #4]
	player->mov->y_remainder = mov_y - (float)pix_move_y;
 8004f94:	ee07 2a90 	vmov	s15, r2
 8004f98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f9c:	68c3      	ldr	r3, [r0, #12]
 8004f9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004fa2:	ed83 7a02 	vstr	s14, [r3, #8]

	set_move(player->mov, pix_move_x, pix_move_y);
 8004fa6:	68c0      	ldr	r0, [r0, #12]
 8004fa8:	f000 fa2a 	bl	8005400 <set_move>
}
 8004fac:	bd10      	pop	{r4, pc}
 8004fae:	bf00      	nop
 8004fb0:	51eb851f 	.word	0x51eb851f

08004fb4 <update_guysko_velocity>:
=======
 8004efc:	b510      	push	{r4, lr}
	float mov_x = ((float) 1 / ((float) (1000 / FPS) / (float) player->vel->x)) + player->mov->x_remainder;
 8004efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f02:	fb93 f3f1 	sdiv	r3, r3, r1
 8004f06:	ee07 3a90 	vmov	s15, r3
 8004f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f0e:	6883      	ldr	r3, [r0, #8]
 8004f10:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004f14:	ee07 2a10 	vmov	s14, r2
 8004f18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004f1c:	eec7 5a87 	vdiv.f32	s11, s15, s14
 8004f20:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004f24:	eec6 6a25 	vdiv.f32	s13, s12, s11
 8004f28:	68c4      	ldr	r4, [r0, #12]
 8004f2a:	ed94 7a01 	vldr	s14, [r4, #4]
 8004f2e:	ee76 6a87 	vadd.f32	s13, s13, s14
	float mov_y = ((float) 1 / ((float) (1000 / FPS) / (float) player->vel->y)) + player->mov->y_remainder;
 8004f32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004f36:	ee07 3a10 	vmov	s14, r3
 8004f3a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004f3e:	eec7 5a87 	vdiv.f32	s11, s15, s14
 8004f42:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8004f46:	edd4 7a02 	vldr	s15, [r4, #8]
 8004f4a:	ee37 7a27 	vadd.f32	s14, s14, s15

	short pix_move_x = (short) mov_x % 100;
 8004f4e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8004f52:	ee17 3a90 	vmov	r3, s15
 8004f56:	b219      	sxth	r1, r3
 8004f58:	4b17      	ldr	r3, [pc, #92]	; (8004fb8 <update_guysko_move+0xbc>)
 8004f5a:	fb83 c201 	smull	ip, r2, r3, r1
 8004f5e:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 8004f62:	ebcc 1c62 	rsb	ip, ip, r2, asr #5
 8004f66:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8004f6a:	fb0e 111c 	mls	r1, lr, ip, r1
 8004f6e:	b209      	sxth	r1, r1
	short pix_move_y = (short) mov_y % 100;
 8004f70:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8004f74:	ee17 2a90 	vmov	r2, s15
 8004f78:	b212      	sxth	r2, r2
 8004f7a:	fb83 c302 	smull	ip, r3, r3, r2
 8004f7e:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8004f82:	ebcc 1363 	rsb	r3, ip, r3, asr #5
 8004f86:	fb0e 2213 	mls	r2, lr, r3, r2
 8004f8a:	b212      	sxth	r2, r2

	player->mov->x_remainder = mov_x - (float) pix_move_x;
 8004f8c:	ee07 1a90 	vmov	s15, r1
 8004f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f94:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004f98:	edc4 6a01 	vstr	s13, [r4, #4]
	player->mov->y_remainder = mov_y - (float) pix_move_y;
 8004f9c:	ee07 2a90 	vmov	s15, r2
 8004fa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fa4:	68c3      	ldr	r3, [r0, #12]
 8004fa6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004faa:	ed83 7a02 	vstr	s14, [r3, #8]

	set_move(player->mov, pix_move_x, pix_move_y);
 8004fae:	68c0      	ldr	r0, [r0, #12]
 8004fb0:	f000 f9a4 	bl	80052fc <set_move>
}
 8004fb4:	bd10      	pop	{r4, pc}
 8004fb6:	bf00      	nop
 8004fb8:	51eb851f 	.word	0x51eb851f

08004fbc <update_guysko_velocity>:
>>>>>>> render

/*
 * Guysko's velocity is calculated based on force of gravity and his jump acceleration. When calculating
 * velocity of each direction, button input is taken into consideration.
 */
void update_guysko_velocity(guysko* player) {
<<<<<<< HEAD
 8004fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fb8:	4604      	mov	r4, r0
=======
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	4604      	mov	r4, r0
>>>>>>> render

	// TODO: preverba ali se je zaletel v solid levo desno gor, dol?
	// TODO: update movement based on that

<<<<<<< HEAD
	uint8_t material_u = get_block(player->pos->x, player->pos->y - GUYSKO_IMG_Y - 1);
 8004fba:	6903      	ldr	r3, [r0, #16]
 8004fbc:	8859      	ldrh	r1, [r3, #2]
 8004fbe:	3918      	subs	r1, #24
 8004fc0:	b289      	uxth	r1, r1
 8004fc2:	8818      	ldrh	r0, [r3, #0]
 8004fc4:	f7fe ffcc 	bl	8003f60 <get_block>
 8004fc8:	4607      	mov	r7, r0
	uint8_t material_r = get_block(player->pos->x + 1, player->pos->y);
 8004fca:	6923      	ldr	r3, [r4, #16]
 8004fcc:	8818      	ldrh	r0, [r3, #0]
 8004fce:	3001      	adds	r0, #1
 8004fd0:	8859      	ldrh	r1, [r3, #2]
 8004fd2:	b280      	uxth	r0, r0
 8004fd4:	f7fe ffc4 	bl	8003f60 <get_block>
 8004fd8:	4680      	mov	r8, r0
	uint8_t material_d = get_block(player->pos->x, player->pos->y + 1);
 8004fda:	6923      	ldr	r3, [r4, #16]
 8004fdc:	8859      	ldrh	r1, [r3, #2]
 8004fde:	3101      	adds	r1, #1
 8004fe0:	b289      	uxth	r1, r1
 8004fe2:	8818      	ldrh	r0, [r3, #0]
 8004fe4:	f7fe ffbc 	bl	8003f60 <get_block>
 8004fe8:	4605      	mov	r5, r0
	uint8_t material_l = get_block(player->pos->x - GUYSKO_IMG_X - 1, player->pos->y);
 8004fea:	6922      	ldr	r2, [r4, #16]
 8004fec:	8813      	ldrh	r3, [r2, #0]
 8004fee:	3b0d      	subs	r3, #13
 8004ff0:	8851      	ldrh	r1, [r2, #2]
 8004ff2:	b298      	uxth	r0, r3
 8004ff4:	f7fe ffb4 	bl	8003f60 <get_block>
 8004ff8:	4681      	mov	r9, r0

	// down left and down right
	uint8_t mat_d_l = upper(material_d);
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	f7ff ff34 	bl	8004e68 <upper>
 8005000:	4606      	mov	r6, r0
	uint8_t mat_d_r = lower(material_d);
 8005002:	4628      	mov	r0, r5
 8005004:	f7ff ff32 	bl	8004e6c <lower>
 8005008:	4605      	mov	r5, r0


	if (move_right) {
 800500a:	4b5e      	ldr	r3, [pc, #376]	; (8005184 <update_guysko_velocity+0x1d0>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d053      	beq.n	80050ba <update_guysko_velocity+0x106>
		if (player->vel->x < 0) set_velocity(player->vel, 0 + GUYSKO_WALK_VEL_INC, player->vel->y);
 8005012:	68a0      	ldr	r0, [r4, #8]
 8005014:	f9b0 1000 	ldrsh.w	r1, [r0]
 8005018:	2900      	cmp	r1, #0
 800501a:	db3b      	blt.n	8005094 <update_guysko_velocity+0xe0>
		else set_velocity(player->vel, player->vel->x + GUYSKO_WALK_VEL_INC, player->vel->y);
 800501c:	b289      	uxth	r1, r1
 800501e:	310a      	adds	r1, #10
 8005020:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8005024:	b209      	sxth	r1, r1
 8005026:	f000 fa36 	bl	8005496 <set_velocity>
	// MAX VELOCITY IN X DIRECTION
		if (player->vel->x > GUYSKO_MAX_RIGHT_VELOCITY) {
 800502a:	68a0      	ldr	r0, [r4, #8]
 800502c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8005030:	2bc8      	cmp	r3, #200	; 0xc8
 8005032:	dc35      	bgt.n	80050a0 <update_guysko_velocity+0xec>
			set_velocity(player->vel, GUYSKO_MAX_RIGHT_VELOCITY, player->vel->y);
		}

		action_reset(MOVE_RIGHT_INDEX);
 8005034:	2007      	movs	r0, #7
 8005036:	f7fc f807 	bl	8001048 <action_reset>

		// Collision in right direction
		if (isSolid(material_r)) {
 800503a:	4640      	mov	r0, r8
 800503c:	f7fe ffb4 	bl	8003fa8 <isSolid>
 8005040:	2800      	cmp	r0, #0
 8005042:	d133      	bne.n	80050ac <update_guysko_velocity+0xf8>
=======
//	uint8_t material_u = get_block_with_pixels_from_WORLD(player->pos->x, player->pos->y - GUYSKO_IMG_Y - 1);
	uint8_t material_r = get_block_with_pixels_from_WORLD(player->pos->x + 1, player->pos->y);
 8004fc0:	6903      	ldr	r3, [r0, #16]
 8004fc2:	8818      	ldrh	r0, [r3, #0]
 8004fc4:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8004fc8:	3001      	adds	r0, #1
 8004fca:	b289      	uxth	r1, r1
 8004fcc:	b280      	uxth	r0, r0
 8004fce:	f7fe ffe3 	bl	8003f98 <get_block_with_pixels_from_WORLD>
 8004fd2:	4606      	mov	r6, r0
	uint8_t material_d = get_block_with_pixels_from_WORLD(player->pos->x, player->pos->y + 1);
 8004fd4:	6923      	ldr	r3, [r4, #16]
 8004fd6:	f9b3 0000 	ldrsh.w	r0, [r3]
 8004fda:	8859      	ldrh	r1, [r3, #2]
 8004fdc:	3101      	adds	r1, #1
 8004fde:	b289      	uxth	r1, r1
 8004fe0:	b280      	uxth	r0, r0
 8004fe2:	f7fe ffd9 	bl	8003f98 <get_block_with_pixels_from_WORLD>
 8004fe6:	4605      	mov	r5, r0
	uint8_t material_l = get_block_with_pixels_from_WORLD(player->pos->x - GUYSKO_IMG_X - 1, player->pos->y);
 8004fe8:	6922      	ldr	r2, [r4, #16]
 8004fea:	8813      	ldrh	r3, [r2, #0]
 8004fec:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8004ff0:	3b0d      	subs	r3, #13
 8004ff2:	b289      	uxth	r1, r1
 8004ff4:	b298      	uxth	r0, r3
 8004ff6:	f7fe ffcf 	bl	8003f98 <get_block_with_pixels_from_WORLD>


	if (move_right) {
 8004ffa:	4b51      	ldr	r3, [pc, #324]	; (8005140 <update_guysko_velocity+0x184>)
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d04f      	beq.n	80050a2 <update_guysko_velocity+0xe6>
		if (player->vel->x < 0) set_velocity(player->vel, 0 + GUYSKO_WALK_VEL_INC, player->vel->y);
 8005002:	68a0      	ldr	r0, [r4, #8]
 8005004:	f9b0 1000 	ldrsh.w	r1, [r0]
 8005008:	2900      	cmp	r1, #0
 800500a:	db37      	blt.n	800507c <update_guysko_velocity+0xc0>
		else set_velocity(player->vel, player->vel->x + GUYSKO_WALK_VEL_INC, player->vel->y);
 800500c:	b289      	uxth	r1, r1
 800500e:	310a      	adds	r1, #10
 8005010:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8005014:	b209      	sxth	r1, r1
 8005016:	f000 f9a9 	bl	800536c <set_velocity>
		// MAX VELOCITY IN X DIRECTION
		if (player->vel->x > GUYSKO_MAX_RIGHT_VELOCITY) set_velocity(player->vel, GUYSKO_MAX_RIGHT_VELOCITY, player->vel->y);
 800501a:	68a0      	ldr	r0, [r4, #8]
 800501c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8005020:	2bc8      	cmp	r3, #200	; 0xc8
 8005022:	dc31      	bgt.n	8005088 <update_guysko_velocity+0xcc>
		action_reset(MOVE_RIGHT_INDEX);
 8005024:	2007      	movs	r0, #7
 8005026:	f7fc f80f 	bl	8001048 <action_reset>
		if (isSolid(material_r)) set_velocity(player->vel, 0, player->vel->y);
 800502a:	4630      	mov	r0, r6
 800502c:	f7fe ffd8 	bl	8003fe0 <isSolid>
 8005030:	bb80      	cbnz	r0, 8005094 <update_guysko_velocity+0xd8>
>>>>>>> render
	} else {
		set_velocity(player->vel, 0, player->vel->y);
	}

			// y axis
	set_velocity(player->vel, player->vel->x, player->vel->y + GRAVITY);
<<<<<<< HEAD
 8005044:	68a0      	ldr	r0, [r4, #8]
 8005046:	8842      	ldrh	r2, [r0, #2]
 8005048:	3a05      	subs	r2, #5
 800504a:	b212      	sxth	r2, r2
 800504c:	f9b0 1000 	ldrsh.w	r1, [r0]
 8005050:	f000 fa21 	bl	8005496 <set_velocity>
	if (isSolid(mat_d_l) || isSolid(mat_d_r) || player->pos->y / 4 > LVL1_HMAP[player->pos->x / 4]) {
 8005054:	4630      	mov	r0, r6
 8005056:	f7fe ffa7 	bl	8003fa8 <isSolid>
 800505a:	2800      	cmp	r0, #0
 800505c:	d066      	beq.n	800512c <update_guysko_velocity+0x178>
		if (move_up) {
 800505e:	4b4a      	ldr	r3, [pc, #296]	; (8005188 <update_guysko_velocity+0x1d4>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d072      	beq.n	800514c <update_guysko_velocity+0x198>
			set_velocity(player->vel, player->vel->x, player->vel->y + GUYSKO_JUMP_ACCELERATION);
 8005066:	68a0      	ldr	r0, [r4, #8]
 8005068:	8842      	ldrh	r2, [r0, #2]
 800506a:	3296      	adds	r2, #150	; 0x96
 800506c:	b212      	sxth	r2, r2
 800506e:	f9b0 1000 	ldrsh.w	r1, [r0]
 8005072:	f000 fa10 	bl	8005496 <set_velocity>
			action_reset(MOVE_UP_INDEX);
 8005076:	2006      	movs	r0, #6
 8005078:	f7fb ffe6 	bl	8001048 <action_reset>
			if (isSolid(material_u)) set_velocity(player->vel, player->vel->x, 0);
 800507c:	4638      	mov	r0, r7
 800507e:	f7fe ff93 	bl	8003fa8 <isSolid>
 8005082:	2800      	cmp	r0, #0
 8005084:	d068      	beq.n	8005158 <update_guysko_velocity+0x1a4>
 8005086:	68a0      	ldr	r0, [r4, #8]
 8005088:	2200      	movs	r2, #0
 800508a:	f9b0 1000 	ldrsh.w	r1, [r0]
 800508e:	f000 fa02 	bl	8005496 <set_velocity>
 8005092:	e061      	b.n	8005158 <update_guysko_velocity+0x1a4>
		if (player->vel->x < 0) set_velocity(player->vel, 0 + GUYSKO_WALK_VEL_INC, player->vel->y);
 8005094:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8005098:	210a      	movs	r1, #10
 800509a:	f000 f9fc 	bl	8005496 <set_velocity>
 800509e:	e7c4      	b.n	800502a <update_guysko_velocity+0x76>
			set_velocity(player->vel, GUYSKO_MAX_RIGHT_VELOCITY, player->vel->y);
 80050a0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80050a4:	21c8      	movs	r1, #200	; 0xc8
 80050a6:	f000 f9f6 	bl	8005496 <set_velocity>
 80050aa:	e7c3      	b.n	8005034 <update_guysko_velocity+0x80>
			set_velocity(player->vel, 0, player->vel->y);
 80050ac:	68a0      	ldr	r0, [r4, #8]
 80050ae:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80050b2:	2100      	movs	r1, #0
 80050b4:	f000 f9ef 	bl	8005496 <set_velocity>
 80050b8:	e7c4      	b.n	8005044 <update_guysko_velocity+0x90>
	} else if (move_left) {
 80050ba:	4b34      	ldr	r3, [pc, #208]	; (800518c <update_guysko_velocity+0x1d8>)
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	b373      	cbz	r3, 800511e <update_guysko_velocity+0x16a>
		if (player->vel->x > 0) set_velocity(player->vel, 0 - GUYSKO_WALK_VEL_INC, player->vel->y);
 80050c0:	68a0      	ldr	r0, [r4, #8]
 80050c2:	f9b0 1000 	ldrsh.w	r1, [r0]
 80050c6:	2900      	cmp	r1, #0
 80050c8:	dd1a      	ble.n	8005100 <update_guysko_velocity+0x14c>
 80050ca:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80050ce:	f06f 0109 	mvn.w	r1, #9
 80050d2:	f000 f9e0 	bl	8005496 <set_velocity>
		if (player->vel->x < GUYSKO_MAX_LEFT_VELOCITY) set_velocity(player->vel, GUYSKO_MAX_LEFT_VELOCITY, player->vel->y);
 80050d6:	68a0      	ldr	r0, [r4, #8]
 80050d8:	f9b0 3000 	ldrsh.w	r3, [r0]
 80050dc:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 80050e0:	db16      	blt.n	8005110 <update_guysko_velocity+0x15c>
		action_reset(MOVE_LEFT_INDEX);
 80050e2:	2009      	movs	r0, #9
 80050e4:	f7fb ffb0 	bl	8001048 <action_reset>
		if (isSolid(material_l)) set_velocity(player->vel, 0, player->vel->y);
 80050e8:	4648      	mov	r0, r9
 80050ea:	f7fe ff5d 	bl	8003fa8 <isSolid>
 80050ee:	2800      	cmp	r0, #0
 80050f0:	d0a8      	beq.n	8005044 <update_guysko_velocity+0x90>
 80050f2:	68a0      	ldr	r0, [r4, #8]
 80050f4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80050f8:	2100      	movs	r1, #0
 80050fa:	f000 f9cc 	bl	8005496 <set_velocity>
 80050fe:	e7a1      	b.n	8005044 <update_guysko_velocity+0x90>
		else set_velocity(player->vel, player->vel->x - GUYSKO_WALK_VEL_INC, player->vel->y);
 8005100:	b289      	uxth	r1, r1
 8005102:	390a      	subs	r1, #10
 8005104:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8005108:	b209      	sxth	r1, r1
 800510a:	f000 f9c4 	bl	8005496 <set_velocity>
 800510e:	e7e2      	b.n	80050d6 <update_guysko_velocity+0x122>
		if (player->vel->x < GUYSKO_MAX_LEFT_VELOCITY) set_velocity(player->vel, GUYSKO_MAX_LEFT_VELOCITY, player->vel->y);
 8005110:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8005114:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8005118:	f000 f9bd 	bl	8005496 <set_velocity>
 800511c:	e7e1      	b.n	80050e2 <update_guysko_velocity+0x12e>
		set_velocity(player->vel, 0, player->vel->y);
 800511e:	68a0      	ldr	r0, [r4, #8]
 8005120:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8005124:	2100      	movs	r1, #0
 8005126:	f000 f9b6 	bl	8005496 <set_velocity>
 800512a:	e78b      	b.n	8005044 <update_guysko_velocity+0x90>
	if (isSolid(mat_d_l) || isSolid(mat_d_r) || player->pos->y / 4 > LVL1_HMAP[player->pos->x / 4]) {
 800512c:	4628      	mov	r0, r5
 800512e:	f7fe ff3b 	bl	8003fa8 <isSolid>
 8005132:	2800      	cmp	r0, #0
 8005134:	d193      	bne.n	800505e <update_guysko_velocity+0xaa>
 8005136:	6923      	ldr	r3, [r4, #16]
 8005138:	885a      	ldrh	r2, [r3, #2]
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	089b      	lsrs	r3, r3, #2
 800513e:	4914      	ldr	r1, [pc, #80]	; (8005190 <update_guysko_velocity+0x1dc>)
 8005140:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005144:	ebb3 0f92 	cmp.w	r3, r2, lsr #2
 8005148:	d206      	bcs.n	8005158 <update_guysko_velocity+0x1a4>
 800514a:	e788      	b.n	800505e <update_guysko_velocity+0xaa>
		} else {
			set_velocity(player->vel, player->vel->x, 0);
 800514c:	68a0      	ldr	r0, [r4, #8]
 800514e:	2200      	movs	r2, #0
 8005150:	f9b0 1000 	ldrsh.w	r1, [r0]
 8005154:	f000 f99f 	bl	8005496 <set_velocity>
=======
 8005032:	68a0      	ldr	r0, [r4, #8]
 8005034:	8842      	ldrh	r2, [r0, #2]
 8005036:	3a05      	subs	r2, #5
 8005038:	b212      	sxth	r2, r2
 800503a:	f9b0 1000 	ldrsh.w	r1, [r0]
 800503e:	f000 f995 	bl	800536c <set_velocity>
	if (isSolid(material_d)) {
 8005042:	4628      	mov	r0, r5
 8005044:	f7fe ffcc 	bl	8003fe0 <isSolid>
 8005048:	b170      	cbz	r0, 8005068 <update_guysko_velocity+0xac>
		if (move_up) {
 800504a:	4b3e      	ldr	r3, [pc, #248]	; (8005144 <update_guysko_velocity+0x188>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d061      	beq.n	8005116 <update_guysko_velocity+0x15a>
			set_velocity(player->vel, player->vel->x, player->vel->y + GUYSKO_JUMP_ACCELERATION);
 8005052:	68a0      	ldr	r0, [r4, #8]
 8005054:	8842      	ldrh	r2, [r0, #2]
 8005056:	32c8      	adds	r2, #200	; 0xc8
 8005058:	b212      	sxth	r2, r2
 800505a:	f9b0 1000 	ldrsh.w	r1, [r0]
 800505e:	f000 f985 	bl	800536c <set_velocity>
			action_reset(MOVE_UP_INDEX);
 8005062:	2006      	movs	r0, #6
 8005064:	f7fb fff0 	bl	8001048 <action_reset>
		} else {
			set_velocity(player->vel, player->vel->x, 0);
>>>>>>> render
		}
	}
	// MAX VELOCITY IN Y DIRECTION
	if (player->vel->y < GUYSKO_MAX_DOWN_VELOCITY) {
<<<<<<< HEAD
 8005158:	68a0      	ldr	r0, [r4, #8]
 800515a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800515e:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8005162:	db03      	blt.n	800516c <update_guysko_velocity+0x1b8>
		set_velocity(player->vel, player->vel->x, GUYSKO_MAX_DOWN_VELOCITY);
	} else if (player->vel->y > GUYSKO_MAX_UP_VELOCITY) {
 8005164:	2bc8      	cmp	r3, #200	; 0xc8
 8005166:	dc07      	bgt.n	8005178 <update_guysko_velocity+0x1c4>
=======
 8005068:	68a0      	ldr	r0, [r4, #8]
 800506a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800506e:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8005072:	db57      	blt.n	8005124 <update_guysko_velocity+0x168>
		set_velocity(player->vel, player->vel->x, GUYSKO_MAX_DOWN_VELOCITY);
	} else if (player->vel->y > GUYSKO_MAX_UP_VELOCITY) {
 8005074:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005078:	dc5a      	bgt.n	8005130 <update_guysko_velocity+0x174>
>>>>>>> render
		set_velocity(player->vel, player->vel->x, GUYSKO_MAX_UP_VELOCITY);
	}
	return;

	// TODO: DIFFERENCE OF PREVIOUS AND NEW VELOCITY: FOR DAMAGE OF HIGH FALL
}
<<<<<<< HEAD
 8005168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		set_velocity(player->vel, player->vel->x, GUYSKO_MAX_DOWN_VELOCITY);
 800516c:	4a09      	ldr	r2, [pc, #36]	; (8005194 <update_guysko_velocity+0x1e0>)
 800516e:	f9b0 1000 	ldrsh.w	r1, [r0]
 8005172:	f000 f990 	bl	8005496 <set_velocity>
 8005176:	e7f7      	b.n	8005168 <update_guysko_velocity+0x1b4>
		set_velocity(player->vel, player->vel->x, GUYSKO_MAX_UP_VELOCITY);
 8005178:	22c8      	movs	r2, #200	; 0xc8
 800517a:	f9b0 1000 	ldrsh.w	r1, [r0]
 800517e:	f000 f98a 	bl	8005496 <set_velocity>
	return;
 8005182:	e7f1      	b.n	8005168 <update_guysko_velocity+0x1b4>
 8005184:	2000047f 	.word	0x2000047f
 8005188:	20000480 	.word	0x20000480
 800518c:	2000047e 	.word	0x2000047e
 8005190:	20003f24 	.word	0x20003f24
 8005194:	fffffe0c 	.word	0xfffffe0c

08005198 <draw_guysko>:
=======
 800507a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (player->vel->x < 0) set_velocity(player->vel, 0 + GUYSKO_WALK_VEL_INC, player->vel->y);
 800507c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8005080:	210a      	movs	r1, #10
 8005082:	f000 f973 	bl	800536c <set_velocity>
 8005086:	e7c8      	b.n	800501a <update_guysko_velocity+0x5e>
		if (player->vel->x > GUYSKO_MAX_RIGHT_VELOCITY) set_velocity(player->vel, GUYSKO_MAX_RIGHT_VELOCITY, player->vel->y);
 8005088:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800508c:	21c8      	movs	r1, #200	; 0xc8
 800508e:	f000 f96d 	bl	800536c <set_velocity>
 8005092:	e7c7      	b.n	8005024 <update_guysko_velocity+0x68>
		if (isSolid(material_r)) set_velocity(player->vel, 0, player->vel->y);
 8005094:	68a0      	ldr	r0, [r4, #8]
 8005096:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800509a:	2100      	movs	r1, #0
 800509c:	f000 f966 	bl	800536c <set_velocity>
 80050a0:	e7c7      	b.n	8005032 <update_guysko_velocity+0x76>
 80050a2:	4607      	mov	r7, r0
	} else if (move_left) {
 80050a4:	4b28      	ldr	r3, [pc, #160]	; (8005148 <update_guysko_velocity+0x18c>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	b373      	cbz	r3, 8005108 <update_guysko_velocity+0x14c>
		if (player->vel->x > 0) set_velocity(player->vel, 0 - GUYSKO_WALK_VEL_INC, player->vel->y);
 80050aa:	68a0      	ldr	r0, [r4, #8]
 80050ac:	f9b0 1000 	ldrsh.w	r1, [r0]
 80050b0:	2900      	cmp	r1, #0
 80050b2:	dd1a      	ble.n	80050ea <update_guysko_velocity+0x12e>
 80050b4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80050b8:	f06f 0109 	mvn.w	r1, #9
 80050bc:	f000 f956 	bl	800536c <set_velocity>
		if (player->vel->x < GUYSKO_MAX_LEFT_VELOCITY) set_velocity(player->vel, GUYSKO_MAX_LEFT_VELOCITY, player->vel->y);
 80050c0:	68a0      	ldr	r0, [r4, #8]
 80050c2:	f9b0 3000 	ldrsh.w	r3, [r0]
 80050c6:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 80050ca:	db16      	blt.n	80050fa <update_guysko_velocity+0x13e>
		action_reset(MOVE_LEFT_INDEX);
 80050cc:	2009      	movs	r0, #9
 80050ce:	f7fb ffbb 	bl	8001048 <action_reset>
		if (isSolid(material_l)) set_velocity(player->vel, 0, player->vel->y);
 80050d2:	4638      	mov	r0, r7
 80050d4:	f7fe ff84 	bl	8003fe0 <isSolid>
 80050d8:	2800      	cmp	r0, #0
 80050da:	d0aa      	beq.n	8005032 <update_guysko_velocity+0x76>
 80050dc:	68a0      	ldr	r0, [r4, #8]
 80050de:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80050e2:	2100      	movs	r1, #0
 80050e4:	f000 f942 	bl	800536c <set_velocity>
 80050e8:	e7a3      	b.n	8005032 <update_guysko_velocity+0x76>
		else set_velocity(player->vel, player->vel->x - GUYSKO_WALK_VEL_INC, player->vel->y);
 80050ea:	b289      	uxth	r1, r1
 80050ec:	390a      	subs	r1, #10
 80050ee:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80050f2:	b209      	sxth	r1, r1
 80050f4:	f000 f93a 	bl	800536c <set_velocity>
 80050f8:	e7e2      	b.n	80050c0 <update_guysko_velocity+0x104>
		if (player->vel->x < GUYSKO_MAX_LEFT_VELOCITY) set_velocity(player->vel, GUYSKO_MAX_LEFT_VELOCITY, player->vel->y);
 80050fa:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80050fe:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8005102:	f000 f933 	bl	800536c <set_velocity>
 8005106:	e7e1      	b.n	80050cc <update_guysko_velocity+0x110>
		set_velocity(player->vel, 0, player->vel->y);
 8005108:	68a0      	ldr	r0, [r4, #8]
 800510a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800510e:	2100      	movs	r1, #0
 8005110:	f000 f92c 	bl	800536c <set_velocity>
 8005114:	e78d      	b.n	8005032 <update_guysko_velocity+0x76>
			set_velocity(player->vel, player->vel->x, 0);
 8005116:	68a0      	ldr	r0, [r4, #8]
 8005118:	2200      	movs	r2, #0
 800511a:	f9b0 1000 	ldrsh.w	r1, [r0]
 800511e:	f000 f925 	bl	800536c <set_velocity>
 8005122:	e7a1      	b.n	8005068 <update_guysko_velocity+0xac>
		set_velocity(player->vel, player->vel->x, GUYSKO_MAX_DOWN_VELOCITY);
 8005124:	4a09      	ldr	r2, [pc, #36]	; (800514c <update_guysko_velocity+0x190>)
 8005126:	f9b0 1000 	ldrsh.w	r1, [r0]
 800512a:	f000 f91f 	bl	800536c <set_velocity>
 800512e:	e7a4      	b.n	800507a <update_guysko_velocity+0xbe>
		set_velocity(player->vel, player->vel->x, GUYSKO_MAX_UP_VELOCITY);
 8005130:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005134:	f9b0 1000 	ldrsh.w	r1, [r0]
 8005138:	f000 f918 	bl	800536c <set_velocity>
	return;
 800513c:	e79d      	b.n	800507a <update_guysko_velocity+0xbe>
 800513e:	bf00      	nop
 8005140:	2000146f 	.word	0x2000146f
 8005144:	20001470 	.word	0x20001470
 8005148:	2000146e 	.word	0x2000146e
 800514c:	fffffe0c 	.word	0xfffffe0c

08005150 <draw_guysko>:
 * corner of guysko's image. The postion of guysko cannot be taken as the postion of guysko on screen,
>>>>>>> render
 * because the screen is only a small part of world. So the starting drawing postion is calculated based on
 * guysko's postion and difference between the START of the left and top corner of the screen and left and
 * top corner of the world.
 */
void draw_guysko (guysko* player) {
<<<<<<< HEAD
 8005198:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519c:	4680      	mov	r8, r0
	int index = 0;
	uint16_t draw_startPoint_x = player->pos->x - GUYSKO_IMG_X - (camera_x_block * BLOCK_WIDTH - ((SCENE_WIDTH_BLOCKS / 2) * BLOCK_WIDTH));
 800519e:	6902      	ldr	r2, [r0, #16]
 80051a0:	8817      	ldrh	r7, [r2, #0]
 80051a2:	4b2e      	ldr	r3, [pc, #184]	; (800525c <draw_guysko+0xc4>)
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	3b28      	subs	r3, #40	; 0x28
 80051a8:	eba7 0783 	sub.w	r7, r7, r3, lsl #2
 80051ac:	b2bf      	uxth	r7, r7
 80051ae:	3f0c      	subs	r7, #12
 80051b0:	b2bf      	uxth	r7, r7
	uint16_t draw_startPoint_y = player->pos->y - GUYSKO_IMG_Y - (camera_y_block * BLOCK_WIDTH - ((SCENE_HEIGHT_BLOCKS / 2) * BLOCK_WIDTH));
 80051b2:	8856      	ldrh	r6, [r2, #2]
 80051b4:	4b2a      	ldr	r3, [pc, #168]	; (8005260 <draw_guysko+0xc8>)
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	3b1e      	subs	r3, #30
 80051ba:	eba6 0683 	sub.w	r6, r6, r3, lsl #2
 80051be:	b2b6      	uxth	r6, r6
 80051c0:	3e17      	subs	r6, #23
 80051c2:	b2b6      	uxth	r6, r6

	for (int i = 0; i < GUYSKO_IMG_SIZE / 2; i += 1) {
 80051c4:	2500      	movs	r5, #0
	int index = 0;
 80051c6:	462c      	mov	r4, r5
	for (int i = 0; i < GUYSKO_IMG_SIZE / 2; i += 1) {
 80051c8:	e00c      	b.n	80051e4 <draw_guysko+0x4c>
=======
 8005150:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005154:	4680      	mov	r8, r0
	int index = 0;
	posx_pixel draw_startPoint_x = world_pixel_to_scene_pixel_x_band(player->pos->x - GUYSKO_IMG_X);
 8005156:	6903      	ldr	r3, [r0, #16]
 8005158:	8818      	ldrh	r0, [r3, #0]
 800515a:	380c      	subs	r0, #12
 800515c:	b200      	sxth	r0, r0
 800515e:	f7fe ff5b 	bl	8004018 <world_pixel_to_scene_pixel_x_band>
 8005162:	4607      	mov	r7, r0
	posy_pixel draw_startPoint_y = world_pixel_to_scene_pixel_y_band(player->pos->y - GUYSKO_IMG_Y);
 8005164:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005168:	8858      	ldrh	r0, [r3, #2]
 800516a:	3817      	subs	r0, #23
 800516c:	b200      	sxth	r0, r0
 800516e:	f7fe ff5d 	bl	800402c <world_pixel_to_scene_pixel_y_band>
 8005172:	4606      	mov	r6, r0
	// TODO: if guysko is on the edge of world, do not draw the whole guysko!
	for (int i = 0; i < GUYSKO_IMG_SIZE / 2; i += 1) {
 8005174:	2500      	movs	r5, #0
	int index = 0;
 8005176:	462c      	mov	r4, r5
	for (int i = 0; i < GUYSKO_IMG_SIZE / 2; i += 1) {
 8005178:	e00c      	b.n	8005194 <draw_guysko+0x44>
>>>>>>> render
		uint8_t offset_x = index % (GUYSKO_IMG_X / 2);
		uint8_t offset_y = index / (GUYSKO_IMG_X / 2);
		index++;
		int frst_nibble =	(guysko_r_0[i] & 0b11110000) >> 4;
		int scnd_nibble =	(guysko_r_0[i] & 0b00001111) >> 0;
		if (frst_nibble != 0) UG_DrawPixel(draw_startPoint_x + 2 * offset_x, draw_startPoint_y + offset_y, GUYSKO_R_0[frst_nibble]);
<<<<<<< HEAD
 80051ca:	eb07 0049 	add.w	r0, r7, r9, lsl #1
 80051ce:	eb06 010a 	add.w	r1, r6, sl
 80051d2:	4a24      	ldr	r2, [pc, #144]	; (8005264 <draw_guysko+0xcc>)
 80051d4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80051d8:	b209      	sxth	r1, r1
 80051da:	b200      	sxth	r0, r0
 80051dc:	f006 ff20 	bl	800c020 <UG_DrawPixel>
 80051e0:	e017      	b.n	8005212 <draw_guysko+0x7a>
	for (int i = 0; i < GUYSKO_IMG_SIZE / 2; i += 1) {
 80051e2:	3501      	adds	r5, #1
 80051e4:	2d89      	cmp	r5, #137	; 0x89
 80051e6:	dc25      	bgt.n	8005234 <draw_guysko+0x9c>
		uint8_t offset_x = index % (GUYSKO_IMG_X / 2);
 80051e8:	4b1f      	ldr	r3, [pc, #124]	; (8005268 <draw_guysko+0xd0>)
 80051ea:	fb83 2304 	smull	r2, r3, r3, r4
 80051ee:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
 80051f2:	469a      	mov	sl, r3
 80051f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80051f8:	eba4 0343 	sub.w	r3, r4, r3, lsl #1
 80051fc:	fa5f f983 	uxtb.w	r9, r3
		uint8_t offset_y = index / (GUYSKO_IMG_X / 2);
 8005200:	fa5f fa8a 	uxtb.w	sl, sl
		index++;
 8005204:	3401      	adds	r4, #1
		int frst_nibble =	(guysko_r_0[i] & 0b11110000) >> 4;
 8005206:	4b19      	ldr	r3, [pc, #100]	; (800526c <draw_guysko+0xd4>)
 8005208:	5d5b      	ldrb	r3, [r3, r5]
		int scnd_nibble =	(guysko_r_0[i] & 0b00001111) >> 0;
 800520a:	f003 0b0f 	and.w	fp, r3, #15
		if (frst_nibble != 0) UG_DrawPixel(draw_startPoint_x + 2 * offset_x, draw_startPoint_y + offset_y, GUYSKO_R_0[frst_nibble]);
 800520e:	091b      	lsrs	r3, r3, #4
 8005210:	d1db      	bne.n	80051ca <draw_guysko+0x32>
		if (scnd_nibble != 0) UG_DrawPixel(draw_startPoint_x + 2 * offset_x + 1, draw_startPoint_y + offset_y, GUYSKO_R_0[scnd_nibble]);
 8005212:	f1bb 0f00 	cmp.w	fp, #0
 8005216:	d0e4      	beq.n	80051e2 <draw_guysko+0x4a>
 8005218:	eb07 0049 	add.w	r0, r7, r9, lsl #1
 800521c:	b280      	uxth	r0, r0
 800521e:	3001      	adds	r0, #1
 8005220:	eb06 010a 	add.w	r1, r6, sl
 8005224:	4b0f      	ldr	r3, [pc, #60]	; (8005264 <draw_guysko+0xcc>)
 8005226:	f833 201b 	ldrh.w	r2, [r3, fp, lsl #1]
 800522a:	b209      	sxth	r1, r1
 800522c:	b200      	sxth	r0, r0
 800522e:	f006 fef7 	bl	800c020 <UG_DrawPixel>
 8005232:	e7d6      	b.n	80051e2 <draw_guysko+0x4a>
=======
 800517a:	eb07 0049 	add.w	r0, r7, r9, lsl #1
 800517e:	eb0a 0106 	add.w	r1, sl, r6
 8005182:	4a22      	ldr	r2, [pc, #136]	; (800520c <draw_guysko+0xbc>)
 8005184:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005188:	b209      	sxth	r1, r1
 800518a:	b200      	sxth	r0, r0
 800518c:	f006 fe7c 	bl	800be88 <UG_DrawPixel>
 8005190:	e017      	b.n	80051c2 <draw_guysko+0x72>
	for (int i = 0; i < GUYSKO_IMG_SIZE / 2; i += 1) {
 8005192:	3501      	adds	r5, #1
 8005194:	2d89      	cmp	r5, #137	; 0x89
 8005196:	dc25      	bgt.n	80051e4 <draw_guysko+0x94>
		uint8_t offset_x = index % (GUYSKO_IMG_X / 2);
 8005198:	4b1d      	ldr	r3, [pc, #116]	; (8005210 <draw_guysko+0xc0>)
 800519a:	fb83 2304 	smull	r2, r3, r3, r4
 800519e:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
 80051a2:	469a      	mov	sl, r3
 80051a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80051a8:	eba4 0343 	sub.w	r3, r4, r3, lsl #1
 80051ac:	fa5f f983 	uxtb.w	r9, r3
		uint8_t offset_y = index / (GUYSKO_IMG_X / 2);
 80051b0:	fa5f fa8a 	uxtb.w	sl, sl
		index++;
 80051b4:	3401      	adds	r4, #1
		int frst_nibble =	(guysko_r_0[i] & 0b11110000) >> 4;
 80051b6:	4b17      	ldr	r3, [pc, #92]	; (8005214 <draw_guysko+0xc4>)
 80051b8:	5d5b      	ldrb	r3, [r3, r5]
		int scnd_nibble =	(guysko_r_0[i] & 0b00001111) >> 0;
 80051ba:	f003 0b0f 	and.w	fp, r3, #15
		if (frst_nibble != 0) UG_DrawPixel(draw_startPoint_x + 2 * offset_x, draw_startPoint_y + offset_y, GUYSKO_R_0[frst_nibble]);
 80051be:	091b      	lsrs	r3, r3, #4
 80051c0:	d1db      	bne.n	800517a <draw_guysko+0x2a>
		if (scnd_nibble != 0) UG_DrawPixel(draw_startPoint_x + 2 * offset_x + 1, draw_startPoint_y + offset_y, GUYSKO_R_0[scnd_nibble]);
 80051c2:	f1bb 0f00 	cmp.w	fp, #0
 80051c6:	d0e4      	beq.n	8005192 <draw_guysko+0x42>
 80051c8:	eb07 0049 	add.w	r0, r7, r9, lsl #1
 80051cc:	b280      	uxth	r0, r0
 80051ce:	3001      	adds	r0, #1
 80051d0:	eb0a 0106 	add.w	r1, sl, r6
 80051d4:	4b0d      	ldr	r3, [pc, #52]	; (800520c <draw_guysko+0xbc>)
 80051d6:	f833 201b 	ldrh.w	r2, [r3, fp, lsl #1]
 80051da:	b209      	sxth	r1, r1
 80051dc:	b200      	sxth	r0, r0
 80051de:	f006 fe53 	bl	800be88 <UG_DrawPixel>
 80051e2:	e7d6      	b.n	8005192 <draw_guysko+0x42>
>>>>>>> render
	}

	// flip the guysko image if it is moving left
	player->state++;
<<<<<<< HEAD
 8005234:	f898 3004 	ldrb.w	r3, [r8, #4]
 8005238:	3301      	adds	r3, #1
 800523a:	b2db      	uxtb	r3, r3
 800523c:	f888 3004 	strb.w	r3, [r8, #4]
	if (player->state >= 3) player->state = player->state % 3;
 8005240:	2b02      	cmp	r3, #2
 8005242:	d909      	bls.n	8005258 <draw_guysko+0xc0>
 8005244:	4a0a      	ldr	r2, [pc, #40]	; (8005270 <draw_guysko+0xd8>)
 8005246:	fba2 1203 	umull	r1, r2, r2, r3
 800524a:	f002 01fe 	and.w	r1, r2, #254	; 0xfe
 800524e:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 8005252:	1a9b      	subs	r3, r3, r2
 8005254:	f888 3004 	strb.w	r3, [r8, #4]
}
 8005258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800525c:	200110b8 	.word	0x200110b8
 8005260:	200110ba 	.word	0x200110ba
 8005264:	2000005c 	.word	0x2000005c
 8005268:	2aaaaaab 	.word	0x2aaaaaab
 800526c:	2000007c 	.word	0x2000007c
 8005270:	aaaaaaab 	.word	0xaaaaaaab

08005274 <camouflage>:

/*
 * TODO: fix
 */
void camouflage (guysko* player, uint16_t prev_guysko_x, uint16_t prev_guysko_y) {
 8005274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005278:	460c      	mov	r4, r1
 800527a:	4615      	mov	r5, r2

	pixel_c guysko_x0 = prev_guysko_x;
	pixel_c guysko_y0 = prev_guysko_y;
	pixel_c guysko_x1 = player->pos->x;
 800527c:	6903      	ldr	r3, [r0, #16]
 800527e:	881f      	ldrh	r7, [r3, #0]
	pixel_c guysko_y1 = player->pos->y;
 8005280:	885e      	ldrh	r6, [r3, #2]

	// calculate the starting points of guysko image starting point
	// IN SCENE IN PIXELS on previous and current frame
	uint16_t prev_draw_startPoint_x = prev_guysko_x - GUYSKO_IMG_X - (camera_x_block * BLOCK_WIDTH - (SCENE_WIDTH_BLOCKS / 2) * BLOCK_WIDTH);
 8005282:	4b29      	ldr	r3, [pc, #164]	; (8005328 <camouflage+0xb4>)
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	3b28      	subs	r3, #40	; 0x28
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	b29b      	uxth	r3, r3
	uint16_t prev_draw_startPoint_y = prev_guysko_y - GUYSKO_IMG_Y - (camera_y_block * BLOCK_WIDTH - (SCENE_HEIGHT_BLOCKS / 2) * BLOCK_WIDTH);
 800528c:	4a27      	ldr	r2, [pc, #156]	; (800532c <camouflage+0xb8>)
 800528e:	f8b2 c000 	ldrh.w	ip, [r2]
 8005292:	f1ac 0c1e 	sub.w	ip, ip, #30
 8005296:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800529a:	fa1f fc8c 	uxth.w	ip, ip
	uint16_t draw_startPoint_x = player->pos->x - GUYSKO_IMG_X - (camera_x_block * BLOCK_WIDTH - (SCENE_WIDTH_BLOCKS / 2)* BLOCK_WIDTH);
 800529e:	1afa      	subs	r2, r7, r3
	uint16_t draw_startPoint_y = player->pos->y - GUYSKO_IMG_Y - (camera_y_block * BLOCK_WIDTH - (SCENE_HEIGHT_BLOCKS / 2)* BLOCK_WIDTH);
 80052a0:	eba6 080c 	sub.w	r8, r6, ip

	// calculate the difference the guysko has made since the previous frame (his previous drawing)
	// the difference is in pixels but on screen! Meaning it only checks for the difference it made on
	// screen, not his global moving in WORLD!

	short x_diff = draw_startPoint_x - prev_draw_startPoint_x;
 80052a4:	1a5b      	subs	r3, r3, r1
 80052a6:	fa13 f382 	uxtah	r3, r3, r2
 80052aa:	b21b      	sxth	r3, r3
	short y_diff = draw_startPoint_y - prev_draw_startPoint_y;
 80052ac:	ebac 0c05 	sub.w	ip, ip, r5
 80052b0:	fa1c fc88 	uxtah	ip, ip, r8
 80052b4:	fa0f f88c 	sxth.w	r8, ip

	// calculate the starting points of guysko image starting point
	// IN WORLD IN PIXELS on previous and current frame
	// make four calls based on which direction the guysko moved in:
	// right
	if (x_diff > 0) {
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	dc09      	bgt.n	80052d0 <camouflage+0x5c>
		overdraw_background(guysko_x0 - GUYSKO_IMG_X, guysko_y0 - GUYSKO_IMG_Y, guysko_x1 - GUYSKO_IMG_X, guysko_y1);
	}
	// left
	else if (x_diff < 0) {
 80052bc:	2b00      	cmp	r3, #0
 80052be:	db14      	blt.n	80052ea <camouflage+0x76>
		overdraw_background(guysko_x0, guysko_y0 - GUYSKO_IMG_Y, guysko_x1, guysko_y1);
	}
	// down
	if (y_diff > 0) {
 80052c0:	f1b8 0f00 	cmp.w	r8, #0
 80052c4:	dc1a      	bgt.n	80052fc <camouflage+0x88>
		overdraw_background(guysko_x0 - GUYSKO_IMG_X, guysko_y0 - GUYSKO_IMG_Y, guysko_x1, guysko_y1 - GUYSKO_IMG_Y);
	}
	// up
	else if (y_diff < 0) {
 80052c6:	f1b8 0f00 	cmp.w	r8, #0
 80052ca:	db24      	blt.n	8005316 <camouflage+0xa2>
		overdraw_background(guysko_x0 - GUYSKO_IMG_X, guysko_y0, guysko_x1, guysko_y1);
	}
=======
 80051e4:	f898 3004 	ldrb.w	r3, [r8, #4]
 80051e8:	3301      	adds	r3, #1
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	f888 3004 	strb.w	r3, [r8, #4]
	if (player->state >= 3) player->state = player->state % 3;
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d909      	bls.n	8005208 <draw_guysko+0xb8>
 80051f4:	4a08      	ldr	r2, [pc, #32]	; (8005218 <draw_guysko+0xc8>)
 80051f6:	fba2 1203 	umull	r1, r2, r2, r3
 80051fa:	f002 01fe 	and.w	r1, r2, #254	; 0xfe
 80051fe:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 8005202:	1a9b      	subs	r3, r3, r2
 8005204:	f888 3004 	strb.w	r3, [r8, #4]
}
 8005208:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800520c:	2000104c 	.word	0x2000104c
 8005210:	2aaaaaab 	.word	0x2aaaaaab
 8005214:	2000106c 	.word	0x2000106c
 8005218:	aaaaaaab 	.word	0xaaaaaaab
>>>>>>> render

0800521c <refresh_guysko>:
}
<<<<<<< HEAD
 80052cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		overdraw_background(guysko_x0 - GUYSKO_IMG_X, guysko_y0 - GUYSKO_IMG_Y, guysko_x1 - GUYSKO_IMG_X, guysko_y1);
 80052d0:	f1a7 020c 	sub.w	r2, r7, #12
 80052d4:	f1a5 0117 	sub.w	r1, r5, #23
 80052d8:	f1a4 000c 	sub.w	r0, r4, #12
 80052dc:	4633      	mov	r3, r6
 80052de:	b292      	uxth	r2, r2
 80052e0:	b289      	uxth	r1, r1
 80052e2:	b280      	uxth	r0, r0
 80052e4:	f000 f892 	bl	800540c <overdraw_background>
 80052e8:	e7ea      	b.n	80052c0 <camouflage+0x4c>
		overdraw_background(guysko_x0, guysko_y0 - GUYSKO_IMG_Y, guysko_x1, guysko_y1);
 80052ea:	f1a5 0117 	sub.w	r1, r5, #23
 80052ee:	4633      	mov	r3, r6
 80052f0:	463a      	mov	r2, r7
 80052f2:	b289      	uxth	r1, r1
 80052f4:	4620      	mov	r0, r4
 80052f6:	f000 f889 	bl	800540c <overdraw_background>
 80052fa:	e7e1      	b.n	80052c0 <camouflage+0x4c>
		overdraw_background(guysko_x0 - GUYSKO_IMG_X, guysko_y0 - GUYSKO_IMG_Y, guysko_x1, guysko_y1 - GUYSKO_IMG_Y);
 80052fc:	f1a6 0317 	sub.w	r3, r6, #23
 8005300:	f1a5 0117 	sub.w	r1, r5, #23
 8005304:	f1a4 000c 	sub.w	r0, r4, #12
 8005308:	b29b      	uxth	r3, r3
 800530a:	463a      	mov	r2, r7
 800530c:	b289      	uxth	r1, r1
 800530e:	b280      	uxth	r0, r0
 8005310:	f000 f87c 	bl	800540c <overdraw_background>
 8005314:	e7da      	b.n	80052cc <camouflage+0x58>
		overdraw_background(guysko_x0 - GUYSKO_IMG_X, guysko_y0, guysko_x1, guysko_y1);
 8005316:	f1a4 000c 	sub.w	r0, r4, #12
 800531a:	4633      	mov	r3, r6
 800531c:	463a      	mov	r2, r7
 800531e:	4629      	mov	r1, r5
 8005320:	b280      	uxth	r0, r0
 8005322:	f000 f873 	bl	800540c <overdraw_background>
}
 8005326:	e7d1      	b.n	80052cc <camouflage+0x58>
 8005328:	200110b8 	.word	0x200110b8
 800532c:	200110ba 	.word	0x200110ba

08005330 <refresh_guysko>:
=======
>>>>>>> render

/*
 * calls functions that update guysko properties
 */
void refresh_guysko(guysko* player, int FPS) {
<<<<<<< HEAD
 8005330:	b570      	push	{r4, r5, r6, lr}
 8005332:	4604      	mov	r4, r0
 8005334:	460d      	mov	r5, r1
	update_guysko_velocity(player);
 8005336:	f7ff fe3d 	bl	8004fb4 <update_guysko_velocity>
	update_guysko_move(player, FPS);
 800533a:	4629      	mov	r1, r5
 800533c:	4620      	mov	r0, r4
 800533e:	f7ff fdd9 	bl	8004ef4 <update_guysko_move>
	uint16_t prev_guysko_x = player->pos->x;
 8005342:	6923      	ldr	r3, [r4, #16]
 8005344:	881d      	ldrh	r5, [r3, #0]
	uint16_t prev_guysko_y = player->pos->y;
 8005346:	885e      	ldrh	r6, [r3, #2]
	update_guysko_position(player);
 8005348:	4620      	mov	r0, r4
 800534a:	f7ff fda7 	bl	8004e9c <update_guysko_position>
=======
 800521c:	b570      	push	{r4, r5, r6, lr}
 800521e:	4604      	mov	r4, r0
 8005220:	460d      	mov	r5, r1
	update_guysko_velocity(player);
 8005222:	f7ff fecb 	bl	8004fbc <update_guysko_velocity>
	update_guysko_move(player, FPS);
 8005226:	4629      	mov	r1, r5
 8005228:	4620      	mov	r0, r4
 800522a:	f7ff fe67 	bl	8004efc <update_guysko_move>
	uint16_t prev_guysko_x = player->pos->x;
 800522e:	6923      	ldr	r3, [r4, #16]
 8005230:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005234:	b2ad      	uxth	r5, r5
	uint16_t prev_guysko_y = player->pos->y;
 8005236:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800523a:	b29e      	uxth	r6, r3
	update_guysko_position(player);
 800523c:	4620      	mov	r0, r4
 800523e:	f7ff fe48 	bl	8004ed2 <update_guysko_position>
>>>>>>> render

	// do the following two if and only if at least on one of the x and y
	// components of guysko position is different
<<<<<<< HEAD
	camouflage (player, prev_guysko_x, prev_guysko_y);
 800534e:	4632      	mov	r2, r6
 8005350:	4629      	mov	r1, r5
 8005352:	4620      	mov	r0, r4
 8005354:	f7ff ff8e 	bl	8005274 <camouflage>
	draw_guysko(player);
 8005358:	4620      	mov	r0, r4
 800535a:	f7ff ff1d 	bl	8005198 <draw_guysko>

}
 800535e:	bd70      	pop	{r4, r5, r6, pc}

08005360 <new_guysko>:
=======
	if (!(prev_guysko_x == player->pos->x && prev_guysko_y == player->pos->y)) {
 8005242:	6923      	ldr	r3, [r4, #16]
 8005244:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005248:	4295      	cmp	r5, r2
 800524a:	d103      	bne.n	8005254 <refresh_guysko+0x38>
 800524c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005250:	429e      	cmp	r6, r3
 8005252:	d002      	beq.n	800525a <refresh_guysko+0x3e>
		// NOT WORKING, TODO: fix black lines
//		camouflage (player, prev_guysko_x, prev_guysko_y);
		draw_guysko(player);
 8005254:	4620      	mov	r0, r4
 8005256:	f7ff ff7b 	bl	8005150 <draw_guysko>
	}

}
 800525a:	bd70      	pop	{r4, r5, r6, pc}

0800525c <new_guysko>:
>>>>>>> render
 * @param acceleration	guysko's acceleration
 * @param velocity 			guysko's velocity
 * @param move					difference of position guysko will make inbetween frame
 * @param position 			guysko's new position
 */
guysko* new_guysko() {
<<<<<<< HEAD
 8005360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	guysko* player = malloc(sizeof(guysko));
 8005364:	2018      	movs	r0, #24
 8005366:	f009 f927 	bl	800e5b8 <malloc>
 800536a:	4604      	mov	r4, r0
	life_points *lp = malloc(sizeof(life_points));
 800536c:	2004      	movs	r0, #4
 800536e:	f009 f923 	bl	800e5b8 <malloc>
 8005372:	4680      	mov	r8, r0
	lp->life_points = GUYSKO_MAX_LP;
 8005374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005378:	6003      	str	r3, [r0, #0]
	velocity *guysko_vel = malloc(sizeof(velocity));
 800537a:	2004      	movs	r0, #4
 800537c:	f009 f91c 	bl	800e5b8 <malloc>
 8005380:	4606      	mov	r6, r0
	guysko_vel->x = 0;
 8005382:	2700      	movs	r7, #0
 8005384:	8007      	strh	r7, [r0, #0]
	guysko_vel->y = 0;
 8005386:	8047      	strh	r7, [r0, #2]
	move *guysko_mov = malloc(sizeof(move));
 8005388:	200c      	movs	r0, #12
 800538a:	f009 f915 	bl	800e5b8 <malloc>
 800538e:	4605      	mov	r5, r0
	guysko_mov->x = 0;
 8005390:	8007      	strh	r7, [r0, #0]
	guysko_mov->y = 0;
 8005392:	8047      	strh	r7, [r0, #2]
	guysko_mov->x_remainder = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	6043      	str	r3, [r0, #4]
	guysko_mov->y_remainder = 0;
 8005398:	6083      	str	r3, [r0, #8]
	position *guysko_pos = malloc(sizeof(position));
 800539a:	2004      	movs	r0, #4
 800539c:	f009 f90c 	bl	800e5b8 <malloc>
	guysko_pos->x = GUYSKO_SPAWN_X;
 80053a0:	2285      	movs	r2, #133	; 0x85
 80053a2:	8002      	strh	r2, [r0, #0]
	guysko_pos->y = GUYSKO_SPAWN_Y;
 80053a4:	4a08      	ldr	r2, [pc, #32]	; (80053c8 <new_guysko+0x68>)
 80053a6:	8812      	ldrh	r2, [r2, #0]
 80053a8:	8042      	strh	r2, [r0, #2]

	player->lp->life_points = lp->life_points;
 80053aa:	6822      	ldr	r2, [r4, #0]
 80053ac:	f8d8 1000 	ldr.w	r1, [r8]
 80053b0:	6011      	str	r1, [r2, #0]
	player->state 					= 0;
 80053b2:	7127      	strb	r7, [r4, #4]
	player->vel							= guysko_vel;
 80053b4:	60a6      	str	r6, [r4, #8]
	player->mov 						= guysko_mov;
 80053b6:	60e5      	str	r5, [r4, #12]
	player->pos		 					= guysko_pos;
 80053b8:	6120      	str	r0, [r4, #16]
	player->standing_bits		= 0b1111111111111111;
 80053ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053be:	82a3      	strh	r3, [r4, #20]

	return player;
}
 80053c0:	4620      	mov	r0, r4
 80053c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053c6:	bf00      	nop
 80053c8:	200110ba 	.word	0x200110ba

080053cc <new_movables>:
=======
 800525c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	guysko* player = malloc(sizeof(guysko));
 8005260:	2018      	movs	r0, #24
 8005262:	f009 f8dd 	bl	800e420 <malloc>
 8005266:	4604      	mov	r4, r0
	life_points *lp = malloc(sizeof(life_points));
 8005268:	2002      	movs	r0, #2
 800526a:	f009 f8d9 	bl	800e420 <malloc>
 800526e:	4680      	mov	r8, r0
	lp->life_points = GUYSKO_MAX_LP;
 8005270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005274:	8003      	strh	r3, [r0, #0]
	velocity *guysko_vel = malloc(sizeof(velocity));
 8005276:	2004      	movs	r0, #4
 8005278:	f009 f8d2 	bl	800e420 <malloc>
 800527c:	4606      	mov	r6, r0
	guysko_vel->x = 0;
 800527e:	2700      	movs	r7, #0
 8005280:	8007      	strh	r7, [r0, #0]
	guysko_vel->y = 0;
 8005282:	8047      	strh	r7, [r0, #2]
	move *guysko_mov = malloc(sizeof(move));
 8005284:	200c      	movs	r0, #12
 8005286:	f009 f8cb 	bl	800e420 <malloc>
 800528a:	4605      	mov	r5, r0
	guysko_mov->x = 0;
 800528c:	8007      	strh	r7, [r0, #0]
	guysko_mov->y = 0;
 800528e:	8047      	strh	r7, [r0, #2]
	guysko_mov->x_remainder = 0;
 8005290:	2300      	movs	r3, #0
 8005292:	6043      	str	r3, [r0, #4]
	guysko_mov->y_remainder = 0;
 8005294:	6083      	str	r3, [r0, #8]
	position *guysko_pos = malloc(sizeof(position));
 8005296:	2004      	movs	r0, #4
 8005298:	f009 f8c2 	bl	800e420 <malloc>
	guysko_pos->x = GUYSKO_SPAWN_X;
 800529c:	2285      	movs	r2, #133	; 0x85
 800529e:	8002      	strh	r2, [r0, #0]
	guysko_pos->y = GUYSKO_SPAWN_Y;
 80052a0:	4a08      	ldr	r2, [pc, #32]	; (80052c4 <new_guysko+0x68>)
 80052a2:	8812      	ldrh	r2, [r2, #0]
 80052a4:	8042      	strh	r2, [r0, #2]

	player->lp->life_points = lp->life_points;
 80052a6:	6822      	ldr	r2, [r4, #0]
 80052a8:	f9b8 1000 	ldrsh.w	r1, [r8]
 80052ac:	8011      	strh	r1, [r2, #0]
	player->state 					= 0;
 80052ae:	7127      	strb	r7, [r4, #4]
	player->vel							= guysko_vel;
 80052b0:	60a6      	str	r6, [r4, #8]
	player->mov 						= guysko_mov;
 80052b2:	60e5      	str	r5, [r4, #12]
	player->pos		 					= guysko_pos;
 80052b4:	6120      	str	r0, [r4, #16]
	player->standing_bits		= 0b1111111111111111;
 80052b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052ba:	82a3      	strh	r3, [r4, #20]

	return player;
}
 80052bc:	4620      	mov	r0, r4
 80052be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052c2:	bf00      	nop
 80052c4:	200120aa 	.word	0x200120aa

080052c8 <new_movables>:
>>>>>>> render
}

/*
 * Initiate linked list with movables. Every species has their own linked list
 */
movable* new_movables() {
<<<<<<< HEAD
 80053cc:	b538      	push	{r3, r4, r5, lr}
	movable* beings = (movable*)malloc(sizeof(movable));
 80053ce:	2014      	movs	r0, #20
 80053d0:	f009 f8f2 	bl	800e5b8 <malloc>
 80053d4:	4604      	mov	r4, r0

	beings->header_cow  = (cow*)malloc(sizeof(cow));
 80053d6:	2018      	movs	r0, #24
 80053d8:	f009 f8ee 	bl	800e5b8 <malloc>
 80053dc:	4605      	mov	r5, r0
 80053de:	6020      	str	r0, [r4, #0]
	beings->tail_cow	 	= (cow*)malloc(sizeof(cow));
 80053e0:	2018      	movs	r0, #24
 80053e2:	f009 f8e9 	bl	800e5b8 <malloc>
 80053e6:	6060      	str	r0, [r4, #4]

	beings->header_cow->next = beings->tail_cow;
 80053e8:	6128      	str	r0, [r5, #16]
	beings->header_cow->prev = NULL;
 80053ea:	6822      	ldr	r2, [r4, #0]
 80053ec:	2300      	movs	r3, #0
 80053ee:	6153      	str	r3, [r2, #20]
	beings->tail_cow->next 	= NULL;
 80053f0:	6862      	ldr	r2, [r4, #4]
 80053f2:	6113      	str	r3, [r2, #16]
	beings->tail_cow->prev 	= beings->header_cow;
 80053f4:	6862      	ldr	r2, [r4, #4]
 80053f6:	6821      	ldr	r1, [r4, #0]
 80053f8:	6151      	str	r1, [r2, #20]

	beings->beings_quantity = 0;
 80053fa:	7423      	strb	r3, [r4, #16]

	return beings;
}
 80053fc:	4620      	mov	r0, r4
 80053fe:	bd38      	pop	{r3, r4, r5, pc}

08005400 <set_move>:
=======
 80052c8:	b538      	push	{r3, r4, r5, lr}
	movable* beings = (movable*)malloc(sizeof(movable));
 80052ca:	2014      	movs	r0, #20
 80052cc:	f009 f8a8 	bl	800e420 <malloc>
 80052d0:	4604      	mov	r4, r0

	beings->header_cow  = (cow*)malloc(sizeof(cow));
 80052d2:	2018      	movs	r0, #24
 80052d4:	f009 f8a4 	bl	800e420 <malloc>
 80052d8:	4605      	mov	r5, r0
 80052da:	6020      	str	r0, [r4, #0]
	beings->tail_cow	 	= (cow*)malloc(sizeof(cow));
 80052dc:	2018      	movs	r0, #24
 80052de:	f009 f89f 	bl	800e420 <malloc>
 80052e2:	6060      	str	r0, [r4, #4]

	beings->header_cow->next = beings->tail_cow;
 80052e4:	6128      	str	r0, [r5, #16]
	beings->header_cow->prev = NULL;
 80052e6:	6822      	ldr	r2, [r4, #0]
 80052e8:	2300      	movs	r3, #0
 80052ea:	6153      	str	r3, [r2, #20]
	beings->tail_cow->next 	= NULL;
 80052ec:	6862      	ldr	r2, [r4, #4]
 80052ee:	6113      	str	r3, [r2, #16]
	beings->tail_cow->prev 	= beings->header_cow;
 80052f0:	6862      	ldr	r2, [r4, #4]
 80052f2:	6821      	ldr	r1, [r4, #0]
 80052f4:	6151      	str	r1, [r2, #20]

	beings->beings_quantity = 0;
 80052f6:	7423      	strb	r3, [r4, #16]

	return beings;
}
 80052f8:	4620      	mov	r0, r4
 80052fa:	bd38      	pop	{r3, r4, r5, pc}

080052fc <set_move>:
>>>>>>> render

/*
 * set move of the moveable to x and y (distance in pixels the moveable will make in one frame)
 */
void set_move (move* mov, short x, short y) {
	mov->x = x;
<<<<<<< HEAD
 8005400:	8001      	strh	r1, [r0, #0]
	mov->y = y;
 8005402:	8042      	strh	r2, [r0, #2]
}
 8005404:	4770      	bx	lr

08005406 <set_postition>:
#include "position.h"
#include "utils.h"
=======
 80052fc:	8001      	strh	r1, [r0, #0]
	mov->y = y;
 80052fe:	8042      	strh	r2, [r0, #2]
}
 8005300:	4770      	bx	lr

08005302 <set_position>:
>>>>>>> render

/* update postion of struct position: !!! it is different from coord, since it is used for
 * movables. The values represent the position in pixels.
 */
void set_position (position* pos, posx_pixel x, posy_pixel y) {
	pos->x = x;
<<<<<<< HEAD
 8005406:	8001      	strh	r1, [r0, #0]
	pos->y = y;
 8005408:	8042      	strh	r2, [r0, #2]

}
 800540a:	4770      	bx	lr

0800540c <overdraw_background>:
	* the parameters the function gets are give in: GLOBAL (WORLD) PIXELS
	* optimization idea: go iterate through columns and "fillFrame" for the largest
	* possible area, so that the time consuming function "UG_DRAW" is used as least
	* as possible times
*/
void overdraw_background (pixel_c x1, pixel_c y1, pixel_c x2, pixel_c y2) {
 800540c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005410:	b082      	sub	sp, #8
 8005412:	4604      	mov	r4, r0
 8005414:	4610      	mov	r0, r2
	pixel_c a = MIN(x1, x2);
	pixel_c b = MAX(x1, x2);
 8005416:	4616      	mov	r6, r2
 8005418:	42a2      	cmp	r2, r4
 800541a:	bf38      	it	cc
 800541c:	4626      	movcc	r6, r4
	pixel_c c = MIN(y1, y2);
 800541e:	461d      	mov	r5, r3
 8005420:	428b      	cmp	r3, r1
 8005422:	bf28      	it	cs
 8005424:	460d      	movcs	r5, r1
	pixel_c d = MAX(y1, y2);
 8005426:	428b      	cmp	r3, r1
 8005428:	bf38      	it	cc
 800542a:	460b      	movcc	r3, r1
 800542c:	461f      	mov	r7, r3

	// transform the pixels in position world to pixels in scene
	pixel_c left = w_pixel_to_scene_pixel_x(a);
 800542e:	42a2      	cmp	r2, r4
 8005430:	bf28      	it	cs
 8005432:	4620      	movcs	r0, r4
 8005434:	f7fe fdd4 	bl	8003fe0 <w_pixel_to_scene_pixel_x>
 8005438:	4680      	mov	r8, r0
	pixel_c right = w_pixel_to_scene_pixel_x(b);
 800543a:	4630      	mov	r0, r6
 800543c:	f7fe fdd0 	bl	8003fe0 <w_pixel_to_scene_pixel_x>
 8005440:	4606      	mov	r6, r0
	pixel_c top = w_pixel_to_scene_pixel_y(c);
 8005442:	4628      	mov	r0, r5
 8005444:	f7fe fdd6 	bl	8003ff4 <w_pixel_to_scene_pixel_y>
 8005448:	4605      	mov	r5, r0
	pixel_c bottom = w_pixel_to_scene_pixel_y(d);
 800544a:	4638      	mov	r0, r7
 800544c:	f7fe fdd2 	bl	8003ff4 <w_pixel_to_scene_pixel_y>
 8005450:	4607      	mov	r7, r0

	UG_FillFrame(left, top, right, bottom, C_BLACK);
 8005452:	2300      	movs	r3, #0
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	b203      	sxth	r3, r0
 8005458:	b232      	sxth	r2, r6
 800545a:	b229      	sxth	r1, r5
 800545c:	fa0f f088 	sxth.w	r0, r8
 8005460:	f006 fda6 	bl	800bfb0 <UG_FillFrame>

	// iterate through every row
	for (pixel_c i = top; i <= bottom; i++) {
 8005464:	e010      	b.n	8005488 <overdraw_background+0x7c>
		for (pixel_c j = left; j <= right; j++) {
			block_t block = get_block(j, i);
 8005466:	4629      	mov	r1, r5
 8005468:	4620      	mov	r0, r4
 800546a:	f7fe fd79 	bl	8003f60 <get_block>
			uint16_t* material_xy = map_name_to_material(block);
 800546e:	f7fc fee3 	bl	8002238 <map_name_to_material>
			UG_DrawPixel(j, i, material_xy[0]);
 8005472:	8802      	ldrh	r2, [r0, #0]
 8005474:	b229      	sxth	r1, r5
 8005476:	b220      	sxth	r0, r4
 8005478:	f006 fdd2 	bl	800c020 <UG_DrawPixel>
		for (pixel_c j = left; j <= right; j++) {
 800547c:	3401      	adds	r4, #1
 800547e:	b2a4      	uxth	r4, r4
 8005480:	42b4      	cmp	r4, r6
 8005482:	d9f0      	bls.n	8005466 <overdraw_background+0x5a>
	for (pixel_c i = top; i <= bottom; i++) {
 8005484:	3501      	adds	r5, #1
 8005486:	b2ad      	uxth	r5, r5
 8005488:	42bd      	cmp	r5, r7
 800548a:	d801      	bhi.n	8005490 <overdraw_background+0x84>
		for (pixel_c j = left; j <= right; j++) {
 800548c:	4644      	mov	r4, r8
 800548e:	e7f7      	b.n	8005480 <overdraw_background+0x74>
		}
	}
}
 8005490:	b002      	add	sp, #8
 8005492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005496 <set_velocity>:
=======
 8005302:	8001      	strh	r1, [r0, #0]
	pos->y = y;
 8005304:	8042      	strh	r2, [r0, #2]
}
 8005306:	4770      	bx	lr

08005308 <update_position_x>:
void update_position_x (position* pos, posx_pixel x, posx_pixel x_diff) {
 8005308:	b508      	push	{r3, lr}
	posx_pixel final_x = x + x_diff;
 800530a:	4411      	add	r1, r2
 800530c:	b28b      	uxth	r3, r1
 800530e:	b209      	sxth	r1, r1
	if (final_x < 0) {
 8005310:	2900      	cmp	r1, #0
 8005312:	db06      	blt.n	8005322 <update_position_x+0x1a>
	} else if (final_x > WORLD_WIDTH_PIXELS) {
 8005314:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8005318:	dd0a      	ble.n	8005330 <update_position_x+0x28>
		final_x = final_x - WORLD_WIDTH_PIXELS;
 800531a:	f5a3 61c8 	sub.w	r1, r3, #1600	; 0x640
 800531e:	b209      	sxth	r1, r1
 8005320:	e006      	b.n	8005330 <update_position_x+0x28>
		final_x = WORLD_WIDTH_PIXELS - abs(final_x);
 8005322:	2900      	cmp	r1, #0
 8005324:	bfb8      	it	lt
 8005326:	4249      	neglt	r1, r1
 8005328:	b289      	uxth	r1, r1
 800532a:	f5c1 61c8 	rsb	r1, r1, #1600	; 0x640
 800532e:	b209      	sxth	r1, r1
	set_position(pos, final_x, pos->y);
 8005330:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8005334:	f7ff ffe5 	bl	8005302 <set_position>
}
 8005338:	bd08      	pop	{r3, pc}

0800533a <update_position_y>:
void update_position_y (position* pos, posy_pixel y, posy_pixel y_diff) {
 800533a:	b508      	push	{r3, lr}
	posy_pixel final_y = y + y_diff;
 800533c:	440a      	add	r2, r1
 800533e:	b293      	uxth	r3, r2
 8005340:	b212      	sxth	r2, r2
	if (final_y < 0) {
 8005342:	2a00      	cmp	r2, #0
 8005344:	db06      	blt.n	8005354 <update_position_y+0x1a>
	} else if (final_y > WORLD_HEIGHT_PIXELS) {
 8005346:	f5b2 7f70 	cmp.w	r2, #960	; 0x3c0
 800534a:	dd0a      	ble.n	8005362 <update_position_y+0x28>
		final_y = final_y - WORLD_HEIGHT_PIXELS;
 800534c:	f5a3 7270 	sub.w	r2, r3, #960	; 0x3c0
 8005350:	b212      	sxth	r2, r2
 8005352:	e006      	b.n	8005362 <update_position_y+0x28>
		final_y = WORLD_HEIGHT_PIXELS - abs(final_y);
 8005354:	2a00      	cmp	r2, #0
 8005356:	bfb8      	it	lt
 8005358:	4252      	neglt	r2, r2
 800535a:	b292      	uxth	r2, r2
 800535c:	f5c2 7270 	rsb	r2, r2, #960	; 0x3c0
 8005360:	b212      	sxth	r2, r2
	set_position(pos, pos->x, final_y);
 8005362:	f9b0 1000 	ldrsh.w	r1, [r0]
 8005366:	f7ff ffcc 	bl	8005302 <set_position>
}
 800536a:	bd08      	pop	{r3, pc}

0800536c <set_velocity>:
>>>>>>> render
#include "velocity.h"


// update velocity of struct vel
void set_velocity(velocity* vel, short x, short y) {
	vel->x = x;
<<<<<<< HEAD
 8005496:	8001      	strh	r1, [r0, #0]
	vel->y = y;
 8005498:	8042      	strh	r2, [r0, #2]
}
 800549a:	4770      	bx	lr

0800549c <Reset_Handler>:
=======
 800536c:	8001      	strh	r1, [r0, #0]
	vel->y = y;
 800536e:	8042      	strh	r2, [r0, #2]
}
 8005370:	4770      	bx	lr
	...

08005374 <Reset_Handler>:
>>>>>>> render

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
	  ldr   r0, =_estack
<<<<<<< HEAD
 800549c:	480d      	ldr	r0, [pc, #52]	; (80054d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800549e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80054a0:	480d      	ldr	r0, [pc, #52]	; (80054d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80054a2:	490e      	ldr	r1, [pc, #56]	; (80054dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80054a4:	4a0e      	ldr	r2, [pc, #56]	; (80054e0 <LoopForever+0xe>)
  movs r3, #0
 80054a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80054a8:	e002      	b.n	80054b0 <LoopCopyDataInit>

080054aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80054aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80054ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80054ae:	3304      	adds	r3, #4

080054b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80054b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80054b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80054b4:	d3f9      	bcc.n	80054aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80054b6:	4a0b      	ldr	r2, [pc, #44]	; (80054e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80054b8:	4c0b      	ldr	r4, [pc, #44]	; (80054e8 <LoopForever+0x16>)
  movs r3, #0
 80054ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80054bc:	e001      	b.n	80054c2 <LoopFillZerobss>

080054be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80054be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80054c0:	3204      	adds	r2, #4

080054c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80054c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80054c4:	d3fb      	bcc.n	80054be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80054c6:	f7fe ff0d 	bl	80042e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80054ca:	f009 f851 	bl	800e570 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80054ce:	f7fc fd95 	bl	8001ffc <main>

080054d2 <LoopForever>:

LoopForever:
    b LoopForever
 80054d2:	e7fe      	b.n	80054d2 <LoopForever>
	  ldr   r0, =_estack
 80054d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80054d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80054dc:	2000045c 	.word	0x2000045c
  ldr r2, =_sidata
 80054e0:	08014260 	.word	0x08014260
  ldr r2, =_sbss
 80054e4:	2000045c 	.word	0x2000045c
  ldr r4, =_ebss
 80054e8:	20012f10 	.word	0x20012f10

080054ec <ADC1_2_IRQHandler>:
=======
 8005374:	480d      	ldr	r0, [pc, #52]	; (80053ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005376:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005378:	480d      	ldr	r0, [pc, #52]	; (80053b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800537a:	490e      	ldr	r1, [pc, #56]	; (80053b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800537c:	4a0e      	ldr	r2, [pc, #56]	; (80053b8 <LoopForever+0xe>)
  movs r3, #0
 800537e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005380:	e002      	b.n	8005388 <LoopCopyDataInit>

08005382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005386:	3304      	adds	r3, #4

08005388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800538a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800538c:	d3f9      	bcc.n	8005382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800538e:	4a0b      	ldr	r2, [pc, #44]	; (80053bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8005390:	4c0b      	ldr	r4, [pc, #44]	; (80053c0 <LoopForever+0x16>)
  movs r3, #0
 8005392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005394:	e001      	b.n	800539a <LoopFillZerobss>

08005396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005398:	3204      	adds	r2, #4

0800539a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800539a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800539c:	d3fb      	bcc.n	8005396 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800539e:	f7fe ffbd 	bl	800431c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80053a2:	f009 f819 	bl	800e3d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80053a6:	f7fc fe29 	bl	8001ffc <main>

080053aa <LoopForever>:

LoopForever:
    b LoopForever
 80053aa:	e7fe      	b.n	80053aa <LoopForever>
	  ldr   r0, =_estack
 80053ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80053b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80053b4:	2000144c 	.word	0x2000144c
  ldr r2, =_sidata
 80053b8:	080140c8 	.word	0x080140c8
  ldr r2, =_sbss
 80053bc:	2000144c 	.word	0x2000144c
  ldr r4, =_ebss
 80053c0:	20013f00 	.word	0x20013f00

080053c4 <ADC1_2_IRQHandler>:
>>>>>>> render
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
<<<<<<< HEAD
 80054ec:	e7fe      	b.n	80054ec <ADC1_2_IRQHandler>
	...

080054f0 <HAL_InitTick>:
=======
 80053c4:	e7fe      	b.n	80053c4 <ADC1_2_IRQHandler>
	...

080053c8 <HAL_InitTick>:
>>>>>>> render
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
<<<<<<< HEAD
 80054f0:	4b10      	ldr	r3, [pc, #64]	; (8005534 <HAL_InitTick+0x44>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	b90b      	cbnz	r3, 80054fa <HAL_InitTick+0xa>
=======
 80053c8:	4b10      	ldr	r3, [pc, #64]	; (800540c <HAL_InitTick+0x44>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	b90b      	cbnz	r3, 80053d2 <HAL_InitTick+0xa>
>>>>>>> render
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
<<<<<<< HEAD
 80054f6:	2001      	movs	r0, #1
=======
 80053ce:	2001      	movs	r0, #1
>>>>>>> render
  }

  /* Return function status */
  return status;
}
<<<<<<< HEAD
 80054f8:	4770      	bx	lr
{
 80054fa:	b510      	push	{r4, lr}
 80054fc:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80054fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005502:	fbb0 f3f3 	udiv	r3, r0, r3
 8005506:	4a0c      	ldr	r2, [pc, #48]	; (8005538 <HAL_InitTick+0x48>)
 8005508:	6810      	ldr	r0, [r2, #0]
 800550a:	fbb0 f0f3 	udiv	r0, r0, r3
 800550e:	f000 fec1 	bl	8006294 <HAL_SYSTICK_Config>
 8005512:	b968      	cbnz	r0, 8005530 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005514:	2c0f      	cmp	r4, #15
 8005516:	d901      	bls.n	800551c <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8005518:	2001      	movs	r0, #1
 800551a:	e00a      	b.n	8005532 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800551c:	2200      	movs	r2, #0
 800551e:	4621      	mov	r1, r4
 8005520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005524:	f000 fe70 	bl	8006208 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005528:	4b04      	ldr	r3, [pc, #16]	; (800553c <HAL_InitTick+0x4c>)
 800552a:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 800552c:	2000      	movs	r0, #0
 800552e:	e000      	b.n	8005532 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8005530:	2001      	movs	r0, #1
}
 8005532:	bd10      	pop	{r4, pc}
 8005534:	20000108 	.word	0x20000108
 8005538:	20000058 	.word	0x20000058
 800553c:	2000010c 	.word	0x2000010c

08005540 <HAL_Init>:
{
 8005540:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005542:	2003      	movs	r0, #3
 8005544:	f000 fe4e 	bl	80061e4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005548:	2000      	movs	r0, #0
 800554a:	f7ff ffd1 	bl	80054f0 <HAL_InitTick>
 800554e:	b110      	cbz	r0, 8005556 <HAL_Init+0x16>
    status = HAL_ERROR;
 8005550:	2401      	movs	r4, #1
}
 8005552:	4620      	mov	r0, r4
 8005554:	bd10      	pop	{r4, pc}
 8005556:	4604      	mov	r4, r0
    HAL_MspInit();
 8005558:	f7fe fdae 	bl	80040b8 <HAL_MspInit>
 800555c:	e7f9      	b.n	8005552 <HAL_Init+0x12>
	...

08005560 <HAL_IncTick>:
=======
 80053d0:	4770      	bx	lr
{
 80053d2:	b510      	push	{r4, lr}
 80053d4:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80053d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80053da:	fbb0 f3f3 	udiv	r3, r0, r3
 80053de:	4a0c      	ldr	r2, [pc, #48]	; (8005410 <HAL_InitTick+0x48>)
 80053e0:	6810      	ldr	r0, [r2, #0]
 80053e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80053e6:	f000 fec1 	bl	800616c <HAL_SYSTICK_Config>
 80053ea:	b968      	cbnz	r0, 8005408 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053ec:	2c0f      	cmp	r4, #15
 80053ee:	d901      	bls.n	80053f4 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 80053f0:	2001      	movs	r0, #1
 80053f2:	e00a      	b.n	800540a <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053f4:	2200      	movs	r2, #0
 80053f6:	4621      	mov	r1, r4
 80053f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053fc:	f000 fe70 	bl	80060e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005400:	4b04      	ldr	r3, [pc, #16]	; (8005414 <HAL_InitTick+0x4c>)
 8005402:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8005404:	2000      	movs	r0, #0
 8005406:	e000      	b.n	800540a <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8005408:	2001      	movs	r0, #1
}
 800540a:	bd10      	pop	{r4, pc}
 800540c:	200010f8 	.word	0x200010f8
 8005410:	20001048 	.word	0x20001048
 8005414:	200010fc 	.word	0x200010fc

08005418 <HAL_Init>:
{
 8005418:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800541a:	2003      	movs	r0, #3
 800541c:	f000 fe4e 	bl	80060bc <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005420:	2000      	movs	r0, #0
 8005422:	f7ff ffd1 	bl	80053c8 <HAL_InitTick>
 8005426:	b110      	cbz	r0, 800542e <HAL_Init+0x16>
    status = HAL_ERROR;
 8005428:	2401      	movs	r4, #1
}
 800542a:	4620      	mov	r0, r4
 800542c:	bd10      	pop	{r4, pc}
 800542e:	4604      	mov	r4, r0
    HAL_MspInit();
 8005430:	f7fe fe5e 	bl	80040f0 <HAL_MspInit>
 8005434:	e7f9      	b.n	800542a <HAL_Init+0x12>
	...

08005438 <HAL_IncTick>:
>>>>>>> render
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
<<<<<<< HEAD
 8005560:	4a03      	ldr	r2, [pc, #12]	; (8005570 <HAL_IncTick+0x10>)
 8005562:	6813      	ldr	r3, [r2, #0]
 8005564:	4903      	ldr	r1, [pc, #12]	; (8005574 <HAL_IncTick+0x14>)
 8005566:	6809      	ldr	r1, [r1, #0]
 8005568:	440b      	add	r3, r1
 800556a:	6013      	str	r3, [r2, #0]
}
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	200114a0 	.word	0x200114a0
 8005574:	20000108 	.word	0x20000108

08005578 <HAL_GetTick>:
=======
 8005438:	4a03      	ldr	r2, [pc, #12]	; (8005448 <HAL_IncTick+0x10>)
 800543a:	6813      	ldr	r3, [r2, #0]
 800543c:	4903      	ldr	r1, [pc, #12]	; (800544c <HAL_IncTick+0x14>)
 800543e:	6809      	ldr	r1, [r1, #0]
 8005440:	440b      	add	r3, r1
 8005442:	6013      	str	r3, [r2, #0]
}
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	20012490 	.word	0x20012490
 800544c:	200010f8 	.word	0x200010f8

08005450 <HAL_GetTick>:
>>>>>>> render
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
<<<<<<< HEAD
 8005578:	4b01      	ldr	r3, [pc, #4]	; (8005580 <HAL_GetTick+0x8>)
 800557a:	6818      	ldr	r0, [r3, #0]
}
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	200114a0 	.word	0x200114a0

08005584 <HAL_Delay>:
=======
 8005450:	4b01      	ldr	r3, [pc, #4]	; (8005458 <HAL_GetTick+0x8>)
 8005452:	6818      	ldr	r0, [r3, #0]
}
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	20012490 	.word	0x20012490

0800545c <HAL_Delay>:
>>>>>>> render
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8005584:	b538      	push	{r3, r4, r5, lr}
 8005586:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005588:	f7ff fff6 	bl	8005578 <HAL_GetTick>
 800558c:	4605      	mov	r5, r0
=======
 800545c:	b538      	push	{r3, r4, r5, lr}
 800545e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005460:	f7ff fff6 	bl	8005450 <HAL_GetTick>
 8005464:	4605      	mov	r5, r0
>>>>>>> render
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
<<<<<<< HEAD
 800558e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8005592:	d002      	beq.n	800559a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8005594:	4b04      	ldr	r3, [pc, #16]	; (80055a8 <HAL_Delay+0x24>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800559a:	f7ff ffed 	bl	8005578 <HAL_GetTick>
 800559e:	1b40      	subs	r0, r0, r5
 80055a0:	42a0      	cmp	r0, r4
 80055a2:	d3fa      	bcc.n	800559a <HAL_Delay+0x16>
  {
  }
}
 80055a4:	bd38      	pop	{r3, r4, r5, pc}
 80055a6:	bf00      	nop
 80055a8:	20000108 	.word	0x20000108

080055ac <HAL_ADC_Init>:
=======
 8005466:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800546a:	d002      	beq.n	8005472 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800546c:	4b04      	ldr	r3, [pc, #16]	; (8005480 <HAL_Delay+0x24>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005472:	f7ff ffed 	bl	8005450 <HAL_GetTick>
 8005476:	1b40      	subs	r0, r0, r5
 8005478:	42a0      	cmp	r0, r4
 800547a:	d3fa      	bcc.n	8005472 <HAL_Delay+0x16>
  {
  }
}
 800547c:	bd38      	pop	{r3, r4, r5, pc}
 800547e:	bf00      	nop
 8005480:	200010f8 	.word	0x200010f8

08005484 <HAL_ADC_Init>:
>>>>>>> render
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80055ac:	b530      	push	{r4, r5, lr}
 80055ae:	b083      	sub	sp, #12
=======
 8005484:	b530      	push	{r4, r5, lr}
 8005486:	b083      	sub	sp, #12
>>>>>>> render
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
<<<<<<< HEAD
 80055b0:	2300      	movs	r3, #0
 80055b2:	9301      	str	r3, [sp, #4]
=======
 8005488:	2300      	movs	r3, #0
 800548a:	9301      	str	r3, [sp, #4]
>>>>>>> render
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
<<<<<<< HEAD
 80055b4:	2800      	cmp	r0, #0
 80055b6:	f000 8138 	beq.w	800582a <HAL_ADC_Init+0x27e>
 80055ba:	4604      	mov	r4, r0
=======
 800548c:	2800      	cmp	r0, #0
 800548e:	f000 8138 	beq.w	8005702 <HAL_ADC_Init+0x27e>
 8005492:	4604      	mov	r4, r0
>>>>>>> render
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 80055bc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80055be:	b313      	cbz	r3, 8005606 <HAL_ADC_Init+0x5a>
=======
 8005494:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005496:	b313      	cbz	r3, 80054de <HAL_ADC_Init+0x5a>
>>>>>>> render
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
<<<<<<< HEAD
 80055c0:	6823      	ldr	r3, [r4, #0]
=======
 8005498:	6823      	ldr	r3, [r4, #0]
>>>>>>> render
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
<<<<<<< HEAD
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 80055c8:	d005      	beq.n	80055d6 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 80055d0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80055d4:	609a      	str	r2, [r3, #8]
=======
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 80054a0:	d005      	beq.n	80054ae <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 80054a8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80054ac:	609a      	str	r2, [r3, #8]
>>>>>>> render
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 80055d6:	6822      	ldr	r2, [r4, #0]
=======
 80054ae:	6822      	ldr	r2, [r4, #0]
>>>>>>> render
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
<<<<<<< HEAD
 80055d8:	6893      	ldr	r3, [r2, #8]
 80055da:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80055de:	d11f      	bne.n	8005620 <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 80055e0:	6893      	ldr	r3, [r2, #8]
 80055e2:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80055e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80055ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ee:	6093      	str	r3, [r2, #8]
=======
 80054b0:	6893      	ldr	r3, [r2, #8]
 80054b2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80054b6:	d11f      	bne.n	80054f8 <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 80054b8:	6893      	ldr	r3, [r2, #8]
 80054ba:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80054be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c6:	6093      	str	r3, [r2, #8]
>>>>>>> render
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
<<<<<<< HEAD
 80055f0:	4b8f      	ldr	r3, [pc, #572]	; (8005830 <HAL_ADC_Init+0x284>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	099b      	lsrs	r3, r3, #6
 80055f6:	4a8f      	ldr	r2, [pc, #572]	; (8005834 <HAL_ADC_Init+0x288>)
 80055f8:	fba2 2303 	umull	r2, r3, r2, r3
 80055fc:	099b      	lsrs	r3, r3, #6
 80055fe:	3301      	adds	r3, #1
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005604:	e009      	b.n	800561a <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 8005606:	f7fb fedb 	bl	80013c0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800560a:	2300      	movs	r3, #0
 800560c:	6623      	str	r3, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 800560e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8005612:	e7d5      	b.n	80055c0 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8005614:	9b01      	ldr	r3, [sp, #4]
 8005616:	3b01      	subs	r3, #1
 8005618:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800561a:	9b01      	ldr	r3, [sp, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1f9      	bne.n	8005614 <HAL_ADC_Init+0x68>
=======
 80054c8:	4b8f      	ldr	r3, [pc, #572]	; (8005708 <HAL_ADC_Init+0x284>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	099b      	lsrs	r3, r3, #6
 80054ce:	4a8f      	ldr	r2, [pc, #572]	; (800570c <HAL_ADC_Init+0x288>)
 80054d0:	fba2 2303 	umull	r2, r3, r2, r3
 80054d4:	099b      	lsrs	r3, r3, #6
 80054d6:	3301      	adds	r3, #1
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80054dc:	e009      	b.n	80054f2 <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 80054de:	f7fb ff6f 	bl	80013c0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80054e2:	2300      	movs	r3, #0
 80054e4:	6623      	str	r3, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80054e6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80054ea:	e7d5      	b.n	8005498 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 80054ec:	9b01      	ldr	r3, [sp, #4]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80054f2:	9b01      	ldr	r3, [sp, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1f9      	bne.n	80054ec <HAL_ADC_Init+0x68>
>>>>>>> render
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8005620:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005622:	6893      	ldr	r3, [r2, #8]
 8005624:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005628:	d13d      	bne.n	80056a6 <HAL_ADC_Init+0xfa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800562a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800562c:	f043 0310 	orr.w	r3, r3, #16
 8005630:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005632:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005634:	f043 0301 	orr.w	r3, r3, #1
 8005638:	6623      	str	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800563a:	2001      	movs	r0, #1
=======
 80054f8:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80054fa:	6893      	ldr	r3, [r2, #8]
 80054fc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005500:	d13d      	bne.n	800557e <HAL_ADC_Init+0xfa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005502:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005504:	f043 0310 	orr.w	r3, r3, #16
 8005508:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800550a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800550c:	f043 0301 	orr.w	r3, r3, #1
 8005510:	6623      	str	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005512:	2001      	movs	r0, #1
>>>>>>> render
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
<<<<<<< HEAD
 800563c:	6893      	ldr	r3, [r2, #8]
 800563e:	f013 0304 	ands.w	r3, r3, #4
 8005642:	d000      	beq.n	8005646 <HAL_ADC_Init+0x9a>
 8005644:	2301      	movs	r3, #1
=======
 8005514:	6893      	ldr	r3, [r2, #8]
 8005516:	f013 0304 	ands.w	r3, r3, #4
 800551a:	d000      	beq.n	800551e <HAL_ADC_Init+0x9a>
 800551c:	2301      	movs	r3, #1
>>>>>>> render
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
<<<<<<< HEAD
 8005646:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005648:	f011 0f10 	tst.w	r1, #16
 800564c:	f040 80e6 	bne.w	800581c <HAL_ADC_Init+0x270>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005650:	2b00      	cmp	r3, #0
 8005652:	f040 80e3 	bne.w	800581c <HAL_ADC_Init+0x270>
=======
 800551e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005520:	f011 0f10 	tst.w	r1, #16
 8005524:	f040 80e6 	bne.w	80056f4 <HAL_ADC_Init+0x270>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005528:	2b00      	cmp	r3, #0
 800552a:	f040 80e3 	bne.w	80056f4 <HAL_ADC_Init+0x270>
>>>>>>> render
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8005656:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005658:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800565c:	f043 0302 	orr.w	r3, r3, #2
 8005660:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005662:	6893      	ldr	r3, [r2, #8]
 8005664:	f013 0f01 	tst.w	r3, #1
 8005668:	d13e      	bne.n	80056e8 <HAL_ADC_Init+0x13c>
=======
 800552e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005530:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005534:	f043 0302 	orr.w	r3, r3, #2
 8005538:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800553a:	6893      	ldr	r3, [r2, #8]
 800553c:	f013 0f01 	tst.w	r3, #1
 8005540:	d13e      	bne.n	80055c0 <HAL_ADC_Init+0x13c>
>>>>>>> render
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
<<<<<<< HEAD
 800566a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800566e:	d01c      	beq.n	80056aa <HAL_ADC_Init+0xfe>
 8005670:	4b71      	ldr	r3, [pc, #452]	; (8005838 <HAL_ADC_Init+0x28c>)
 8005672:	429a      	cmp	r2, r3
 8005674:	d019      	beq.n	80056aa <HAL_ADC_Init+0xfe>
 8005676:	4b71      	ldr	r3, [pc, #452]	; (800583c <HAL_ADC_Init+0x290>)
 8005678:	6899      	ldr	r1, [r3, #8]
 800567a:	f011 0101 	ands.w	r1, r1, #1
 800567e:	d000      	beq.n	8005682 <HAL_ADC_Init+0xd6>
 8005680:	2101      	movs	r1, #1
 8005682:	4b6f      	ldr	r3, [pc, #444]	; (8005840 <HAL_ADC_Init+0x294>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f013 0301 	ands.w	r3, r3, #1
 800568a:	d000      	beq.n	800568e <HAL_ADC_Init+0xe2>
 800568c:	2301      	movs	r3, #1
 800568e:	430b      	orrs	r3, r1
 8005690:	496c      	ldr	r1, [pc, #432]	; (8005844 <HAL_ADC_Init+0x298>)
 8005692:	6889      	ldr	r1, [r1, #8]
 8005694:	f011 0101 	ands.w	r1, r1, #1
 8005698:	d000      	beq.n	800569c <HAL_ADC_Init+0xf0>
 800569a:	2101      	movs	r1, #1
 800569c:	430b      	orrs	r3, r1
 800569e:	bf0c      	ite	eq
 80056a0:	2301      	moveq	r3, #1
 80056a2:	2300      	movne	r3, #0
 80056a4:	e012      	b.n	80056cc <HAL_ADC_Init+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056a6:	2000      	movs	r0, #0
 80056a8:	e7c8      	b.n	800563c <HAL_ADC_Init+0x90>
 80056aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f013 0301 	ands.w	r3, r3, #1
 80056b4:	d000      	beq.n	80056b8 <HAL_ADC_Init+0x10c>
 80056b6:	2301      	movs	r3, #1
 80056b8:	495f      	ldr	r1, [pc, #380]	; (8005838 <HAL_ADC_Init+0x28c>)
 80056ba:	6889      	ldr	r1, [r1, #8]
 80056bc:	f011 0101 	ands.w	r1, r1, #1
 80056c0:	d000      	beq.n	80056c4 <HAL_ADC_Init+0x118>
 80056c2:	2101      	movs	r1, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056c4:	430b      	orrs	r3, r1
 80056c6:	bf0c      	ite	eq
 80056c8:	2301      	moveq	r3, #1
 80056ca:	2300      	movne	r3, #0
 80056cc:	b163      	cbz	r3, 80056e8 <HAL_ADC_Init+0x13c>
=======
 8005542:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005546:	d01c      	beq.n	8005582 <HAL_ADC_Init+0xfe>
 8005548:	4b71      	ldr	r3, [pc, #452]	; (8005710 <HAL_ADC_Init+0x28c>)
 800554a:	429a      	cmp	r2, r3
 800554c:	d019      	beq.n	8005582 <HAL_ADC_Init+0xfe>
 800554e:	4b71      	ldr	r3, [pc, #452]	; (8005714 <HAL_ADC_Init+0x290>)
 8005550:	6899      	ldr	r1, [r3, #8]
 8005552:	f011 0101 	ands.w	r1, r1, #1
 8005556:	d000      	beq.n	800555a <HAL_ADC_Init+0xd6>
 8005558:	2101      	movs	r1, #1
 800555a:	4b6f      	ldr	r3, [pc, #444]	; (8005718 <HAL_ADC_Init+0x294>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f013 0301 	ands.w	r3, r3, #1
 8005562:	d000      	beq.n	8005566 <HAL_ADC_Init+0xe2>
 8005564:	2301      	movs	r3, #1
 8005566:	430b      	orrs	r3, r1
 8005568:	496c      	ldr	r1, [pc, #432]	; (800571c <HAL_ADC_Init+0x298>)
 800556a:	6889      	ldr	r1, [r1, #8]
 800556c:	f011 0101 	ands.w	r1, r1, #1
 8005570:	d000      	beq.n	8005574 <HAL_ADC_Init+0xf0>
 8005572:	2101      	movs	r1, #1
 8005574:	430b      	orrs	r3, r1
 8005576:	bf0c      	ite	eq
 8005578:	2301      	moveq	r3, #1
 800557a:	2300      	movne	r3, #0
 800557c:	e012      	b.n	80055a4 <HAL_ADC_Init+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800557e:	2000      	movs	r0, #0
 8005580:	e7c8      	b.n	8005514 <HAL_ADC_Init+0x90>
 8005582:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f013 0301 	ands.w	r3, r3, #1
 800558c:	d000      	beq.n	8005590 <HAL_ADC_Init+0x10c>
 800558e:	2301      	movs	r3, #1
 8005590:	495f      	ldr	r1, [pc, #380]	; (8005710 <HAL_ADC_Init+0x28c>)
 8005592:	6889      	ldr	r1, [r1, #8]
 8005594:	f011 0101 	ands.w	r1, r1, #1
 8005598:	d000      	beq.n	800559c <HAL_ADC_Init+0x118>
 800559a:	2101      	movs	r1, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800559c:	430b      	orrs	r3, r1
 800559e:	bf0c      	ite	eq
 80055a0:	2301      	moveq	r3, #1
 80055a2:	2300      	movne	r3, #0
 80055a4:	b163      	cbz	r3, 80055c0 <HAL_ADC_Init+0x13c>
>>>>>>> render
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
<<<<<<< HEAD
 80056ce:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80056d2:	d072      	beq.n	80057ba <HAL_ADC_Init+0x20e>
 80056d4:	4b58      	ldr	r3, [pc, #352]	; (8005838 <HAL_ADC_Init+0x28c>)
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d06d      	beq.n	80057b6 <HAL_ADC_Init+0x20a>
 80056da:	495b      	ldr	r1, [pc, #364]	; (8005848 <HAL_ADC_Init+0x29c>)
 80056dc:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80056de:	688a      	ldr	r2, [r1, #8]
 80056e0:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80056e4:	4313      	orrs	r3, r2
 80056e6:	608b      	str	r3, [r1, #8]
=======
 80055a6:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80055aa:	d072      	beq.n	8005692 <HAL_ADC_Init+0x20e>
 80055ac:	4b58      	ldr	r3, [pc, #352]	; (8005710 <HAL_ADC_Init+0x28c>)
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d06d      	beq.n	800568e <HAL_ADC_Init+0x20a>
 80055b2:	495b      	ldr	r1, [pc, #364]	; (8005720 <HAL_ADC_Init+0x29c>)
 80055b4:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80055b6:	688a      	ldr	r2, [r1, #8]
 80055b8:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80055bc:	4313      	orrs	r3, r2
 80055be:	608b      	str	r3, [r1, #8]
>>>>>>> render
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
<<<<<<< HEAD
 80056e8:	7f62      	ldrb	r2, [r4, #29]
                hadc->Init.Overrun                                                     |
 80056ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80056ec:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 80056f0:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 80056f2:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 80056f4:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 80056f6:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80056f8:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80056fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005700:	2a01      	cmp	r2, #1
 8005702:	d05c      	beq.n	80057be <HAL_ADC_Init+0x212>
=======
 80055c0:	7f62      	ldrb	r2, [r4, #29]
                hadc->Init.Overrun                                                     |
 80055c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80055c4:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 80055c8:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 80055ca:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 80055cc:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 80055ce:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80055d0:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80055d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80055d8:	2a01      	cmp	r2, #1
 80055da:	d05c      	beq.n	8005696 <HAL_ADC_Init+0x212>
>>>>>>> render
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< HEAD
 8005704:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005706:	b122      	cbz	r2, 8005712 <HAL_ADC_Init+0x166>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005708:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800570c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800570e:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005710:	4313      	orrs	r3, r2
=======
 80055dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80055de:	b122      	cbz	r2, 80055ea <HAL_ADC_Init+0x166>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80055e0:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80055e4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80055e6:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80055e8:	4313      	orrs	r3, r2
>>>>>>> render
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
<<<<<<< HEAD
 8005712:	6821      	ldr	r1, [r4, #0]
 8005714:	68cd      	ldr	r5, [r1, #12]
 8005716:	4a4d      	ldr	r2, [pc, #308]	; (800584c <HAL_ADC_Init+0x2a0>)
 8005718:	402a      	ands	r2, r5
 800571a:	4313      	orrs	r3, r2
 800571c:	60cb      	str	r3, [r1, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800571e:	6822      	ldr	r2, [r4, #0]
 8005720:	6913      	ldr	r3, [r2, #16]
 8005722:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005726:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005728:	430b      	orrs	r3, r1
 800572a:	6113      	str	r3, [r2, #16]
=======
 80055ea:	6821      	ldr	r1, [r4, #0]
 80055ec:	68cd      	ldr	r5, [r1, #12]
 80055ee:	4a4d      	ldr	r2, [pc, #308]	; (8005724 <HAL_ADC_Init+0x2a0>)
 80055f0:	402a      	ands	r2, r5
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60cb      	str	r3, [r1, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80055f6:	6822      	ldr	r2, [r4, #0]
 80055f8:	6913      	ldr	r3, [r2, #16]
 80055fa:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80055fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005600:	430b      	orrs	r3, r1
 8005602:	6113      	str	r3, [r2, #16]
>>>>>>> render
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 800572c:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800572e:	688b      	ldr	r3, [r1, #8]
 8005730:	f013 0304 	ands.w	r3, r3, #4
 8005734:	d000      	beq.n	8005738 <HAL_ADC_Init+0x18c>
 8005736:	2301      	movs	r3, #1
=======
 8005604:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005606:	688b      	ldr	r3, [r1, #8]
 8005608:	f013 0304 	ands.w	r3, r3, #4
 800560c:	d000      	beq.n	8005610 <HAL_ADC_Init+0x18c>
 800560e:	2301      	movs	r3, #1
>>>>>>> render
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
<<<<<<< HEAD
 8005738:	688a      	ldr	r2, [r1, #8]
 800573a:	f012 0208 	ands.w	r2, r2, #8
 800573e:	d000      	beq.n	8005742 <HAL_ADC_Init+0x196>
 8005740:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005742:	bb4b      	cbnz	r3, 8005798 <HAL_ADC_Init+0x1ec>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005744:	bb42      	cbnz	r2, 8005798 <HAL_ADC_Init+0x1ec>
=======
 8005610:	688a      	ldr	r2, [r1, #8]
 8005612:	f012 0208 	ands.w	r2, r2, #8
 8005616:	d000      	beq.n	800561a <HAL_ADC_Init+0x196>
 8005618:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800561a:	bb4b      	cbnz	r3, 8005670 <HAL_ADC_Init+0x1ec>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800561c:	bb42      	cbnz	r2, 8005670 <HAL_ADC_Init+0x1ec>
>>>>>>> render
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
<<<<<<< HEAD
 8005746:	7f22      	ldrb	r2, [r4, #28]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005748:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800574c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800574e:	ea43 3282 	orr.w	r2, r3, r2, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005752:	68cb      	ldr	r3, [r1, #12]
 8005754:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005758:	f023 0302 	bic.w	r3, r3, #2
 800575c:	4313      	orrs	r3, r2
 800575e:	60cb      	str	r3, [r1, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005760:	6923      	ldr	r3, [r4, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d030      	beq.n	80057c8 <HAL_ADC_Init+0x21c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005766:	6822      	ldr	r2, [r4, #0]
 8005768:	6913      	ldr	r3, [r2, #16]
 800576a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800576e:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005770:	6822      	ldr	r2, [r4, #0]
 8005772:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8005776:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800577a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800577e:	6921      	ldr	r1, [r4, #16]
 8005780:	430b      	orrs	r3, r1
 8005782:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
=======
 800561e:	7f22      	ldrb	r2, [r4, #28]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005620:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8005624:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005626:	ea43 3282 	orr.w	r2, r3, r2, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800562a:	68cb      	ldr	r3, [r1, #12]
 800562c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005630:	f023 0302 	bic.w	r3, r3, #2
 8005634:	4313      	orrs	r3, r2
 8005636:	60cb      	str	r3, [r1, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005638:	6923      	ldr	r3, [r4, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d030      	beq.n	80056a0 <HAL_ADC_Init+0x21c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800563e:	6822      	ldr	r2, [r4, #0]
 8005640:	6913      	ldr	r3, [r2, #16]
 8005642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005646:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005648:	6822      	ldr	r2, [r4, #0]
 800564a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800564e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005652:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005656:	6921      	ldr	r1, [r4, #16]
 8005658:	430b      	orrs	r3, r1
 800565a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
>>>>>>> render
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
<<<<<<< HEAD
 8005786:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800578a:	2b01      	cmp	r3, #1
 800578c:	d02b      	beq.n	80057e6 <HAL_ADC_Init+0x23a>
=======
 800565e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005662:	2b01      	cmp	r3, #1
 8005664:	d02b      	beq.n	80056be <HAL_ADC_Init+0x23a>
>>>>>>> render
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
<<<<<<< HEAD
 800578e:	6822      	ldr	r2, [r4, #0]
 8005790:	6913      	ldr	r3, [r2, #16]
 8005792:	f023 0301 	bic.w	r3, r3, #1
 8005796:	6113      	str	r3, [r2, #16]
=======
 8005666:	6822      	ldr	r2, [r4, #0]
 8005668:	6913      	ldr	r3, [r2, #16]
 800566a:	f023 0301 	bic.w	r3, r3, #1
 800566e:	6113      	str	r3, [r2, #16]
>>>>>>> render
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
<<<<<<< HEAD
 8005798:	6963      	ldr	r3, [r4, #20]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d035      	beq.n	800580a <HAL_ADC_Init+0x25e>
=======
 8005670:	6963      	ldr	r3, [r4, #20]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d035      	beq.n	80056e2 <HAL_ADC_Init+0x25e>
>>>>>>> render
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
<<<<<<< HEAD
 800579e:	6822      	ldr	r2, [r4, #0]
 80057a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80057a2:	f023 030f 	bic.w	r3, r3, #15
 80057a6:	6313      	str	r3, [r2, #48]	; 0x30
=======
 8005676:	6822      	ldr	r2, [r4, #0]
 8005678:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800567a:	f023 030f 	bic.w	r3, r3, #15
 800567e:	6313      	str	r3, [r2, #48]	; 0x30
>>>>>>> render
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
<<<<<<< HEAD
 80057a8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80057aa:	f023 0303 	bic.w	r3, r3, #3
 80057ae:	f043 0301 	orr.w	r3, r3, #1
 80057b2:	65e3      	str	r3, [r4, #92]	; 0x5c
 80057b4:	e037      	b.n	8005826 <HAL_ADC_Init+0x27a>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80057b6:	4926      	ldr	r1, [pc, #152]	; (8005850 <HAL_ADC_Init+0x2a4>)
 80057b8:	e790      	b.n	80056dc <HAL_ADC_Init+0x130>
 80057ba:	4925      	ldr	r1, [pc, #148]	; (8005850 <HAL_ADC_Init+0x2a4>)
 80057bc:	e78e      	b.n	80056dc <HAL_ADC_Init+0x130>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80057be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80057c0:	3a01      	subs	r2, #1
 80057c2:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80057c6:	e79d      	b.n	8005704 <HAL_ADC_Init+0x158>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80057c8:	6822      	ldr	r2, [r4, #0]
 80057ca:	6913      	ldr	r3, [r2, #16]
 80057cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057d0:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80057d2:	6822      	ldr	r2, [r4, #0]
 80057d4:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80057d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80057dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80057e0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80057e4:	e7cf      	b.n	8005786 <HAL_ADC_Init+0x1da>
        MODIFY_REG(hadc->Instance->CFGR2,
 80057e6:	6821      	ldr	r1, [r4, #0]
 80057e8:	690b      	ldr	r3, [r1, #16]
 80057ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80057ee:	f023 0304 	bic.w	r3, r3, #4
 80057f2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80057f4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80057f6:	432a      	orrs	r2, r5
 80057f8:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80057fa:	432a      	orrs	r2, r5
 80057fc:	6d25      	ldr	r5, [r4, #80]	; 0x50
 80057fe:	432a      	orrs	r2, r5
 8005800:	4313      	orrs	r3, r2
 8005802:	f043 0301 	orr.w	r3, r3, #1
 8005806:	610b      	str	r3, [r1, #16]
 8005808:	e7c6      	b.n	8005798 <HAL_ADC_Init+0x1ec>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800580a:	6821      	ldr	r1, [r4, #0]
 800580c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800580e:	f023 030f 	bic.w	r3, r3, #15
 8005812:	6a22      	ldr	r2, [r4, #32]
 8005814:	3a01      	subs	r2, #1
 8005816:	4313      	orrs	r3, r2
 8005818:	630b      	str	r3, [r1, #48]	; 0x30
 800581a:	e7c5      	b.n	80057a8 <HAL_ADC_Init+0x1fc>
=======
 8005680:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005682:	f023 0303 	bic.w	r3, r3, #3
 8005686:	f043 0301 	orr.w	r3, r3, #1
 800568a:	65e3      	str	r3, [r4, #92]	; 0x5c
 800568c:	e037      	b.n	80056fe <HAL_ADC_Init+0x27a>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800568e:	4926      	ldr	r1, [pc, #152]	; (8005728 <HAL_ADC_Init+0x2a4>)
 8005690:	e790      	b.n	80055b4 <HAL_ADC_Init+0x130>
 8005692:	4925      	ldr	r1, [pc, #148]	; (8005728 <HAL_ADC_Init+0x2a4>)
 8005694:	e78e      	b.n	80055b4 <HAL_ADC_Init+0x130>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005696:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005698:	3a01      	subs	r2, #1
 800569a:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800569e:	e79d      	b.n	80055dc <HAL_ADC_Init+0x158>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80056a0:	6822      	ldr	r2, [r4, #0]
 80056a2:	6913      	ldr	r3, [r2, #16]
 80056a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056a8:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80056aa:	6822      	ldr	r2, [r4, #0]
 80056ac:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80056b0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80056b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80056b8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80056bc:	e7cf      	b.n	800565e <HAL_ADC_Init+0x1da>
        MODIFY_REG(hadc->Instance->CFGR2,
 80056be:	6821      	ldr	r1, [r4, #0]
 80056c0:	690b      	ldr	r3, [r1, #16]
 80056c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80056c6:	f023 0304 	bic.w	r3, r3, #4
 80056ca:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80056cc:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80056ce:	432a      	orrs	r2, r5
 80056d0:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80056d2:	432a      	orrs	r2, r5
 80056d4:	6d25      	ldr	r5, [r4, #80]	; 0x50
 80056d6:	432a      	orrs	r2, r5
 80056d8:	4313      	orrs	r3, r2
 80056da:	f043 0301 	orr.w	r3, r3, #1
 80056de:	610b      	str	r3, [r1, #16]
 80056e0:	e7c6      	b.n	8005670 <HAL_ADC_Init+0x1ec>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80056e2:	6821      	ldr	r1, [r4, #0]
 80056e4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80056e6:	f023 030f 	bic.w	r3, r3, #15
 80056ea:	6a22      	ldr	r2, [r4, #32]
 80056ec:	3a01      	subs	r2, #1
 80056ee:	4313      	orrs	r3, r2
 80056f0:	630b      	str	r3, [r1, #48]	; 0x30
 80056f2:	e7c5      	b.n	8005680 <HAL_ADC_Init+0x1fc>
>>>>>>> render
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 800581c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800581e:	f043 0310 	orr.w	r3, r3, #16
 8005822:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005824:	2001      	movs	r0, #1
=======
 80056f4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80056f6:	f043 0310 	orr.w	r3, r3, #16
 80056fa:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80056fc:	2001      	movs	r0, #1
>>>>>>> render
  }

  /* Return function status */
  return tmp_hal_status;
}
<<<<<<< HEAD
 8005826:	b003      	add	sp, #12
 8005828:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800582a:	2001      	movs	r0, #1
 800582c:	e7fb      	b.n	8005826 <HAL_ADC_Init+0x27a>
 800582e:	bf00      	nop
 8005830:	20000058 	.word	0x20000058
 8005834:	053e2d63 	.word	0x053e2d63
 8005838:	50000100 	.word	0x50000100
 800583c:	50000400 	.word	0x50000400
 8005840:	50000500 	.word	0x50000500
 8005844:	50000600 	.word	0x50000600
 8005848:	50000700 	.word	0x50000700
 800584c:	fff04007 	.word	0xfff04007
 8005850:	50000300 	.word	0x50000300

08005854 <HAL_ADC_ConvCpltCallback>:
=======
 80056fe:	b003      	add	sp, #12
 8005700:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005702:	2001      	movs	r0, #1
 8005704:	e7fb      	b.n	80056fe <HAL_ADC_Init+0x27a>
 8005706:	bf00      	nop
 8005708:	20001048 	.word	0x20001048
 800570c:	053e2d63 	.word	0x053e2d63
 8005710:	50000100 	.word	0x50000100
 8005714:	50000400 	.word	0x50000400
 8005718:	50000500 	.word	0x50000500
 800571c:	50000600 	.word	0x50000600
 8005720:	50000700 	.word	0x50000700
 8005724:	fff04007 	.word	0xfff04007
 8005728:	50000300 	.word	0x50000300

0800572c <HAL_ADC_ConvCpltCallback>:
>>>>>>> render
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
<<<<<<< HEAD
 8005854:	4770      	bx	lr

08005856 <HAL_ADC_ConvHalfCpltCallback>:
=======
 800572c:	4770      	bx	lr

0800572e <HAL_ADC_ConvHalfCpltCallback>:
>>>>>>> render
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 8005856:	4770      	bx	lr

08005858 <ADC_DMAHalfConvCplt>:
=======
 800572e:	4770      	bx	lr

08005730 <ADC_DMAHalfConvCplt>:
>>>>>>> render
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8005858:	b508      	push	{r3, lr}
=======
 8005730:	b508      	push	{r3, lr}
>>>>>>> render

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
<<<<<<< HEAD
 800585a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800585c:	f7ff fffb 	bl	8005856 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005860:	bd08      	pop	{r3, pc}

08005862 <HAL_ADC_ErrorCallback>:
}
 8005862:	4770      	bx	lr

08005864 <ADC_DMAConvCplt>:
{
 8005864:	b508      	push	{r3, lr}
 8005866:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005868:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800586a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800586c:	f012 0f50 	tst.w	r2, #80	; 0x50
 8005870:	d130      	bne.n	80058d4 <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005872:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005874:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005878:	65c3      	str	r3, [r0, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800587a:	6803      	ldr	r3, [r0, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	f012 0f08 	tst.w	r2, #8
 8005882:	d014      	beq.n	80058ae <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800588a:	d120      	bne.n	80058ce <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005892:	d11c      	bne.n	80058ce <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005894:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005896:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800589a:	65c3      	str	r3, [r0, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800589c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800589e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80058a2:	d114      	bne.n	80058ce <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80058a4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80058a6:	f043 0301 	orr.w	r3, r3, #1
 80058aa:	65c3      	str	r3, [r0, #92]	; 0x5c
 80058ac:	e00f      	b.n	80058ce <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f013 0f02 	tst.w	r3, #2
 80058b4:	d10b      	bne.n	80058ce <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80058b6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80058b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058bc:	65c3      	str	r3, [r0, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80058be:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80058c0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80058c4:	d103      	bne.n	80058ce <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80058c6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80058c8:	f043 0301 	orr.w	r3, r3, #1
 80058cc:	65c3      	str	r3, [r0, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 80058ce:	f7ff ffc1 	bl	8005854 <HAL_ADC_ConvCpltCallback>
}
 80058d2:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80058d4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80058d6:	f012 0f10 	tst.w	r2, #16
 80058da:	d104      	bne.n	80058e6 <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80058dc:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80058de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058e0:	4618      	mov	r0, r3
 80058e2:	4790      	blx	r2
}
 80058e4:	e7f5      	b.n	80058d2 <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 80058e6:	f7ff ffbc 	bl	8005862 <HAL_ADC_ErrorCallback>
 80058ea:	e7f2      	b.n	80058d2 <ADC_DMAConvCplt+0x6e>

080058ec <ADC_DMAError>:
=======
 8005732:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005734:	f7ff fffb 	bl	800572e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005738:	bd08      	pop	{r3, pc}

0800573a <HAL_ADC_ErrorCallback>:
}
 800573a:	4770      	bx	lr

0800573c <ADC_DMAConvCplt>:
{
 800573c:	b508      	push	{r3, lr}
 800573e:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005740:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005742:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005744:	f012 0f50 	tst.w	r2, #80	; 0x50
 8005748:	d130      	bne.n	80057ac <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800574a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800574c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005750:	65c3      	str	r3, [r0, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005752:	6803      	ldr	r3, [r0, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	f012 0f08 	tst.w	r2, #8
 800575a:	d014      	beq.n	8005786 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800575c:	68da      	ldr	r2, [r3, #12]
 800575e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8005762:	d120      	bne.n	80057a6 <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800576a:	d11c      	bne.n	80057a6 <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800576c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800576e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005772:	65c3      	str	r3, [r0, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005774:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005776:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800577a:	d114      	bne.n	80057a6 <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800577c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800577e:	f043 0301 	orr.w	r3, r3, #1
 8005782:	65c3      	str	r3, [r0, #92]	; 0x5c
 8005784:	e00f      	b.n	80057a6 <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f013 0f02 	tst.w	r3, #2
 800578c:	d10b      	bne.n	80057a6 <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800578e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005794:	65c3      	str	r3, [r0, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005796:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005798:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800579c:	d103      	bne.n	80057a6 <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800579e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80057a0:	f043 0301 	orr.w	r3, r3, #1
 80057a4:	65c3      	str	r3, [r0, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 80057a6:	f7ff ffc1 	bl	800572c <HAL_ADC_ConvCpltCallback>
}
 80057aa:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80057ac:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80057ae:	f012 0f10 	tst.w	r2, #16
 80057b2:	d104      	bne.n	80057be <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80057b4:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80057b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057b8:	4618      	mov	r0, r3
 80057ba:	4790      	blx	r2
}
 80057bc:	e7f5      	b.n	80057aa <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 80057be:	f7ff ffbc 	bl	800573a <HAL_ADC_ErrorCallback>
 80057c2:	e7f2      	b.n	80057aa <ADC_DMAConvCplt+0x6e>

080057c4 <ADC_DMAError>:
>>>>>>> render
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80058ec:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ee:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80058f0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80058f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058f6:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80058f8:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80058fa:	f043 0304 	orr.w	r3, r3, #4
 80058fe:	6603      	str	r3, [r0, #96]	; 0x60
=======
 80057c4:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057c6:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80057c8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80057ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057ce:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80057d0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80057d2:	f043 0304 	orr.w	r3, r3, #4
 80057d6:	6603      	str	r3, [r0, #96]	; 0x60
>>>>>>> render

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
<<<<<<< HEAD
 8005900:	f7ff ffaf 	bl	8005862 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005904:	bd08      	pop	{r3, pc}
	...

08005908 <HAL_ADC_ConfigChannel>:
{
 8005908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800590a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 800590c:	2200      	movs	r2, #0
 800590e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8005910:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8005914:	2a01      	cmp	r2, #1
 8005916:	f000 8284 	beq.w	8005e22 <HAL_ADC_ConfigChannel+0x51a>
 800591a:	4603      	mov	r3, r0
 800591c:	2201      	movs	r2, #1
 800591e:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005922:	6805      	ldr	r5, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005924:	68a8      	ldr	r0, [r5, #8]
 8005926:	f010 0f04 	tst.w	r0, #4
 800592a:	d009      	beq.n	8005940 <HAL_ADC_ConfigChannel+0x38>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800592c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800592e:	f042 0220 	orr.w	r2, r2, #32
 8005932:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8005934:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 800593c:	b003      	add	sp, #12
 800593e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005940:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005942:	3530      	adds	r5, #48	; 0x30
 8005944:	0a22      	lsrs	r2, r4, #8
 8005946:	0092      	lsls	r2, r2, #2
 8005948:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 800594c:	58a8      	ldr	r0, [r5, r2]
 800594e:	f004 0e1f 	and.w	lr, r4, #31
 8005952:	241f      	movs	r4, #31
 8005954:	fa04 f40e 	lsl.w	r4, r4, lr
 8005958:	ea20 0004 	bic.w	r0, r0, r4
 800595c:	680c      	ldr	r4, [r1, #0]
 800595e:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8005962:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005966:	ea40 000c 	orr.w	r0, r0, ip
 800596a:	50a8      	str	r0, [r5, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800596c:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800596e:	6882      	ldr	r2, [r0, #8]
 8005970:	f012 0204 	ands.w	r2, r2, #4
 8005974:	d000      	beq.n	8005978 <HAL_ADC_ConfigChannel+0x70>
 8005976:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005978:	6884      	ldr	r4, [r0, #8]
 800597a:	f014 0408 	ands.w	r4, r4, #8
 800597e:	d000      	beq.n	8005982 <HAL_ADC_ConfigChannel+0x7a>
 8005980:	2401      	movs	r4, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005982:	2a00      	cmp	r2, #0
 8005984:	d150      	bne.n	8005a28 <HAL_ADC_ConfigChannel+0x120>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005986:	2c00      	cmp	r4, #0
 8005988:	d14e      	bne.n	8005a28 <HAL_ADC_ConfigChannel+0x120>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800598a:	688f      	ldr	r7, [r1, #8]
 800598c:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 8005990:	f000 8086 	beq.w	8005aa0 <HAL_ADC_ConfigChannel+0x198>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005994:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005996:	3014      	adds	r0, #20
 8005998:	0e72      	lsrs	r2, r6, #25
 800599a:	0092      	lsls	r2, r2, #2
 800599c:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 80059a0:	5885      	ldr	r5, [r0, r2]
 80059a2:	f3c6 5e04 	ubfx	lr, r6, #20, #5
 80059a6:	f04f 0c07 	mov.w	ip, #7
 80059aa:	fa0c fc0e 	lsl.w	ip, ip, lr
 80059ae:	ea25 0c0c 	bic.w	ip, r5, ip
 80059b2:	fa07 f50e 	lsl.w	r5, r7, lr
 80059b6:	ea4c 0505 	orr.w	r5, ip, r5
 80059ba:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80059bc:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80059be:	6942      	ldr	r2, [r0, #20]
 80059c0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80059c4:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80059c6:	694d      	ldr	r5, [r1, #20]
 80059c8:	6818      	ldr	r0, [r3, #0]
 80059ca:	68c2      	ldr	r2, [r0, #12]
 80059cc:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80059d0:	0052      	lsls	r2, r2, #1
 80059d2:	fa05 f202 	lsl.w	r2, r5, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80059d6:	690e      	ldr	r6, [r1, #16]
 80059d8:	2e04      	cmp	r6, #4
 80059da:	d079      	beq.n	8005ad0 <HAL_ADC_ConfigChannel+0x1c8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059dc:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 80059de:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 80059e2:	4dae      	ldr	r5, [pc, #696]	; (8005c9c <HAL_ADC_ConfigChannel+0x394>)
 80059e4:	403d      	ands	r5, r7
 80059e6:	680f      	ldr	r7, [r1, #0]
 80059e8:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 80059ec:	433a      	orrs	r2, r7
 80059ee:	4315      	orrs	r5, r2
 80059f0:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80059f4:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	690e      	ldr	r6, [r1, #16]
 80059fc:	6988      	ldr	r0, [r1, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059fe:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 8005a00:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
 8005a04:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 8005a08:	4328      	orrs	r0, r5
 8005a0a:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	690d      	ldr	r5, [r1, #16]
 8005a12:	7f08      	ldrb	r0, [r1, #28]
 8005a14:	2801      	cmp	r0, #1
 8005a16:	d058      	beq.n	8005aca <HAL_ADC_ConfigChannel+0x1c2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a18:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 8005a1a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8005a1e:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 8005a22:	4304      	orrs	r4, r0
 8005a24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a28:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a2a:	6890      	ldr	r0, [r2, #8]
 8005a2c:	f010 0f01 	tst.w	r0, #1
 8005a30:	d112      	bne.n	8005a58 <HAL_ADC_ConfigChannel+0x150>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005a32:	6808      	ldr	r0, [r1, #0]
 8005a34:	68cd      	ldr	r5, [r1, #12]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8005a36:	4c9a      	ldr	r4, [pc, #616]	; (8005ca0 <HAL_ADC_ConfigChannel+0x398>)
 8005a38:	42a5      	cmp	r5, r4
 8005a3a:	f000 80b1 	beq.w	8005ba0 <HAL_ADC_ConfigChannel+0x298>
    CLEAR_BIT(ADCx->DIFSEL,
 8005a3e:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8005a42:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8005a46:	ea24 0000 	bic.w	r0, r4, r0
 8005a4a:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005a4e:	68c8      	ldr	r0, [r1, #12]
 8005a50:	4a93      	ldr	r2, [pc, #588]	; (8005ca0 <HAL_ADC_ConfigChannel+0x398>)
 8005a52:	4290      	cmp	r0, r2
 8005a54:	f000 80ac 	beq.w	8005bb0 <HAL_ADC_ConfigChannel+0x2a8>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005a58:	680a      	ldr	r2, [r1, #0]
 8005a5a:	4992      	ldr	r1, [pc, #584]	; (8005ca4 <HAL_ADC_ConfigChannel+0x39c>)
 8005a5c:	420a      	tst	r2, r1
 8005a5e:	f000 81da 	beq.w	8005e16 <HAL_ADC_ConfigChannel+0x50e>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a62:	6819      	ldr	r1, [r3, #0]
 8005a64:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8005a68:	f000 8173 	beq.w	8005d52 <HAL_ADC_ConfigChannel+0x44a>
 8005a6c:	488e      	ldr	r0, [pc, #568]	; (8005ca8 <HAL_ADC_ConfigChannel+0x3a0>)
 8005a6e:	4281      	cmp	r1, r0
 8005a70:	f000 816c 	beq.w	8005d4c <HAL_ADC_ConfigChannel+0x444>
 8005a74:	488d      	ldr	r0, [pc, #564]	; (8005cac <HAL_ADC_ConfigChannel+0x3a4>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005a76:	6880      	ldr	r0, [r0, #8]
 8005a78:	f000 74e0 	and.w	r4, r0, #29360128	; 0x1c00000
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005a7c:	4d8c      	ldr	r5, [pc, #560]	; (8005cb0 <HAL_ADC_ConfigChannel+0x3a8>)
 8005a7e:	42aa      	cmp	r2, r5
 8005a80:	f000 8169 	beq.w	8005d56 <HAL_ADC_ConfigChannel+0x44e>
 8005a84:	4d8b      	ldr	r5, [pc, #556]	; (8005cb4 <HAL_ADC_ConfigChannel+0x3ac>)
 8005a86:	42aa      	cmp	r2, r5
 8005a88:	f000 8165 	beq.w	8005d56 <HAL_ADC_ConfigChannel+0x44e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005a8c:	4d8a      	ldr	r5, [pc, #552]	; (8005cb8 <HAL_ADC_ConfigChannel+0x3b0>)
 8005a8e:	42aa      	cmp	r2, r5
 8005a90:	f000 8194 	beq.w	8005dbc <HAL_ADC_ConfigChannel+0x4b4>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005a94:	4d89      	ldr	r5, [pc, #548]	; (8005cbc <HAL_ADC_ConfigChannel+0x3b4>)
 8005a96:	42aa      	cmp	r2, r5
 8005a98:	f000 81a8 	beq.w	8005dec <HAL_ADC_ConfigChannel+0x4e4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	e74a      	b.n	8005936 <HAL_ADC_ConfigChannel+0x2e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005aa0:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005aa2:	3014      	adds	r0, #20
 8005aa4:	0e6a      	lsrs	r2, r5, #25
 8005aa6:	0092      	lsls	r2, r2, #2
 8005aa8:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8005aac:	5886      	ldr	r6, [r0, r2]
 8005aae:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8005ab2:	2707      	movs	r7, #7
 8005ab4:	fa07 f505 	lsl.w	r5, r7, r5
 8005ab8:	ea26 0505 	bic.w	r5, r6, r5
 8005abc:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005abe:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005ac0:	6942      	ldr	r2, [r0, #20]
 8005ac2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005ac6:	6142      	str	r2, [r0, #20]
}
 8005ac8:	e77d      	b.n	80059c6 <HAL_ADC_ConfigChannel+0xbe>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005aca:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8005ace:	e7a3      	b.n	8005a18 <HAL_ADC_ConfigChannel+0x110>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005ad0:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8005ad2:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005ad4:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005ad8:	680a      	ldr	r2, [r1, #0]
 8005ada:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8005ade:	bb85      	cbnz	r5, 8005b42 <HAL_ADC_ConfigChannel+0x23a>
 8005ae0:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005ae4:	4294      	cmp	r4, r2
 8005ae6:	d034      	beq.n	8005b52 <HAL_ADC_ConfigChannel+0x24a>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005ae8:	681c      	ldr	r4, [r3, #0]
 8005aea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005aec:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8005aee:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005af2:	680a      	ldr	r2, [r1, #0]
 8005af4:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8005af8:	bb85      	cbnz	r5, 8005b5c <HAL_ADC_ConfigChannel+0x254>
 8005afa:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005afe:	4290      	cmp	r0, r2
 8005b00:	d034      	beq.n	8005b6c <HAL_ADC_ConfigChannel+0x264>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005b02:	681c      	ldr	r4, [r3, #0]
 8005b04:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8005b06:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005b08:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005b0c:	680a      	ldr	r2, [r1, #0]
 8005b0e:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8005b12:	bb85      	cbnz	r5, 8005b76 <HAL_ADC_ConfigChannel+0x26e>
 8005b14:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005b18:	4290      	cmp	r0, r2
 8005b1a:	d034      	beq.n	8005b86 <HAL_ADC_ConfigChannel+0x27e>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005b1c:	681c      	ldr	r4, [r3, #0]
 8005b1e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005b20:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005b22:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005b26:	680a      	ldr	r2, [r1, #0]
 8005b28:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8005b2c:	bb85      	cbnz	r5, 8005b90 <HAL_ADC_ConfigChannel+0x288>
 8005b2e:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005b32:	4290      	cmp	r0, r2
 8005b34:	f47f af78 	bne.w	8005a28 <HAL_ADC_ConfigChannel+0x120>
  MODIFY_REG(*preg,
 8005b38:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005b3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005b3e:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 8005b40:	e772      	b.n	8005a28 <HAL_ADC_ConfigChannel+0x120>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b42:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005b46:	b112      	cbz	r2, 8005b4e <HAL_ADC_ConfigChannel+0x246>
  return __builtin_clz(value);
 8005b48:	fab2 f282 	clz	r2, r2
 8005b4c:	e7ca      	b.n	8005ae4 <HAL_ADC_ConfigChannel+0x1dc>
    return 32U;
 8005b4e:	2220      	movs	r2, #32
 8005b50:	e7c8      	b.n	8005ae4 <HAL_ADC_ConfigChannel+0x1dc>
  MODIFY_REG(*preg,
 8005b52:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8005b54:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005b58:	6602      	str	r2, [r0, #96]	; 0x60
}
 8005b5a:	e7c5      	b.n	8005ae8 <HAL_ADC_ConfigChannel+0x1e0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b5c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005b60:	b112      	cbz	r2, 8005b68 <HAL_ADC_ConfigChannel+0x260>
  return __builtin_clz(value);
 8005b62:	fab2 f282 	clz	r2, r2
 8005b66:	e7ca      	b.n	8005afe <HAL_ADC_ConfigChannel+0x1f6>
    return 32U;
 8005b68:	2220      	movs	r2, #32
 8005b6a:	e7c8      	b.n	8005afe <HAL_ADC_ConfigChannel+0x1f6>
  MODIFY_REG(*preg,
 8005b6c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005b72:	6662      	str	r2, [r4, #100]	; 0x64
}
 8005b74:	e7c5      	b.n	8005b02 <HAL_ADC_ConfigChannel+0x1fa>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b76:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005b7a:	b112      	cbz	r2, 8005b82 <HAL_ADC_ConfigChannel+0x27a>
  return __builtin_clz(value);
 8005b7c:	fab2 f282 	clz	r2, r2
 8005b80:	e7ca      	b.n	8005b18 <HAL_ADC_ConfigChannel+0x210>
    return 32U;
 8005b82:	2220      	movs	r2, #32
 8005b84:	e7c8      	b.n	8005b18 <HAL_ADC_ConfigChannel+0x210>
  MODIFY_REG(*preg,
 8005b86:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8005b88:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005b8c:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8005b8e:	e7c5      	b.n	8005b1c <HAL_ADC_ConfigChannel+0x214>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b90:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005b94:	b112      	cbz	r2, 8005b9c <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 8005b96:	fab2 f282 	clz	r2, r2
 8005b9a:	e7ca      	b.n	8005b32 <HAL_ADC_ConfigChannel+0x22a>
    return 32U;
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	e7c8      	b.n	8005b32 <HAL_ADC_ConfigChannel+0x22a>
    SET_BIT(ADCx->DIFSEL,
 8005ba0:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8005ba4:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8005ba8:	4320      	orrs	r0, r4
 8005baa:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
 8005bae:	e74e      	b.n	8005a4e <HAL_ADC_ConfigChannel+0x146>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005bb0:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005bb2:	680a      	ldr	r2, [r1, #0]
 8005bb4:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8005bb8:	2d00      	cmp	r5, #0
 8005bba:	d138      	bne.n	8005c2e <HAL_ADC_ConfigChannel+0x326>
 8005bbc:	0e90      	lsrs	r0, r2, #26
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	f000 001f 	and.w	r0, r0, #31
 8005bc4:	2809      	cmp	r0, #9
 8005bc6:	bf8c      	ite	hi
 8005bc8:	2000      	movhi	r0, #0
 8005bca:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	d077      	beq.n	8005cc0 <HAL_ADC_ConfigChannel+0x3b8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005bd0:	2d00      	cmp	r5, #0
 8005bd2:	d13b      	bne.n	8005c4c <HAL_ADC_ConfigChannel+0x344>
 8005bd4:	0e90      	lsrs	r0, r2, #26
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	0680      	lsls	r0, r0, #26
 8005bda:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005bde:	2d00      	cmp	r5, #0
 8005be0:	d140      	bne.n	8005c64 <HAL_ADC_ConfigChannel+0x35c>
 8005be2:	0e96      	lsrs	r6, r2, #26
 8005be4:	3601      	adds	r6, #1
 8005be6:	f006 071f 	and.w	r7, r6, #31
 8005bea:	2601      	movs	r6, #1
 8005bec:	40be      	lsls	r6, r7
 8005bee:	4330      	orrs	r0, r6
 8005bf0:	2d00      	cmp	r5, #0
 8005bf2:	d145      	bne.n	8005c80 <HAL_ADC_ConfigChannel+0x378>
 8005bf4:	0e92      	lsrs	r2, r2, #26
 8005bf6:	3201      	adds	r2, #1
 8005bf8:	f002 021f 	and.w	r2, r2, #31
 8005bfc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005c00:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c02:	4302      	orrs	r2, r0
 8005c04:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005c06:	f104 0614 	add.w	r6, r4, #20
 8005c0a:	0e55      	lsrs	r5, r2, #25
 8005c0c:	00ad      	lsls	r5, r5, #2
 8005c0e:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8005c12:	5974      	ldr	r4, [r6, r5]
 8005c14:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8005c18:	f04f 0c07 	mov.w	ip, #7
 8005c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8005c20:	ea24 0c0c 	bic.w	ip, r4, ip
 8005c24:	4090      	lsls	r0, r2
 8005c26:	ea4c 0000 	orr.w	r0, ip, r0
 8005c2a:	5170      	str	r0, [r6, r5]
}
 8005c2c:	e714      	b.n	8005a58 <HAL_ADC_ConfigChannel+0x150>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c2e:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8005c32:	b148      	cbz	r0, 8005c48 <HAL_ADC_ConfigChannel+0x340>
  return __builtin_clz(value);
 8005c34:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005c38:	3001      	adds	r0, #1
 8005c3a:	f000 001f 	and.w	r0, r0, #31
 8005c3e:	2809      	cmp	r0, #9
 8005c40:	bf8c      	ite	hi
 8005c42:	2000      	movhi	r0, #0
 8005c44:	2001      	movls	r0, #1
 8005c46:	e7c1      	b.n	8005bcc <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 8005c48:	2020      	movs	r0, #32
 8005c4a:	e7f5      	b.n	8005c38 <HAL_ADC_ConfigChannel+0x330>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c4c:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8005c50:	b130      	cbz	r0, 8005c60 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8005c52:	fab0 f080 	clz	r0, r0
 8005c56:	3001      	adds	r0, #1
 8005c58:	0680      	lsls	r0, r0, #26
 8005c5a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005c5e:	e7be      	b.n	8005bde <HAL_ADC_ConfigChannel+0x2d6>
    return 32U;
 8005c60:	2020      	movs	r0, #32
 8005c62:	e7f8      	b.n	8005c56 <HAL_ADC_ConfigChannel+0x34e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c64:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8005c68:	b146      	cbz	r6, 8005c7c <HAL_ADC_ConfigChannel+0x374>
  return __builtin_clz(value);
 8005c6a:	fab6 f686 	clz	r6, r6
 8005c6e:	3601      	adds	r6, #1
 8005c70:	f006 061f 	and.w	r6, r6, #31
 8005c74:	2701      	movs	r7, #1
 8005c76:	fa07 f606 	lsl.w	r6, r7, r6
 8005c7a:	e7b8      	b.n	8005bee <HAL_ADC_ConfigChannel+0x2e6>
    return 32U;
 8005c7c:	2620      	movs	r6, #32
 8005c7e:	e7f6      	b.n	8005c6e <HAL_ADC_ConfigChannel+0x366>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c80:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005c84:	b142      	cbz	r2, 8005c98 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8005c86:	fab2 f282 	clz	r2, r2
 8005c8a:	3201      	adds	r2, #1
 8005c8c:	f002 021f 	and.w	r2, r2, #31
 8005c90:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005c94:	0512      	lsls	r2, r2, #20
 8005c96:	e7b4      	b.n	8005c02 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8005c98:	2220      	movs	r2, #32
 8005c9a:	e7f6      	b.n	8005c8a <HAL_ADC_ConfigChannel+0x382>
 8005c9c:	03fff000 	.word	0x03fff000
 8005ca0:	407f0000 	.word	0x407f0000
 8005ca4:	80080000 	.word	0x80080000
 8005ca8:	50000100 	.word	0x50000100
 8005cac:	50000700 	.word	0x50000700
 8005cb0:	c3210000 	.word	0xc3210000
 8005cb4:	90c00010 	.word	0x90c00010
 8005cb8:	c7520000 	.word	0xc7520000
 8005cbc:	cb840000 	.word	0xcb840000
 8005cc0:	b9cd      	cbnz	r5, 8005cf6 <HAL_ADC_ConfigChannel+0x3ee>
 8005cc2:	0e90      	lsrs	r0, r2, #26
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	0680      	lsls	r0, r0, #26
 8005cc8:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005ccc:	b9fd      	cbnz	r5, 8005d0e <HAL_ADC_ConfigChannel+0x406>
 8005cce:	0e96      	lsrs	r6, r2, #26
 8005cd0:	3601      	adds	r6, #1
 8005cd2:	f006 071f 	and.w	r7, r6, #31
 8005cd6:	2601      	movs	r6, #1
 8005cd8:	40be      	lsls	r6, r7
 8005cda:	4330      	orrs	r0, r6
 8005cdc:	bb2d      	cbnz	r5, 8005d2a <HAL_ADC_ConfigChannel+0x422>
 8005cde:	0e92      	lsrs	r2, r2, #26
 8005ce0:	3201      	adds	r2, #1
 8005ce2:	f002 021f 	and.w	r2, r2, #31
 8005ce6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005cea:	3a1e      	subs	r2, #30
 8005cec:	0512      	lsls	r2, r2, #20
 8005cee:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005cf2:	4302      	orrs	r2, r0
 8005cf4:	e786      	b.n	8005c04 <HAL_ADC_ConfigChannel+0x2fc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf6:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8005cfa:	b130      	cbz	r0, 8005d0a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8005cfc:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d00:	3001      	adds	r0, #1
 8005d02:	0680      	lsls	r0, r0, #26
 8005d04:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005d08:	e7e0      	b.n	8005ccc <HAL_ADC_ConfigChannel+0x3c4>
    return 32U;
 8005d0a:	2020      	movs	r0, #32
 8005d0c:	e7f8      	b.n	8005d00 <HAL_ADC_ConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d0e:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8005d12:	b146      	cbz	r6, 8005d26 <HAL_ADC_ConfigChannel+0x41e>
  return __builtin_clz(value);
 8005d14:	fab6 f686 	clz	r6, r6
 8005d18:	3601      	adds	r6, #1
 8005d1a:	f006 061f 	and.w	r6, r6, #31
 8005d1e:	2701      	movs	r7, #1
 8005d20:	fa07 f606 	lsl.w	r6, r7, r6
 8005d24:	e7d9      	b.n	8005cda <HAL_ADC_ConfigChannel+0x3d2>
    return 32U;
 8005d26:	2620      	movs	r6, #32
 8005d28:	e7f6      	b.n	8005d18 <HAL_ADC_ConfigChannel+0x410>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d2a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005d2e:	b15a      	cbz	r2, 8005d48 <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 8005d30:	fab2 f282 	clz	r2, r2
 8005d34:	3201      	adds	r2, #1
 8005d36:	f002 021f 	and.w	r2, r2, #31
 8005d3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005d3e:	3a1e      	subs	r2, #30
 8005d40:	0512      	lsls	r2, r2, #20
 8005d42:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005d46:	e7d4      	b.n	8005cf2 <HAL_ADC_ConfigChannel+0x3ea>
    return 32U;
 8005d48:	2220      	movs	r2, #32
 8005d4a:	e7f3      	b.n	8005d34 <HAL_ADC_ConfigChannel+0x42c>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d4c:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8005d50:	e691      	b.n	8005a76 <HAL_ADC_ConfigChannel+0x16e>
 8005d52:	4835      	ldr	r0, [pc, #212]	; (8005e28 <HAL_ADC_ConfigChannel+0x520>)
 8005d54:	e68f      	b.n	8005a76 <HAL_ADC_ConfigChannel+0x16e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005d56:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8005d5a:	f47f ae97 	bne.w	8005a8c <HAL_ADC_ConfigChannel+0x184>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d5e:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8005d62:	d004      	beq.n	8005d6e <HAL_ADC_ConfigChannel+0x466>
 8005d64:	4a31      	ldr	r2, [pc, #196]	; (8005e2c <HAL_ADC_ConfigChannel+0x524>)
 8005d66:	4291      	cmp	r1, r2
 8005d68:	d001      	beq.n	8005d6e <HAL_ADC_ConfigChannel+0x466>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d6a:	2000      	movs	r0, #0
 8005d6c:	e5e3      	b.n	8005936 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d6e:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8005d72:	d019      	beq.n	8005da8 <HAL_ADC_ConfigChannel+0x4a0>
 8005d74:	4a2e      	ldr	r2, [pc, #184]	; (8005e30 <HAL_ADC_ConfigChannel+0x528>)
 8005d76:	4291      	cmp	r1, r2
 8005d78:	d014      	beq.n	8005da4 <HAL_ADC_ConfigChannel+0x49c>
 8005d7a:	492e      	ldr	r1, [pc, #184]	; (8005e34 <HAL_ADC_ConfigChannel+0x52c>)
 8005d7c:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005d80:	688a      	ldr	r2, [r1, #8]
 8005d82:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005d86:	4314      	orrs	r4, r2
 8005d88:	608c      	str	r4, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005d8a:	4a2b      	ldr	r2, [pc, #172]	; (8005e38 <HAL_ADC_ConfigChannel+0x530>)
 8005d8c:	6812      	ldr	r2, [r2, #0]
 8005d8e:	0992      	lsrs	r2, r2, #6
 8005d90:	492a      	ldr	r1, [pc, #168]	; (8005e3c <HAL_ADC_ConfigChannel+0x534>)
 8005d92:	fba1 1202 	umull	r1, r2, r1, r2
 8005d96:	0992      	lsrs	r2, r2, #6
 8005d98:	3201      	adds	r2, #1
 8005d9a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005d9e:	0092      	lsls	r2, r2, #2
 8005da0:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005da2:	e006      	b.n	8005db2 <HAL_ADC_ConfigChannel+0x4aa>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005da4:	4920      	ldr	r1, [pc, #128]	; (8005e28 <HAL_ADC_ConfigChannel+0x520>)
 8005da6:	e7e9      	b.n	8005d7c <HAL_ADC_ConfigChannel+0x474>
 8005da8:	491f      	ldr	r1, [pc, #124]	; (8005e28 <HAL_ADC_ConfigChannel+0x520>)
 8005daa:	e7e7      	b.n	8005d7c <HAL_ADC_ConfigChannel+0x474>
            wait_loop_index--;
 8005dac:	9a01      	ldr	r2, [sp, #4]
 8005dae:	3a01      	subs	r2, #1
 8005db0:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005db2:	9a01      	ldr	r2, [sp, #4]
 8005db4:	2a00      	cmp	r2, #0
 8005db6:	d1f9      	bne.n	8005dac <HAL_ADC_ConfigChannel+0x4a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005db8:	2000      	movs	r0, #0
 8005dba:	e5bc      	b.n	8005936 <HAL_ADC_ConfigChannel+0x2e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005dbc:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8005dc0:	f47f ae68 	bne.w	8005a94 <HAL_ADC_ConfigChannel+0x18c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005dc4:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8005dc8:	d00e      	beq.n	8005de8 <HAL_ADC_ConfigChannel+0x4e0>
 8005dca:	4a19      	ldr	r2, [pc, #100]	; (8005e30 <HAL_ADC_ConfigChannel+0x528>)
 8005dcc:	4291      	cmp	r1, r2
 8005dce:	d009      	beq.n	8005de4 <HAL_ADC_ConfigChannel+0x4dc>
 8005dd0:	4918      	ldr	r1, [pc, #96]	; (8005e34 <HAL_ADC_ConfigChannel+0x52c>)
 8005dd2:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 8005dd6:	688a      	ldr	r2, [r1, #8]
 8005dd8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005ddc:	4314      	orrs	r4, r2
 8005dde:	608c      	str	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005de0:	2000      	movs	r0, #0
}
 8005de2:	e5a8      	b.n	8005936 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005de4:	4910      	ldr	r1, [pc, #64]	; (8005e28 <HAL_ADC_ConfigChannel+0x520>)
 8005de6:	e7f4      	b.n	8005dd2 <HAL_ADC_ConfigChannel+0x4ca>
 8005de8:	490f      	ldr	r1, [pc, #60]	; (8005e28 <HAL_ADC_ConfigChannel+0x520>)
 8005dea:	e7f2      	b.n	8005dd2 <HAL_ADC_ConfigChannel+0x4ca>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005dec:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8005df0:	d113      	bne.n	8005e1a <HAL_ADC_ConfigChannel+0x512>
        if (ADC_VREFINT_INSTANCE(hadc))
 8005df2:	4a0f      	ldr	r2, [pc, #60]	; (8005e30 <HAL_ADC_ConfigChannel+0x528>)
 8005df4:	4291      	cmp	r1, r2
 8005df6:	d012      	beq.n	8005e1e <HAL_ADC_ConfigChannel+0x516>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005df8:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8005dfc:	d009      	beq.n	8005e12 <HAL_ADC_ConfigChannel+0x50a>
 8005dfe:	480d      	ldr	r0, [pc, #52]	; (8005e34 <HAL_ADC_ConfigChannel+0x52c>)
 8005e00:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005e04:	6881      	ldr	r1, [r0, #8]
 8005e06:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e0e:	2000      	movs	r0, #0
}
 8005e10:	e591      	b.n	8005936 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e12:	4805      	ldr	r0, [pc, #20]	; (8005e28 <HAL_ADC_ConfigChannel+0x520>)
 8005e14:	e7f4      	b.n	8005e00 <HAL_ADC_ConfigChannel+0x4f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e16:	2000      	movs	r0, #0
 8005e18:	e58d      	b.n	8005936 <HAL_ADC_ConfigChannel+0x2e>
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	e58b      	b.n	8005936 <HAL_ADC_ConfigChannel+0x2e>
 8005e1e:	2000      	movs	r0, #0
 8005e20:	e589      	b.n	8005936 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8005e22:	2002      	movs	r0, #2
 8005e24:	e58a      	b.n	800593c <HAL_ADC_ConfigChannel+0x34>
 8005e26:	bf00      	nop
 8005e28:	50000300 	.word	0x50000300
 8005e2c:	50000600 	.word	0x50000600
 8005e30:	50000100 	.word	0x50000100
 8005e34:	50000700 	.word	0x50000700
 8005e38:	20000058 	.word	0x20000058
 8005e3c:	053e2d63 	.word	0x053e2d63

08005e40 <ADC_Enable>:
{
 8005e40:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e42:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e44:	689a      	ldr	r2, [r3, #8]
 8005e46:	f012 0f01 	tst.w	r2, #1
 8005e4a:	d140      	bne.n	8005ece <ADC_Enable+0x8e>
 8005e4c:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005e4e:	6899      	ldr	r1, [r3, #8]
 8005e50:	4a20      	ldr	r2, [pc, #128]	; (8005ed4 <ADC_Enable+0x94>)
 8005e52:	4211      	tst	r1, r2
 8005e54:	d009      	beq.n	8005e6a <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e56:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005e58:	f043 0310 	orr.w	r3, r3, #16
 8005e5c:	65c3      	str	r3, [r0, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e5e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005e60:	f043 0301 	orr.w	r3, r3, #1
 8005e64:	6603      	str	r3, [r0, #96]	; 0x60
      return HAL_ERROR;
 8005e66:	2001      	movs	r0, #1
 8005e68:	e032      	b.n	8005ed0 <ADC_Enable+0x90>
  MODIFY_REG(ADCx->CR,
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005e70:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005e74:	f042 0201 	orr.w	r2, r2, #1
 8005e78:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8005e7a:	f7ff fb7d 	bl	8005578 <HAL_GetTick>
 8005e7e:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	f012 0f01 	tst.w	r2, #1
 8005e88:	d11f      	bne.n	8005eca <ADC_Enable+0x8a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e8a:	689a      	ldr	r2, [r3, #8]
 8005e8c:	f012 0f01 	tst.w	r2, #1
 8005e90:	d107      	bne.n	8005ea2 <ADC_Enable+0x62>
  MODIFY_REG(ADCx->CR,
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005e98:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005e9c:	f042 0201 	orr.w	r2, r2, #1
 8005ea0:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005ea2:	f7ff fb69 	bl	8005578 <HAL_GetTick>
 8005ea6:	1b43      	subs	r3, r0, r5
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d9e9      	bls.n	8005e80 <ADC_Enable+0x40>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005eac:	6823      	ldr	r3, [r4, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f013 0f01 	tst.w	r3, #1
 8005eb4:	d1e4      	bne.n	8005e80 <ADC_Enable+0x40>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005eb6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005eb8:	f043 0310 	orr.w	r3, r3, #16
 8005ebc:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ebe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005ec0:	f043 0301 	orr.w	r3, r3, #1
 8005ec4:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 8005ec6:	2001      	movs	r0, #1
 8005ec8:	e002      	b.n	8005ed0 <ADC_Enable+0x90>
  return HAL_OK;
 8005eca:	2000      	movs	r0, #0
 8005ecc:	e000      	b.n	8005ed0 <ADC_Enable+0x90>
 8005ece:	2000      	movs	r0, #0
}
 8005ed0:	bd38      	pop	{r3, r4, r5, pc}
 8005ed2:	bf00      	nop
 8005ed4:	8000003f 	.word	0x8000003f

08005ed8 <HAL_ADC_Start_DMA>:
{
 8005ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005edc:	4604      	mov	r4, r0
 8005ede:	460f      	mov	r7, r1
 8005ee0:	4690      	mov	r8, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ee2:	6800      	ldr	r0, [r0, #0]
 8005ee4:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8005ee8:	d021      	beq.n	8005f2e <HAL_ADC_Start_DMA+0x56>
 8005eea:	4b42      	ldr	r3, [pc, #264]	; (8005ff4 <HAL_ADC_Start_DMA+0x11c>)
 8005eec:	4298      	cmp	r0, r3
 8005eee:	d01b      	beq.n	8005f28 <HAL_ADC_Start_DMA+0x50>
 8005ef0:	4b41      	ldr	r3, [pc, #260]	; (8005ff8 <HAL_ADC_Start_DMA+0x120>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005ef2:	689e      	ldr	r6, [r3, #8]
 8005ef4:	f006 061f 	and.w	r6, r6, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005ef8:	6885      	ldr	r5, [r0, #8]
 8005efa:	f015 0f04 	tst.w	r5, #4
 8005efe:	d174      	bne.n	8005fea <HAL_ADC_Start_DMA+0x112>
    __HAL_LOCK(hadc);
 8005f00:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d073      	beq.n	8005ff0 <HAL_ADC_Start_DMA+0x118>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005f0e:	4b3b      	ldr	r3, [pc, #236]	; (8005ffc <HAL_ADC_Start_DMA+0x124>)
 8005f10:	4298      	cmp	r0, r3
 8005f12:	d00e      	beq.n	8005f32 <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005f14:	b16e      	cbz	r6, 8005f32 <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005f16:	2e05      	cmp	r6, #5
 8005f18:	d00b      	beq.n	8005f32 <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005f1a:	2e09      	cmp	r6, #9
 8005f1c:	d009      	beq.n	8005f32 <HAL_ADC_Start_DMA+0x5a>
      __HAL_UNLOCK(hadc);
 8005f1e:	2300      	movs	r3, #0
 8005f20:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 8005f24:	2001      	movs	r0, #1
 8005f26:	e061      	b.n	8005fec <HAL_ADC_Start_DMA+0x114>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005f28:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005f2c:	e7e1      	b.n	8005ef2 <HAL_ADC_Start_DMA+0x1a>
 8005f2e:	4b34      	ldr	r3, [pc, #208]	; (8006000 <HAL_ADC_Start_DMA+0x128>)
 8005f30:	e7df      	b.n	8005ef2 <HAL_ADC_Start_DMA+0x1a>
      tmp_hal_status = ADC_Enable(hadc);
 8005f32:	4620      	mov	r0, r4
 8005f34:	f7ff ff84 	bl	8005e40 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	d152      	bne.n	8005fe2 <HAL_ADC_Start_DMA+0x10a>
        ADC_STATE_CLR_SET(hadc->State,
 8005f3c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005f3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005f42:	f023 0301 	bic.w	r3, r3, #1
 8005f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f4a:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005f4c:	6823      	ldr	r3, [r4, #0]
 8005f4e:	4a29      	ldr	r2, [pc, #164]	; (8005ff4 <HAL_ADC_Start_DMA+0x11c>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d040      	beq.n	8005fd6 <HAL_ADC_Start_DMA+0xfe>
 8005f54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d039      	beq.n	8005fd0 <HAL_ADC_Start_DMA+0xf8>
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d000      	beq.n	8005f64 <HAL_ADC_Start_DMA+0x8c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005f62:	b91e      	cbnz	r6, 8005f6c <HAL_ADC_Start_DMA+0x94>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005f64:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005f66:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005f6a:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005f6c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005f6e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005f72:	d033      	beq.n	8005fdc <HAL_ADC_Start_DMA+0x104>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005f74:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005f76:	f023 0306 	bic.w	r3, r3, #6
 8005f7a:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005f7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005f7e:	4a21      	ldr	r2, [pc, #132]	; (8006004 <HAL_ADC_Start_DMA+0x12c>)
 8005f80:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005f82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005f84:	4a20      	ldr	r2, [pc, #128]	; (8006008 <HAL_ADC_Start_DMA+0x130>)
 8005f86:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005f88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005f8a:	4a20      	ldr	r2, [pc, #128]	; (800600c <HAL_ADC_Start_DMA+0x134>)
 8005f8c:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	221c      	movs	r2, #28
 8005f92:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8005f94:	2300      	movs	r3, #0
 8005f96:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005f9a:	6822      	ldr	r2, [r4, #0]
 8005f9c:	6853      	ldr	r3, [r2, #4]
 8005f9e:	f043 0310 	orr.w	r3, r3, #16
 8005fa2:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005fa4:	6822      	ldr	r2, [r4, #0]
 8005fa6:	68d3      	ldr	r3, [r2, #12]
 8005fa8:	f043 0301 	orr.w	r3, r3, #1
 8005fac:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005fae:	6821      	ldr	r1, [r4, #0]
 8005fb0:	4643      	mov	r3, r8
 8005fb2:	463a      	mov	r2, r7
 8005fb4:	3140      	adds	r1, #64	; 0x40
 8005fb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005fb8:	f000 fc2a 	bl	8006810 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005fbc:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8005fbe:	6893      	ldr	r3, [r2, #8]
 8005fc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005fc8:	f043 0304 	orr.w	r3, r3, #4
 8005fcc:	6093      	str	r3, [r2, #8]
}
 8005fce:	e00d      	b.n	8005fec <HAL_ADC_Start_DMA+0x114>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005fd0:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005fd4:	e7c3      	b.n	8005f5e <HAL_ADC_Start_DMA+0x86>
 8005fd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005fda:	e7c0      	b.n	8005f5e <HAL_ADC_Start_DMA+0x86>
          ADC_CLEAR_ERRORCODE(hadc);
 8005fdc:	2300      	movs	r3, #0
 8005fde:	6623      	str	r3, [r4, #96]	; 0x60
 8005fe0:	e7cc      	b.n	8005f7c <HAL_ADC_Start_DMA+0xa4>
        __HAL_UNLOCK(hadc);
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8005fe8:	e000      	b.n	8005fec <HAL_ADC_Start_DMA+0x114>
    tmp_hal_status = HAL_BUSY;
 8005fea:	2002      	movs	r0, #2
}
 8005fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 8005ff0:	2002      	movs	r0, #2
 8005ff2:	e7fb      	b.n	8005fec <HAL_ADC_Start_DMA+0x114>
 8005ff4:	50000100 	.word	0x50000100
 8005ff8:	50000700 	.word	0x50000700
 8005ffc:	50000600 	.word	0x50000600
 8006000:	50000300 	.word	0x50000300
 8006004:	08005865 	.word	0x08005865
 8006008:	08005859 	.word	0x08005859
 800600c:	080058ed 	.word	0x080058ed

08006010 <HAL_ADCEx_MultiModeConfigChannel>:
=======
 80057d8:	f7ff ffaf 	bl	800573a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80057dc:	bd08      	pop	{r3, pc}
	...

080057e0 <HAL_ADC_ConfigChannel>:
{
 80057e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057e2:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80057e4:	2200      	movs	r2, #0
 80057e6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80057e8:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 80057ec:	2a01      	cmp	r2, #1
 80057ee:	f000 8284 	beq.w	8005cfa <HAL_ADC_ConfigChannel+0x51a>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2201      	movs	r2, #1
 80057f6:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80057fa:	6805      	ldr	r5, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80057fc:	68a8      	ldr	r0, [r5, #8]
 80057fe:	f010 0f04 	tst.w	r0, #4
 8005802:	d009      	beq.n	8005818 <HAL_ADC_ConfigChannel+0x38>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005804:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005806:	f042 0220 	orr.w	r2, r2, #32
 800580a:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 800580c:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8005814:	b003      	add	sp, #12
 8005816:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005818:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800581a:	3530      	adds	r5, #48	; 0x30
 800581c:	0a22      	lsrs	r2, r4, #8
 800581e:	0092      	lsls	r2, r2, #2
 8005820:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8005824:	58a8      	ldr	r0, [r5, r2]
 8005826:	f004 0e1f 	and.w	lr, r4, #31
 800582a:	241f      	movs	r4, #31
 800582c:	fa04 f40e 	lsl.w	r4, r4, lr
 8005830:	ea20 0004 	bic.w	r0, r0, r4
 8005834:	680c      	ldr	r4, [r1, #0]
 8005836:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 800583a:	fa0c fc0e 	lsl.w	ip, ip, lr
 800583e:	ea40 000c 	orr.w	r0, r0, ip
 8005842:	50a8      	str	r0, [r5, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005844:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005846:	6882      	ldr	r2, [r0, #8]
 8005848:	f012 0204 	ands.w	r2, r2, #4
 800584c:	d000      	beq.n	8005850 <HAL_ADC_ConfigChannel+0x70>
 800584e:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005850:	6884      	ldr	r4, [r0, #8]
 8005852:	f014 0408 	ands.w	r4, r4, #8
 8005856:	d000      	beq.n	800585a <HAL_ADC_ConfigChannel+0x7a>
 8005858:	2401      	movs	r4, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800585a:	2a00      	cmp	r2, #0
 800585c:	d150      	bne.n	8005900 <HAL_ADC_ConfigChannel+0x120>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800585e:	2c00      	cmp	r4, #0
 8005860:	d14e      	bne.n	8005900 <HAL_ADC_ConfigChannel+0x120>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005862:	688f      	ldr	r7, [r1, #8]
 8005864:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 8005868:	f000 8086 	beq.w	8005978 <HAL_ADC_ConfigChannel+0x198>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800586c:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800586e:	3014      	adds	r0, #20
 8005870:	0e72      	lsrs	r2, r6, #25
 8005872:	0092      	lsls	r2, r2, #2
 8005874:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8005878:	5885      	ldr	r5, [r0, r2]
 800587a:	f3c6 5e04 	ubfx	lr, r6, #20, #5
 800587e:	f04f 0c07 	mov.w	ip, #7
 8005882:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005886:	ea25 0c0c 	bic.w	ip, r5, ip
 800588a:	fa07 f50e 	lsl.w	r5, r7, lr
 800588e:	ea4c 0505 	orr.w	r5, ip, r5
 8005892:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005894:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005896:	6942      	ldr	r2, [r0, #20]
 8005898:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800589c:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800589e:	694d      	ldr	r5, [r1, #20]
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	68c2      	ldr	r2, [r0, #12]
 80058a4:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80058a8:	0052      	lsls	r2, r2, #1
 80058aa:	fa05 f202 	lsl.w	r2, r5, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80058ae:	690e      	ldr	r6, [r1, #16]
 80058b0:	2e04      	cmp	r6, #4
 80058b2:	d079      	beq.n	80059a8 <HAL_ADC_ConfigChannel+0x1c8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058b4:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 80058b6:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 80058ba:	4dae      	ldr	r5, [pc, #696]	; (8005b74 <HAL_ADC_ConfigChannel+0x394>)
 80058bc:	403d      	ands	r5, r7
 80058be:	680f      	ldr	r7, [r1, #0]
 80058c0:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 80058c4:	433a      	orrs	r2, r7
 80058c6:	4315      	orrs	r5, r2
 80058c8:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80058cc:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	690e      	ldr	r6, [r1, #16]
 80058d4:	6988      	ldr	r0, [r1, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058d6:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 80058d8:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
 80058dc:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 80058e0:	4328      	orrs	r0, r5
 80058e2:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	690d      	ldr	r5, [r1, #16]
 80058ea:	7f08      	ldrb	r0, [r1, #28]
 80058ec:	2801      	cmp	r0, #1
 80058ee:	d058      	beq.n	80059a2 <HAL_ADC_ConfigChannel+0x1c2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058f0:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 80058f2:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80058f6:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 80058fa:	4304      	orrs	r4, r0
 80058fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005900:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005902:	6890      	ldr	r0, [r2, #8]
 8005904:	f010 0f01 	tst.w	r0, #1
 8005908:	d112      	bne.n	8005930 <HAL_ADC_ConfigChannel+0x150>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800590a:	6808      	ldr	r0, [r1, #0]
 800590c:	68cd      	ldr	r5, [r1, #12]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800590e:	4c9a      	ldr	r4, [pc, #616]	; (8005b78 <HAL_ADC_ConfigChannel+0x398>)
 8005910:	42a5      	cmp	r5, r4
 8005912:	f000 80b1 	beq.w	8005a78 <HAL_ADC_ConfigChannel+0x298>
    CLEAR_BIT(ADCx->DIFSEL,
 8005916:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 800591a:	f3c0 0012 	ubfx	r0, r0, #0, #19
 800591e:	ea24 0000 	bic.w	r0, r4, r0
 8005922:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005926:	68c8      	ldr	r0, [r1, #12]
 8005928:	4a93      	ldr	r2, [pc, #588]	; (8005b78 <HAL_ADC_ConfigChannel+0x398>)
 800592a:	4290      	cmp	r0, r2
 800592c:	f000 80ac 	beq.w	8005a88 <HAL_ADC_ConfigChannel+0x2a8>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005930:	680a      	ldr	r2, [r1, #0]
 8005932:	4992      	ldr	r1, [pc, #584]	; (8005b7c <HAL_ADC_ConfigChannel+0x39c>)
 8005934:	420a      	tst	r2, r1
 8005936:	f000 81da 	beq.w	8005cee <HAL_ADC_ConfigChannel+0x50e>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800593a:	6819      	ldr	r1, [r3, #0]
 800593c:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8005940:	f000 8173 	beq.w	8005c2a <HAL_ADC_ConfigChannel+0x44a>
 8005944:	488e      	ldr	r0, [pc, #568]	; (8005b80 <HAL_ADC_ConfigChannel+0x3a0>)
 8005946:	4281      	cmp	r1, r0
 8005948:	f000 816c 	beq.w	8005c24 <HAL_ADC_ConfigChannel+0x444>
 800594c:	488d      	ldr	r0, [pc, #564]	; (8005b84 <HAL_ADC_ConfigChannel+0x3a4>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800594e:	6880      	ldr	r0, [r0, #8]
 8005950:	f000 74e0 	and.w	r4, r0, #29360128	; 0x1c00000
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005954:	4d8c      	ldr	r5, [pc, #560]	; (8005b88 <HAL_ADC_ConfigChannel+0x3a8>)
 8005956:	42aa      	cmp	r2, r5
 8005958:	f000 8169 	beq.w	8005c2e <HAL_ADC_ConfigChannel+0x44e>
 800595c:	4d8b      	ldr	r5, [pc, #556]	; (8005b8c <HAL_ADC_ConfigChannel+0x3ac>)
 800595e:	42aa      	cmp	r2, r5
 8005960:	f000 8165 	beq.w	8005c2e <HAL_ADC_ConfigChannel+0x44e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005964:	4d8a      	ldr	r5, [pc, #552]	; (8005b90 <HAL_ADC_ConfigChannel+0x3b0>)
 8005966:	42aa      	cmp	r2, r5
 8005968:	f000 8194 	beq.w	8005c94 <HAL_ADC_ConfigChannel+0x4b4>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800596c:	4d89      	ldr	r5, [pc, #548]	; (8005b94 <HAL_ADC_ConfigChannel+0x3b4>)
 800596e:	42aa      	cmp	r2, r5
 8005970:	f000 81a8 	beq.w	8005cc4 <HAL_ADC_ConfigChannel+0x4e4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005974:	2000      	movs	r0, #0
 8005976:	e74a      	b.n	800580e <HAL_ADC_ConfigChannel+0x2e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005978:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800597a:	3014      	adds	r0, #20
 800597c:	0e6a      	lsrs	r2, r5, #25
 800597e:	0092      	lsls	r2, r2, #2
 8005980:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8005984:	5886      	ldr	r6, [r0, r2]
 8005986:	f3c5 5504 	ubfx	r5, r5, #20, #5
 800598a:	2707      	movs	r7, #7
 800598c:	fa07 f505 	lsl.w	r5, r7, r5
 8005990:	ea26 0505 	bic.w	r5, r6, r5
 8005994:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005996:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005998:	6942      	ldr	r2, [r0, #20]
 800599a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800599e:	6142      	str	r2, [r0, #20]
}
 80059a0:	e77d      	b.n	800589e <HAL_ADC_ConfigChannel+0xbe>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80059a2:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80059a6:	e7a3      	b.n	80058f0 <HAL_ADC_ConfigChannel+0x110>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80059a8:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80059aa:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80059ac:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80059b0:	680a      	ldr	r2, [r1, #0]
 80059b2:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80059b6:	bb85      	cbnz	r5, 8005a1a <HAL_ADC_ConfigChannel+0x23a>
 80059b8:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80059bc:	4294      	cmp	r4, r2
 80059be:	d034      	beq.n	8005a2a <HAL_ADC_ConfigChannel+0x24a>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80059c0:	681c      	ldr	r4, [r3, #0]
 80059c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059c4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80059c6:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80059ca:	680a      	ldr	r2, [r1, #0]
 80059cc:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80059d0:	bb85      	cbnz	r5, 8005a34 <HAL_ADC_ConfigChannel+0x254>
 80059d2:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80059d6:	4290      	cmp	r0, r2
 80059d8:	d034      	beq.n	8005a44 <HAL_ADC_ConfigChannel+0x264>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80059da:	681c      	ldr	r4, [r3, #0]
 80059dc:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80059de:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80059e0:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80059e4:	680a      	ldr	r2, [r1, #0]
 80059e6:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80059ea:	bb85      	cbnz	r5, 8005a4e <HAL_ADC_ConfigChannel+0x26e>
 80059ec:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80059f0:	4290      	cmp	r0, r2
 80059f2:	d034      	beq.n	8005a5e <HAL_ADC_ConfigChannel+0x27e>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80059f4:	681c      	ldr	r4, [r3, #0]
 80059f6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80059f8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80059fa:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80059fe:	680a      	ldr	r2, [r1, #0]
 8005a00:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8005a04:	bb85      	cbnz	r5, 8005a68 <HAL_ADC_ConfigChannel+0x288>
 8005a06:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005a0a:	4290      	cmp	r0, r2
 8005a0c:	f47f af78 	bne.w	8005900 <HAL_ADC_ConfigChannel+0x120>
  MODIFY_REG(*preg,
 8005a10:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005a12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005a16:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 8005a18:	e772      	b.n	8005900 <HAL_ADC_ConfigChannel+0x120>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005a1e:	b112      	cbz	r2, 8005a26 <HAL_ADC_ConfigChannel+0x246>
  return __builtin_clz(value);
 8005a20:	fab2 f282 	clz	r2, r2
 8005a24:	e7ca      	b.n	80059bc <HAL_ADC_ConfigChannel+0x1dc>
    return 32U;
 8005a26:	2220      	movs	r2, #32
 8005a28:	e7c8      	b.n	80059bc <HAL_ADC_ConfigChannel+0x1dc>
  MODIFY_REG(*preg,
 8005a2a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8005a2c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005a30:	6602      	str	r2, [r0, #96]	; 0x60
}
 8005a32:	e7c5      	b.n	80059c0 <HAL_ADC_ConfigChannel+0x1e0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a34:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005a38:	b112      	cbz	r2, 8005a40 <HAL_ADC_ConfigChannel+0x260>
  return __builtin_clz(value);
 8005a3a:	fab2 f282 	clz	r2, r2
 8005a3e:	e7ca      	b.n	80059d6 <HAL_ADC_ConfigChannel+0x1f6>
    return 32U;
 8005a40:	2220      	movs	r2, #32
 8005a42:	e7c8      	b.n	80059d6 <HAL_ADC_ConfigChannel+0x1f6>
  MODIFY_REG(*preg,
 8005a44:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a46:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005a4a:	6662      	str	r2, [r4, #100]	; 0x64
}
 8005a4c:	e7c5      	b.n	80059da <HAL_ADC_ConfigChannel+0x1fa>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a4e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005a52:	b112      	cbz	r2, 8005a5a <HAL_ADC_ConfigChannel+0x27a>
  return __builtin_clz(value);
 8005a54:	fab2 f282 	clz	r2, r2
 8005a58:	e7ca      	b.n	80059f0 <HAL_ADC_ConfigChannel+0x210>
    return 32U;
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	e7c8      	b.n	80059f0 <HAL_ADC_ConfigChannel+0x210>
  MODIFY_REG(*preg,
 8005a5e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8005a60:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005a64:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8005a66:	e7c5      	b.n	80059f4 <HAL_ADC_ConfigChannel+0x214>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a68:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005a6c:	b112      	cbz	r2, 8005a74 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 8005a6e:	fab2 f282 	clz	r2, r2
 8005a72:	e7ca      	b.n	8005a0a <HAL_ADC_ConfigChannel+0x22a>
    return 32U;
 8005a74:	2220      	movs	r2, #32
 8005a76:	e7c8      	b.n	8005a0a <HAL_ADC_ConfigChannel+0x22a>
    SET_BIT(ADCx->DIFSEL,
 8005a78:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8005a7c:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8005a80:	4320      	orrs	r0, r4
 8005a82:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
 8005a86:	e74e      	b.n	8005926 <HAL_ADC_ConfigChannel+0x146>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a88:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005a8a:	680a      	ldr	r2, [r1, #0]
 8005a8c:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8005a90:	2d00      	cmp	r5, #0
 8005a92:	d138      	bne.n	8005b06 <HAL_ADC_ConfigChannel+0x326>
 8005a94:	0e90      	lsrs	r0, r2, #26
 8005a96:	3001      	adds	r0, #1
 8005a98:	f000 001f 	and.w	r0, r0, #31
 8005a9c:	2809      	cmp	r0, #9
 8005a9e:	bf8c      	ite	hi
 8005aa0:	2000      	movhi	r0, #0
 8005aa2:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	d077      	beq.n	8005b98 <HAL_ADC_ConfigChannel+0x3b8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005aa8:	2d00      	cmp	r5, #0
 8005aaa:	d13b      	bne.n	8005b24 <HAL_ADC_ConfigChannel+0x344>
 8005aac:	0e90      	lsrs	r0, r2, #26
 8005aae:	3001      	adds	r0, #1
 8005ab0:	0680      	lsls	r0, r0, #26
 8005ab2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005ab6:	2d00      	cmp	r5, #0
 8005ab8:	d140      	bne.n	8005b3c <HAL_ADC_ConfigChannel+0x35c>
 8005aba:	0e96      	lsrs	r6, r2, #26
 8005abc:	3601      	adds	r6, #1
 8005abe:	f006 071f 	and.w	r7, r6, #31
 8005ac2:	2601      	movs	r6, #1
 8005ac4:	40be      	lsls	r6, r7
 8005ac6:	4330      	orrs	r0, r6
 8005ac8:	2d00      	cmp	r5, #0
 8005aca:	d145      	bne.n	8005b58 <HAL_ADC_ConfigChannel+0x378>
 8005acc:	0e92      	lsrs	r2, r2, #26
 8005ace:	3201      	adds	r2, #1
 8005ad0:	f002 021f 	and.w	r2, r2, #31
 8005ad4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005ad8:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ada:	4302      	orrs	r2, r0
 8005adc:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005ade:	f104 0614 	add.w	r6, r4, #20
 8005ae2:	0e55      	lsrs	r5, r2, #25
 8005ae4:	00ad      	lsls	r5, r5, #2
 8005ae6:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8005aea:	5974      	ldr	r4, [r6, r5]
 8005aec:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8005af0:	f04f 0c07 	mov.w	ip, #7
 8005af4:	fa0c fc02 	lsl.w	ip, ip, r2
 8005af8:	ea24 0c0c 	bic.w	ip, r4, ip
 8005afc:	4090      	lsls	r0, r2
 8005afe:	ea4c 0000 	orr.w	r0, ip, r0
 8005b02:	5170      	str	r0, [r6, r5]
}
 8005b04:	e714      	b.n	8005930 <HAL_ADC_ConfigChannel+0x150>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b06:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8005b0a:	b148      	cbz	r0, 8005b20 <HAL_ADC_ConfigChannel+0x340>
  return __builtin_clz(value);
 8005b0c:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b10:	3001      	adds	r0, #1
 8005b12:	f000 001f 	and.w	r0, r0, #31
 8005b16:	2809      	cmp	r0, #9
 8005b18:	bf8c      	ite	hi
 8005b1a:	2000      	movhi	r0, #0
 8005b1c:	2001      	movls	r0, #1
 8005b1e:	e7c1      	b.n	8005aa4 <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 8005b20:	2020      	movs	r0, #32
 8005b22:	e7f5      	b.n	8005b10 <HAL_ADC_ConfigChannel+0x330>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b24:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8005b28:	b130      	cbz	r0, 8005b38 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8005b2a:	fab0 f080 	clz	r0, r0
 8005b2e:	3001      	adds	r0, #1
 8005b30:	0680      	lsls	r0, r0, #26
 8005b32:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005b36:	e7be      	b.n	8005ab6 <HAL_ADC_ConfigChannel+0x2d6>
    return 32U;
 8005b38:	2020      	movs	r0, #32
 8005b3a:	e7f8      	b.n	8005b2e <HAL_ADC_ConfigChannel+0x34e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b3c:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8005b40:	b146      	cbz	r6, 8005b54 <HAL_ADC_ConfigChannel+0x374>
  return __builtin_clz(value);
 8005b42:	fab6 f686 	clz	r6, r6
 8005b46:	3601      	adds	r6, #1
 8005b48:	f006 061f 	and.w	r6, r6, #31
 8005b4c:	2701      	movs	r7, #1
 8005b4e:	fa07 f606 	lsl.w	r6, r7, r6
 8005b52:	e7b8      	b.n	8005ac6 <HAL_ADC_ConfigChannel+0x2e6>
    return 32U;
 8005b54:	2620      	movs	r6, #32
 8005b56:	e7f6      	b.n	8005b46 <HAL_ADC_ConfigChannel+0x366>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b58:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005b5c:	b142      	cbz	r2, 8005b70 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8005b5e:	fab2 f282 	clz	r2, r2
 8005b62:	3201      	adds	r2, #1
 8005b64:	f002 021f 	and.w	r2, r2, #31
 8005b68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005b6c:	0512      	lsls	r2, r2, #20
 8005b6e:	e7b4      	b.n	8005ada <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8005b70:	2220      	movs	r2, #32
 8005b72:	e7f6      	b.n	8005b62 <HAL_ADC_ConfigChannel+0x382>
 8005b74:	03fff000 	.word	0x03fff000
 8005b78:	407f0000 	.word	0x407f0000
 8005b7c:	80080000 	.word	0x80080000
 8005b80:	50000100 	.word	0x50000100
 8005b84:	50000700 	.word	0x50000700
 8005b88:	c3210000 	.word	0xc3210000
 8005b8c:	90c00010 	.word	0x90c00010
 8005b90:	c7520000 	.word	0xc7520000
 8005b94:	cb840000 	.word	0xcb840000
 8005b98:	b9cd      	cbnz	r5, 8005bce <HAL_ADC_ConfigChannel+0x3ee>
 8005b9a:	0e90      	lsrs	r0, r2, #26
 8005b9c:	3001      	adds	r0, #1
 8005b9e:	0680      	lsls	r0, r0, #26
 8005ba0:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005ba4:	b9fd      	cbnz	r5, 8005be6 <HAL_ADC_ConfigChannel+0x406>
 8005ba6:	0e96      	lsrs	r6, r2, #26
 8005ba8:	3601      	adds	r6, #1
 8005baa:	f006 071f 	and.w	r7, r6, #31
 8005bae:	2601      	movs	r6, #1
 8005bb0:	40be      	lsls	r6, r7
 8005bb2:	4330      	orrs	r0, r6
 8005bb4:	bb2d      	cbnz	r5, 8005c02 <HAL_ADC_ConfigChannel+0x422>
 8005bb6:	0e92      	lsrs	r2, r2, #26
 8005bb8:	3201      	adds	r2, #1
 8005bba:	f002 021f 	and.w	r2, r2, #31
 8005bbe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005bc2:	3a1e      	subs	r2, #30
 8005bc4:	0512      	lsls	r2, r2, #20
 8005bc6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005bca:	4302      	orrs	r2, r0
 8005bcc:	e786      	b.n	8005adc <HAL_ADC_ConfigChannel+0x2fc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bce:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8005bd2:	b130      	cbz	r0, 8005be2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8005bd4:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005bd8:	3001      	adds	r0, #1
 8005bda:	0680      	lsls	r0, r0, #26
 8005bdc:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005be0:	e7e0      	b.n	8005ba4 <HAL_ADC_ConfigChannel+0x3c4>
    return 32U;
 8005be2:	2020      	movs	r0, #32
 8005be4:	e7f8      	b.n	8005bd8 <HAL_ADC_ConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be6:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8005bea:	b146      	cbz	r6, 8005bfe <HAL_ADC_ConfigChannel+0x41e>
  return __builtin_clz(value);
 8005bec:	fab6 f686 	clz	r6, r6
 8005bf0:	3601      	adds	r6, #1
 8005bf2:	f006 061f 	and.w	r6, r6, #31
 8005bf6:	2701      	movs	r7, #1
 8005bf8:	fa07 f606 	lsl.w	r6, r7, r6
 8005bfc:	e7d9      	b.n	8005bb2 <HAL_ADC_ConfigChannel+0x3d2>
    return 32U;
 8005bfe:	2620      	movs	r6, #32
 8005c00:	e7f6      	b.n	8005bf0 <HAL_ADC_ConfigChannel+0x410>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c02:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005c06:	b15a      	cbz	r2, 8005c20 <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 8005c08:	fab2 f282 	clz	r2, r2
 8005c0c:	3201      	adds	r2, #1
 8005c0e:	f002 021f 	and.w	r2, r2, #31
 8005c12:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005c16:	3a1e      	subs	r2, #30
 8005c18:	0512      	lsls	r2, r2, #20
 8005c1a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005c1e:	e7d4      	b.n	8005bca <HAL_ADC_ConfigChannel+0x3ea>
    return 32U;
 8005c20:	2220      	movs	r2, #32
 8005c22:	e7f3      	b.n	8005c0c <HAL_ADC_ConfigChannel+0x42c>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c24:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8005c28:	e691      	b.n	800594e <HAL_ADC_ConfigChannel+0x16e>
 8005c2a:	4835      	ldr	r0, [pc, #212]	; (8005d00 <HAL_ADC_ConfigChannel+0x520>)
 8005c2c:	e68f      	b.n	800594e <HAL_ADC_ConfigChannel+0x16e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005c2e:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8005c32:	f47f ae97 	bne.w	8005964 <HAL_ADC_ConfigChannel+0x184>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c36:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8005c3a:	d004      	beq.n	8005c46 <HAL_ADC_ConfigChannel+0x466>
 8005c3c:	4a31      	ldr	r2, [pc, #196]	; (8005d04 <HAL_ADC_ConfigChannel+0x524>)
 8005c3e:	4291      	cmp	r1, r2
 8005c40:	d001      	beq.n	8005c46 <HAL_ADC_ConfigChannel+0x466>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c42:	2000      	movs	r0, #0
 8005c44:	e5e3      	b.n	800580e <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c46:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8005c4a:	d019      	beq.n	8005c80 <HAL_ADC_ConfigChannel+0x4a0>
 8005c4c:	4a2e      	ldr	r2, [pc, #184]	; (8005d08 <HAL_ADC_ConfigChannel+0x528>)
 8005c4e:	4291      	cmp	r1, r2
 8005c50:	d014      	beq.n	8005c7c <HAL_ADC_ConfigChannel+0x49c>
 8005c52:	492e      	ldr	r1, [pc, #184]	; (8005d0c <HAL_ADC_ConfigChannel+0x52c>)
 8005c54:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005c58:	688a      	ldr	r2, [r1, #8]
 8005c5a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005c5e:	4314      	orrs	r4, r2
 8005c60:	608c      	str	r4, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c62:	4a2b      	ldr	r2, [pc, #172]	; (8005d10 <HAL_ADC_ConfigChannel+0x530>)
 8005c64:	6812      	ldr	r2, [r2, #0]
 8005c66:	0992      	lsrs	r2, r2, #6
 8005c68:	492a      	ldr	r1, [pc, #168]	; (8005d14 <HAL_ADC_ConfigChannel+0x534>)
 8005c6a:	fba1 1202 	umull	r1, r2, r1, r2
 8005c6e:	0992      	lsrs	r2, r2, #6
 8005c70:	3201      	adds	r2, #1
 8005c72:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005c76:	0092      	lsls	r2, r2, #2
 8005c78:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005c7a:	e006      	b.n	8005c8a <HAL_ADC_ConfigChannel+0x4aa>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c7c:	4920      	ldr	r1, [pc, #128]	; (8005d00 <HAL_ADC_ConfigChannel+0x520>)
 8005c7e:	e7e9      	b.n	8005c54 <HAL_ADC_ConfigChannel+0x474>
 8005c80:	491f      	ldr	r1, [pc, #124]	; (8005d00 <HAL_ADC_ConfigChannel+0x520>)
 8005c82:	e7e7      	b.n	8005c54 <HAL_ADC_ConfigChannel+0x474>
            wait_loop_index--;
 8005c84:	9a01      	ldr	r2, [sp, #4]
 8005c86:	3a01      	subs	r2, #1
 8005c88:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005c8a:	9a01      	ldr	r2, [sp, #4]
 8005c8c:	2a00      	cmp	r2, #0
 8005c8e:	d1f9      	bne.n	8005c84 <HAL_ADC_ConfigChannel+0x4a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c90:	2000      	movs	r0, #0
 8005c92:	e5bc      	b.n	800580e <HAL_ADC_ConfigChannel+0x2e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005c94:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8005c98:	f47f ae68 	bne.w	800596c <HAL_ADC_ConfigChannel+0x18c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c9c:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8005ca0:	d00e      	beq.n	8005cc0 <HAL_ADC_ConfigChannel+0x4e0>
 8005ca2:	4a19      	ldr	r2, [pc, #100]	; (8005d08 <HAL_ADC_ConfigChannel+0x528>)
 8005ca4:	4291      	cmp	r1, r2
 8005ca6:	d009      	beq.n	8005cbc <HAL_ADC_ConfigChannel+0x4dc>
 8005ca8:	4918      	ldr	r1, [pc, #96]	; (8005d0c <HAL_ADC_ConfigChannel+0x52c>)
 8005caa:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 8005cae:	688a      	ldr	r2, [r1, #8]
 8005cb0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005cb4:	4314      	orrs	r4, r2
 8005cb6:	608c      	str	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cb8:	2000      	movs	r0, #0
}
 8005cba:	e5a8      	b.n	800580e <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005cbc:	4910      	ldr	r1, [pc, #64]	; (8005d00 <HAL_ADC_ConfigChannel+0x520>)
 8005cbe:	e7f4      	b.n	8005caa <HAL_ADC_ConfigChannel+0x4ca>
 8005cc0:	490f      	ldr	r1, [pc, #60]	; (8005d00 <HAL_ADC_ConfigChannel+0x520>)
 8005cc2:	e7f2      	b.n	8005caa <HAL_ADC_ConfigChannel+0x4ca>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005cc4:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8005cc8:	d113      	bne.n	8005cf2 <HAL_ADC_ConfigChannel+0x512>
        if (ADC_VREFINT_INSTANCE(hadc))
 8005cca:	4a0f      	ldr	r2, [pc, #60]	; (8005d08 <HAL_ADC_ConfigChannel+0x528>)
 8005ccc:	4291      	cmp	r1, r2
 8005cce:	d012      	beq.n	8005cf6 <HAL_ADC_ConfigChannel+0x516>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005cd0:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8005cd4:	d009      	beq.n	8005cea <HAL_ADC_ConfigChannel+0x50a>
 8005cd6:	480d      	ldr	r0, [pc, #52]	; (8005d0c <HAL_ADC_ConfigChannel+0x52c>)
 8005cd8:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005cdc:	6881      	ldr	r1, [r0, #8]
 8005cde:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ce6:	2000      	movs	r0, #0
}
 8005ce8:	e591      	b.n	800580e <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005cea:	4805      	ldr	r0, [pc, #20]	; (8005d00 <HAL_ADC_ConfigChannel+0x520>)
 8005cec:	e7f4      	b.n	8005cd8 <HAL_ADC_ConfigChannel+0x4f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cee:	2000      	movs	r0, #0
 8005cf0:	e58d      	b.n	800580e <HAL_ADC_ConfigChannel+0x2e>
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	e58b      	b.n	800580e <HAL_ADC_ConfigChannel+0x2e>
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	e589      	b.n	800580e <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8005cfa:	2002      	movs	r0, #2
 8005cfc:	e58a      	b.n	8005814 <HAL_ADC_ConfigChannel+0x34>
 8005cfe:	bf00      	nop
 8005d00:	50000300 	.word	0x50000300
 8005d04:	50000600 	.word	0x50000600
 8005d08:	50000100 	.word	0x50000100
 8005d0c:	50000700 	.word	0x50000700
 8005d10:	20001048 	.word	0x20001048
 8005d14:	053e2d63 	.word	0x053e2d63

08005d18 <ADC_Enable>:
{
 8005d18:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d1a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d1c:	689a      	ldr	r2, [r3, #8]
 8005d1e:	f012 0f01 	tst.w	r2, #1
 8005d22:	d140      	bne.n	8005da6 <ADC_Enable+0x8e>
 8005d24:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005d26:	6899      	ldr	r1, [r3, #8]
 8005d28:	4a20      	ldr	r2, [pc, #128]	; (8005dac <ADC_Enable+0x94>)
 8005d2a:	4211      	tst	r1, r2
 8005d2c:	d009      	beq.n	8005d42 <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d2e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005d30:	f043 0310 	orr.w	r3, r3, #16
 8005d34:	65c3      	str	r3, [r0, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d36:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005d38:	f043 0301 	orr.w	r3, r3, #1
 8005d3c:	6603      	str	r3, [r0, #96]	; 0x60
      return HAL_ERROR;
 8005d3e:	2001      	movs	r0, #1
 8005d40:	e032      	b.n	8005da8 <ADC_Enable+0x90>
  MODIFY_REG(ADCx->CR,
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005d48:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005d4c:	f042 0201 	orr.w	r2, r2, #1
 8005d50:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8005d52:	f7ff fb7d 	bl	8005450 <HAL_GetTick>
 8005d56:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005d58:	6823      	ldr	r3, [r4, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	f012 0f01 	tst.w	r2, #1
 8005d60:	d11f      	bne.n	8005da2 <ADC_Enable+0x8a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	f012 0f01 	tst.w	r2, #1
 8005d68:	d107      	bne.n	8005d7a <ADC_Enable+0x62>
  MODIFY_REG(ADCx->CR,
 8005d6a:	689a      	ldr	r2, [r3, #8]
 8005d6c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005d70:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005d74:	f042 0201 	orr.w	r2, r2, #1
 8005d78:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005d7a:	f7ff fb69 	bl	8005450 <HAL_GetTick>
 8005d7e:	1b43      	subs	r3, r0, r5
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d9e9      	bls.n	8005d58 <ADC_Enable+0x40>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f013 0f01 	tst.w	r3, #1
 8005d8c:	d1e4      	bne.n	8005d58 <ADC_Enable+0x40>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d8e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005d90:	f043 0310 	orr.w	r3, r3, #16
 8005d94:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d96:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005d98:	f043 0301 	orr.w	r3, r3, #1
 8005d9c:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 8005d9e:	2001      	movs	r0, #1
 8005da0:	e002      	b.n	8005da8 <ADC_Enable+0x90>
  return HAL_OK;
 8005da2:	2000      	movs	r0, #0
 8005da4:	e000      	b.n	8005da8 <ADC_Enable+0x90>
 8005da6:	2000      	movs	r0, #0
}
 8005da8:	bd38      	pop	{r3, r4, r5, pc}
 8005daa:	bf00      	nop
 8005dac:	8000003f 	.word	0x8000003f

08005db0 <HAL_ADC_Start_DMA>:
{
 8005db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005db4:	4604      	mov	r4, r0
 8005db6:	460f      	mov	r7, r1
 8005db8:	4690      	mov	r8, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005dba:	6800      	ldr	r0, [r0, #0]
 8005dbc:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8005dc0:	d021      	beq.n	8005e06 <HAL_ADC_Start_DMA+0x56>
 8005dc2:	4b42      	ldr	r3, [pc, #264]	; (8005ecc <HAL_ADC_Start_DMA+0x11c>)
 8005dc4:	4298      	cmp	r0, r3
 8005dc6:	d01b      	beq.n	8005e00 <HAL_ADC_Start_DMA+0x50>
 8005dc8:	4b41      	ldr	r3, [pc, #260]	; (8005ed0 <HAL_ADC_Start_DMA+0x120>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005dca:	689e      	ldr	r6, [r3, #8]
 8005dcc:	f006 061f 	and.w	r6, r6, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005dd0:	6885      	ldr	r5, [r0, #8]
 8005dd2:	f015 0f04 	tst.w	r5, #4
 8005dd6:	d174      	bne.n	8005ec2 <HAL_ADC_Start_DMA+0x112>
    __HAL_LOCK(hadc);
 8005dd8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d073      	beq.n	8005ec8 <HAL_ADC_Start_DMA+0x118>
 8005de0:	2301      	movs	r3, #1
 8005de2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005de6:	4b3b      	ldr	r3, [pc, #236]	; (8005ed4 <HAL_ADC_Start_DMA+0x124>)
 8005de8:	4298      	cmp	r0, r3
 8005dea:	d00e      	beq.n	8005e0a <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005dec:	b16e      	cbz	r6, 8005e0a <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005dee:	2e05      	cmp	r6, #5
 8005df0:	d00b      	beq.n	8005e0a <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005df2:	2e09      	cmp	r6, #9
 8005df4:	d009      	beq.n	8005e0a <HAL_ADC_Start_DMA+0x5a>
      __HAL_UNLOCK(hadc);
 8005df6:	2300      	movs	r3, #0
 8005df8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 8005dfc:	2001      	movs	r0, #1
 8005dfe:	e061      	b.n	8005ec4 <HAL_ADC_Start_DMA+0x114>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005e00:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005e04:	e7e1      	b.n	8005dca <HAL_ADC_Start_DMA+0x1a>
 8005e06:	4b34      	ldr	r3, [pc, #208]	; (8005ed8 <HAL_ADC_Start_DMA+0x128>)
 8005e08:	e7df      	b.n	8005dca <HAL_ADC_Start_DMA+0x1a>
      tmp_hal_status = ADC_Enable(hadc);
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	f7ff ff84 	bl	8005d18 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8005e10:	2800      	cmp	r0, #0
 8005e12:	d152      	bne.n	8005eba <HAL_ADC_Start_DMA+0x10a>
        ADC_STATE_CLR_SET(hadc->State,
 8005e14:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005e16:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005e1a:	f023 0301 	bic.w	r3, r3, #1
 8005e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e22:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	4a29      	ldr	r2, [pc, #164]	; (8005ecc <HAL_ADC_Start_DMA+0x11c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d040      	beq.n	8005eae <HAL_ADC_Start_DMA+0xfe>
 8005e2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d039      	beq.n	8005ea8 <HAL_ADC_Start_DMA+0xf8>
 8005e34:	461a      	mov	r2, r3
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d000      	beq.n	8005e3c <HAL_ADC_Start_DMA+0x8c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005e3a:	b91e      	cbnz	r6, 8005e44 <HAL_ADC_Start_DMA+0x94>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005e3c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005e3e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005e42:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005e44:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005e46:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005e4a:	d033      	beq.n	8005eb4 <HAL_ADC_Start_DMA+0x104>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005e4c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005e4e:	f023 0306 	bic.w	r3, r3, #6
 8005e52:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005e54:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005e56:	4a21      	ldr	r2, [pc, #132]	; (8005edc <HAL_ADC_Start_DMA+0x12c>)
 8005e58:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005e5a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005e5c:	4a20      	ldr	r2, [pc, #128]	; (8005ee0 <HAL_ADC_Start_DMA+0x130>)
 8005e5e:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005e60:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005e62:	4a20      	ldr	r2, [pc, #128]	; (8005ee4 <HAL_ADC_Start_DMA+0x134>)
 8005e64:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	221c      	movs	r2, #28
 8005e6a:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005e72:	6822      	ldr	r2, [r4, #0]
 8005e74:	6853      	ldr	r3, [r2, #4]
 8005e76:	f043 0310 	orr.w	r3, r3, #16
 8005e7a:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005e7c:	6822      	ldr	r2, [r4, #0]
 8005e7e:	68d3      	ldr	r3, [r2, #12]
 8005e80:	f043 0301 	orr.w	r3, r3, #1
 8005e84:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005e86:	6821      	ldr	r1, [r4, #0]
 8005e88:	4643      	mov	r3, r8
 8005e8a:	463a      	mov	r2, r7
 8005e8c:	3140      	adds	r1, #64	; 0x40
 8005e8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e90:	f000 fc2a 	bl	80066e8 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005e94:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8005e96:	6893      	ldr	r3, [r2, #8]
 8005e98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ea0:	f043 0304 	orr.w	r3, r3, #4
 8005ea4:	6093      	str	r3, [r2, #8]
}
 8005ea6:	e00d      	b.n	8005ec4 <HAL_ADC_Start_DMA+0x114>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005ea8:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005eac:	e7c3      	b.n	8005e36 <HAL_ADC_Start_DMA+0x86>
 8005eae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005eb2:	e7c0      	b.n	8005e36 <HAL_ADC_Start_DMA+0x86>
          ADC_CLEAR_ERRORCODE(hadc);
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	6623      	str	r3, [r4, #96]	; 0x60
 8005eb8:	e7cc      	b.n	8005e54 <HAL_ADC_Start_DMA+0xa4>
        __HAL_UNLOCK(hadc);
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8005ec0:	e000      	b.n	8005ec4 <HAL_ADC_Start_DMA+0x114>
    tmp_hal_status = HAL_BUSY;
 8005ec2:	2002      	movs	r0, #2
}
 8005ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 8005ec8:	2002      	movs	r0, #2
 8005eca:	e7fb      	b.n	8005ec4 <HAL_ADC_Start_DMA+0x114>
 8005ecc:	50000100 	.word	0x50000100
 8005ed0:	50000700 	.word	0x50000700
 8005ed4:	50000600 	.word	0x50000600
 8005ed8:	50000300 	.word	0x50000300
 8005edc:	0800573d 	.word	0x0800573d
 8005ee0:	08005731 	.word	0x08005731
 8005ee4:	080057c5 	.word	0x080057c5

08005ee8 <HAL_ADCEx_MultiModeConfigChannel>:
>>>>>>> render
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8006010:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8006014:	2a01      	cmp	r2, #1
 8006016:	f000 80d6 	beq.w	80061c6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
{
 800601a:	b410      	push	{r4}
 800601c:	b09d      	sub	sp, #116	; 0x74
 800601e:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8006020:	2201      	movs	r2, #1
 8006022:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006026:	2200      	movs	r2, #0
 8006028:	9218      	str	r2, [sp, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800602a:	9219      	str	r2, [sp, #100]	; 0x64

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800602c:	6800      	ldr	r0, [r0, #0]
 800602e:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8006032:	d047      	beq.n	80060c4 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 8006034:	4a65      	ldr	r2, [pc, #404]	; (80061cc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8006036:	4290      	cmp	r0, r2
 8006038:	d047      	beq.n	80060ca <HAL_ADCEx_MultiModeConfigChannel+0xba>
 800603a:	2200      	movs	r2, #0
 800603c:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 800603e:	9a01      	ldr	r2, [sp, #4]
 8006040:	2a00      	cmp	r2, #0
 8006042:	d046      	beq.n	80060d2 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006044:	6892      	ldr	r2, [r2, #8]
 8006046:	f012 0204 	ands.w	r2, r2, #4
 800604a:	d000      	beq.n	800604e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800604c:	2201      	movs	r2, #1
 800604e:	6884      	ldr	r4, [r0, #8]
 8006050:	f014 0f04 	tst.w	r4, #4
 8006054:	f040 80a7 	bne.w	80061a6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
=======
 8005ee8:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8005eec:	2a01      	cmp	r2, #1
 8005eee:	f000 80d6 	beq.w	800609e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
{
 8005ef2:	b410      	push	{r4}
 8005ef4:	b09d      	sub	sp, #116	; 0x74
 8005ef6:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005efe:	2200      	movs	r2, #0
 8005f00:	9218      	str	r2, [sp, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005f02:	9219      	str	r2, [sp, #100]	; 0x64

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005f04:	6800      	ldr	r0, [r0, #0]
 8005f06:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8005f0a:	d047      	beq.n	8005f9c <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 8005f0c:	4a65      	ldr	r2, [pc, #404]	; (80060a4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005f0e:	4290      	cmp	r0, r2
 8005f10:	d047      	beq.n	8005fa2 <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8005f12:	2200      	movs	r2, #0
 8005f14:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8005f16:	9a01      	ldr	r2, [sp, #4]
 8005f18:	2a00      	cmp	r2, #0
 8005f1a:	d046      	beq.n	8005faa <HAL_ADCEx_MultiModeConfigChannel+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005f1c:	6892      	ldr	r2, [r2, #8]
 8005f1e:	f012 0204 	ands.w	r2, r2, #4
 8005f22:	d000      	beq.n	8005f26 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005f24:	2201      	movs	r2, #1
 8005f26:	6884      	ldr	r4, [r0, #8]
 8005f28:	f014 0f04 	tst.w	r4, #4
 8005f2c:	f040 80a7 	bne.w	800607e <HAL_ADCEx_MultiModeConfigChannel+0x196>
>>>>>>> render
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
<<<<<<< HEAD
 8006058:	2a00      	cmp	r2, #0
 800605a:	f040 80a4 	bne.w	80061a6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800605e:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8006062:	d042      	beq.n	80060ea <HAL_ADCEx_MultiModeConfigChannel+0xda>
 8006064:	4a5a      	ldr	r2, [pc, #360]	; (80061d0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006066:	4290      	cmp	r0, r2
 8006068:	d03c      	beq.n	80060e4 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 800606a:	4a5a      	ldr	r2, [pc, #360]	; (80061d4 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
=======
 8005f30:	2a00      	cmp	r2, #0
 8005f32:	f040 80a4 	bne.w	800607e <HAL_ADCEx_MultiModeConfigChannel+0x196>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005f36:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8005f3a:	d042      	beq.n	8005fc2 <HAL_ADCEx_MultiModeConfigChannel+0xda>
 8005f3c:	4a5a      	ldr	r2, [pc, #360]	; (80060a8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005f3e:	4290      	cmp	r0, r2
 8005f40:	d03c      	beq.n	8005fbc <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8005f42:	4a5a      	ldr	r2, [pc, #360]	; (80060ac <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
>>>>>>> render

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
<<<<<<< HEAD
 800606c:	6808      	ldr	r0, [r1, #0]
 800606e:	2800      	cmp	r0, #0
 8006070:	d05c      	beq.n	800612c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006072:	6890      	ldr	r0, [r2, #8]
 8006074:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8006078:	684c      	ldr	r4, [r1, #4]
 800607a:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 800607e:	ea44 344c 	orr.w	r4, r4, ip, lsl #13
 8006082:	4320      	orrs	r0, r4
 8006084:	6090      	str	r0, [r2, #8]
=======
 8005f44:	6808      	ldr	r0, [r1, #0]
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d05c      	beq.n	8006004 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005f4a:	6890      	ldr	r0, [r2, #8]
 8005f4c:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8005f50:	684c      	ldr	r4, [r1, #4]
 8005f52:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8005f56:	ea44 344c 	orr.w	r4, r4, ip, lsl #13
 8005f5a:	4320      	orrs	r0, r4
 8005f5c:	6090      	str	r0, [r2, #8]
>>>>>>> render
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
<<<<<<< HEAD
 8006086:	6818      	ldr	r0, [r3, #0]
 8006088:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 800608c:	d02f      	beq.n	80060ee <HAL_ADCEx_MultiModeConfigChannel+0xde>
 800608e:	4c50      	ldr	r4, [pc, #320]	; (80061d0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006090:	42a0      	cmp	r0, r4
 8006092:	d02c      	beq.n	80060ee <HAL_ADCEx_MultiModeConfigChannel+0xde>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006094:	484d      	ldr	r0, [pc, #308]	; (80061cc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8006096:	6884      	ldr	r4, [r0, #8]
 8006098:	f014 0401 	ands.w	r4, r4, #1
 800609c:	d000      	beq.n	80060a0 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 800609e:	2401      	movs	r4, #1
 80060a0:	484d      	ldr	r0, [pc, #308]	; (80061d8 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 80060a2:	6880      	ldr	r0, [r0, #8]
 80060a4:	f010 0001 	ands.w	r0, r0, #1
 80060a8:	d000      	beq.n	80060ac <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 80060aa:	2001      	movs	r0, #1
 80060ac:	4320      	orrs	r0, r4
 80060ae:	4c4b      	ldr	r4, [pc, #300]	; (80061dc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80060b0:	68a4      	ldr	r4, [r4, #8]
 80060b2:	f014 0401 	ands.w	r4, r4, #1
 80060b6:	d000      	beq.n	80060ba <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80060b8:	2401      	movs	r4, #1
 80060ba:	4320      	orrs	r0, r4
 80060bc:	bf0c      	ite	eq
 80060be:	2001      	moveq	r0, #1
 80060c0:	2000      	movne	r0, #0
 80060c2:	e025      	b.n	8006110 <HAL_ADCEx_MultiModeConfigChannel+0x100>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80060c4:	4a42      	ldr	r2, [pc, #264]	; (80061d0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80060c6:	9201      	str	r2, [sp, #4]
 80060c8:	e7b9      	b.n	800603e <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 80060ca:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80060ce:	9201      	str	r2, [sp, #4]
 80060d0:	e7b5      	b.n	800603e <HAL_ADCEx_MultiModeConfigChannel+0x2e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060d4:	f042 0220 	orr.w	r2, r2, #32
 80060d8:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_UNLOCK(hadc);
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 80060e0:	2001      	movs	r0, #1
 80060e2:	e068      	b.n	80061b6 <HAL_ADCEx_MultiModeConfigChannel+0x1a6>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80060e4:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80060e8:	e7c0      	b.n	800606c <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 80060ea:	4a3d      	ldr	r2, [pc, #244]	; (80061e0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80060ec:	e7be      	b.n	800606c <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 80060ee:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80060f2:	6880      	ldr	r0, [r0, #8]
 80060f4:	f010 0001 	ands.w	r0, r0, #1
 80060f8:	d000      	beq.n	80060fc <HAL_ADCEx_MultiModeConfigChannel+0xec>
 80060fa:	2001      	movs	r0, #1
 80060fc:	4c34      	ldr	r4, [pc, #208]	; (80061d0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80060fe:	68a4      	ldr	r4, [r4, #8]
 8006100:	f014 0401 	ands.w	r4, r4, #1
 8006104:	d000      	beq.n	8006108 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8006106:	2401      	movs	r4, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006108:	4320      	orrs	r0, r4
 800610a:	bf0c      	ite	eq
 800610c:	2001      	moveq	r0, #1
 800610e:	2000      	movne	r0, #0
 8006110:	2800      	cmp	r0, #0
 8006112:	d054      	beq.n	80061be <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006114:	6890      	ldr	r0, [r2, #8]
 8006116:	f420 6071 	bic.w	r0, r0, #3856	; 0xf10
 800611a:	f020 000f 	bic.w	r0, r0, #15
 800611e:	680c      	ldr	r4, [r1, #0]
 8006120:	6889      	ldr	r1, [r1, #8]
 8006122:	4321      	orrs	r1, r4
 8006124:	4308      	orrs	r0, r1
 8006126:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006128:	2000      	movs	r0, #0
 800612a:	e041      	b.n	80061b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
=======
 8005f5e:	6818      	ldr	r0, [r3, #0]
 8005f60:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8005f64:	d02f      	beq.n	8005fc6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
 8005f66:	4c50      	ldr	r4, [pc, #320]	; (80060a8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005f68:	42a0      	cmp	r0, r4
 8005f6a:	d02c      	beq.n	8005fc6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005f6c:	484d      	ldr	r0, [pc, #308]	; (80060a4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005f6e:	6884      	ldr	r4, [r0, #8]
 8005f70:	f014 0401 	ands.w	r4, r4, #1
 8005f74:	d000      	beq.n	8005f78 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8005f76:	2401      	movs	r4, #1
 8005f78:	484d      	ldr	r0, [pc, #308]	; (80060b0 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8005f7a:	6880      	ldr	r0, [r0, #8]
 8005f7c:	f010 0001 	ands.w	r0, r0, #1
 8005f80:	d000      	beq.n	8005f84 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8005f82:	2001      	movs	r0, #1
 8005f84:	4320      	orrs	r0, r4
 8005f86:	4c4b      	ldr	r4, [pc, #300]	; (80060b4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8005f88:	68a4      	ldr	r4, [r4, #8]
 8005f8a:	f014 0401 	ands.w	r4, r4, #1
 8005f8e:	d000      	beq.n	8005f92 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8005f90:	2401      	movs	r4, #1
 8005f92:	4320      	orrs	r0, r4
 8005f94:	bf0c      	ite	eq
 8005f96:	2001      	moveq	r0, #1
 8005f98:	2000      	movne	r0, #0
 8005f9a:	e025      	b.n	8005fe8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005f9c:	4a42      	ldr	r2, [pc, #264]	; (80060a8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005f9e:	9201      	str	r2, [sp, #4]
 8005fa0:	e7b9      	b.n	8005f16 <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 8005fa2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005fa6:	9201      	str	r2, [sp, #4]
 8005fa8:	e7b5      	b.n	8005f16 <HAL_ADCEx_MultiModeConfigChannel+0x2e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005faa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005fac:	f042 0220 	orr.w	r2, r2, #32
 8005fb0:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_UNLOCK(hadc);
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 8005fb8:	2001      	movs	r0, #1
 8005fba:	e068      	b.n	800608e <HAL_ADCEx_MultiModeConfigChannel+0x1a6>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005fbc:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8005fc0:	e7c0      	b.n	8005f44 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8005fc2:	4a3d      	ldr	r2, [pc, #244]	; (80060b8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005fc4:	e7be      	b.n	8005f44 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8005fc6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005fca:	6880      	ldr	r0, [r0, #8]
 8005fcc:	f010 0001 	ands.w	r0, r0, #1
 8005fd0:	d000      	beq.n	8005fd4 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8005fd2:	2001      	movs	r0, #1
 8005fd4:	4c34      	ldr	r4, [pc, #208]	; (80060a8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005fd6:	68a4      	ldr	r4, [r4, #8]
 8005fd8:	f014 0401 	ands.w	r4, r4, #1
 8005fdc:	d000      	beq.n	8005fe0 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8005fde:	2401      	movs	r4, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005fe0:	4320      	orrs	r0, r4
 8005fe2:	bf0c      	ite	eq
 8005fe4:	2001      	moveq	r0, #1
 8005fe6:	2000      	movne	r0, #0
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	d054      	beq.n	8006096 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005fec:	6890      	ldr	r0, [r2, #8]
 8005fee:	f420 6071 	bic.w	r0, r0, #3856	; 0xf10
 8005ff2:	f020 000f 	bic.w	r0, r0, #15
 8005ff6:	680c      	ldr	r4, [r1, #0]
 8005ff8:	6889      	ldr	r1, [r1, #8]
 8005ffa:	4321      	orrs	r1, r4
 8005ffc:	4308      	orrs	r0, r1
 8005ffe:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006000:	2000      	movs	r0, #0
 8006002:	e041      	b.n	8006088 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
>>>>>>> render
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
<<<<<<< HEAD
 800612c:	6891      	ldr	r1, [r2, #8]
 800612e:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8006132:	6091      	str	r1, [r2, #8]
=======
 8006004:	6891      	ldr	r1, [r2, #8]
 8006006:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 800600a:	6091      	str	r1, [r2, #8]
>>>>>>> render

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
<<<<<<< HEAD
 8006134:	6819      	ldr	r1, [r3, #0]
 8006136:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 800613a:	d01a      	beq.n	8006172 <HAL_ADCEx_MultiModeConfigChannel+0x162>
 800613c:	4824      	ldr	r0, [pc, #144]	; (80061d0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800613e:	4281      	cmp	r1, r0
 8006140:	d017      	beq.n	8006172 <HAL_ADCEx_MultiModeConfigChannel+0x162>
 8006142:	4922      	ldr	r1, [pc, #136]	; (80061cc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8006144:	6888      	ldr	r0, [r1, #8]
 8006146:	f010 0001 	ands.w	r0, r0, #1
 800614a:	d000      	beq.n	800614e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800614c:	2001      	movs	r0, #1
 800614e:	4922      	ldr	r1, [pc, #136]	; (80061d8 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8006150:	6889      	ldr	r1, [r1, #8]
 8006152:	f011 0101 	ands.w	r1, r1, #1
 8006156:	d000      	beq.n	800615a <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 8006158:	2101      	movs	r1, #1
 800615a:	4301      	orrs	r1, r0
 800615c:	481f      	ldr	r0, [pc, #124]	; (80061dc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800615e:	6880      	ldr	r0, [r0, #8]
 8006160:	f010 0001 	ands.w	r0, r0, #1
 8006164:	d000      	beq.n	8006168 <HAL_ADCEx_MultiModeConfigChannel+0x158>
 8006166:	2001      	movs	r0, #1
 8006168:	4301      	orrs	r1, r0
 800616a:	bf0c      	ite	eq
 800616c:	2101      	moveq	r1, #1
 800616e:	2100      	movne	r1, #0
 8006170:	e010      	b.n	8006194 <HAL_ADCEx_MultiModeConfigChannel+0x184>
 8006172:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8006176:	6889      	ldr	r1, [r1, #8]
 8006178:	f011 0101 	ands.w	r1, r1, #1
 800617c:	d000      	beq.n	8006180 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800617e:	2101      	movs	r1, #1
 8006180:	4813      	ldr	r0, [pc, #76]	; (80061d0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006182:	6880      	ldr	r0, [r0, #8]
 8006184:	f010 0001 	ands.w	r0, r0, #1
 8006188:	d000      	beq.n	800618c <HAL_ADCEx_MultiModeConfigChannel+0x17c>
 800618a:	2001      	movs	r0, #1
 800618c:	4301      	orrs	r1, r0
 800618e:	bf0c      	ite	eq
 8006190:	2101      	moveq	r1, #1
 8006192:	2100      	movne	r1, #0
 8006194:	b1a9      	cbz	r1, 80061c2 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006196:	6891      	ldr	r1, [r2, #8]
 8006198:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 800619c:	f021 010f 	bic.w	r1, r1, #15
 80061a0:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061a2:	2000      	movs	r0, #0
 80061a4:	e004      	b.n	80061b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
=======
 800600c:	6819      	ldr	r1, [r3, #0]
 800600e:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8006012:	d01a      	beq.n	800604a <HAL_ADCEx_MultiModeConfigChannel+0x162>
 8006014:	4824      	ldr	r0, [pc, #144]	; (80060a8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006016:	4281      	cmp	r1, r0
 8006018:	d017      	beq.n	800604a <HAL_ADCEx_MultiModeConfigChannel+0x162>
 800601a:	4922      	ldr	r1, [pc, #136]	; (80060a4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800601c:	6888      	ldr	r0, [r1, #8]
 800601e:	f010 0001 	ands.w	r0, r0, #1
 8006022:	d000      	beq.n	8006026 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8006024:	2001      	movs	r0, #1
 8006026:	4922      	ldr	r1, [pc, #136]	; (80060b0 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8006028:	6889      	ldr	r1, [r1, #8]
 800602a:	f011 0101 	ands.w	r1, r1, #1
 800602e:	d000      	beq.n	8006032 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 8006030:	2101      	movs	r1, #1
 8006032:	4301      	orrs	r1, r0
 8006034:	481f      	ldr	r0, [pc, #124]	; (80060b4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8006036:	6880      	ldr	r0, [r0, #8]
 8006038:	f010 0001 	ands.w	r0, r0, #1
 800603c:	d000      	beq.n	8006040 <HAL_ADCEx_MultiModeConfigChannel+0x158>
 800603e:	2001      	movs	r0, #1
 8006040:	4301      	orrs	r1, r0
 8006042:	bf0c      	ite	eq
 8006044:	2101      	moveq	r1, #1
 8006046:	2100      	movne	r1, #0
 8006048:	e010      	b.n	800606c <HAL_ADCEx_MultiModeConfigChannel+0x184>
 800604a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800604e:	6889      	ldr	r1, [r1, #8]
 8006050:	f011 0101 	ands.w	r1, r1, #1
 8006054:	d000      	beq.n	8006058 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006056:	2101      	movs	r1, #1
 8006058:	4813      	ldr	r0, [pc, #76]	; (80060a8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800605a:	6880      	ldr	r0, [r0, #8]
 800605c:	f010 0001 	ands.w	r0, r0, #1
 8006060:	d000      	beq.n	8006064 <HAL_ADCEx_MultiModeConfigChannel+0x17c>
 8006062:	2001      	movs	r0, #1
 8006064:	4301      	orrs	r1, r0
 8006066:	bf0c      	ite	eq
 8006068:	2101      	moveq	r1, #1
 800606a:	2100      	movne	r1, #0
 800606c:	b1a9      	cbz	r1, 800609a <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800606e:	6891      	ldr	r1, [r2, #8]
 8006070:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8006074:	f021 010f 	bic.w	r1, r1, #15
 8006078:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800607a:	2000      	movs	r0, #0
 800607c:	e004      	b.n	8006088 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
>>>>>>> render
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 80061a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80061a8:	f042 0220 	orr.w	r2, r2, #32
 80061ac:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80061ae:	2001      	movs	r0, #1
=======
 800607e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006080:	f042 0220 	orr.w	r2, r2, #32
 8006084:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006086:	2001      	movs	r0, #1
>>>>>>> render
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
=======
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
>>>>>>> render

  /* Return function status */
  return tmp_hal_status;
}
<<<<<<< HEAD
 80061b6:	b01d      	add	sp, #116	; 0x74
 80061b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061bc:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061be:	2000      	movs	r0, #0
 80061c0:	e7f6      	b.n	80061b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
 80061c2:	2000      	movs	r0, #0
 80061c4:	e7f4      	b.n	80061b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  __HAL_LOCK(hadc);
 80061c6:	2002      	movs	r0, #2
}
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	50000400 	.word	0x50000400
 80061d0:	50000100 	.word	0x50000100
 80061d4:	50000700 	.word	0x50000700
 80061d8:	50000500 	.word	0x50000500
 80061dc:	50000600 	.word	0x50000600
 80061e0:	50000300 	.word	0x50000300

080061e4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061e4:	4a07      	ldr	r2, [pc, #28]	; (8006204 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80061e6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80061ec:	041b      	lsls	r3, r3, #16
 80061ee:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061f0:	0200      	lsls	r0, r0, #8
 80061f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061f6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80061f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80061fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8006200:	60d3      	str	r3, [r2, #12]
=======
 800608e:	b01d      	add	sp, #116	; 0x74
 8006090:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006094:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006096:	2000      	movs	r0, #0
 8006098:	e7f6      	b.n	8006088 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
 800609a:	2000      	movs	r0, #0
 800609c:	e7f4      	b.n	8006088 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  __HAL_LOCK(hadc);
 800609e:	2002      	movs	r0, #2
}
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	50000400 	.word	0x50000400
 80060a8:	50000100 	.word	0x50000100
 80060ac:	50000700 	.word	0x50000700
 80060b0:	50000500 	.word	0x50000500
 80060b4:	50000600 	.word	0x50000600
 80060b8:	50000300 	.word	0x50000300

080060bc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80060bc:	4a07      	ldr	r2, [pc, #28]	; (80060dc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80060be:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80060c4:	041b      	lsls	r3, r3, #16
 80060c6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060c8:	0200      	lsls	r0, r0, #8
 80060ca:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060ce:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80060d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80060d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80060d8:	60d3      	str	r3, [r2, #12]
>>>>>>> render
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
<<<<<<< HEAD
 8006202:	4770      	bx	lr
 8006204:	e000ed00 	.word	0xe000ed00

08006208 <HAL_NVIC_SetPriority>:
=======
 80060da:	4770      	bx	lr
 80060dc:	e000ed00 	.word	0xe000ed00

080060e0 <HAL_NVIC_SetPriority>:
>>>>>>> render
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8006208:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800620a:	4b19      	ldr	r3, [pc, #100]	; (8006270 <HAL_NVIC_SetPriority+0x68>)
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f3c3 2302 	ubfx	r3, r3, #8, #3
=======
 80060e0:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060e2:	4b19      	ldr	r3, [pc, #100]	; (8006148 <HAL_NVIC_SetPriority+0x68>)
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f3c3 2302 	ubfx	r3, r3, #8, #3
>>>>>>> render
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8006212:	f1c3 0c07 	rsb	ip, r3, #7
 8006216:	f1bc 0f04 	cmp.w	ip, #4
 800621a:	bf28      	it	cs
 800621c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006220:	f103 0e04 	add.w	lr, r3, #4
 8006224:	f1be 0f06 	cmp.w	lr, #6
 8006228:	d918      	bls.n	800625c <HAL_NVIC_SetPriority+0x54>
 800622a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800622c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8006230:	fa0e fc0c 	lsl.w	ip, lr, ip
 8006234:	ea21 010c 	bic.w	r1, r1, ip
 8006238:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800623a:	fa0e f303 	lsl.w	r3, lr, r3
 800623e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006242:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8006244:	2800      	cmp	r0, #0
 8006246:	db0b      	blt.n	8006260 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006248:	0109      	lsls	r1, r1, #4
 800624a:	b2c9      	uxtb	r1, r1
 800624c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006250:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006254:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
=======
 80060ea:	f1c3 0c07 	rsb	ip, r3, #7
 80060ee:	f1bc 0f04 	cmp.w	ip, #4
 80060f2:	bf28      	it	cs
 80060f4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060f8:	f103 0e04 	add.w	lr, r3, #4
 80060fc:	f1be 0f06 	cmp.w	lr, #6
 8006100:	d918      	bls.n	8006134 <HAL_NVIC_SetPriority+0x54>
 8006102:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006104:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8006108:	fa0e fc0c 	lsl.w	ip, lr, ip
 800610c:	ea21 010c 	bic.w	r1, r1, ip
 8006110:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006112:	fa0e f303 	lsl.w	r3, lr, r3
 8006116:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800611a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800611c:	2800      	cmp	r0, #0
 800611e:	db0b      	blt.n	8006138 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006120:	0109      	lsls	r1, r1, #4
 8006122:	b2c9      	uxtb	r1, r1
 8006124:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006128:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800612c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
>>>>>>> render
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
<<<<<<< HEAD
 8006258:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800625c:	2300      	movs	r3, #0
 800625e:	e7e5      	b.n	800622c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006260:	f000 000f 	and.w	r0, r0, #15
 8006264:	0109      	lsls	r1, r1, #4
 8006266:	b2c9      	uxtb	r1, r1
 8006268:	4b02      	ldr	r3, [pc, #8]	; (8006274 <HAL_NVIC_SetPriority+0x6c>)
 800626a:	5419      	strb	r1, [r3, r0]
 800626c:	e7f4      	b.n	8006258 <HAL_NVIC_SetPriority+0x50>
 800626e:	bf00      	nop
 8006270:	e000ed00 	.word	0xe000ed00
 8006274:	e000ed14 	.word	0xe000ed14

08006278 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006278:	2800      	cmp	r0, #0
 800627a:	db07      	blt.n	800628c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800627c:	f000 021f 	and.w	r2, r0, #31
 8006280:	0940      	lsrs	r0, r0, #5
 8006282:	2301      	movs	r3, #1
 8006284:	4093      	lsls	r3, r2
 8006286:	4a02      	ldr	r2, [pc, #8]	; (8006290 <HAL_NVIC_EnableIRQ+0x18>)
 8006288:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
=======
 8006130:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006134:	2300      	movs	r3, #0
 8006136:	e7e5      	b.n	8006104 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006138:	f000 000f 	and.w	r0, r0, #15
 800613c:	0109      	lsls	r1, r1, #4
 800613e:	b2c9      	uxtb	r1, r1
 8006140:	4b02      	ldr	r3, [pc, #8]	; (800614c <HAL_NVIC_SetPriority+0x6c>)
 8006142:	5419      	strb	r1, [r3, r0]
 8006144:	e7f4      	b.n	8006130 <HAL_NVIC_SetPriority+0x50>
 8006146:	bf00      	nop
 8006148:	e000ed00 	.word	0xe000ed00
 800614c:	e000ed14 	.word	0xe000ed14

08006150 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006150:	2800      	cmp	r0, #0
 8006152:	db07      	blt.n	8006164 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006154:	f000 021f 	and.w	r2, r0, #31
 8006158:	0940      	lsrs	r0, r0, #5
 800615a:	2301      	movs	r3, #1
 800615c:	4093      	lsls	r3, r2
 800615e:	4a02      	ldr	r2, [pc, #8]	; (8006168 <HAL_NVIC_EnableIRQ+0x18>)
 8006160:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
>>>>>>> render
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
<<<<<<< HEAD
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	e000e100 	.word	0xe000e100

08006294 <HAL_SYSTICK_Config>:
=======
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	e000e100 	.word	0xe000e100

0800616c <HAL_SYSTICK_Config>:
>>>>>>> render
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
<<<<<<< HEAD
 8006294:	3801      	subs	r0, #1
 8006296:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800629a:	d20b      	bcs.n	80062b4 <HAL_SYSTICK_Config+0x20>
=======
 800616c:	3801      	subs	r0, #1
 800616e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006172:	d20b      	bcs.n	800618c <HAL_SYSTICK_Config+0x20>
>>>>>>> render
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
<<<<<<< HEAD
 800629c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80062a0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062a2:	4a05      	ldr	r2, [pc, #20]	; (80062b8 <HAL_SYSTICK_Config+0x24>)
 80062a4:	21f0      	movs	r1, #240	; 0xf0
 80062a6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80062aa:	2000      	movs	r0, #0
 80062ac:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80062ae:	2207      	movs	r2, #7
 80062b0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80062b2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80062b4:	2001      	movs	r0, #1
=======
 8006174:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006178:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800617a:	4a05      	ldr	r2, [pc, #20]	; (8006190 <HAL_SYSTICK_Config+0x24>)
 800617c:	21f0      	movs	r1, #240	; 0xf0
 800617e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006182:	2000      	movs	r0, #0
 8006184:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006186:	2207      	movs	r2, #7
 8006188:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800618a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800618c:	2001      	movs	r0, #1
>>>>>>> render
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
<<<<<<< HEAD
 80062b6:	4770      	bx	lr
 80062b8:	e000ed00 	.word	0xe000ed00

080062bc <HAL_CRC_Init>:
=======
 800618e:	4770      	bx	lr
 8006190:	e000ed00 	.word	0xe000ed00

08006194 <HAL_CRC_Init>:
>>>>>>> render
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
<<<<<<< HEAD
 80062bc:	2800      	cmp	r0, #0
 80062be:	d038      	beq.n	8006332 <HAL_CRC_Init+0x76>
{
 80062c0:	b510      	push	{r4, lr}
 80062c2:	4604      	mov	r4, r0
=======
 8006194:	2800      	cmp	r0, #0
 8006196:	d038      	beq.n	800620a <HAL_CRC_Init+0x76>
{
 8006198:	b510      	push	{r4, lr}
 800619a:	4604      	mov	r4, r0
>>>>>>> render
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
<<<<<<< HEAD
 80062c4:	7f43      	ldrb	r3, [r0, #29]
 80062c6:	b31b      	cbz	r3, 8006310 <HAL_CRC_Init+0x54>
=======
 800619c:	7f43      	ldrb	r3, [r0, #29]
 800619e:	b31b      	cbz	r3, 80061e8 <HAL_CRC_Init+0x54>
>>>>>>> render
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
<<<<<<< HEAD
 80062c8:	2302      	movs	r3, #2
 80062ca:	7763      	strb	r3, [r4, #29]
=======
 80061a0:	2302      	movs	r3, #2
 80061a2:	7763      	strb	r3, [r4, #29]
>>>>>>> render

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
<<<<<<< HEAD
 80062cc:	7923      	ldrb	r3, [r4, #4]
 80062ce:	bb1b      	cbnz	r3, 8006318 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	4a19      	ldr	r2, [pc, #100]	; (8006338 <HAL_CRC_Init+0x7c>)
 80062d4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80062d6:	6822      	ldr	r2, [r4, #0]
 80062d8:	6893      	ldr	r3, [r2, #8]
 80062da:	f023 0318 	bic.w	r3, r3, #24
 80062de:	6093      	str	r3, [r2, #8]
=======
 80061a4:	7923      	ldrb	r3, [r4, #4]
 80061a6:	bb1b      	cbnz	r3, 80061f0 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	4a19      	ldr	r2, [pc, #100]	; (8006210 <HAL_CRC_Init+0x7c>)
 80061ac:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80061ae:	6822      	ldr	r2, [r4, #0]
 80061b0:	6893      	ldr	r3, [r2, #8]
 80061b2:	f023 0318 	bic.w	r3, r3, #24
 80061b6:	6093      	str	r3, [r2, #8]
>>>>>>> render
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
<<<<<<< HEAD
 80062e0:	7963      	ldrb	r3, [r4, #5]
 80062e2:	bb13      	cbnz	r3, 800632a <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062ea:	611a      	str	r2, [r3, #16]
=======
 80061b8:	7963      	ldrb	r3, [r4, #5]
 80061ba:	bb13      	cbnz	r3, 8006202 <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061c2:	611a      	str	r2, [r3, #16]
>>>>>>> render
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
<<<<<<< HEAD
 80062ec:	6822      	ldr	r2, [r4, #0]
 80062ee:	6893      	ldr	r3, [r2, #8]
 80062f0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80062f4:	6961      	ldr	r1, [r4, #20]
 80062f6:	430b      	orrs	r3, r1
 80062f8:	6093      	str	r3, [r2, #8]
=======
 80061c4:	6822      	ldr	r2, [r4, #0]
 80061c6:	6893      	ldr	r3, [r2, #8]
 80061c8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80061cc:	6961      	ldr	r1, [r4, #20]
 80061ce:	430b      	orrs	r3, r1
 80061d0:	6093      	str	r3, [r2, #8]
>>>>>>> render

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
<<<<<<< HEAD
 80062fa:	6822      	ldr	r2, [r4, #0]
 80062fc:	6893      	ldr	r3, [r2, #8]
 80062fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006302:	69a1      	ldr	r1, [r4, #24]
 8006304:	430b      	orrs	r3, r1
 8006306:	6093      	str	r3, [r2, #8]
=======
 80061d2:	6822      	ldr	r2, [r4, #0]
 80061d4:	6893      	ldr	r3, [r2, #8]
 80061d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061da:	69a1      	ldr	r1, [r4, #24]
 80061dc:	430b      	orrs	r3, r1
 80061de:	6093      	str	r3, [r2, #8]
>>>>>>> render
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
<<<<<<< HEAD
 8006308:	2301      	movs	r3, #1
 800630a:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 800630c:	2000      	movs	r0, #0
}
 800630e:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8006310:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8006312:	f7fb f9c1 	bl	8001698 <HAL_CRC_MspInit>
 8006316:	e7d7      	b.n	80062c8 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006318:	68e2      	ldr	r2, [r4, #12]
 800631a:	68a1      	ldr	r1, [r4, #8]
 800631c:	4620      	mov	r0, r4
 800631e:	f000 f80d 	bl	800633c <HAL_CRCEx_Polynomial_Set>
 8006322:	2800      	cmp	r0, #0
 8006324:	d0dc      	beq.n	80062e0 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 8006326:	2001      	movs	r0, #1
 8006328:	e7f1      	b.n	800630e <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	6922      	ldr	r2, [r4, #16]
 800632e:	611a      	str	r2, [r3, #16]
 8006330:	e7dc      	b.n	80062ec <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 8006332:	2001      	movs	r0, #1
}
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	04c11db7 	.word	0x04c11db7

0800633c <HAL_CRCEx_Polynomial_Set>:
=======
 80061e0:	2301      	movs	r3, #1
 80061e2:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 80061e4:	2000      	movs	r0, #0
}
 80061e6:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80061e8:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80061ea:	f7fb fa55 	bl	8001698 <HAL_CRC_MspInit>
 80061ee:	e7d7      	b.n	80061a0 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80061f0:	68e2      	ldr	r2, [r4, #12]
 80061f2:	68a1      	ldr	r1, [r4, #8]
 80061f4:	4620      	mov	r0, r4
 80061f6:	f000 f80d 	bl	8006214 <HAL_CRCEx_Polynomial_Set>
 80061fa:	2800      	cmp	r0, #0
 80061fc:	d0dc      	beq.n	80061b8 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 80061fe:	2001      	movs	r0, #1
 8006200:	e7f1      	b.n	80061e6 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	6922      	ldr	r2, [r4, #16]
 8006206:	611a      	str	r2, [r3, #16]
 8006208:	e7dc      	b.n	80061c4 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 800620a:	2001      	movs	r0, #1
}
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	04c11db7 	.word	0x04c11db7

08006214 <HAL_CRCEx_Polynomial_Set>:
>>>>>>> render
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
<<<<<<< HEAD
 800633c:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800633e:	231f      	movs	r3, #31
=======
 8006214:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006216:	231f      	movs	r3, #31
>>>>>>> render
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
<<<<<<< HEAD
 8006340:	461c      	mov	r4, r3
 8006342:	3b01      	subs	r3, #1
 8006344:	b134      	cbz	r4, 8006354 <HAL_CRCEx_Polynomial_Set+0x18>
 8006346:	f003 0c1f 	and.w	ip, r3, #31
 800634a:	fa21 fc0c 	lsr.w	ip, r1, ip
 800634e:	f01c 0f01 	tst.w	ip, #1
 8006352:	d0f5      	beq.n	8006340 <HAL_CRCEx_Polynomial_Set+0x4>
=======
 8006218:	461c      	mov	r4, r3
 800621a:	3b01      	subs	r3, #1
 800621c:	b134      	cbz	r4, 800622c <HAL_CRCEx_Polynomial_Set+0x18>
 800621e:	f003 0c1f 	and.w	ip, r3, #31
 8006222:	fa21 fc0c 	lsr.w	ip, r1, ip
 8006226:	f01c 0f01 	tst.w	ip, #1
 800622a:	d0f5      	beq.n	8006218 <HAL_CRCEx_Polynomial_Set+0x4>
>>>>>>> render
  {
  }

  switch (PolyLength)
<<<<<<< HEAD
 8006354:	2a18      	cmp	r2, #24
 8006356:	d822      	bhi.n	800639e <HAL_CRCEx_Polynomial_Set+0x62>
 8006358:	e8df f002 	tbb	[pc, r2]
 800635c:	2121210f 	.word	0x2121210f
 8006360:	21212121 	.word	0x21212121
 8006364:	2121211d 	.word	0x2121211d
 8006368:	21212121 	.word	0x21212121
 800636c:	21212119 	.word	0x21212119
 8006370:	21212121 	.word	0x21212121
 8006374:	0d          	.byte	0x0d
 8006375:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006376:	2b06      	cmp	r3, #6
 8006378:	d815      	bhi.n	80063a6 <HAL_CRCEx_Polynomial_Set+0x6a>
=======
 800622c:	2a18      	cmp	r2, #24
 800622e:	d822      	bhi.n	8006276 <HAL_CRCEx_Polynomial_Set+0x62>
 8006230:	e8df f002 	tbb	[pc, r2]
 8006234:	2121210f 	.word	0x2121210f
 8006238:	21212121 	.word	0x21212121
 800623c:	2121211d 	.word	0x2121211d
 8006240:	21212121 	.word	0x21212121
 8006244:	21212119 	.word	0x21212119
 8006248:	21212121 	.word	0x21212121
 800624c:	0d          	.byte	0x0d
 800624d:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800624e:	2b06      	cmp	r3, #6
 8006250:	d815      	bhi.n	800627e <HAL_CRCEx_Polynomial_Set+0x6a>
>>>>>>> render
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
<<<<<<< HEAD
 800637a:	6803      	ldr	r3, [r0, #0]
 800637c:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800637e:	6801      	ldr	r1, [r0, #0]
 8006380:	688b      	ldr	r3, [r1, #8]
 8006382:	f023 0318 	bic.w	r3, r3, #24
 8006386:	431a      	orrs	r2, r3
 8006388:	608a      	str	r2, [r1, #8]
 800638a:	2000      	movs	r0, #0
 800638c:	e008      	b.n	80063a0 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_8B)
 800638e:	2b07      	cmp	r3, #7
 8006390:	d9f3      	bls.n	800637a <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8006392:	2001      	movs	r0, #1
 8006394:	e004      	b.n	80063a0 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_16B)
 8006396:	2b0f      	cmp	r3, #15
 8006398:	d9ef      	bls.n	800637a <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 800639a:	2001      	movs	r0, #1
 800639c:	e000      	b.n	80063a0 <HAL_CRCEx_Polynomial_Set+0x64>
  switch (PolyLength)
 800639e:	2001      	movs	r0, #1
=======
 8006252:	6803      	ldr	r3, [r0, #0]
 8006254:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006256:	6801      	ldr	r1, [r0, #0]
 8006258:	688b      	ldr	r3, [r1, #8]
 800625a:	f023 0318 	bic.w	r3, r3, #24
 800625e:	431a      	orrs	r2, r3
 8006260:	608a      	str	r2, [r1, #8]
 8006262:	2000      	movs	r0, #0
 8006264:	e008      	b.n	8006278 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_8B)
 8006266:	2b07      	cmp	r3, #7
 8006268:	d9f3      	bls.n	8006252 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 800626a:	2001      	movs	r0, #1
 800626c:	e004      	b.n	8006278 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_16B)
 800626e:	2b0f      	cmp	r3, #15
 8006270:	d9ef      	bls.n	8006252 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8006272:	2001      	movs	r0, #1
 8006274:	e000      	b.n	8006278 <HAL_CRCEx_Polynomial_Set+0x64>
  switch (PolyLength)
 8006276:	2001      	movs	r0, #1
>>>>>>> render
  }
  /* Return function status */
  return status;
}
<<<<<<< HEAD
 80063a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063a4:	4770      	bx	lr
        status =   HAL_ERROR;
 80063a6:	2001      	movs	r0, #1
 80063a8:	e7fa      	b.n	80063a0 <HAL_CRCEx_Polynomial_Set+0x64>

080063aa <HAL_DAC_Init>:
=======
 8006278:	f85d 4b04 	ldr.w	r4, [sp], #4
 800627c:	4770      	bx	lr
        status =   HAL_ERROR;
 800627e:	2001      	movs	r0, #1
 8006280:	e7fa      	b.n	8006278 <HAL_CRCEx_Polynomial_Set+0x64>

08006282 <HAL_DAC_Init>:
>>>>>>> render
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
<<<<<<< HEAD
 80063aa:	b170      	cbz	r0, 80063ca <HAL_DAC_Init+0x20>
{
 80063ac:	b510      	push	{r4, lr}
 80063ae:	4604      	mov	r4, r0
=======
 8006282:	b170      	cbz	r0, 80062a2 <HAL_DAC_Init+0x20>
{
 8006284:	b510      	push	{r4, lr}
 8006286:	4604      	mov	r4, r0
>>>>>>> render
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
<<<<<<< HEAD
 80063b0:	7903      	ldrb	r3, [r0, #4]
 80063b2:	b133      	cbz	r3, 80063c2 <HAL_DAC_Init+0x18>
=======
 8006288:	7903      	ldrb	r3, [r0, #4]
 800628a:	b133      	cbz	r3, 800629a <HAL_DAC_Init+0x18>
>>>>>>> render
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
<<<<<<< HEAD
 80063b4:	2302      	movs	r3, #2
 80063b6:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80063b8:	2000      	movs	r0, #0
 80063ba:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80063bc:	2301      	movs	r3, #1
 80063be:	7123      	strb	r3, [r4, #4]
=======
 800628c:	2302      	movs	r3, #2
 800628e:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006290:	2000      	movs	r0, #0
 8006292:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006294:	2301      	movs	r3, #1
 8006296:	7123      	strb	r3, [r4, #4]
>>>>>>> render

  /* Return function status */
  return HAL_OK;
}
<<<<<<< HEAD
 80063c0:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80063c2:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80063c4:	f7fb f9da 	bl	800177c <HAL_DAC_MspInit>
 80063c8:	e7f4      	b.n	80063b4 <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 80063ca:	2001      	movs	r0, #1
}
 80063cc:	4770      	bx	lr
	...

080063d0 <HAL_DAC_ConfigChannel>:
=======
 8006298:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800629a:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 800629c:	f7fb fa6e 	bl	800177c <HAL_DAC_MspInit>
 80062a0:	e7f4      	b.n	800628c <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 80062a2:	2001      	movs	r0, #1
}
 80062a4:	4770      	bx	lr
	...

080062a8 <HAL_DAC_ConfigChannel>:
>>>>>>> render
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
<<<<<<< HEAD
 80063d0:	7943      	ldrb	r3, [r0, #5]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	f000 80f4 	beq.w	80065c0 <HAL_DAC_ConfigChannel+0x1f0>
{
 80063d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063dc:	4604      	mov	r4, r0
 80063de:	460e      	mov	r6, r1
 80063e0:	4615      	mov	r5, r2
  __HAL_LOCK(hdac);
 80063e2:	2301      	movs	r3, #1
 80063e4:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80063e6:	2302      	movs	r3, #2
 80063e8:	7103      	strb	r3, [r0, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80063ea:	688b      	ldr	r3, [r1, #8]
 80063ec:	2b04      	cmp	r3, #4
 80063ee:	d017      	beq.n	8006420 <HAL_DAC_ConfigChannel+0x50>
=======
 80062a8:	7943      	ldrb	r3, [r0, #5]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	f000 80f4 	beq.w	8006498 <HAL_DAC_ConfigChannel+0x1f0>
{
 80062b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b4:	4604      	mov	r4, r0
 80062b6:	460e      	mov	r6, r1
 80062b8:	4615      	mov	r5, r2
  __HAL_LOCK(hdac);
 80062ba:	2301      	movs	r3, #1
 80062bc:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80062be:	2302      	movs	r3, #2
 80062c0:	7103      	strb	r3, [r0, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80062c2:	688b      	ldr	r3, [r1, #8]
 80062c4:	2b04      	cmp	r3, #4
 80062c6:	d017      	beq.n	80062f8 <HAL_DAC_ConfigChannel+0x50>
>>>>>>> render
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
<<<<<<< HEAD
 80063f0:	69f3      	ldr	r3, [r6, #28]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d05e      	beq.n	80064b4 <HAL_DAC_ConfigChannel+0xe4>
=======
 80062c8:	69f3      	ldr	r3, [r6, #28]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d05e      	beq.n	800638c <HAL_DAC_ConfigChannel+0xe4>
>>>>>>> render
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
<<<<<<< HEAD
 80063f6:	6823      	ldr	r3, [r4, #0]
 80063f8:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80063fa:	f005 0510 	and.w	r5, r5, #16
 80063fe:	2307      	movs	r3, #7
 8006400:	40ab      	lsls	r3, r5
 8006402:	ea27 0703 	bic.w	r7, r7, r3
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006406:	69b3      	ldr	r3, [r6, #24]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d060      	beq.n	80064ce <HAL_DAC_ConfigChannel+0xfe>
=======
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80062d2:	f005 0510 	and.w	r5, r5, #16
 80062d6:	2307      	movs	r3, #7
 80062d8:	40ab      	lsls	r3, r5
 80062da:	ea27 0703 	bic.w	r7, r7, r3
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80062de:	69b3      	ldr	r3, [r6, #24]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d060      	beq.n	80063a6 <HAL_DAC_ConfigChannel+0xfe>
>>>>>>> render
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
<<<<<<< HEAD
 800640c:	2b02      	cmp	r3, #2
 800640e:	f000 80bd 	beq.w	800658c <HAL_DAC_ConfigChannel+0x1bc>
=======
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	f000 80bd 	beq.w	8006464 <HAL_DAC_ConfigChannel+0x1bc>
>>>>>>> render
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
<<<<<<< HEAD
 8006412:	6973      	ldr	r3, [r6, #20]
 8006414:	2b00      	cmp	r3, #0
 8006416:	f040 80bc 	bne.w	8006592 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800641a:	f04f 0801 	mov.w	r8, #1
 800641e:	e058      	b.n	80064d2 <HAL_DAC_ConfigChannel+0x102>
    tickstart = HAL_GetTick();
 8006420:	f7ff f8aa 	bl	8005578 <HAL_GetTick>
 8006424:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8006426:	b17d      	cbz	r5, 8006448 <HAL_DAC_ConfigChannel+0x78>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800642c:	2b00      	cmp	r3, #0
 800642e:	da3a      	bge.n	80064a6 <HAL_DAC_ConfigChannel+0xd6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006430:	f7ff f8a2 	bl	8005578 <HAL_GetTick>
 8006434:	1bc0      	subs	r0, r0, r7
 8006436:	2801      	cmp	r0, #1
 8006438:	d9f6      	bls.n	8006428 <HAL_DAC_ConfigChannel+0x58>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800643a:	6923      	ldr	r3, [r4, #16]
 800643c:	f043 0308 	orr.w	r3, r3, #8
 8006440:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006442:	2003      	movs	r0, #3
 8006444:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8006446:	e09f      	b.n	8006588 <HAL_DAC_ConfigChannel+0x1b8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006448:	6823      	ldr	r3, [r4, #0]
 800644a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800644c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006450:	d00b      	beq.n	800646a <HAL_DAC_ConfigChannel+0x9a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006452:	f7ff f891 	bl	8005578 <HAL_GetTick>
 8006456:	1bc0      	subs	r0, r0, r7
 8006458:	2801      	cmp	r0, #1
 800645a:	d9f5      	bls.n	8006448 <HAL_DAC_ConfigChannel+0x78>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800645c:	6923      	ldr	r3, [r4, #16]
 800645e:	f043 0308 	orr.w	r3, r3, #8
 8006462:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006464:	2003      	movs	r0, #3
 8006466:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8006468:	e08e      	b.n	8006588 <HAL_DAC_ConfigChannel+0x1b8>
      HAL_Delay(1);
 800646a:	2001      	movs	r0, #1
 800646c:	f7ff f88a 	bl	8005584 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8006474:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006476:	6820      	ldr	r0, [r4, #0]
 8006478:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800647a:	f005 0110 	and.w	r1, r5, #16
 800647e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006482:	408b      	lsls	r3, r1
 8006484:	ea22 0203 	bic.w	r2, r2, r3
 8006488:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800648a:	408b      	lsls	r3, r1
 800648c:	431a      	orrs	r2, r3
 800648e:	6482      	str	r2, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006490:	6820      	ldr	r0, [r4, #0]
 8006492:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006494:	22ff      	movs	r2, #255	; 0xff
 8006496:	408a      	lsls	r2, r1
 8006498:	ea23 0302 	bic.w	r3, r3, r2
 800649c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800649e:	408a      	lsls	r2, r1
 80064a0:	4313      	orrs	r3, r2
 80064a2:	64c3      	str	r3, [r0, #76]	; 0x4c
 80064a4:	e7a4      	b.n	80063f0 <HAL_DAC_ConfigChannel+0x20>
      HAL_Delay(1U);
 80064a6:	2001      	movs	r0, #1
 80064a8:	f7ff f86c 	bl	8005584 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80064ac:	6823      	ldr	r3, [r4, #0]
 80064ae:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80064b0:	645a      	str	r2, [r3, #68]	; 0x44
 80064b2:	e7e0      	b.n	8006476 <HAL_DAC_ConfigChannel+0xa6>
    tmpreg1 = hdac->Instance->CCR;
 80064b4:	6821      	ldr	r1, [r4, #0]
 80064b6:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80064b8:	f005 0010 	and.w	r0, r5, #16
 80064bc:	231f      	movs	r3, #31
 80064be:	4083      	lsls	r3, r0
 80064c0:	ea22 0203 	bic.w	r2, r2, r3
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80064c4:	6a33      	ldr	r3, [r6, #32]
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80064c6:	4083      	lsls	r3, r0
 80064c8:	4313      	orrs	r3, r2
    hdac->Instance->CCR = tmpreg1;
 80064ca:	638b      	str	r3, [r1, #56]	; 0x38
 80064cc:	e793      	b.n	80063f6 <HAL_DAC_ConfigChannel+0x26>
    connectOnChip = 0x00000000UL;
 80064ce:	f04f 0800 	mov.w	r8, #0
=======
 80062ea:	6973      	ldr	r3, [r6, #20]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f040 80bc 	bne.w	800646a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80062f2:	f04f 0801 	mov.w	r8, #1
 80062f6:	e058      	b.n	80063aa <HAL_DAC_ConfigChannel+0x102>
    tickstart = HAL_GetTick();
 80062f8:	f7ff f8aa 	bl	8005450 <HAL_GetTick>
 80062fc:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 80062fe:	b17d      	cbz	r5, 8006320 <HAL_DAC_ConfigChannel+0x78>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006300:	6823      	ldr	r3, [r4, #0]
 8006302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006304:	2b00      	cmp	r3, #0
 8006306:	da3a      	bge.n	800637e <HAL_DAC_ConfigChannel+0xd6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006308:	f7ff f8a2 	bl	8005450 <HAL_GetTick>
 800630c:	1bc0      	subs	r0, r0, r7
 800630e:	2801      	cmp	r0, #1
 8006310:	d9f6      	bls.n	8006300 <HAL_DAC_ConfigChannel+0x58>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006312:	6923      	ldr	r3, [r4, #16]
 8006314:	f043 0308 	orr.w	r3, r3, #8
 8006318:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800631a:	2003      	movs	r0, #3
 800631c:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 800631e:	e09f      	b.n	8006460 <HAL_DAC_ConfigChannel+0x1b8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006320:	6823      	ldr	r3, [r4, #0]
 8006322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006324:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006328:	d00b      	beq.n	8006342 <HAL_DAC_ConfigChannel+0x9a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800632a:	f7ff f891 	bl	8005450 <HAL_GetTick>
 800632e:	1bc0      	subs	r0, r0, r7
 8006330:	2801      	cmp	r0, #1
 8006332:	d9f5      	bls.n	8006320 <HAL_DAC_ConfigChannel+0x78>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006334:	6923      	ldr	r3, [r4, #16]
 8006336:	f043 0308 	orr.w	r3, r3, #8
 800633a:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800633c:	2003      	movs	r0, #3
 800633e:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8006340:	e08e      	b.n	8006460 <HAL_DAC_ConfigChannel+0x1b8>
      HAL_Delay(1);
 8006342:	2001      	movs	r0, #1
 8006344:	f7ff f88a 	bl	800545c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800634c:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800634e:	6820      	ldr	r0, [r4, #0]
 8006350:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006352:	f005 0110 	and.w	r1, r5, #16
 8006356:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800635a:	408b      	lsls	r3, r1
 800635c:	ea22 0203 	bic.w	r2, r2, r3
 8006360:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8006362:	408b      	lsls	r3, r1
 8006364:	431a      	orrs	r2, r3
 8006366:	6482      	str	r2, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006368:	6820      	ldr	r0, [r4, #0]
 800636a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800636c:	22ff      	movs	r2, #255	; 0xff
 800636e:	408a      	lsls	r2, r1
 8006370:	ea23 0302 	bic.w	r3, r3, r2
 8006374:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8006376:	408a      	lsls	r2, r1
 8006378:	4313      	orrs	r3, r2
 800637a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800637c:	e7a4      	b.n	80062c8 <HAL_DAC_ConfigChannel+0x20>
      HAL_Delay(1U);
 800637e:	2001      	movs	r0, #1
 8006380:	f7ff f86c 	bl	800545c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8006388:	645a      	str	r2, [r3, #68]	; 0x44
 800638a:	e7e0      	b.n	800634e <HAL_DAC_ConfigChannel+0xa6>
    tmpreg1 = hdac->Instance->CCR;
 800638c:	6821      	ldr	r1, [r4, #0]
 800638e:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006390:	f005 0010 	and.w	r0, r5, #16
 8006394:	231f      	movs	r3, #31
 8006396:	4083      	lsls	r3, r0
 8006398:	ea22 0203 	bic.w	r2, r2, r3
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800639c:	6a33      	ldr	r3, [r6, #32]
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800639e:	4083      	lsls	r3, r0
 80063a0:	4313      	orrs	r3, r2
    hdac->Instance->CCR = tmpreg1;
 80063a2:	638b      	str	r3, [r1, #56]	; 0x38
 80063a4:	e793      	b.n	80062ce <HAL_DAC_ConfigChannel+0x26>
    connectOnChip = 0x00000000UL;
 80063a6:	f04f 0800 	mov.w	r8, #0
>>>>>>> render
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
<<<<<<< HEAD
 80064d2:	68b3      	ldr	r3, [r6, #8]
 80064d4:	6972      	ldr	r2, [r6, #20]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	ea43 0308 	orr.w	r3, r3, r8
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80064dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064e0:	40aa      	lsls	r2, r5
 80064e2:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80064e6:	7932      	ldrb	r2, [r6, #4]
 80064e8:	2a01      	cmp	r2, #1
 80064ea:	d055      	beq.n	8006598 <HAL_DAC_ConfigChannel+0x1c8>
 80064ec:	f04f 0800 	mov.w	r8, #0
 80064f0:	ea48 0303 	orr.w	r3, r8, r3
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80064f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064f8:	40aa      	lsls	r2, r5
 80064fa:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80064fe:	7972      	ldrb	r2, [r6, #5]
 8006500:	2a01      	cmp	r2, #1
 8006502:	d04c      	beq.n	800659e <HAL_DAC_ConfigChannel+0x1ce>
 8006504:	f04f 0800 	mov.w	r8, #0
 8006508:	ea48 0803 	orr.w	r8, r8, r3
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800650c:	f427 4740 	bic.w	r7, r7, #49152	; 0xc000
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006510:	6833      	ldr	r3, [r6, #0]
 8006512:	2b02      	cmp	r3, #2
 8006514:	d046      	beq.n	80065a4 <HAL_DAC_ConfigChannel+0x1d4>
=======
 80063aa:	68b3      	ldr	r3, [r6, #8]
 80063ac:	6972      	ldr	r2, [r6, #20]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	ea43 0308 	orr.w	r3, r3, r8
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80063b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063b8:	40aa      	lsls	r2, r5
 80063ba:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80063be:	7932      	ldrb	r2, [r6, #4]
 80063c0:	2a01      	cmp	r2, #1
 80063c2:	d055      	beq.n	8006470 <HAL_DAC_ConfigChannel+0x1c8>
 80063c4:	f04f 0800 	mov.w	r8, #0
 80063c8:	ea48 0303 	orr.w	r3, r8, r3
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80063cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063d0:	40aa      	lsls	r2, r5
 80063d2:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80063d6:	7972      	ldrb	r2, [r6, #5]
 80063d8:	2a01      	cmp	r2, #1
 80063da:	d04c      	beq.n	8006476 <HAL_DAC_ConfigChannel+0x1ce>
 80063dc:	f04f 0800 	mov.w	r8, #0
 80063e0:	ea48 0803 	orr.w	r8, r8, r3
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80063e4:	f427 4740 	bic.w	r7, r7, #49152	; 0xc000
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80063e8:	6833      	ldr	r3, [r6, #0]
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d046      	beq.n	800647c <HAL_DAC_ConfigChannel+0x1d4>
>>>>>>> render
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
<<<<<<< HEAD
 8006516:	431f      	orrs	r7, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006518:	fa08 f805 	lsl.w	r8, r8, r5
 800651c:	ea48 0707 	orr.w	r7, r8, r7
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006520:	6823      	ldr	r3, [r4, #0]
 8006522:	63df      	str	r7, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006524:	6821      	ldr	r1, [r4, #0]
 8006526:	680b      	ldr	r3, [r1, #0]
 8006528:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800652c:	40aa      	lsls	r2, r5
 800652e:	ea23 0302 	bic.w	r3, r3, r2
 8006532:	600b      	str	r3, [r1, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006534:	6821      	ldr	r1, [r4, #0]
 8006536:	680b      	ldr	r3, [r1, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006538:	f640 72fe 	movw	r2, #4094	; 0xffe
 800653c:	40aa      	lsls	r2, r5
 800653e:	ea23 0202 	bic.w	r2, r3, r2
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006542:	68f3      	ldr	r3, [r6, #12]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006544:	40ab      	lsls	r3, r5
 8006546:	4313      	orrs	r3, r2
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006548:	600b      	str	r3, [r1, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800654a:	6821      	ldr	r1, [r4, #0]
 800654c:	680b      	ldr	r3, [r1, #0]
 800654e:	22c0      	movs	r2, #192	; 0xc0
 8006550:	40aa      	lsls	r2, r5
 8006552:	ea23 0302 	bic.w	r3, r3, r2
 8006556:	600b      	str	r3, [r1, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8006558:	68f2      	ldr	r2, [r6, #12]
 800655a:	f3c2 0383 	ubfx	r3, r2, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800655e:	6932      	ldr	r2, [r6, #16]
 8006560:	0892      	lsrs	r2, r2, #2
 8006562:	0212      	lsls	r2, r2, #8
 8006564:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8006568:	431a      	orrs	r2, r3
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800656a:	6820      	ldr	r0, [r4, #0]
 800656c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800656e:	f640 710f 	movw	r1, #3855	; 0xf0f
 8006572:	40a9      	lsls	r1, r5
 8006574:	ea23 0301 	bic.w	r3, r3, r1
 8006578:	fa02 f505 	lsl.w	r5, r2, r5
 800657c:	431d      	orrs	r5, r3
 800657e:	6605      	str	r5, [r0, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006580:	2301      	movs	r3, #1
 8006582:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006584:	2000      	movs	r0, #0
 8006586:	7160      	strb	r0, [r4, #5]
=======
 80063ee:	431f      	orrs	r7, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80063f0:	fa08 f805 	lsl.w	r8, r8, r5
 80063f4:	ea48 0707 	orr.w	r7, r8, r7
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	63df      	str	r7, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80063fc:	6821      	ldr	r1, [r4, #0]
 80063fe:	680b      	ldr	r3, [r1, #0]
 8006400:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006404:	40aa      	lsls	r2, r5
 8006406:	ea23 0302 	bic.w	r3, r3, r2
 800640a:	600b      	str	r3, [r1, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800640c:	6821      	ldr	r1, [r4, #0]
 800640e:	680b      	ldr	r3, [r1, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006410:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006414:	40aa      	lsls	r2, r5
 8006416:	ea23 0202 	bic.w	r2, r3, r2
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800641a:	68f3      	ldr	r3, [r6, #12]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800641c:	40ab      	lsls	r3, r5
 800641e:	4313      	orrs	r3, r2
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006420:	600b      	str	r3, [r1, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006422:	6821      	ldr	r1, [r4, #0]
 8006424:	680b      	ldr	r3, [r1, #0]
 8006426:	22c0      	movs	r2, #192	; 0xc0
 8006428:	40aa      	lsls	r2, r5
 800642a:	ea23 0302 	bic.w	r3, r3, r2
 800642e:	600b      	str	r3, [r1, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8006430:	68f2      	ldr	r2, [r6, #12]
 8006432:	f3c2 0383 	ubfx	r3, r2, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006436:	6932      	ldr	r2, [r6, #16]
 8006438:	0892      	lsrs	r2, r2, #2
 800643a:	0212      	lsls	r2, r2, #8
 800643c:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8006440:	431a      	orrs	r2, r3
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8006442:	6820      	ldr	r0, [r4, #0]
 8006444:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006446:	f640 710f 	movw	r1, #3855	; 0xf0f
 800644a:	40a9      	lsls	r1, r5
 800644c:	ea23 0301 	bic.w	r3, r3, r1
 8006450:	fa02 f505 	lsl.w	r5, r2, r5
 8006454:	431d      	orrs	r5, r3
 8006456:	6605      	str	r5, [r0, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006458:	2301      	movs	r3, #1
 800645a:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800645c:	2000      	movs	r0, #0
 800645e:	7160      	strb	r0, [r4, #5]
>>>>>>> render

  /* Return function status */
  return HAL_OK;
}
<<<<<<< HEAD
 8006588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = DAC_MCR_MODE1_0;
 800658c:	f04f 0801 	mov.w	r8, #1
 8006590:	e79f      	b.n	80064d2 <HAL_DAC_ConfigChannel+0x102>
      connectOnChip = 0x00000000UL;
 8006592:	f04f 0800 	mov.w	r8, #0
 8006596:	e79c      	b.n	80064d2 <HAL_DAC_ConfigChannel+0x102>
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006598:	f44f 7880 	mov.w	r8, #256	; 0x100
 800659c:	e7a8      	b.n	80064f0 <HAL_DAC_ConfigChannel+0x120>
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800659e:	f44f 7800 	mov.w	r8, #512	; 0x200
 80065a2:	e7b1      	b.n	8006508 <HAL_DAC_ConfigChannel+0x138>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80065a4:	f002 fd3a 	bl	800901c <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80065a8:	4b06      	ldr	r3, [pc, #24]	; (80065c4 <HAL_DAC_ConfigChannel+0x1f4>)
 80065aa:	4298      	cmp	r0, r3
 80065ac:	d902      	bls.n	80065b4 <HAL_DAC_ConfigChannel+0x1e4>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80065ae:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 80065b2:	e7b1      	b.n	8006518 <HAL_DAC_ConfigChannel+0x148>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80065b4:	4b04      	ldr	r3, [pc, #16]	; (80065c8 <HAL_DAC_ConfigChannel+0x1f8>)
 80065b6:	4298      	cmp	r0, r3
 80065b8:	d9ae      	bls.n	8006518 <HAL_DAC_ConfigChannel+0x148>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80065ba:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80065be:	e7ab      	b.n	8006518 <HAL_DAC_ConfigChannel+0x148>
  __HAL_LOCK(hdac);
 80065c0:	2002      	movs	r0, #2
}
 80065c2:	4770      	bx	lr
 80065c4:	09896800 	.word	0x09896800
 80065c8:	04c4b400 	.word	0x04c4b400

080065cc <DMA_SetConfig>:
=======
 8006460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = DAC_MCR_MODE1_0;
 8006464:	f04f 0801 	mov.w	r8, #1
 8006468:	e79f      	b.n	80063aa <HAL_DAC_ConfigChannel+0x102>
      connectOnChip = 0x00000000UL;
 800646a:	f04f 0800 	mov.w	r8, #0
 800646e:	e79c      	b.n	80063aa <HAL_DAC_ConfigChannel+0x102>
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006470:	f44f 7880 	mov.w	r8, #256	; 0x100
 8006474:	e7a8      	b.n	80063c8 <HAL_DAC_ConfigChannel+0x120>
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006476:	f44f 7800 	mov.w	r8, #512	; 0x200
 800647a:	e7b1      	b.n	80063e0 <HAL_DAC_ConfigChannel+0x138>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800647c:	f002 fd3a 	bl	8008ef4 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8006480:	4b06      	ldr	r3, [pc, #24]	; (800649c <HAL_DAC_ConfigChannel+0x1f4>)
 8006482:	4298      	cmp	r0, r3
 8006484:	d902      	bls.n	800648c <HAL_DAC_ConfigChannel+0x1e4>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8006486:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 800648a:	e7b1      	b.n	80063f0 <HAL_DAC_ConfigChannel+0x148>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800648c:	4b04      	ldr	r3, [pc, #16]	; (80064a0 <HAL_DAC_ConfigChannel+0x1f8>)
 800648e:	4298      	cmp	r0, r3
 8006490:	d9ae      	bls.n	80063f0 <HAL_DAC_ConfigChannel+0x148>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006492:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8006496:	e7ab      	b.n	80063f0 <HAL_DAC_ConfigChannel+0x148>
  __HAL_LOCK(hdac);
 8006498:	2002      	movs	r0, #2
}
 800649a:	4770      	bx	lr
 800649c:	09896800 	.word	0x09896800
 80064a0:	04c4b400 	.word	0x04c4b400

080064a4 <DMA_SetConfig>:
>>>>>>> render
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 80065cc:	b430      	push	{r4, r5}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065ce:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80065d0:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80065d2:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80065d4:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80065d6:	b114      	cbz	r4, 80065de <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065d8:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80065da:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80065dc:	6065      	str	r5, [r4, #4]
=======
 80064a4:	b430      	push	{r4, r5}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064a6:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80064a8:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80064aa:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80064ac:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80064ae:	b114      	cbz	r4, 80064b6 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064b0:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80064b2:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80064b4:	6065      	str	r5, [r4, #4]
>>>>>>> render
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
<<<<<<< HEAD
 80065de:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80065e0:	f004 0c1f 	and.w	ip, r4, #31
 80065e4:	2401      	movs	r4, #1
 80065e6:	fa04 f40c 	lsl.w	r4, r4, ip
 80065ea:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80065ec:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80065ee:	6804      	ldr	r4, [r0, #0]
 80065f0:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065f2:	6883      	ldr	r3, [r0, #8]
 80065f4:	2b10      	cmp	r3, #16
 80065f6:	d005      	beq.n	8006604 <DMA_SetConfig+0x38>
=======
 80064b6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80064b8:	f004 0c1f 	and.w	ip, r4, #31
 80064bc:	2401      	movs	r4, #1
 80064be:	fa04 f40c 	lsl.w	r4, r4, ip
 80064c2:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80064c4:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80064c6:	6804      	ldr	r4, [r0, #0]
 80064c8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064ca:	6883      	ldr	r3, [r0, #8]
 80064cc:	2b10      	cmp	r3, #16
 80064ce:	d005      	beq.n	80064dc <DMA_SetConfig+0x38>
>>>>>>> render
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
<<<<<<< HEAD
 80065f8:	6803      	ldr	r3, [r0, #0]
 80065fa:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80065fc:	6803      	ldr	r3, [r0, #0]
 80065fe:	60da      	str	r2, [r3, #12]
  }
}
 8006600:	bc30      	pop	{r4, r5}
 8006602:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8006604:	6803      	ldr	r3, [r0, #0]
 8006606:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8006608:	6803      	ldr	r3, [r0, #0]
 800660a:	60d9      	str	r1, [r3, #12]
 800660c:	e7f8      	b.n	8006600 <DMA_SetConfig+0x34>
	...

08006610 <DMA_CalcDMAMUXChannelBaseAndMask>:
=======
 80064d0:	6803      	ldr	r3, [r0, #0]
 80064d2:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80064d4:	6803      	ldr	r3, [r0, #0]
 80064d6:	60da      	str	r2, [r3, #12]
  }
}
 80064d8:	bc30      	pop	{r4, r5}
 80064da:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80064dc:	6803      	ldr	r3, [r0, #0]
 80064de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80064e0:	6803      	ldr	r3, [r0, #0]
 80064e2:	60d9      	str	r1, [r3, #12]
 80064e4:	e7f8      	b.n	80064d8 <DMA_SetConfig+0x34>
	...

080064e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
>>>>>>> render
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
<<<<<<< HEAD
 8006610:	6803      	ldr	r3, [r0, #0]
 8006612:	4a0c      	ldr	r2, [pc, #48]	; (8006644 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d813      	bhi.n	8006640 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006618:	490b      	ldr	r1, [pc, #44]	; (8006648 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
=======
 80064e8:	6803      	ldr	r3, [r0, #0]
 80064ea:	4a0c      	ldr	r2, [pc, #48]	; (800651c <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d813      	bhi.n	8006518 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80064f0:	490b      	ldr	r1, [pc, #44]	; (8006520 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
>>>>>>> render
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
<<<<<<< HEAD
 800661a:	b2db      	uxtb	r3, r3
 800661c:	3b08      	subs	r3, #8
 800661e:	4a0b      	ldr	r2, [pc, #44]	; (800664c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 8006620:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006624:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006626:	f022 0203 	bic.w	r2, r2, #3
 800662a:	440a      	add	r2, r1
 800662c:	6482      	str	r2, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800662e:	4a08      	ldr	r2, [pc, #32]	; (8006650 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8006630:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006632:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8006636:	2201      	movs	r2, #1
 8006638:	fa02 f303 	lsl.w	r3, r2, r3
 800663c:	6503      	str	r3, [r0, #80]	; 0x50
}
 800663e:	4770      	bx	lr
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006640:	4904      	ldr	r1, [pc, #16]	; (8006654 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8006642:	e7ea      	b.n	800661a <DMA_CalcDMAMUXChannelBaseAndMask+0xa>
 8006644:	40020407 	.word	0x40020407
 8006648:	40020800 	.word	0x40020800
 800664c:	cccccccd 	.word	0xcccccccd
 8006650:	40020880 	.word	0x40020880
 8006654:	40020820 	.word	0x40020820

08006658 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
=======
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	3b08      	subs	r3, #8
 80064f6:	4a0b      	ldr	r2, [pc, #44]	; (8006524 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 80064f8:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80064fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80064fe:	f022 0203 	bic.w	r2, r2, #3
 8006502:	440a      	add	r2, r1
 8006504:	6482      	str	r2, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006506:	4a08      	ldr	r2, [pc, #32]	; (8006528 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8006508:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800650a:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800650e:	2201      	movs	r2, #1
 8006510:	fa02 f303 	lsl.w	r3, r2, r3
 8006514:	6503      	str	r3, [r0, #80]	; 0x50
}
 8006516:	4770      	bx	lr
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006518:	4904      	ldr	r1, [pc, #16]	; (800652c <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 800651a:	e7ea      	b.n	80064f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xa>
 800651c:	40020407 	.word	0x40020407
 8006520:	40020800 	.word	0x40020800
 8006524:	cccccccd 	.word	0xcccccccd
 8006528:	40020880 	.word	0x40020880
 800652c:	40020820 	.word	0x40020820

08006530 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
>>>>>>> render
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
<<<<<<< HEAD
 8006658:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800665a:	4a07      	ldr	r2, [pc, #28]	; (8006678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 800665c:	441a      	add	r2, r3
 800665e:	0092      	lsls	r2, r2, #2
 8006660:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006662:	4a06      	ldr	r2, [pc, #24]	; (800667c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8006664:	6582      	str	r2, [r0, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006666:	3b01      	subs	r3, #1
 8006668:	f003 031f 	and.w	r3, r3, #31
 800666c:	2201      	movs	r2, #1
 800666e:	fa02 f303 	lsl.w	r3, r2, r3
 8006672:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	1000823f 	.word	0x1000823f
 800667c:	40020940 	.word	0x40020940

08006680 <HAL_DMA_Init>:
  if (hdma == NULL)
 8006680:	2800      	cmp	r0, #0
 8006682:	d05b      	beq.n	800673c <HAL_DMA_Init+0xbc>
{
 8006684:	b510      	push	{r4, lr}
 8006686:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006688:	6801      	ldr	r1, [r0, #0]
 800668a:	4b2d      	ldr	r3, [pc, #180]	; (8006740 <HAL_DMA_Init+0xc0>)
 800668c:	4299      	cmp	r1, r3
 800668e:	d83d      	bhi.n	800670c <HAL_DMA_Init+0x8c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006690:	4b2c      	ldr	r3, [pc, #176]	; (8006744 <HAL_DMA_Init+0xc4>)
 8006692:	440b      	add	r3, r1
 8006694:	4a2c      	ldr	r2, [pc, #176]	; (8006748 <HAL_DMA_Init+0xc8>)
 8006696:	fba2 2303 	umull	r2, r3, r2, r3
 800669a:	091b      	lsrs	r3, r3, #4
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80066a0:	4b2a      	ldr	r3, [pc, #168]	; (800674c <HAL_DMA_Init+0xcc>)
 80066a2:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80066a4:	2302      	movs	r3, #2
 80066a6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 80066aa:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80066ac:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80066b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 80066b4:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066b6:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 80066b8:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066ba:	6920      	ldr	r0, [r4, #16]
 80066bc:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066be:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066c0:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066c2:	69a0      	ldr	r0, [r4, #24]
 80066c4:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80066c6:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066c8:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80066ca:	6a20      	ldr	r0, [r4, #32]
 80066cc:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80066ce:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 80066d0:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80066d2:	4620      	mov	r0, r4
 80066d4:	f7ff ff9c 	bl	8006610 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80066d8:	68a3      	ldr	r3, [r4, #8]
 80066da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066de:	d020      	beq.n	8006722 <HAL_DMA_Init+0xa2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80066e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80066e2:	7922      	ldrb	r2, [r4, #4]
 80066e4:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066e6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80066e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80066ea:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80066ec:	6863      	ldr	r3, [r4, #4]
 80066ee:	3b01      	subs	r3, #1
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d919      	bls.n	8006728 <HAL_DMA_Init+0xa8>
    hdma->DMAmuxRequestGen = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80066f8:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80066fa:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066fc:	2000      	movs	r0, #0
 80066fe:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8006700:	2301      	movs	r3, #1
 8006702:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 8006706:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800670a:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800670c:	4b10      	ldr	r3, [pc, #64]	; (8006750 <HAL_DMA_Init+0xd0>)
 800670e:	440b      	add	r3, r1
 8006710:	4a0d      	ldr	r2, [pc, #52]	; (8006748 <HAL_DMA_Init+0xc8>)
 8006712:	fba2 2303 	umull	r2, r3, r2, r3
 8006716:	091b      	lsrs	r3, r3, #4
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800671c:	4b0d      	ldr	r3, [pc, #52]	; (8006754 <HAL_DMA_Init+0xd4>)
 800671e:	6403      	str	r3, [r0, #64]	; 0x40
 8006720:	e7c0      	b.n	80066a4 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006722:	2300      	movs	r3, #0
 8006724:	6063      	str	r3, [r4, #4]
 8006726:	e7db      	b.n	80066e0 <HAL_DMA_Init+0x60>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006728:	4620      	mov	r0, r4
 800672a:	f7ff ff95 	bl	8006658 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800672e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006730:	2200      	movs	r2, #0
 8006732:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006734:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006736:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006738:	605a      	str	r2, [r3, #4]
 800673a:	e7df      	b.n	80066fc <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 800673c:	2001      	movs	r0, #1
}
 800673e:	4770      	bx	lr
 8006740:	40020407 	.word	0x40020407
 8006744:	bffdfff8 	.word	0xbffdfff8
 8006748:	cccccccd 	.word	0xcccccccd
 800674c:	40020000 	.word	0x40020000
 8006750:	bffdfbf8 	.word	0xbffdfbf8
 8006754:	40020400 	.word	0x40020400

08006758 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8006758:	2800      	cmp	r0, #0
 800675a:	d04b      	beq.n	80067f4 <HAL_DMA_DeInit+0x9c>
{
 800675c:	b538      	push	{r3, r4, r5, lr}
 800675e:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8006760:	6802      	ldr	r2, [r0, #0]
 8006762:	6813      	ldr	r3, [r2, #0]
 8006764:	f023 0301 	bic.w	r3, r3, #1
 8006768:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800676a:	6802      	ldr	r2, [r0, #0]
 800676c:	4b22      	ldr	r3, [pc, #136]	; (80067f8 <HAL_DMA_DeInit+0xa0>)
 800676e:	429a      	cmp	r2, r3
 8006770:	d82c      	bhi.n	80067cc <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006772:	4b22      	ldr	r3, [pc, #136]	; (80067fc <HAL_DMA_DeInit+0xa4>)
 8006774:	4413      	add	r3, r2
 8006776:	4922      	ldr	r1, [pc, #136]	; (8006800 <HAL_DMA_DeInit+0xa8>)
 8006778:	fba1 1303 	umull	r1, r3, r1, r3
 800677c:	091b      	lsrs	r3, r3, #4
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006782:	4b20      	ldr	r3, [pc, #128]	; (8006804 <HAL_DMA_DeInit+0xac>)
 8006784:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR  = 0;
 8006786:	2500      	movs	r5, #0
 8006788:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800678a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800678c:	f003 021f 	and.w	r2, r3, #31
 8006790:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006792:	2301      	movs	r3, #1
 8006794:	4093      	lsls	r3, r2
 8006796:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006798:	4620      	mov	r0, r4
 800679a:	f7ff ff39 	bl	8006610 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0;
 800679e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80067a0:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067a2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80067a4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80067a6:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80067a8:	6863      	ldr	r3, [r4, #4]
 80067aa:	3b01      	subs	r3, #1
 80067ac:	2b03      	cmp	r3, #3
 80067ae:	d918      	bls.n	80067e2 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 80067b0:	2000      	movs	r0, #0
 80067b2:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80067b4:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80067b6:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 80067b8:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80067ba:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80067bc:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80067be:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067c0:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 80067c2:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80067c6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80067ca:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80067cc:	4b0e      	ldr	r3, [pc, #56]	; (8006808 <HAL_DMA_DeInit+0xb0>)
 80067ce:	4413      	add	r3, r2
 80067d0:	490b      	ldr	r1, [pc, #44]	; (8006800 <HAL_DMA_DeInit+0xa8>)
 80067d2:	fba1 1303 	umull	r1, r3, r1, r3
 80067d6:	091b      	lsrs	r3, r3, #4
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80067dc:	4b0b      	ldr	r3, [pc, #44]	; (800680c <HAL_DMA_DeInit+0xb4>)
 80067de:	6403      	str	r3, [r0, #64]	; 0x40
 80067e0:	e7d1      	b.n	8006786 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80067e2:	4620      	mov	r0, r4
 80067e4:	f7ff ff38 	bl	8006658 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80067e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80067ea:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067ee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80067f0:	605a      	str	r2, [r3, #4]
 80067f2:	e7dd      	b.n	80067b0 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 80067f4:	2001      	movs	r0, #1
}
 80067f6:	4770      	bx	lr
 80067f8:	40020407 	.word	0x40020407
 80067fc:	bffdfff8 	.word	0xbffdfff8
 8006800:	cccccccd 	.word	0xcccccccd
 8006804:	40020000 	.word	0x40020000
 8006808:	bffdfbf8 	.word	0xbffdfbf8
 800680c:	40020400 	.word	0x40020400

08006810 <HAL_DMA_Start_IT>:
{
 8006810:	b538      	push	{r3, r4, r5, lr}
 8006812:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8006814:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8006818:	2801      	cmp	r0, #1
 800681a:	d041      	beq.n	80068a0 <HAL_DMA_Start_IT+0x90>
 800681c:	2001      	movs	r0, #1
 800681e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8006822:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8006826:	b2c0      	uxtb	r0, r0
 8006828:	2801      	cmp	r0, #1
 800682a:	d004      	beq.n	8006836 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 800682c:	2300      	movs	r3, #0
 800682e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 8006832:	2002      	movs	r0, #2
}
 8006834:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8006836:	2002      	movs	r0, #2
 8006838:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800683c:	2000      	movs	r0, #0
 800683e:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8006840:	6825      	ldr	r5, [r4, #0]
 8006842:	6828      	ldr	r0, [r5, #0]
 8006844:	f020 0001 	bic.w	r0, r0, #1
 8006848:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800684a:	4620      	mov	r0, r4
 800684c:	f7ff febe 	bl	80065cc <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8006850:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006852:	b1d3      	cbz	r3, 800688a <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006854:	6822      	ldr	r2, [r4, #0]
 8006856:	6813      	ldr	r3, [r2, #0]
 8006858:	f043 030e 	orr.w	r3, r3, #14
 800685c:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800685e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8006866:	d003      	beq.n	8006870 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800686e:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8006870:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006872:	b11b      	cbz	r3, 800687c <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800687a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 800687c:	6822      	ldr	r2, [r4, #0]
 800687e:	6813      	ldr	r3, [r2, #0]
 8006880:	f043 0301 	orr.w	r3, r3, #1
 8006884:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006886:	2000      	movs	r0, #0
 8006888:	e7d4      	b.n	8006834 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800688a:	6822      	ldr	r2, [r4, #0]
 800688c:	6813      	ldr	r3, [r2, #0]
 800688e:	f023 0304 	bic.w	r3, r3, #4
 8006892:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006894:	6822      	ldr	r2, [r4, #0]
 8006896:	6813      	ldr	r3, [r2, #0]
 8006898:	f043 030a 	orr.w	r3, r3, #10
 800689c:	6013      	str	r3, [r2, #0]
 800689e:	e7de      	b.n	800685e <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 80068a0:	2002      	movs	r0, #2
 80068a2:	e7c7      	b.n	8006834 <HAL_DMA_Start_IT+0x24>

080068a4 <HAL_DMA_Abort_IT>:
{
 80068a4:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 80068a6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d009      	beq.n	80068c4 <HAL_DMA_Abort_IT+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068b0:	2304      	movs	r3, #4
 80068b2:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80068b4:	2301      	movs	r3, #1
 80068b6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80068ba:	2200      	movs	r2, #0
 80068bc:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    status = HAL_ERROR;
 80068c0:	4618      	mov	r0, r3
}
 80068c2:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068c4:	6802      	ldr	r2, [r0, #0]
 80068c6:	6813      	ldr	r3, [r2, #0]
 80068c8:	f023 030e 	bic.w	r3, r3, #14
 80068cc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80068ce:	6802      	ldr	r2, [r0, #0]
 80068d0:	6813      	ldr	r3, [r2, #0]
 80068d2:	f023 0301 	bic.w	r3, r3, #1
 80068d6:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80068d8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80068da:	6813      	ldr	r3, [r2, #0]
 80068dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068e0:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80068e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80068e4:	f003 021f 	and.w	r2, r3, #31
 80068e8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80068ea:	2301      	movs	r3, #1
 80068ec:	4093      	lsls	r3, r2
 80068ee:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068f0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80068f2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80068f4:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80068f6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80068f8:	b133      	cbz	r3, 8006908 <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006900:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006902:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006904:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8006906:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8006908:	2301      	movs	r3, #1
 800690a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800690e:	2300      	movs	r3, #0
 8006910:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8006914:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006916:	b113      	cbz	r3, 800691e <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 8006918:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800691a:	2000      	movs	r0, #0
 800691c:	e7d1      	b.n	80068c2 <HAL_DMA_Abort_IT+0x1e>
 800691e:	2000      	movs	r0, #0
 8006920:	e7cf      	b.n	80068c2 <HAL_DMA_Abort_IT+0x1e>

08006922 <HAL_DMA_IRQHandler>:
{
 8006922:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006924:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006926:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006928:	6804      	ldr	r4, [r0, #0]
 800692a:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800692c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800692e:	f003 031f 	and.w	r3, r3, #31
 8006932:	2204      	movs	r2, #4
 8006934:	409a      	lsls	r2, r3
 8006936:	420a      	tst	r2, r1
 8006938:	d015      	beq.n	8006966 <HAL_DMA_IRQHandler+0x44>
 800693a:	f015 0f04 	tst.w	r5, #4
 800693e:	d012      	beq.n	8006966 <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	f013 0f20 	tst.w	r3, #32
 8006946:	d103      	bne.n	8006950 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006948:	6823      	ldr	r3, [r4, #0]
 800694a:	f023 0304 	bic.w	r3, r3, #4
 800694e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006950:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006952:	f003 021f 	and.w	r2, r3, #31
 8006956:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006958:	2304      	movs	r3, #4
 800695a:	4093      	lsls	r3, r2
 800695c:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 800695e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006960:	b103      	cbz	r3, 8006964 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 8006962:	4798      	blx	r3
}
 8006964:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006966:	2202      	movs	r2, #2
 8006968:	409a      	lsls	r2, r3
 800696a:	420a      	tst	r2, r1
 800696c:	d01c      	beq.n	80069a8 <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 800696e:	f015 0f02 	tst.w	r5, #2
 8006972:	d019      	beq.n	80069a8 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006974:	6823      	ldr	r3, [r4, #0]
 8006976:	f013 0f20 	tst.w	r3, #32
 800697a:	d106      	bne.n	800698a <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	f023 030a 	bic.w	r3, r3, #10
 8006982:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8006984:	2301      	movs	r3, #1
 8006986:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800698a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800698c:	f003 021f 	and.w	r2, r3, #31
 8006990:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006992:	2302      	movs	r3, #2
 8006994:	4093      	lsls	r3, r2
 8006996:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8006998:	2300      	movs	r3, #0
 800699a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 800699e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d0df      	beq.n	8006964 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 80069a4:	4798      	blx	r3
 80069a6:	e7dd      	b.n	8006964 <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80069a8:	2208      	movs	r2, #8
 80069aa:	fa02 f303 	lsl.w	r3, r2, r3
 80069ae:	420b      	tst	r3, r1
 80069b0:	d0d8      	beq.n	8006964 <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 80069b2:	f015 0f08 	tst.w	r5, #8
 80069b6:	d0d5      	beq.n	8006964 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	f023 030e 	bic.w	r3, r3, #14
 80069be:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80069c0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80069c2:	f003 031f 	and.w	r3, r3, #31
 80069c6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80069c8:	2201      	movs	r2, #1
 80069ca:	fa02 f303 	lsl.w	r3, r2, r3
 80069ce:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80069d0:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80069d2:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80069d6:	2300      	movs	r3, #0
 80069d8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80069dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d0c0      	beq.n	8006964 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80069e2:	4798      	blx	r3
  return;
 80069e4:	e7be      	b.n	8006964 <HAL_DMA_IRQHandler+0x42>

080069e6 <HAL_DMA_GetState>:
  return hdma->State;
 80069e6:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 80069ea:	4770      	bx	lr

080069ec <FDCAN_CalcultateRamBlockAddresses>:
=======
 8006530:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006532:	4a07      	ldr	r2, [pc, #28]	; (8006550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8006534:	441a      	add	r2, r3
 8006536:	0092      	lsls	r2, r2, #2
 8006538:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800653a:	4a06      	ldr	r2, [pc, #24]	; (8006554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 800653c:	6582      	str	r2, [r0, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800653e:	3b01      	subs	r3, #1
 8006540:	f003 031f 	and.w	r3, r3, #31
 8006544:	2201      	movs	r2, #1
 8006546:	fa02 f303 	lsl.w	r3, r2, r3
 800654a:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	1000823f 	.word	0x1000823f
 8006554:	40020940 	.word	0x40020940

08006558 <HAL_DMA_Init>:
  if (hdma == NULL)
 8006558:	2800      	cmp	r0, #0
 800655a:	d05b      	beq.n	8006614 <HAL_DMA_Init+0xbc>
{
 800655c:	b510      	push	{r4, lr}
 800655e:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006560:	6801      	ldr	r1, [r0, #0]
 8006562:	4b2d      	ldr	r3, [pc, #180]	; (8006618 <HAL_DMA_Init+0xc0>)
 8006564:	4299      	cmp	r1, r3
 8006566:	d83d      	bhi.n	80065e4 <HAL_DMA_Init+0x8c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006568:	4b2c      	ldr	r3, [pc, #176]	; (800661c <HAL_DMA_Init+0xc4>)
 800656a:	440b      	add	r3, r1
 800656c:	4a2c      	ldr	r2, [pc, #176]	; (8006620 <HAL_DMA_Init+0xc8>)
 800656e:	fba2 2303 	umull	r2, r3, r2, r3
 8006572:	091b      	lsrs	r3, r3, #4
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006578:	4b2a      	ldr	r3, [pc, #168]	; (8006624 <HAL_DMA_Init+0xcc>)
 800657a:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800657c:	2302      	movs	r3, #2
 800657e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8006582:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006584:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8006588:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 800658c:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800658e:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 8006590:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006592:	6920      	ldr	r0, [r4, #16]
 8006594:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006596:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006598:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800659a:	69a0      	ldr	r0, [r4, #24]
 800659c:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800659e:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065a0:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80065a2:	6a20      	ldr	r0, [r4, #32]
 80065a4:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80065a6:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 80065a8:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80065aa:	4620      	mov	r0, r4
 80065ac:	f7ff ff9c 	bl	80064e8 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80065b0:	68a3      	ldr	r3, [r4, #8]
 80065b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065b6:	d020      	beq.n	80065fa <HAL_DMA_Init+0xa2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80065b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80065ba:	7922      	ldrb	r2, [r4, #4]
 80065bc:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80065c0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80065c2:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80065c4:	6863      	ldr	r3, [r4, #4]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	2b03      	cmp	r3, #3
 80065ca:	d919      	bls.n	8006600 <HAL_DMA_Init+0xa8>
    hdma->DMAmuxRequestGen = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80065d0:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80065d2:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065d4:	2000      	movs	r0, #0
 80065d6:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 80065d8:	2301      	movs	r3, #1
 80065da:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 80065de:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80065e2:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80065e4:	4b10      	ldr	r3, [pc, #64]	; (8006628 <HAL_DMA_Init+0xd0>)
 80065e6:	440b      	add	r3, r1
 80065e8:	4a0d      	ldr	r2, [pc, #52]	; (8006620 <HAL_DMA_Init+0xc8>)
 80065ea:	fba2 2303 	umull	r2, r3, r2, r3
 80065ee:	091b      	lsrs	r3, r3, #4
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80065f4:	4b0d      	ldr	r3, [pc, #52]	; (800662c <HAL_DMA_Init+0xd4>)
 80065f6:	6403      	str	r3, [r0, #64]	; 0x40
 80065f8:	e7c0      	b.n	800657c <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80065fa:	2300      	movs	r3, #0
 80065fc:	6063      	str	r3, [r4, #4]
 80065fe:	e7db      	b.n	80065b8 <HAL_DMA_Init+0x60>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006600:	4620      	mov	r0, r4
 8006602:	f7ff ff95 	bl	8006530 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006606:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800660c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800660e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006610:	605a      	str	r2, [r3, #4]
 8006612:	e7df      	b.n	80065d4 <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 8006614:	2001      	movs	r0, #1
}
 8006616:	4770      	bx	lr
 8006618:	40020407 	.word	0x40020407
 800661c:	bffdfff8 	.word	0xbffdfff8
 8006620:	cccccccd 	.word	0xcccccccd
 8006624:	40020000 	.word	0x40020000
 8006628:	bffdfbf8 	.word	0xbffdfbf8
 800662c:	40020400 	.word	0x40020400

08006630 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8006630:	2800      	cmp	r0, #0
 8006632:	d04b      	beq.n	80066cc <HAL_DMA_DeInit+0x9c>
{
 8006634:	b538      	push	{r3, r4, r5, lr}
 8006636:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8006638:	6802      	ldr	r2, [r0, #0]
 800663a:	6813      	ldr	r3, [r2, #0]
 800663c:	f023 0301 	bic.w	r3, r3, #1
 8006640:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006642:	6802      	ldr	r2, [r0, #0]
 8006644:	4b22      	ldr	r3, [pc, #136]	; (80066d0 <HAL_DMA_DeInit+0xa0>)
 8006646:	429a      	cmp	r2, r3
 8006648:	d82c      	bhi.n	80066a4 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800664a:	4b22      	ldr	r3, [pc, #136]	; (80066d4 <HAL_DMA_DeInit+0xa4>)
 800664c:	4413      	add	r3, r2
 800664e:	4922      	ldr	r1, [pc, #136]	; (80066d8 <HAL_DMA_DeInit+0xa8>)
 8006650:	fba1 1303 	umull	r1, r3, r1, r3
 8006654:	091b      	lsrs	r3, r3, #4
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800665a:	4b20      	ldr	r3, [pc, #128]	; (80066dc <HAL_DMA_DeInit+0xac>)
 800665c:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR  = 0;
 800665e:	2500      	movs	r5, #0
 8006660:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006662:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006664:	f003 021f 	and.w	r2, r3, #31
 8006668:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800666a:	2301      	movs	r3, #1
 800666c:	4093      	lsls	r3, r2
 800666e:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006670:	4620      	mov	r0, r4
 8006672:	f7ff ff39 	bl	80064e8 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0;
 8006676:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006678:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800667a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800667c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800667e:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006680:	6863      	ldr	r3, [r4, #4]
 8006682:	3b01      	subs	r3, #1
 8006684:	2b03      	cmp	r3, #3
 8006686:	d918      	bls.n	80066ba <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 8006688:	2000      	movs	r0, #0
 800668a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800668c:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800668e:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8006690:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8006692:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8006694:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8006696:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006698:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 800669a:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800669e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80066a2:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80066a4:	4b0e      	ldr	r3, [pc, #56]	; (80066e0 <HAL_DMA_DeInit+0xb0>)
 80066a6:	4413      	add	r3, r2
 80066a8:	490b      	ldr	r1, [pc, #44]	; (80066d8 <HAL_DMA_DeInit+0xa8>)
 80066aa:	fba1 1303 	umull	r1, r3, r1, r3
 80066ae:	091b      	lsrs	r3, r3, #4
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80066b4:	4b0b      	ldr	r3, [pc, #44]	; (80066e4 <HAL_DMA_DeInit+0xb4>)
 80066b6:	6403      	str	r3, [r0, #64]	; 0x40
 80066b8:	e7d1      	b.n	800665e <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80066ba:	4620      	mov	r0, r4
 80066bc:	f7ff ff38 	bl	8006530 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80066c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80066c2:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066c6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80066c8:	605a      	str	r2, [r3, #4]
 80066ca:	e7dd      	b.n	8006688 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 80066cc:	2001      	movs	r0, #1
}
 80066ce:	4770      	bx	lr
 80066d0:	40020407 	.word	0x40020407
 80066d4:	bffdfff8 	.word	0xbffdfff8
 80066d8:	cccccccd 	.word	0xcccccccd
 80066dc:	40020000 	.word	0x40020000
 80066e0:	bffdfbf8 	.word	0xbffdfbf8
 80066e4:	40020400 	.word	0x40020400

080066e8 <HAL_DMA_Start_IT>:
{
 80066e8:	b538      	push	{r3, r4, r5, lr}
 80066ea:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80066ec:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 80066f0:	2801      	cmp	r0, #1
 80066f2:	d041      	beq.n	8006778 <HAL_DMA_Start_IT+0x90>
 80066f4:	2001      	movs	r0, #1
 80066f6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 80066fa:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 80066fe:	b2c0      	uxtb	r0, r0
 8006700:	2801      	cmp	r0, #1
 8006702:	d004      	beq.n	800670e <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8006704:	2300      	movs	r3, #0
 8006706:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 800670a:	2002      	movs	r0, #2
}
 800670c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800670e:	2002      	movs	r0, #2
 8006710:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006714:	2000      	movs	r0, #0
 8006716:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8006718:	6825      	ldr	r5, [r4, #0]
 800671a:	6828      	ldr	r0, [r5, #0]
 800671c:	f020 0001 	bic.w	r0, r0, #1
 8006720:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006722:	4620      	mov	r0, r4
 8006724:	f7ff febe 	bl	80064a4 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8006728:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800672a:	b1d3      	cbz	r3, 8006762 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800672c:	6822      	ldr	r2, [r4, #0]
 800672e:	6813      	ldr	r3, [r2, #0]
 8006730:	f043 030e 	orr.w	r3, r3, #14
 8006734:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006736:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800673e:	d003      	beq.n	8006748 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006746:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8006748:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800674a:	b11b      	cbz	r3, 8006754 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006752:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8006754:	6822      	ldr	r2, [r4, #0]
 8006756:	6813      	ldr	r3, [r2, #0]
 8006758:	f043 0301 	orr.w	r3, r3, #1
 800675c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800675e:	2000      	movs	r0, #0
 8006760:	e7d4      	b.n	800670c <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006762:	6822      	ldr	r2, [r4, #0]
 8006764:	6813      	ldr	r3, [r2, #0]
 8006766:	f023 0304 	bic.w	r3, r3, #4
 800676a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800676c:	6822      	ldr	r2, [r4, #0]
 800676e:	6813      	ldr	r3, [r2, #0]
 8006770:	f043 030a 	orr.w	r3, r3, #10
 8006774:	6013      	str	r3, [r2, #0]
 8006776:	e7de      	b.n	8006736 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8006778:	2002      	movs	r0, #2
 800677a:	e7c7      	b.n	800670c <HAL_DMA_Start_IT+0x24>

0800677c <HAL_DMA_Abort_IT>:
{
 800677c:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800677e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b02      	cmp	r3, #2
 8006786:	d009      	beq.n	800679c <HAL_DMA_Abort_IT+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006788:	2304      	movs	r3, #4
 800678a:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800678c:	2301      	movs	r3, #1
 800678e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8006792:	2200      	movs	r2, #0
 8006794:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    status = HAL_ERROR;
 8006798:	4618      	mov	r0, r3
}
 800679a:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800679c:	6802      	ldr	r2, [r0, #0]
 800679e:	6813      	ldr	r3, [r2, #0]
 80067a0:	f023 030e 	bic.w	r3, r3, #14
 80067a4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80067a6:	6802      	ldr	r2, [r0, #0]
 80067a8:	6813      	ldr	r3, [r2, #0]
 80067aa:	f023 0301 	bic.w	r3, r3, #1
 80067ae:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80067b0:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80067b2:	6813      	ldr	r3, [r2, #0]
 80067b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067b8:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80067ba:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80067bc:	f003 021f 	and.w	r2, r3, #31
 80067c0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80067c2:	2301      	movs	r3, #1
 80067c4:	4093      	lsls	r3, r2
 80067c6:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067c8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80067ca:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80067cc:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80067ce:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80067d0:	b133      	cbz	r3, 80067e0 <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067d8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067da:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80067dc:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80067de:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80067e0:	2301      	movs	r3, #1
 80067e2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80067e6:	2300      	movs	r3, #0
 80067e8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80067ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80067ee:	b113      	cbz	r3, 80067f6 <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 80067f0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80067f2:	2000      	movs	r0, #0
 80067f4:	e7d1      	b.n	800679a <HAL_DMA_Abort_IT+0x1e>
 80067f6:	2000      	movs	r0, #0
 80067f8:	e7cf      	b.n	800679a <HAL_DMA_Abort_IT+0x1e>

080067fa <HAL_DMA_IRQHandler>:
{
 80067fa:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80067fc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80067fe:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006800:	6804      	ldr	r4, [r0, #0]
 8006802:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006804:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006806:	f003 031f 	and.w	r3, r3, #31
 800680a:	2204      	movs	r2, #4
 800680c:	409a      	lsls	r2, r3
 800680e:	420a      	tst	r2, r1
 8006810:	d015      	beq.n	800683e <HAL_DMA_IRQHandler+0x44>
 8006812:	f015 0f04 	tst.w	r5, #4
 8006816:	d012      	beq.n	800683e <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	f013 0f20 	tst.w	r3, #32
 800681e:	d103      	bne.n	8006828 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006820:	6823      	ldr	r3, [r4, #0]
 8006822:	f023 0304 	bic.w	r3, r3, #4
 8006826:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006828:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800682a:	f003 021f 	and.w	r2, r3, #31
 800682e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006830:	2304      	movs	r3, #4
 8006832:	4093      	lsls	r3, r2
 8006834:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8006836:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006838:	b103      	cbz	r3, 800683c <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 800683a:	4798      	blx	r3
}
 800683c:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800683e:	2202      	movs	r2, #2
 8006840:	409a      	lsls	r2, r3
 8006842:	420a      	tst	r2, r1
 8006844:	d01c      	beq.n	8006880 <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 8006846:	f015 0f02 	tst.w	r5, #2
 800684a:	d019      	beq.n	8006880 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	f013 0f20 	tst.w	r3, #32
 8006852:	d106      	bne.n	8006862 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006854:	6823      	ldr	r3, [r4, #0]
 8006856:	f023 030a 	bic.w	r3, r3, #10
 800685a:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800685c:	2301      	movs	r3, #1
 800685e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006862:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006864:	f003 021f 	and.w	r2, r3, #31
 8006868:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800686a:	2302      	movs	r3, #2
 800686c:	4093      	lsls	r3, r2
 800686e:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8006870:	2300      	movs	r3, #0
 8006872:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8006876:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006878:	2b00      	cmp	r3, #0
 800687a:	d0df      	beq.n	800683c <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 800687c:	4798      	blx	r3
 800687e:	e7dd      	b.n	800683c <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006880:	2208      	movs	r2, #8
 8006882:	fa02 f303 	lsl.w	r3, r2, r3
 8006886:	420b      	tst	r3, r1
 8006888:	d0d8      	beq.n	800683c <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 800688a:	f015 0f08 	tst.w	r5, #8
 800688e:	d0d5      	beq.n	800683c <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006890:	6823      	ldr	r3, [r4, #0]
 8006892:	f023 030e 	bic.w	r3, r3, #14
 8006896:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006898:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800689a:	f003 031f 	and.w	r3, r3, #31
 800689e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80068a0:	2201      	movs	r2, #1
 80068a2:	fa02 f303 	lsl.w	r3, r2, r3
 80068a6:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80068a8:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80068aa:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80068ae:	2300      	movs	r3, #0
 80068b0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80068b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d0c0      	beq.n	800683c <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80068ba:	4798      	blx	r3
  return;
 80068bc:	e7be      	b.n	800683c <HAL_DMA_IRQHandler+0x42>

080068be <HAL_DMA_GetState>:
  return hdma->State;
 80068be:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 80068c2:	4770      	bx	lr

080068c4 <FDCAN_CalcultateRamBlockAddresses>:
>>>>>>> render
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
<<<<<<< HEAD
 80069ec:	b410      	push	{r4}
=======
 80068c4:	b410      	push	{r4}
>>>>>>> render
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
<<<<<<< HEAD
 80069ee:	6802      	ldr	r2, [r0, #0]
 80069f0:	4b1d      	ldr	r3, [pc, #116]	; (8006a68 <FDCAN_CalcultateRamBlockAddresses+0x7c>)
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d028      	beq.n	8006a48 <FDCAN_CalcultateRamBlockAddresses+0x5c>
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80069f6:	491d      	ldr	r1, [pc, #116]	; (8006a6c <FDCAN_CalcultateRamBlockAddresses+0x80>)
=======
 80068c6:	6802      	ldr	r2, [r0, #0]
 80068c8:	4b1d      	ldr	r3, [pc, #116]	; (8006940 <FDCAN_CalcultateRamBlockAddresses+0x7c>)
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d028      	beq.n	8006920 <FDCAN_CalcultateRamBlockAddresses+0x5c>
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80068ce:	491d      	ldr	r1, [pc, #116]	; (8006944 <FDCAN_CalcultateRamBlockAddresses+0x80>)
>>>>>>> render
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
<<<<<<< HEAD
 80069f8:	4b1d      	ldr	r3, [pc, #116]	; (8006a70 <FDCAN_CalcultateRamBlockAddresses+0x84>)
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d026      	beq.n	8006a4c <FDCAN_CalcultateRamBlockAddresses+0x60>
=======
 80068d0:	4b1d      	ldr	r3, [pc, #116]	; (8006948 <FDCAN_CalcultateRamBlockAddresses+0x84>)
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d026      	beq.n	8006924 <FDCAN_CalcultateRamBlockAddresses+0x60>
>>>>>>> render
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
<<<<<<< HEAD
 80069fe:	6401      	str	r1, [r0, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006a00:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8006a04:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006a08:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006a0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006a0e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006a12:	f101 0370 	add.w	r3, r1, #112	; 0x70
 8006a16:	6443      	str	r3, [r0, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006a18:	6802      	ldr	r2, [r0, #0]
 8006a1a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8006a1e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8006a22:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006a24:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8006a28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006a2c:	f101 03b0 	add.w	r3, r1, #176	; 0xb0
 8006a30:	6483      	str	r3, [r0, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006a32:	f501 73c4 	add.w	r3, r1, #392	; 0x188
 8006a36:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006a38:	f501 7318 	add.w	r3, r1, #608	; 0x260
 8006a3c:	6503      	str	r3, [r0, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006a3e:	f501 731e 	add.w	r3, r1, #632	; 0x278
 8006a42:	6543      	str	r3, [r0, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006a44:	460b      	mov	r3, r1
 8006a46:	e007      	b.n	8006a58 <FDCAN_CalcultateRamBlockAddresses+0x6c>
    SramCanInstanceBase += SRAMCAN_SIZE;
 8006a48:	490a      	ldr	r1, [pc, #40]	; (8006a74 <FDCAN_CalcultateRamBlockAddresses+0x88>)
 8006a4a:	e7d5      	b.n	80069f8 <FDCAN_CalcultateRamBlockAddresses+0xc>
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8006a4c:	f501 61d4 	add.w	r1, r1, #1696	; 0x6a0
 8006a50:	e7d5      	b.n	80069fe <FDCAN_CalcultateRamBlockAddresses+0x12>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006a52:	2200      	movs	r2, #0
 8006a54:	f843 2b04 	str.w	r2, [r3], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006a58:	f501 7254 	add.w	r2, r1, #848	; 0x350
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d8f8      	bhi.n	8006a52 <FDCAN_CalcultateRamBlockAddresses+0x66>
  }
}
 8006a60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	40006800 	.word	0x40006800
 8006a6c:	4000a400 	.word	0x4000a400
 8006a70:	40006c00 	.word	0x40006c00
 8006a74:	4000a750 	.word	0x4000a750

08006a78 <HAL_FDCAN_Init>:
  if (hfdcan == NULL)
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	f000 80e3 	beq.w	8006c44 <HAL_FDCAN_Init+0x1cc>
{
 8006a7e:	b538      	push	{r3, r4, r5, lr}
 8006a80:	4604      	mov	r4, r0
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006a82:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006a86:	b1d3      	cbz	r3, 8006abe <HAL_FDCAN_Init+0x46>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006a88:	6822      	ldr	r2, [r4, #0]
 8006a8a:	6993      	ldr	r3, [r2, #24]
 8006a8c:	f023 0310 	bic.w	r3, r3, #16
 8006a90:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 8006a92:	f7fe fd71 	bl	8005578 <HAL_GetTick>
 8006a96:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006a98:	6823      	ldr	r3, [r4, #0]
 8006a9a:	699a      	ldr	r2, [r3, #24]
 8006a9c:	f012 0f08 	tst.w	r2, #8
 8006aa0:	d012      	beq.n	8006ac8 <HAL_FDCAN_Init+0x50>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006aa2:	f7fe fd69 	bl	8005578 <HAL_GetTick>
 8006aa6:	1b40      	subs	r0, r0, r5
 8006aa8:	280a      	cmp	r0, #10
 8006aaa:	d9f5      	bls.n	8006a98 <HAL_FDCAN_Init+0x20>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006aac:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006aae:	f043 0301 	orr.w	r3, r3, #1
 8006ab2:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8006aba:	2001      	movs	r0, #1
}
 8006abc:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8006abe:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8006ac2:	f7fa ff3d 	bl	8001940 <HAL_FDCAN_MspInit>
 8006ac6:	e7df      	b.n	8006a88 <HAL_FDCAN_Init+0x10>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006ac8:	699a      	ldr	r2, [r3, #24]
 8006aca:	f042 0201 	orr.w	r2, r2, #1
 8006ace:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8006ad0:	f7fe fd52 	bl	8005578 <HAL_GetTick>
 8006ad4:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006ad6:	6823      	ldr	r3, [r4, #0]
 8006ad8:	699a      	ldr	r2, [r3, #24]
 8006ada:	f012 0f01 	tst.w	r2, #1
 8006ade:	d10d      	bne.n	8006afc <HAL_FDCAN_Init+0x84>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006ae0:	f7fe fd4a 	bl	8005578 <HAL_GetTick>
 8006ae4:	1b40      	subs	r0, r0, r5
 8006ae6:	280a      	cmp	r0, #10
 8006ae8:	d9f5      	bls.n	8006ad6 <HAL_FDCAN_Init+0x5e>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006aea:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006aec:	f043 0301 	orr.w	r3, r3, #1
 8006af0:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006af2:	2303      	movs	r3, #3
 8006af4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8006af8:	2001      	movs	r0, #1
 8006afa:	e7df      	b.n	8006abc <HAL_FDCAN_Init+0x44>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006afc:	699a      	ldr	r2, [r3, #24]
 8006afe:	f042 0202 	orr.w	r2, r2, #2
 8006b02:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8006b04:	6822      	ldr	r2, [r4, #0]
 8006b06:	4b50      	ldr	r3, [pc, #320]	; (8006c48 <HAL_FDCAN_Init+0x1d0>)
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d042      	beq.n	8006b92 <HAL_FDCAN_Init+0x11a>
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006b0c:	7c23      	ldrb	r3, [r4, #16]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d045      	beq.n	8006b9e <HAL_FDCAN_Init+0x126>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006b12:	6822      	ldr	r2, [r4, #0]
 8006b14:	6993      	ldr	r3, [r2, #24]
 8006b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b1a:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006b1c:	7c63      	ldrb	r3, [r4, #17]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d043      	beq.n	8006baa <HAL_FDCAN_Init+0x132>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006b22:	6822      	ldr	r2, [r4, #0]
 8006b24:	6993      	ldr	r3, [r2, #24]
 8006b26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b2a:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006b2c:	7ca3      	ldrb	r3, [r4, #18]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d041      	beq.n	8006bb6 <HAL_FDCAN_Init+0x13e>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006b32:	6822      	ldr	r2, [r4, #0]
 8006b34:	6993      	ldr	r3, [r2, #24]
 8006b36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b3a:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006b3c:	6822      	ldr	r2, [r4, #0]
 8006b3e:	6993      	ldr	r3, [r2, #24]
 8006b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b44:	68a1      	ldr	r1, [r4, #8]
 8006b46:	430b      	orrs	r3, r1
 8006b48:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006b4a:	6822      	ldr	r2, [r4, #0]
 8006b4c:	6993      	ldr	r3, [r2, #24]
 8006b4e:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 8006b52:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006b54:	6822      	ldr	r2, [r4, #0]
 8006b56:	6913      	ldr	r3, [r2, #16]
 8006b58:	f023 0310 	bic.w	r3, r3, #16
 8006b5c:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006b5e:	68e3      	ldr	r3, [r4, #12]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d02e      	beq.n	8006bc2 <HAL_FDCAN_Init+0x14a>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d031      	beq.n	8006bcc <HAL_FDCAN_Init+0x154>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d054      	beq.n	8006c16 <HAL_FDCAN_Init+0x19e>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006b6c:	6822      	ldr	r2, [r4, #0]
 8006b6e:	6993      	ldr	r3, [r2, #24]
 8006b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b74:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006b76:	6822      	ldr	r2, [r4, #0]
 8006b78:	6913      	ldr	r3, [r2, #16]
 8006b7a:	f043 0310 	orr.w	r3, r3, #16
 8006b7e:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006b80:	68e3      	ldr	r3, [r4, #12]
 8006b82:	2b03      	cmp	r3, #3
 8006b84:	d122      	bne.n	8006bcc <HAL_FDCAN_Init+0x154>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006b86:	6822      	ldr	r2, [r4, #0]
 8006b88:	6993      	ldr	r3, [r2, #24]
 8006b8a:	f043 0320 	orr.w	r3, r3, #32
 8006b8e:	6193      	str	r3, [r2, #24]
 8006b90:	e01c      	b.n	8006bcc <HAL_FDCAN_Init+0x154>
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006b92:	6862      	ldr	r2, [r4, #4]
 8006b94:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006b98:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8006b9c:	e7b6      	b.n	8006b0c <HAL_FDCAN_Init+0x94>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006b9e:	6822      	ldr	r2, [r4, #0]
 8006ba0:	6993      	ldr	r3, [r2, #24]
 8006ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ba6:	6193      	str	r3, [r2, #24]
 8006ba8:	e7b8      	b.n	8006b1c <HAL_FDCAN_Init+0xa4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006baa:	6822      	ldr	r2, [r4, #0]
 8006bac:	6993      	ldr	r3, [r2, #24]
 8006bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bb2:	6193      	str	r3, [r2, #24]
 8006bb4:	e7ba      	b.n	8006b2c <HAL_FDCAN_Init+0xb4>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006bb6:	6822      	ldr	r2, [r4, #0]
 8006bb8:	6993      	ldr	r3, [r2, #24]
 8006bba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bbe:	6193      	str	r3, [r2, #24]
 8006bc0:	e7bc      	b.n	8006b3c <HAL_FDCAN_Init+0xc4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006bc2:	6822      	ldr	r2, [r4, #0]
 8006bc4:	6993      	ldr	r3, [r2, #24]
 8006bc6:	f043 0304 	orr.w	r3, r3, #4
 8006bca:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006bcc:	69a3      	ldr	r3, [r4, #24]
 8006bce:	1e5a      	subs	r2, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006bd0:	69e3      	ldr	r3, [r4, #28]
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006bd6:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006bda:	6a22      	ldr	r2, [r4, #32]
 8006bdc:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006bde:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006be0:	6962      	ldr	r2, [r4, #20]
 8006be2:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006be4:	6821      	ldr	r1, [r4, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006be6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006bea:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006bec:	68a3      	ldr	r3, [r4, #8]
 8006bee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bf2:	d016      	beq.n	8006c22 <HAL_FDCAN_Init+0x1aa>
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006bf4:	6822      	ldr	r2, [r4, #0]
 8006bf6:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8006bfa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006bfc:	430b      	orrs	r3, r1
 8006bfe:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006c02:	4620      	mov	r0, r4
 8006c04:	f7ff fef2 	bl	80069ec <FDCAN_CalcultateRamBlockAddresses>
  hfdcan->LatestTxFifoQRequest = 0U;
 8006c08:	2000      	movs	r0, #0
 8006c0a:	65a0      	str	r0, [r4, #88]	; 0x58
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006c0c:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return HAL_OK;
 8006c14:	e752      	b.n	8006abc <HAL_FDCAN_Init+0x44>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006c16:	6822      	ldr	r2, [r4, #0]
 8006c18:	6993      	ldr	r3, [r2, #24]
 8006c1a:	f043 0320 	orr.w	r3, r3, #32
 8006c1e:	6193      	str	r3, [r2, #24]
 8006c20:	e7d4      	b.n	8006bcc <HAL_FDCAN_Init+0x154>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006c22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006c24:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006c26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006c28:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006c2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006c2e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006c30:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006c32:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006c36:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006c38:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006c3a:	6821      	ldr	r1, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006c3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006c40:	60cb      	str	r3, [r1, #12]
 8006c42:	e7d7      	b.n	8006bf4 <HAL_FDCAN_Init+0x17c>
    return HAL_ERROR;
 8006c44:	2001      	movs	r0, #1
}
 8006c46:	4770      	bx	lr
 8006c48:	40006400 	.word	0x40006400

08006c4c <HAL_GPIO_Init>:
=======
 80068d6:	6401      	str	r1, [r0, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80068d8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80068dc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80068e0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80068e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80068e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80068ea:	f101 0370 	add.w	r3, r1, #112	; 0x70
 80068ee:	6443      	str	r3, [r0, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80068f0:	6802      	ldr	r2, [r0, #0]
 80068f2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80068f6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80068fa:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80068fc:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8006900:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006904:	f101 03b0 	add.w	r3, r1, #176	; 0xb0
 8006908:	6483      	str	r3, [r0, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800690a:	f501 73c4 	add.w	r3, r1, #392	; 0x188
 800690e:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006910:	f501 7318 	add.w	r3, r1, #608	; 0x260
 8006914:	6503      	str	r3, [r0, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006916:	f501 731e 	add.w	r3, r1, #632	; 0x278
 800691a:	6543      	str	r3, [r0, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800691c:	460b      	mov	r3, r1
 800691e:	e007      	b.n	8006930 <FDCAN_CalcultateRamBlockAddresses+0x6c>
    SramCanInstanceBase += SRAMCAN_SIZE;
 8006920:	490a      	ldr	r1, [pc, #40]	; (800694c <FDCAN_CalcultateRamBlockAddresses+0x88>)
 8006922:	e7d5      	b.n	80068d0 <FDCAN_CalcultateRamBlockAddresses+0xc>
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8006924:	f501 61d4 	add.w	r1, r1, #1696	; 0x6a0
 8006928:	e7d5      	b.n	80068d6 <FDCAN_CalcultateRamBlockAddresses+0x12>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800692a:	2200      	movs	r2, #0
 800692c:	f843 2b04 	str.w	r2, [r3], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006930:	f501 7254 	add.w	r2, r1, #848	; 0x350
 8006934:	429a      	cmp	r2, r3
 8006936:	d8f8      	bhi.n	800692a <FDCAN_CalcultateRamBlockAddresses+0x66>
  }
}
 8006938:	f85d 4b04 	ldr.w	r4, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	40006800 	.word	0x40006800
 8006944:	4000a400 	.word	0x4000a400
 8006948:	40006c00 	.word	0x40006c00
 800694c:	4000a750 	.word	0x4000a750

08006950 <HAL_FDCAN_Init>:
  if (hfdcan == NULL)
 8006950:	2800      	cmp	r0, #0
 8006952:	f000 80e3 	beq.w	8006b1c <HAL_FDCAN_Init+0x1cc>
{
 8006956:	b538      	push	{r3, r4, r5, lr}
 8006958:	4604      	mov	r4, r0
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800695a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800695e:	b1d3      	cbz	r3, 8006996 <HAL_FDCAN_Init+0x46>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006960:	6822      	ldr	r2, [r4, #0]
 8006962:	6993      	ldr	r3, [r2, #24]
 8006964:	f023 0310 	bic.w	r3, r3, #16
 8006968:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 800696a:	f7fe fd71 	bl	8005450 <HAL_GetTick>
 800696e:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006970:	6823      	ldr	r3, [r4, #0]
 8006972:	699a      	ldr	r2, [r3, #24]
 8006974:	f012 0f08 	tst.w	r2, #8
 8006978:	d012      	beq.n	80069a0 <HAL_FDCAN_Init+0x50>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800697a:	f7fe fd69 	bl	8005450 <HAL_GetTick>
 800697e:	1b40      	subs	r0, r0, r5
 8006980:	280a      	cmp	r0, #10
 8006982:	d9f5      	bls.n	8006970 <HAL_FDCAN_Init+0x20>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006984:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006986:	f043 0301 	orr.w	r3, r3, #1
 800698a:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800698c:	2303      	movs	r3, #3
 800698e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8006992:	2001      	movs	r0, #1
}
 8006994:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8006996:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 800699a:	f7fa ffd1 	bl	8001940 <HAL_FDCAN_MspInit>
 800699e:	e7df      	b.n	8006960 <HAL_FDCAN_Init+0x10>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80069a0:	699a      	ldr	r2, [r3, #24]
 80069a2:	f042 0201 	orr.w	r2, r2, #1
 80069a6:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 80069a8:	f7fe fd52 	bl	8005450 <HAL_GetTick>
 80069ac:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	699a      	ldr	r2, [r3, #24]
 80069b2:	f012 0f01 	tst.w	r2, #1
 80069b6:	d10d      	bne.n	80069d4 <HAL_FDCAN_Init+0x84>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80069b8:	f7fe fd4a 	bl	8005450 <HAL_GetTick>
 80069bc:	1b40      	subs	r0, r0, r5
 80069be:	280a      	cmp	r0, #10
 80069c0:	d9f5      	bls.n	80069ae <HAL_FDCAN_Init+0x5e>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80069c2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80069c4:	f043 0301 	orr.w	r3, r3, #1
 80069c8:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80069ca:	2303      	movs	r3, #3
 80069cc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 80069d0:	2001      	movs	r0, #1
 80069d2:	e7df      	b.n	8006994 <HAL_FDCAN_Init+0x44>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80069d4:	699a      	ldr	r2, [r3, #24]
 80069d6:	f042 0202 	orr.w	r2, r2, #2
 80069da:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 80069dc:	6822      	ldr	r2, [r4, #0]
 80069de:	4b50      	ldr	r3, [pc, #320]	; (8006b20 <HAL_FDCAN_Init+0x1d0>)
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d042      	beq.n	8006a6a <HAL_FDCAN_Init+0x11a>
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80069e4:	7c23      	ldrb	r3, [r4, #16]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d045      	beq.n	8006a76 <HAL_FDCAN_Init+0x126>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80069ea:	6822      	ldr	r2, [r4, #0]
 80069ec:	6993      	ldr	r3, [r2, #24]
 80069ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069f2:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 80069f4:	7c63      	ldrb	r3, [r4, #17]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d043      	beq.n	8006a82 <HAL_FDCAN_Init+0x132>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80069fa:	6822      	ldr	r2, [r4, #0]
 80069fc:	6993      	ldr	r3, [r2, #24]
 80069fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a02:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006a04:	7ca3      	ldrb	r3, [r4, #18]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d041      	beq.n	8006a8e <HAL_FDCAN_Init+0x13e>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006a0a:	6822      	ldr	r2, [r4, #0]
 8006a0c:	6993      	ldr	r3, [r2, #24]
 8006a0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a12:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006a14:	6822      	ldr	r2, [r4, #0]
 8006a16:	6993      	ldr	r3, [r2, #24]
 8006a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a1c:	68a1      	ldr	r1, [r4, #8]
 8006a1e:	430b      	orrs	r3, r1
 8006a20:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006a22:	6822      	ldr	r2, [r4, #0]
 8006a24:	6993      	ldr	r3, [r2, #24]
 8006a26:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 8006a2a:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006a2c:	6822      	ldr	r2, [r4, #0]
 8006a2e:	6913      	ldr	r3, [r2, #16]
 8006a30:	f023 0310 	bic.w	r3, r3, #16
 8006a34:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006a36:	68e3      	ldr	r3, [r4, #12]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d02e      	beq.n	8006a9a <HAL_FDCAN_Init+0x14a>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d031      	beq.n	8006aa4 <HAL_FDCAN_Init+0x154>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d054      	beq.n	8006aee <HAL_FDCAN_Init+0x19e>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006a44:	6822      	ldr	r2, [r4, #0]
 8006a46:	6993      	ldr	r3, [r2, #24]
 8006a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a4c:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006a4e:	6822      	ldr	r2, [r4, #0]
 8006a50:	6913      	ldr	r3, [r2, #16]
 8006a52:	f043 0310 	orr.w	r3, r3, #16
 8006a56:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006a58:	68e3      	ldr	r3, [r4, #12]
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	d122      	bne.n	8006aa4 <HAL_FDCAN_Init+0x154>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006a5e:	6822      	ldr	r2, [r4, #0]
 8006a60:	6993      	ldr	r3, [r2, #24]
 8006a62:	f043 0320 	orr.w	r3, r3, #32
 8006a66:	6193      	str	r3, [r2, #24]
 8006a68:	e01c      	b.n	8006aa4 <HAL_FDCAN_Init+0x154>
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006a6a:	6862      	ldr	r2, [r4, #4]
 8006a6c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006a70:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8006a74:	e7b6      	b.n	80069e4 <HAL_FDCAN_Init+0x94>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006a76:	6822      	ldr	r2, [r4, #0]
 8006a78:	6993      	ldr	r3, [r2, #24]
 8006a7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a7e:	6193      	str	r3, [r2, #24]
 8006a80:	e7b8      	b.n	80069f4 <HAL_FDCAN_Init+0xa4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006a82:	6822      	ldr	r2, [r4, #0]
 8006a84:	6993      	ldr	r3, [r2, #24]
 8006a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a8a:	6193      	str	r3, [r2, #24]
 8006a8c:	e7ba      	b.n	8006a04 <HAL_FDCAN_Init+0xb4>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006a8e:	6822      	ldr	r2, [r4, #0]
 8006a90:	6993      	ldr	r3, [r2, #24]
 8006a92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a96:	6193      	str	r3, [r2, #24]
 8006a98:	e7bc      	b.n	8006a14 <HAL_FDCAN_Init+0xc4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006a9a:	6822      	ldr	r2, [r4, #0]
 8006a9c:	6993      	ldr	r3, [r2, #24]
 8006a9e:	f043 0304 	orr.w	r3, r3, #4
 8006aa2:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006aa4:	69a3      	ldr	r3, [r4, #24]
 8006aa6:	1e5a      	subs	r2, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006aa8:	69e3      	ldr	r3, [r4, #28]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006aae:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006ab2:	6a22      	ldr	r2, [r4, #32]
 8006ab4:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006ab6:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006ab8:	6962      	ldr	r2, [r4, #20]
 8006aba:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006abc:	6821      	ldr	r1, [r4, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006abe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006ac2:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006ac4:	68a3      	ldr	r3, [r4, #8]
 8006ac6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aca:	d016      	beq.n	8006afa <HAL_FDCAN_Init+0x1aa>
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006acc:	6822      	ldr	r2, [r4, #0]
 8006ace:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8006ad2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006ad4:	430b      	orrs	r3, r1
 8006ad6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006ada:	4620      	mov	r0, r4
 8006adc:	f7ff fef2 	bl	80068c4 <FDCAN_CalcultateRamBlockAddresses>
  hfdcan->LatestTxFifoQRequest = 0U;
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	65a0      	str	r0, [r4, #88]	; 0x58
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006ae4:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return HAL_OK;
 8006aec:	e752      	b.n	8006994 <HAL_FDCAN_Init+0x44>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006aee:	6822      	ldr	r2, [r4, #0]
 8006af0:	6993      	ldr	r3, [r2, #24]
 8006af2:	f043 0320 	orr.w	r3, r3, #32
 8006af6:	6193      	str	r3, [r2, #24]
 8006af8:	e7d4      	b.n	8006aa4 <HAL_FDCAN_Init+0x154>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006afa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006afc:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006afe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006b00:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006b02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006b06:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006b08:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006b0a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006b0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006b10:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006b12:	6821      	ldr	r1, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006b14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006b18:	60cb      	str	r3, [r1, #12]
 8006b1a:	e7d7      	b.n	8006acc <HAL_FDCAN_Init+0x17c>
    return HAL_ERROR;
 8006b1c:	2001      	movs	r0, #1
}
 8006b1e:	4770      	bx	lr
 8006b20:	40006400 	.word	0x40006400

08006b24 <HAL_GPIO_Init>:
>>>>>>> render
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8006c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c4e:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8006c50:	2300      	movs	r3, #0
=======
 8006b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b26:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8006b28:	2300      	movs	r3, #0
>>>>>>> render
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
<<<<<<< HEAD
 8006c52:	e062      	b.n	8006d1a <HAL_GPIO_Init+0xce>
=======
 8006b2a:	e062      	b.n	8006bf2 <HAL_GPIO_Init+0xce>
>>>>>>> render
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< HEAD
 8006c54:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c56:	005e      	lsls	r6, r3, #1
 8006c58:	2403      	movs	r4, #3
 8006c5a:	40b4      	lsls	r4, r6
 8006c5c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c60:	68cc      	ldr	r4, [r1, #12]
 8006c62:	40b4      	lsls	r4, r6
 8006c64:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8006c66:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c68:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006c6a:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c6e:	684c      	ldr	r4, [r1, #4]
 8006c70:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8006c74:	409c      	lsls	r4, r3
 8006c76:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8006c7a:	6044      	str	r4, [r0, #4]
 8006c7c:	e05e      	b.n	8006d3c <HAL_GPIO_Init+0xf0>
=======
 8006b2c:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006b2e:	005e      	lsls	r6, r3, #1
 8006b30:	2403      	movs	r4, #3
 8006b32:	40b4      	lsls	r4, r6
 8006b34:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b38:	68cc      	ldr	r4, [r1, #12]
 8006b3a:	40b4      	lsls	r4, r6
 8006b3c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8006b3e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b40:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006b42:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b46:	684c      	ldr	r4, [r1, #4]
 8006b48:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8006b4c:	409c      	lsls	r4, r3
 8006b4e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8006b52:	6044      	str	r4, [r0, #4]
 8006b54:	e05e      	b.n	8006c14 <HAL_GPIO_Init+0xf0>
>>>>>>> render
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 8006c7e:	08dd      	lsrs	r5, r3, #3
 8006c80:	3508      	adds	r5, #8
 8006c82:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006c86:	f003 0407 	and.w	r4, r3, #7
 8006c8a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006c8e:	240f      	movs	r4, #15
 8006c90:	fa04 f40c 	lsl.w	r4, r4, ip
 8006c94:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006c98:	690c      	ldr	r4, [r1, #16]
 8006c9a:	fa04 f40c 	lsl.w	r4, r4, ip
 8006c9e:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8006ca2:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8006ca6:	e060      	b.n	8006d6a <HAL_GPIO_Init+0x11e>
=======
 8006b56:	08dd      	lsrs	r5, r3, #3
 8006b58:	3508      	adds	r5, #8
 8006b5a:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006b5e:	f003 0407 	and.w	r4, r3, #7
 8006b62:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006b66:	240f      	movs	r4, #15
 8006b68:	fa04 f40c 	lsl.w	r4, r4, ip
 8006b6c:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006b70:	690c      	ldr	r4, [r1, #16]
 8006b72:	fa04 f40c 	lsl.w	r4, r4, ip
 8006b76:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8006b7a:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8006b7e:	e060      	b.n	8006c42 <HAL_GPIO_Init+0x11e>
>>>>>>> render
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
<<<<<<< HEAD
 8006ca8:	2405      	movs	r4, #5
 8006caa:	e000      	b.n	8006cae <HAL_GPIO_Init+0x62>
 8006cac:	2400      	movs	r4, #0
 8006cae:	fa04 f40e 	lsl.w	r4, r4, lr
 8006cb2:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006cb4:	f10c 0c02 	add.w	ip, ip, #2
 8006cb8:	4d55      	ldr	r5, [pc, #340]	; (8006e10 <HAL_GPIO_Init+0x1c4>)
 8006cba:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006cbe:	4c55      	ldr	r4, [pc, #340]	; (8006e14 <HAL_GPIO_Init+0x1c8>)
 8006cc0:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8006cc2:	43d4      	mvns	r4, r2
 8006cc4:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006cc8:	684f      	ldr	r7, [r1, #4]
 8006cca:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8006cce:	d001      	beq.n	8006cd4 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8006cd0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8006cd4:	4d4f      	ldr	r5, [pc, #316]	; (8006e14 <HAL_GPIO_Init+0x1c8>)
 8006cd6:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8006cd8:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8006cda:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006cde:	684f      	ldr	r7, [r1, #4]
 8006ce0:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8006ce4:	d001      	beq.n	8006cea <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8006ce6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8006cea:	4d4a      	ldr	r5, [pc, #296]	; (8006e14 <HAL_GPIO_Init+0x1c8>)
 8006cec:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR1;
 8006cee:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8006cf0:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006cf4:	684f      	ldr	r7, [r1, #4]
 8006cf6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8006cfa:	d001      	beq.n	8006d00 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8006cfc:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8006d00:	4d44      	ldr	r5, [pc, #272]	; (8006e14 <HAL_GPIO_Init+0x1c8>)
 8006d02:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006d04:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8006d06:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d08:	684e      	ldr	r6, [r1, #4]
 8006d0a:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8006d0e:	d001      	beq.n	8006d14 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8006d10:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8006d14:	4a3f      	ldr	r2, [pc, #252]	; (8006e14 <HAL_GPIO_Init+0x1c8>)
 8006d16:	6014      	str	r4, [r2, #0]
=======
 8006b80:	2405      	movs	r4, #5
 8006b82:	e000      	b.n	8006b86 <HAL_GPIO_Init+0x62>
 8006b84:	2400      	movs	r4, #0
 8006b86:	fa04 f40e 	lsl.w	r4, r4, lr
 8006b8a:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b8c:	f10c 0c02 	add.w	ip, ip, #2
 8006b90:	4d55      	ldr	r5, [pc, #340]	; (8006ce8 <HAL_GPIO_Init+0x1c4>)
 8006b92:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b96:	4c55      	ldr	r4, [pc, #340]	; (8006cec <HAL_GPIO_Init+0x1c8>)
 8006b98:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8006b9a:	43d4      	mvns	r4, r2
 8006b9c:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ba0:	684f      	ldr	r7, [r1, #4]
 8006ba2:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8006ba6:	d001      	beq.n	8006bac <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8006ba8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8006bac:	4d4f      	ldr	r5, [pc, #316]	; (8006cec <HAL_GPIO_Init+0x1c8>)
 8006bae:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8006bb0:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8006bb2:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006bb6:	684f      	ldr	r7, [r1, #4]
 8006bb8:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8006bbc:	d001      	beq.n	8006bc2 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8006bbe:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8006bc2:	4d4a      	ldr	r5, [pc, #296]	; (8006cec <HAL_GPIO_Init+0x1c8>)
 8006bc4:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR1;
 8006bc6:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8006bc8:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006bcc:	684f      	ldr	r7, [r1, #4]
 8006bce:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8006bd2:	d001      	beq.n	8006bd8 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8006bd4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8006bd8:	4d44      	ldr	r5, [pc, #272]	; (8006cec <HAL_GPIO_Init+0x1c8>)
 8006bda:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006bdc:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8006bde:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006be0:	684e      	ldr	r6, [r1, #4]
 8006be2:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8006be6:	d001      	beq.n	8006bec <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8006be8:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8006bec:	4a3f      	ldr	r2, [pc, #252]	; (8006cec <HAL_GPIO_Init+0x1c8>)
 8006bee:	6014      	str	r4, [r2, #0]
>>>>>>> render
      }
    }

    position++;
<<<<<<< HEAD
 8006d18:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006d1a:	680a      	ldr	r2, [r1, #0]
 8006d1c:	fa32 f403 	lsrs.w	r4, r2, r3
 8006d20:	d074      	beq.n	8006e0c <HAL_GPIO_Init+0x1c0>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006d22:	f04f 0c01 	mov.w	ip, #1
 8006d26:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8006d2a:	ea1c 0202 	ands.w	r2, ip, r2
 8006d2e:	d0f3      	beq.n	8006d18 <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006d30:	684c      	ldr	r4, [r1, #4]
 8006d32:	f004 0403 	and.w	r4, r4, #3
 8006d36:	3c01      	subs	r4, #1
 8006d38:	2c01      	cmp	r4, #1
 8006d3a:	d98b      	bls.n	8006c54 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d3c:	684c      	ldr	r4, [r1, #4]
 8006d3e:	f004 0403 	and.w	r4, r4, #3
 8006d42:	2c03      	cmp	r4, #3
 8006d44:	d00c      	beq.n	8006d60 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8006d46:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006d48:	005d      	lsls	r5, r3, #1
 8006d4a:	f04f 0c03 	mov.w	ip, #3
 8006d4e:	fa0c fc05 	lsl.w	ip, ip, r5
 8006d52:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d56:	688c      	ldr	r4, [r1, #8]
 8006d58:	40ac      	lsls	r4, r5
 8006d5a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8006d5e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d60:	684c      	ldr	r4, [r1, #4]
 8006d62:	f004 0403 	and.w	r4, r4, #3
 8006d66:	2c02      	cmp	r4, #2
 8006d68:	d089      	beq.n	8006c7e <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8006d6a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006d6c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8006d70:	f04f 0c03 	mov.w	ip, #3
 8006d74:	fa0c fc0e 	lsl.w	ip, ip, lr
 8006d78:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d7c:	684c      	ldr	r4, [r1, #4]
 8006d7e:	f004 0403 	and.w	r4, r4, #3
 8006d82:	fa04 f40e 	lsl.w	r4, r4, lr
 8006d86:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8006d8a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006d8c:	684c      	ldr	r4, [r1, #4]
 8006d8e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8006d92:	d0c1      	beq.n	8006d18 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d94:	4c20      	ldr	r4, [pc, #128]	; (8006e18 <HAL_GPIO_Init+0x1cc>)
 8006d96:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8006d98:	f045 0501 	orr.w	r5, r5, #1
 8006d9c:	6625      	str	r5, [r4, #96]	; 0x60
 8006d9e:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8006da0:	f004 0401 	and.w	r4, r4, #1
 8006da4:	9401      	str	r4, [sp, #4]
 8006da6:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006da8:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8006dac:	f10c 0502 	add.w	r5, ip, #2
 8006db0:	4c17      	ldr	r4, [pc, #92]	; (8006e10 <HAL_GPIO_Init+0x1c4>)
 8006db2:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006db6:	f003 0403 	and.w	r4, r3, #3
 8006dba:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8006dbe:	240f      	movs	r4, #15
 8006dc0:	fa04 f40e 	lsl.w	r4, r4, lr
 8006dc4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006dc8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8006dcc:	f43f af6e 	beq.w	8006cac <HAL_GPIO_Init+0x60>
 8006dd0:	4c12      	ldr	r4, [pc, #72]	; (8006e1c <HAL_GPIO_Init+0x1d0>)
 8006dd2:	42a0      	cmp	r0, r4
 8006dd4:	d012      	beq.n	8006dfc <HAL_GPIO_Init+0x1b0>
 8006dd6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006dda:	42a0      	cmp	r0, r4
 8006ddc:	d010      	beq.n	8006e00 <HAL_GPIO_Init+0x1b4>
 8006dde:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006de2:	42a0      	cmp	r0, r4
 8006de4:	d00e      	beq.n	8006e04 <HAL_GPIO_Init+0x1b8>
 8006de6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006dea:	42a0      	cmp	r0, r4
 8006dec:	d00c      	beq.n	8006e08 <HAL_GPIO_Init+0x1bc>
 8006dee:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006df2:	42a0      	cmp	r0, r4
 8006df4:	f43f af58 	beq.w	8006ca8 <HAL_GPIO_Init+0x5c>
 8006df8:	2406      	movs	r4, #6
 8006dfa:	e758      	b.n	8006cae <HAL_GPIO_Init+0x62>
 8006dfc:	2401      	movs	r4, #1
 8006dfe:	e756      	b.n	8006cae <HAL_GPIO_Init+0x62>
 8006e00:	2402      	movs	r4, #2
 8006e02:	e754      	b.n	8006cae <HAL_GPIO_Init+0x62>
 8006e04:	2403      	movs	r4, #3
 8006e06:	e752      	b.n	8006cae <HAL_GPIO_Init+0x62>
 8006e08:	2404      	movs	r4, #4
 8006e0a:	e750      	b.n	8006cae <HAL_GPIO_Init+0x62>
  }
}
 8006e0c:	b003      	add	sp, #12
 8006e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e10:	40010000 	.word	0x40010000
 8006e14:	40010400 	.word	0x40010400
 8006e18:	40021000 	.word	0x40021000
 8006e1c:	48000400 	.word	0x48000400

08006e20 <HAL_GPIO_WritePin>:
=======
 8006bf0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006bf2:	680a      	ldr	r2, [r1, #0]
 8006bf4:	fa32 f403 	lsrs.w	r4, r2, r3
 8006bf8:	d074      	beq.n	8006ce4 <HAL_GPIO_Init+0x1c0>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006bfa:	f04f 0c01 	mov.w	ip, #1
 8006bfe:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8006c02:	ea1c 0202 	ands.w	r2, ip, r2
 8006c06:	d0f3      	beq.n	8006bf0 <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006c08:	684c      	ldr	r4, [r1, #4]
 8006c0a:	f004 0403 	and.w	r4, r4, #3
 8006c0e:	3c01      	subs	r4, #1
 8006c10:	2c01      	cmp	r4, #1
 8006c12:	d98b      	bls.n	8006b2c <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c14:	684c      	ldr	r4, [r1, #4]
 8006c16:	f004 0403 	and.w	r4, r4, #3
 8006c1a:	2c03      	cmp	r4, #3
 8006c1c:	d00c      	beq.n	8006c38 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8006c1e:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006c20:	005d      	lsls	r5, r3, #1
 8006c22:	f04f 0c03 	mov.w	ip, #3
 8006c26:	fa0c fc05 	lsl.w	ip, ip, r5
 8006c2a:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c2e:	688c      	ldr	r4, [r1, #8]
 8006c30:	40ac      	lsls	r4, r5
 8006c32:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8006c36:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c38:	684c      	ldr	r4, [r1, #4]
 8006c3a:	f004 0403 	and.w	r4, r4, #3
 8006c3e:	2c02      	cmp	r4, #2
 8006c40:	d089      	beq.n	8006b56 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8006c42:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006c44:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8006c48:	f04f 0c03 	mov.w	ip, #3
 8006c4c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8006c50:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c54:	684c      	ldr	r4, [r1, #4]
 8006c56:	f004 0403 	and.w	r4, r4, #3
 8006c5a:	fa04 f40e 	lsl.w	r4, r4, lr
 8006c5e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8006c62:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006c64:	684c      	ldr	r4, [r1, #4]
 8006c66:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8006c6a:	d0c1      	beq.n	8006bf0 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c6c:	4c20      	ldr	r4, [pc, #128]	; (8006cf0 <HAL_GPIO_Init+0x1cc>)
 8006c6e:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8006c70:	f045 0501 	orr.w	r5, r5, #1
 8006c74:	6625      	str	r5, [r4, #96]	; 0x60
 8006c76:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8006c78:	f004 0401 	and.w	r4, r4, #1
 8006c7c:	9401      	str	r4, [sp, #4]
 8006c7e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006c80:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8006c84:	f10c 0502 	add.w	r5, ip, #2
 8006c88:	4c17      	ldr	r4, [pc, #92]	; (8006ce8 <HAL_GPIO_Init+0x1c4>)
 8006c8a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006c8e:	f003 0403 	and.w	r4, r3, #3
 8006c92:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8006c96:	240f      	movs	r4, #15
 8006c98:	fa04 f40e 	lsl.w	r4, r4, lr
 8006c9c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006ca0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8006ca4:	f43f af6e 	beq.w	8006b84 <HAL_GPIO_Init+0x60>
 8006ca8:	4c12      	ldr	r4, [pc, #72]	; (8006cf4 <HAL_GPIO_Init+0x1d0>)
 8006caa:	42a0      	cmp	r0, r4
 8006cac:	d012      	beq.n	8006cd4 <HAL_GPIO_Init+0x1b0>
 8006cae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006cb2:	42a0      	cmp	r0, r4
 8006cb4:	d010      	beq.n	8006cd8 <HAL_GPIO_Init+0x1b4>
 8006cb6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006cba:	42a0      	cmp	r0, r4
 8006cbc:	d00e      	beq.n	8006cdc <HAL_GPIO_Init+0x1b8>
 8006cbe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006cc2:	42a0      	cmp	r0, r4
 8006cc4:	d00c      	beq.n	8006ce0 <HAL_GPIO_Init+0x1bc>
 8006cc6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006cca:	42a0      	cmp	r0, r4
 8006ccc:	f43f af58 	beq.w	8006b80 <HAL_GPIO_Init+0x5c>
 8006cd0:	2406      	movs	r4, #6
 8006cd2:	e758      	b.n	8006b86 <HAL_GPIO_Init+0x62>
 8006cd4:	2401      	movs	r4, #1
 8006cd6:	e756      	b.n	8006b86 <HAL_GPIO_Init+0x62>
 8006cd8:	2402      	movs	r4, #2
 8006cda:	e754      	b.n	8006b86 <HAL_GPIO_Init+0x62>
 8006cdc:	2403      	movs	r4, #3
 8006cde:	e752      	b.n	8006b86 <HAL_GPIO_Init+0x62>
 8006ce0:	2404      	movs	r4, #4
 8006ce2:	e750      	b.n	8006b86 <HAL_GPIO_Init+0x62>
  }
}
 8006ce4:	b003      	add	sp, #12
 8006ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ce8:	40010000 	.word	0x40010000
 8006cec:	40010400 	.word	0x40010400
 8006cf0:	40021000 	.word	0x40021000
 8006cf4:	48000400 	.word	0x48000400

08006cf8 <HAL_GPIO_WritePin>:
>>>>>>> render
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8006e20:	b10a      	cbz	r2, 8006e26 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006e22:	6181      	str	r1, [r0, #24]
 8006e24:	4770      	bx	lr
=======
 8006cf8:	b10a      	cbz	r2, 8006cfe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006cfa:	6181      	str	r1, [r0, #24]
 8006cfc:	4770      	bx	lr
>>>>>>> render
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
<<<<<<< HEAD
 8006e26:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8006e28:	4770      	bx	lr

08006e2a <I2C_Flush_TXDR>:
=======
 8006cfe:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8006d00:	4770      	bx	lr

08006d02 <I2C_Flush_TXDR>:
>>>>>>> render
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
<<<<<<< HEAD
 8006e2a:	6803      	ldr	r3, [r0, #0]
 8006e2c:	699a      	ldr	r2, [r3, #24]
 8006e2e:	f012 0f02 	tst.w	r2, #2
 8006e32:	d001      	beq.n	8006e38 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006e34:	2200      	movs	r2, #0
 8006e36:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8006d02:	6803      	ldr	r3, [r0, #0]
 8006d04:	699a      	ldr	r2, [r3, #24]
 8006d06:	f012 0f02 	tst.w	r2, #2
 8006d0a:	d001      	beq.n	8006d10 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> render
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
<<<<<<< HEAD
 8006e38:	6803      	ldr	r3, [r0, #0]
 8006e3a:	699a      	ldr	r2, [r3, #24]
 8006e3c:	f012 0f01 	tst.w	r2, #1
 8006e40:	d103      	bne.n	8006e4a <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006e42:	699a      	ldr	r2, [r3, #24]
 8006e44:	f042 0201 	orr.w	r2, r2, #1
 8006e48:	619a      	str	r2, [r3, #24]
  }
}
 8006e4a:	4770      	bx	lr

08006e4c <I2C_Disable_IRQ>:
=======
 8006d10:	6803      	ldr	r3, [r0, #0]
 8006d12:	699a      	ldr	r2, [r3, #24]
 8006d14:	f012 0f01 	tst.w	r2, #1
 8006d18:	d103      	bne.n	8006d22 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006d1a:	699a      	ldr	r2, [r3, #24]
 8006d1c:	f042 0201 	orr.w	r2, r2, #1
 8006d20:	619a      	str	r2, [r3, #24]
  }
}
 8006d22:	4770      	bx	lr

08006d24 <I2C_Disable_IRQ>:
>>>>>>> render
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
<<<<<<< HEAD
 8006e4c:	f011 0f01 	tst.w	r1, #1
 8006e50:	d009      	beq.n	8006e66 <I2C_Disable_IRQ+0x1a>
=======
 8006d24:	f011 0f01 	tst.w	r1, #1
 8006d28:	d009      	beq.n	8006d3e <I2C_Disable_IRQ+0x1a>
>>>>>>> render
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
<<<<<<< HEAD
 8006e52:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006e56:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006e5a:	2b28      	cmp	r3, #40	; 0x28
 8006e5c:	d001      	beq.n	8006e62 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006e5e:	23f2      	movs	r3, #242	; 0xf2
 8006e60:	e002      	b.n	8006e68 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006e62:	2342      	movs	r3, #66	; 0x42
 8006e64:	e000      	b.n	8006e68 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8006e66:	2300      	movs	r3, #0
=======
 8006d2a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006d2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006d32:	2b28      	cmp	r3, #40	; 0x28
 8006d34:	d001      	beq.n	8006d3a <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006d36:	23f2      	movs	r3, #242	; 0xf2
 8006d38:	e002      	b.n	8006d40 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006d3a:	2342      	movs	r3, #66	; 0x42
 8006d3c:	e000      	b.n	8006d40 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8006d3e:	2300      	movs	r3, #0
>>>>>>> render
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
<<<<<<< HEAD
 8006e68:	f011 0f02 	tst.w	r1, #2
 8006e6c:	d009      	beq.n	8006e82 <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006e6e:	f043 0c44 	orr.w	ip, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e72:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8006e76:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8006e7a:	2a28      	cmp	r2, #40	; 0x28
 8006e7c:	d010      	beq.n	8006ea0 <I2C_Disable_IRQ+0x54>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006e7e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
=======
 8006d40:	f011 0f02 	tst.w	r1, #2
 8006d44:	d009      	beq.n	8006d5a <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006d46:	f043 0c44 	orr.w	ip, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d4a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8006d4e:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8006d52:	2a28      	cmp	r2, #40	; 0x28
 8006d54:	d010      	beq.n	8006d78 <I2C_Disable_IRQ+0x54>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006d56:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
>>>>>>> render
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
<<<<<<< HEAD
 8006e82:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8006e86:	d10d      	bne.n	8006ea4 <I2C_Disable_IRQ+0x58>
=======
 8006d5a:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8006d5e:	d10d      	bne.n	8006d7c <I2C_Disable_IRQ+0x58>
>>>>>>> render
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
<<<<<<< HEAD
 8006e88:	2910      	cmp	r1, #16
 8006e8a:	d00e      	beq.n	8006eaa <I2C_Disable_IRQ+0x5e>
=======
 8006d60:	2910      	cmp	r1, #16
 8006d62:	d00e      	beq.n	8006d82 <I2C_Disable_IRQ+0x5e>
>>>>>>> render
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
<<<<<<< HEAD
 8006e8c:	2920      	cmp	r1, #32
 8006e8e:	d00f      	beq.n	8006eb0 <I2C_Disable_IRQ+0x64>
=======
 8006d64:	2920      	cmp	r1, #32
 8006d66:	d00f      	beq.n	8006d88 <I2C_Disable_IRQ+0x64>
>>>>>>> render
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
<<<<<<< HEAD
 8006e90:	2940      	cmp	r1, #64	; 0x40
 8006e92:	d010      	beq.n	8006eb6 <I2C_Disable_IRQ+0x6a>
=======
 8006d68:	2940      	cmp	r1, #64	; 0x40
 8006d6a:	d010      	beq.n	8006d8e <I2C_Disable_IRQ+0x6a>
>>>>>>> render
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
<<<<<<< HEAD
 8006e94:	6801      	ldr	r1, [r0, #0]
 8006e96:	680a      	ldr	r2, [r1, #0]
 8006e98:	ea22 0303 	bic.w	r3, r2, r3
 8006e9c:	600b      	str	r3, [r1, #0]
}
 8006e9e:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006ea0:	4663      	mov	r3, ip
 8006ea2:	e7ee      	b.n	8006e82 <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006ea4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006ea8:	e7ee      	b.n	8006e88 <I2C_Disable_IRQ+0x3c>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006eaa:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006eae:	e7ed      	b.n	8006e8c <I2C_Disable_IRQ+0x40>
    tmpisr |= I2C_IT_STOPI;
 8006eb0:	f043 0320 	orr.w	r3, r3, #32
 8006eb4:	e7ec      	b.n	8006e90 <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI;
 8006eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eba:	e7eb      	b.n	8006e94 <I2C_Disable_IRQ+0x48>

08006ebc <HAL_I2C_Init>:
  if (hi2c == NULL)
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	d059      	beq.n	8006f74 <HAL_I2C_Init+0xb8>
{
 8006ec0:	b510      	push	{r4, lr}
 8006ec2:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ec4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d043      	beq.n	8006f54 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ecc:	2324      	movs	r3, #36	; 0x24
 8006ece:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006ed2:	6822      	ldr	r2, [r4, #0]
 8006ed4:	6813      	ldr	r3, [r2, #0]
 8006ed6:	f023 0301 	bic.w	r3, r3, #1
 8006eda:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006edc:	6863      	ldr	r3, [r4, #4]
 8006ede:	6822      	ldr	r2, [r4, #0]
 8006ee0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8006ee4:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006ee6:	6822      	ldr	r2, [r4, #0]
 8006ee8:	6893      	ldr	r3, [r2, #8]
 8006eea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006eee:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ef0:	68e3      	ldr	r3, [r4, #12]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d033      	beq.n	8006f5e <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ef6:	68a3      	ldr	r3, [r4, #8]
 8006ef8:	6822      	ldr	r2, [r4, #0]
 8006efa:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8006efe:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f00:	68e3      	ldr	r3, [r4, #12]
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d031      	beq.n	8006f6a <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006f06:	6822      	ldr	r2, [r4, #0]
 8006f08:	6853      	ldr	r3, [r2, #4]
 8006f0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f12:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006f14:	6822      	ldr	r2, [r4, #0]
 8006f16:	68d3      	ldr	r3, [r2, #12]
 8006f18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f1c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f1e:	6923      	ldr	r3, [r4, #16]
 8006f20:	6962      	ldr	r2, [r4, #20]
 8006f22:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006f24:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f26:	6822      	ldr	r2, [r4, #0]
 8006f28:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006f2c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006f2e:	69e3      	ldr	r3, [r4, #28]
 8006f30:	6a21      	ldr	r1, [r4, #32]
 8006f32:	6822      	ldr	r2, [r4, #0]
 8006f34:	430b      	orrs	r3, r1
 8006f36:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8006f38:	6822      	ldr	r2, [r4, #0]
 8006f3a:	6813      	ldr	r3, [r2, #0]
 8006f3c:	f043 0301 	orr.w	r3, r3, #1
 8006f40:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f42:	2000      	movs	r0, #0
 8006f44:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006f46:	2320      	movs	r3, #32
 8006f48:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f4c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f4e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8006f52:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8006f54:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8006f58:	f7fa ff16 	bl	8001d88 <HAL_I2C_MspInit>
 8006f5c:	e7b6      	b.n	8006ecc <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006f5e:	68a3      	ldr	r3, [r4, #8]
 8006f60:	6822      	ldr	r2, [r4, #0]
 8006f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f66:	6093      	str	r3, [r2, #8]
 8006f68:	e7ca      	b.n	8006f00 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006f6a:	6823      	ldr	r3, [r4, #0]
 8006f6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f70:	605a      	str	r2, [r3, #4]
 8006f72:	e7c8      	b.n	8006f06 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8006f74:	2001      	movs	r0, #1
}
 8006f76:	4770      	bx	lr

08006f78 <HAL_I2C_EV_IRQHandler>:
{
 8006f78:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006f7a:	6803      	ldr	r3, [r0, #0]
 8006f7c:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006f7e:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8006f80:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006f82:	b103      	cbz	r3, 8006f86 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8006f84:	4798      	blx	r3
}
 8006f86:	bd08      	pop	{r3, pc}

08006f88 <HAL_I2C_SlaveTxCpltCallback>:
}
 8006f88:	4770      	bx	lr

08006f8a <HAL_I2C_SlaveRxCpltCallback>:
}
 8006f8a:	4770      	bx	lr

08006f8c <I2C_ITSlaveSeqCplt>:
{
 8006f8c:	b510      	push	{r4, lr}
 8006f8e:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006f90:	6803      	ldr	r3, [r0, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f94:	2100      	movs	r1, #0
 8006f96:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006f9a:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8006f9e:	d00e      	beq.n	8006fbe <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006fa6:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006fa8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b29      	cmp	r3, #41	; 0x29
 8006fb0:	d00d      	beq.n	8006fce <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006fb2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8006fba:	d018      	beq.n	8006fee <I2C_ITSlaveSeqCplt+0x62>
}
 8006fbc:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006fbe:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8006fc2:	d0f1      	beq.n	8006fa8 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	e7ec      	b.n	8006fa8 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006fce:	2328      	movs	r3, #40	; 0x28
 8006fd0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006fd4:	2321      	movs	r3, #33	; 0x21
 8006fd6:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006fd8:	2101      	movs	r1, #1
 8006fda:	4620      	mov	r0, r4
 8006fdc:	f7ff ff36 	bl	8006e4c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	f7ff ffce 	bl	8006f88 <HAL_I2C_SlaveTxCpltCallback>
 8006fec:	e7e6      	b.n	8006fbc <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006fee:	2328      	movs	r3, #40	; 0x28
 8006ff0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ff4:	2322      	movs	r3, #34	; 0x22
 8006ff6:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006ff8:	2102      	movs	r1, #2
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f7ff ff26 	bl	8006e4c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007000:	2300      	movs	r3, #0
 8007002:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007006:	4620      	mov	r0, r4
 8007008:	f7ff ffbf 	bl	8006f8a <HAL_I2C_SlaveRxCpltCallback>
}
 800700c:	e7d6      	b.n	8006fbc <I2C_ITSlaveSeqCplt+0x30>

0800700e <HAL_I2C_AddrCallback>:
}
 800700e:	4770      	bx	lr

08007010 <I2C_ITAddrCplt>:
{
 8007010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007012:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007014:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007018:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800701c:	2b28      	cmp	r3, #40	; 0x28
 800701e:	d006      	beq.n	800702e <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007020:	6803      	ldr	r3, [r0, #0]
 8007022:	2208      	movs	r2, #8
 8007024:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007026:	2300      	movs	r3, #0
 8007028:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 800702c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 800702e:	6803      	ldr	r3, [r0, #0]
 8007030:	699e      	ldr	r6, [r3, #24]
 8007032:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007036:	699a      	ldr	r2, [r3, #24]
 8007038:	0c12      	lsrs	r2, r2, #16
 800703a:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800703e:	689a      	ldr	r2, [r3, #8]
 8007040:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007044:	68df      	ldr	r7, [r3, #12]
 8007046:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800704a:	68c1      	ldr	r1, [r0, #12]
 800704c:	2902      	cmp	r1, #2
 800704e:	d122      	bne.n	8007096 <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007050:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8007054:	f015 0f06 	tst.w	r5, #6
 8007058:	d110      	bne.n	800707c <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 800705a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800705c:	3101      	adds	r1, #1
 800705e:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8007060:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007062:	2902      	cmp	r1, #2
 8007064:	d1e2      	bne.n	800702c <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 8007066:	2100      	movs	r1, #0
 8007068:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800706a:	2008      	movs	r0, #8
 800706c:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 800706e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007072:	4631      	mov	r1, r6
 8007074:	4620      	mov	r0, r4
 8007076:	f7ff ffca 	bl	800700e <HAL_I2C_AddrCallback>
 800707a:	e7d7      	b.n	800702c <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800707c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007080:	f7ff fee4 	bl	8006e4c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007084:	2300      	movs	r3, #0
 8007086:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800708a:	463a      	mov	r2, r7
 800708c:	4631      	mov	r1, r6
 800708e:	4620      	mov	r0, r4
 8007090:	f7ff ffbd 	bl	800700e <HAL_I2C_AddrCallback>
 8007094:	e7ca      	b.n	800702c <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007096:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800709a:	f7ff fed7 	bl	8006e4c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800709e:	2300      	movs	r3, #0
 80070a0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80070a4:	462a      	mov	r2, r5
 80070a6:	4631      	mov	r1, r6
 80070a8:	4620      	mov	r0, r4
 80070aa:	f7ff ffb0 	bl	800700e <HAL_I2C_AddrCallback>
 80070ae:	e7bd      	b.n	800702c <I2C_ITAddrCplt+0x1c>

080070b0 <HAL_I2C_ListenCpltCallback>:
}
 80070b0:	4770      	bx	lr
	...

080070b4 <I2C_ITListenCplt>:
{
 80070b4:	b510      	push	{r4, lr}
 80070b6:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070b8:	4b17      	ldr	r3, [pc, #92]	; (8007118 <I2C_ITListenCplt+0x64>)
 80070ba:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80070bc:	2300      	movs	r3, #0
 80070be:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80070c0:	2220      	movs	r2, #32
 80070c2:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070c6:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 80070ca:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80070cc:	f011 0f04 	tst.w	r1, #4
 80070d0:	d013      	beq.n	80070fa <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070d2:	6803      	ldr	r3, [r0, #0]
 80070d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80070d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80070da:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80070dc:	3301      	adds	r3, #1
 80070de:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80070e0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 80070e2:	b153      	cbz	r3, 80070fa <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 80070e4:	3b01      	subs	r3, #1
 80070e6:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 80070e8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	3b01      	subs	r3, #1
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80070f2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80070f4:	f043 0304 	orr.w	r3, r3, #4
 80070f8:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80070fa:	f248 0103 	movw	r1, #32771	; 0x8003
 80070fe:	4620      	mov	r0, r4
 8007100:	f7ff fea4 	bl	8006e4c <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007104:	6823      	ldr	r3, [r4, #0]
 8007106:	2210      	movs	r2, #16
 8007108:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800710a:	2300      	movs	r3, #0
 800710c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8007110:	4620      	mov	r0, r4
 8007112:	f7ff ffcd 	bl	80070b0 <HAL_I2C_ListenCpltCallback>
}
 8007116:	bd10      	pop	{r4, pc}
 8007118:	ffff0000 	.word	0xffff0000

0800711c <HAL_I2C_ErrorCallback>:
}
 800711c:	4770      	bx	lr

0800711e <HAL_I2C_AbortCpltCallback>:
}
 800711e:	4770      	bx	lr

08007120 <I2C_TreatErrorCallback>:
{
 8007120:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007122:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007126:	b2db      	uxtb	r3, r3
 8007128:	2b60      	cmp	r3, #96	; 0x60
 800712a:	d006      	beq.n	800713a <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800712c:	2300      	movs	r3, #0
 800712e:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007130:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007134:	f7ff fff2 	bl	800711c <HAL_I2C_ErrorCallback>
}
 8007138:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800713a:	2320      	movs	r3, #32
 800713c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007140:	2300      	movs	r3, #0
 8007142:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007144:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8007148:	f7ff ffe9 	bl	800711e <HAL_I2C_AbortCpltCallback>
 800714c:	e7f4      	b.n	8007138 <I2C_TreatErrorCallback+0x18>
	...

08007150 <I2C_ITError>:
{
 8007150:	b510      	push	{r4, lr}
 8007152:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007154:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007158:	2000      	movs	r0, #0
 800715a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800715e:	4a3b      	ldr	r2, [pc, #236]	; (800724c <I2C_ITError+0xfc>)
 8007160:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007162:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8007164:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007166:	430a      	orrs	r2, r1
 8007168:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800716a:	3b28      	subs	r3, #40	; 0x28
 800716c:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800716e:	2b02      	cmp	r3, #2
 8007170:	d819      	bhi.n	80071a6 <I2C_ITError+0x56>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007172:	2103      	movs	r1, #3
 8007174:	4620      	mov	r0, r4
 8007176:	f7ff fe69 	bl	8006e4c <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800717a:	2328      	movs	r3, #40	; 0x28
 800717c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007180:	4b33      	ldr	r3, [pc, #204]	; (8007250 <I2C_ITError+0x100>)
 8007182:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8007184:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007186:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007188:	b11a      	cbz	r2, 8007192 <I2C_ITError+0x42>
 800718a:	2b11      	cmp	r3, #17
 800718c:	d01b      	beq.n	80071c6 <I2C_ITError+0x76>
 800718e:	2b21      	cmp	r3, #33	; 0x21
 8007190:	d019      	beq.n	80071c6 <I2C_ITError+0x76>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007192:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007194:	b11a      	cbz	r2, 800719e <I2C_ITError+0x4e>
 8007196:	2b12      	cmp	r3, #18
 8007198:	d036      	beq.n	8007208 <I2C_ITError+0xb8>
 800719a:	2b22      	cmp	r3, #34	; 0x22
 800719c:	d034      	beq.n	8007208 <I2C_ITError+0xb8>
    I2C_TreatErrorCallback(hi2c);
 800719e:	4620      	mov	r0, r4
 80071a0:	f7ff ffbe 	bl	8007120 <I2C_TreatErrorCallback>
}
 80071a4:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80071a6:	f248 0103 	movw	r1, #32771	; 0x8003
 80071aa:	4620      	mov	r0, r4
 80071ac:	f7ff fe4e 	bl	8006e4c <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80071b0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b60      	cmp	r3, #96	; 0x60
 80071b8:	d002      	beq.n	80071c0 <I2C_ITError+0x70>
      hi2c->State         = HAL_I2C_STATE_READY;
 80071ba:	2320      	movs	r3, #32
 80071bc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 80071c0:	2300      	movs	r3, #0
 80071c2:	6363      	str	r3, [r4, #52]	; 0x34
 80071c4:	e7de      	b.n	8007184 <I2C_ITError+0x34>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80071ce:	d003      	beq.n	80071d8 <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80071d6:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80071d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80071da:	f7ff fc04 	bl	80069e6 <HAL_DMA_GetState>
 80071de:	2801      	cmp	r0, #1
 80071e0:	d00e      	beq.n	8007200 <I2C_ITError+0xb0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80071e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80071e4:	4a1b      	ldr	r2, [pc, #108]	; (8007254 <I2C_ITError+0x104>)
 80071e6:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80071e8:	2300      	movs	r3, #0
 80071ea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80071ee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80071f0:	f7ff fb58 	bl	80068a4 <HAL_DMA_Abort_IT>
 80071f4:	2800      	cmp	r0, #0
 80071f6:	d0d5      	beq.n	80071a4 <I2C_ITError+0x54>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80071f8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80071fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80071fc:	4798      	blx	r3
 80071fe:	e7d1      	b.n	80071a4 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8007200:	4620      	mov	r0, r4
 8007202:	f7ff ff8d 	bl	8007120 <I2C_TreatErrorCallback>
 8007206:	e7cd      	b.n	80071a4 <I2C_ITError+0x54>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007208:	6823      	ldr	r3, [r4, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8007210:	d003      	beq.n	800721a <I2C_ITError+0xca>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007218:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800721a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800721c:	f7ff fbe3 	bl	80069e6 <HAL_DMA_GetState>
 8007220:	2801      	cmp	r0, #1
 8007222:	d00e      	beq.n	8007242 <I2C_ITError+0xf2>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007224:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007226:	4a0b      	ldr	r2, [pc, #44]	; (8007254 <I2C_ITError+0x104>)
 8007228:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800722a:	2300      	movs	r3, #0
 800722c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007230:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007232:	f7ff fb37 	bl	80068a4 <HAL_DMA_Abort_IT>
 8007236:	2800      	cmp	r0, #0
 8007238:	d0b4      	beq.n	80071a4 <I2C_ITError+0x54>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800723a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800723c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800723e:	4798      	blx	r3
 8007240:	e7b0      	b.n	80071a4 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8007242:	4620      	mov	r0, r4
 8007244:	f7ff ff6c 	bl	8007120 <I2C_TreatErrorCallback>
 8007248:	e7ac      	b.n	80071a4 <I2C_ITError+0x54>
 800724a:	bf00      	nop
 800724c:	ffff0000 	.word	0xffff0000
 8007250:	080073c1 	.word	0x080073c1
 8007254:	08007579 	.word	0x08007579

08007258 <I2C_ITSlaveCplt>:
{
 8007258:	b570      	push	{r4, r5, r6, lr}
 800725a:	4604      	mov	r4, r0
 800725c:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800725e:	6802      	ldr	r2, [r0, #0]
 8007260:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007262:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007266:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007268:	2120      	movs	r1, #32
 800726a:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800726c:	2b21      	cmp	r3, #33	; 0x21
 800726e:	d00d      	beq.n	800728c <I2C_ITSlaveCplt+0x34>
 8007270:	2b29      	cmp	r3, #41	; 0x29
 8007272:	d00b      	beq.n	800728c <I2C_ITSlaveCplt+0x34>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007274:	2b22      	cmp	r3, #34	; 0x22
 8007276:	d001      	beq.n	800727c <I2C_ITSlaveCplt+0x24>
 8007278:	2b2a      	cmp	r3, #42	; 0x2a
 800727a:	d10e      	bne.n	800729a <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800727c:	f248 0102 	movw	r1, #32770	; 0x8002
 8007280:	4620      	mov	r0, r4
 8007282:	f7ff fde3 	bl	8006e4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007286:	2322      	movs	r3, #34	; 0x22
 8007288:	6323      	str	r3, [r4, #48]	; 0x30
 800728a:	e006      	b.n	800729a <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800728c:	f248 0101 	movw	r1, #32769	; 0x8001
 8007290:	4620      	mov	r0, r4
 8007292:	f7ff fddb 	bl	8006e4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007296:	2321      	movs	r3, #33	; 0x21
 8007298:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800729a:	6822      	ldr	r2, [r4, #0]
 800729c:	6853      	ldr	r3, [r2, #4]
 800729e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072a2:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 80072a4:	6822      	ldr	r2, [r4, #0]
 80072a6:	6853      	ldr	r3, [r2, #4]
 80072a8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80072ac:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80072b0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80072b4:	f023 0301 	bic.w	r3, r3, #1
 80072b8:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 80072ba:	4620      	mov	r0, r4
 80072bc:	f7ff fdb5 	bl	8006e2a <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80072c0:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80072c4:	d040      	beq.n	8007348 <I2C_ITSlaveCplt+0xf0>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80072c6:	6822      	ldr	r2, [r4, #0]
 80072c8:	6813      	ldr	r3, [r2, #0]
 80072ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072ce:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 80072d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80072d2:	b11b      	cbz	r3, 80072dc <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	b29b      	uxth	r3, r3
 80072da:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80072dc:	f015 0f04 	tst.w	r5, #4
 80072e0:	d011      	beq.n	8007306 <I2C_ITSlaveCplt+0xae>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80072e2:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80072e6:	6823      	ldr	r3, [r4, #0]
 80072e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80072ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072f0:	3301      	adds	r3, #1
 80072f2:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80072f4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80072f6:	b133      	cbz	r3, 8007306 <I2C_ITSlaveCplt+0xae>
      hi2c->XferSize--;
 80072f8:	3b01      	subs	r3, #1
 80072fa:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80072fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80072fe:	b29b      	uxth	r3, r3
 8007300:	3b01      	subs	r3, #1
 8007302:	b29b      	uxth	r3, r3
 8007304:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8007306:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007308:	b29b      	uxth	r3, r3
 800730a:	b11b      	cbz	r3, 8007314 <I2C_ITSlaveCplt+0xbc>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800730c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800730e:	f043 0304 	orr.w	r3, r3, #4
 8007312:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007314:	2300      	movs	r3, #0
 8007316:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 800731a:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800731c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800731e:	bb1b      	cbnz	r3, 8007368 <I2C_ITSlaveCplt+0x110>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007320:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007322:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007326:	d12d      	bne.n	8007384 <I2C_ITSlaveCplt+0x12c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007328:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b22      	cmp	r3, #34	; 0x22
 8007330:	d038      	beq.n	80073a4 <I2C_ITSlaveCplt+0x14c>
    hi2c->State = HAL_I2C_STATE_READY;
 8007332:	2320      	movs	r3, #32
 8007334:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007338:	2300      	movs	r3, #0
 800733a:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800733c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007340:	4620      	mov	r0, r4
 8007342:	f7ff fe21 	bl	8006f88 <HAL_I2C_SlaveTxCpltCallback>
}
 8007346:	e02c      	b.n	80073a2 <I2C_ITSlaveCplt+0x14a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007348:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 800734c:	d0c6      	beq.n	80072dc <I2C_ITSlaveCplt+0x84>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800734e:	6822      	ldr	r2, [r4, #0]
 8007350:	6813      	ldr	r3, [r2, #0]
 8007352:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007356:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8007358:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800735a:	2b00      	cmp	r3, #0
 800735c:	d0be      	beq.n	80072dc <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	b29b      	uxth	r3, r3
 8007364:	8563      	strh	r3, [r4, #42]	; 0x2a
 8007366:	e7b9      	b.n	80072dc <I2C_ITSlaveCplt+0x84>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007368:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800736a:	4620      	mov	r0, r4
 800736c:	f7ff fef0 	bl	8007150 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007370:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b28      	cmp	r3, #40	; 0x28
 8007378:	d113      	bne.n	80073a2 <I2C_ITSlaveCplt+0x14a>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800737a:	4629      	mov	r1, r5
 800737c:	4620      	mov	r0, r4
 800737e:	f7ff fe99 	bl	80070b4 <I2C_ITListenCplt>
 8007382:	e00e      	b.n	80073a2 <I2C_ITSlaveCplt+0x14a>
    I2C_ITSlaveSeqCplt(hi2c);
 8007384:	4620      	mov	r0, r4
 8007386:	f7ff fe01 	bl	8006f8c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800738a:	4b0c      	ldr	r3, [pc, #48]	; (80073bc <I2C_ITSlaveCplt+0x164>)
 800738c:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800738e:	2320      	movs	r3, #32
 8007390:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007394:	2300      	movs	r3, #0
 8007396:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007398:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800739c:	4620      	mov	r0, r4
 800739e:	f7ff fe87 	bl	80070b0 <HAL_I2C_ListenCpltCallback>
}
 80073a2:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80073a4:	2320      	movs	r3, #32
 80073a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80073aa:	2300      	movs	r3, #0
 80073ac:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80073ae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80073b2:	4620      	mov	r0, r4
 80073b4:	f7ff fde9 	bl	8006f8a <HAL_I2C_SlaveRxCpltCallback>
 80073b8:	e7f3      	b.n	80073a2 <I2C_ITSlaveCplt+0x14a>
 80073ba:	bf00      	nop
 80073bc:	ffff0000 	.word	0xffff0000

080073c0 <I2C_Slave_ISR_IT>:
{
 80073c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 80073c2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 80073c4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	f000 809e 	beq.w	800750a <I2C_Slave_ISR_IT+0x14a>
 80073ce:	4604      	mov	r4, r0
 80073d0:	460d      	mov	r5, r1
 80073d2:	4616      	mov	r6, r2
 80073d4:	2301      	movs	r3, #1
 80073d6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80073da:	f011 0f20 	tst.w	r1, #32
 80073de:	d002      	beq.n	80073e6 <I2C_Slave_ISR_IT+0x26>
 80073e0:	f012 0f20 	tst.w	r2, #32
 80073e4:	d119      	bne.n	800741a <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80073e6:	f015 0f10 	tst.w	r5, #16
 80073ea:	d03e      	beq.n	800746a <I2C_Slave_ISR_IT+0xaa>
 80073ec:	f016 0f10 	tst.w	r6, #16
 80073f0:	d03b      	beq.n	800746a <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 80073f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	bb43      	cbnz	r3, 800744a <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80073f8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b28      	cmp	r3, #40	; 0x28
 8007400:	d00e      	beq.n	8007420 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007402:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b29      	cmp	r3, #41	; 0x29
 800740a:	d011      	beq.n	8007430 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800740c:	6823      	ldr	r3, [r4, #0]
 800740e:	2210      	movs	r2, #16
 8007410:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8007412:	2000      	movs	r0, #0
 8007414:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8007418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800741a:	f7ff ff1d 	bl	8007258 <I2C_ITSlaveCplt>
 800741e:	e7e2      	b.n	80073e6 <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007420:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8007424:	d1ed      	bne.n	8007402 <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007426:	4629      	mov	r1, r5
 8007428:	4620      	mov	r0, r4
 800742a:	f7ff fe43 	bl	80070b4 <I2C_ITListenCplt>
 800742e:	e7f0      	b.n	8007412 <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007430:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8007434:	d0ea      	beq.n	800740c <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007436:	6823      	ldr	r3, [r4, #0]
 8007438:	2210      	movs	r2, #16
 800743a:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 800743c:	4620      	mov	r0, r4
 800743e:	f7ff fcf4 	bl	8006e2a <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8007442:	4620      	mov	r0, r4
 8007444:	f7ff fda2 	bl	8006f8c <I2C_ITSlaveSeqCplt>
 8007448:	e7e3      	b.n	8007412 <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800744a:	6823      	ldr	r3, [r4, #0]
 800744c:	2210      	movs	r2, #16
 800744e:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007450:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007452:	f043 0304 	orr.w	r3, r3, #4
 8007456:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007458:	b117      	cbz	r7, 8007460 <I2C_Slave_ISR_IT+0xa0>
 800745a:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 800745e:	d1d8      	bne.n	8007412 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007460:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007462:	4620      	mov	r0, r4
 8007464:	f7ff fe74 	bl	8007150 <I2C_ITError>
 8007468:	e7d3      	b.n	8007412 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800746a:	f015 0f04 	tst.w	r5, #4
 800746e:	d01f      	beq.n	80074b0 <I2C_Slave_ISR_IT+0xf0>
 8007470:	f016 0f04 	tst.w	r6, #4
 8007474:	d01c      	beq.n	80074b0 <I2C_Slave_ISR_IT+0xf0>
    if (hi2c->XferCount > 0U)
 8007476:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007478:	b29b      	uxth	r3, r3
 800747a:	b173      	cbz	r3, 800749a <I2C_Slave_ISR_IT+0xda>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007480:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007482:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8007484:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007486:	3301      	adds	r3, #1
 8007488:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800748a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800748c:	3b01      	subs	r3, #1
 800748e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007490:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007492:	b29b      	uxth	r3, r3
 8007494:	3b01      	subs	r3, #1
 8007496:	b29b      	uxth	r3, r3
 8007498:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800749a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800749c:	b29b      	uxth	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1b7      	bne.n	8007412 <I2C_Slave_ISR_IT+0x52>
 80074a2:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 80074a6:	d0b4      	beq.n	8007412 <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 80074a8:	4620      	mov	r0, r4
 80074aa:	f7ff fd6f 	bl	8006f8c <I2C_ITSlaveSeqCplt>
 80074ae:	e7b0      	b.n	8007412 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80074b0:	f015 0f08 	tst.w	r5, #8
 80074b4:	d002      	beq.n	80074bc <I2C_Slave_ISR_IT+0xfc>
 80074b6:	f016 0f08 	tst.w	r6, #8
 80074ba:	d118      	bne.n	80074ee <I2C_Slave_ISR_IT+0x12e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80074bc:	f015 0f02 	tst.w	r5, #2
 80074c0:	d0a7      	beq.n	8007412 <I2C_Slave_ISR_IT+0x52>
 80074c2:	f016 0f02 	tst.w	r6, #2
 80074c6:	d0a4      	beq.n	8007412 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 80074c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	b1a3      	cbz	r3, 80074f8 <I2C_Slave_ISR_IT+0x138>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80074ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80074d0:	6823      	ldr	r3, [r4, #0]
 80074d2:	7812      	ldrb	r2, [r2, #0]
 80074d4:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80074d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074d8:	3301      	adds	r3, #1
 80074da:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80074dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80074de:	b29b      	uxth	r3, r3
 80074e0:	3b01      	subs	r3, #1
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80074e6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80074e8:	3b01      	subs	r3, #1
 80074ea:	8523      	strh	r3, [r4, #40]	; 0x28
 80074ec:	e791      	b.n	8007412 <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80074ee:	4629      	mov	r1, r5
 80074f0:	4620      	mov	r0, r4
 80074f2:	f7ff fd8d 	bl	8007010 <I2C_ITAddrCplt>
 80074f6:	e78c      	b.n	8007412 <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80074f8:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 80074fc:	d001      	beq.n	8007502 <I2C_Slave_ISR_IT+0x142>
 80074fe:	2f00      	cmp	r7, #0
 8007500:	d187      	bne.n	8007412 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 8007502:	4620      	mov	r0, r4
 8007504:	f7ff fd42 	bl	8006f8c <I2C_ITSlaveSeqCplt>
 8007508:	e783      	b.n	8007412 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 800750a:	2002      	movs	r0, #2
 800750c:	e784      	b.n	8007418 <I2C_Slave_ISR_IT+0x58>

0800750e <HAL_I2C_ER_IRQHandler>:
{
 800750e:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007510:	6802      	ldr	r2, [r0, #0]
 8007512:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007514:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007516:	f413 7f80 	tst.w	r3, #256	; 0x100
 800751a:	d009      	beq.n	8007530 <HAL_I2C_ER_IRQHandler+0x22>
 800751c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007520:	d006      	beq.n	8007530 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007522:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8007524:	f044 0401 	orr.w	r4, r4, #1
 8007528:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800752a:	f44f 7480 	mov.w	r4, #256	; 0x100
 800752e:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007530:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007534:	d00a      	beq.n	800754c <HAL_I2C_ER_IRQHandler+0x3e>
 8007536:	f011 0f80 	tst.w	r1, #128	; 0x80
 800753a:	d007      	beq.n	800754c <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800753c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800753e:	f042 0208 	orr.w	r2, r2, #8
 8007542:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007544:	6802      	ldr	r2, [r0, #0]
 8007546:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800754a:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800754c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007550:	d00a      	beq.n	8007568 <HAL_I2C_ER_IRQHandler+0x5a>
 8007552:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007556:	d007      	beq.n	8007568 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007558:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800755a:	f043 0302 	orr.w	r3, r3, #2
 800755e:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007560:	6803      	ldr	r3, [r0, #0]
 8007562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007566:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8007568:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800756a:	f011 0f0b 	tst.w	r1, #11
 800756e:	d100      	bne.n	8007572 <HAL_I2C_ER_IRQHandler+0x64>
}
 8007570:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 8007572:	f7ff fded 	bl	8007150 <I2C_ITError>
}
 8007576:	e7fb      	b.n	8007570 <HAL_I2C_ER_IRQHandler+0x62>

08007578 <I2C_DMAAbort>:
{
 8007578:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800757a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->hdmatx != NULL)
 800757c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800757e:	b10b      	cbz	r3, 8007584 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007580:	2200      	movs	r2, #0
 8007582:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 8007584:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8007586:	b10b      	cbz	r3, 800758c <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007588:	2200      	movs	r2, #0
 800758a:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 800758c:	f7ff fdc8 	bl	8007120 <I2C_TreatErrorCallback>
}
 8007590:	bd08      	pop	{r3, pc}

08007592 <HAL_I2CEx_ConfigAnalogFilter>:
=======
 8006d6c:	6801      	ldr	r1, [r0, #0]
 8006d6e:	680a      	ldr	r2, [r1, #0]
 8006d70:	ea22 0303 	bic.w	r3, r2, r3
 8006d74:	600b      	str	r3, [r1, #0]
}
 8006d76:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006d78:	4663      	mov	r3, ip
 8006d7a:	e7ee      	b.n	8006d5a <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006d7c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006d80:	e7ee      	b.n	8006d60 <I2C_Disable_IRQ+0x3c>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006d82:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006d86:	e7ed      	b.n	8006d64 <I2C_Disable_IRQ+0x40>
    tmpisr |= I2C_IT_STOPI;
 8006d88:	f043 0320 	orr.w	r3, r3, #32
 8006d8c:	e7ec      	b.n	8006d68 <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI;
 8006d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d92:	e7eb      	b.n	8006d6c <I2C_Disable_IRQ+0x48>

08006d94 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8006d94:	2800      	cmp	r0, #0
 8006d96:	d059      	beq.n	8006e4c <HAL_I2C_Init+0xb8>
{
 8006d98:	b510      	push	{r4, lr}
 8006d9a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d9c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d043      	beq.n	8006e2c <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006da4:	2324      	movs	r3, #36	; 0x24
 8006da6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006daa:	6822      	ldr	r2, [r4, #0]
 8006dac:	6813      	ldr	r3, [r2, #0]
 8006dae:	f023 0301 	bic.w	r3, r3, #1
 8006db2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006db4:	6863      	ldr	r3, [r4, #4]
 8006db6:	6822      	ldr	r2, [r4, #0]
 8006db8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8006dbc:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006dbe:	6822      	ldr	r2, [r4, #0]
 8006dc0:	6893      	ldr	r3, [r2, #8]
 8006dc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006dc6:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006dc8:	68e3      	ldr	r3, [r4, #12]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d033      	beq.n	8006e36 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006dce:	68a3      	ldr	r3, [r4, #8]
 8006dd0:	6822      	ldr	r2, [r4, #0]
 8006dd2:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8006dd6:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006dd8:	68e3      	ldr	r3, [r4, #12]
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d031      	beq.n	8006e42 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006dde:	6822      	ldr	r2, [r4, #0]
 8006de0:	6853      	ldr	r3, [r2, #4]
 8006de2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dea:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006dec:	6822      	ldr	r2, [r4, #0]
 8006dee:	68d3      	ldr	r3, [r2, #12]
 8006df0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006df4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006df6:	6923      	ldr	r3, [r4, #16]
 8006df8:	6962      	ldr	r2, [r4, #20]
 8006dfa:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006dfc:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006dfe:	6822      	ldr	r2, [r4, #0]
 8006e00:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006e04:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006e06:	69e3      	ldr	r3, [r4, #28]
 8006e08:	6a21      	ldr	r1, [r4, #32]
 8006e0a:	6822      	ldr	r2, [r4, #0]
 8006e0c:	430b      	orrs	r3, r1
 8006e0e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8006e10:	6822      	ldr	r2, [r4, #0]
 8006e12:	6813      	ldr	r3, [r2, #0]
 8006e14:	f043 0301 	orr.w	r3, r3, #1
 8006e18:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e1a:	2000      	movs	r0, #0
 8006e1c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006e1e:	2320      	movs	r3, #32
 8006e20:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e24:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e26:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8006e2a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8006e2c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8006e30:	f7fa ffaa 	bl	8001d88 <HAL_I2C_MspInit>
 8006e34:	e7b6      	b.n	8006da4 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006e36:	68a3      	ldr	r3, [r4, #8]
 8006e38:	6822      	ldr	r2, [r4, #0]
 8006e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e3e:	6093      	str	r3, [r2, #8]
 8006e40:	e7ca      	b.n	8006dd8 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e48:	605a      	str	r2, [r3, #4]
 8006e4a:	e7c8      	b.n	8006dde <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8006e4c:	2001      	movs	r0, #1
}
 8006e4e:	4770      	bx	lr

08006e50 <HAL_I2C_EV_IRQHandler>:
{
 8006e50:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006e52:	6803      	ldr	r3, [r0, #0]
 8006e54:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006e56:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8006e58:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006e5a:	b103      	cbz	r3, 8006e5e <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8006e5c:	4798      	blx	r3
}
 8006e5e:	bd08      	pop	{r3, pc}

08006e60 <HAL_I2C_SlaveTxCpltCallback>:
}
 8006e60:	4770      	bx	lr

08006e62 <HAL_I2C_SlaveRxCpltCallback>:
}
 8006e62:	4770      	bx	lr

08006e64 <I2C_ITSlaveSeqCplt>:
{
 8006e64:	b510      	push	{r4, lr}
 8006e66:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006e68:	6803      	ldr	r3, [r0, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006e72:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8006e76:	d00e      	beq.n	8006e96 <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006e7e:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006e80:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b29      	cmp	r3, #41	; 0x29
 8006e88:	d00d      	beq.n	8006ea6 <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006e8a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b2a      	cmp	r3, #42	; 0x2a
 8006e92:	d018      	beq.n	8006ec6 <I2C_ITSlaveSeqCplt+0x62>
}
 8006e94:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006e96:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8006e9a:	d0f1      	beq.n	8006e80 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	e7ec      	b.n	8006e80 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ea6:	2328      	movs	r3, #40	; 0x28
 8006ea8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006eac:	2321      	movs	r3, #33	; 0x21
 8006eae:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006eb0:	2101      	movs	r1, #1
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	f7ff ff36 	bl	8006d24 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f7ff ffce 	bl	8006e60 <HAL_I2C_SlaveTxCpltCallback>
 8006ec4:	e7e6      	b.n	8006e94 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ec6:	2328      	movs	r3, #40	; 0x28
 8006ec8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ecc:	2322      	movs	r3, #34	; 0x22
 8006ece:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006ed0:	2102      	movs	r1, #2
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f7ff ff26 	bl	8006d24 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006ed8:	2300      	movs	r3, #0
 8006eda:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f7ff ffbf 	bl	8006e62 <HAL_I2C_SlaveRxCpltCallback>
}
 8006ee4:	e7d6      	b.n	8006e94 <I2C_ITSlaveSeqCplt+0x30>

08006ee6 <HAL_I2C_AddrCallback>:
}
 8006ee6:	4770      	bx	lr

08006ee8 <I2C_ITAddrCplt>:
{
 8006ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eea:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006eec:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006ef0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006ef4:	2b28      	cmp	r3, #40	; 0x28
 8006ef6:	d006      	beq.n	8006f06 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006ef8:	6803      	ldr	r3, [r0, #0]
 8006efa:	2208      	movs	r2, #8
 8006efc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006efe:	2300      	movs	r3, #0
 8006f00:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8006f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8006f06:	6803      	ldr	r3, [r0, #0]
 8006f08:	699e      	ldr	r6, [r3, #24]
 8006f0a:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006f0e:	699a      	ldr	r2, [r3, #24]
 8006f10:	0c12      	lsrs	r2, r2, #16
 8006f12:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006f16:	689a      	ldr	r2, [r3, #8]
 8006f18:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006f1c:	68df      	ldr	r7, [r3, #12]
 8006f1e:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f22:	68c1      	ldr	r1, [r0, #12]
 8006f24:	2902      	cmp	r1, #2
 8006f26:	d122      	bne.n	8006f6e <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006f28:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8006f2c:	f015 0f06 	tst.w	r5, #6
 8006f30:	d110      	bne.n	8006f54 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8006f32:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006f34:	3101      	adds	r1, #1
 8006f36:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006f38:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006f3a:	2902      	cmp	r1, #2
 8006f3c:	d1e2      	bne.n	8006f04 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 8006f3e:	2100      	movs	r1, #0
 8006f40:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006f42:	2008      	movs	r0, #8
 8006f44:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8006f46:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006f4a:	4631      	mov	r1, r6
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	f7ff ffca 	bl	8006ee6 <HAL_I2C_AddrCallback>
 8006f52:	e7d7      	b.n	8006f04 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006f54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f58:	f7ff fee4 	bl	8006d24 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006f62:	463a      	mov	r2, r7
 8006f64:	4631      	mov	r1, r6
 8006f66:	4620      	mov	r0, r4
 8006f68:	f7ff ffbd 	bl	8006ee6 <HAL_I2C_AddrCallback>
 8006f6c:	e7ca      	b.n	8006f04 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006f6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f72:	f7ff fed7 	bl	8006d24 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006f76:	2300      	movs	r3, #0
 8006f78:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006f7c:	462a      	mov	r2, r5
 8006f7e:	4631      	mov	r1, r6
 8006f80:	4620      	mov	r0, r4
 8006f82:	f7ff ffb0 	bl	8006ee6 <HAL_I2C_AddrCallback>
 8006f86:	e7bd      	b.n	8006f04 <I2C_ITAddrCplt+0x1c>

08006f88 <HAL_I2C_ListenCpltCallback>:
}
 8006f88:	4770      	bx	lr
	...

08006f8c <I2C_ITListenCplt>:
{
 8006f8c:	b510      	push	{r4, lr}
 8006f8e:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f90:	4b17      	ldr	r3, [pc, #92]	; (8006ff0 <I2C_ITListenCplt+0x64>)
 8006f92:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f94:	2300      	movs	r3, #0
 8006f96:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006f98:	2220      	movs	r2, #32
 8006f9a:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f9e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006fa2:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006fa4:	f011 0f04 	tst.w	r1, #4
 8006fa8:	d013      	beq.n	8006fd2 <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006faa:	6803      	ldr	r3, [r0, #0]
 8006fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006fb0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006fb2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006fb8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8006fba:	b153      	cbz	r3, 8006fd2 <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8006fc0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006fca:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006fcc:	f043 0304 	orr.w	r3, r3, #4
 8006fd0:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006fd2:	f248 0103 	movw	r1, #32771	; 0x8003
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f7ff fea4 	bl	8006d24 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fdc:	6823      	ldr	r3, [r4, #0]
 8006fde:	2210      	movs	r2, #16
 8006fe0:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8006fe8:	4620      	mov	r0, r4
 8006fea:	f7ff ffcd 	bl	8006f88 <HAL_I2C_ListenCpltCallback>
}
 8006fee:	bd10      	pop	{r4, pc}
 8006ff0:	ffff0000 	.word	0xffff0000

08006ff4 <HAL_I2C_ErrorCallback>:
}
 8006ff4:	4770      	bx	lr

08006ff6 <HAL_I2C_AbortCpltCallback>:
}
 8006ff6:	4770      	bx	lr

08006ff8 <I2C_TreatErrorCallback>:
{
 8006ff8:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006ffa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b60      	cmp	r3, #96	; 0x60
 8007002:	d006      	beq.n	8007012 <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007004:	2300      	movs	r3, #0
 8007006:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007008:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800700c:	f7ff fff2 	bl	8006ff4 <HAL_I2C_ErrorCallback>
}
 8007010:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8007012:	2320      	movs	r3, #32
 8007014:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007018:	2300      	movs	r3, #0
 800701a:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800701c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8007020:	f7ff ffe9 	bl	8006ff6 <HAL_I2C_AbortCpltCallback>
 8007024:	e7f4      	b.n	8007010 <I2C_TreatErrorCallback+0x18>
	...

08007028 <I2C_ITError>:
{
 8007028:	b510      	push	{r4, lr}
 800702a:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800702c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007030:	2000      	movs	r0, #0
 8007032:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007036:	4a3b      	ldr	r2, [pc, #236]	; (8007124 <I2C_ITError+0xfc>)
 8007038:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800703a:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800703c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800703e:	430a      	orrs	r2, r1
 8007040:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007042:	3b28      	subs	r3, #40	; 0x28
 8007044:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007046:	2b02      	cmp	r3, #2
 8007048:	d819      	bhi.n	800707e <I2C_ITError+0x56>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800704a:	2103      	movs	r1, #3
 800704c:	4620      	mov	r0, r4
 800704e:	f7ff fe69 	bl	8006d24 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007052:	2328      	movs	r3, #40	; 0x28
 8007054:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007058:	4b33      	ldr	r3, [pc, #204]	; (8007128 <I2C_ITError+0x100>)
 800705a:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 800705c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800705e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007060:	b11a      	cbz	r2, 800706a <I2C_ITError+0x42>
 8007062:	2b11      	cmp	r3, #17
 8007064:	d01b      	beq.n	800709e <I2C_ITError+0x76>
 8007066:	2b21      	cmp	r3, #33	; 0x21
 8007068:	d019      	beq.n	800709e <I2C_ITError+0x76>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800706a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800706c:	b11a      	cbz	r2, 8007076 <I2C_ITError+0x4e>
 800706e:	2b12      	cmp	r3, #18
 8007070:	d036      	beq.n	80070e0 <I2C_ITError+0xb8>
 8007072:	2b22      	cmp	r3, #34	; 0x22
 8007074:	d034      	beq.n	80070e0 <I2C_ITError+0xb8>
    I2C_TreatErrorCallback(hi2c);
 8007076:	4620      	mov	r0, r4
 8007078:	f7ff ffbe 	bl	8006ff8 <I2C_TreatErrorCallback>
}
 800707c:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800707e:	f248 0103 	movw	r1, #32771	; 0x8003
 8007082:	4620      	mov	r0, r4
 8007084:	f7ff fe4e 	bl	8006d24 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007088:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b60      	cmp	r3, #96	; 0x60
 8007090:	d002      	beq.n	8007098 <I2C_ITError+0x70>
      hi2c->State         = HAL_I2C_STATE_READY;
 8007092:	2320      	movs	r3, #32
 8007094:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8007098:	2300      	movs	r3, #0
 800709a:	6363      	str	r3, [r4, #52]	; 0x34
 800709c:	e7de      	b.n	800705c <I2C_ITError+0x34>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800709e:	6823      	ldr	r3, [r4, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80070a6:	d003      	beq.n	80070b0 <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80070ae:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070b0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80070b2:	f7ff fc04 	bl	80068be <HAL_DMA_GetState>
 80070b6:	2801      	cmp	r0, #1
 80070b8:	d00e      	beq.n	80070d8 <I2C_ITError+0xb0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80070ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80070bc:	4a1b      	ldr	r2, [pc, #108]	; (800712c <I2C_ITError+0x104>)
 80070be:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80070c0:	2300      	movs	r3, #0
 80070c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80070c6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80070c8:	f7ff fb58 	bl	800677c <HAL_DMA_Abort_IT>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d0d5      	beq.n	800707c <I2C_ITError+0x54>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80070d0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80070d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80070d4:	4798      	blx	r3
 80070d6:	e7d1      	b.n	800707c <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 80070d8:	4620      	mov	r0, r4
 80070da:	f7ff ff8d 	bl	8006ff8 <I2C_TreatErrorCallback>
 80070de:	e7cd      	b.n	800707c <I2C_ITError+0x54>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80070e8:	d003      	beq.n	80070f2 <I2C_ITError+0xca>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070f0:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80070f2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80070f4:	f7ff fbe3 	bl	80068be <HAL_DMA_GetState>
 80070f8:	2801      	cmp	r0, #1
 80070fa:	d00e      	beq.n	800711a <I2C_ITError+0xf2>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80070fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80070fe:	4a0b      	ldr	r2, [pc, #44]	; (800712c <I2C_ITError+0x104>)
 8007100:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8007102:	2300      	movs	r3, #0
 8007104:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007108:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800710a:	f7ff fb37 	bl	800677c <HAL_DMA_Abort_IT>
 800710e:	2800      	cmp	r0, #0
 8007110:	d0b4      	beq.n	800707c <I2C_ITError+0x54>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007112:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007114:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007116:	4798      	blx	r3
 8007118:	e7b0      	b.n	800707c <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 800711a:	4620      	mov	r0, r4
 800711c:	f7ff ff6c 	bl	8006ff8 <I2C_TreatErrorCallback>
 8007120:	e7ac      	b.n	800707c <I2C_ITError+0x54>
 8007122:	bf00      	nop
 8007124:	ffff0000 	.word	0xffff0000
 8007128:	08007299 	.word	0x08007299
 800712c:	08007451 	.word	0x08007451

08007130 <I2C_ITSlaveCplt>:
{
 8007130:	b570      	push	{r4, r5, r6, lr}
 8007132:	4604      	mov	r4, r0
 8007134:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007136:	6802      	ldr	r2, [r0, #0]
 8007138:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800713a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800713e:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007140:	2120      	movs	r1, #32
 8007142:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007144:	2b21      	cmp	r3, #33	; 0x21
 8007146:	d00d      	beq.n	8007164 <I2C_ITSlaveCplt+0x34>
 8007148:	2b29      	cmp	r3, #41	; 0x29
 800714a:	d00b      	beq.n	8007164 <I2C_ITSlaveCplt+0x34>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800714c:	2b22      	cmp	r3, #34	; 0x22
 800714e:	d001      	beq.n	8007154 <I2C_ITSlaveCplt+0x24>
 8007150:	2b2a      	cmp	r3, #42	; 0x2a
 8007152:	d10e      	bne.n	8007172 <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007154:	f248 0102 	movw	r1, #32770	; 0x8002
 8007158:	4620      	mov	r0, r4
 800715a:	f7ff fde3 	bl	8006d24 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800715e:	2322      	movs	r3, #34	; 0x22
 8007160:	6323      	str	r3, [r4, #48]	; 0x30
 8007162:	e006      	b.n	8007172 <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007164:	f248 0101 	movw	r1, #32769	; 0x8001
 8007168:	4620      	mov	r0, r4
 800716a:	f7ff fddb 	bl	8006d24 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800716e:	2321      	movs	r3, #33	; 0x21
 8007170:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007172:	6822      	ldr	r2, [r4, #0]
 8007174:	6853      	ldr	r3, [r2, #4]
 8007176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800717a:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 800717c:	6822      	ldr	r2, [r4, #0]
 800717e:	6853      	ldr	r3, [r2, #4]
 8007180:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8007184:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8007188:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800718c:	f023 0301 	bic.w	r3, r3, #1
 8007190:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8007192:	4620      	mov	r0, r4
 8007194:	f7ff fdb5 	bl	8006d02 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007198:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800719c:	d040      	beq.n	8007220 <I2C_ITSlaveCplt+0xf0>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800719e:	6822      	ldr	r2, [r4, #0]
 80071a0:	6813      	ldr	r3, [r2, #0]
 80071a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071a6:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 80071a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80071aa:	b11b      	cbz	r3, 80071b4 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80071b4:	f015 0f04 	tst.w	r5, #4
 80071b8:	d011      	beq.n	80071de <I2C_ITSlaveCplt+0xae>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80071ba:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80071c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071c8:	3301      	adds	r3, #1
 80071ca:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80071cc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80071ce:	b133      	cbz	r3, 80071de <I2C_ITSlaveCplt+0xae>
      hi2c->XferSize--;
 80071d0:	3b01      	subs	r3, #1
 80071d2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80071d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	3b01      	subs	r3, #1
 80071da:	b29b      	uxth	r3, r3
 80071dc:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 80071de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	b11b      	cbz	r3, 80071ec <I2C_ITSlaveCplt+0xbc>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80071e6:	f043 0304 	orr.w	r3, r3, #4
 80071ea:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ec:	2300      	movs	r3, #0
 80071ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 80071f2:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80071f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80071f6:	bb1b      	cbnz	r3, 8007240 <I2C_ITSlaveCplt+0x110>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80071f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80071fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80071fe:	d12d      	bne.n	800725c <I2C_ITSlaveCplt+0x12c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007200:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b22      	cmp	r3, #34	; 0x22
 8007208:	d038      	beq.n	800727c <I2C_ITSlaveCplt+0x14c>
    hi2c->State = HAL_I2C_STATE_READY;
 800720a:	2320      	movs	r3, #32
 800720c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007210:	2300      	movs	r3, #0
 8007212:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007214:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007218:	4620      	mov	r0, r4
 800721a:	f7ff fe21 	bl	8006e60 <HAL_I2C_SlaveTxCpltCallback>
}
 800721e:	e02c      	b.n	800727a <I2C_ITSlaveCplt+0x14a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007220:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8007224:	d0c6      	beq.n	80071b4 <I2C_ITSlaveCplt+0x84>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007226:	6822      	ldr	r2, [r4, #0]
 8007228:	6813      	ldr	r3, [r2, #0]
 800722a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800722e:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8007230:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007232:	2b00      	cmp	r3, #0
 8007234:	d0be      	beq.n	80071b4 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	b29b      	uxth	r3, r3
 800723c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800723e:	e7b9      	b.n	80071b4 <I2C_ITSlaveCplt+0x84>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007240:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007242:	4620      	mov	r0, r4
 8007244:	f7ff fef0 	bl	8007028 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007248:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b28      	cmp	r3, #40	; 0x28
 8007250:	d113      	bne.n	800727a <I2C_ITSlaveCplt+0x14a>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007252:	4629      	mov	r1, r5
 8007254:	4620      	mov	r0, r4
 8007256:	f7ff fe99 	bl	8006f8c <I2C_ITListenCplt>
 800725a:	e00e      	b.n	800727a <I2C_ITSlaveCplt+0x14a>
    I2C_ITSlaveSeqCplt(hi2c);
 800725c:	4620      	mov	r0, r4
 800725e:	f7ff fe01 	bl	8006e64 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007262:	4b0c      	ldr	r3, [pc, #48]	; (8007294 <I2C_ITSlaveCplt+0x164>)
 8007264:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007266:	2320      	movs	r3, #32
 8007268:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800726c:	2300      	movs	r3, #0
 800726e:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007270:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007274:	4620      	mov	r0, r4
 8007276:	f7ff fe87 	bl	8006f88 <HAL_I2C_ListenCpltCallback>
}
 800727a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800727c:	2320      	movs	r3, #32
 800727e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007282:	2300      	movs	r3, #0
 8007284:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007286:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800728a:	4620      	mov	r0, r4
 800728c:	f7ff fde9 	bl	8006e62 <HAL_I2C_SlaveRxCpltCallback>
 8007290:	e7f3      	b.n	800727a <I2C_ITSlaveCplt+0x14a>
 8007292:	bf00      	nop
 8007294:	ffff0000 	.word	0xffff0000

08007298 <I2C_Slave_ISR_IT>:
{
 8007298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 800729a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 800729c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	f000 809e 	beq.w	80073e2 <I2C_Slave_ISR_IT+0x14a>
 80072a6:	4604      	mov	r4, r0
 80072a8:	460d      	mov	r5, r1
 80072aa:	4616      	mov	r6, r2
 80072ac:	2301      	movs	r3, #1
 80072ae:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80072b2:	f011 0f20 	tst.w	r1, #32
 80072b6:	d002      	beq.n	80072be <I2C_Slave_ISR_IT+0x26>
 80072b8:	f012 0f20 	tst.w	r2, #32
 80072bc:	d119      	bne.n	80072f2 <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80072be:	f015 0f10 	tst.w	r5, #16
 80072c2:	d03e      	beq.n	8007342 <I2C_Slave_ISR_IT+0xaa>
 80072c4:	f016 0f10 	tst.w	r6, #16
 80072c8:	d03b      	beq.n	8007342 <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 80072ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	bb43      	cbnz	r3, 8007322 <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80072d0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b28      	cmp	r3, #40	; 0x28
 80072d8:	d00e      	beq.n	80072f8 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80072da:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b29      	cmp	r3, #41	; 0x29
 80072e2:	d011      	beq.n	8007308 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072e4:	6823      	ldr	r3, [r4, #0]
 80072e6:	2210      	movs	r2, #16
 80072e8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80072ea:	2000      	movs	r0, #0
 80072ec:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80072f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80072f2:	f7ff ff1d 	bl	8007130 <I2C_ITSlaveCplt>
 80072f6:	e7e2      	b.n	80072be <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80072f8:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 80072fc:	d1ed      	bne.n	80072da <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80072fe:	4629      	mov	r1, r5
 8007300:	4620      	mov	r0, r4
 8007302:	f7ff fe43 	bl	8006f8c <I2C_ITListenCplt>
 8007306:	e7f0      	b.n	80072ea <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007308:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 800730c:	d0ea      	beq.n	80072e4 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800730e:	6823      	ldr	r3, [r4, #0]
 8007310:	2210      	movs	r2, #16
 8007312:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8007314:	4620      	mov	r0, r4
 8007316:	f7ff fcf4 	bl	8006d02 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 800731a:	4620      	mov	r0, r4
 800731c:	f7ff fda2 	bl	8006e64 <I2C_ITSlaveSeqCplt>
 8007320:	e7e3      	b.n	80072ea <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007322:	6823      	ldr	r3, [r4, #0]
 8007324:	2210      	movs	r2, #16
 8007326:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007328:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800732a:	f043 0304 	orr.w	r3, r3, #4
 800732e:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007330:	b117      	cbz	r7, 8007338 <I2C_Slave_ISR_IT+0xa0>
 8007332:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8007336:	d1d8      	bne.n	80072ea <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007338:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800733a:	4620      	mov	r0, r4
 800733c:	f7ff fe74 	bl	8007028 <I2C_ITError>
 8007340:	e7d3      	b.n	80072ea <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007342:	f015 0f04 	tst.w	r5, #4
 8007346:	d01f      	beq.n	8007388 <I2C_Slave_ISR_IT+0xf0>
 8007348:	f016 0f04 	tst.w	r6, #4
 800734c:	d01c      	beq.n	8007388 <I2C_Slave_ISR_IT+0xf0>
    if (hi2c->XferCount > 0U)
 800734e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007350:	b29b      	uxth	r3, r3
 8007352:	b173      	cbz	r3, 8007372 <I2C_Slave_ISR_IT+0xda>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007354:	6823      	ldr	r3, [r4, #0]
 8007356:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007358:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800735a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800735c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800735e:	3301      	adds	r3, #1
 8007360:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8007362:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007364:	3b01      	subs	r3, #1
 8007366:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007368:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800736a:	b29b      	uxth	r3, r3
 800736c:	3b01      	subs	r3, #1
 800736e:	b29b      	uxth	r3, r3
 8007370:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8007372:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007374:	b29b      	uxth	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1b7      	bne.n	80072ea <I2C_Slave_ISR_IT+0x52>
 800737a:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 800737e:	d0b4      	beq.n	80072ea <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 8007380:	4620      	mov	r0, r4
 8007382:	f7ff fd6f 	bl	8006e64 <I2C_ITSlaveSeqCplt>
 8007386:	e7b0      	b.n	80072ea <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007388:	f015 0f08 	tst.w	r5, #8
 800738c:	d002      	beq.n	8007394 <I2C_Slave_ISR_IT+0xfc>
 800738e:	f016 0f08 	tst.w	r6, #8
 8007392:	d118      	bne.n	80073c6 <I2C_Slave_ISR_IT+0x12e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007394:	f015 0f02 	tst.w	r5, #2
 8007398:	d0a7      	beq.n	80072ea <I2C_Slave_ISR_IT+0x52>
 800739a:	f016 0f02 	tst.w	r6, #2
 800739e:	d0a4      	beq.n	80072ea <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 80073a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	b1a3      	cbz	r3, 80073d0 <I2C_Slave_ISR_IT+0x138>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80073a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80073a8:	6823      	ldr	r3, [r4, #0]
 80073aa:	7812      	ldrb	r2, [r2, #0]
 80073ac:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80073ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073b0:	3301      	adds	r3, #1
 80073b2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80073b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	3b01      	subs	r3, #1
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80073be:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80073c0:	3b01      	subs	r3, #1
 80073c2:	8523      	strh	r3, [r4, #40]	; 0x28
 80073c4:	e791      	b.n	80072ea <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80073c6:	4629      	mov	r1, r5
 80073c8:	4620      	mov	r0, r4
 80073ca:	f7ff fd8d 	bl	8006ee8 <I2C_ITAddrCplt>
 80073ce:	e78c      	b.n	80072ea <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80073d0:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 80073d4:	d001      	beq.n	80073da <I2C_Slave_ISR_IT+0x142>
 80073d6:	2f00      	cmp	r7, #0
 80073d8:	d187      	bne.n	80072ea <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 80073da:	4620      	mov	r0, r4
 80073dc:	f7ff fd42 	bl	8006e64 <I2C_ITSlaveSeqCplt>
 80073e0:	e783      	b.n	80072ea <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 80073e2:	2002      	movs	r0, #2
 80073e4:	e784      	b.n	80072f0 <I2C_Slave_ISR_IT+0x58>

080073e6 <HAL_I2C_ER_IRQHandler>:
{
 80073e6:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80073e8:	6802      	ldr	r2, [r0, #0]
 80073ea:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80073ec:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80073ee:	f413 7f80 	tst.w	r3, #256	; 0x100
 80073f2:	d009      	beq.n	8007408 <HAL_I2C_ER_IRQHandler+0x22>
 80073f4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80073f8:	d006      	beq.n	8007408 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80073fa:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80073fc:	f044 0401 	orr.w	r4, r4, #1
 8007400:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007402:	f44f 7480 	mov.w	r4, #256	; 0x100
 8007406:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007408:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800740c:	d00a      	beq.n	8007424 <HAL_I2C_ER_IRQHandler+0x3e>
 800740e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007412:	d007      	beq.n	8007424 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007414:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007416:	f042 0208 	orr.w	r2, r2, #8
 800741a:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800741c:	6802      	ldr	r2, [r0, #0]
 800741e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007422:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007424:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007428:	d00a      	beq.n	8007440 <HAL_I2C_ER_IRQHandler+0x5a>
 800742a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800742e:	d007      	beq.n	8007440 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007430:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007432:	f043 0302 	orr.w	r3, r3, #2
 8007436:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007438:	6803      	ldr	r3, [r0, #0]
 800743a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800743e:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8007440:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007442:	f011 0f0b 	tst.w	r1, #11
 8007446:	d100      	bne.n	800744a <HAL_I2C_ER_IRQHandler+0x64>
}
 8007448:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 800744a:	f7ff fded 	bl	8007028 <I2C_ITError>
}
 800744e:	e7fb      	b.n	8007448 <HAL_I2C_ER_IRQHandler+0x62>

08007450 <I2C_DMAAbort>:
{
 8007450:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007452:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->hdmatx != NULL)
 8007454:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007456:	b10b      	cbz	r3, 800745c <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007458:	2200      	movs	r2, #0
 800745a:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 800745c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800745e:	b10b      	cbz	r3, 8007464 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007460:	2200      	movs	r2, #0
 8007462:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 8007464:	f7ff fdc8 	bl	8006ff8 <I2C_TreatErrorCallback>
}
 8007468:	bd08      	pop	{r3, pc}

0800746a <HAL_I2CEx_ConfigAnalogFilter>:
>>>>>>> render
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 8007592:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b20      	cmp	r3, #32
 800759a:	d124      	bne.n	80075e6 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800759c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d022      	beq.n	80075ea <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80075a4:	2301      	movs	r3, #1
 80075a6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075aa:	2324      	movs	r3, #36	; 0x24
 80075ac:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075b0:	6802      	ldr	r2, [r0, #0]
 80075b2:	6813      	ldr	r3, [r2, #0]
 80075b4:	f023 0301 	bic.w	r3, r3, #1
 80075b8:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80075ba:	6802      	ldr	r2, [r0, #0]
 80075bc:	6813      	ldr	r3, [r2, #0]
 80075be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075c2:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80075c4:	6802      	ldr	r2, [r0, #0]
 80075c6:	6813      	ldr	r3, [r2, #0]
 80075c8:	4319      	orrs	r1, r3
 80075ca:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80075cc:	6802      	ldr	r2, [r0, #0]
 80075ce:	6813      	ldr	r3, [r2, #0]
 80075d0:	f043 0301 	orr.w	r3, r3, #1
 80075d4:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075d6:	2320      	movs	r3, #32
 80075d8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075dc:	2300      	movs	r3, #0
 80075de:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80075e2:	4618      	mov	r0, r3
 80075e4:	4770      	bx	lr
=======
 800746a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b20      	cmp	r3, #32
 8007472:	d124      	bne.n	80074be <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007474:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007478:	2b01      	cmp	r3, #1
 800747a:	d022      	beq.n	80074c2 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800747c:	2301      	movs	r3, #1
 800747e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007482:	2324      	movs	r3, #36	; 0x24
 8007484:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007488:	6802      	ldr	r2, [r0, #0]
 800748a:	6813      	ldr	r3, [r2, #0]
 800748c:	f023 0301 	bic.w	r3, r3, #1
 8007490:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007492:	6802      	ldr	r2, [r0, #0]
 8007494:	6813      	ldr	r3, [r2, #0]
 8007496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800749a:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800749c:	6802      	ldr	r2, [r0, #0]
 800749e:	6813      	ldr	r3, [r2, #0]
 80074a0:	4319      	orrs	r1, r3
 80074a2:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80074a4:	6802      	ldr	r2, [r0, #0]
 80074a6:	6813      	ldr	r3, [r2, #0]
 80074a8:	f043 0301 	orr.w	r3, r3, #1
 80074ac:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80074ae:	2320      	movs	r3, #32
 80074b0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074b4:	2300      	movs	r3, #0
 80074b6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80074ba:	4618      	mov	r0, r3
 80074bc:	4770      	bx	lr
>>>>>>> render
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80075e6:	2002      	movs	r0, #2
 80075e8:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80075ea:	2002      	movs	r0, #2
  }
}
 80075ec:	4770      	bx	lr

080075ee <HAL_I2CEx_ConfigDigitalFilter>:
=======
 80074be:	2002      	movs	r0, #2
 80074c0:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80074c2:	2002      	movs	r0, #2
  }
}
 80074c4:	4770      	bx	lr

080074c6 <HAL_I2CEx_ConfigDigitalFilter>:
>>>>>>> render

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 80075ee:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b20      	cmp	r3, #32
 80075f6:	d122      	bne.n	800763e <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075f8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d020      	beq.n	8007642 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8007600:	2301      	movs	r3, #1
 8007602:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007606:	2324      	movs	r3, #36	; 0x24
 8007608:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800760c:	6802      	ldr	r2, [r0, #0]
 800760e:	6813      	ldr	r3, [r2, #0]
 8007610:	f023 0301 	bic.w	r3, r3, #1
 8007614:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007616:	6802      	ldr	r2, [r0, #0]
 8007618:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800761a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800761e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007622:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007624:	6802      	ldr	r2, [r0, #0]
 8007626:	6813      	ldr	r3, [r2, #0]
 8007628:	f043 0301 	orr.w	r3, r3, #1
 800762c:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800762e:	2320      	movs	r3, #32
 8007630:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007634:	2300      	movs	r3, #0
 8007636:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800763a:	4618      	mov	r0, r3
 800763c:	4770      	bx	lr
=======
 80074c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	2b20      	cmp	r3, #32
 80074ce:	d122      	bne.n	8007516 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074d0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d020      	beq.n	800751a <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80074d8:	2301      	movs	r3, #1
 80074da:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80074de:	2324      	movs	r3, #36	; 0x24
 80074e0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80074e4:	6802      	ldr	r2, [r0, #0]
 80074e6:	6813      	ldr	r3, [r2, #0]
 80074e8:	f023 0301 	bic.w	r3, r3, #1
 80074ec:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80074ee:	6802      	ldr	r2, [r0, #0]
 80074f0:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80074f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80074f6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80074fa:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80074fc:	6802      	ldr	r2, [r0, #0]
 80074fe:	6813      	ldr	r3, [r2, #0]
 8007500:	f043 0301 	orr.w	r3, r3, #1
 8007504:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007506:	2320      	movs	r3, #32
 8007508:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800750c:	2300      	movs	r3, #0
 800750e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8007512:	4618      	mov	r0, r3
 8007514:	4770      	bx	lr
>>>>>>> render
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 800763e:	2002      	movs	r0, #2
 8007640:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8007642:	2002      	movs	r0, #2
  }
}
 8007644:	4770      	bx	lr

08007646 <HAL_PCD_EP_DB_Receive>:
=======
 8007516:	2002      	movs	r0, #2
 8007518:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800751a:	2002      	movs	r0, #2
  }
}
 800751c:	4770      	bx	lr

0800751e <HAL_PCD_EP_DB_Receive>:
>>>>>>> render
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
<<<<<<< HEAD
 8007646:	b538      	push	{r3, r4, r5, lr}
=======
 800751e:	b538      	push	{r3, r4, r5, lr}
>>>>>>> render
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
<<<<<<< HEAD
 8007648:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800764c:	d043      	beq.n	80076d6 <HAL_PCD_EP_DB_Receive+0x90>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800764e:	6804      	ldr	r4, [r0, #0]
 8007650:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8007654:	f891 c000 	ldrb.w	ip, [r1]
 8007658:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 800765c:	fa1e f383 	uxtah	r3, lr, r3
 8007660:	4423      	add	r3, r4
 8007662:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 8007666:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 800766a:	698b      	ldr	r3, [r1, #24]
 800766c:	42a3      	cmp	r3, r4
 800766e:	d328      	bcc.n	80076c2 <HAL_PCD_EP_DB_Receive+0x7c>
    {
      ep->xfer_len -= count;
 8007670:	1b1b      	subs	r3, r3, r4
 8007672:	618b      	str	r3, [r1, #24]
=======
 8007520:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8007524:	d043      	beq.n	80075ae <HAL_PCD_EP_DB_Receive+0x90>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007526:	6804      	ldr	r4, [r0, #0]
 8007528:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800752c:	f891 c000 	ldrb.w	ip, [r1]
 8007530:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 8007534:	fa1e f383 	uxtah	r3, lr, r3
 8007538:	4423      	add	r3, r4
 800753a:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 800753e:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 8007542:	698b      	ldr	r3, [r1, #24]
 8007544:	42a3      	cmp	r3, r4
 8007546:	d328      	bcc.n	800759a <HAL_PCD_EP_DB_Receive+0x7c>
    {
      ep->xfer_len -= count;
 8007548:	1b1b      	subs	r3, r3, r4
 800754a:	618b      	str	r3, [r1, #24]
>>>>>>> render
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
<<<<<<< HEAD
 8007674:	698b      	ldr	r3, [r1, #24]
 8007676:	b97b      	cbnz	r3, 8007698 <HAL_PCD_EP_DB_Receive+0x52>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007678:	6805      	ldr	r5, [r0, #0]
 800767a:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 800767e:	b29b      	uxth	r3, r3
 8007680:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007688:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800768c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007694:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
=======
 800754c:	698b      	ldr	r3, [r1, #24]
 800754e:	b97b      	cbnz	r3, 8007570 <HAL_PCD_EP_DB_Receive+0x52>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007550:	6805      	ldr	r5, [r0, #0]
 8007552:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8007556:	b29b      	uxth	r3, r3
 8007558:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800755c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007560:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800756c:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
>>>>>>> render
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
<<<<<<< HEAD
 8007698:	f012 0f40 	tst.w	r2, #64	; 0x40
 800769c:	d00e      	beq.n	80076bc <HAL_PCD_EP_DB_Receive+0x76>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800769e:	6802      	ldr	r2, [r0, #0]
 80076a0:	780d      	ldrb	r5, [r1, #0]
 80076a2:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076b8:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 80076bc:	b924      	cbnz	r4, 80076c8 <HAL_PCD_EP_DB_Receive+0x82>
=======
 8007570:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007574:	d00e      	beq.n	8007594 <HAL_PCD_EP_DB_Receive+0x76>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007576:	6802      	ldr	r2, [r0, #0]
 8007578:	780d      	ldrb	r5, [r1, #0]
 800757a:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 800757e:	b29b      	uxth	r3, r3
 8007580:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800758c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007590:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 8007594:	b924      	cbnz	r4, 80075a0 <HAL_PCD_EP_DB_Receive+0x82>
>>>>>>> render
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
<<<<<<< HEAD
 80076be:	4620      	mov	r0, r4
 80076c0:	bd38      	pop	{r3, r4, r5, pc}
      ep->xfer_len = 0U;
 80076c2:	2300      	movs	r3, #0
 80076c4:	618b      	str	r3, [r1, #24]
 80076c6:	e7d5      	b.n	8007674 <HAL_PCD_EP_DB_Receive+0x2e>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80076c8:	4623      	mov	r3, r4
 80076ca:	890a      	ldrh	r2, [r1, #8]
 80076cc:	6949      	ldr	r1, [r1, #20]
 80076ce:	6800      	ldr	r0, [r0, #0]
 80076d0:	f004 fa1d 	bl	800bb0e <USB_ReadPMA>
 80076d4:	e7f3      	b.n	80076be <HAL_PCD_EP_DB_Receive+0x78>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80076d6:	6804      	ldr	r4, [r0, #0]
 80076d8:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80076dc:	f891 c000 	ldrb.w	ip, [r1]
 80076e0:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 80076e4:	fa1e f383 	uxtah	r3, lr, r3
 80076e8:	4423      	add	r3, r4
 80076ea:	f8b3 4406 	ldrh.w	r4, [r3, #1030]	; 0x406
 80076ee:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 80076f2:	698b      	ldr	r3, [r1, #24]
 80076f4:	42a3      	cmp	r3, r4
 80076f6:	d32f      	bcc.n	8007758 <HAL_PCD_EP_DB_Receive+0x112>
      ep->xfer_len -= count;
 80076f8:	1b1b      	subs	r3, r3, r4
 80076fa:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 80076fc:	698b      	ldr	r3, [r1, #24]
 80076fe:	b97b      	cbnz	r3, 8007720 <HAL_PCD_EP_DB_Receive+0xda>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007700:	6805      	ldr	r5, [r0, #0]
 8007702:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8007706:	b29b      	uxth	r3, r3
 8007708:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800770c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007710:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800771c:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007720:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007724:	d10f      	bne.n	8007746 <HAL_PCD_EP_DB_Receive+0x100>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007726:	6802      	ldr	r2, [r0, #0]
 8007728:	f891 c000 	ldrb.w	ip, [r1]
 800772c:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 8007730:	b29b      	uxth	r3, r3
 8007732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800773a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800773e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007742:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
    if (count != 0U)
 8007746:	2c00      	cmp	r4, #0
 8007748:	d0b9      	beq.n	80076be <HAL_PCD_EP_DB_Receive+0x78>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800774a:	4623      	mov	r3, r4
 800774c:	894a      	ldrh	r2, [r1, #10]
 800774e:	6949      	ldr	r1, [r1, #20]
 8007750:	6800      	ldr	r0, [r0, #0]
 8007752:	f004 f9dc 	bl	800bb0e <USB_ReadPMA>
 8007756:	e7b2      	b.n	80076be <HAL_PCD_EP_DB_Receive+0x78>
      ep->xfer_len = 0U;
 8007758:	2300      	movs	r3, #0
 800775a:	618b      	str	r3, [r1, #24]
 800775c:	e7ce      	b.n	80076fc <HAL_PCD_EP_DB_Receive+0xb6>

0800775e <HAL_PCD_Init>:
  if (hpcd == NULL)
 800775e:	2800      	cmp	r0, #0
 8007760:	d06d      	beq.n	800783e <HAL_PCD_Init+0xe0>
{
 8007762:	b530      	push	{r4, r5, lr}
 8007764:	b087      	sub	sp, #28
 8007766:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007768:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 800776c:	b13b      	cbz	r3, 800777e <HAL_PCD_Init+0x20>
  hpcd->State = HAL_PCD_STATE_BUSY;
 800776e:	2303      	movs	r3, #3
 8007770:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8007774:	6820      	ldr	r0, [r4, #0]
 8007776:	f003 faa8 	bl	800acca <USB_DisableGlobalInt>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800777a:	2300      	movs	r3, #0
 800777c:	e01f      	b.n	80077be <HAL_PCD_Init+0x60>
    hpcd->Lock = HAL_UNLOCKED;
 800777e:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8007782:	f005 fc3d 	bl	800d000 <HAL_PCD_MspInit>
 8007786:	e7f2      	b.n	800776e <HAL_PCD_Init+0x10>
    hpcd->IN_ep[i].is_in = 1U;
 8007788:	1c5a      	adds	r2, r3, #1
 800778a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800778e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8007792:	2001      	movs	r0, #1
 8007794:	7048      	strb	r0, [r1, #1]
    hpcd->IN_ep[i].num = i;
 8007796:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800779a:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800779e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80077a2:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80077a6:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80077a8:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 80077ac:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 80077b0:	2000      	movs	r0, #0
 80077b2:	f88c 0003 	strb.w	r0, [ip, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 80077b6:	6388      	str	r0, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 80077b8:	63c8      	str	r0, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 80077ba:	6408      	str	r0, [r1, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077bc:	b2d3      	uxtb	r3, r2
 80077be:	6860      	ldr	r0, [r4, #4]
 80077c0:	4283      	cmp	r3, r0
 80077c2:	d3e1      	bcc.n	8007788 <HAL_PCD_Init+0x2a>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077c4:	2300      	movs	r3, #0
 80077c6:	e016      	b.n	80077f6 <HAL_PCD_Init+0x98>
    hpcd->OUT_ep[i].is_in = 0U;
 80077c8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80077cc:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80077d0:	2100      	movs	r1, #0
 80077d2:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 80077d6:	f882 3168 	strb.w	r3, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80077da:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 80077de:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80077e2:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80077e6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80077ea:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80077ee:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077f2:	3301      	adds	r3, #1
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	4298      	cmp	r0, r3
 80077f8:	d8e6      	bhi.n	80077c8 <HAL_PCD_Init+0x6a>
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80077fa:	46a4      	mov	ip, r4
 80077fc:	f85c 5b10 	ldr.w	r5, [ip], #16
 8007800:	46ee      	mov	lr, sp
 8007802:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007806:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800780a:	f8dc 3000 	ldr.w	r3, [ip]
 800780e:	f8ce 3000 	str.w	r3, [lr]
 8007812:	1d23      	adds	r3, r4, #4
 8007814:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007816:	4628      	mov	r0, r5
 8007818:	f003 fa61 	bl	800acde <USB_DevInit>
  hpcd->USB_Address = 0U;
 800781c:	2300      	movs	r3, #0
 800781e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8007822:	2301      	movs	r3, #1
 8007824:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  if (hpcd->Init.lpm_enable == 1U)
 8007828:	69e3      	ldr	r3, [r4, #28]
 800782a:	2b01      	cmp	r3, #1
 800782c:	d002      	beq.n	8007834 <HAL_PCD_Init+0xd6>
  return HAL_OK;
 800782e:	2000      	movs	r0, #0
}
 8007830:	b007      	add	sp, #28
 8007832:	bd30      	pop	{r4, r5, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007834:	4620      	mov	r0, r4
 8007836:	f000 fee8 	bl	800860a <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 800783a:	2000      	movs	r0, #0
 800783c:	e7f8      	b.n	8007830 <HAL_PCD_Init+0xd2>
    return HAL_ERROR;
 800783e:	2001      	movs	r0, #1
}
 8007840:	4770      	bx	lr

08007842 <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 8007842:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8007846:	2b01      	cmp	r3, #1
 8007848:	d00e      	beq.n	8007868 <HAL_PCD_Start+0x26>
{
 800784a:	b510      	push	{r4, lr}
 800784c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800784e:	2301      	movs	r3, #1
 8007850:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8007854:	6800      	ldr	r0, [r0, #0]
 8007856:	f003 fa2f 	bl	800acb8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800785a:	6820      	ldr	r0, [r4, #0]
 800785c:	f003 fd84 	bl	800b368 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007860:	2000      	movs	r0, #0
 8007862:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8007866:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8007868:	2002      	movs	r0, #2
}
 800786a:	4770      	bx	lr

0800786c <HAL_PCD_EP_DB_Transmit>:
=======
 8007596:	4620      	mov	r0, r4
 8007598:	bd38      	pop	{r3, r4, r5, pc}
      ep->xfer_len = 0U;
 800759a:	2300      	movs	r3, #0
 800759c:	618b      	str	r3, [r1, #24]
 800759e:	e7d5      	b.n	800754c <HAL_PCD_EP_DB_Receive+0x2e>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80075a0:	4623      	mov	r3, r4
 80075a2:	890a      	ldrh	r2, [r1, #8]
 80075a4:	6949      	ldr	r1, [r1, #20]
 80075a6:	6800      	ldr	r0, [r0, #0]
 80075a8:	f004 fa1d 	bl	800b9e6 <USB_ReadPMA>
 80075ac:	e7f3      	b.n	8007596 <HAL_PCD_EP_DB_Receive+0x78>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80075ae:	6804      	ldr	r4, [r0, #0]
 80075b0:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80075b4:	f891 c000 	ldrb.w	ip, [r1]
 80075b8:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 80075bc:	fa1e f383 	uxtah	r3, lr, r3
 80075c0:	4423      	add	r3, r4
 80075c2:	f8b3 4406 	ldrh.w	r4, [r3, #1030]	; 0x406
 80075c6:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 80075ca:	698b      	ldr	r3, [r1, #24]
 80075cc:	42a3      	cmp	r3, r4
 80075ce:	d32f      	bcc.n	8007630 <HAL_PCD_EP_DB_Receive+0x112>
      ep->xfer_len -= count;
 80075d0:	1b1b      	subs	r3, r3, r4
 80075d2:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 80075d4:	698b      	ldr	r3, [r1, #24]
 80075d6:	b97b      	cbnz	r3, 80075f8 <HAL_PCD_EP_DB_Receive+0xda>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80075d8:	6805      	ldr	r5, [r0, #0]
 80075da:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80075ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f4:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80075f8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80075fc:	d10f      	bne.n	800761e <HAL_PCD_EP_DB_Receive+0x100>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80075fe:	6802      	ldr	r2, [r0, #0]
 8007600:	f891 c000 	ldrb.w	ip, [r1]
 8007604:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 8007608:	b29b      	uxth	r3, r3
 800760a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800760e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007616:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800761a:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
    if (count != 0U)
 800761e:	2c00      	cmp	r4, #0
 8007620:	d0b9      	beq.n	8007596 <HAL_PCD_EP_DB_Receive+0x78>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007622:	4623      	mov	r3, r4
 8007624:	894a      	ldrh	r2, [r1, #10]
 8007626:	6949      	ldr	r1, [r1, #20]
 8007628:	6800      	ldr	r0, [r0, #0]
 800762a:	f004 f9dc 	bl	800b9e6 <USB_ReadPMA>
 800762e:	e7b2      	b.n	8007596 <HAL_PCD_EP_DB_Receive+0x78>
      ep->xfer_len = 0U;
 8007630:	2300      	movs	r3, #0
 8007632:	618b      	str	r3, [r1, #24]
 8007634:	e7ce      	b.n	80075d4 <HAL_PCD_EP_DB_Receive+0xb6>

08007636 <HAL_PCD_Init>:
  if (hpcd == NULL)
 8007636:	2800      	cmp	r0, #0
 8007638:	d06d      	beq.n	8007716 <HAL_PCD_Init+0xe0>
{
 800763a:	b530      	push	{r4, r5, lr}
 800763c:	b087      	sub	sp, #28
 800763e:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007640:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8007644:	b13b      	cbz	r3, 8007656 <HAL_PCD_Init+0x20>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8007646:	2303      	movs	r3, #3
 8007648:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 800764c:	6820      	ldr	r0, [r4, #0]
 800764e:	f003 faa8 	bl	800aba2 <USB_DisableGlobalInt>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007652:	2300      	movs	r3, #0
 8007654:	e01f      	b.n	8007696 <HAL_PCD_Init+0x60>
    hpcd->Lock = HAL_UNLOCKED;
 8007656:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 800765a:	f005 fc05 	bl	800ce68 <HAL_PCD_MspInit>
 800765e:	e7f2      	b.n	8007646 <HAL_PCD_Init+0x10>
    hpcd->IN_ep[i].is_in = 1U;
 8007660:	1c5a      	adds	r2, r3, #1
 8007662:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8007666:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800766a:	2001      	movs	r0, #1
 800766c:	7048      	strb	r0, [r1, #1]
    hpcd->IN_ep[i].num = i;
 800766e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8007672:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007676:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800767a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800767e:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007680:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 8007684:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8007688:	2000      	movs	r0, #0
 800768a:	f88c 0003 	strb.w	r0, [ip, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 800768e:	6388      	str	r0, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007690:	63c8      	str	r0, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8007692:	6408      	str	r0, [r1, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007694:	b2d3      	uxtb	r3, r2
 8007696:	6860      	ldr	r0, [r4, #4]
 8007698:	4283      	cmp	r3, r0
 800769a:	d3e1      	bcc.n	8007660 <HAL_PCD_Init+0x2a>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800769c:	2300      	movs	r3, #0
 800769e:	e016      	b.n	80076ce <HAL_PCD_Init+0x98>
    hpcd->OUT_ep[i].is_in = 0U;
 80076a0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80076a4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80076a8:	2100      	movs	r1, #0
 80076aa:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 80076ae:	f882 3168 	strb.w	r3, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80076b2:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 80076b6:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80076ba:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80076be:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80076c2:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80076c6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076ca:	3301      	adds	r3, #1
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	4298      	cmp	r0, r3
 80076d0:	d8e6      	bhi.n	80076a0 <HAL_PCD_Init+0x6a>
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80076d2:	46a4      	mov	ip, r4
 80076d4:	f85c 5b10 	ldr.w	r5, [ip], #16
 80076d8:	46ee      	mov	lr, sp
 80076da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80076de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80076e2:	f8dc 3000 	ldr.w	r3, [ip]
 80076e6:	f8ce 3000 	str.w	r3, [lr]
 80076ea:	1d23      	adds	r3, r4, #4
 80076ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076ee:	4628      	mov	r0, r5
 80076f0:	f003 fa61 	bl	800abb6 <USB_DevInit>
  hpcd->USB_Address = 0U;
 80076f4:	2300      	movs	r3, #0
 80076f6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80076fa:	2301      	movs	r3, #1
 80076fc:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  if (hpcd->Init.lpm_enable == 1U)
 8007700:	69e3      	ldr	r3, [r4, #28]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d002      	beq.n	800770c <HAL_PCD_Init+0xd6>
  return HAL_OK;
 8007706:	2000      	movs	r0, #0
}
 8007708:	b007      	add	sp, #28
 800770a:	bd30      	pop	{r4, r5, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800770c:	4620      	mov	r0, r4
 800770e:	f000 fee8 	bl	80084e2 <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 8007712:	2000      	movs	r0, #0
 8007714:	e7f8      	b.n	8007708 <HAL_PCD_Init+0xd2>
    return HAL_ERROR;
 8007716:	2001      	movs	r0, #1
}
 8007718:	4770      	bx	lr

0800771a <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 800771a:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 800771e:	2b01      	cmp	r3, #1
 8007720:	d00e      	beq.n	8007740 <HAL_PCD_Start+0x26>
{
 8007722:	b510      	push	{r4, lr}
 8007724:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8007726:	2301      	movs	r3, #1
 8007728:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800772c:	6800      	ldr	r0, [r0, #0]
 800772e:	f003 fa2f 	bl	800ab90 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007732:	6820      	ldr	r0, [r4, #0]
 8007734:	f003 fd84 	bl	800b240 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007738:	2000      	movs	r0, #0
 800773a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800773e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8007740:	2002      	movs	r0, #2
}
 8007742:	4770      	bx	lr

08007744 <HAL_PCD_EP_DB_Transmit>:
>>>>>>> render
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
<<<<<<< HEAD
 800786c:	b570      	push	{r4, r5, r6, lr}
 800786e:	4605      	mov	r5, r0
 8007870:	460c      	mov	r4, r1
 8007872:	4616      	mov	r6, r2
=======
 8007744:	b570      	push	{r4, r5, r6, lr}
 8007746:	4605      	mov	r5, r0
 8007748:	460c      	mov	r4, r1
 800774a:	4616      	mov	r6, r2
>>>>>>> render
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
<<<<<<< HEAD
 8007874:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007878:	f000 8109 	beq.w	8007a8e <HAL_PCD_EP_DB_Transmit+0x222>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800787c:	6802      	ldr	r2, [r0, #0]
 800787e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8007882:	7809      	ldrb	r1, [r1, #0]
 8007884:	00c8      	lsls	r0, r1, #3
 8007886:	fa10 f383 	uxtah	r3, r0, r3
 800788a:	4413      	add	r3, r2
 800788c:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007890:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxPctSize)
 8007894:	69a3      	ldr	r3, [r4, #24]
 8007896:	4293      	cmp	r3, r2
 8007898:	d951      	bls.n	800793e <HAL_PCD_EP_DB_Transmit+0xd2>
    {
      ep->xfer_len -= TxPctSize;
 800789a:	1a9b      	subs	r3, r3, r2
 800789c:	61a3      	str	r3, [r4, #24]
=======
 800774c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007750:	f000 8109 	beq.w	8007966 <HAL_PCD_EP_DB_Transmit+0x222>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007754:	6802      	ldr	r2, [r0, #0]
 8007756:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800775a:	7809      	ldrb	r1, [r1, #0]
 800775c:	00c8      	lsls	r0, r1, #3
 800775e:	fa10 f383 	uxtah	r3, r0, r3
 8007762:	4413      	add	r3, r2
 8007764:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007768:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxPctSize)
 800776c:	69a3      	ldr	r3, [r4, #24]
 800776e:	4293      	cmp	r3, r2
 8007770:	d951      	bls.n	8007816 <HAL_PCD_EP_DB_Transmit+0xd2>
    {
      ep->xfer_len -= TxPctSize;
 8007772:	1a9b      	subs	r3, r3, r2
 8007774:	61a3      	str	r3, [r4, #24]
>>>>>>> render
    {
      ep->xfer_len = 0U;
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
<<<<<<< HEAD
 800789e:	69a3      	ldr	r3, [r4, #24]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d168      	bne.n	8007976 <HAL_PCD_EP_DB_Transmit+0x10a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80078a4:	7863      	ldrb	r3, [r4, #1]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d14c      	bne.n	8007944 <HAL_PCD_EP_DB_Transmit+0xd8>
 80078aa:	682a      	ldr	r2, [r5, #0]
 80078ac:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80078b0:	fa12 f383 	uxtah	r3, r2, r3
 80078b4:	4403      	add	r3, r0
 80078b6:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80078ba:	b292      	uxth	r2, r2
 80078bc:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80078c0:	b292      	uxth	r2, r2
 80078c2:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80078c6:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80078ca:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80078ce:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80078d2:	b292      	uxth	r2, r2
 80078d4:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80078d8:	6829      	ldr	r1, [r5, #0]
 80078da:	7862      	ldrb	r2, [r4, #1]
 80078dc:	2a00      	cmp	r2, #0
 80078de:	d13d      	bne.n	800795c <HAL_PCD_EP_DB_Transmit+0xf0>
 80078e0:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80078e4:	fa11 f383 	uxtah	r3, r1, r3
 80078e8:	7822      	ldrb	r2, [r4, #0]
 80078ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078ee:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80078f2:	b292      	uxth	r2, r2
 80078f4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80078f8:	b292      	uxth	r2, r2
 80078fa:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80078fe:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007902:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007906:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800790a:	b292      	uxth	r2, r2
 800790c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
=======
 8007776:	69a3      	ldr	r3, [r4, #24]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d168      	bne.n	800784e <HAL_PCD_EP_DB_Transmit+0x10a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800777c:	7863      	ldrb	r3, [r4, #1]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d14c      	bne.n	800781c <HAL_PCD_EP_DB_Transmit+0xd8>
 8007782:	682a      	ldr	r2, [r5, #0]
 8007784:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8007788:	fa12 f383 	uxtah	r3, r2, r3
 800778c:	4403      	add	r3, r0
 800778e:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007792:	b292      	uxth	r2, r2
 8007794:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007798:	b292      	uxth	r2, r2
 800779a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800779e:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80077a2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80077a6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80077aa:	b292      	uxth	r2, r2
 80077ac:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80077b0:	6829      	ldr	r1, [r5, #0]
 80077b2:	7862      	ldrb	r2, [r4, #1]
 80077b4:	2a00      	cmp	r2, #0
 80077b6:	d13d      	bne.n	8007834 <HAL_PCD_EP_DB_Transmit+0xf0>
 80077b8:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80077bc:	fa11 f383 	uxtah	r3, r1, r3
 80077c0:	7822      	ldrb	r2, [r4, #0]
 80077c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077c6:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80077ca:	b292      	uxth	r2, r2
 80077cc:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80077d0:	b292      	uxth	r2, r2
 80077d2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80077d6:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80077da:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80077de:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80077e2:	b292      	uxth	r2, r2
 80077e4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
>>>>>>> render

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
<<<<<<< HEAD
 8007910:	7821      	ldrb	r1, [r4, #0]
 8007912:	4628      	mov	r0, r5
 8007914:	f005 fbb8 	bl	800d088 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007918:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800791c:	d040      	beq.n	80079a0 <HAL_PCD_EP_DB_Transmit+0x134>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800791e:	682a      	ldr	r2, [r5, #0]
 8007920:	7821      	ldrb	r1, [r4, #0]
 8007922:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8007926:	b29b      	uxth	r3, r3
 8007928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800792c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007930:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007938:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800793c:	e030      	b.n	80079a0 <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 800793e:	2300      	movs	r3, #0
 8007940:	61a3      	str	r3, [r4, #24]
 8007942:	e7ac      	b.n	800789e <HAL_PCD_EP_DB_Transmit+0x32>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007944:	2b01      	cmp	r3, #1
 8007946:	d1c7      	bne.n	80078d8 <HAL_PCD_EP_DB_Transmit+0x6c>
 8007948:	682a      	ldr	r2, [r5, #0]
 800794a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800794e:	fa12 f383 	uxtah	r3, r2, r3
 8007952:	4403      	add	r3, r0
 8007954:	2200      	movs	r2, #0
 8007956:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800795a:	e7bd      	b.n	80078d8 <HAL_PCD_EP_DB_Transmit+0x6c>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800795c:	2a01      	cmp	r2, #1
 800795e:	d1d7      	bne.n	8007910 <HAL_PCD_EP_DB_Transmit+0xa4>
 8007960:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8007964:	fa11 f383 	uxtah	r3, r1, r3
 8007968:	7821      	ldrb	r1, [r4, #0]
 800796a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800796e:	2200      	movs	r2, #0
 8007970:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007974:	e7cc      	b.n	8007910 <HAL_PCD_EP_DB_Transmit+0xa4>
=======
 80077e8:	7821      	ldrb	r1, [r4, #0]
 80077ea:	4628      	mov	r0, r5
 80077ec:	f005 fb80 	bl	800cef0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80077f0:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80077f4:	d040      	beq.n	8007878 <HAL_PCD_EP_DB_Transmit+0x134>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80077f6:	682a      	ldr	r2, [r5, #0]
 80077f8:	7821      	ldrb	r1, [r4, #0]
 80077fa:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80077fe:	b29b      	uxth	r3, r3
 8007800:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007808:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800780c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007810:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8007814:	e030      	b.n	8007878 <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 8007816:	2300      	movs	r3, #0
 8007818:	61a3      	str	r3, [r4, #24]
 800781a:	e7ac      	b.n	8007776 <HAL_PCD_EP_DB_Transmit+0x32>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800781c:	2b01      	cmp	r3, #1
 800781e:	d1c7      	bne.n	80077b0 <HAL_PCD_EP_DB_Transmit+0x6c>
 8007820:	682a      	ldr	r2, [r5, #0]
 8007822:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8007826:	fa12 f383 	uxtah	r3, r2, r3
 800782a:	4403      	add	r3, r0
 800782c:	2200      	movs	r2, #0
 800782e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007832:	e7bd      	b.n	80077b0 <HAL_PCD_EP_DB_Transmit+0x6c>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007834:	2a01      	cmp	r2, #1
 8007836:	d1d7      	bne.n	80077e8 <HAL_PCD_EP_DB_Transmit+0xa4>
 8007838:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 800783c:	fa11 f383 	uxtah	r3, r1, r3
 8007840:	7821      	ldrb	r1, [r4, #0]
 8007842:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007846:	2200      	movs	r2, #0
 8007848:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800784c:	e7cc      	b.n	80077e8 <HAL_PCD_EP_DB_Transmit+0xa4>
>>>>>>> render
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
<<<<<<< HEAD
 8007976:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800797a:	d00d      	beq.n	8007998 <HAL_PCD_EP_DB_Transmit+0x12c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800797c:	6828      	ldr	r0, [r5, #0]
 800797e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8007982:	b29b      	uxth	r3, r3
 8007984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800798c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007994:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
=======
 800784e:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8007852:	d00d      	beq.n	8007870 <HAL_PCD_EP_DB_Transmit+0x12c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007854:	6828      	ldr	r0, [r5, #0]
 8007856:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800785a:	b29b      	uxth	r3, r3
 800785c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007864:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800786c:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
>>>>>>> render
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
<<<<<<< HEAD
 8007998:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800799c:	2b01      	cmp	r3, #1
 800799e:	d012      	beq.n	80079c6 <HAL_PCD_EP_DB_Transmit+0x15a>
=======
 8007870:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007874:	2b01      	cmp	r3, #1
 8007876:	d012      	beq.n	800789e <HAL_PCD_EP_DB_Transmit+0x15a>
>>>>>>> render
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
<<<<<<< HEAD
 80079a0:	682a      	ldr	r2, [r5, #0]
 80079a2:	7821      	ldrb	r1, [r4, #0]
 80079a4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079b2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80079b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079be:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 80079c2:	2000      	movs	r0, #0
 80079c4:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_buff += TxPctSize;
 80079c6:	6963      	ldr	r3, [r4, #20]
 80079c8:	4413      	add	r3, r2
 80079ca:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 80079cc:	69e3      	ldr	r3, [r4, #28]
 80079ce:	4413      	add	r3, r2
 80079d0:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 80079d2:	6a21      	ldr	r1, [r4, #32]
 80079d4:	6923      	ldr	r3, [r4, #16]
 80079d6:	4299      	cmp	r1, r3
 80079d8:	d31b      	bcc.n	8007a12 <HAL_PCD_EP_DB_Transmit+0x1a6>
          ep->xfer_len_db -= len;
 80079da:	1ac9      	subs	r1, r1, r3
 80079dc:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80079de:	7862      	ldrb	r2, [r4, #1]
 80079e0:	2a00      	cmp	r2, #0
 80079e2:	d13f      	bne.n	8007a64 <HAL_PCD_EP_DB_Transmit+0x1f8>
 80079e4:	6829      	ldr	r1, [r5, #0]
 80079e6:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 80079ea:	fa11 f282 	uxtah	r2, r1, r2
 80079ee:	7821      	ldrb	r1, [r4, #0]
 80079f0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80079f4:	2b3e      	cmp	r3, #62	; 0x3e
 80079f6:	d918      	bls.n	8007a2a <HAL_PCD_EP_DB_Transmit+0x1be>
 80079f8:	0959      	lsrs	r1, r3, #5
 80079fa:	f013 0f1f 	tst.w	r3, #31
 80079fe:	d100      	bne.n	8007a02 <HAL_PCD_EP_DB_Transmit+0x196>
 8007a00:	3901      	subs	r1, #1
 8007a02:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8007a06:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007a0a:	b289      	uxth	r1, r1
 8007a0c:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8007a10:	e02a      	b.n	8007a68 <HAL_PCD_EP_DB_Transmit+0x1fc>
        else if (ep->xfer_len_db == 0U)
 8007a12:	b921      	cbnz	r1, 8007a1e <HAL_PCD_EP_DB_Transmit+0x1b2>
          ep->xfer_fill_db = 0U;
 8007a14:	2300      	movs	r3, #0
 8007a16:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	e7df      	b.n	80079de <HAL_PCD_EP_DB_Transmit+0x172>
          ep->xfer_fill_db = 0U;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 8007a24:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 8007a26:	460b      	mov	r3, r1
 8007a28:	e7d9      	b.n	80079de <HAL_PCD_EP_DB_Transmit+0x172>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007a2a:	b98b      	cbnz	r3, 8007a50 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8007a2c:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8007a30:	b289      	uxth	r1, r1
 8007a32:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8007a36:	b289      	uxth	r1, r1
 8007a38:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8007a3c:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8007a40:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8007a44:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007a48:	b289      	uxth	r1, r1
 8007a4a:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8007a4e:	e00b      	b.n	8007a68 <HAL_PCD_EP_DB_Transmit+0x1fc>
 8007a50:	0859      	lsrs	r1, r3, #1
 8007a52:	f013 0f01 	tst.w	r3, #1
 8007a56:	d000      	beq.n	8007a5a <HAL_PCD_EP_DB_Transmit+0x1ee>
 8007a58:	3101      	adds	r1, #1
 8007a5a:	0289      	lsls	r1, r1, #10
 8007a5c:	b289      	uxth	r1, r1
 8007a5e:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8007a62:	e001      	b.n	8007a68 <HAL_PCD_EP_DB_Transmit+0x1fc>
 8007a64:	2a01      	cmp	r2, #1
 8007a66:	d006      	beq.n	8007a76 <HAL_PCD_EP_DB_Transmit+0x20a>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	8922      	ldrh	r2, [r4, #8]
 8007a6c:	6961      	ldr	r1, [r4, #20]
 8007a6e:	6828      	ldr	r0, [r5, #0]
 8007a70:	f003 fc89 	bl	800b386 <USB_WritePMA>
 8007a74:	e794      	b.n	80079a0 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007a76:	6829      	ldr	r1, [r5, #0]
 8007a78:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8007a7c:	fa11 f282 	uxtah	r2, r1, r2
 8007a80:	7821      	ldrb	r1, [r4, #0]
 8007a82:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007a86:	b299      	uxth	r1, r3
 8007a88:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8007a8c:	e7ec      	b.n	8007a68 <HAL_PCD_EP_DB_Transmit+0x1fc>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007a8e:	6802      	ldr	r2, [r0, #0]
 8007a90:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8007a94:	7809      	ldrb	r1, [r1, #0]
 8007a96:	00c8      	lsls	r0, r1, #3
 8007a98:	fa10 f383 	uxtah	r3, r0, r3
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007aa2:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxPctSize)
 8007aa6:	69a3      	ldr	r3, [r4, #24]
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d352      	bcc.n	8007b52 <HAL_PCD_EP_DB_Transmit+0x2e6>
      ep->xfer_len -= TxPctSize;
 8007aac:	1a9b      	subs	r3, r3, r2
 8007aae:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8007ab0:	69a3      	ldr	r3, [r4, #24]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d169      	bne.n	8007b8a <HAL_PCD_EP_DB_Transmit+0x31e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007ab6:	7863      	ldrb	r3, [r4, #1]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d14d      	bne.n	8007b58 <HAL_PCD_EP_DB_Transmit+0x2ec>
 8007abc:	682a      	ldr	r2, [r5, #0]
 8007abe:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8007ac2:	fa12 f383 	uxtah	r3, r2, r3
 8007ac6:	4418      	add	r0, r3
 8007ac8:	f8b0 3402 	ldrh.w	r3, [r0, #1026]	; 0x402
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
 8007ad8:	f8b0 3402 	ldrh.w	r3, [r0, #1026]	; 0x402
 8007adc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007aea:	6829      	ldr	r1, [r5, #0]
 8007aec:	7862      	ldrb	r2, [r4, #1]
 8007aee:	2a00      	cmp	r2, #0
 8007af0:	d13e      	bne.n	8007b70 <HAL_PCD_EP_DB_Transmit+0x304>
 8007af2:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8007af6:	fa11 f383 	uxtah	r3, r1, r3
 8007afa:	7822      	ldrb	r2, [r4, #0]
 8007afc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b00:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007b04:	b292      	uxth	r2, r2
 8007b06:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007b0a:	b292      	uxth	r2, r2
 8007b0c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007b10:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007b14:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007b18:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007b1c:	b292      	uxth	r2, r2
 8007b1e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007b22:	7821      	ldrb	r1, [r4, #0]
 8007b24:	4628      	mov	r0, r5
 8007b26:	f005 faaf 	bl	800d088 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007b2a:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8007b2e:	f47f af37 	bne.w	80079a0 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007b32:	682a      	ldr	r2, [r5, #0]
 8007b34:	7821      	ldrb	r1, [r4, #0]
 8007b36:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b4c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8007b50:	e726      	b.n	80079a0 <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	61a3      	str	r3, [r4, #24]
 8007b56:	e7ab      	b.n	8007ab0 <HAL_PCD_EP_DB_Transmit+0x244>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d1c6      	bne.n	8007aea <HAL_PCD_EP_DB_Transmit+0x27e>
 8007b5c:	682a      	ldr	r2, [r5, #0]
 8007b5e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8007b62:	fa12 f383 	uxtah	r3, r2, r3
 8007b66:	4418      	add	r0, r3
 8007b68:	2300      	movs	r3, #0
 8007b6a:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
 8007b6e:	e7bc      	b.n	8007aea <HAL_PCD_EP_DB_Transmit+0x27e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007b70:	2a01      	cmp	r2, #1
 8007b72:	d1d6      	bne.n	8007b22 <HAL_PCD_EP_DB_Transmit+0x2b6>
 8007b74:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8007b78:	fa11 f383 	uxtah	r3, r1, r3
 8007b7c:	7821      	ldrb	r1, [r4, #0]
 8007b7e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007b82:	2200      	movs	r2, #0
 8007b84:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007b88:	e7cb      	b.n	8007b22 <HAL_PCD_EP_DB_Transmit+0x2b6>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007b8a:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8007b8e:	d10d      	bne.n	8007bac <HAL_PCD_EP_DB_Transmit+0x340>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007b90:	6828      	ldr	r0, [r5, #0]
 8007b92:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba8:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8007bac:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	f47f aef5 	bne.w	80079a0 <HAL_PCD_EP_DB_Transmit+0x134>
        ep->xfer_buff += TxPctSize;
 8007bb6:	6963      	ldr	r3, [r4, #20]
 8007bb8:	4413      	add	r3, r2
 8007bba:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8007bbc:	69e3      	ldr	r3, [r4, #28]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8007bc2:	6a21      	ldr	r1, [r4, #32]
 8007bc4:	6923      	ldr	r3, [r4, #16]
 8007bc6:	4299      	cmp	r1, r3
 8007bc8:	d31b      	bcc.n	8007c02 <HAL_PCD_EP_DB_Transmit+0x396>
          ep->xfer_len_db -= len;
 8007bca:	1ac9      	subs	r1, r1, r3
 8007bcc:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007bce:	6829      	ldr	r1, [r5, #0]
 8007bd0:	7862      	ldrb	r2, [r4, #1]
 8007bd2:	2a00      	cmp	r2, #0
 8007bd4:	d13e      	bne.n	8007c54 <HAL_PCD_EP_DB_Transmit+0x3e8>
 8007bd6:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8007bda:	fa11 f282 	uxtah	r2, r1, r2
 8007bde:	7821      	ldrb	r1, [r4, #0]
 8007be0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007be4:	2b3e      	cmp	r3, #62	; 0x3e
 8007be6:	d918      	bls.n	8007c1a <HAL_PCD_EP_DB_Transmit+0x3ae>
 8007be8:	0959      	lsrs	r1, r3, #5
 8007bea:	f013 0f1f 	tst.w	r3, #31
 8007bee:	d100      	bne.n	8007bf2 <HAL_PCD_EP_DB_Transmit+0x386>
 8007bf0:	3901      	subs	r1, #1
 8007bf2:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8007bf6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007bfa:	b289      	uxth	r1, r1
 8007bfc:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8007c00:	e02a      	b.n	8007c58 <HAL_PCD_EP_DB_Transmit+0x3ec>
        else if (ep->xfer_len_db == 0U)
 8007c02:	b921      	cbnz	r1, 8007c0e <HAL_PCD_EP_DB_Transmit+0x3a2>
          ep->xfer_fill_db = 0U;
 8007c04:	2300      	movs	r3, #0
 8007c06:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	e7df      	b.n	8007bce <HAL_PCD_EP_DB_Transmit+0x362>
          ep->xfer_len_db = 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 8007c12:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 8007c16:	460b      	mov	r3, r1
 8007c18:	e7d9      	b.n	8007bce <HAL_PCD_EP_DB_Transmit+0x362>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007c1a:	b98b      	cbnz	r3, 8007c40 <HAL_PCD_EP_DB_Transmit+0x3d4>
 8007c1c:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8007c20:	b289      	uxth	r1, r1
 8007c22:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8007c26:	b289      	uxth	r1, r1
 8007c28:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8007c2c:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8007c30:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8007c34:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007c38:	b289      	uxth	r1, r1
 8007c3a:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8007c3e:	e00b      	b.n	8007c58 <HAL_PCD_EP_DB_Transmit+0x3ec>
 8007c40:	0859      	lsrs	r1, r3, #1
 8007c42:	f013 0f01 	tst.w	r3, #1
 8007c46:	d000      	beq.n	8007c4a <HAL_PCD_EP_DB_Transmit+0x3de>
 8007c48:	3101      	adds	r1, #1
 8007c4a:	0289      	lsls	r1, r1, #10
 8007c4c:	b289      	uxth	r1, r1
 8007c4e:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8007c52:	e001      	b.n	8007c58 <HAL_PCD_EP_DB_Transmit+0x3ec>
 8007c54:	2a01      	cmp	r2, #1
 8007c56:	d006      	beq.n	8007c66 <HAL_PCD_EP_DB_Transmit+0x3fa>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	8962      	ldrh	r2, [r4, #10]
 8007c5c:	6961      	ldr	r1, [r4, #20]
 8007c5e:	6828      	ldr	r0, [r5, #0]
 8007c60:	f003 fb91 	bl	800b386 <USB_WritePMA>
 8007c64:	e69c      	b.n	80079a0 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007c66:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8007c6a:	fa11 f282 	uxtah	r2, r1, r2
 8007c6e:	7821      	ldrb	r1, [r4, #0]
 8007c70:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007c74:	b299      	uxth	r1, r3
 8007c76:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8007c7a:	e7ed      	b.n	8007c58 <HAL_PCD_EP_DB_Transmit+0x3ec>

08007c7c <PCD_EP_ISR_Handler>:
{
 8007c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c80:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007c82:	e0ca      	b.n	8007e1a <PCD_EP_ISR_Handler+0x19e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007c84:	8803      	ldrh	r3, [r0, #0]
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007c9c:	6829      	ldr	r1, [r5, #0]
 8007c9e:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8007ca2:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8007ca6:	00d2      	lsls	r2, r2, #3
 8007ca8:	fa12 f383 	uxtah	r3, r2, r3
 8007cac:	440b      	add	r3, r1
 8007cae:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8007cb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cb6:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8007cb8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8007cba:	4413      	add	r3, r2
 8007cbc:	63eb      	str	r3, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	f005 f9e1 	bl	800d088 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007cc6:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f000 80a5 	beq.w	8007e1a <PCD_EP_ISR_Handler+0x19e>
 8007cd0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	f040 80a1 	bne.w	8007e1a <PCD_EP_ISR_Handler+0x19e>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007cd8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8007cdc:	682a      	ldr	r2, [r5, #0]
 8007cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ce2:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8007cec:	e095      	b.n	8007e1a <PCD_EP_ISR_Handler+0x19e>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007cee:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8007cf2:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8007cf6:	00d2      	lsls	r2, r2, #3
 8007cf8:	fa12 f383 	uxtah	r3, r2, r3
 8007cfc:	4403      	add	r3, r0
 8007cfe:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8007d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d06:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007d0a:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8007d0e:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 8007d12:	f003 fefc 	bl	800bb0e <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007d16:	682a      	ldr	r2, [r5, #0]
 8007d18:	8813      	ldrh	r3, [r2, #0]
 8007d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d1e:	051b      	lsls	r3, r3, #20
 8007d20:	0d1b      	lsrs	r3, r3, #20
 8007d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d26:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8007d28:	4628      	mov	r0, r5
 8007d2a:	f005 f999 	bl	800d060 <HAL_PCD_SetupStageCallback>
 8007d2e:	e074      	b.n	8007e1a <PCD_EP_ISR_Handler+0x19e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007d30:	b989      	cbnz	r1, 8007d56 <PCD_EP_ISR_Handler+0xda>
 8007d32:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007d36:	b292      	uxth	r2, r2
 8007d38:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007d3c:	b292      	uxth	r2, r2
 8007d3e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007d42:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007d46:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007d4a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007d4e:	b292      	uxth	r2, r2
 8007d50:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007d54:	e0bf      	b.n	8007ed6 <PCD_EP_ISR_Handler+0x25a>
 8007d56:	084a      	lsrs	r2, r1, #1
 8007d58:	f011 0f01 	tst.w	r1, #1
 8007d5c:	d000      	beq.n	8007d60 <PCD_EP_ISR_Handler+0xe4>
 8007d5e:	3201      	adds	r2, #1
 8007d60:	0292      	lsls	r2, r2, #10
 8007d62:	b292      	uxth	r2, r2
 8007d64:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007d68:	e0b5      	b.n	8007ed6 <PCD_EP_ISR_Handler+0x25a>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007d6a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8007d6e:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007d70:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8007d74:	f040 80be 	bne.w	8007ef4 <PCD_EP_ISR_Handler+0x278>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007d78:	f016 0f80 	tst.w	r6, #128	; 0x80
 8007d7c:	d04d      	beq.n	8007e1a <PCD_EP_ISR_Handler+0x19e>
        ep = &hpcd->IN_ep[epindex];
 8007d7e:	1c62      	adds	r2, r4, #1
 8007d80:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8007d84:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007d88:	6828      	ldr	r0, [r5, #0]
 8007d8a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->type != EP_TYPE_BULK)
 8007da6:	78cb      	ldrb	r3, [r1, #3]
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	f000 81a7 	beq.w	80080fc <PCD_EP_ISR_Handler+0x480>
          ep->xfer_len = 0U;
 8007dae:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8007db2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8007db6:	2200      	movs	r2, #0
 8007db8:	641a      	str	r2, [r3, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8007dba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007dbe:	b323      	cbz	r3, 8007e0a <PCD_EP_ISR_Handler+0x18e>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007dc0:	f016 0f40 	tst.w	r6, #64	; 0x40
 8007dc4:	f000 8163 	beq.w	800808e <PCD_EP_ISR_Handler+0x412>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007dc8:	784b      	ldrb	r3, [r1, #1]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f040 814c 	bne.w	8008068 <PCD_EP_ISR_Handler+0x3ec>
 8007dd0:	682a      	ldr	r2, [r5, #0]
 8007dd2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8007dd6:	fa12 f383 	uxtah	r3, r2, r3
 8007dda:	1c62      	adds	r2, r4, #1
 8007ddc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007de0:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8007de4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007de8:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007dec:	b292      	uxth	r2, r2
 8007dee:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007df2:	b292      	uxth	r2, r2
 8007df4:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007df8:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007dfc:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007e00:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007e04:	b292      	uxth	r2, r2
 8007e06:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007e0a:	3401      	adds	r4, #1
 8007e0c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8007e10:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 8007e14:	4628      	mov	r0, r5
 8007e16:	f005 f937 	bl	800d088 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007e1a:	6828      	ldr	r0, [r5, #0]
 8007e1c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8007e20:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8007e24:	f000 81ae 	beq.w	8008184 <PCD_EP_ISR_Handler+0x508>
    wIstr = hpcd->Instance->ISTR;
 8007e28:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 8007e2c:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 8007e2e:	f014 040f 	ands.w	r4, r4, #15
 8007e32:	d19a      	bne.n	8007d6a <PCD_EP_ISR_Handler+0xee>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007e34:	f013 0f10 	tst.w	r3, #16
 8007e38:	f43f af24 	beq.w	8007c84 <PCD_EP_ISR_Handler+0x8>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007e3c:	8803      	ldrh	r3, [r0, #0]
 8007e3e:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007e40:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8007e44:	f47f af53 	bne.w	8007cee <PCD_EP_ISR_Handler+0x72>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007e48:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8007e4c:	d0e5      	beq.n	8007e1a <PCD_EP_ISR_Handler+0x19e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007e4e:	8803      	ldrh	r3, [r0, #0]
 8007e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e54:	051b      	lsls	r3, r3, #20
 8007e56:	0d1b      	lsrs	r3, r3, #20
 8007e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e5c:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007e5e:	6828      	ldr	r0, [r5, #0]
 8007e60:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8007e64:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8007e68:	00d2      	lsls	r2, r2, #3
 8007e6a:	fa12 f383 	uxtah	r3, r2, r3
 8007e6e:	4403      	add	r3, r0
 8007e70:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8007e74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e78:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007e7c:	b18b      	cbz	r3, 8007ea2 <PCD_EP_ISR_Handler+0x226>
 8007e7e:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 8007e82:	b171      	cbz	r1, 8007ea2 <PCD_EP_ISR_Handler+0x226>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007e84:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8007e88:	f003 fe41 	bl	800bb0e <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8007e8c:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
 8007e90:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 8007e94:	4413      	add	r3, r2
 8007e96:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	f005 f8e7 	bl	800d070 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8007ea2:	682b      	ldr	r3, [r5, #0]
 8007ea4:	881a      	ldrh	r2, [r3, #0]
 8007ea6:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007eaa:	d1b6      	bne.n	8007e1a <PCD_EP_ISR_Handler+0x19e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007eac:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007eb0:	fa13 f382 	uxtah	r3, r3, r2
 8007eb4:	f8d5 1178 	ldr.w	r1, [r5, #376]	; 0x178
 8007eb8:	293e      	cmp	r1, #62	; 0x3e
 8007eba:	f67f af39 	bls.w	8007d30 <PCD_EP_ISR_Handler+0xb4>
 8007ebe:	094a      	lsrs	r2, r1, #5
 8007ec0:	f011 0f1f 	tst.w	r1, #31
 8007ec4:	d100      	bne.n	8007ec8 <PCD_EP_ISR_Handler+0x24c>
 8007ec6:	3a01      	subs	r2, #1
 8007ec8:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8007ecc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007ed0:	b292      	uxth	r2, r2
 8007ed2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007ed6:	682a      	ldr	r2, [r5, #0]
 8007ed8:	8813      	ldrh	r3, [r2, #0]
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ee4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8007ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ef0:	8013      	strh	r3, [r2, #0]
 8007ef2:	e792      	b.n	8007e1a <PCD_EP_ISR_Handler+0x19e>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007ef4:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8007ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007efc:	051b      	lsls	r3, r3, #20
 8007efe:	0d1b      	lsrs	r3, r3, #20
 8007f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f04:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 8007f08:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8007f0c:	00c9      	lsls	r1, r1, #3
 8007f0e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8007f12:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 8007f16:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8007f1a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8007f1e:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d140      	bne.n	8007fa8 <PCD_EP_ISR_Handler+0x32c>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007f26:	6828      	ldr	r0, [r5, #0]
 8007f28:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8007f2c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8007f30:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8007f34:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8007f38:	00d2      	lsls	r2, r2, #3
 8007f3a:	fa12 f383 	uxtah	r3, r2, r3
 8007f3e:	4403      	add	r3, r0
 8007f40:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8007f44:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 8007f48:	bb17      	cbnz	r7, 8007f90 <PCD_EP_ISR_Handler+0x314>
        ep->xfer_count += count;
 8007f4a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8007f4e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8007f52:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8007f56:	443a      	add	r2, r7
 8007f58:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8007f5c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8007f60:	443a      	add	r2, r7
 8007f62:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007f66:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8007f6a:	b13b      	cbz	r3, 8007f7c <PCD_EP_ISR_Handler+0x300>
 8007f6c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8007f70:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8007f74:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8007f78:	429f      	cmp	r7, r3
 8007f7a:	d270      	bcs.n	800805e <PCD_EP_ISR_Handler+0x3e2>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007f7c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8007f80:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8007f84:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8007f88:	4628      	mov	r0, r5
 8007f8a:	f005 f871 	bl	800d070 <HAL_PCD_DataOutStageCallback>
 8007f8e:	e6f3      	b.n	8007d78 <PCD_EP_ISR_Handler+0xfc>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007f90:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8007f94:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8007f98:	463b      	mov	r3, r7
 8007f9a:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8007f9e:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8007fa2:	f003 fdb4 	bl	800bb0e <USB_ReadPMA>
 8007fa6:	e7d0      	b.n	8007f4a <PCD_EP_ISR_Handler+0x2ce>
          if (ep->type == EP_TYPE_BULK)
 8007fa8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8007fac:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8007fb0:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d033      	beq.n	8008020 <PCD_EP_ISR_Handler+0x3a4>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007fb8:	6829      	ldr	r1, [r5, #0]
 8007fba:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8007fbe:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8007fc2:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8007fc6:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007fdc:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007fe0:	6828      	ldr	r0, [r5, #0]
 8007fe2:	f892 3168 	ldrb.w	r3, [r2, #360]	; 0x168
 8007fe6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007fea:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8007fee:	d01e      	beq.n	800802e <PCD_EP_ISR_Handler+0x3b2>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007ff0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8007ff4:	00db      	lsls	r3, r3, #3
 8007ff6:	fa13 f382 	uxtah	r3, r3, r2
 8007ffa:	4403      	add	r3, r0
 8007ffc:	f8b3 7402 	ldrh.w	r7, [r3, #1026]	; 0x402
 8008000:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8008004:	2f00      	cmp	r7, #0
 8008006:	d0a0      	beq.n	8007f4a <PCD_EP_ISR_Handler+0x2ce>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008008:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800800c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8008010:	463b      	mov	r3, r7
 8008012:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8008016:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800801a:	f003 fd78 	bl	800bb0e <USB_ReadPMA>
 800801e:	e794      	b.n	8007f4a <PCD_EP_ISR_Handler+0x2ce>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8008020:	4632      	mov	r2, r6
 8008022:	4641      	mov	r1, r8
 8008024:	4628      	mov	r0, r5
 8008026:	f7ff fb0e 	bl	8007646 <HAL_PCD_EP_DB_Receive>
 800802a:	4607      	mov	r7, r0
 800802c:	e78d      	b.n	8007f4a <PCD_EP_ISR_Handler+0x2ce>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800802e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8008032:	00db      	lsls	r3, r3, #3
 8008034:	fa13 f382 	uxtah	r3, r3, r2
 8008038:	4403      	add	r3, r0
 800803a:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 800803e:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8008042:	2f00      	cmp	r7, #0
 8008044:	d081      	beq.n	8007f4a <PCD_EP_ISR_Handler+0x2ce>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008046:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800804a:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800804e:	463b      	mov	r3, r7
 8008050:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8008054:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8008058:	f003 fd59 	bl	800bb0e <USB_ReadPMA>
 800805c:	e775      	b.n	8007f4a <PCD_EP_ISR_Handler+0x2ce>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800805e:	4641      	mov	r1, r8
 8008060:	6828      	ldr	r0, [r5, #0]
 8008062:	f003 f9a4 	bl	800b3ae <USB_EPStartXfer>
 8008066:	e687      	b.n	8007d78 <PCD_EP_ISR_Handler+0xfc>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008068:	2b01      	cmp	r3, #1
 800806a:	f47f aece 	bne.w	8007e0a <PCD_EP_ISR_Handler+0x18e>
 800806e:	682a      	ldr	r2, [r5, #0]
 8008070:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8008074:	fa12 f383 	uxtah	r3, r2, r3
 8008078:	1c62      	adds	r2, r4, #1
 800807a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800807e:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8008082:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008086:	2200      	movs	r2, #0
 8008088:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800808c:	e6bd      	b.n	8007e0a <PCD_EP_ISR_Handler+0x18e>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800808e:	6829      	ldr	r1, [r5, #0]
 8008090:	1c63      	adds	r3, r4, #1
 8008092:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008096:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800809a:	785a      	ldrb	r2, [r3, #1]
 800809c:	b9e2      	cbnz	r2, 80080d8 <PCD_EP_ISR_Handler+0x45c>
 800809e:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80080a2:	fa11 f383 	uxtah	r3, r1, r3
 80080a6:	1c62      	adds	r2, r4, #1
 80080a8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80080ac:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 80080b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080b4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80080b8:	b292      	uxth	r2, r2
 80080ba:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80080be:	b292      	uxth	r2, r2
 80080c0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80080c4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80080c8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80080cc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80080d0:	b292      	uxth	r2, r2
 80080d2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80080d6:	e698      	b.n	8007e0a <PCD_EP_ISR_Handler+0x18e>
 80080d8:	2a01      	cmp	r2, #1
 80080da:	f47f ae96 	bne.w	8007e0a <PCD_EP_ISR_Handler+0x18e>
 80080de:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80080e2:	fa11 f383 	uxtah	r3, r1, r3
 80080e6:	1c62      	adds	r2, r4, #1
 80080e8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80080ec:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 80080f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080f4:	2200      	movs	r2, #0
 80080f6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80080fa:	e686      	b.n	8007e0a <PCD_EP_ISR_Handler+0x18e>
          if ((wEPVal & USB_EP_KIND) == 0U)
 80080fc:	f416 7f80 	tst.w	r6, #256	; 0x100
 8008100:	d13b      	bne.n	800817a <PCD_EP_ISR_Handler+0x4fe>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008102:	6828      	ldr	r0, [r5, #0]
 8008104:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008108:	1c62      	adds	r2, r4, #1
 800810a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800810e:	f815 6032 	ldrb.w	r6, [r5, r2, lsl #3]
 8008112:	00f2      	lsls	r2, r6, #3
 8008114:	fa12 f383 	uxtah	r3, r2, r3
 8008118:	4403      	add	r3, r0
 800811a:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800811e:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (ep->xfer_len > TxPctSize)
 8008122:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8008126:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800812a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800812c:	429a      	cmp	r2, r3
 800812e:	d910      	bls.n	8008152 <PCD_EP_ISR_Handler+0x4d6>
              ep->xfer_len -= TxPctSize;
 8008130:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 8008134:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 8008138:	1ad2      	subs	r2, r2, r3
 800813a:	643a      	str	r2, [r7, #64]	; 0x40
            if (ep->xfer_len == 0U)
 800813c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8008140:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8008144:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008146:	b95a      	cbnz	r2, 8008160 <PCD_EP_ISR_Handler+0x4e4>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008148:	4631      	mov	r1, r6
 800814a:	4628      	mov	r0, r5
 800814c:	f004 ff9c 	bl	800d088 <HAL_PCD_DataInStageCallback>
 8008150:	e663      	b.n	8007e1a <PCD_EP_ISR_Handler+0x19e>
              ep->xfer_len = 0U;
 8008152:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8008156:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800815a:	2700      	movs	r7, #0
 800815c:	6417      	str	r7, [r2, #64]	; 0x40
 800815e:	e7ed      	b.n	800813c <PCD_EP_ISR_Handler+0x4c0>
              ep->xfer_buff += TxPctSize;
 8008160:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8008164:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8008168:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 800816a:	441e      	add	r6, r3
 800816c:	63d6      	str	r6, [r2, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 800816e:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8008170:	4423      	add	r3, r4
 8008172:	6453      	str	r3, [r2, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008174:	f003 f91b 	bl	800b3ae <USB_EPStartXfer>
 8008178:	e64f      	b.n	8007e1a <PCD_EP_ISR_Handler+0x19e>
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800817a:	4632      	mov	r2, r6
 800817c:	4628      	mov	r0, r5
 800817e:	f7ff fb75 	bl	800786c <HAL_PCD_EP_DB_Transmit>
 8008182:	e64a      	b.n	8007e1a <PCD_EP_ISR_Handler+0x19e>
}
 8008184:	2000      	movs	r0, #0
 8008186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800818a <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800818a:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 800818e:	2b01      	cmp	r3, #1
 8008190:	d00d      	beq.n	80081ae <HAL_PCD_SetAddress+0x24>
{
 8008192:	b510      	push	{r4, lr}
 8008194:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8008196:	2301      	movs	r3, #1
 8008198:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800819c:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80081a0:	6800      	ldr	r0, [r0, #0]
 80081a2:	f003 f8db 	bl	800b35c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80081a6:	2000      	movs	r0, #0
 80081a8:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80081ac:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80081ae:	2002      	movs	r0, #2
}
 80081b0:	4770      	bx	lr

080081b2 <HAL_PCD_IRQHandler>:
{
 80081b2:	b510      	push	{r4, lr}
 80081b4:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80081b6:	6800      	ldr	r0, [r0, #0]
 80081b8:	f003 f8e1 	bl	800b37e <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80081bc:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80081c0:	d123      	bne.n	800820a <HAL_PCD_IRQHandler+0x58>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80081c2:	f410 6f80 	tst.w	r0, #1024	; 0x400
 80081c6:	d124      	bne.n	8008212 <HAL_PCD_IRQHandler+0x60>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80081c8:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80081cc:	d132      	bne.n	8008234 <HAL_PCD_IRQHandler+0x82>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80081ce:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80081d2:	d139      	bne.n	8008248 <HAL_PCD_IRQHandler+0x96>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80081d4:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80081d8:	d140      	bne.n	800825c <HAL_PCD_IRQHandler+0xaa>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80081da:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80081de:	d167      	bne.n	80082b0 <HAL_PCD_IRQHandler+0xfe>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80081e0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80081e4:	f040 8081 	bne.w	80082ea <HAL_PCD_IRQHandler+0x138>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80081e8:	f410 7f00 	tst.w	r0, #512	; 0x200
 80081ec:	f040 80ad 	bne.w	800834a <HAL_PCD_IRQHandler+0x198>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80081f0:	f410 7f80 	tst.w	r0, #256	; 0x100
 80081f4:	d027      	beq.n	8008246 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80081f6:	6822      	ldr	r2, [r4, #0]
 80081f8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008202:	b29b      	uxth	r3, r3
 8008204:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8008208:	e01d      	b.n	8008246 <HAL_PCD_IRQHandler+0x94>
    (void)PCD_EP_ISR_Handler(hpcd);
 800820a:	4620      	mov	r0, r4
 800820c:	f7ff fd36 	bl	8007c7c <PCD_EP_ISR_Handler>
    return;
 8008210:	e019      	b.n	8008246 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008212:	6822      	ldr	r2, [r4, #0]
 8008214:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8008218:	b29b      	uxth	r3, r3
 800821a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800821e:	b29b      	uxth	r3, r3
 8008220:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8008224:	4620      	mov	r0, r4
 8008226:	f004 ff40 	bl	800d0aa <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800822a:	2100      	movs	r1, #0
 800822c:	4620      	mov	r0, r4
 800822e:	f7ff ffac 	bl	800818a <HAL_PCD_SetAddress>
    return;
 8008232:	e008      	b.n	8008246 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8008234:	6822      	ldr	r2, [r4, #0]
 8008236:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800823a:	b29b      	uxth	r3, r3
 800823c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008240:	b29b      	uxth	r3, r3
 8008242:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8008246:	bd10      	pop	{r4, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8008248:	6822      	ldr	r2, [r4, #0]
 800824a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800824e:	b29b      	uxth	r3, r3
 8008250:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008254:	b29b      	uxth	r3, r3
 8008256:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 800825a:	e7f4      	b.n	8008246 <HAL_PCD_IRQHandler+0x94>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800825c:	6822      	ldr	r2, [r4, #0]
 800825e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8008262:	b29b      	uxth	r3, r3
 8008264:	f023 0304 	bic.w	r3, r3, #4
 8008268:	b29b      	uxth	r3, r3
 800826a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800826e:	6822      	ldr	r2, [r4, #0]
 8008270:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8008274:	b29b      	uxth	r3, r3
 8008276:	f023 0308 	bic.w	r3, r3, #8
 800827a:	b29b      	uxth	r3, r3
 800827c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8008280:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8008284:	2b01      	cmp	r3, #1
 8008286:	d00c      	beq.n	80082a2 <HAL_PCD_IRQHandler+0xf0>
    HAL_PCD_ResumeCallback(hpcd);
 8008288:	4620      	mov	r0, r4
 800828a:	f004 ff31 	bl	800d0f0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800828e:	6822      	ldr	r2, [r4, #0]
 8008290:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8008294:	b29b      	uxth	r3, r3
 8008296:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800829a:	b29b      	uxth	r3, r3
 800829c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 80082a0:	e7d1      	b.n	8008246 <HAL_PCD_IRQHandler+0x94>
      hpcd->LPM_State = LPM_L0;
 80082a2:	2100      	movs	r1, #0
 80082a4:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80082a8:	4620      	mov	r0, r4
 80082aa:	f004 ffd9 	bl	800d260 <HAL_PCDEx_LPM_Callback>
 80082ae:	e7eb      	b.n	8008288 <HAL_PCD_IRQHandler+0xd6>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80082b0:	6822      	ldr	r2, [r4, #0]
 80082b2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	f043 0308 	orr.w	r3, r3, #8
 80082bc:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80082c0:	6822      	ldr	r2, [r4, #0]
 80082c2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80082d2:	6822      	ldr	r2, [r4, #0]
 80082d4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80082d8:	b29b      	uxth	r3, r3
 80082da:	f043 0304 	orr.w	r3, r3, #4
 80082de:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80082e2:	4620      	mov	r0, r4
 80082e4:	f004 fef4 	bl	800d0d0 <HAL_PCD_SuspendCallback>
    return;
 80082e8:	e7ad      	b.n	8008246 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80082ea:	6822      	ldr	r2, [r4, #0]
 80082ec:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80082fc:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8008300:	b9fb      	cbnz	r3, 8008342 <HAL_PCD_IRQHandler+0x190>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008302:	6822      	ldr	r2, [r4, #0]
 8008304:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8008308:	b29b      	uxth	r3, r3
 800830a:	f043 0304 	orr.w	r3, r3, #4
 800830e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008312:	6822      	ldr	r2, [r4, #0]
 8008314:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8008318:	b29b      	uxth	r3, r3
 800831a:	f043 0308 	orr.w	r3, r3, #8
 800831e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 8008322:	2101      	movs	r1, #1
 8008324:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8008328:	6823      	ldr	r3, [r4, #0]
 800832a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800832e:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8008332:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8008336:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800833a:	4620      	mov	r0, r4
 800833c:	f004 ff90 	bl	800d260 <HAL_PCDEx_LPM_Callback>
 8008340:	e781      	b.n	8008246 <HAL_PCD_IRQHandler+0x94>
      HAL_PCD_SuspendCallback(hpcd);
 8008342:	4620      	mov	r0, r4
 8008344:	f004 fec4 	bl	800d0d0 <HAL_PCD_SuspendCallback>
    return;
 8008348:	e77d      	b.n	8008246 <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800834a:	6822      	ldr	r2, [r4, #0]
 800834c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8008350:	b29b      	uxth	r3, r3
 8008352:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008356:	b29b      	uxth	r3, r3
 8008358:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800835c:	4620      	mov	r0, r4
 800835e:	f004 fe9e 	bl	800d09e <HAL_PCD_SOFCallback>
    return;
 8008362:	e770      	b.n	8008246 <HAL_PCD_IRQHandler+0x94>

08008364 <HAL_PCD_EP_Open>:
{
 8008364:	b510      	push	{r4, lr}
 8008366:	4604      	mov	r4, r0
 8008368:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800836a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800836e:	d12a      	bne.n	80083c6 <HAL_PCD_EP_Open+0x62>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008370:	f001 0007 	and.w	r0, r1, #7
 8008374:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8008378:	00c9      	lsls	r1, r1, #3
 800837a:	f501 7eb4 	add.w	lr, r1, #360	; 0x168
 800837e:	eb04 010e 	add.w	r1, r4, lr
    ep->is_in = 0U;
 8008382:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008386:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800838a:	f04f 0e00 	mov.w	lr, #0
 800838e:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8008392:	f00c 0c07 	and.w	ip, ip, #7
 8008396:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 800839a:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 800839c:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800839e:	784a      	ldrb	r2, [r1, #1]
 80083a0:	b10a      	cbz	r2, 80083a6 <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 80083a2:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d019      	beq.n	80083de <HAL_PCD_EP_Open+0x7a>
  __HAL_LOCK(hpcd);
 80083aa:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d018      	beq.n	80083e4 <HAL_PCD_EP_Open+0x80>
 80083b2:	2301      	movs	r3, #1
 80083b4:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80083b8:	6820      	ldr	r0, [r4, #0]
 80083ba:	f002 fca1 	bl	800ad00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80083be:	2000      	movs	r0, #0
 80083c0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80083c4:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083c6:	f001 0007 	and.w	r0, r1, #7
 80083ca:	3001      	adds	r0, #1
 80083cc:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 80083d0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 80083d4:	f04f 0e01 	mov.w	lr, #1
 80083d8:	f881 e001 	strb.w	lr, [r1, #1]
 80083dc:	e7d9      	b.n	8008392 <HAL_PCD_EP_Open+0x2e>
    ep->data_pid_start = 0U;
 80083de:	2300      	movs	r3, #0
 80083e0:	710b      	strb	r3, [r1, #4]
 80083e2:	e7e2      	b.n	80083aa <HAL_PCD_EP_Open+0x46>
  __HAL_LOCK(hpcd);
 80083e4:	2002      	movs	r0, #2
 80083e6:	e7ed      	b.n	80083c4 <HAL_PCD_EP_Open+0x60>

080083e8 <HAL_PCD_EP_Close>:
{
 80083e8:	b510      	push	{r4, lr}
 80083ea:	4604      	mov	r4, r0
 80083ec:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80083ee:	f011 0f80 	tst.w	r1, #128	; 0x80
 80083f2:	d11f      	bne.n	8008434 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80083f4:	f001 0207 	and.w	r2, r1, #7
 80083f8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80083fc:	00c9      	lsls	r1, r1, #3
 80083fe:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8008402:	4401      	add	r1, r0
    ep->is_in = 0U;
 8008404:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008408:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800840c:	2000      	movs	r0, #0
 800840e:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008412:	f003 0307 	and.w	r3, r3, #7
 8008416:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8008418:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800841c:	2b01      	cmp	r3, #1
 800841e:	d013      	beq.n	8008448 <HAL_PCD_EP_Close+0x60>
 8008420:	2301      	movs	r3, #1
 8008422:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008426:	6820      	ldr	r0, [r4, #0]
 8008428:	f002 fe37 	bl	800b09a <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800842c:	2000      	movs	r0, #0
 800842e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8008432:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008434:	f001 0207 	and.w	r2, r1, #7
 8008438:	3201      	adds	r2, #1
 800843a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800843e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8008442:	2001      	movs	r0, #1
 8008444:	7048      	strb	r0, [r1, #1]
 8008446:	e7e4      	b.n	8008412 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8008448:	2002      	movs	r0, #2
 800844a:	e7f2      	b.n	8008432 <HAL_PCD_EP_Close+0x4a>

0800844c <HAL_PCD_EP_Receive>:
{
 800844c:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800844e:	f001 0407 	and.w	r4, r1, #7
 8008452:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8008456:	00c9      	lsls	r1, r1, #3
 8008458:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800845c:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 800845e:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8008462:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8008466:	f8cc 217c 	str.w	r2, [ip, #380]	; 0x17c
  ep->xfer_len = len;
 800846a:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
  ep->xfer_count = 0U;
 800846e:	2300      	movs	r3, #0
 8008470:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
  ep->is_in = 0U;
 8008474:	f88c 3169 	strb.w	r3, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8008478:	f88c 4168 	strb.w	r4, [ip, #360]	; 0x168
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800847c:	b924      	cbnz	r4, 8008488 <HAL_PCD_EP_Receive+0x3c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800847e:	6800      	ldr	r0, [r0, #0]
 8008480:	f002 ff95 	bl	800b3ae <USB_EPStartXfer>
}
 8008484:	2000      	movs	r0, #0
 8008486:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008488:	6800      	ldr	r0, [r0, #0]
 800848a:	f002 ff90 	bl	800b3ae <USB_EPStartXfer>
 800848e:	e7f9      	b.n	8008484 <HAL_PCD_EP_Receive+0x38>

08008490 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008490:	f001 0107 	and.w	r1, r1, #7
 8008494:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008498:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 800849c:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 80084a0:	4770      	bx	lr

080084a2 <HAL_PCD_EP_Transmit>:
{
 80084a2:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084a4:	f001 0407 	and.w	r4, r1, #7
 80084a8:	f104 0c01 	add.w	ip, r4, #1
 80084ac:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 80084b0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 80084b4:	eb04 0e84 	add.w	lr, r4, r4, lsl #2
 80084b8:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 80084bc:	f8ce 203c 	str.w	r2, [lr, #60]	; 0x3c
  ep->xfer_len = len;
 80084c0:	f8ce 3040 	str.w	r3, [lr, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 80084c4:	2201      	movs	r2, #1
 80084c6:	f88e 204c 	strb.w	r2, [lr, #76]	; 0x4c
  ep->xfer_len_db = len;
 80084ca:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
  ep->xfer_count = 0U;
 80084ce:	2300      	movs	r3, #0
 80084d0:	f8ce 3044 	str.w	r3, [lr, #68]	; 0x44
  ep->is_in = 1U;
 80084d4:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80084d6:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80084da:	f800 403c 	strb.w	r4, [r0, ip, lsl #3]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80084de:	b924      	cbnz	r4, 80084ea <HAL_PCD_EP_Transmit+0x48>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80084e0:	6800      	ldr	r0, [r0, #0]
 80084e2:	f002 ff64 	bl	800b3ae <USB_EPStartXfer>
}
 80084e6:	2000      	movs	r0, #0
 80084e8:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80084ea:	6800      	ldr	r0, [r0, #0]
 80084ec:	f002 ff5f 	bl	800b3ae <USB_EPStartXfer>
 80084f0:	e7f9      	b.n	80084e6 <HAL_PCD_EP_Transmit+0x44>

080084f2 <HAL_PCD_EP_SetStall>:
{
 80084f2:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80084f4:	f001 0207 	and.w	r2, r1, #7
 80084f8:	6841      	ldr	r1, [r0, #4]
 80084fa:	428a      	cmp	r2, r1
 80084fc:	d82a      	bhi.n	8008554 <HAL_PCD_EP_SetStall+0x62>
{
 80084fe:	b510      	push	{r4, lr}
 8008500:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8008502:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008506:	d11d      	bne.n	8008544 <HAL_PCD_EP_SetStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr];
 8008508:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800850c:	00c9      	lsls	r1, r1, #3
 800850e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8008512:	4401      	add	r1, r0
    ep->is_in = 0U;
 8008514:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008518:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800851c:	2000      	movs	r0, #0
 800851e:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8008522:	2301      	movs	r3, #1
 8008524:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008526:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8008528:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800852c:	2b01      	cmp	r3, #1
 800852e:	d013      	beq.n	8008558 <HAL_PCD_EP_SetStall+0x66>
 8008530:	2301      	movs	r3, #1
 8008532:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008536:	6820      	ldr	r0, [r4, #0]
 8008538:	f002 fe9a 	bl	800b270 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 800853c:	2000      	movs	r0, #0
 800853e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8008542:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008544:	1c53      	adds	r3, r2, #1
 8008546:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800854a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800854e:	2001      	movs	r0, #1
 8008550:	7048      	strb	r0, [r1, #1]
 8008552:	e7e6      	b.n	8008522 <HAL_PCD_EP_SetStall+0x30>
    return HAL_ERROR;
 8008554:	2001      	movs	r0, #1
}
 8008556:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8008558:	2002      	movs	r0, #2
 800855a:	e7f2      	b.n	8008542 <HAL_PCD_EP_SetStall+0x50>

0800855c <HAL_PCD_EP_ClrStall>:
{
 800855c:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800855e:	f001 010f 	and.w	r1, r1, #15
 8008562:	6842      	ldr	r2, [r0, #4]
 8008564:	4291      	cmp	r1, r2
 8008566:	d830      	bhi.n	80085ca <HAL_PCD_EP_ClrStall+0x6e>
{
 8008568:	b510      	push	{r4, lr}
 800856a:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 800856c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008570:	d121      	bne.n	80085b6 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008572:	f003 0207 	and.w	r2, r3, #7
 8008576:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800857a:	00c9      	lsls	r1, r1, #3
 800857c:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8008580:	4401      	add	r1, r0
    ep->is_in = 0U;
 8008582:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008586:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800858a:	2000      	movs	r0, #0
 800858c:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 8008590:	2200      	movs	r2, #0
 8008592:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008594:	f003 0307 	and.w	r3, r3, #7
 8008598:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800859a:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d015      	beq.n	80085ce <HAL_PCD_EP_ClrStall+0x72>
 80085a2:	2301      	movs	r3, #1
 80085a4:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80085a8:	6820      	ldr	r0, [r4, #0]
 80085aa:	f002 fe86 	bl	800b2ba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80085ae:	2000      	movs	r0, #0
 80085b0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80085b4:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80085b6:	f003 0207 	and.w	r2, r3, #7
 80085ba:	3201      	adds	r2, #1
 80085bc:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80085c0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80085c4:	2001      	movs	r0, #1
 80085c6:	7048      	strb	r0, [r1, #1]
 80085c8:	e7e2      	b.n	8008590 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 80085ca:	2001      	movs	r0, #1
}
 80085cc:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80085ce:	2002      	movs	r0, #2
 80085d0:	e7f0      	b.n	80085b4 <HAL_PCD_EP_ClrStall+0x58>

080085d2 <HAL_PCDEx_PMAConfig>:
=======
 8007878:	682a      	ldr	r2, [r5, #0]
 800787a:	7821      	ldrb	r1, [r4, #0]
 800787c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8007880:	b29b      	uxth	r3, r3
 8007882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800788a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800788e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007896:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 800789a:	2000      	movs	r0, #0
 800789c:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_buff += TxPctSize;
 800789e:	6963      	ldr	r3, [r4, #20]
 80078a0:	4413      	add	r3, r2
 80078a2:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 80078a4:	69e3      	ldr	r3, [r4, #28]
 80078a6:	4413      	add	r3, r2
 80078a8:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 80078aa:	6a21      	ldr	r1, [r4, #32]
 80078ac:	6923      	ldr	r3, [r4, #16]
 80078ae:	4299      	cmp	r1, r3
 80078b0:	d31b      	bcc.n	80078ea <HAL_PCD_EP_DB_Transmit+0x1a6>
          ep->xfer_len_db -= len;
 80078b2:	1ac9      	subs	r1, r1, r3
 80078b4:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80078b6:	7862      	ldrb	r2, [r4, #1]
 80078b8:	2a00      	cmp	r2, #0
 80078ba:	d13f      	bne.n	800793c <HAL_PCD_EP_DB_Transmit+0x1f8>
 80078bc:	6829      	ldr	r1, [r5, #0]
 80078be:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 80078c2:	fa11 f282 	uxtah	r2, r1, r2
 80078c6:	7821      	ldrb	r1, [r4, #0]
 80078c8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80078cc:	2b3e      	cmp	r3, #62	; 0x3e
 80078ce:	d918      	bls.n	8007902 <HAL_PCD_EP_DB_Transmit+0x1be>
 80078d0:	0959      	lsrs	r1, r3, #5
 80078d2:	f013 0f1f 	tst.w	r3, #31
 80078d6:	d100      	bne.n	80078da <HAL_PCD_EP_DB_Transmit+0x196>
 80078d8:	3901      	subs	r1, #1
 80078da:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80078de:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80078e2:	b289      	uxth	r1, r1
 80078e4:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80078e8:	e02a      	b.n	8007940 <HAL_PCD_EP_DB_Transmit+0x1fc>
        else if (ep->xfer_len_db == 0U)
 80078ea:	b921      	cbnz	r1, 80078f6 <HAL_PCD_EP_DB_Transmit+0x1b2>
          ep->xfer_fill_db = 0U;
 80078ec:	2300      	movs	r3, #0
 80078ee:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 80078f2:	4613      	mov	r3, r2
 80078f4:	e7df      	b.n	80078b6 <HAL_PCD_EP_DB_Transmit+0x172>
          ep->xfer_fill_db = 0U;
 80078f6:	2300      	movs	r3, #0
 80078f8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 80078fc:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 80078fe:	460b      	mov	r3, r1
 8007900:	e7d9      	b.n	80078b6 <HAL_PCD_EP_DB_Transmit+0x172>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007902:	b98b      	cbnz	r3, 8007928 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8007904:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8007908:	b289      	uxth	r1, r1
 800790a:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800790e:	b289      	uxth	r1, r1
 8007910:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8007914:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8007918:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800791c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007920:	b289      	uxth	r1, r1
 8007922:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8007926:	e00b      	b.n	8007940 <HAL_PCD_EP_DB_Transmit+0x1fc>
 8007928:	0859      	lsrs	r1, r3, #1
 800792a:	f013 0f01 	tst.w	r3, #1
 800792e:	d000      	beq.n	8007932 <HAL_PCD_EP_DB_Transmit+0x1ee>
 8007930:	3101      	adds	r1, #1
 8007932:	0289      	lsls	r1, r1, #10
 8007934:	b289      	uxth	r1, r1
 8007936:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800793a:	e001      	b.n	8007940 <HAL_PCD_EP_DB_Transmit+0x1fc>
 800793c:	2a01      	cmp	r2, #1
 800793e:	d006      	beq.n	800794e <HAL_PCD_EP_DB_Transmit+0x20a>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007940:	b29b      	uxth	r3, r3
 8007942:	8922      	ldrh	r2, [r4, #8]
 8007944:	6961      	ldr	r1, [r4, #20]
 8007946:	6828      	ldr	r0, [r5, #0]
 8007948:	f003 fc89 	bl	800b25e <USB_WritePMA>
 800794c:	e794      	b.n	8007878 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800794e:	6829      	ldr	r1, [r5, #0]
 8007950:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8007954:	fa11 f282 	uxtah	r2, r1, r2
 8007958:	7821      	ldrb	r1, [r4, #0]
 800795a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800795e:	b299      	uxth	r1, r3
 8007960:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8007964:	e7ec      	b.n	8007940 <HAL_PCD_EP_DB_Transmit+0x1fc>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007966:	6802      	ldr	r2, [r0, #0]
 8007968:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800796c:	7809      	ldrb	r1, [r1, #0]
 800796e:	00c8      	lsls	r0, r1, #3
 8007970:	fa10 f383 	uxtah	r3, r0, r3
 8007974:	4413      	add	r3, r2
 8007976:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800797a:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxPctSize)
 800797e:	69a3      	ldr	r3, [r4, #24]
 8007980:	4293      	cmp	r3, r2
 8007982:	d352      	bcc.n	8007a2a <HAL_PCD_EP_DB_Transmit+0x2e6>
      ep->xfer_len -= TxPctSize;
 8007984:	1a9b      	subs	r3, r3, r2
 8007986:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8007988:	69a3      	ldr	r3, [r4, #24]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d169      	bne.n	8007a62 <HAL_PCD_EP_DB_Transmit+0x31e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800798e:	7863      	ldrb	r3, [r4, #1]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d14d      	bne.n	8007a30 <HAL_PCD_EP_DB_Transmit+0x2ec>
 8007994:	682a      	ldr	r2, [r5, #0]
 8007996:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800799a:	fa12 f383 	uxtah	r3, r2, r3
 800799e:	4418      	add	r0, r3
 80079a0:	f8b0 3402 	ldrh.w	r3, [r0, #1026]	; 0x402
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
 80079b0:	f8b0 3402 	ldrh.w	r3, [r0, #1026]	; 0x402
 80079b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079bc:	b29b      	uxth	r3, r3
 80079be:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80079c2:	6829      	ldr	r1, [r5, #0]
 80079c4:	7862      	ldrb	r2, [r4, #1]
 80079c6:	2a00      	cmp	r2, #0
 80079c8:	d13e      	bne.n	8007a48 <HAL_PCD_EP_DB_Transmit+0x304>
 80079ca:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80079ce:	fa11 f383 	uxtah	r3, r1, r3
 80079d2:	7822      	ldrb	r2, [r4, #0]
 80079d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079d8:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80079dc:	b292      	uxth	r2, r2
 80079de:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80079e2:	b292      	uxth	r2, r2
 80079e4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80079e8:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80079ec:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80079f0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80079f4:	b292      	uxth	r2, r2
 80079f6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80079fa:	7821      	ldrb	r1, [r4, #0]
 80079fc:	4628      	mov	r0, r5
 80079fe:	f005 fa77 	bl	800cef0 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007a02:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8007a06:	f47f af37 	bne.w	8007878 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007a0a:	682a      	ldr	r2, [r5, #0]
 8007a0c:	7821      	ldrb	r1, [r4, #0]
 8007a0e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a24:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8007a28:	e726      	b.n	8007878 <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	61a3      	str	r3, [r4, #24]
 8007a2e:	e7ab      	b.n	8007988 <HAL_PCD_EP_DB_Transmit+0x244>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d1c6      	bne.n	80079c2 <HAL_PCD_EP_DB_Transmit+0x27e>
 8007a34:	682a      	ldr	r2, [r5, #0]
 8007a36:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8007a3a:	fa12 f383 	uxtah	r3, r2, r3
 8007a3e:	4418      	add	r0, r3
 8007a40:	2300      	movs	r3, #0
 8007a42:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
 8007a46:	e7bc      	b.n	80079c2 <HAL_PCD_EP_DB_Transmit+0x27e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007a48:	2a01      	cmp	r2, #1
 8007a4a:	d1d6      	bne.n	80079fa <HAL_PCD_EP_DB_Transmit+0x2b6>
 8007a4c:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8007a50:	fa11 f383 	uxtah	r3, r1, r3
 8007a54:	7821      	ldrb	r1, [r4, #0]
 8007a56:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007a60:	e7cb      	b.n	80079fa <HAL_PCD_EP_DB_Transmit+0x2b6>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007a62:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8007a66:	d10d      	bne.n	8007a84 <HAL_PCD_EP_DB_Transmit+0x340>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007a68:	6828      	ldr	r0, [r5, #0]
 8007a6a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a80:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8007a84:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	f47f aef5 	bne.w	8007878 <HAL_PCD_EP_DB_Transmit+0x134>
        ep->xfer_buff += TxPctSize;
 8007a8e:	6963      	ldr	r3, [r4, #20]
 8007a90:	4413      	add	r3, r2
 8007a92:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8007a94:	69e3      	ldr	r3, [r4, #28]
 8007a96:	4413      	add	r3, r2
 8007a98:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8007a9a:	6a21      	ldr	r1, [r4, #32]
 8007a9c:	6923      	ldr	r3, [r4, #16]
 8007a9e:	4299      	cmp	r1, r3
 8007aa0:	d31b      	bcc.n	8007ada <HAL_PCD_EP_DB_Transmit+0x396>
          ep->xfer_len_db -= len;
 8007aa2:	1ac9      	subs	r1, r1, r3
 8007aa4:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007aa6:	6829      	ldr	r1, [r5, #0]
 8007aa8:	7862      	ldrb	r2, [r4, #1]
 8007aaa:	2a00      	cmp	r2, #0
 8007aac:	d13e      	bne.n	8007b2c <HAL_PCD_EP_DB_Transmit+0x3e8>
 8007aae:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8007ab2:	fa11 f282 	uxtah	r2, r1, r2
 8007ab6:	7821      	ldrb	r1, [r4, #0]
 8007ab8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007abc:	2b3e      	cmp	r3, #62	; 0x3e
 8007abe:	d918      	bls.n	8007af2 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8007ac0:	0959      	lsrs	r1, r3, #5
 8007ac2:	f013 0f1f 	tst.w	r3, #31
 8007ac6:	d100      	bne.n	8007aca <HAL_PCD_EP_DB_Transmit+0x386>
 8007ac8:	3901      	subs	r1, #1
 8007aca:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8007ace:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007ad2:	b289      	uxth	r1, r1
 8007ad4:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8007ad8:	e02a      	b.n	8007b30 <HAL_PCD_EP_DB_Transmit+0x3ec>
        else if (ep->xfer_len_db == 0U)
 8007ada:	b921      	cbnz	r1, 8007ae6 <HAL_PCD_EP_DB_Transmit+0x3a2>
          ep->xfer_fill_db = 0U;
 8007adc:	2300      	movs	r3, #0
 8007ade:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	e7df      	b.n	8007aa6 <HAL_PCD_EP_DB_Transmit+0x362>
          ep->xfer_len_db = 0U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 8007aea:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 8007aee:	460b      	mov	r3, r1
 8007af0:	e7d9      	b.n	8007aa6 <HAL_PCD_EP_DB_Transmit+0x362>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007af2:	b98b      	cbnz	r3, 8007b18 <HAL_PCD_EP_DB_Transmit+0x3d4>
 8007af4:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8007af8:	b289      	uxth	r1, r1
 8007afa:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8007afe:	b289      	uxth	r1, r1
 8007b00:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8007b04:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8007b08:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8007b0c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007b10:	b289      	uxth	r1, r1
 8007b12:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8007b16:	e00b      	b.n	8007b30 <HAL_PCD_EP_DB_Transmit+0x3ec>
 8007b18:	0859      	lsrs	r1, r3, #1
 8007b1a:	f013 0f01 	tst.w	r3, #1
 8007b1e:	d000      	beq.n	8007b22 <HAL_PCD_EP_DB_Transmit+0x3de>
 8007b20:	3101      	adds	r1, #1
 8007b22:	0289      	lsls	r1, r1, #10
 8007b24:	b289      	uxth	r1, r1
 8007b26:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8007b2a:	e001      	b.n	8007b30 <HAL_PCD_EP_DB_Transmit+0x3ec>
 8007b2c:	2a01      	cmp	r2, #1
 8007b2e:	d006      	beq.n	8007b3e <HAL_PCD_EP_DB_Transmit+0x3fa>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	8962      	ldrh	r2, [r4, #10]
 8007b34:	6961      	ldr	r1, [r4, #20]
 8007b36:	6828      	ldr	r0, [r5, #0]
 8007b38:	f003 fb91 	bl	800b25e <USB_WritePMA>
 8007b3c:	e69c      	b.n	8007878 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007b3e:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8007b42:	fa11 f282 	uxtah	r2, r1, r2
 8007b46:	7821      	ldrb	r1, [r4, #0]
 8007b48:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007b4c:	b299      	uxth	r1, r3
 8007b4e:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8007b52:	e7ed      	b.n	8007b30 <HAL_PCD_EP_DB_Transmit+0x3ec>

08007b54 <PCD_EP_ISR_Handler>:
{
 8007b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b58:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007b5a:	e0ca      	b.n	8007cf2 <PCD_EP_ISR_Handler+0x19e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007b5c:	8803      	ldrh	r3, [r0, #0]
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007b74:	6829      	ldr	r1, [r5, #0]
 8007b76:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8007b7a:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8007b7e:	00d2      	lsls	r2, r2, #3
 8007b80:	fa12 f383 	uxtah	r3, r2, r3
 8007b84:	440b      	add	r3, r1
 8007b86:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8007b8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b8e:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8007b90:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8007b92:	4413      	add	r3, r2
 8007b94:	63eb      	str	r3, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007b96:	2100      	movs	r1, #0
 8007b98:	4628      	mov	r0, r5
 8007b9a:	f005 f9a9 	bl	800cef0 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007b9e:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f000 80a5 	beq.w	8007cf2 <PCD_EP_ISR_Handler+0x19e>
 8007ba8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f040 80a1 	bne.w	8007cf2 <PCD_EP_ISR_Handler+0x19e>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007bb0:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8007bb4:	682a      	ldr	r2, [r5, #0]
 8007bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bba:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8007bc4:	e095      	b.n	8007cf2 <PCD_EP_ISR_Handler+0x19e>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007bc6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8007bca:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8007bce:	00d2      	lsls	r2, r2, #3
 8007bd0:	fa12 f383 	uxtah	r3, r2, r3
 8007bd4:	4403      	add	r3, r0
 8007bd6:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8007bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bde:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007be2:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8007be6:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 8007bea:	f003 fefc 	bl	800b9e6 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007bee:	682a      	ldr	r2, [r5, #0]
 8007bf0:	8813      	ldrh	r3, [r2, #0]
 8007bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bf6:	051b      	lsls	r3, r3, #20
 8007bf8:	0d1b      	lsrs	r3, r3, #20
 8007bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bfe:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8007c00:	4628      	mov	r0, r5
 8007c02:	f005 f961 	bl	800cec8 <HAL_PCD_SetupStageCallback>
 8007c06:	e074      	b.n	8007cf2 <PCD_EP_ISR_Handler+0x19e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007c08:	b989      	cbnz	r1, 8007c2e <PCD_EP_ISR_Handler+0xda>
 8007c0a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007c0e:	b292      	uxth	r2, r2
 8007c10:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007c14:	b292      	uxth	r2, r2
 8007c16:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007c1a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007c1e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007c22:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007c26:	b292      	uxth	r2, r2
 8007c28:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007c2c:	e0bf      	b.n	8007dae <PCD_EP_ISR_Handler+0x25a>
 8007c2e:	084a      	lsrs	r2, r1, #1
 8007c30:	f011 0f01 	tst.w	r1, #1
 8007c34:	d000      	beq.n	8007c38 <PCD_EP_ISR_Handler+0xe4>
 8007c36:	3201      	adds	r2, #1
 8007c38:	0292      	lsls	r2, r2, #10
 8007c3a:	b292      	uxth	r2, r2
 8007c3c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007c40:	e0b5      	b.n	8007dae <PCD_EP_ISR_Handler+0x25a>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007c42:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8007c46:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007c48:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8007c4c:	f040 80be 	bne.w	8007dcc <PCD_EP_ISR_Handler+0x278>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007c50:	f016 0f80 	tst.w	r6, #128	; 0x80
 8007c54:	d04d      	beq.n	8007cf2 <PCD_EP_ISR_Handler+0x19e>
        ep = &hpcd->IN_ep[epindex];
 8007c56:	1c62      	adds	r2, r4, #1
 8007c58:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8007c5c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007c60:	6828      	ldr	r0, [r5, #0]
 8007c62:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->type != EP_TYPE_BULK)
 8007c7e:	78cb      	ldrb	r3, [r1, #3]
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	f000 81a7 	beq.w	8007fd4 <PCD_EP_ISR_Handler+0x480>
          ep->xfer_len = 0U;
 8007c86:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8007c8a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8007c8e:	2200      	movs	r2, #0
 8007c90:	641a      	str	r2, [r3, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8007c92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c96:	b323      	cbz	r3, 8007ce2 <PCD_EP_ISR_Handler+0x18e>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007c98:	f016 0f40 	tst.w	r6, #64	; 0x40
 8007c9c:	f000 8163 	beq.w	8007f66 <PCD_EP_ISR_Handler+0x412>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007ca0:	784b      	ldrb	r3, [r1, #1]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	f040 814c 	bne.w	8007f40 <PCD_EP_ISR_Handler+0x3ec>
 8007ca8:	682a      	ldr	r2, [r5, #0]
 8007caa:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8007cae:	fa12 f383 	uxtah	r3, r2, r3
 8007cb2:	1c62      	adds	r2, r4, #1
 8007cb4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007cb8:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8007cbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cc0:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007cc4:	b292      	uxth	r2, r2
 8007cc6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007cca:	b292      	uxth	r2, r2
 8007ccc:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007cd0:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007cd4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007cd8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007cdc:	b292      	uxth	r2, r2
 8007cde:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007ce2:	3401      	adds	r4, #1
 8007ce4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8007ce8:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 8007cec:	4628      	mov	r0, r5
 8007cee:	f005 f8ff 	bl	800cef0 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007cf2:	6828      	ldr	r0, [r5, #0]
 8007cf4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8007cf8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8007cfc:	f000 81ae 	beq.w	800805c <PCD_EP_ISR_Handler+0x508>
    wIstr = hpcd->Instance->ISTR;
 8007d00:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 8007d04:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 8007d06:	f014 040f 	ands.w	r4, r4, #15
 8007d0a:	d19a      	bne.n	8007c42 <PCD_EP_ISR_Handler+0xee>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007d0c:	f013 0f10 	tst.w	r3, #16
 8007d10:	f43f af24 	beq.w	8007b5c <PCD_EP_ISR_Handler+0x8>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007d14:	8803      	ldrh	r3, [r0, #0]
 8007d16:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007d18:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8007d1c:	f47f af53 	bne.w	8007bc6 <PCD_EP_ISR_Handler+0x72>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007d20:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8007d24:	d0e5      	beq.n	8007cf2 <PCD_EP_ISR_Handler+0x19e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007d26:	8803      	ldrh	r3, [r0, #0]
 8007d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d2c:	051b      	lsls	r3, r3, #20
 8007d2e:	0d1b      	lsrs	r3, r3, #20
 8007d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d34:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007d36:	6828      	ldr	r0, [r5, #0]
 8007d38:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8007d3c:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8007d40:	00d2      	lsls	r2, r2, #3
 8007d42:	fa12 f383 	uxtah	r3, r2, r3
 8007d46:	4403      	add	r3, r0
 8007d48:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8007d4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d50:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007d54:	b18b      	cbz	r3, 8007d7a <PCD_EP_ISR_Handler+0x226>
 8007d56:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 8007d5a:	b171      	cbz	r1, 8007d7a <PCD_EP_ISR_Handler+0x226>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007d5c:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8007d60:	f003 fe41 	bl	800b9e6 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8007d64:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
 8007d68:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 8007d6c:	4413      	add	r3, r2
 8007d6e:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007d72:	2100      	movs	r1, #0
 8007d74:	4628      	mov	r0, r5
 8007d76:	f005 f8af 	bl	800ced8 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8007d7a:	682b      	ldr	r3, [r5, #0]
 8007d7c:	881a      	ldrh	r2, [r3, #0]
 8007d7e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007d82:	d1b6      	bne.n	8007cf2 <PCD_EP_ISR_Handler+0x19e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007d84:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007d88:	fa13 f382 	uxtah	r3, r3, r2
 8007d8c:	f8d5 1178 	ldr.w	r1, [r5, #376]	; 0x178
 8007d90:	293e      	cmp	r1, #62	; 0x3e
 8007d92:	f67f af39 	bls.w	8007c08 <PCD_EP_ISR_Handler+0xb4>
 8007d96:	094a      	lsrs	r2, r1, #5
 8007d98:	f011 0f1f 	tst.w	r1, #31
 8007d9c:	d100      	bne.n	8007da0 <PCD_EP_ISR_Handler+0x24c>
 8007d9e:	3a01      	subs	r2, #1
 8007da0:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8007da4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007da8:	b292      	uxth	r2, r2
 8007daa:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007dae:	682a      	ldr	r2, [r5, #0]
 8007db0:	8813      	ldrh	r3, [r2, #0]
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dbc:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8007dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dc8:	8013      	strh	r3, [r2, #0]
 8007dca:	e792      	b.n	8007cf2 <PCD_EP_ISR_Handler+0x19e>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007dcc:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8007dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd4:	051b      	lsls	r3, r3, #20
 8007dd6:	0d1b      	lsrs	r3, r3, #20
 8007dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ddc:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 8007de0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8007de4:	00c9      	lsls	r1, r1, #3
 8007de6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8007dea:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 8007dee:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8007df2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8007df6:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d140      	bne.n	8007e80 <PCD_EP_ISR_Handler+0x32c>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007dfe:	6828      	ldr	r0, [r5, #0]
 8007e00:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8007e04:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8007e08:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8007e0c:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8007e10:	00d2      	lsls	r2, r2, #3
 8007e12:	fa12 f383 	uxtah	r3, r2, r3
 8007e16:	4403      	add	r3, r0
 8007e18:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8007e1c:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 8007e20:	bb17      	cbnz	r7, 8007e68 <PCD_EP_ISR_Handler+0x314>
        ep->xfer_count += count;
 8007e22:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8007e26:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8007e2a:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8007e2e:	443a      	add	r2, r7
 8007e30:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8007e34:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8007e38:	443a      	add	r2, r7
 8007e3a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007e3e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8007e42:	b13b      	cbz	r3, 8007e54 <PCD_EP_ISR_Handler+0x300>
 8007e44:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8007e48:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8007e4c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8007e50:	429f      	cmp	r7, r3
 8007e52:	d270      	bcs.n	8007f36 <PCD_EP_ISR_Handler+0x3e2>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007e54:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8007e58:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8007e5c:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8007e60:	4628      	mov	r0, r5
 8007e62:	f005 f839 	bl	800ced8 <HAL_PCD_DataOutStageCallback>
 8007e66:	e6f3      	b.n	8007c50 <PCD_EP_ISR_Handler+0xfc>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007e68:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8007e6c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8007e70:	463b      	mov	r3, r7
 8007e72:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8007e76:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8007e7a:	f003 fdb4 	bl	800b9e6 <USB_ReadPMA>
 8007e7e:	e7d0      	b.n	8007e22 <PCD_EP_ISR_Handler+0x2ce>
          if (ep->type == EP_TYPE_BULK)
 8007e80:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8007e84:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8007e88:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d033      	beq.n	8007ef8 <PCD_EP_ISR_Handler+0x3a4>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007e90:	6829      	ldr	r1, [r5, #0]
 8007e92:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8007e96:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8007e9a:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8007e9e:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007eb4:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007eb8:	6828      	ldr	r0, [r5, #0]
 8007eba:	f892 3168 	ldrb.w	r3, [r2, #360]	; 0x168
 8007ebe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007ec2:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8007ec6:	d01e      	beq.n	8007f06 <PCD_EP_ISR_Handler+0x3b2>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007ec8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8007ecc:	00db      	lsls	r3, r3, #3
 8007ece:	fa13 f382 	uxtah	r3, r3, r2
 8007ed2:	4403      	add	r3, r0
 8007ed4:	f8b3 7402 	ldrh.w	r7, [r3, #1026]	; 0x402
 8007ed8:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8007edc:	2f00      	cmp	r7, #0
 8007ede:	d0a0      	beq.n	8007e22 <PCD_EP_ISR_Handler+0x2ce>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007ee0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8007ee4:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8007ee8:	463b      	mov	r3, r7
 8007eea:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8007eee:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8007ef2:	f003 fd78 	bl	800b9e6 <USB_ReadPMA>
 8007ef6:	e794      	b.n	8007e22 <PCD_EP_ISR_Handler+0x2ce>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007ef8:	4632      	mov	r2, r6
 8007efa:	4641      	mov	r1, r8
 8007efc:	4628      	mov	r0, r5
 8007efe:	f7ff fb0e 	bl	800751e <HAL_PCD_EP_DB_Receive>
 8007f02:	4607      	mov	r7, r0
 8007f04:	e78d      	b.n	8007e22 <PCD_EP_ISR_Handler+0x2ce>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007f06:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8007f0a:	00db      	lsls	r3, r3, #3
 8007f0c:	fa13 f382 	uxtah	r3, r3, r2
 8007f10:	4403      	add	r3, r0
 8007f12:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8007f16:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8007f1a:	2f00      	cmp	r7, #0
 8007f1c:	d081      	beq.n	8007e22 <PCD_EP_ISR_Handler+0x2ce>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007f1e:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8007f22:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8007f26:	463b      	mov	r3, r7
 8007f28:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8007f2c:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8007f30:	f003 fd59 	bl	800b9e6 <USB_ReadPMA>
 8007f34:	e775      	b.n	8007e22 <PCD_EP_ISR_Handler+0x2ce>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8007f36:	4641      	mov	r1, r8
 8007f38:	6828      	ldr	r0, [r5, #0]
 8007f3a:	f003 f9a4 	bl	800b286 <USB_EPStartXfer>
 8007f3e:	e687      	b.n	8007c50 <PCD_EP_ISR_Handler+0xfc>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	f47f aece 	bne.w	8007ce2 <PCD_EP_ISR_Handler+0x18e>
 8007f46:	682a      	ldr	r2, [r5, #0]
 8007f48:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8007f4c:	fa12 f383 	uxtah	r3, r2, r3
 8007f50:	1c62      	adds	r2, r4, #1
 8007f52:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007f56:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8007f5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8007f64:	e6bd      	b.n	8007ce2 <PCD_EP_ISR_Handler+0x18e>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007f66:	6829      	ldr	r1, [r5, #0]
 8007f68:	1c63      	adds	r3, r4, #1
 8007f6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007f6e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8007f72:	785a      	ldrb	r2, [r3, #1]
 8007f74:	b9e2      	cbnz	r2, 8007fb0 <PCD_EP_ISR_Handler+0x45c>
 8007f76:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8007f7a:	fa11 f383 	uxtah	r3, r1, r3
 8007f7e:	1c62      	adds	r2, r4, #1
 8007f80:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007f84:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8007f88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f8c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007f90:	b292      	uxth	r2, r2
 8007f92:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007f96:	b292      	uxth	r2, r2
 8007f98:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007f9c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8007fa0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007fa4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007fa8:	b292      	uxth	r2, r2
 8007faa:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007fae:	e698      	b.n	8007ce2 <PCD_EP_ISR_Handler+0x18e>
 8007fb0:	2a01      	cmp	r2, #1
 8007fb2:	f47f ae96 	bne.w	8007ce2 <PCD_EP_ISR_Handler+0x18e>
 8007fb6:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8007fba:	fa11 f383 	uxtah	r3, r1, r3
 8007fbe:	1c62      	adds	r2, r4, #1
 8007fc0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007fc4:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8007fc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8007fd2:	e686      	b.n	8007ce2 <PCD_EP_ISR_Handler+0x18e>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007fd4:	f416 7f80 	tst.w	r6, #256	; 0x100
 8007fd8:	d13b      	bne.n	8008052 <PCD_EP_ISR_Handler+0x4fe>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007fda:	6828      	ldr	r0, [r5, #0]
 8007fdc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8007fe0:	1c62      	adds	r2, r4, #1
 8007fe2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007fe6:	f815 6032 	ldrb.w	r6, [r5, r2, lsl #3]
 8007fea:	00f2      	lsls	r2, r6, #3
 8007fec:	fa12 f383 	uxtah	r3, r2, r3
 8007ff0:	4403      	add	r3, r0
 8007ff2:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8007ff6:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (ep->xfer_len > TxPctSize)
 8007ffa:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8007ffe:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8008002:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008004:	429a      	cmp	r2, r3
 8008006:	d910      	bls.n	800802a <PCD_EP_ISR_Handler+0x4d6>
              ep->xfer_len -= TxPctSize;
 8008008:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 800800c:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 8008010:	1ad2      	subs	r2, r2, r3
 8008012:	643a      	str	r2, [r7, #64]	; 0x40
            if (ep->xfer_len == 0U)
 8008014:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8008018:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800801c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800801e:	b95a      	cbnz	r2, 8008038 <PCD_EP_ISR_Handler+0x4e4>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008020:	4631      	mov	r1, r6
 8008022:	4628      	mov	r0, r5
 8008024:	f004 ff64 	bl	800cef0 <HAL_PCD_DataInStageCallback>
 8008028:	e663      	b.n	8007cf2 <PCD_EP_ISR_Handler+0x19e>
              ep->xfer_len = 0U;
 800802a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800802e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8008032:	2700      	movs	r7, #0
 8008034:	6417      	str	r7, [r2, #64]	; 0x40
 8008036:	e7ed      	b.n	8008014 <PCD_EP_ISR_Handler+0x4c0>
              ep->xfer_buff += TxPctSize;
 8008038:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800803c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8008040:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8008042:	441e      	add	r6, r3
 8008044:	63d6      	str	r6, [r2, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 8008046:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8008048:	4423      	add	r3, r4
 800804a:	6453      	str	r3, [r2, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800804c:	f003 f91b 	bl	800b286 <USB_EPStartXfer>
 8008050:	e64f      	b.n	8007cf2 <PCD_EP_ISR_Handler+0x19e>
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8008052:	4632      	mov	r2, r6
 8008054:	4628      	mov	r0, r5
 8008056:	f7ff fb75 	bl	8007744 <HAL_PCD_EP_DB_Transmit>
 800805a:	e64a      	b.n	8007cf2 <PCD_EP_ISR_Handler+0x19e>
}
 800805c:	2000      	movs	r0, #0
 800805e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008062 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8008062:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8008066:	2b01      	cmp	r3, #1
 8008068:	d00d      	beq.n	8008086 <HAL_PCD_SetAddress+0x24>
{
 800806a:	b510      	push	{r4, lr}
 800806c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800806e:	2301      	movs	r3, #1
 8008070:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8008074:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008078:	6800      	ldr	r0, [r0, #0]
 800807a:	f003 f8db 	bl	800b234 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800807e:	2000      	movs	r0, #0
 8008080:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8008084:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8008086:	2002      	movs	r0, #2
}
 8008088:	4770      	bx	lr

0800808a <HAL_PCD_IRQHandler>:
{
 800808a:	b510      	push	{r4, lr}
 800808c:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800808e:	6800      	ldr	r0, [r0, #0]
 8008090:	f003 f8e1 	bl	800b256 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8008094:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8008098:	d123      	bne.n	80080e2 <HAL_PCD_IRQHandler+0x58>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800809a:	f410 6f80 	tst.w	r0, #1024	; 0x400
 800809e:	d124      	bne.n	80080ea <HAL_PCD_IRQHandler+0x60>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80080a0:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80080a4:	d132      	bne.n	800810c <HAL_PCD_IRQHandler+0x82>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80080a6:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80080aa:	d139      	bne.n	8008120 <HAL_PCD_IRQHandler+0x96>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80080ac:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80080b0:	d140      	bne.n	8008134 <HAL_PCD_IRQHandler+0xaa>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80080b2:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80080b6:	d167      	bne.n	8008188 <HAL_PCD_IRQHandler+0xfe>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80080b8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80080bc:	f040 8081 	bne.w	80081c2 <HAL_PCD_IRQHandler+0x138>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80080c0:	f410 7f00 	tst.w	r0, #512	; 0x200
 80080c4:	f040 80ad 	bne.w	8008222 <HAL_PCD_IRQHandler+0x198>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80080c8:	f410 7f80 	tst.w	r0, #256	; 0x100
 80080cc:	d027      	beq.n	800811e <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80080ce:	6822      	ldr	r2, [r4, #0]
 80080d0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080da:	b29b      	uxth	r3, r3
 80080dc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 80080e0:	e01d      	b.n	800811e <HAL_PCD_IRQHandler+0x94>
    (void)PCD_EP_ISR_Handler(hpcd);
 80080e2:	4620      	mov	r0, r4
 80080e4:	f7ff fd36 	bl	8007b54 <PCD_EP_ISR_Handler>
    return;
 80080e8:	e019      	b.n	800811e <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80080ea:	6822      	ldr	r2, [r4, #0]
 80080ec:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80080fc:	4620      	mov	r0, r4
 80080fe:	f004 ff08 	bl	800cf12 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8008102:	2100      	movs	r1, #0
 8008104:	4620      	mov	r0, r4
 8008106:	f7ff ffac 	bl	8008062 <HAL_PCD_SetAddress>
    return;
 800810a:	e008      	b.n	800811e <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800810c:	6822      	ldr	r2, [r4, #0]
 800810e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8008112:	b29b      	uxth	r3, r3
 8008114:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008118:	b29b      	uxth	r3, r3
 800811a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 800811e:	bd10      	pop	{r4, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8008120:	6822      	ldr	r2, [r4, #0]
 8008122:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8008126:	b29b      	uxth	r3, r3
 8008128:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800812c:	b29b      	uxth	r3, r3
 800812e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8008132:	e7f4      	b.n	800811e <HAL_PCD_IRQHandler+0x94>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8008134:	6822      	ldr	r2, [r4, #0]
 8008136:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800813a:	b29b      	uxth	r3, r3
 800813c:	f023 0304 	bic.w	r3, r3, #4
 8008140:	b29b      	uxth	r3, r3
 8008142:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8008146:	6822      	ldr	r2, [r4, #0]
 8008148:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800814c:	b29b      	uxth	r3, r3
 800814e:	f023 0308 	bic.w	r3, r3, #8
 8008152:	b29b      	uxth	r3, r3
 8008154:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8008158:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 800815c:	2b01      	cmp	r3, #1
 800815e:	d00c      	beq.n	800817a <HAL_PCD_IRQHandler+0xf0>
    HAL_PCD_ResumeCallback(hpcd);
 8008160:	4620      	mov	r0, r4
 8008162:	f004 fef9 	bl	800cf58 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008166:	6822      	ldr	r2, [r4, #0]
 8008168:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800816c:	b29b      	uxth	r3, r3
 800816e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008172:	b29b      	uxth	r3, r3
 8008174:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8008178:	e7d1      	b.n	800811e <HAL_PCD_IRQHandler+0x94>
      hpcd->LPM_State = LPM_L0;
 800817a:	2100      	movs	r1, #0
 800817c:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008180:	4620      	mov	r0, r4
 8008182:	f004 ffa1 	bl	800d0c8 <HAL_PCDEx_LPM_Callback>
 8008186:	e7eb      	b.n	8008160 <HAL_PCD_IRQHandler+0xd6>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008188:	6822      	ldr	r2, [r4, #0]
 800818a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800818e:	b29b      	uxth	r3, r3
 8008190:	f043 0308 	orr.w	r3, r3, #8
 8008194:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8008198:	6822      	ldr	r2, [r4, #0]
 800819a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800819e:	b29b      	uxth	r3, r3
 80081a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80081aa:	6822      	ldr	r2, [r4, #0]
 80081ac:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	f043 0304 	orr.w	r3, r3, #4
 80081b6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80081ba:	4620      	mov	r0, r4
 80081bc:	f004 febc 	bl	800cf38 <HAL_PCD_SuspendCallback>
    return;
 80081c0:	e7ad      	b.n	800811e <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80081c2:	6822      	ldr	r2, [r4, #0]
 80081c4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80081d4:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 80081d8:	b9fb      	cbnz	r3, 800821a <HAL_PCD_IRQHandler+0x190>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80081da:	6822      	ldr	r2, [r4, #0]
 80081dc:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	f043 0304 	orr.w	r3, r3, #4
 80081e6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80081ea:	6822      	ldr	r2, [r4, #0]
 80081ec:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	f043 0308 	orr.w	r3, r3, #8
 80081f6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 80081fa:	2101      	movs	r1, #1
 80081fc:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8008200:	6823      	ldr	r3, [r4, #0]
 8008202:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008206:	f3c3 038d 	ubfx	r3, r3, #2, #14
 800820a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800820e:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008212:	4620      	mov	r0, r4
 8008214:	f004 ff58 	bl	800d0c8 <HAL_PCDEx_LPM_Callback>
 8008218:	e781      	b.n	800811e <HAL_PCD_IRQHandler+0x94>
      HAL_PCD_SuspendCallback(hpcd);
 800821a:	4620      	mov	r0, r4
 800821c:	f004 fe8c 	bl	800cf38 <HAL_PCD_SuspendCallback>
    return;
 8008220:	e77d      	b.n	800811e <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008222:	6822      	ldr	r2, [r4, #0]
 8008224:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8008228:	b29b      	uxth	r3, r3
 800822a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800822e:	b29b      	uxth	r3, r3
 8008230:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8008234:	4620      	mov	r0, r4
 8008236:	f004 fe66 	bl	800cf06 <HAL_PCD_SOFCallback>
    return;
 800823a:	e770      	b.n	800811e <HAL_PCD_IRQHandler+0x94>

0800823c <HAL_PCD_EP_Open>:
{
 800823c:	b510      	push	{r4, lr}
 800823e:	4604      	mov	r4, r0
 8008240:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8008242:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008246:	d12a      	bne.n	800829e <HAL_PCD_EP_Open+0x62>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008248:	f001 0007 	and.w	r0, r1, #7
 800824c:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8008250:	00c9      	lsls	r1, r1, #3
 8008252:	f501 7eb4 	add.w	lr, r1, #360	; 0x168
 8008256:	eb04 010e 	add.w	r1, r4, lr
    ep->is_in = 0U;
 800825a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800825e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8008262:	f04f 0e00 	mov.w	lr, #0
 8008266:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 800826a:	f00c 0c07 	and.w	ip, ip, #7
 800826e:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 8008272:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8008274:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8008276:	784a      	ldrb	r2, [r1, #1]
 8008278:	b10a      	cbz	r2, 800827e <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 800827a:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 800827e:	2b02      	cmp	r3, #2
 8008280:	d019      	beq.n	80082b6 <HAL_PCD_EP_Open+0x7a>
  __HAL_LOCK(hpcd);
 8008282:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8008286:	2b01      	cmp	r3, #1
 8008288:	d018      	beq.n	80082bc <HAL_PCD_EP_Open+0x80>
 800828a:	2301      	movs	r3, #1
 800828c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008290:	6820      	ldr	r0, [r4, #0]
 8008292:	f002 fca1 	bl	800abd8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008296:	2000      	movs	r0, #0
 8008298:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800829c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800829e:	f001 0007 	and.w	r0, r1, #7
 80082a2:	3001      	adds	r0, #1
 80082a4:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 80082a8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 80082ac:	f04f 0e01 	mov.w	lr, #1
 80082b0:	f881 e001 	strb.w	lr, [r1, #1]
 80082b4:	e7d9      	b.n	800826a <HAL_PCD_EP_Open+0x2e>
    ep->data_pid_start = 0U;
 80082b6:	2300      	movs	r3, #0
 80082b8:	710b      	strb	r3, [r1, #4]
 80082ba:	e7e2      	b.n	8008282 <HAL_PCD_EP_Open+0x46>
  __HAL_LOCK(hpcd);
 80082bc:	2002      	movs	r0, #2
 80082be:	e7ed      	b.n	800829c <HAL_PCD_EP_Open+0x60>

080082c0 <HAL_PCD_EP_Close>:
{
 80082c0:	b510      	push	{r4, lr}
 80082c2:	4604      	mov	r4, r0
 80082c4:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80082c6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80082ca:	d11f      	bne.n	800830c <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80082cc:	f001 0207 	and.w	r2, r1, #7
 80082d0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80082d4:	00c9      	lsls	r1, r1, #3
 80082d6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80082da:	4401      	add	r1, r0
    ep->is_in = 0U;
 80082dc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80082e0:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80082e4:	2000      	movs	r0, #0
 80082e6:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 80082ea:	f003 0307 	and.w	r3, r3, #7
 80082ee:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80082f0:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d013      	beq.n	8008320 <HAL_PCD_EP_Close+0x60>
 80082f8:	2301      	movs	r3, #1
 80082fa:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80082fe:	6820      	ldr	r0, [r4, #0]
 8008300:	f002 fe37 	bl	800af72 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008304:	2000      	movs	r0, #0
 8008306:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800830a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800830c:	f001 0207 	and.w	r2, r1, #7
 8008310:	3201      	adds	r2, #1
 8008312:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8008316:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800831a:	2001      	movs	r0, #1
 800831c:	7048      	strb	r0, [r1, #1]
 800831e:	e7e4      	b.n	80082ea <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8008320:	2002      	movs	r0, #2
 8008322:	e7f2      	b.n	800830a <HAL_PCD_EP_Close+0x4a>

08008324 <HAL_PCD_EP_Receive>:
{
 8008324:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008326:	f001 0407 	and.w	r4, r1, #7
 800832a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800832e:	00c9      	lsls	r1, r1, #3
 8008330:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8008334:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8008336:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 800833a:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 800833e:	f8cc 217c 	str.w	r2, [ip, #380]	; 0x17c
  ep->xfer_len = len;
 8008342:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
  ep->xfer_count = 0U;
 8008346:	2300      	movs	r3, #0
 8008348:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
  ep->is_in = 0U;
 800834c:	f88c 3169 	strb.w	r3, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8008350:	f88c 4168 	strb.w	r4, [ip, #360]	; 0x168
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008354:	b924      	cbnz	r4, 8008360 <HAL_PCD_EP_Receive+0x3c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008356:	6800      	ldr	r0, [r0, #0]
 8008358:	f002 ff95 	bl	800b286 <USB_EPStartXfer>
}
 800835c:	2000      	movs	r0, #0
 800835e:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008360:	6800      	ldr	r0, [r0, #0]
 8008362:	f002 ff90 	bl	800b286 <USB_EPStartXfer>
 8008366:	e7f9      	b.n	800835c <HAL_PCD_EP_Receive+0x38>

08008368 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008368:	f001 0107 	and.w	r1, r1, #7
 800836c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008370:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8008374:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8008378:	4770      	bx	lr

0800837a <HAL_PCD_EP_Transmit>:
{
 800837a:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800837c:	f001 0407 	and.w	r4, r1, #7
 8008380:	f104 0c01 	add.w	ip, r4, #1
 8008384:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8008388:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 800838c:	eb04 0e84 	add.w	lr, r4, r4, lsl #2
 8008390:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8008394:	f8ce 203c 	str.w	r2, [lr, #60]	; 0x3c
  ep->xfer_len = len;
 8008398:	f8ce 3040 	str.w	r3, [lr, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 800839c:	2201      	movs	r2, #1
 800839e:	f88e 204c 	strb.w	r2, [lr, #76]	; 0x4c
  ep->xfer_len_db = len;
 80083a2:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
  ep->xfer_count = 0U;
 80083a6:	2300      	movs	r3, #0
 80083a8:	f8ce 3044 	str.w	r3, [lr, #68]	; 0x44
  ep->is_in = 1U;
 80083ac:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80083ae:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80083b2:	f800 403c 	strb.w	r4, [r0, ip, lsl #3]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80083b6:	b924      	cbnz	r4, 80083c2 <HAL_PCD_EP_Transmit+0x48>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80083b8:	6800      	ldr	r0, [r0, #0]
 80083ba:	f002 ff64 	bl	800b286 <USB_EPStartXfer>
}
 80083be:	2000      	movs	r0, #0
 80083c0:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80083c2:	6800      	ldr	r0, [r0, #0]
 80083c4:	f002 ff5f 	bl	800b286 <USB_EPStartXfer>
 80083c8:	e7f9      	b.n	80083be <HAL_PCD_EP_Transmit+0x44>

080083ca <HAL_PCD_EP_SetStall>:
{
 80083ca:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80083cc:	f001 0207 	and.w	r2, r1, #7
 80083d0:	6841      	ldr	r1, [r0, #4]
 80083d2:	428a      	cmp	r2, r1
 80083d4:	d82a      	bhi.n	800842c <HAL_PCD_EP_SetStall+0x62>
{
 80083d6:	b510      	push	{r4, lr}
 80083d8:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80083da:	f013 0f80 	tst.w	r3, #128	; 0x80
 80083de:	d11d      	bne.n	800841c <HAL_PCD_EP_SetStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr];
 80083e0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80083e4:	00c9      	lsls	r1, r1, #3
 80083e6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80083ea:	4401      	add	r1, r0
    ep->is_in = 0U;
 80083ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80083f0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80083f4:	2000      	movs	r0, #0
 80083f6:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 80083fa:	2301      	movs	r3, #1
 80083fc:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80083fe:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8008400:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8008404:	2b01      	cmp	r3, #1
 8008406:	d013      	beq.n	8008430 <HAL_PCD_EP_SetStall+0x66>
 8008408:	2301      	movs	r3, #1
 800840a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800840e:	6820      	ldr	r0, [r4, #0]
 8008410:	f002 fe9a 	bl	800b148 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8008414:	2000      	movs	r0, #0
 8008416:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800841a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800841c:	1c53      	adds	r3, r2, #1
 800841e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8008422:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8008426:	2001      	movs	r0, #1
 8008428:	7048      	strb	r0, [r1, #1]
 800842a:	e7e6      	b.n	80083fa <HAL_PCD_EP_SetStall+0x30>
    return HAL_ERROR;
 800842c:	2001      	movs	r0, #1
}
 800842e:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8008430:	2002      	movs	r0, #2
 8008432:	e7f2      	b.n	800841a <HAL_PCD_EP_SetStall+0x50>

08008434 <HAL_PCD_EP_ClrStall>:
{
 8008434:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008436:	f001 010f 	and.w	r1, r1, #15
 800843a:	6842      	ldr	r2, [r0, #4]
 800843c:	4291      	cmp	r1, r2
 800843e:	d830      	bhi.n	80084a2 <HAL_PCD_EP_ClrStall+0x6e>
{
 8008440:	b510      	push	{r4, lr}
 8008442:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8008444:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008448:	d121      	bne.n	800848e <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800844a:	f003 0207 	and.w	r2, r3, #7
 800844e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8008452:	00c9      	lsls	r1, r1, #3
 8008454:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8008458:	4401      	add	r1, r0
    ep->is_in = 0U;
 800845a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800845e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8008462:	2000      	movs	r0, #0
 8008464:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 8008468:	2200      	movs	r2, #0
 800846a:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800846c:	f003 0307 	and.w	r3, r3, #7
 8008470:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8008472:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8008476:	2b01      	cmp	r3, #1
 8008478:	d015      	beq.n	80084a6 <HAL_PCD_EP_ClrStall+0x72>
 800847a:	2301      	movs	r3, #1
 800847c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008480:	6820      	ldr	r0, [r4, #0]
 8008482:	f002 fe86 	bl	800b192 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008486:	2000      	movs	r0, #0
 8008488:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800848c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800848e:	f003 0207 	and.w	r2, r3, #7
 8008492:	3201      	adds	r2, #1
 8008494:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8008498:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800849c:	2001      	movs	r0, #1
 800849e:	7048      	strb	r0, [r1, #1]
 80084a0:	e7e2      	b.n	8008468 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 80084a2:	2001      	movs	r0, #1
}
 80084a4:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80084a6:	2002      	movs	r0, #2
 80084a8:	e7f0      	b.n	800848c <HAL_PCD_EP_ClrStall+0x58>

080084aa <HAL_PCDEx_PMAConfig>:
>>>>>>> render
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
<<<<<<< HEAD
 80085d2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80085d6:	d00b      	beq.n	80085f0 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80085d8:	f001 0107 	and.w	r1, r1, #7
 80085dc:	3101      	adds	r1, #1
 80085de:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80085e2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
=======
 80084aa:	f011 0f80 	tst.w	r1, #128	; 0x80
 80084ae:	d00b      	beq.n	80084c8 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084b0:	f001 0107 	and.w	r1, r1, #7
 80084b4:	3101      	adds	r1, #1
 80084b6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80084ba:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
>>>>>>> render
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
<<<<<<< HEAD
 80085e6:	b952      	cbnz	r2, 80085fe <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80085e8:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80085ea:	80cb      	strh	r3, [r1, #6]
=======
 80084be:	b952      	cbnz	r2, 80084d6 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80084c0:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80084c2:	80cb      	strh	r3, [r1, #6]
>>>>>>> render
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
<<<<<<< HEAD
 80085ec:	2000      	movs	r0, #0
 80085ee:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 80085f0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80085f4:	00c9      	lsls	r1, r1, #3
 80085f6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80085fa:	4401      	add	r1, r0
 80085fc:	e7f3      	b.n	80085e6 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 80085fe:	2201      	movs	r2, #1
 8008600:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008602:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008604:	0c1b      	lsrs	r3, r3, #16
 8008606:	814b      	strh	r3, [r1, #10]
 8008608:	e7f0      	b.n	80085ec <HAL_PCDEx_PMAConfig+0x1a>

0800860a <HAL_PCDEx_ActivateLPM>:
=======
 80084c4:	2000      	movs	r0, #0
 80084c6:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 80084c8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80084cc:	00c9      	lsls	r1, r1, #3
 80084ce:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80084d2:	4401      	add	r1, r0
 80084d4:	e7f3      	b.n	80084be <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 80084d6:	2201      	movs	r2, #1
 80084d8:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80084da:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80084dc:	0c1b      	lsrs	r3, r3, #16
 80084de:	814b      	strh	r3, [r1, #10]
 80084e0:	e7f0      	b.n	80084c4 <HAL_PCDEx_PMAConfig+0x1a>

080084e2 <HAL_PCDEx_ActivateLPM>:
>>>>>>> render
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 800860a:	4603      	mov	r3, r0

  USB_TypeDef *USBx = hpcd->Instance;
 800860c:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 800860e:	2101      	movs	r1, #1
 8008610:	f8c0 12e8 	str.w	r1, [r0, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8008614:	2000      	movs	r0, #0
 8008616:	f883 02e0 	strb.w	r0, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800861a:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 800861e:	b29b      	uxth	r3, r3
 8008620:	430b      	orrs	r3, r1
 8008622:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008626:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 800862a:	b29b      	uxth	r3, r3
 800862c:	f043 0302 	orr.w	r3, r3, #2
 8008630:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8008634:	4770      	bx	lr
	...

08008638 <HAL_PWREx_ControlVoltageScaling>:
=======
 80084e2:	4603      	mov	r3, r0

  USB_TypeDef *USBx = hpcd->Instance;
 80084e4:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 80084e6:	2101      	movs	r1, #1
 80084e8:	f8c0 12e8 	str.w	r1, [r0, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80084ec:	2000      	movs	r0, #0
 80084ee:	f883 02e0 	strb.w	r0, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80084f2:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	430b      	orrs	r3, r1
 80084fa:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80084fe:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8008502:	b29b      	uxth	r3, r3
 8008504:	f043 0302 	orr.w	r3, r3, #2
 8008508:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 800850c:	4770      	bx	lr
	...

08008510 <HAL_PWREx_ControlVoltageScaling>:
>>>>>>> render
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
<<<<<<< HEAD
 8008638:	2800      	cmp	r0, #0
 800863a:	d136      	bne.n	80086aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800863c:	4b3e      	ldr	r3, [pc, #248]	; (8008738 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008648:	d008      	beq.n	800865c <HAL_PWREx_ControlVoltageScaling+0x24>
=======
 8008510:	2800      	cmp	r0, #0
 8008512:	d136      	bne.n	8008582 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008514:	4b3e      	ldr	r3, [pc, #248]	; (8008610 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800851c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008520:	d008      	beq.n	8008534 <HAL_PWREx_ControlVoltageScaling+0x24>
>>>>>>> render
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
<<<<<<< HEAD
 800864a:	4a3b      	ldr	r2, [pc, #236]	; (8008738 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800864c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8008650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008654:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
=======
 8008522:	4a3b      	ldr	r2, [pc, #236]	; (8008610 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8008524:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8008528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800852c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
>>>>>>> render
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
<<<<<<< HEAD
 8008658:	2000      	movs	r0, #0
 800865a:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800865c:	4a36      	ldr	r2, [pc, #216]	; (8008738 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800865e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8008662:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008666:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800866a:	6813      	ldr	r3, [r2, #0]
 800866c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008670:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008674:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008676:	4b31      	ldr	r3, [pc, #196]	; (800873c <HAL_PWREx_ControlVoltageScaling+0x104>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2232      	movs	r2, #50	; 0x32
 800867c:	fb02 f303 	mul.w	r3, r2, r3
 8008680:	4a2f      	ldr	r2, [pc, #188]	; (8008740 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8008682:	fba2 2303 	umull	r2, r3, r2, r3
 8008686:	0c9b      	lsrs	r3, r3, #18
 8008688:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800868a:	e000      	b.n	800868e <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 800868c:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800868e:	4a2a      	ldr	r2, [pc, #168]	; (8008738 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8008690:	6952      	ldr	r2, [r2, #20]
 8008692:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8008696:	d001      	beq.n	800869c <HAL_PWREx_ControlVoltageScaling+0x64>
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1f7      	bne.n	800868c <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800869c:	4b26      	ldr	r3, [pc, #152]	; (8008738 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800869e:	695b      	ldr	r3, [r3, #20]
 80086a0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80086a4:	d144      	bne.n	8008730 <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 80086a6:	2000      	movs	r0, #0
 80086a8:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80086aa:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80086ae:	d008      	beq.n	80086c2 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80086b0:	4a21      	ldr	r2, [pc, #132]	; (8008738 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80086b2:	6813      	ldr	r3, [r2, #0]
 80086b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80086b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80086bc:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80086be:	2000      	movs	r0, #0
 80086c0:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80086c2:	4b1d      	ldr	r3, [pc, #116]	; (8008738 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80086ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086ce:	d008      	beq.n	80086e2 <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80086d0:	4a19      	ldr	r2, [pc, #100]	; (8008738 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80086d2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80086d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086da:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 80086de:	2000      	movs	r0, #0
 80086e0:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80086e2:	4a15      	ldr	r2, [pc, #84]	; (8008738 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80086e4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80086e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80086f0:	6813      	ldr	r3, [r2, #0]
 80086f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80086f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80086fa:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80086fc:	4b0f      	ldr	r3, [pc, #60]	; (800873c <HAL_PWREx_ControlVoltageScaling+0x104>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2232      	movs	r2, #50	; 0x32
 8008702:	fb02 f303 	mul.w	r3, r2, r3
 8008706:	4a0e      	ldr	r2, [pc, #56]	; (8008740 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8008708:	fba2 2303 	umull	r2, r3, r2, r3
 800870c:	0c9b      	lsrs	r3, r3, #18
 800870e:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008710:	e000      	b.n	8008714 <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 8008712:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008714:	4a08      	ldr	r2, [pc, #32]	; (8008738 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8008716:	6952      	ldr	r2, [r2, #20]
 8008718:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800871c:	d001      	beq.n	8008722 <HAL_PWREx_ControlVoltageScaling+0xea>
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1f7      	bne.n	8008712 <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008722:	4b05      	ldr	r3, [pc, #20]	; (8008738 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800872a:	d103      	bne.n	8008734 <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 800872c:	2000      	movs	r0, #0
 800872e:	4770      	bx	lr
        return HAL_TIMEOUT;
 8008730:	2003      	movs	r0, #3
 8008732:	4770      	bx	lr
        return HAL_TIMEOUT;
 8008734:	2003      	movs	r0, #3
}
 8008736:	4770      	bx	lr
 8008738:	40007000 	.word	0x40007000
 800873c:	20000058 	.word	0x20000058
 8008740:	431bde83 	.word	0x431bde83

08008744 <HAL_PWREx_DisableUCPDDeadBattery>:
=======
 8008530:	2000      	movs	r0, #0
 8008532:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008534:	4a36      	ldr	r2, [pc, #216]	; (8008610 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8008536:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800853a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800853e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008542:	6813      	ldr	r3, [r2, #0]
 8008544:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008548:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800854c:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800854e:	4b31      	ldr	r3, [pc, #196]	; (8008614 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2232      	movs	r2, #50	; 0x32
 8008554:	fb02 f303 	mul.w	r3, r2, r3
 8008558:	4a2f      	ldr	r2, [pc, #188]	; (8008618 <HAL_PWREx_ControlVoltageScaling+0x108>)
 800855a:	fba2 2303 	umull	r2, r3, r2, r3
 800855e:	0c9b      	lsrs	r3, r3, #18
 8008560:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008562:	e000      	b.n	8008566 <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 8008564:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008566:	4a2a      	ldr	r2, [pc, #168]	; (8008610 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8008568:	6952      	ldr	r2, [r2, #20]
 800856a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800856e:	d001      	beq.n	8008574 <HAL_PWREx_ControlVoltageScaling+0x64>
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1f7      	bne.n	8008564 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008574:	4b26      	ldr	r3, [pc, #152]	; (8008610 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8008576:	695b      	ldr	r3, [r3, #20]
 8008578:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800857c:	d144      	bne.n	8008608 <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 800857e:	2000      	movs	r0, #0
 8008580:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008582:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8008586:	d008      	beq.n	800859a <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008588:	4a21      	ldr	r2, [pc, #132]	; (8008610 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800858a:	6813      	ldr	r3, [r2, #0]
 800858c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008590:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008594:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8008596:	2000      	movs	r0, #0
 8008598:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800859a:	4b1d      	ldr	r3, [pc, #116]	; (8008610 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80085a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085a6:	d008      	beq.n	80085ba <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80085a8:	4a19      	ldr	r2, [pc, #100]	; (8008610 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80085aa:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80085ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085b2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 80085b6:	2000      	movs	r0, #0
 80085b8:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80085ba:	4a15      	ldr	r2, [pc, #84]	; (8008610 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80085bc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80085c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80085c8:	6813      	ldr	r3, [r2, #0]
 80085ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80085ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80085d2:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80085d4:	4b0f      	ldr	r3, [pc, #60]	; (8008614 <HAL_PWREx_ControlVoltageScaling+0x104>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2232      	movs	r2, #50	; 0x32
 80085da:	fb02 f303 	mul.w	r3, r2, r3
 80085de:	4a0e      	ldr	r2, [pc, #56]	; (8008618 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80085e0:	fba2 2303 	umull	r2, r3, r2, r3
 80085e4:	0c9b      	lsrs	r3, r3, #18
 80085e6:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80085e8:	e000      	b.n	80085ec <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 80085ea:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80085ec:	4a08      	ldr	r2, [pc, #32]	; (8008610 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80085ee:	6952      	ldr	r2, [r2, #20]
 80085f0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80085f4:	d001      	beq.n	80085fa <HAL_PWREx_ControlVoltageScaling+0xea>
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1f7      	bne.n	80085ea <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80085fa:	4b05      	ldr	r3, [pc, #20]	; (8008610 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80085fc:	695b      	ldr	r3, [r3, #20]
 80085fe:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008602:	d103      	bne.n	800860c <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 8008604:	2000      	movs	r0, #0
 8008606:	4770      	bx	lr
        return HAL_TIMEOUT;
 8008608:	2003      	movs	r0, #3
 800860a:	4770      	bx	lr
        return HAL_TIMEOUT;
 800860c:	2003      	movs	r0, #3
}
 800860e:	4770      	bx	lr
 8008610:	40007000 	.word	0x40007000
 8008614:	20001048 	.word	0x20001048
 8008618:	431bde83 	.word	0x431bde83

0800861c <HAL_PWREx_DisableUCPDDeadBattery>:
>>>>>>> render
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
<<<<<<< HEAD
 8008744:	4a02      	ldr	r2, [pc, #8]	; (8008750 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8008746:	6893      	ldr	r3, [r2, #8]
 8008748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800874c:	6093      	str	r3, [r2, #8]
}
 800874e:	4770      	bx	lr
 8008750:	40007000 	.word	0x40007000

08008754 <QSPI_WaitFlagStateUntilTimeout>:
=======
 800861c:	4a02      	ldr	r2, [pc, #8]	; (8008628 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800861e:	6893      	ldr	r3, [r2, #8]
 8008620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008624:	6093      	str	r3, [r2, #8]
}
 8008626:	4770      	bx	lr
 8008628:	40007000 	.word	0x40007000

0800862c <QSPI_WaitFlagStateUntilTimeout>:
>>>>>>> render
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 8008754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008758:	4605      	mov	r5, r0
 800875a:	460f      	mov	r7, r1
 800875c:	4616      	mov	r6, r2
 800875e:	4699      	mov	r9, r3
 8008760:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008764:	682c      	ldr	r4, [r5, #0]
 8008766:	68a4      	ldr	r4, [r4, #8]
 8008768:	423c      	tst	r4, r7
 800876a:	bf14      	ite	ne
 800876c:	f04f 0c01 	movne.w	ip, #1
 8008770:	f04f 0c00 	moveq.w	ip, #0
 8008774:	45b4      	cmp	ip, r6
 8008776:	d014      	beq.n	80087a2 <QSPI_WaitFlagStateUntilTimeout+0x4e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008778:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800877c:	d0f2      	beq.n	8008764 <QSPI_WaitFlagStateUntilTimeout+0x10>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800877e:	f7fc fefb 	bl	8005578 <HAL_GetTick>
 8008782:	eba0 0009 	sub.w	r0, r0, r9
 8008786:	4540      	cmp	r0, r8
 8008788:	d802      	bhi.n	8008790 <QSPI_WaitFlagStateUntilTimeout+0x3c>
 800878a:	f1b8 0f00 	cmp.w	r8, #0
 800878e:	d1e9      	bne.n	8008764 <QSPI_WaitFlagStateUntilTimeout+0x10>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008790:	2304      	movs	r3, #4
 8008792:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008796:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8008798:	f043 0301 	orr.w	r3, r3, #1
 800879c:	646b      	str	r3, [r5, #68]	; 0x44

        return HAL_ERROR;
 800879e:	2001      	movs	r0, #1
 80087a0:	e000      	b.n	80087a4 <QSPI_WaitFlagStateUntilTimeout+0x50>
=======
 800862c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008630:	4605      	mov	r5, r0
 8008632:	460f      	mov	r7, r1
 8008634:	4616      	mov	r6, r2
 8008636:	4699      	mov	r9, r3
 8008638:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800863c:	682c      	ldr	r4, [r5, #0]
 800863e:	68a4      	ldr	r4, [r4, #8]
 8008640:	423c      	tst	r4, r7
 8008642:	bf14      	ite	ne
 8008644:	f04f 0c01 	movne.w	ip, #1
 8008648:	f04f 0c00 	moveq.w	ip, #0
 800864c:	45b4      	cmp	ip, r6
 800864e:	d014      	beq.n	800867a <QSPI_WaitFlagStateUntilTimeout+0x4e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008650:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8008654:	d0f2      	beq.n	800863c <QSPI_WaitFlagStateUntilTimeout+0x10>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008656:	f7fc fefb 	bl	8005450 <HAL_GetTick>
 800865a:	eba0 0009 	sub.w	r0, r0, r9
 800865e:	4540      	cmp	r0, r8
 8008660:	d802      	bhi.n	8008668 <QSPI_WaitFlagStateUntilTimeout+0x3c>
 8008662:	f1b8 0f00 	cmp.w	r8, #0
 8008666:	d1e9      	bne.n	800863c <QSPI_WaitFlagStateUntilTimeout+0x10>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008668:	2304      	movs	r3, #4
 800866a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800866e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8008670:	f043 0301 	orr.w	r3, r3, #1
 8008674:	646b      	str	r3, [r5, #68]	; 0x44

        return HAL_ERROR;
 8008676:	2001      	movs	r0, #1
 8008678:	e000      	b.n	800867c <QSPI_WaitFlagStateUntilTimeout+0x50>
>>>>>>> render
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 80087a2:	2000      	movs	r0, #0
}
 80087a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080087a8 <HAL_QSPI_SetTimeout>:
  hqspi->Timeout = Timeout;
 80087a8:	6481      	str	r1, [r0, #72]	; 0x48
}
 80087aa:	4770      	bx	lr

080087ac <HAL_QSPI_Init>:
{
 80087ac:	b570      	push	{r4, r5, r6, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80087b2:	f7fc fee1 	bl	8005578 <HAL_GetTick>
  if(hqspi == NULL)
 80087b6:	2c00      	cmp	r4, #0
 80087b8:	d04c      	beq.n	8008854 <HAL_QSPI_Init+0xa8>
 80087ba:	4606      	mov	r6, r0
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80087bc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d03c      	beq.n	800883e <HAL_QSPI_Init+0x92>
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80087c4:	6825      	ldr	r5, [r4, #0]
 80087c6:	682a      	ldr	r2, [r5, #0]
 80087c8:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80087cc:	68a1      	ldr	r1, [r4, #8]
 80087ce:	3901      	subs	r1, #1
 80087d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80087d4:	602a      	str	r2, [r5, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80087d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	4633      	mov	r3, r6
 80087dc:	2200      	movs	r2, #0
 80087de:	2120      	movs	r1, #32
 80087e0:	4620      	mov	r0, r4
 80087e2:	f7ff ffb7 	bl	8008754 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 80087e6:	bb28      	cbnz	r0, 8008834 <HAL_QSPI_Init+0x88>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80087e8:	6821      	ldr	r1, [r4, #0]
 80087ea:	680b      	ldr	r3, [r1, #0]
 80087ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80087f0:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80087f4:	6865      	ldr	r5, [r4, #4]
 80087f6:	68e2      	ldr	r2, [r4, #12]
 80087f8:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 80087fc:	69e5      	ldr	r5, [r4, #28]
 80087fe:	432a      	orrs	r2, r5
 8008800:	6a25      	ldr	r5, [r4, #32]
 8008802:	432a      	orrs	r2, r5
 8008804:	4313      	orrs	r3, r2
 8008806:	600b      	str	r3, [r1, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008808:	6821      	ldr	r1, [r4, #0]
 800880a:	684a      	ldr	r2, [r1, #4]
 800880c:	4b12      	ldr	r3, [pc, #72]	; (8008858 <HAL_QSPI_Init+0xac>)
 800880e:	4013      	ands	r3, r2
 8008810:	6925      	ldr	r5, [r4, #16]
 8008812:	6962      	ldr	r2, [r4, #20]
 8008814:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8008818:	69a5      	ldr	r5, [r4, #24]
 800881a:	432a      	orrs	r2, r5
 800881c:	4313      	orrs	r3, r2
 800881e:	604b      	str	r3, [r1, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8008820:	6822      	ldr	r2, [r4, #0]
 8008822:	6813      	ldr	r3, [r2, #0]
 8008824:	f043 0301 	orr.w	r3, r3, #1
 8008828:	6013      	str	r3, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800882a:	2300      	movs	r3, #0
 800882c:	6463      	str	r3, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800882e:	2301      	movs	r3, #1
 8008830:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8008834:	2300      	movs	r3, #0
 8008836:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800883a:	b002      	add	sp, #8
 800883c:	bd70      	pop	{r4, r5, r6, pc}
    hqspi->Lock = HAL_UNLOCKED;
 800883e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8008842:	4620      	mov	r0, r4
 8008844:	f7fa f8b8 	bl	80029b8 <HAL_QSPI_MspInit>
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008848:	f241 3188 	movw	r1, #5000	; 0x1388
 800884c:	4620      	mov	r0, r4
 800884e:	f7ff ffab 	bl	80087a8 <HAL_QSPI_SetTimeout>
 8008852:	e7b7      	b.n	80087c4 <HAL_QSPI_Init+0x18>
    return HAL_ERROR;
 8008854:	2001      	movs	r0, #1
 8008856:	e7f0      	b.n	800883a <HAL_QSPI_Init+0x8e>
 8008858:	ffe0f8fe 	.word	0xffe0f8fe

0800885c <RCC_GetSysClockFreqFromPLLSource>:
=======
 800867a:	2000      	movs	r0, #0
}
 800867c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008680 <HAL_QSPI_SetTimeout>:
  hqspi->Timeout = Timeout;
 8008680:	6481      	str	r1, [r0, #72]	; 0x48
}
 8008682:	4770      	bx	lr

08008684 <HAL_QSPI_Init>:
{
 8008684:	b570      	push	{r4, r5, r6, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800868a:	f7fc fee1 	bl	8005450 <HAL_GetTick>
  if(hqspi == NULL)
 800868e:	2c00      	cmp	r4, #0
 8008690:	d04c      	beq.n	800872c <HAL_QSPI_Init+0xa8>
 8008692:	4606      	mov	r6, r0
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008694:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008698:	2b00      	cmp	r3, #0
 800869a:	d03c      	beq.n	8008716 <HAL_QSPI_Init+0x92>
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800869c:	6825      	ldr	r5, [r4, #0]
 800869e:	682a      	ldr	r2, [r5, #0]
 80086a0:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80086a4:	68a1      	ldr	r1, [r4, #8]
 80086a6:	3901      	subs	r1, #1
 80086a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80086ac:	602a      	str	r2, [r5, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80086ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80086b0:	9300      	str	r3, [sp, #0]
 80086b2:	4633      	mov	r3, r6
 80086b4:	2200      	movs	r2, #0
 80086b6:	2120      	movs	r1, #32
 80086b8:	4620      	mov	r0, r4
 80086ba:	f7ff ffb7 	bl	800862c <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 80086be:	bb28      	cbnz	r0, 800870c <HAL_QSPI_Init+0x88>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80086c0:	6821      	ldr	r1, [r4, #0]
 80086c2:	680b      	ldr	r3, [r1, #0]
 80086c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80086c8:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80086cc:	6865      	ldr	r5, [r4, #4]
 80086ce:	68e2      	ldr	r2, [r4, #12]
 80086d0:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 80086d4:	69e5      	ldr	r5, [r4, #28]
 80086d6:	432a      	orrs	r2, r5
 80086d8:	6a25      	ldr	r5, [r4, #32]
 80086da:	432a      	orrs	r2, r5
 80086dc:	4313      	orrs	r3, r2
 80086de:	600b      	str	r3, [r1, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80086e0:	6821      	ldr	r1, [r4, #0]
 80086e2:	684a      	ldr	r2, [r1, #4]
 80086e4:	4b12      	ldr	r3, [pc, #72]	; (8008730 <HAL_QSPI_Init+0xac>)
 80086e6:	4013      	ands	r3, r2
 80086e8:	6925      	ldr	r5, [r4, #16]
 80086ea:	6962      	ldr	r2, [r4, #20]
 80086ec:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80086f0:	69a5      	ldr	r5, [r4, #24]
 80086f2:	432a      	orrs	r2, r5
 80086f4:	4313      	orrs	r3, r2
 80086f6:	604b      	str	r3, [r1, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80086f8:	6822      	ldr	r2, [r4, #0]
 80086fa:	6813      	ldr	r3, [r2, #0]
 80086fc:	f043 0301 	orr.w	r3, r3, #1
 8008700:	6013      	str	r3, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008702:	2300      	movs	r3, #0
 8008704:	6463      	str	r3, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8008706:	2301      	movs	r3, #1
 8008708:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800870c:	2300      	movs	r3, #0
 800870e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8008712:	b002      	add	sp, #8
 8008714:	bd70      	pop	{r4, r5, r6, pc}
    hqspi->Lock = HAL_UNLOCKED;
 8008716:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 800871a:	4620      	mov	r0, r4
 800871c:	f7fa f948 	bl	80029b0 <HAL_QSPI_MspInit>
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008720:	f241 3188 	movw	r1, #5000	; 0x1388
 8008724:	4620      	mov	r0, r4
 8008726:	f7ff ffab 	bl	8008680 <HAL_QSPI_SetTimeout>
 800872a:	e7b7      	b.n	800869c <HAL_QSPI_Init+0x18>
    return HAL_ERROR;
 800872c:	2001      	movs	r0, #1
 800872e:	e7f0      	b.n	8008712 <HAL_QSPI_Init+0x8e>
 8008730:	ffe0f8fe 	.word	0xffe0f8fe

08008734 <RCC_GetSysClockFreqFromPLLSource>:
>>>>>>> render
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
<<<<<<< HEAD
 800885c:	4b12      	ldr	r3, [pc, #72]	; (80088a8 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 800885e:	68da      	ldr	r2, [r3, #12]
 8008860:	f002 0203 	and.w	r2, r2, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008864:	68d8      	ldr	r0, [r3, #12]
 8008866:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800886a:	1c43      	adds	r3, r0, #1

  switch (pllsource)
 800886c:	2a03      	cmp	r2, #3
 800886e:	d011      	beq.n	8008894 <RCC_GetSysClockFreqFromPLLSource+0x38>
=======
 8008734:	4b12      	ldr	r3, [pc, #72]	; (8008780 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8008736:	68da      	ldr	r2, [r3, #12]
 8008738:	f002 0203 	and.w	r2, r2, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800873c:	68d8      	ldr	r0, [r3, #12]
 800873e:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8008742:	1c43      	adds	r3, r0, #1

  switch (pllsource)
 8008744:	2a03      	cmp	r2, #3
 8008746:	d011      	beq.n	800876c <RCC_GetSysClockFreqFromPLLSource+0x38>
>>>>>>> render
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
<<<<<<< HEAD
 8008870:	480e      	ldr	r0, [pc, #56]	; (80088ac <RCC_GetSysClockFreqFromPLLSource+0x50>)
 8008872:	fbb0 f0f3 	udiv	r0, r0, r3
 8008876:	4b0c      	ldr	r3, [pc, #48]	; (80088a8 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800887e:	fb03 f000 	mul.w	r0, r3, r0
=======
 8008748:	480e      	ldr	r0, [pc, #56]	; (8008784 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 800874a:	fbb0 f0f3 	udiv	r0, r0, r3
 800874e:	4b0c      	ldr	r3, [pc, #48]	; (8008780 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8008756:	fb03 f000 	mul.w	r0, r3, r0
>>>>>>> render
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
<<<<<<< HEAD
 8008882:	4b09      	ldr	r3, [pc, #36]	; (80088a8 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800888a:	3301      	adds	r3, #1
 800888c:	005b      	lsls	r3, r3, #1
=======
 800875a:	4b09      	ldr	r3, [pc, #36]	; (8008780 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8008762:	3301      	adds	r3, #1
 8008764:	005b      	lsls	r3, r3, #1
>>>>>>> render
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
<<<<<<< HEAD
 800888e:	fbb0 f0f3 	udiv	r0, r0, r3
 8008892:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008894:	4806      	ldr	r0, [pc, #24]	; (80088b0 <RCC_GetSysClockFreqFromPLLSource+0x54>)
 8008896:	fbb0 f0f3 	udiv	r0, r0, r3
 800889a:	4b03      	ldr	r3, [pc, #12]	; (80088a8 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80088a2:	fb03 f000 	mul.w	r0, r3, r0
    break;
 80088a6:	e7ec      	b.n	8008882 <RCC_GetSysClockFreqFromPLLSource+0x26>
 80088a8:	40021000 	.word	0x40021000
 80088ac:	00f42400 	.word	0x00f42400
 80088b0:	007a1200 	.word	0x007a1200

080088b4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80088b4:	2800      	cmp	r0, #0
 80088b6:	f000 8254 	beq.w	8008d62 <HAL_RCC_OscConfig+0x4ae>
{
 80088ba:	b570      	push	{r4, r5, r6, lr}
 80088bc:	b082      	sub	sp, #8
 80088be:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088c0:	6803      	ldr	r3, [r0, #0]
 80088c2:	f013 0f01 	tst.w	r3, #1
 80088c6:	d037      	beq.n	8008938 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088c8:	4aa4      	ldr	r2, [pc, #656]	; (8008b5c <HAL_RCC_OscConfig+0x2a8>)
 80088ca:	6893      	ldr	r3, [r2, #8]
 80088cc:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80088d0:	68d2      	ldr	r2, [r2, #12]
 80088d2:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80088d6:	2b0c      	cmp	r3, #12
 80088d8:	d023      	beq.n	8008922 <HAL_RCC_OscConfig+0x6e>
 80088da:	2b08      	cmp	r3, #8
 80088dc:	d023      	beq.n	8008926 <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088de:	6863      	ldr	r3, [r4, #4]
 80088e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088e4:	d04e      	beq.n	8008984 <HAL_RCC_OscConfig+0xd0>
 80088e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088ea:	d051      	beq.n	8008990 <HAL_RCC_OscConfig+0xdc>
 80088ec:	4b9b      	ldr	r3, [pc, #620]	; (8008b5c <HAL_RCC_OscConfig+0x2a8>)
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80088f4:	601a      	str	r2, [r3, #0]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80088fc:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80088fe:	6863      	ldr	r3, [r4, #4]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d052      	beq.n	80089aa <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
 8008904:	f7fc fe38 	bl	8005578 <HAL_GetTick>
 8008908:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800890a:	4b94      	ldr	r3, [pc, #592]	; (8008b5c <HAL_RCC_OscConfig+0x2a8>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008912:	d111      	bne.n	8008938 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008914:	f7fc fe30 	bl	8005578 <HAL_GetTick>
 8008918:	1b40      	subs	r0, r0, r5
 800891a:	2864      	cmp	r0, #100	; 0x64
 800891c:	d9f5      	bls.n	800890a <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 800891e:	2003      	movs	r0, #3
 8008920:	e228      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008922:	2a03      	cmp	r2, #3
 8008924:	d1d9      	bne.n	80088da <HAL_RCC_OscConfig+0x26>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008926:	4b8d      	ldr	r3, [pc, #564]	; (8008b5c <HAL_RCC_OscConfig+0x2a8>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800892e:	d003      	beq.n	8008938 <HAL_RCC_OscConfig+0x84>
 8008930:	6863      	ldr	r3, [r4, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	f000 8217 	beq.w	8008d66 <HAL_RCC_OscConfig+0x4b2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	f013 0f02 	tst.w	r3, #2
 800893e:	d05d      	beq.n	80089fc <HAL_RCC_OscConfig+0x148>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008940:	4a86      	ldr	r2, [pc, #536]	; (8008b5c <HAL_RCC_OscConfig+0x2a8>)
 8008942:	6893      	ldr	r3, [r2, #8]
 8008944:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008948:	68d2      	ldr	r2, [r2, #12]
 800894a:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800894e:	2b0c      	cmp	r3, #12
 8008950:	d03a      	beq.n	80089c8 <HAL_RCC_OscConfig+0x114>
 8008952:	2b04      	cmp	r3, #4
 8008954:	d03a      	beq.n	80089cc <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008956:	68e3      	ldr	r3, [r4, #12]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d075      	beq.n	8008a48 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 800895c:	4a7f      	ldr	r2, [pc, #508]	; (8008b5c <HAL_RCC_OscConfig+0x2a8>)
 800895e:	6813      	ldr	r3, [r2, #0]
 8008960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008964:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008966:	f7fc fe07 	bl	8005578 <HAL_GetTick>
 800896a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800896c:	4b7b      	ldr	r3, [pc, #492]	; (8008b5c <HAL_RCC_OscConfig+0x2a8>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008974:	d15f      	bne.n	8008a36 <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008976:	f7fc fdff 	bl	8005578 <HAL_GetTick>
 800897a:	1b40      	subs	r0, r0, r5
 800897c:	2802      	cmp	r0, #2
 800897e:	d9f5      	bls.n	800896c <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
 8008980:	2003      	movs	r0, #3
 8008982:	e1f7      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008984:	4a75      	ldr	r2, [pc, #468]	; (8008b5c <HAL_RCC_OscConfig+0x2a8>)
 8008986:	6813      	ldr	r3, [r2, #0]
 8008988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800898c:	6013      	str	r3, [r2, #0]
 800898e:	e7b6      	b.n	80088fe <HAL_RCC_OscConfig+0x4a>
 8008990:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008994:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80089a6:	601a      	str	r2, [r3, #0]
 80089a8:	e7a9      	b.n	80088fe <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 80089aa:	f7fc fde5 	bl	8005578 <HAL_GetTick>
 80089ae:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80089b0:	4b6a      	ldr	r3, [pc, #424]	; (8008b5c <HAL_RCC_OscConfig+0x2a8>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80089b8:	d0be      	beq.n	8008938 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089ba:	f7fc fddd 	bl	8005578 <HAL_GetTick>
 80089be:	1b40      	subs	r0, r0, r5
 80089c0:	2864      	cmp	r0, #100	; 0x64
 80089c2:	d9f5      	bls.n	80089b0 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 80089c4:	2003      	movs	r0, #3
 80089c6:	e1d5      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80089c8:	2a02      	cmp	r2, #2
 80089ca:	d1c2      	bne.n	8008952 <HAL_RCC_OscConfig+0x9e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089cc:	4b63      	ldr	r3, [pc, #396]	; (8008b5c <HAL_RCC_OscConfig+0x2a8>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80089d4:	d003      	beq.n	80089de <HAL_RCC_OscConfig+0x12a>
 80089d6:	68e3      	ldr	r3, [r4, #12]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 81c6 	beq.w	8008d6a <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089de:	4a5f      	ldr	r2, [pc, #380]	; (8008b5c <HAL_RCC_OscConfig+0x2a8>)
 80089e0:	6853      	ldr	r3, [r2, #4]
 80089e2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80089e6:	6921      	ldr	r1, [r4, #16]
 80089e8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80089ec:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80089ee:	4b5c      	ldr	r3, [pc, #368]	; (8008b60 <HAL_RCC_OscConfig+0x2ac>)
 80089f0:	6818      	ldr	r0, [r3, #0]
 80089f2:	f7fc fd7d 	bl	80054f0 <HAL_InitTick>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	f040 81b9 	bne.w	8008d6e <HAL_RCC_OscConfig+0x4ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	f013 0f08 	tst.w	r3, #8
 8008a02:	d04c      	beq.n	8008a9e <HAL_RCC_OscConfig+0x1ea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008a04:	6963      	ldr	r3, [r4, #20]
 8008a06:	b39b      	cbz	r3, 8008a70 <HAL_RCC_OscConfig+0x1bc>
      __HAL_RCC_LSI_ENABLE();
 8008a08:	4a54      	ldr	r2, [pc, #336]	; (8008b5c <HAL_RCC_OscConfig+0x2a8>)
 8008a0a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8008a0e:	f043 0301 	orr.w	r3, r3, #1
 8008a12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8008a16:	f7fc fdaf 	bl	8005578 <HAL_GetTick>
 8008a1a:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008a1c:	4b4f      	ldr	r3, [pc, #316]	; (8008b5c <HAL_RCC_OscConfig+0x2a8>)
 8008a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a22:	f013 0f02 	tst.w	r3, #2
 8008a26:	d13a      	bne.n	8008a9e <HAL_RCC_OscConfig+0x1ea>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a28:	f7fc fda6 	bl	8005578 <HAL_GetTick>
 8008a2c:	1b40      	subs	r0, r0, r5
 8008a2e:	2802      	cmp	r0, #2
 8008a30:	d9f4      	bls.n	8008a1c <HAL_RCC_OscConfig+0x168>
          return HAL_TIMEOUT;
 8008a32:	2003      	movs	r0, #3
 8008a34:	e19e      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a36:	4a49      	ldr	r2, [pc, #292]	; (8008b5c <HAL_RCC_OscConfig+0x2a8>)
 8008a38:	6853      	ldr	r3, [r2, #4]
 8008a3a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008a3e:	6921      	ldr	r1, [r4, #16]
 8008a40:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008a44:	6053      	str	r3, [r2, #4]
 8008a46:	e7d9      	b.n	80089fc <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8008a48:	4a44      	ldr	r2, [pc, #272]	; (8008b5c <HAL_RCC_OscConfig+0x2a8>)
 8008a4a:	6813      	ldr	r3, [r2, #0]
 8008a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a50:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008a52:	f7fc fd91 	bl	8005578 <HAL_GetTick>
 8008a56:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008a58:	4b40      	ldr	r3, [pc, #256]	; (8008b5c <HAL_RCC_OscConfig+0x2a8>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008a60:	d0cc      	beq.n	80089fc <HAL_RCC_OscConfig+0x148>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a62:	f7fc fd89 	bl	8005578 <HAL_GetTick>
 8008a66:	1b40      	subs	r0, r0, r5
 8008a68:	2802      	cmp	r0, #2
 8008a6a:	d9f5      	bls.n	8008a58 <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 8008a6c:	2003      	movs	r0, #3
 8008a6e:	e181      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_LSI_DISABLE();
 8008a70:	4a3a      	ldr	r2, [pc, #232]	; (8008b5c <HAL_RCC_OscConfig+0x2a8>)
 8008a72:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8008a76:	f023 0301 	bic.w	r3, r3, #1
 8008a7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8008a7e:	f7fc fd7b 	bl	8005578 <HAL_GetTick>
 8008a82:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008a84:	4b35      	ldr	r3, [pc, #212]	; (8008b5c <HAL_RCC_OscConfig+0x2a8>)
 8008a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a8a:	f013 0f02 	tst.w	r3, #2
 8008a8e:	d006      	beq.n	8008a9e <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a90:	f7fc fd72 	bl	8005578 <HAL_GetTick>
 8008a94:	1b40      	subs	r0, r0, r5
 8008a96:	2802      	cmp	r0, #2
 8008a98:	d9f4      	bls.n	8008a84 <HAL_RCC_OscConfig+0x1d0>
          return HAL_TIMEOUT;
 8008a9a:	2003      	movs	r0, #3
 8008a9c:	e16a      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a9e:	6823      	ldr	r3, [r4, #0]
 8008aa0:	f013 0f04 	tst.w	r3, #4
 8008aa4:	f000 8081 	beq.w	8008baa <HAL_RCC_OscConfig+0x2f6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008aa8:	4b2c      	ldr	r3, [pc, #176]	; (8008b5c <HAL_RCC_OscConfig+0x2a8>)
 8008aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aac:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8008ab0:	d136      	bne.n	8008b20 <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ab2:	4b2a      	ldr	r3, [pc, #168]	; (8008b5c <HAL_RCC_OscConfig+0x2a8>)
 8008ab4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008ab6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008aba:	659a      	str	r2, [r3, #88]	; 0x58
 8008abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ac2:	9301      	str	r3, [sp, #4]
 8008ac4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008ac6:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ac8:	4b26      	ldr	r3, [pc, #152]	; (8008b64 <HAL_RCC_OscConfig+0x2b0>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008ad0:	d028      	beq.n	8008b24 <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ad2:	68a3      	ldr	r3, [r4, #8]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d039      	beq.n	8008b4c <HAL_RCC_OscConfig+0x298>
 8008ad8:	2b05      	cmp	r3, #5
 8008ada:	d045      	beq.n	8008b68 <HAL_RCC_OscConfig+0x2b4>
 8008adc:	4b1f      	ldr	r3, [pc, #124]	; (8008b5c <HAL_RCC_OscConfig+0x2a8>)
 8008ade:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008ae2:	f022 0201 	bic.w	r2, r2, #1
 8008ae6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8008aea:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008aee:	f022 0204 	bic.w	r2, r2, #4
 8008af2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008af6:	68a3      	ldr	r3, [r4, #8]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d043      	beq.n	8008b84 <HAL_RCC_OscConfig+0x2d0>
      tickstart = HAL_GetTick();
 8008afc:	f7fc fd3c 	bl	8005578 <HAL_GetTick>
 8008b00:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b02:	4b16      	ldr	r3, [pc, #88]	; (8008b5c <HAL_RCC_OscConfig+0x2a8>)
 8008b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b08:	f013 0f02 	tst.w	r3, #2
 8008b0c:	d14c      	bne.n	8008ba8 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b0e:	f7fc fd33 	bl	8005578 <HAL_GetTick>
 8008b12:	1b80      	subs	r0, r0, r6
 8008b14:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b18:	4298      	cmp	r0, r3
 8008b1a:	d9f2      	bls.n	8008b02 <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 8008b1c:	2003      	movs	r0, #3
 8008b1e:	e129      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
    FlagStatus       pwrclkchanged = RESET;
 8008b20:	2500      	movs	r5, #0
 8008b22:	e7d1      	b.n	8008ac8 <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b24:	4a0f      	ldr	r2, [pc, #60]	; (8008b64 <HAL_RCC_OscConfig+0x2b0>)
 8008b26:	6813      	ldr	r3, [r2, #0]
 8008b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b2c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8008b2e:	f7fc fd23 	bl	8005578 <HAL_GetTick>
 8008b32:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b34:	4b0b      	ldr	r3, [pc, #44]	; (8008b64 <HAL_RCC_OscConfig+0x2b0>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008b3c:	d1c9      	bne.n	8008ad2 <HAL_RCC_OscConfig+0x21e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b3e:	f7fc fd1b 	bl	8005578 <HAL_GetTick>
 8008b42:	1b80      	subs	r0, r0, r6
 8008b44:	2802      	cmp	r0, #2
 8008b46:	d9f5      	bls.n	8008b34 <HAL_RCC_OscConfig+0x280>
          return HAL_TIMEOUT;
 8008b48:	2003      	movs	r0, #3
 8008b4a:	e113      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b4c:	4a03      	ldr	r2, [pc, #12]	; (8008b5c <HAL_RCC_OscConfig+0x2a8>)
 8008b4e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008b52:	f043 0301 	orr.w	r3, r3, #1
 8008b56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008b5a:	e7cc      	b.n	8008af6 <HAL_RCC_OscConfig+0x242>
 8008b5c:	40021000 	.word	0x40021000
 8008b60:	2000010c 	.word	0x2000010c
 8008b64:	40007000 	.word	0x40007000
 8008b68:	4b8a      	ldr	r3, [pc, #552]	; (8008d94 <HAL_RCC_OscConfig+0x4e0>)
 8008b6a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008b6e:	f042 0204 	orr.w	r2, r2, #4
 8008b72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8008b76:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008b7a:	f042 0201 	orr.w	r2, r2, #1
 8008b7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8008b82:	e7b8      	b.n	8008af6 <HAL_RCC_OscConfig+0x242>
      tickstart = HAL_GetTick();
 8008b84:	f7fc fcf8 	bl	8005578 <HAL_GetTick>
 8008b88:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008b8a:	4b82      	ldr	r3, [pc, #520]	; (8008d94 <HAL_RCC_OscConfig+0x4e0>)
 8008b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b90:	f013 0f02 	tst.w	r3, #2
 8008b94:	d008      	beq.n	8008ba8 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b96:	f7fc fcef 	bl	8005578 <HAL_GetTick>
 8008b9a:	1b80      	subs	r0, r0, r6
 8008b9c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ba0:	4298      	cmp	r0, r3
 8008ba2:	d9f2      	bls.n	8008b8a <HAL_RCC_OscConfig+0x2d6>
          return HAL_TIMEOUT;
 8008ba4:	2003      	movs	r0, #3
 8008ba6:	e0e5      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
    if (pwrclkchanged == SET)
 8008ba8:	b9e5      	cbnz	r5, 8008be4 <HAL_RCC_OscConfig+0x330>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008baa:	6823      	ldr	r3, [r4, #0]
 8008bac:	f013 0f20 	tst.w	r3, #32
 8008bb0:	d035      	beq.n	8008c1e <HAL_RCC_OscConfig+0x36a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008bb2:	69a3      	ldr	r3, [r4, #24]
 8008bb4:	b1e3      	cbz	r3, 8008bf0 <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_HSI48_ENABLE();
 8008bb6:	4a77      	ldr	r2, [pc, #476]	; (8008d94 <HAL_RCC_OscConfig+0x4e0>)
 8008bb8:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8008bbc:	f043 0301 	orr.w	r3, r3, #1
 8008bc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8008bc4:	f7fc fcd8 	bl	8005578 <HAL_GetTick>
 8008bc8:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008bca:	4b72      	ldr	r3, [pc, #456]	; (8008d94 <HAL_RCC_OscConfig+0x4e0>)
 8008bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008bd0:	f013 0f02 	tst.w	r3, #2
 8008bd4:	d123      	bne.n	8008c1e <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008bd6:	f7fc fccf 	bl	8005578 <HAL_GetTick>
 8008bda:	1b40      	subs	r0, r0, r5
 8008bdc:	2802      	cmp	r0, #2
 8008bde:	d9f4      	bls.n	8008bca <HAL_RCC_OscConfig+0x316>
          return HAL_TIMEOUT;
 8008be0:	2003      	movs	r0, #3
 8008be2:	e0c7      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008be4:	4a6b      	ldr	r2, [pc, #428]	; (8008d94 <HAL_RCC_OscConfig+0x4e0>)
 8008be6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bec:	6593      	str	r3, [r2, #88]	; 0x58
 8008bee:	e7dc      	b.n	8008baa <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI48_DISABLE();
 8008bf0:	4a68      	ldr	r2, [pc, #416]	; (8008d94 <HAL_RCC_OscConfig+0x4e0>)
 8008bf2:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8008bf6:	f023 0301 	bic.w	r3, r3, #1
 8008bfa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8008bfe:	f7fc fcbb 	bl	8005578 <HAL_GetTick>
 8008c02:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008c04:	4b63      	ldr	r3, [pc, #396]	; (8008d94 <HAL_RCC_OscConfig+0x4e0>)
 8008c06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c0a:	f013 0f02 	tst.w	r3, #2
 8008c0e:	d006      	beq.n	8008c1e <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c10:	f7fc fcb2 	bl	8005578 <HAL_GetTick>
 8008c14:	1b40      	subs	r0, r0, r5
 8008c16:	2802      	cmp	r0, #2
 8008c18:	d9f4      	bls.n	8008c04 <HAL_RCC_OscConfig+0x350>
          return HAL_TIMEOUT;
 8008c1a:	2003      	movs	r0, #3
 8008c1c:	e0aa      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008c1e:	69e3      	ldr	r3, [r4, #28]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f000 80a6 	beq.w	8008d72 <HAL_RCC_OscConfig+0x4be>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008c26:	4a5b      	ldr	r2, [pc, #364]	; (8008d94 <HAL_RCC_OscConfig+0x4e0>)
 8008c28:	6892      	ldr	r2, [r2, #8]
 8008c2a:	f002 020c 	and.w	r2, r2, #12
 8008c2e:	2a0c      	cmp	r2, #12
 8008c30:	d069      	beq.n	8008d06 <HAL_RCC_OscConfig+0x452>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d01d      	beq.n	8008c72 <HAL_RCC_OscConfig+0x3be>
        __HAL_RCC_PLL_DISABLE();
 8008c36:	4b57      	ldr	r3, [pc, #348]	; (8008d94 <HAL_RCC_OscConfig+0x4e0>)
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008c3e:	601a      	str	r2, [r3, #0]
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008c40:	68da      	ldr	r2, [r3, #12]
 8008c42:	f022 0203 	bic.w	r2, r2, #3
 8008c46:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008c48:	68da      	ldr	r2, [r3, #12]
 8008c4a:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8008c4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008c52:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8008c54:	f7fc fc90 	bl	8005578 <HAL_GetTick>
 8008c58:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c5a:	4b4e      	ldr	r3, [pc, #312]	; (8008d94 <HAL_RCC_OscConfig+0x4e0>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008c62:	d04e      	beq.n	8008d02 <HAL_RCC_OscConfig+0x44e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c64:	f7fc fc88 	bl	8005578 <HAL_GetTick>
 8008c68:	1b00      	subs	r0, r0, r4
 8008c6a:	2802      	cmp	r0, #2
 8008c6c:	d9f5      	bls.n	8008c5a <HAL_RCC_OscConfig+0x3a6>
            return HAL_TIMEOUT;
 8008c6e:	2003      	movs	r0, #3
 8008c70:	e080      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_DISABLE();
 8008c72:	4a48      	ldr	r2, [pc, #288]	; (8008d94 <HAL_RCC_OscConfig+0x4e0>)
 8008c74:	6813      	ldr	r3, [r2, #0]
 8008c76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c7a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008c7c:	f7fc fc7c 	bl	8005578 <HAL_GetTick>
 8008c80:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c82:	4b44      	ldr	r3, [pc, #272]	; (8008d94 <HAL_RCC_OscConfig+0x4e0>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008c8a:	d006      	beq.n	8008c9a <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c8c:	f7fc fc74 	bl	8005578 <HAL_GetTick>
 8008c90:	1b40      	subs	r0, r0, r5
 8008c92:	2802      	cmp	r0, #2
 8008c94:	d9f5      	bls.n	8008c82 <HAL_RCC_OscConfig+0x3ce>
            return HAL_TIMEOUT;
 8008c96:	2003      	movs	r0, #3
 8008c98:	e06c      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c9a:	4a3e      	ldr	r2, [pc, #248]	; (8008d94 <HAL_RCC_OscConfig+0x4e0>)
 8008c9c:	68d3      	ldr	r3, [r2, #12]
 8008c9e:	493e      	ldr	r1, [pc, #248]	; (8008d98 <HAL_RCC_OscConfig+0x4e4>)
 8008ca0:	4019      	ands	r1, r3
 8008ca2:	6a23      	ldr	r3, [r4, #32]
 8008ca4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008ca6:	3801      	subs	r0, #1
 8008ca8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8008cac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008cae:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8008cb2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008cb4:	0840      	lsrs	r0, r0, #1
 8008cb6:	3801      	subs	r0, #1
 8008cb8:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8008cbc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008cbe:	0840      	lsrs	r0, r0, #1
 8008cc0:	3801      	subs	r0, #1
 8008cc2:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8008cc6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008cc8:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8008ccc:	430b      	orrs	r3, r1
 8008cce:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8008cd0:	6813      	ldr	r3, [r2, #0]
 8008cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008cd6:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008cd8:	68d3      	ldr	r3, [r2, #12]
 8008cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008cde:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8008ce0:	f7fc fc4a 	bl	8005578 <HAL_GetTick>
 8008ce4:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ce6:	4b2b      	ldr	r3, [pc, #172]	; (8008d94 <HAL_RCC_OscConfig+0x4e0>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008cee:	d106      	bne.n	8008cfe <HAL_RCC_OscConfig+0x44a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cf0:	f7fc fc42 	bl	8005578 <HAL_GetTick>
 8008cf4:	1b00      	subs	r0, r0, r4
 8008cf6:	2802      	cmp	r0, #2
 8008cf8:	d9f5      	bls.n	8008ce6 <HAL_RCC_OscConfig+0x432>
            return HAL_TIMEOUT;
 8008cfa:	2003      	movs	r0, #3
 8008cfc:	e03a      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 8008cfe:	2000      	movs	r0, #0
 8008d00:	e038      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
 8008d02:	2000      	movs	r0, #0
 8008d04:	e036      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d036      	beq.n	8008d78 <HAL_RCC_OscConfig+0x4c4>
      temp_pllckcfg = RCC->PLLCFGR;
 8008d0a:	4b22      	ldr	r3, [pc, #136]	; (8008d94 <HAL_RCC_OscConfig+0x4e0>)
 8008d0c:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d0e:	f003 0103 	and.w	r1, r3, #3
 8008d12:	6a22      	ldr	r2, [r4, #32]
 8008d14:	4291      	cmp	r1, r2
 8008d16:	d131      	bne.n	8008d7c <HAL_RCC_OscConfig+0x4c8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008d18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008d1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008d1e:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d20:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8008d24:	d12c      	bne.n	8008d80 <HAL_RCC_OscConfig+0x4cc>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008d26:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008d2a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008d2c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8008d30:	d128      	bne.n	8008d84 <HAL_RCC_OscConfig+0x4d0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008d32:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008d36:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008d38:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8008d3c:	d124      	bne.n	8008d88 <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008d3e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8008d42:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008d44:	0852      	lsrs	r2, r2, #1
 8008d46:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008d48:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8008d4c:	d11e      	bne.n	8008d8c <HAL_RCC_OscConfig+0x4d8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008d4e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8008d52:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008d54:	0852      	lsrs	r2, r2, #1
 8008d56:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008d58:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8008d5c:	d118      	bne.n	8008d90 <HAL_RCC_OscConfig+0x4dc>
  return HAL_OK;
 8008d5e:	2000      	movs	r0, #0
 8008d60:	e008      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
    return HAL_ERROR;
 8008d62:	2001      	movs	r0, #1
}
 8008d64:	4770      	bx	lr
        return HAL_ERROR;
 8008d66:	2001      	movs	r0, #1
 8008d68:	e004      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 8008d6a:	2001      	movs	r0, #1
 8008d6c:	e002      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
          return HAL_ERROR;
 8008d6e:	2001      	movs	r0, #1
 8008d70:	e000      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 8008d72:	2000      	movs	r0, #0
}
 8008d74:	b002      	add	sp, #8
 8008d76:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8008d78:	2001      	movs	r0, #1
 8008d7a:	e7fb      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 8008d7c:	2001      	movs	r0, #1
 8008d7e:	e7f9      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
 8008d80:	2001      	movs	r0, #1
 8008d82:	e7f7      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
 8008d84:	2001      	movs	r0, #1
 8008d86:	e7f5      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
 8008d88:	2001      	movs	r0, #1
 8008d8a:	e7f3      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
 8008d8c:	2001      	movs	r0, #1
 8008d8e:	e7f1      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
 8008d90:	2001      	movs	r0, #1
 8008d92:	e7ef      	b.n	8008d74 <HAL_RCC_OscConfig+0x4c0>
 8008d94:	40021000 	.word	0x40021000
 8008d98:	019f800c 	.word	0x019f800c

08008d9c <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008d9c:	4b1e      	ldr	r3, [pc, #120]	; (8008e18 <HAL_RCC_GetSysClockFreq+0x7c>)
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	f003 030c 	and.w	r3, r3, #12
 8008da4:	2b04      	cmp	r3, #4
 8008da6:	d033      	beq.n	8008e10 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008da8:	4b1b      	ldr	r3, [pc, #108]	; (8008e18 <HAL_RCC_GetSysClockFreq+0x7c>)
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	f003 030c 	and.w	r3, r3, #12
 8008db0:	2b08      	cmp	r3, #8
 8008db2:	d02f      	beq.n	8008e14 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008db4:	4b18      	ldr	r3, [pc, #96]	; (8008e18 <HAL_RCC_GetSysClockFreq+0x7c>)
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	f003 030c 	and.w	r3, r3, #12
 8008dbc:	2b0c      	cmp	r3, #12
 8008dbe:	d001      	beq.n	8008dc4 <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 8008dc0:	2000      	movs	r0, #0
}
 8008dc2:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008dc4:	4b14      	ldr	r3, [pc, #80]	; (8008e18 <HAL_RCC_GetSysClockFreq+0x7c>)
 8008dc6:	68da      	ldr	r2, [r3, #12]
 8008dc8:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008dcc:	68d8      	ldr	r0, [r3, #12]
 8008dce:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8008dd2:	1c43      	adds	r3, r0, #1
    switch (pllsource)
 8008dd4:	2a03      	cmp	r2, #3
 8008dd6:	d011      	beq.n	8008dfc <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008dd8:	4810      	ldr	r0, [pc, #64]	; (8008e1c <HAL_RCC_GetSysClockFreq+0x80>)
 8008dda:	fbb0 f0f3 	udiv	r0, r0, r3
 8008dde:	4b0e      	ldr	r3, [pc, #56]	; (8008e18 <HAL_RCC_GetSysClockFreq+0x7c>)
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8008de6:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008dea:	4b0b      	ldr	r3, [pc, #44]	; (8008e18 <HAL_RCC_GetSysClockFreq+0x7c>)
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8008df2:	3301      	adds	r3, #1
 8008df4:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8008df6:	fbb0 f0f3 	udiv	r0, r0, r3
 8008dfa:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008dfc:	4808      	ldr	r0, [pc, #32]	; (8008e20 <HAL_RCC_GetSysClockFreq+0x84>)
 8008dfe:	fbb0 f0f3 	udiv	r0, r0, r3
 8008e02:	4b05      	ldr	r3, [pc, #20]	; (8008e18 <HAL_RCC_GetSysClockFreq+0x7c>)
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8008e0a:	fb03 f000 	mul.w	r0, r3, r0
      break;
 8008e0e:	e7ec      	b.n	8008dea <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 8008e10:	4802      	ldr	r0, [pc, #8]	; (8008e1c <HAL_RCC_GetSysClockFreq+0x80>)
 8008e12:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8008e14:	4802      	ldr	r0, [pc, #8]	; (8008e20 <HAL_RCC_GetSysClockFreq+0x84>)
 8008e16:	4770      	bx	lr
 8008e18:	40021000 	.word	0x40021000
 8008e1c:	00f42400 	.word	0x00f42400
 8008e20:	007a1200 	.word	0x007a1200

08008e24 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8008e24:	2800      	cmp	r0, #0
 8008e26:	f000 80e6 	beq.w	8008ff6 <HAL_RCC_ClockConfig+0x1d2>
{
 8008e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008e30:	4b74      	ldr	r3, [pc, #464]	; (8009004 <HAL_RCC_ClockConfig+0x1e0>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 030f 	and.w	r3, r3, #15
 8008e38:	428b      	cmp	r3, r1
 8008e3a:	d20b      	bcs.n	8008e54 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e3c:	4a71      	ldr	r2, [pc, #452]	; (8009004 <HAL_RCC_ClockConfig+0x1e0>)
 8008e3e:	6813      	ldr	r3, [r2, #0]
 8008e40:	f023 030f 	bic.w	r3, r3, #15
 8008e44:	430b      	orrs	r3, r1
 8008e46:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e48:	6813      	ldr	r3, [r2, #0]
 8008e4a:	f003 030f 	and.w	r3, r3, #15
 8008e4e:	428b      	cmp	r3, r1
 8008e50:	f040 80d3 	bne.w	8008ffa <HAL_RCC_ClockConfig+0x1d6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e54:	682e      	ldr	r6, [r5, #0]
 8008e56:	f016 0601 	ands.w	r6, r6, #1
 8008e5a:	d05f      	beq.n	8008f1c <HAL_RCC_ClockConfig+0xf8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e5c:	686b      	ldr	r3, [r5, #4]
 8008e5e:	2b03      	cmp	r3, #3
 8008e60:	d02f      	beq.n	8008ec2 <HAL_RCC_ClockConfig+0x9e>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d04d      	beq.n	8008f02 <HAL_RCC_ClockConfig+0xde>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008e66:	4b68      	ldr	r3, [pc, #416]	; (8009008 <HAL_RCC_ClockConfig+0x1e4>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008e6e:	f000 80c6 	beq.w	8008ffe <HAL_RCC_ClockConfig+0x1da>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008e72:	f7ff ff93 	bl	8008d9c <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8008e76:	4b65      	ldr	r3, [pc, #404]	; (800900c <HAL_RCC_ClockConfig+0x1e8>)
 8008e78:	4298      	cmp	r0, r3
 8008e7a:	d94d      	bls.n	8008f18 <HAL_RCC_ClockConfig+0xf4>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008e7c:	4a62      	ldr	r2, [pc, #392]	; (8009008 <HAL_RCC_ClockConfig+0x1e4>)
 8008e7e:	6893      	ldr	r3, [r2, #8]
 8008e80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e88:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008e8a:	2680      	movs	r6, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008e8c:	4a5e      	ldr	r2, [pc, #376]	; (8009008 <HAL_RCC_ClockConfig+0x1e4>)
 8008e8e:	6893      	ldr	r3, [r2, #8]
 8008e90:	f023 0303 	bic.w	r3, r3, #3
 8008e94:	6869      	ldr	r1, [r5, #4]
 8008e96:	430b      	orrs	r3, r1
 8008e98:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8008e9a:	f7fc fb6d 	bl	8005578 <HAL_GetTick>
 8008e9e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ea0:	4b59      	ldr	r3, [pc, #356]	; (8009008 <HAL_RCC_ClockConfig+0x1e4>)
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	f003 030c 	and.w	r3, r3, #12
 8008ea8:	686a      	ldr	r2, [r5, #4]
 8008eaa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008eae:	d035      	beq.n	8008f1c <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008eb0:	f7fc fb62 	bl	8005578 <HAL_GetTick>
 8008eb4:	1bc0      	subs	r0, r0, r7
 8008eb6:	f241 3388 	movw	r3, #5000	; 0x1388
 8008eba:	4298      	cmp	r0, r3
 8008ebc:	d9f0      	bls.n	8008ea0 <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 8008ebe:	2003      	movs	r0, #3
 8008ec0:	e078      	b.n	8008fb4 <HAL_RCC_ClockConfig+0x190>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ec2:	4b51      	ldr	r3, [pc, #324]	; (8009008 <HAL_RCC_ClockConfig+0x1e4>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008eca:	d101      	bne.n	8008ed0 <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 8008ecc:	2001      	movs	r0, #1
 8008ece:	e071      	b.n	8008fb4 <HAL_RCC_ClockConfig+0x190>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008ed0:	f7ff fcc4 	bl	800885c <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 8008ed4:	4b4d      	ldr	r3, [pc, #308]	; (800900c <HAL_RCC_ClockConfig+0x1e8>)
 8008ed6:	4298      	cmp	r0, r3
 8008ed8:	d91a      	bls.n	8008f10 <HAL_RCC_ClockConfig+0xec>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008eda:	4b4b      	ldr	r3, [pc, #300]	; (8009008 <HAL_RCC_ClockConfig+0x1e4>)
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8008ee2:	d005      	beq.n	8008ef0 <HAL_RCC_ClockConfig+0xcc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008ee4:	682e      	ldr	r6, [r5, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008ee6:	f016 0602 	ands.w	r6, r6, #2
 8008eea:	d0cf      	beq.n	8008e8c <HAL_RCC_ClockConfig+0x68>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008eec:	68ab      	ldr	r3, [r5, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008eee:	b98b      	cbnz	r3, 8008f14 <HAL_RCC_ClockConfig+0xf0>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008ef0:	4a45      	ldr	r2, [pc, #276]	; (8009008 <HAL_RCC_ClockConfig+0x1e4>)
 8008ef2:	6893      	ldr	r3, [r2, #8]
 8008ef4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008efc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008efe:	2680      	movs	r6, #128	; 0x80
 8008f00:	e7c4      	b.n	8008e8c <HAL_RCC_ClockConfig+0x68>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f02:	4b41      	ldr	r3, [pc, #260]	; (8009008 <HAL_RCC_ClockConfig+0x1e4>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008f0a:	d1b2      	bne.n	8008e72 <HAL_RCC_ClockConfig+0x4e>
          return HAL_ERROR;
 8008f0c:	2001      	movs	r0, #1
 8008f0e:	e051      	b.n	8008fb4 <HAL_RCC_ClockConfig+0x190>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008f10:	2600      	movs	r6, #0
 8008f12:	e7bb      	b.n	8008e8c <HAL_RCC_ClockConfig+0x68>
 8008f14:	2600      	movs	r6, #0
 8008f16:	e7b9      	b.n	8008e8c <HAL_RCC_ClockConfig+0x68>
 8008f18:	2600      	movs	r6, #0
 8008f1a:	e7b7      	b.n	8008e8c <HAL_RCC_ClockConfig+0x68>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f1c:	682b      	ldr	r3, [r5, #0]
 8008f1e:	f013 0f02 	tst.w	r3, #2
 8008f22:	d048      	beq.n	8008fb6 <HAL_RCC_ClockConfig+0x192>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f24:	f013 0f04 	tst.w	r3, #4
 8008f28:	d004      	beq.n	8008f34 <HAL_RCC_ClockConfig+0x110>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008f2a:	4a37      	ldr	r2, [pc, #220]	; (8009008 <HAL_RCC_ClockConfig+0x1e4>)
 8008f2c:	6893      	ldr	r3, [r2, #8]
 8008f2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008f32:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f34:	682b      	ldr	r3, [r5, #0]
 8008f36:	f013 0f08 	tst.w	r3, #8
 8008f3a:	d006      	beq.n	8008f4a <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008f3c:	4a32      	ldr	r2, [pc, #200]	; (8009008 <HAL_RCC_ClockConfig+0x1e4>)
 8008f3e:	6893      	ldr	r3, [r2, #8]
 8008f40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008f44:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008f48:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f4a:	4a2f      	ldr	r2, [pc, #188]	; (8009008 <HAL_RCC_ClockConfig+0x1e4>)
 8008f4c:	6893      	ldr	r3, [r2, #8]
 8008f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f52:	68a9      	ldr	r1, [r5, #8]
 8008f54:	430b      	orrs	r3, r1
 8008f56:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f58:	4b2a      	ldr	r3, [pc, #168]	; (8009004 <HAL_RCC_ClockConfig+0x1e0>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 030f 	and.w	r3, r3, #15
 8008f60:	42a3      	cmp	r3, r4
 8008f62:	d830      	bhi.n	8008fc6 <HAL_RCC_ClockConfig+0x1a2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f64:	682b      	ldr	r3, [r5, #0]
 8008f66:	f013 0f04 	tst.w	r3, #4
 8008f6a:	d006      	beq.n	8008f7a <HAL_RCC_ClockConfig+0x156>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f6c:	4a26      	ldr	r2, [pc, #152]	; (8009008 <HAL_RCC_ClockConfig+0x1e4>)
 8008f6e:	6893      	ldr	r3, [r2, #8]
 8008f70:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008f74:	68e9      	ldr	r1, [r5, #12]
 8008f76:	430b      	orrs	r3, r1
 8008f78:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f7a:	682b      	ldr	r3, [r5, #0]
 8008f7c:	f013 0f08 	tst.w	r3, #8
 8008f80:	d007      	beq.n	8008f92 <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008f82:	4a21      	ldr	r2, [pc, #132]	; (8009008 <HAL_RCC_ClockConfig+0x1e4>)
 8008f84:	6893      	ldr	r3, [r2, #8]
 8008f86:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8008f8a:	6929      	ldr	r1, [r5, #16]
 8008f8c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008f90:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008f92:	f7ff ff03 	bl	8008d9c <HAL_RCC_GetSysClockFreq>
 8008f96:	4b1c      	ldr	r3, [pc, #112]	; (8009008 <HAL_RCC_ClockConfig+0x1e4>)
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008f9e:	4a1c      	ldr	r2, [pc, #112]	; (8009010 <HAL_RCC_ClockConfig+0x1ec>)
 8008fa0:	5cd3      	ldrb	r3, [r2, r3]
 8008fa2:	f003 031f 	and.w	r3, r3, #31
 8008fa6:	40d8      	lsrs	r0, r3
 8008fa8:	4b1a      	ldr	r3, [pc, #104]	; (8009014 <HAL_RCC_ClockConfig+0x1f0>)
 8008faa:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8008fac:	4b1a      	ldr	r3, [pc, #104]	; (8009018 <HAL_RCC_ClockConfig+0x1f4>)
 8008fae:	6818      	ldr	r0, [r3, #0]
 8008fb0:	f7fc fa9e 	bl	80054f0 <HAL_InitTick>
}
 8008fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 8008fb6:	2e80      	cmp	r6, #128	; 0x80
 8008fb8:	d1ce      	bne.n	8008f58 <HAL_RCC_ClockConfig+0x134>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008fba:	4a13      	ldr	r2, [pc, #76]	; (8009008 <HAL_RCC_ClockConfig+0x1e4>)
 8008fbc:	6893      	ldr	r3, [r2, #8]
 8008fbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008fc2:	6093      	str	r3, [r2, #8]
 8008fc4:	e7c8      	b.n	8008f58 <HAL_RCC_ClockConfig+0x134>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fc6:	4a0f      	ldr	r2, [pc, #60]	; (8009004 <HAL_RCC_ClockConfig+0x1e0>)
 8008fc8:	6813      	ldr	r3, [r2, #0]
 8008fca:	f023 030f 	bic.w	r3, r3, #15
 8008fce:	4323      	orrs	r3, r4
 8008fd0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008fd2:	f7fc fad1 	bl	8005578 <HAL_GetTick>
 8008fd6:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fd8:	4b0a      	ldr	r3, [pc, #40]	; (8009004 <HAL_RCC_ClockConfig+0x1e0>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 030f 	and.w	r3, r3, #15
 8008fe0:	42a3      	cmp	r3, r4
 8008fe2:	d0bf      	beq.n	8008f64 <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fe4:	f7fc fac8 	bl	8005578 <HAL_GetTick>
 8008fe8:	1b80      	subs	r0, r0, r6
 8008fea:	f241 3388 	movw	r3, #5000	; 0x1388
 8008fee:	4298      	cmp	r0, r3
 8008ff0:	d9f2      	bls.n	8008fd8 <HAL_RCC_ClockConfig+0x1b4>
        return HAL_TIMEOUT;
 8008ff2:	2003      	movs	r0, #3
 8008ff4:	e7de      	b.n	8008fb4 <HAL_RCC_ClockConfig+0x190>
    return HAL_ERROR;
 8008ff6:	2001      	movs	r0, #1
}
 8008ff8:	4770      	bx	lr
      return HAL_ERROR;
 8008ffa:	2001      	movs	r0, #1
 8008ffc:	e7da      	b.n	8008fb4 <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
 8008ffe:	2001      	movs	r0, #1
 8009000:	e7d8      	b.n	8008fb4 <HAL_RCC_ClockConfig+0x190>
 8009002:	bf00      	nop
 8009004:	40022000 	.word	0x40022000
 8009008:	40021000 	.word	0x40021000
 800900c:	04c4b400 	.word	0x04c4b400
 8009010:	08013010 	.word	0x08013010
 8009014:	20000058 	.word	0x20000058
 8009018:	2000010c 	.word	0x2000010c

0800901c <HAL_RCC_GetHCLKFreq>:
}
 800901c:	4b01      	ldr	r3, [pc, #4]	; (8009024 <HAL_RCC_GetHCLKFreq+0x8>)
 800901e:	6818      	ldr	r0, [r3, #0]
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	20000058 	.word	0x20000058

08009028 <HAL_RCC_GetPCLK1Freq>:
{
 8009028:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800902a:	f7ff fff7 	bl	800901c <HAL_RCC_GetHCLKFreq>
 800902e:	4b05      	ldr	r3, [pc, #20]	; (8009044 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009036:	4a04      	ldr	r2, [pc, #16]	; (8009048 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009038:	5cd3      	ldrb	r3, [r2, r3]
 800903a:	f003 031f 	and.w	r3, r3, #31
}
 800903e:	40d8      	lsrs	r0, r3
 8009040:	bd08      	pop	{r3, pc}
 8009042:	bf00      	nop
 8009044:	40021000 	.word	0x40021000
 8009048:	08013020 	.word	0x08013020

0800904c <HAL_RCC_GetPCLK2Freq>:
{
 800904c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800904e:	f7ff ffe5 	bl	800901c <HAL_RCC_GetHCLKFreq>
 8009052:	4b05      	ldr	r3, [pc, #20]	; (8009068 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800905a:	4a04      	ldr	r2, [pc, #16]	; (800906c <HAL_RCC_GetPCLK2Freq+0x20>)
 800905c:	5cd3      	ldrb	r3, [r2, r3]
 800905e:	f003 031f 	and.w	r3, r3, #31
}
 8009062:	40d8      	lsrs	r0, r3
 8009064:	bd08      	pop	{r3, pc}
 8009066:	bf00      	nop
 8009068:	40021000 	.word	0x40021000
 800906c:	08013020 	.word	0x08013020

08009070 <HAL_RCCEx_PeriphCLKConfig>:
=======
 8008766:	fbb0 f0f3 	udiv	r0, r0, r3
 800876a:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800876c:	4806      	ldr	r0, [pc, #24]	; (8008788 <RCC_GetSysClockFreqFromPLLSource+0x54>)
 800876e:	fbb0 f0f3 	udiv	r0, r0, r3
 8008772:	4b03      	ldr	r3, [pc, #12]	; (8008780 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800877a:	fb03 f000 	mul.w	r0, r3, r0
    break;
 800877e:	e7ec      	b.n	800875a <RCC_GetSysClockFreqFromPLLSource+0x26>
 8008780:	40021000 	.word	0x40021000
 8008784:	00f42400 	.word	0x00f42400
 8008788:	007a1200 	.word	0x007a1200

0800878c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800878c:	2800      	cmp	r0, #0
 800878e:	f000 8254 	beq.w	8008c3a <HAL_RCC_OscConfig+0x4ae>
{
 8008792:	b570      	push	{r4, r5, r6, lr}
 8008794:	b082      	sub	sp, #8
 8008796:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008798:	6803      	ldr	r3, [r0, #0]
 800879a:	f013 0f01 	tst.w	r3, #1
 800879e:	d037      	beq.n	8008810 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087a0:	4aa4      	ldr	r2, [pc, #656]	; (8008a34 <HAL_RCC_OscConfig+0x2a8>)
 80087a2:	6893      	ldr	r3, [r2, #8]
 80087a4:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80087a8:	68d2      	ldr	r2, [r2, #12]
 80087aa:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80087ae:	2b0c      	cmp	r3, #12
 80087b0:	d023      	beq.n	80087fa <HAL_RCC_OscConfig+0x6e>
 80087b2:	2b08      	cmp	r3, #8
 80087b4:	d023      	beq.n	80087fe <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087b6:	6863      	ldr	r3, [r4, #4]
 80087b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087bc:	d04e      	beq.n	800885c <HAL_RCC_OscConfig+0xd0>
 80087be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087c2:	d051      	beq.n	8008868 <HAL_RCC_OscConfig+0xdc>
 80087c4:	4b9b      	ldr	r3, [pc, #620]	; (8008a34 <HAL_RCC_OscConfig+0x2a8>)
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80087cc:	601a      	str	r2, [r3, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80087d4:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087d6:	6863      	ldr	r3, [r4, #4]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d052      	beq.n	8008882 <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
 80087dc:	f7fc fe38 	bl	8005450 <HAL_GetTick>
 80087e0:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80087e2:	4b94      	ldr	r3, [pc, #592]	; (8008a34 <HAL_RCC_OscConfig+0x2a8>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80087ea:	d111      	bne.n	8008810 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087ec:	f7fc fe30 	bl	8005450 <HAL_GetTick>
 80087f0:	1b40      	subs	r0, r0, r5
 80087f2:	2864      	cmp	r0, #100	; 0x64
 80087f4:	d9f5      	bls.n	80087e2 <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 80087f6:	2003      	movs	r0, #3
 80087f8:	e228      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80087fa:	2a03      	cmp	r2, #3
 80087fc:	d1d9      	bne.n	80087b2 <HAL_RCC_OscConfig+0x26>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087fe:	4b8d      	ldr	r3, [pc, #564]	; (8008a34 <HAL_RCC_OscConfig+0x2a8>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008806:	d003      	beq.n	8008810 <HAL_RCC_OscConfig+0x84>
 8008808:	6863      	ldr	r3, [r4, #4]
 800880a:	2b00      	cmp	r3, #0
 800880c:	f000 8217 	beq.w	8008c3e <HAL_RCC_OscConfig+0x4b2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008810:	6823      	ldr	r3, [r4, #0]
 8008812:	f013 0f02 	tst.w	r3, #2
 8008816:	d05d      	beq.n	80088d4 <HAL_RCC_OscConfig+0x148>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008818:	4a86      	ldr	r2, [pc, #536]	; (8008a34 <HAL_RCC_OscConfig+0x2a8>)
 800881a:	6893      	ldr	r3, [r2, #8]
 800881c:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008820:	68d2      	ldr	r2, [r2, #12]
 8008822:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008826:	2b0c      	cmp	r3, #12
 8008828:	d03a      	beq.n	80088a0 <HAL_RCC_OscConfig+0x114>
 800882a:	2b04      	cmp	r3, #4
 800882c:	d03a      	beq.n	80088a4 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800882e:	68e3      	ldr	r3, [r4, #12]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d075      	beq.n	8008920 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8008834:	4a7f      	ldr	r2, [pc, #508]	; (8008a34 <HAL_RCC_OscConfig+0x2a8>)
 8008836:	6813      	ldr	r3, [r2, #0]
 8008838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800883c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800883e:	f7fc fe07 	bl	8005450 <HAL_GetTick>
 8008842:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008844:	4b7b      	ldr	r3, [pc, #492]	; (8008a34 <HAL_RCC_OscConfig+0x2a8>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800884c:	d15f      	bne.n	800890e <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800884e:	f7fc fdff 	bl	8005450 <HAL_GetTick>
 8008852:	1b40      	subs	r0, r0, r5
 8008854:	2802      	cmp	r0, #2
 8008856:	d9f5      	bls.n	8008844 <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
 8008858:	2003      	movs	r0, #3
 800885a:	e1f7      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800885c:	4a75      	ldr	r2, [pc, #468]	; (8008a34 <HAL_RCC_OscConfig+0x2a8>)
 800885e:	6813      	ldr	r3, [r2, #0]
 8008860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008864:	6013      	str	r3, [r2, #0]
 8008866:	e7b6      	b.n	80087d6 <HAL_RCC_OscConfig+0x4a>
 8008868:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800886c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008876:	601a      	str	r2, [r3, #0]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800887e:	601a      	str	r2, [r3, #0]
 8008880:	e7a9      	b.n	80087d6 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8008882:	f7fc fde5 	bl	8005450 <HAL_GetTick>
 8008886:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008888:	4b6a      	ldr	r3, [pc, #424]	; (8008a34 <HAL_RCC_OscConfig+0x2a8>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008890:	d0be      	beq.n	8008810 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008892:	f7fc fddd 	bl	8005450 <HAL_GetTick>
 8008896:	1b40      	subs	r0, r0, r5
 8008898:	2864      	cmp	r0, #100	; 0x64
 800889a:	d9f5      	bls.n	8008888 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 800889c:	2003      	movs	r0, #3
 800889e:	e1d5      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80088a0:	2a02      	cmp	r2, #2
 80088a2:	d1c2      	bne.n	800882a <HAL_RCC_OscConfig+0x9e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088a4:	4b63      	ldr	r3, [pc, #396]	; (8008a34 <HAL_RCC_OscConfig+0x2a8>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80088ac:	d003      	beq.n	80088b6 <HAL_RCC_OscConfig+0x12a>
 80088ae:	68e3      	ldr	r3, [r4, #12]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 81c6 	beq.w	8008c42 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088b6:	4a5f      	ldr	r2, [pc, #380]	; (8008a34 <HAL_RCC_OscConfig+0x2a8>)
 80088b8:	6853      	ldr	r3, [r2, #4]
 80088ba:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80088be:	6921      	ldr	r1, [r4, #16]
 80088c0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80088c4:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80088c6:	4b5c      	ldr	r3, [pc, #368]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 80088c8:	6818      	ldr	r0, [r3, #0]
 80088ca:	f7fc fd7d 	bl	80053c8 <HAL_InitTick>
 80088ce:	2800      	cmp	r0, #0
 80088d0:	f040 81b9 	bne.w	8008c46 <HAL_RCC_OscConfig+0x4ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088d4:	6823      	ldr	r3, [r4, #0]
 80088d6:	f013 0f08 	tst.w	r3, #8
 80088da:	d04c      	beq.n	8008976 <HAL_RCC_OscConfig+0x1ea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80088dc:	6963      	ldr	r3, [r4, #20]
 80088de:	b39b      	cbz	r3, 8008948 <HAL_RCC_OscConfig+0x1bc>
      __HAL_RCC_LSI_ENABLE();
 80088e0:	4a54      	ldr	r2, [pc, #336]	; (8008a34 <HAL_RCC_OscConfig+0x2a8>)
 80088e2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80088e6:	f043 0301 	orr.w	r3, r3, #1
 80088ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80088ee:	f7fc fdaf 	bl	8005450 <HAL_GetTick>
 80088f2:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80088f4:	4b4f      	ldr	r3, [pc, #316]	; (8008a34 <HAL_RCC_OscConfig+0x2a8>)
 80088f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088fa:	f013 0f02 	tst.w	r3, #2
 80088fe:	d13a      	bne.n	8008976 <HAL_RCC_OscConfig+0x1ea>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008900:	f7fc fda6 	bl	8005450 <HAL_GetTick>
 8008904:	1b40      	subs	r0, r0, r5
 8008906:	2802      	cmp	r0, #2
 8008908:	d9f4      	bls.n	80088f4 <HAL_RCC_OscConfig+0x168>
          return HAL_TIMEOUT;
 800890a:	2003      	movs	r0, #3
 800890c:	e19e      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800890e:	4a49      	ldr	r2, [pc, #292]	; (8008a34 <HAL_RCC_OscConfig+0x2a8>)
 8008910:	6853      	ldr	r3, [r2, #4]
 8008912:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008916:	6921      	ldr	r1, [r4, #16]
 8008918:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800891c:	6053      	str	r3, [r2, #4]
 800891e:	e7d9      	b.n	80088d4 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8008920:	4a44      	ldr	r2, [pc, #272]	; (8008a34 <HAL_RCC_OscConfig+0x2a8>)
 8008922:	6813      	ldr	r3, [r2, #0]
 8008924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008928:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800892a:	f7fc fd91 	bl	8005450 <HAL_GetTick>
 800892e:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008930:	4b40      	ldr	r3, [pc, #256]	; (8008a34 <HAL_RCC_OscConfig+0x2a8>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008938:	d0cc      	beq.n	80088d4 <HAL_RCC_OscConfig+0x148>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800893a:	f7fc fd89 	bl	8005450 <HAL_GetTick>
 800893e:	1b40      	subs	r0, r0, r5
 8008940:	2802      	cmp	r0, #2
 8008942:	d9f5      	bls.n	8008930 <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 8008944:	2003      	movs	r0, #3
 8008946:	e181      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_LSI_DISABLE();
 8008948:	4a3a      	ldr	r2, [pc, #232]	; (8008a34 <HAL_RCC_OscConfig+0x2a8>)
 800894a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800894e:	f023 0301 	bic.w	r3, r3, #1
 8008952:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8008956:	f7fc fd7b 	bl	8005450 <HAL_GetTick>
 800895a:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800895c:	4b35      	ldr	r3, [pc, #212]	; (8008a34 <HAL_RCC_OscConfig+0x2a8>)
 800895e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008962:	f013 0f02 	tst.w	r3, #2
 8008966:	d006      	beq.n	8008976 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008968:	f7fc fd72 	bl	8005450 <HAL_GetTick>
 800896c:	1b40      	subs	r0, r0, r5
 800896e:	2802      	cmp	r0, #2
 8008970:	d9f4      	bls.n	800895c <HAL_RCC_OscConfig+0x1d0>
          return HAL_TIMEOUT;
 8008972:	2003      	movs	r0, #3
 8008974:	e16a      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	f013 0f04 	tst.w	r3, #4
 800897c:	f000 8081 	beq.w	8008a82 <HAL_RCC_OscConfig+0x2f6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008980:	4b2c      	ldr	r3, [pc, #176]	; (8008a34 <HAL_RCC_OscConfig+0x2a8>)
 8008982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008984:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8008988:	d136      	bne.n	80089f8 <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800898a:	4b2a      	ldr	r3, [pc, #168]	; (8008a34 <HAL_RCC_OscConfig+0x2a8>)
 800898c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800898e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008992:	659a      	str	r2, [r3, #88]	; 0x58
 8008994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800899a:	9301      	str	r3, [sp, #4]
 800899c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800899e:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089a0:	4b26      	ldr	r3, [pc, #152]	; (8008a3c <HAL_RCC_OscConfig+0x2b0>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80089a8:	d028      	beq.n	80089fc <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089aa:	68a3      	ldr	r3, [r4, #8]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d039      	beq.n	8008a24 <HAL_RCC_OscConfig+0x298>
 80089b0:	2b05      	cmp	r3, #5
 80089b2:	d045      	beq.n	8008a40 <HAL_RCC_OscConfig+0x2b4>
 80089b4:	4b1f      	ldr	r3, [pc, #124]	; (8008a34 <HAL_RCC_OscConfig+0x2a8>)
 80089b6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80089ba:	f022 0201 	bic.w	r2, r2, #1
 80089be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80089c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80089c6:	f022 0204 	bic.w	r2, r2, #4
 80089ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80089ce:	68a3      	ldr	r3, [r4, #8]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d043      	beq.n	8008a5c <HAL_RCC_OscConfig+0x2d0>
      tickstart = HAL_GetTick();
 80089d4:	f7fc fd3c 	bl	8005450 <HAL_GetTick>
 80089d8:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089da:	4b16      	ldr	r3, [pc, #88]	; (8008a34 <HAL_RCC_OscConfig+0x2a8>)
 80089dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089e0:	f013 0f02 	tst.w	r3, #2
 80089e4:	d14c      	bne.n	8008a80 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089e6:	f7fc fd33 	bl	8005450 <HAL_GetTick>
 80089ea:	1b80      	subs	r0, r0, r6
 80089ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80089f0:	4298      	cmp	r0, r3
 80089f2:	d9f2      	bls.n	80089da <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 80089f4:	2003      	movs	r0, #3
 80089f6:	e129      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
    FlagStatus       pwrclkchanged = RESET;
 80089f8:	2500      	movs	r5, #0
 80089fa:	e7d1      	b.n	80089a0 <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80089fc:	4a0f      	ldr	r2, [pc, #60]	; (8008a3c <HAL_RCC_OscConfig+0x2b0>)
 80089fe:	6813      	ldr	r3, [r2, #0]
 8008a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a04:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8008a06:	f7fc fd23 	bl	8005450 <HAL_GetTick>
 8008a0a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a0c:	4b0b      	ldr	r3, [pc, #44]	; (8008a3c <HAL_RCC_OscConfig+0x2b0>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008a14:	d1c9      	bne.n	80089aa <HAL_RCC_OscConfig+0x21e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a16:	f7fc fd1b 	bl	8005450 <HAL_GetTick>
 8008a1a:	1b80      	subs	r0, r0, r6
 8008a1c:	2802      	cmp	r0, #2
 8008a1e:	d9f5      	bls.n	8008a0c <HAL_RCC_OscConfig+0x280>
          return HAL_TIMEOUT;
 8008a20:	2003      	movs	r0, #3
 8008a22:	e113      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a24:	4a03      	ldr	r2, [pc, #12]	; (8008a34 <HAL_RCC_OscConfig+0x2a8>)
 8008a26:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008a2a:	f043 0301 	orr.w	r3, r3, #1
 8008a2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008a32:	e7cc      	b.n	80089ce <HAL_RCC_OscConfig+0x242>
 8008a34:	40021000 	.word	0x40021000
 8008a38:	200010fc 	.word	0x200010fc
 8008a3c:	40007000 	.word	0x40007000
 8008a40:	4b8a      	ldr	r3, [pc, #552]	; (8008c6c <HAL_RCC_OscConfig+0x4e0>)
 8008a42:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008a46:	f042 0204 	orr.w	r2, r2, #4
 8008a4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8008a4e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008a52:	f042 0201 	orr.w	r2, r2, #1
 8008a56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8008a5a:	e7b8      	b.n	80089ce <HAL_RCC_OscConfig+0x242>
      tickstart = HAL_GetTick();
 8008a5c:	f7fc fcf8 	bl	8005450 <HAL_GetTick>
 8008a60:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a62:	4b82      	ldr	r3, [pc, #520]	; (8008c6c <HAL_RCC_OscConfig+0x4e0>)
 8008a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a68:	f013 0f02 	tst.w	r3, #2
 8008a6c:	d008      	beq.n	8008a80 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a6e:	f7fc fcef 	bl	8005450 <HAL_GetTick>
 8008a72:	1b80      	subs	r0, r0, r6
 8008a74:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a78:	4298      	cmp	r0, r3
 8008a7a:	d9f2      	bls.n	8008a62 <HAL_RCC_OscConfig+0x2d6>
          return HAL_TIMEOUT;
 8008a7c:	2003      	movs	r0, #3
 8008a7e:	e0e5      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
    if (pwrclkchanged == SET)
 8008a80:	b9e5      	cbnz	r5, 8008abc <HAL_RCC_OscConfig+0x330>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a82:	6823      	ldr	r3, [r4, #0]
 8008a84:	f013 0f20 	tst.w	r3, #32
 8008a88:	d035      	beq.n	8008af6 <HAL_RCC_OscConfig+0x36a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008a8a:	69a3      	ldr	r3, [r4, #24]
 8008a8c:	b1e3      	cbz	r3, 8008ac8 <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_HSI48_ENABLE();
 8008a8e:	4a77      	ldr	r2, [pc, #476]	; (8008c6c <HAL_RCC_OscConfig+0x4e0>)
 8008a90:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8008a94:	f043 0301 	orr.w	r3, r3, #1
 8008a98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8008a9c:	f7fc fcd8 	bl	8005450 <HAL_GetTick>
 8008aa0:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008aa2:	4b72      	ldr	r3, [pc, #456]	; (8008c6c <HAL_RCC_OscConfig+0x4e0>)
 8008aa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008aa8:	f013 0f02 	tst.w	r3, #2
 8008aac:	d123      	bne.n	8008af6 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008aae:	f7fc fccf 	bl	8005450 <HAL_GetTick>
 8008ab2:	1b40      	subs	r0, r0, r5
 8008ab4:	2802      	cmp	r0, #2
 8008ab6:	d9f4      	bls.n	8008aa2 <HAL_RCC_OscConfig+0x316>
          return HAL_TIMEOUT;
 8008ab8:	2003      	movs	r0, #3
 8008aba:	e0c7      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008abc:	4a6b      	ldr	r2, [pc, #428]	; (8008c6c <HAL_RCC_OscConfig+0x4e0>)
 8008abe:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008ac0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ac4:	6593      	str	r3, [r2, #88]	; 0x58
 8008ac6:	e7dc      	b.n	8008a82 <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI48_DISABLE();
 8008ac8:	4a68      	ldr	r2, [pc, #416]	; (8008c6c <HAL_RCC_OscConfig+0x4e0>)
 8008aca:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8008ace:	f023 0301 	bic.w	r3, r3, #1
 8008ad2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8008ad6:	f7fc fcbb 	bl	8005450 <HAL_GetTick>
 8008ada:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008adc:	4b63      	ldr	r3, [pc, #396]	; (8008c6c <HAL_RCC_OscConfig+0x4e0>)
 8008ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008ae2:	f013 0f02 	tst.w	r3, #2
 8008ae6:	d006      	beq.n	8008af6 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ae8:	f7fc fcb2 	bl	8005450 <HAL_GetTick>
 8008aec:	1b40      	subs	r0, r0, r5
 8008aee:	2802      	cmp	r0, #2
 8008af0:	d9f4      	bls.n	8008adc <HAL_RCC_OscConfig+0x350>
          return HAL_TIMEOUT;
 8008af2:	2003      	movs	r0, #3
 8008af4:	e0aa      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008af6:	69e3      	ldr	r3, [r4, #28]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f000 80a6 	beq.w	8008c4a <HAL_RCC_OscConfig+0x4be>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008afe:	4a5b      	ldr	r2, [pc, #364]	; (8008c6c <HAL_RCC_OscConfig+0x4e0>)
 8008b00:	6892      	ldr	r2, [r2, #8]
 8008b02:	f002 020c 	and.w	r2, r2, #12
 8008b06:	2a0c      	cmp	r2, #12
 8008b08:	d069      	beq.n	8008bde <HAL_RCC_OscConfig+0x452>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	d01d      	beq.n	8008b4a <HAL_RCC_OscConfig+0x3be>
        __HAL_RCC_PLL_DISABLE();
 8008b0e:	4b57      	ldr	r3, [pc, #348]	; (8008c6c <HAL_RCC_OscConfig+0x4e0>)
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008b16:	601a      	str	r2, [r3, #0]
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008b18:	68da      	ldr	r2, [r3, #12]
 8008b1a:	f022 0203 	bic.w	r2, r2, #3
 8008b1e:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008b20:	68da      	ldr	r2, [r3, #12]
 8008b22:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8008b26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008b2a:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8008b2c:	f7fc fc90 	bl	8005450 <HAL_GetTick>
 8008b30:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b32:	4b4e      	ldr	r3, [pc, #312]	; (8008c6c <HAL_RCC_OscConfig+0x4e0>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008b3a:	d04e      	beq.n	8008bda <HAL_RCC_OscConfig+0x44e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b3c:	f7fc fc88 	bl	8005450 <HAL_GetTick>
 8008b40:	1b00      	subs	r0, r0, r4
 8008b42:	2802      	cmp	r0, #2
 8008b44:	d9f5      	bls.n	8008b32 <HAL_RCC_OscConfig+0x3a6>
            return HAL_TIMEOUT;
 8008b46:	2003      	movs	r0, #3
 8008b48:	e080      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_DISABLE();
 8008b4a:	4a48      	ldr	r2, [pc, #288]	; (8008c6c <HAL_RCC_OscConfig+0x4e0>)
 8008b4c:	6813      	ldr	r3, [r2, #0]
 8008b4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b52:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008b54:	f7fc fc7c 	bl	8005450 <HAL_GetTick>
 8008b58:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b5a:	4b44      	ldr	r3, [pc, #272]	; (8008c6c <HAL_RCC_OscConfig+0x4e0>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008b62:	d006      	beq.n	8008b72 <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b64:	f7fc fc74 	bl	8005450 <HAL_GetTick>
 8008b68:	1b40      	subs	r0, r0, r5
 8008b6a:	2802      	cmp	r0, #2
 8008b6c:	d9f5      	bls.n	8008b5a <HAL_RCC_OscConfig+0x3ce>
            return HAL_TIMEOUT;
 8008b6e:	2003      	movs	r0, #3
 8008b70:	e06c      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b72:	4a3e      	ldr	r2, [pc, #248]	; (8008c6c <HAL_RCC_OscConfig+0x4e0>)
 8008b74:	68d3      	ldr	r3, [r2, #12]
 8008b76:	493e      	ldr	r1, [pc, #248]	; (8008c70 <HAL_RCC_OscConfig+0x4e4>)
 8008b78:	4019      	ands	r1, r3
 8008b7a:	6a23      	ldr	r3, [r4, #32]
 8008b7c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008b7e:	3801      	subs	r0, #1
 8008b80:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8008b84:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008b86:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8008b8a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008b8c:	0840      	lsrs	r0, r0, #1
 8008b8e:	3801      	subs	r0, #1
 8008b90:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8008b94:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008b96:	0840      	lsrs	r0, r0, #1
 8008b98:	3801      	subs	r0, #1
 8008b9a:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8008b9e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008ba0:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8008ba4:	430b      	orrs	r3, r1
 8008ba6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8008ba8:	6813      	ldr	r3, [r2, #0]
 8008baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008bae:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008bb0:	68d3      	ldr	r3, [r2, #12]
 8008bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008bb6:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8008bb8:	f7fc fc4a 	bl	8005450 <HAL_GetTick>
 8008bbc:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bbe:	4b2b      	ldr	r3, [pc, #172]	; (8008c6c <HAL_RCC_OscConfig+0x4e0>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008bc6:	d106      	bne.n	8008bd6 <HAL_RCC_OscConfig+0x44a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bc8:	f7fc fc42 	bl	8005450 <HAL_GetTick>
 8008bcc:	1b00      	subs	r0, r0, r4
 8008bce:	2802      	cmp	r0, #2
 8008bd0:	d9f5      	bls.n	8008bbe <HAL_RCC_OscConfig+0x432>
            return HAL_TIMEOUT;
 8008bd2:	2003      	movs	r0, #3
 8008bd4:	e03a      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 8008bd6:	2000      	movs	r0, #0
 8008bd8:	e038      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
 8008bda:	2000      	movs	r0, #0
 8008bdc:	e036      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d036      	beq.n	8008c50 <HAL_RCC_OscConfig+0x4c4>
      temp_pllckcfg = RCC->PLLCFGR;
 8008be2:	4b22      	ldr	r3, [pc, #136]	; (8008c6c <HAL_RCC_OscConfig+0x4e0>)
 8008be4:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008be6:	f003 0103 	and.w	r1, r3, #3
 8008bea:	6a22      	ldr	r2, [r4, #32]
 8008bec:	4291      	cmp	r1, r2
 8008bee:	d131      	bne.n	8008c54 <HAL_RCC_OscConfig+0x4c8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008bf0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008bf4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008bf6:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bf8:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8008bfc:	d12c      	bne.n	8008c58 <HAL_RCC_OscConfig+0x4cc>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008bfe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008c02:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008c04:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8008c08:	d128      	bne.n	8008c5c <HAL_RCC_OscConfig+0x4d0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008c0a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008c0e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c10:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8008c14:	d124      	bne.n	8008c60 <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c16:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8008c1a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008c1c:	0852      	lsrs	r2, r2, #1
 8008c1e:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008c20:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8008c24:	d11e      	bne.n	8008c64 <HAL_RCC_OscConfig+0x4d8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008c26:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8008c2a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008c2c:	0852      	lsrs	r2, r2, #1
 8008c2e:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c30:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8008c34:	d118      	bne.n	8008c68 <HAL_RCC_OscConfig+0x4dc>
  return HAL_OK;
 8008c36:	2000      	movs	r0, #0
 8008c38:	e008      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
    return HAL_ERROR;
 8008c3a:	2001      	movs	r0, #1
}
 8008c3c:	4770      	bx	lr
        return HAL_ERROR;
 8008c3e:	2001      	movs	r0, #1
 8008c40:	e004      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 8008c42:	2001      	movs	r0, #1
 8008c44:	e002      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
          return HAL_ERROR;
 8008c46:	2001      	movs	r0, #1
 8008c48:	e000      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 8008c4a:	2000      	movs	r0, #0
}
 8008c4c:	b002      	add	sp, #8
 8008c4e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8008c50:	2001      	movs	r0, #1
 8008c52:	e7fb      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 8008c54:	2001      	movs	r0, #1
 8008c56:	e7f9      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
 8008c58:	2001      	movs	r0, #1
 8008c5a:	e7f7      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
 8008c5c:	2001      	movs	r0, #1
 8008c5e:	e7f5      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
 8008c60:	2001      	movs	r0, #1
 8008c62:	e7f3      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
 8008c64:	2001      	movs	r0, #1
 8008c66:	e7f1      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
 8008c68:	2001      	movs	r0, #1
 8008c6a:	e7ef      	b.n	8008c4c <HAL_RCC_OscConfig+0x4c0>
 8008c6c:	40021000 	.word	0x40021000
 8008c70:	019f800c 	.word	0x019f800c

08008c74 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008c74:	4b1e      	ldr	r3, [pc, #120]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	f003 030c 	and.w	r3, r3, #12
 8008c7c:	2b04      	cmp	r3, #4
 8008c7e:	d033      	beq.n	8008ce8 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008c80:	4b1b      	ldr	r3, [pc, #108]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	f003 030c 	and.w	r3, r3, #12
 8008c88:	2b08      	cmp	r3, #8
 8008c8a:	d02f      	beq.n	8008cec <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008c8c:	4b18      	ldr	r3, [pc, #96]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	f003 030c 	and.w	r3, r3, #12
 8008c94:	2b0c      	cmp	r3, #12
 8008c96:	d001      	beq.n	8008c9c <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 8008c98:	2000      	movs	r0, #0
}
 8008c9a:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008c9c:	4b14      	ldr	r3, [pc, #80]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8008c9e:	68da      	ldr	r2, [r3, #12]
 8008ca0:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008ca4:	68d8      	ldr	r0, [r3, #12]
 8008ca6:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8008caa:	1c43      	adds	r3, r0, #1
    switch (pllsource)
 8008cac:	2a03      	cmp	r2, #3
 8008cae:	d011      	beq.n	8008cd4 <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008cb0:	4810      	ldr	r0, [pc, #64]	; (8008cf4 <HAL_RCC_GetSysClockFreq+0x80>)
 8008cb2:	fbb0 f0f3 	udiv	r0, r0, r3
 8008cb6:	4b0e      	ldr	r3, [pc, #56]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8008cbe:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008cc2:	4b0b      	ldr	r3, [pc, #44]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8008cca:	3301      	adds	r3, #1
 8008ccc:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8008cce:	fbb0 f0f3 	udiv	r0, r0, r3
 8008cd2:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008cd4:	4808      	ldr	r0, [pc, #32]	; (8008cf8 <HAL_RCC_GetSysClockFreq+0x84>)
 8008cd6:	fbb0 f0f3 	udiv	r0, r0, r3
 8008cda:	4b05      	ldr	r3, [pc, #20]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8008ce2:	fb03 f000 	mul.w	r0, r3, r0
      break;
 8008ce6:	e7ec      	b.n	8008cc2 <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 8008ce8:	4802      	ldr	r0, [pc, #8]	; (8008cf4 <HAL_RCC_GetSysClockFreq+0x80>)
 8008cea:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8008cec:	4802      	ldr	r0, [pc, #8]	; (8008cf8 <HAL_RCC_GetSysClockFreq+0x84>)
 8008cee:	4770      	bx	lr
 8008cf0:	40021000 	.word	0x40021000
 8008cf4:	00f42400 	.word	0x00f42400
 8008cf8:	007a1200 	.word	0x007a1200

08008cfc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	f000 80e6 	beq.w	8008ece <HAL_RCC_ClockConfig+0x1d2>
{
 8008d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d04:	460c      	mov	r4, r1
 8008d06:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008d08:	4b74      	ldr	r3, [pc, #464]	; (8008edc <HAL_RCC_ClockConfig+0x1e0>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 030f 	and.w	r3, r3, #15
 8008d10:	428b      	cmp	r3, r1
 8008d12:	d20b      	bcs.n	8008d2c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d14:	4a71      	ldr	r2, [pc, #452]	; (8008edc <HAL_RCC_ClockConfig+0x1e0>)
 8008d16:	6813      	ldr	r3, [r2, #0]
 8008d18:	f023 030f 	bic.w	r3, r3, #15
 8008d1c:	430b      	orrs	r3, r1
 8008d1e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d20:	6813      	ldr	r3, [r2, #0]
 8008d22:	f003 030f 	and.w	r3, r3, #15
 8008d26:	428b      	cmp	r3, r1
 8008d28:	f040 80d3 	bne.w	8008ed2 <HAL_RCC_ClockConfig+0x1d6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d2c:	682e      	ldr	r6, [r5, #0]
 8008d2e:	f016 0601 	ands.w	r6, r6, #1
 8008d32:	d05f      	beq.n	8008df4 <HAL_RCC_ClockConfig+0xf8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d34:	686b      	ldr	r3, [r5, #4]
 8008d36:	2b03      	cmp	r3, #3
 8008d38:	d02f      	beq.n	8008d9a <HAL_RCC_ClockConfig+0x9e>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d04d      	beq.n	8008dda <HAL_RCC_ClockConfig+0xde>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d3e:	4b68      	ldr	r3, [pc, #416]	; (8008ee0 <HAL_RCC_ClockConfig+0x1e4>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008d46:	f000 80c6 	beq.w	8008ed6 <HAL_RCC_ClockConfig+0x1da>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008d4a:	f7ff ff93 	bl	8008c74 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8008d4e:	4b65      	ldr	r3, [pc, #404]	; (8008ee4 <HAL_RCC_ClockConfig+0x1e8>)
 8008d50:	4298      	cmp	r0, r3
 8008d52:	d94d      	bls.n	8008df0 <HAL_RCC_ClockConfig+0xf4>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008d54:	4a62      	ldr	r2, [pc, #392]	; (8008ee0 <HAL_RCC_ClockConfig+0x1e4>)
 8008d56:	6893      	ldr	r3, [r2, #8]
 8008d58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d60:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008d62:	2680      	movs	r6, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d64:	4a5e      	ldr	r2, [pc, #376]	; (8008ee0 <HAL_RCC_ClockConfig+0x1e4>)
 8008d66:	6893      	ldr	r3, [r2, #8]
 8008d68:	f023 0303 	bic.w	r3, r3, #3
 8008d6c:	6869      	ldr	r1, [r5, #4]
 8008d6e:	430b      	orrs	r3, r1
 8008d70:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8008d72:	f7fc fb6d 	bl	8005450 <HAL_GetTick>
 8008d76:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d78:	4b59      	ldr	r3, [pc, #356]	; (8008ee0 <HAL_RCC_ClockConfig+0x1e4>)
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	f003 030c 	and.w	r3, r3, #12
 8008d80:	686a      	ldr	r2, [r5, #4]
 8008d82:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008d86:	d035      	beq.n	8008df4 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d88:	f7fc fb62 	bl	8005450 <HAL_GetTick>
 8008d8c:	1bc0      	subs	r0, r0, r7
 8008d8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d92:	4298      	cmp	r0, r3
 8008d94:	d9f0      	bls.n	8008d78 <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 8008d96:	2003      	movs	r0, #3
 8008d98:	e078      	b.n	8008e8c <HAL_RCC_ClockConfig+0x190>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d9a:	4b51      	ldr	r3, [pc, #324]	; (8008ee0 <HAL_RCC_ClockConfig+0x1e4>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008da2:	d101      	bne.n	8008da8 <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 8008da4:	2001      	movs	r0, #1
 8008da6:	e071      	b.n	8008e8c <HAL_RCC_ClockConfig+0x190>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008da8:	f7ff fcc4 	bl	8008734 <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 8008dac:	4b4d      	ldr	r3, [pc, #308]	; (8008ee4 <HAL_RCC_ClockConfig+0x1e8>)
 8008dae:	4298      	cmp	r0, r3
 8008db0:	d91a      	bls.n	8008de8 <HAL_RCC_ClockConfig+0xec>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008db2:	4b4b      	ldr	r3, [pc, #300]	; (8008ee0 <HAL_RCC_ClockConfig+0x1e4>)
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8008dba:	d005      	beq.n	8008dc8 <HAL_RCC_ClockConfig+0xcc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008dbc:	682e      	ldr	r6, [r5, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008dbe:	f016 0602 	ands.w	r6, r6, #2
 8008dc2:	d0cf      	beq.n	8008d64 <HAL_RCC_ClockConfig+0x68>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008dc4:	68ab      	ldr	r3, [r5, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008dc6:	b98b      	cbnz	r3, 8008dec <HAL_RCC_ClockConfig+0xf0>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008dc8:	4a45      	ldr	r2, [pc, #276]	; (8008ee0 <HAL_RCC_ClockConfig+0x1e4>)
 8008dca:	6893      	ldr	r3, [r2, #8]
 8008dcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dd4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008dd6:	2680      	movs	r6, #128	; 0x80
 8008dd8:	e7c4      	b.n	8008d64 <HAL_RCC_ClockConfig+0x68>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008dda:	4b41      	ldr	r3, [pc, #260]	; (8008ee0 <HAL_RCC_ClockConfig+0x1e4>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008de2:	d1b2      	bne.n	8008d4a <HAL_RCC_ClockConfig+0x4e>
          return HAL_ERROR;
 8008de4:	2001      	movs	r0, #1
 8008de6:	e051      	b.n	8008e8c <HAL_RCC_ClockConfig+0x190>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008de8:	2600      	movs	r6, #0
 8008dea:	e7bb      	b.n	8008d64 <HAL_RCC_ClockConfig+0x68>
 8008dec:	2600      	movs	r6, #0
 8008dee:	e7b9      	b.n	8008d64 <HAL_RCC_ClockConfig+0x68>
 8008df0:	2600      	movs	r6, #0
 8008df2:	e7b7      	b.n	8008d64 <HAL_RCC_ClockConfig+0x68>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008df4:	682b      	ldr	r3, [r5, #0]
 8008df6:	f013 0f02 	tst.w	r3, #2
 8008dfa:	d048      	beq.n	8008e8e <HAL_RCC_ClockConfig+0x192>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008dfc:	f013 0f04 	tst.w	r3, #4
 8008e00:	d004      	beq.n	8008e0c <HAL_RCC_ClockConfig+0x110>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008e02:	4a37      	ldr	r2, [pc, #220]	; (8008ee0 <HAL_RCC_ClockConfig+0x1e4>)
 8008e04:	6893      	ldr	r3, [r2, #8]
 8008e06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008e0a:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e0c:	682b      	ldr	r3, [r5, #0]
 8008e0e:	f013 0f08 	tst.w	r3, #8
 8008e12:	d006      	beq.n	8008e22 <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008e14:	4a32      	ldr	r2, [pc, #200]	; (8008ee0 <HAL_RCC_ClockConfig+0x1e4>)
 8008e16:	6893      	ldr	r3, [r2, #8]
 8008e18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008e1c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008e20:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e22:	4a2f      	ldr	r2, [pc, #188]	; (8008ee0 <HAL_RCC_ClockConfig+0x1e4>)
 8008e24:	6893      	ldr	r3, [r2, #8]
 8008e26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e2a:	68a9      	ldr	r1, [r5, #8]
 8008e2c:	430b      	orrs	r3, r1
 8008e2e:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e30:	4b2a      	ldr	r3, [pc, #168]	; (8008edc <HAL_RCC_ClockConfig+0x1e0>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 030f 	and.w	r3, r3, #15
 8008e38:	42a3      	cmp	r3, r4
 8008e3a:	d830      	bhi.n	8008e9e <HAL_RCC_ClockConfig+0x1a2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e3c:	682b      	ldr	r3, [r5, #0]
 8008e3e:	f013 0f04 	tst.w	r3, #4
 8008e42:	d006      	beq.n	8008e52 <HAL_RCC_ClockConfig+0x156>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e44:	4a26      	ldr	r2, [pc, #152]	; (8008ee0 <HAL_RCC_ClockConfig+0x1e4>)
 8008e46:	6893      	ldr	r3, [r2, #8]
 8008e48:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008e4c:	68e9      	ldr	r1, [r5, #12]
 8008e4e:	430b      	orrs	r3, r1
 8008e50:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e52:	682b      	ldr	r3, [r5, #0]
 8008e54:	f013 0f08 	tst.w	r3, #8
 8008e58:	d007      	beq.n	8008e6a <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008e5a:	4a21      	ldr	r2, [pc, #132]	; (8008ee0 <HAL_RCC_ClockConfig+0x1e4>)
 8008e5c:	6893      	ldr	r3, [r2, #8]
 8008e5e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8008e62:	6929      	ldr	r1, [r5, #16]
 8008e64:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008e68:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008e6a:	f7ff ff03 	bl	8008c74 <HAL_RCC_GetSysClockFreq>
 8008e6e:	4b1c      	ldr	r3, [pc, #112]	; (8008ee0 <HAL_RCC_ClockConfig+0x1e4>)
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008e76:	4a1c      	ldr	r2, [pc, #112]	; (8008ee8 <HAL_RCC_ClockConfig+0x1ec>)
 8008e78:	5cd3      	ldrb	r3, [r2, r3]
 8008e7a:	f003 031f 	and.w	r3, r3, #31
 8008e7e:	40d8      	lsrs	r0, r3
 8008e80:	4b1a      	ldr	r3, [pc, #104]	; (8008eec <HAL_RCC_ClockConfig+0x1f0>)
 8008e82:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8008e84:	4b1a      	ldr	r3, [pc, #104]	; (8008ef0 <HAL_RCC_ClockConfig+0x1f4>)
 8008e86:	6818      	ldr	r0, [r3, #0]
 8008e88:	f7fc fa9e 	bl	80053c8 <HAL_InitTick>
}
 8008e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 8008e8e:	2e80      	cmp	r6, #128	; 0x80
 8008e90:	d1ce      	bne.n	8008e30 <HAL_RCC_ClockConfig+0x134>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008e92:	4a13      	ldr	r2, [pc, #76]	; (8008ee0 <HAL_RCC_ClockConfig+0x1e4>)
 8008e94:	6893      	ldr	r3, [r2, #8]
 8008e96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e9a:	6093      	str	r3, [r2, #8]
 8008e9c:	e7c8      	b.n	8008e30 <HAL_RCC_ClockConfig+0x134>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e9e:	4a0f      	ldr	r2, [pc, #60]	; (8008edc <HAL_RCC_ClockConfig+0x1e0>)
 8008ea0:	6813      	ldr	r3, [r2, #0]
 8008ea2:	f023 030f 	bic.w	r3, r3, #15
 8008ea6:	4323      	orrs	r3, r4
 8008ea8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008eaa:	f7fc fad1 	bl	8005450 <HAL_GetTick>
 8008eae:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008eb0:	4b0a      	ldr	r3, [pc, #40]	; (8008edc <HAL_RCC_ClockConfig+0x1e0>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 030f 	and.w	r3, r3, #15
 8008eb8:	42a3      	cmp	r3, r4
 8008eba:	d0bf      	beq.n	8008e3c <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ebc:	f7fc fac8 	bl	8005450 <HAL_GetTick>
 8008ec0:	1b80      	subs	r0, r0, r6
 8008ec2:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ec6:	4298      	cmp	r0, r3
 8008ec8:	d9f2      	bls.n	8008eb0 <HAL_RCC_ClockConfig+0x1b4>
        return HAL_TIMEOUT;
 8008eca:	2003      	movs	r0, #3
 8008ecc:	e7de      	b.n	8008e8c <HAL_RCC_ClockConfig+0x190>
    return HAL_ERROR;
 8008ece:	2001      	movs	r0, #1
}
 8008ed0:	4770      	bx	lr
      return HAL_ERROR;
 8008ed2:	2001      	movs	r0, #1
 8008ed4:	e7da      	b.n	8008e8c <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
 8008ed6:	2001      	movs	r0, #1
 8008ed8:	e7d8      	b.n	8008e8c <HAL_RCC_ClockConfig+0x190>
 8008eda:	bf00      	nop
 8008edc:	40022000 	.word	0x40022000
 8008ee0:	40021000 	.word	0x40021000
 8008ee4:	04c4b400 	.word	0x04c4b400
 8008ee8:	08012e78 	.word	0x08012e78
 8008eec:	20001048 	.word	0x20001048
 8008ef0:	200010fc 	.word	0x200010fc

08008ef4 <HAL_RCC_GetHCLKFreq>:
}
 8008ef4:	4b01      	ldr	r3, [pc, #4]	; (8008efc <HAL_RCC_GetHCLKFreq+0x8>)
 8008ef6:	6818      	ldr	r0, [r3, #0]
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	20001048 	.word	0x20001048

08008f00 <HAL_RCC_GetPCLK1Freq>:
{
 8008f00:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008f02:	f7ff fff7 	bl	8008ef4 <HAL_RCC_GetHCLKFreq>
 8008f06:	4b05      	ldr	r3, [pc, #20]	; (8008f1c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008f0e:	4a04      	ldr	r2, [pc, #16]	; (8008f20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f10:	5cd3      	ldrb	r3, [r2, r3]
 8008f12:	f003 031f 	and.w	r3, r3, #31
}
 8008f16:	40d8      	lsrs	r0, r3
 8008f18:	bd08      	pop	{r3, pc}
 8008f1a:	bf00      	nop
 8008f1c:	40021000 	.word	0x40021000
 8008f20:	08012e88 	.word	0x08012e88

08008f24 <HAL_RCC_GetPCLK2Freq>:
{
 8008f24:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008f26:	f7ff ffe5 	bl	8008ef4 <HAL_RCC_GetHCLKFreq>
 8008f2a:	4b05      	ldr	r3, [pc, #20]	; (8008f40 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8008f32:	4a04      	ldr	r2, [pc, #16]	; (8008f44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f34:	5cd3      	ldrb	r3, [r2, r3]
 8008f36:	f003 031f 	and.w	r3, r3, #31
}
 8008f3a:	40d8      	lsrs	r0, r3
 8008f3c:	bd08      	pop	{r3, pc}
 8008f3e:	bf00      	nop
 8008f40:	40021000 	.word	0x40021000
 8008f44:	08012e88 	.word	0x08012e88

08008f48 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> render
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< HEAD
 8009070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009072:	b083      	sub	sp, #12
 8009074:	4604      	mov	r4, r0
=======
 8008f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	4604      	mov	r4, r0
>>>>>>> render

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
<<<<<<< HEAD
 8009076:	6803      	ldr	r3, [r0, #0]
 8009078:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800907c:	d06e      	beq.n	800915c <HAL_RCCEx_PeriphCLKConfig+0xec>
=======
 8008f4e:	6803      	ldr	r3, [r0, #0]
 8008f50:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8008f54:	d06e      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0xec>
>>>>>>> render
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 800907e:	4b35      	ldr	r3, [pc, #212]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8009080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009082:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8009086:	d11e      	bne.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009088:	4b32      	ldr	r3, [pc, #200]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800908a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800908c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009090:	659a      	str	r2, [r3, #88]	; 0x58
 8009092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009098:	9301      	str	r3, [sp, #4]
 800909a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800909c:	2601      	movs	r6, #1
=======
 8008f56:	4b35      	ldr	r3, [pc, #212]	; (800902c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8008f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f5a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8008f5e:	d11e      	bne.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f60:	4b32      	ldr	r3, [pc, #200]	; (800902c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8008f62:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008f64:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008f68:	659a      	str	r2, [r3, #88]	; 0x58
 8008f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f70:	9301      	str	r3, [sp, #4]
 8008f72:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008f74:	2601      	movs	r6, #1
>>>>>>> render
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
<<<<<<< HEAD
 800909e:	4a2e      	ldr	r2, [pc, #184]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80090a0:	6813      	ldr	r3, [r2, #0]
 80090a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80090a8:	f7fc fa66 	bl	8005578 <HAL_GetTick>
 80090ac:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090ae:	4b2a      	ldr	r3, [pc, #168]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80090b6:	d108      	bne.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090b8:	f7fc fa5e 	bl	8005578 <HAL_GetTick>
 80090bc:	1b40      	subs	r0, r0, r5
 80090be:	2802      	cmp	r0, #2
 80090c0:	d9f5      	bls.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 80090c2:	2503      	movs	r5, #3
 80090c4:	e002      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 80090c6:	2600      	movs	r6, #0
 80090c8:	e7e9      	b.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80090ca:	2500      	movs	r5, #0
=======
 8008f76:	4a2e      	ldr	r2, [pc, #184]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008f78:	6813      	ldr	r3, [r2, #0]
 8008f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008f80:	f7fc fa66 	bl	8005450 <HAL_GetTick>
 8008f84:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f86:	4b2a      	ldr	r3, [pc, #168]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008f8e:	d108      	bne.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f90:	f7fc fa5e 	bl	8005450 <HAL_GetTick>
 8008f94:	1b40      	subs	r0, r0, r5
 8008f96:	2802      	cmp	r0, #2
 8008f98:	d9f5      	bls.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 8008f9a:	2503      	movs	r5, #3
 8008f9c:	e002      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 8008f9e:	2600      	movs	r6, #0
 8008fa0:	e7e9      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008fa2:	2500      	movs	r5, #0
>>>>>>> render
        break;
      }
    }

    if(ret == HAL_OK)
<<<<<<< HEAD
 80090cc:	bb45      	cbnz	r5, 8009120 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80090ce:	4b21      	ldr	r3, [pc, #132]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80090d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80090d4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80090d8:	d015      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x96>
 80090da:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80090dc:	429a      	cmp	r2, r3
 80090de:	d012      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80090e0:	4a1c      	ldr	r2, [pc, #112]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80090e2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80090e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80090ea:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80090ee:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80090f2:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80090f6:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80090fa:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80090fe:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009102:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
=======
 8008fa4:	bb45      	cbnz	r5, 8008ff8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008fa6:	4b21      	ldr	r3, [pc, #132]	; (800902c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8008fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008fac:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8008fb0:	d015      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x96>
 8008fb2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d012      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008fb8:	4a1c      	ldr	r2, [pc, #112]	; (800902c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8008fba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008fc2:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8008fc6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8008fca:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008fce:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8008fd2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8008fd6:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008fda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
>>>>>>> render
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
<<<<<<< HEAD
 8009106:	f013 0f01 	tst.w	r3, #1
 800910a:	d110      	bne.n	800912e <HAL_RCCEx_PeriphCLKConfig+0xbe>
=======
 8008fde:	f013 0f01 	tst.w	r3, #1
 8008fe2:	d110      	bne.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0xbe>
>>>>>>> render
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
<<<<<<< HEAD
 800910c:	b945      	cbnz	r5, 8009120 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800910e:	4a11      	ldr	r2, [pc, #68]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8009110:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8009114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009118:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800911a:	430b      	orrs	r3, r1
 800911c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
=======
 8008fe4:	b945      	cbnz	r5, 8008ff8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008fe6:	4a11      	ldr	r2, [pc, #68]	; (800902c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8008fe8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ff0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008ff2:	430b      	orrs	r3, r1
 8008ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
>>>>>>> render
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 8009120:	b1ee      	cbz	r6, 800915e <HAL_RCCEx_PeriphCLKConfig+0xee>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009122:	4a0c      	ldr	r2, [pc, #48]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8009124:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800912a:	6593      	str	r3, [r2, #88]	; 0x58
 800912c:	e017      	b.n	800915e <HAL_RCCEx_PeriphCLKConfig+0xee>
        tickstart = HAL_GetTick();
 800912e:	f7fc fa23 	bl	8005578 <HAL_GetTick>
 8009132:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009134:	4b07      	ldr	r3, [pc, #28]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8009136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800913a:	f013 0f02 	tst.w	r3, #2
 800913e:	d1e5      	bne.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009140:	f7fc fa1a 	bl	8005578 <HAL_GetTick>
 8009144:	1bc0      	subs	r0, r0, r7
 8009146:	f241 3388 	movw	r3, #5000	; 0x1388
 800914a:	4298      	cmp	r0, r3
 800914c:	d9f2      	bls.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 800914e:	2503      	movs	r5, #3
 8009150:	e7dc      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8009152:	bf00      	nop
 8009154:	40021000 	.word	0x40021000
 8009158:	40007000 	.word	0x40007000
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800915c:	2500      	movs	r5, #0
=======
 8008ff8:	b1ee      	cbz	r6, 8009036 <HAL_RCCEx_PeriphCLKConfig+0xee>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ffa:	4a0c      	ldr	r2, [pc, #48]	; (800902c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8008ffc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008ffe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009002:	6593      	str	r3, [r2, #88]	; 0x58
 8009004:	e017      	b.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0xee>
        tickstart = HAL_GetTick();
 8009006:	f7fc fa23 	bl	8005450 <HAL_GetTick>
 800900a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800900c:	4b07      	ldr	r3, [pc, #28]	; (800902c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800900e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009012:	f013 0f02 	tst.w	r3, #2
 8009016:	d1e5      	bne.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009018:	f7fc fa1a 	bl	8005450 <HAL_GetTick>
 800901c:	1bc0      	subs	r0, r0, r7
 800901e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009022:	4298      	cmp	r0, r3
 8009024:	d9f2      	bls.n	800900c <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 8009026:	2503      	movs	r5, #3
 8009028:	e7dc      	b.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800902a:	bf00      	nop
 800902c:	40021000 	.word	0x40021000
 8009030:	40007000 	.word	0x40007000
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009034:	2500      	movs	r5, #0
>>>>>>> render
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< HEAD
 800915e:	6823      	ldr	r3, [r4, #0]
 8009160:	f013 0f01 	tst.w	r3, #1
 8009164:	d008      	beq.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x108>
=======
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	f013 0f01 	tst.w	r3, #1
 800903c:	d008      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x108>
>>>>>>> render
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< HEAD
 8009166:	4a9f      	ldr	r2, [pc, #636]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009168:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800916c:	f023 0303 	bic.w	r3, r3, #3
 8009170:	6861      	ldr	r1, [r4, #4]
 8009172:	430b      	orrs	r3, r1
 8009174:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 800903e:	4a9f      	ldr	r2, [pc, #636]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009040:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009044:	f023 0303 	bic.w	r3, r3, #3
 8009048:	6861      	ldr	r1, [r4, #4]
 800904a:	430b      	orrs	r3, r1
 800904c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> render
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
<<<<<<< HEAD
 8009178:	6823      	ldr	r3, [r4, #0]
 800917a:	f013 0f02 	tst.w	r3, #2
 800917e:	d008      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x122>
=======
 8009050:	6823      	ldr	r3, [r4, #0]
 8009052:	f013 0f02 	tst.w	r3, #2
 8009056:	d008      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x122>
>>>>>>> render
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
<<<<<<< HEAD
 8009180:	4a98      	ldr	r2, [pc, #608]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009182:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009186:	f023 030c 	bic.w	r3, r3, #12
 800918a:	68a1      	ldr	r1, [r4, #8]
 800918c:	430b      	orrs	r3, r1
 800918e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8009058:	4a98      	ldr	r2, [pc, #608]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800905a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800905e:	f023 030c 	bic.w	r3, r3, #12
 8009062:	68a1      	ldr	r1, [r4, #8]
 8009064:	430b      	orrs	r3, r1
 8009066:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> render
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
<<<<<<< HEAD
 8009192:	6823      	ldr	r3, [r4, #0]
 8009194:	f013 0f04 	tst.w	r3, #4
 8009198:	d008      	beq.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
=======
 800906a:	6823      	ldr	r3, [r4, #0]
 800906c:	f013 0f04 	tst.w	r3, #4
 8009070:	d008      	beq.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x13c>
>>>>>>> render
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
<<<<<<< HEAD
 800919a:	4a92      	ldr	r2, [pc, #584]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800919c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80091a0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80091a4:	68e1      	ldr	r1, [r4, #12]
 80091a6:	430b      	orrs	r3, r1
 80091a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8009072:	4a92      	ldr	r2, [pc, #584]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009074:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009078:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800907c:	68e1      	ldr	r1, [r4, #12]
 800907e:	430b      	orrs	r3, r1
 8009080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> render
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
<<<<<<< HEAD
 80091ac:	6823      	ldr	r3, [r4, #0]
 80091ae:	f013 0f08 	tst.w	r3, #8
 80091b2:	d008      	beq.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
=======
 8009084:	6823      	ldr	r3, [r4, #0]
 8009086:	f013 0f08 	tst.w	r3, #8
 800908a:	d008      	beq.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x156>
>>>>>>> render
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
<<<<<<< HEAD
 80091b4:	4a8b      	ldr	r2, [pc, #556]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80091b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80091ba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80091be:	6921      	ldr	r1, [r4, #16]
 80091c0:	430b      	orrs	r3, r1
 80091c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 800908c:	4a8b      	ldr	r2, [pc, #556]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800908e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009092:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009096:	6921      	ldr	r1, [r4, #16]
 8009098:	430b      	orrs	r3, r1
 800909a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> render
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
<<<<<<< HEAD
 80091c6:	6823      	ldr	r3, [r4, #0]
 80091c8:	f013 0f10 	tst.w	r3, #16
 80091cc:	d008      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
=======
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	f013 0f10 	tst.w	r3, #16
 80090a4:	d008      	beq.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
>>>>>>> render
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
<<<<<<< HEAD
 80091ce:	4a85      	ldr	r2, [pc, #532]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80091d0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80091d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091d8:	6961      	ldr	r1, [r4, #20]
 80091da:	430b      	orrs	r3, r1
 80091dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 80090a6:	4a85      	ldr	r2, [pc, #532]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80090a8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80090ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090b0:	6961      	ldr	r1, [r4, #20]
 80090b2:	430b      	orrs	r3, r1
 80090b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> render
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
<<<<<<< HEAD
 80091e0:	6823      	ldr	r3, [r4, #0]
 80091e2:	f013 0f20 	tst.w	r3, #32
 80091e6:	d008      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
=======
 80090b8:	6823      	ldr	r3, [r4, #0]
 80090ba:	f013 0f20 	tst.w	r3, #32
 80090be:	d008      	beq.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
>>>>>>> render
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
<<<<<<< HEAD
 80091e8:	4a7e      	ldr	r2, [pc, #504]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80091ea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80091ee:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80091f2:	69a1      	ldr	r1, [r4, #24]
 80091f4:	430b      	orrs	r3, r1
 80091f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 80090c0:	4a7e      	ldr	r2, [pc, #504]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80090c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80090c6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80090ca:	69a1      	ldr	r1, [r4, #24]
 80090cc:	430b      	orrs	r3, r1
 80090ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> render
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< HEAD
 80091fa:	6823      	ldr	r3, [r4, #0]
 80091fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009200:	d008      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
=======
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80090d8:	d008      	beq.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
>>>>>>> render
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< HEAD
 8009202:	4a78      	ldr	r2, [pc, #480]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009204:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009208:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800920c:	69e1      	ldr	r1, [r4, #28]
 800920e:	430b      	orrs	r3, r1
 8009210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 80090da:	4a78      	ldr	r2, [pc, #480]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80090dc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80090e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80090e4:	69e1      	ldr	r1, [r4, #28]
 80090e6:	430b      	orrs	r3, r1
 80090e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> render
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
<<<<<<< HEAD
 8009214:	6823      	ldr	r3, [r4, #0]
 8009216:	f013 0f80 	tst.w	r3, #128	; 0x80
 800921a:	d008      	beq.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x1be>
=======
 80090ec:	6823      	ldr	r3, [r4, #0]
 80090ee:	f013 0f80 	tst.w	r3, #128	; 0x80
 80090f2:	d008      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x1be>
>>>>>>> render
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
<<<<<<< HEAD
 800921c:	4a71      	ldr	r2, [pc, #452]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800921e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009222:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8009226:	6a21      	ldr	r1, [r4, #32]
 8009228:	430b      	orrs	r3, r1
 800922a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 80090f4:	4a71      	ldr	r2, [pc, #452]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80090f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80090fa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80090fe:	6a21      	ldr	r1, [r4, #32]
 8009100:	430b      	orrs	r3, r1
 8009102:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> render
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< HEAD
 800922e:	6823      	ldr	r3, [r4, #0]
 8009230:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009234:	d008      	beq.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
=======
 8009106:	6823      	ldr	r3, [r4, #0]
 8009108:	f413 7f80 	tst.w	r3, #256	; 0x100
 800910c:	d008      	beq.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
>>>>>>> render
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< HEAD
 8009236:	4a6b      	ldr	r2, [pc, #428]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009238:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800923c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009240:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009242:	430b      	orrs	r3, r1
 8009244:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 800910e:	4a6b      	ldr	r2, [pc, #428]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009110:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009114:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009118:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800911a:	430b      	orrs	r3, r1
 800911c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> render
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
<<<<<<< HEAD
 8009248:	6823      	ldr	r3, [r4, #0]
 800924a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800924e:	d008      	beq.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
=======
 8009120:	6823      	ldr	r3, [r4, #0]
 8009122:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009126:	d008      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
>>>>>>> render
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
<<<<<<< HEAD
 8009250:	4a64      	ldr	r2, [pc, #400]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009252:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8009256:	f023 0303 	bic.w	r3, r3, #3
 800925a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800925c:	430b      	orrs	r3, r1
 800925e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
=======
 8009128:	4a64      	ldr	r2, [pc, #400]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800912a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800912e:	f023 0303 	bic.w	r3, r3, #3
 8009132:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8009134:	430b      	orrs	r3, r1
 8009136:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
>>>>>>> render
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
<<<<<<< HEAD
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009268:	d008      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x20c>
=======
 800913a:	6823      	ldr	r3, [r4, #0]
 800913c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009140:	d008      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x20c>
>>>>>>> render
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
<<<<<<< HEAD
 800926a:	4a5e      	ldr	r2, [pc, #376]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800926c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009270:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8009274:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009276:	430b      	orrs	r3, r1
 8009278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8009142:	4a5e      	ldr	r2, [pc, #376]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009144:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009148:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800914c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800914e:	430b      	orrs	r3, r1
 8009150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> render
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
<<<<<<< HEAD
 800927c:	6823      	ldr	r3, [r4, #0]
 800927e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8009282:	d00c      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x22e>
=======
 8009154:	6823      	ldr	r3, [r4, #0]
 8009156:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800915a:	d00c      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x22e>
>>>>>>> render
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
<<<<<<< HEAD
 8009284:	4a57      	ldr	r2, [pc, #348]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009286:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800928a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800928e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009290:	430b      	orrs	r3, r1
 8009292:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009296:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009298:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800929c:	d079      	beq.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x322>
=======
 800915c:	4a57      	ldr	r2, [pc, #348]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800915e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009162:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009166:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009168:	430b      	orrs	r3, r1
 800916a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800916e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009170:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009174:	d079      	beq.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x322>
>>>>>>> render
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
<<<<<<< HEAD
 800929e:	6823      	ldr	r3, [r4, #0]
 80092a0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80092a4:	d00c      	beq.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x250>
=======
 8009176:	6823      	ldr	r3, [r4, #0]
 8009178:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800917c:	d00c      	beq.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x250>
>>>>>>> render
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
<<<<<<< HEAD
 80092a6:	4a4f      	ldr	r2, [pc, #316]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80092a8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80092ac:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80092b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092b2:	430b      	orrs	r3, r1
 80092b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80092b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092be:	d06d      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x32c>
=======
 800917e:	4a4f      	ldr	r2, [pc, #316]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009180:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009184:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8009188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800918a:	430b      	orrs	r3, r1
 800918c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009190:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009192:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009196:	d06d      	beq.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x32c>
>>>>>>> render
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
<<<<<<< HEAD
 80092c0:	6823      	ldr	r3, [r4, #0]
 80092c2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80092c6:	d00c      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x272>
=======
 8009198:	6823      	ldr	r3, [r4, #0]
 800919a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800919e:	d00c      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x272>
>>>>>>> render
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
<<<<<<< HEAD
 80092c8:	4a46      	ldr	r2, [pc, #280]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80092ca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80092ce:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80092d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80092d4:	430b      	orrs	r3, r1
 80092d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80092da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80092dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80092e0:	d061      	beq.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x336>
=======
 80091a0:	4a46      	ldr	r2, [pc, #280]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80091a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80091a6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80091aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80091ac:	430b      	orrs	r3, r1
 80091ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80091b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80091b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80091b8:	d061      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x336>
>>>>>>> render
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
<<<<<<< HEAD
 80092e2:	6823      	ldr	r3, [r4, #0]
 80092e4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80092e8:	d00c      	beq.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80092ea:	4a3e      	ldr	r2, [pc, #248]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80092ec:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80092f0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80092f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80092f6:	430b      	orrs	r3, r1
 80092f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80092fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80092fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009302:	d055      	beq.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x340>
=======
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80091c0:	d00c      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80091c2:	4a3e      	ldr	r2, [pc, #248]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80091c4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80091c8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80091cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80091ce:	430b      	orrs	r3, r1
 80091d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80091d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80091d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091da:	d055      	beq.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x340>
>>>>>>> render
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
<<<<<<< HEAD
 8009304:	6823      	ldr	r3, [r4, #0]
 8009306:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800930a:	d00c      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800930c:	4a35      	ldr	r2, [pc, #212]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800930e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009312:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8009316:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009318:	430b      	orrs	r3, r1
 800931a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800931e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009320:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009324:	d049      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
=======
 80091dc:	6823      	ldr	r3, [r4, #0]
 80091de:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80091e2:	d00c      	beq.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80091e4:	4a35      	ldr	r2, [pc, #212]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80091e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80091ea:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80091ee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80091f0:	430b      	orrs	r3, r1
 80091f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80091f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091fc:	d049      	beq.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x34a>
>>>>>>> render
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
<<<<<<< HEAD
 8009326:	6823      	ldr	r3, [r4, #0]
 8009328:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800932c:	d00c      	beq.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
=======
 80091fe:	6823      	ldr	r3, [r4, #0]
 8009200:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8009204:	d00c      	beq.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
>>>>>>> render
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
<<<<<<< HEAD
 800932e:	4a2d      	ldr	r2, [pc, #180]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009330:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009334:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8009338:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800933a:	430b      	orrs	r3, r1
 800933c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009340:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009342:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009346:	d03d      	beq.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x354>
=======
 8009206:	4a2d      	ldr	r2, [pc, #180]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009208:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800920c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8009210:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009212:	430b      	orrs	r3, r1
 8009214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009218:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800921a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800921e:	d03d      	beq.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x354>
>>>>>>> render
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
<<<<<<< HEAD
 8009348:	6823      	ldr	r3, [r4, #0]
 800934a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800934e:	d00c      	beq.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
=======
 8009220:	6823      	ldr	r3, [r4, #0]
 8009222:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009226:	d00c      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
>>>>>>> render
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
<<<<<<< HEAD
 8009350:	4a24      	ldr	r2, [pc, #144]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009352:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009356:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800935a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800935c:	430b      	orrs	r3, r1
 800935e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009362:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009368:	d031      	beq.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x35e>
=======
 8009228:	4a24      	ldr	r2, [pc, #144]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800922a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800922e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009232:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009234:	430b      	orrs	r3, r1
 8009236:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800923a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800923c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009240:	d031      	beq.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
>>>>>>> render
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
<<<<<<< HEAD
 800936a:	6823      	ldr	r3, [r4, #0]
 800936c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8009370:	d00c      	beq.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x31c>
=======
 8009242:	6823      	ldr	r3, [r4, #0]
 8009244:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8009248:	d00c      	beq.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x31c>
>>>>>>> render
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
<<<<<<< HEAD
 8009372:	4a1c      	ldr	r2, [pc, #112]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009374:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8009378:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800937c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800937e:	430b      	orrs	r3, r1
 8009380:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009384:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009386:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800938a:	d025      	beq.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
=======
 800924a:	4a1c      	ldr	r2, [pc, #112]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800924c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8009250:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009254:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009256:	430b      	orrs	r3, r1
 8009258:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800925c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800925e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009262:	d025      	beq.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
>>>>>>> render
  }

#endif /* QUADSPI */

  return status;
}
<<<<<<< HEAD
 800938c:	4628      	mov	r0, r5
 800938e:	b003      	add	sp, #12
 8009390:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009392:	68d3      	ldr	r3, [r2, #12]
 8009394:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009398:	60d3      	str	r3, [r2, #12]
 800939a:	e780      	b.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x22e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800939c:	68d3      	ldr	r3, [r2, #12]
 800939e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093a2:	60d3      	str	r3, [r2, #12]
 80093a4:	e78c      	b.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80093a6:	68d3      	ldr	r3, [r2, #12]
 80093a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093ac:	60d3      	str	r3, [r2, #12]
 80093ae:	e798      	b.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x272>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80093b0:	68d3      	ldr	r3, [r2, #12]
 80093b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093b6:	60d3      	str	r3, [r2, #12]
 80093b8:	e7a4      	b.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x294>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80093ba:	68d3      	ldr	r3, [r2, #12]
 80093bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093c0:	60d3      	str	r3, [r2, #12]
 80093c2:	e7b0      	b.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80093c4:	68d3      	ldr	r3, [r2, #12]
 80093c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093ca:	60d3      	str	r3, [r2, #12]
 80093cc:	e7bc      	b.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80093ce:	68d3      	ldr	r3, [r2, #12]
 80093d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093d4:	60d3      	str	r3, [r2, #12]
 80093d6:	e7c8      	b.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80093d8:	68d3      	ldr	r3, [r2, #12]
 80093da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093de:	60d3      	str	r3, [r2, #12]
 80093e0:	e7d4      	b.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80093e2:	bf00      	nop
 80093e4:	40021000 	.word	0x40021000

080093e8 <HAL_SPI_Init>:
=======
 8009264:	4628      	mov	r0, r5
 8009266:	b003      	add	sp, #12
 8009268:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800926a:	68d3      	ldr	r3, [r2, #12]
 800926c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009270:	60d3      	str	r3, [r2, #12]
 8009272:	e780      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x22e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009274:	68d3      	ldr	r3, [r2, #12]
 8009276:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800927a:	60d3      	str	r3, [r2, #12]
 800927c:	e78c      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800927e:	68d3      	ldr	r3, [r2, #12]
 8009280:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009284:	60d3      	str	r3, [r2, #12]
 8009286:	e798      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x272>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009288:	68d3      	ldr	r3, [r2, #12]
 800928a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800928e:	60d3      	str	r3, [r2, #12]
 8009290:	e7a4      	b.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x294>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009292:	68d3      	ldr	r3, [r2, #12]
 8009294:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009298:	60d3      	str	r3, [r2, #12]
 800929a:	e7b0      	b.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800929c:	68d3      	ldr	r3, [r2, #12]
 800929e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092a2:	60d3      	str	r3, [r2, #12]
 80092a4:	e7bc      	b.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80092a6:	68d3      	ldr	r3, [r2, #12]
 80092a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092ac:	60d3      	str	r3, [r2, #12]
 80092ae:	e7c8      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80092b0:	68d3      	ldr	r3, [r2, #12]
 80092b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092b6:	60d3      	str	r3, [r2, #12]
 80092b8:	e7d4      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80092ba:	bf00      	nop
 80092bc:	40021000 	.word	0x40021000

080092c0 <HAL_SPI_Init>:
>>>>>>> render
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
<<<<<<< HEAD
 80093e8:	2800      	cmp	r0, #0
 80093ea:	d06f      	beq.n	80094cc <HAL_SPI_Init+0xe4>
{
 80093ec:	b510      	push	{r4, lr}
 80093ee:	4604      	mov	r4, r0
=======
 80092c0:	2800      	cmp	r0, #0
 80092c2:	d06f      	beq.n	80093a4 <HAL_SPI_Init+0xe4>
{
 80092c4:	b510      	push	{r4, lr}
 80092c6:	4604      	mov	r4, r0
>>>>>>> render
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
<<<<<<< HEAD
 80093f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80093f2:	b933      	cbnz	r3, 8009402 <HAL_SPI_Init+0x1a>
=======
 80092c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80092ca:	b933      	cbnz	r3, 80092da <HAL_SPI_Init+0x1a>
>>>>>>> render
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< HEAD
 80093f4:	6843      	ldr	r3, [r0, #4]
 80093f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093fa:	d005      	beq.n	8009408 <HAL_SPI_Init+0x20>
=======
 80092cc:	6843      	ldr	r3, [r0, #4]
 80092ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092d2:	d005      	beq.n	80092e0 <HAL_SPI_Init+0x20>
>>>>>>> render
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
<<<<<<< HEAD
 80093fc:	2300      	movs	r3, #0
 80093fe:	61c3      	str	r3, [r0, #28]
 8009400:	e002      	b.n	8009408 <HAL_SPI_Init+0x20>
=======
 80092d4:	2300      	movs	r3, #0
 80092d6:	61c3      	str	r3, [r0, #28]
 80092d8:	e002      	b.n	80092e0 <HAL_SPI_Init+0x20>
>>>>>>> render
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
<<<<<<< HEAD
 8009402:	2300      	movs	r3, #0
 8009404:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009406:	6143      	str	r3, [r0, #20]
=======
 80092da:	2300      	movs	r3, #0
 80092dc:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80092de:	6143      	str	r3, [r0, #20]
>>>>>>> render
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< HEAD
 8009408:	2300      	movs	r3, #0
 800940a:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800940c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8009410:	2b00      	cmp	r3, #0
 8009412:	d052      	beq.n	80094ba <HAL_SPI_Init+0xd2>
=======
 80092e0:	2300      	movs	r3, #0
 80092e2:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80092e4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d052      	beq.n	8009392 <HAL_SPI_Init+0xd2>
>>>>>>> render
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< HEAD
 8009414:	2302      	movs	r3, #2
 8009416:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800941a:	6822      	ldr	r2, [r4, #0]
 800941c:	6813      	ldr	r3, [r2, #0]
 800941e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009422:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009424:	68e3      	ldr	r3, [r4, #12]
 8009426:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800942a:	d94c      	bls.n	80094c6 <HAL_SPI_Init+0xde>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800942c:	2200      	movs	r2, #0
=======
 80092ec:	2302      	movs	r3, #2
 80092ee:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80092f2:	6822      	ldr	r2, [r4, #0]
 80092f4:	6813      	ldr	r3, [r2, #0]
 80092f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092fa:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80092fc:	68e3      	ldr	r3, [r4, #12]
 80092fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009302:	d94c      	bls.n	800939e <HAL_SPI_Init+0xde>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009304:	2200      	movs	r2, #0
>>>>>>> render
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
<<<<<<< HEAD
 800942e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009432:	d004      	beq.n	800943e <HAL_SPI_Init+0x56>
 8009434:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009438:	d001      	beq.n	800943e <HAL_SPI_Init+0x56>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800943a:	2300      	movs	r3, #0
 800943c:	62a3      	str	r3, [r4, #40]	; 0x28
=======
 8009306:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800930a:	d004      	beq.n	8009316 <HAL_SPI_Init+0x56>
 800930c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009310:	d001      	beq.n	8009316 <HAL_SPI_Init+0x56>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009312:	2300      	movs	r3, #0
 8009314:	62a3      	str	r3, [r4, #40]	; 0x28
>>>>>>> render
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
<<<<<<< HEAD
 800943e:	6863      	ldr	r3, [r4, #4]
 8009440:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8009444:	68a1      	ldr	r1, [r4, #8]
 8009446:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800944a:	430b      	orrs	r3, r1
 800944c:	6921      	ldr	r1, [r4, #16]
 800944e:	f001 0102 	and.w	r1, r1, #2
 8009452:	430b      	orrs	r3, r1
 8009454:	6961      	ldr	r1, [r4, #20]
 8009456:	f001 0101 	and.w	r1, r1, #1
 800945a:	430b      	orrs	r3, r1
 800945c:	69a1      	ldr	r1, [r4, #24]
 800945e:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8009462:	430b      	orrs	r3, r1
 8009464:	69e1      	ldr	r1, [r4, #28]
 8009466:	f001 0138 	and.w	r1, r1, #56	; 0x38
 800946a:	430b      	orrs	r3, r1
 800946c:	6a21      	ldr	r1, [r4, #32]
 800946e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8009472:	430b      	orrs	r3, r1
 8009474:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8009476:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 800947a:	6820      	ldr	r0, [r4, #0]
 800947c:	430b      	orrs	r3, r1
 800947e:	6003      	str	r3, [r0, #0]
=======
 8009316:	6863      	ldr	r3, [r4, #4]
 8009318:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800931c:	68a1      	ldr	r1, [r4, #8]
 800931e:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8009322:	430b      	orrs	r3, r1
 8009324:	6921      	ldr	r1, [r4, #16]
 8009326:	f001 0102 	and.w	r1, r1, #2
 800932a:	430b      	orrs	r3, r1
 800932c:	6961      	ldr	r1, [r4, #20]
 800932e:	f001 0101 	and.w	r1, r1, #1
 8009332:	430b      	orrs	r3, r1
 8009334:	69a1      	ldr	r1, [r4, #24]
 8009336:	f401 7100 	and.w	r1, r1, #512	; 0x200
 800933a:	430b      	orrs	r3, r1
 800933c:	69e1      	ldr	r1, [r4, #28]
 800933e:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8009342:	430b      	orrs	r3, r1
 8009344:	6a21      	ldr	r1, [r4, #32]
 8009346:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800934a:	430b      	orrs	r3, r1
 800934c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800934e:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8009352:	6820      	ldr	r0, [r4, #0]
 8009354:	430b      	orrs	r3, r1
 8009356:	6003      	str	r3, [r0, #0]
>>>>>>> render
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
<<<<<<< HEAD
 8009480:	8b63      	ldrh	r3, [r4, #26]
 8009482:	f003 0304 	and.w	r3, r3, #4
 8009486:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009488:	f001 0110 	and.w	r1, r1, #16
 800948c:	430b      	orrs	r3, r1
 800948e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009490:	f001 0108 	and.w	r1, r1, #8
 8009494:	430b      	orrs	r3, r1
 8009496:	68e1      	ldr	r1, [r4, #12]
 8009498:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 800949c:	430b      	orrs	r3, r1
 800949e:	6821      	ldr	r1, [r4, #0]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	604b      	str	r3, [r1, #4]
=======
 8009358:	8b63      	ldrh	r3, [r4, #26]
 800935a:	f003 0304 	and.w	r3, r3, #4
 800935e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009360:	f001 0110 	and.w	r1, r1, #16
 8009364:	430b      	orrs	r3, r1
 8009366:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009368:	f001 0108 	and.w	r1, r1, #8
 800936c:	430b      	orrs	r3, r1
 800936e:	68e1      	ldr	r1, [r4, #12]
 8009370:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8009374:	430b      	orrs	r3, r1
 8009376:	6821      	ldr	r1, [r4, #0]
 8009378:	4313      	orrs	r3, r2
 800937a:	604b      	str	r3, [r1, #4]
>>>>>>> render
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< HEAD
 80094a4:	6822      	ldr	r2, [r4, #0]
 80094a6:	69d3      	ldr	r3, [r2, #28]
 80094a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094ac:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80094ae:	2000      	movs	r0, #0
 80094b0:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80094b2:	2301      	movs	r3, #1
 80094b4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 80094b8:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80094ba:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80094be:	4620      	mov	r0, r4
 80094c0:	f7fa fdc8 	bl	8004054 <HAL_SPI_MspInit>
 80094c4:	e7a6      	b.n	8009414 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80094c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80094ca:	e7b0      	b.n	800942e <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 80094cc:	2001      	movs	r0, #1
}
 80094ce:	4770      	bx	lr

080094d0 <HAL_SRAM_Init>:
=======
 800937c:	6822      	ldr	r2, [r4, #0]
 800937e:	69d3      	ldr	r3, [r2, #28]
 8009380:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009384:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009386:	2000      	movs	r0, #0
 8009388:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800938a:	2301      	movs	r3, #1
 800938c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8009390:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8009392:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8009396:	4620      	mov	r0, r4
 8009398:	f7fa fe78 	bl	800408c <HAL_SPI_MspInit>
 800939c:	e7a6      	b.n	80092ec <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800939e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80093a2:	e7b0      	b.n	8009306 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 80093a4:	2001      	movs	r0, #1
}
 80093a6:	4770      	bx	lr

080093a8 <HAL_SRAM_Init>:
>>>>>>> render
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
<<<<<<< HEAD
 80094d0:	b340      	cbz	r0, 8009524 <HAL_SRAM_Init+0x54>
{
 80094d2:	b570      	push	{r4, r5, r6, lr}
 80094d4:	460e      	mov	r6, r1
 80094d6:	4615      	mov	r5, r2
 80094d8:	4604      	mov	r4, r0
=======
 80093a8:	b340      	cbz	r0, 80093fc <HAL_SRAM_Init+0x54>
{
 80093aa:	b570      	push	{r4, r5, r6, lr}
 80093ac:	460e      	mov	r6, r1
 80093ae:	4615      	mov	r5, r2
 80093b0:	4604      	mov	r4, r0
>>>>>>> render
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
<<<<<<< HEAD
 80094da:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80094de:	b1e3      	cbz	r3, 800951a <HAL_SRAM_Init+0x4a>
=======
 80093b2:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80093b6:	b1e3      	cbz	r3, 80093f2 <HAL_SRAM_Init+0x4a>
>>>>>>> render
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
<<<<<<< HEAD
 80094e0:	4621      	mov	r1, r4
 80094e2:	f851 0b08 	ldr.w	r0, [r1], #8
 80094e6:	f001 f87d 	bl	800a5e4 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80094ea:	68a2      	ldr	r2, [r4, #8]
 80094ec:	4631      	mov	r1, r6
 80094ee:	6820      	ldr	r0, [r4, #0]
 80094f0:	f001 f8e8 	bl	800a6c4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80094f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80094f6:	68a2      	ldr	r2, [r4, #8]
 80094f8:	4629      	mov	r1, r5
 80094fa:	6860      	ldr	r0, [r4, #4]
 80094fc:	f001 f915 	bl	800a72a <FMC_NORSRAM_Extended_Timing_Init>
=======
 80093b8:	4621      	mov	r1, r4
 80093ba:	f851 0b08 	ldr.w	r0, [r1], #8
 80093be:	f001 f87d 	bl	800a4bc <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80093c2:	68a2      	ldr	r2, [r4, #8]
 80093c4:	4631      	mov	r1, r6
 80093c6:	6820      	ldr	r0, [r4, #0]
 80093c8:	f001 f8e8 	bl	800a59c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80093cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80093ce:	68a2      	ldr	r2, [r4, #8]
 80093d0:	4629      	mov	r1, r5
 80093d2:	6860      	ldr	r0, [r4, #4]
 80093d4:	f001 f915 	bl	800a602 <FMC_NORSRAM_Extended_Timing_Init>
>>>>>>> render
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
<<<<<<< HEAD
 8009500:	6822      	ldr	r2, [r4, #0]
 8009502:	68a1      	ldr	r1, [r4, #8]
 8009504:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009508:	f043 0301 	orr.w	r3, r3, #1
 800950c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8009510:	2301      	movs	r3, #1
 8009512:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8009516:	2000      	movs	r0, #0
}
 8009518:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 800951a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SRAM_MspInit(hsram);
 800951e:	f7f8 fad9 	bl	8001ad4 <HAL_SRAM_MspInit>
 8009522:	e7dd      	b.n	80094e0 <HAL_SRAM_Init+0x10>
    return HAL_ERROR;
 8009524:	2001      	movs	r0, #1
}
 8009526:	4770      	bx	lr

08009528 <TIM_OC1_SetConfig>:
=======
 80093d8:	6822      	ldr	r2, [r4, #0]
 80093da:	68a1      	ldr	r1, [r4, #8]
 80093dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093e0:	f043 0301 	orr.w	r3, r3, #1
 80093e4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80093e8:	2301      	movs	r3, #1
 80093ea:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 80093ee:	2000      	movs	r0, #0
}
 80093f0:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 80093f2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SRAM_MspInit(hsram);
 80093f6:	f7f8 fb6d 	bl	8001ad4 <HAL_SRAM_MspInit>
 80093fa:	e7dd      	b.n	80093b8 <HAL_SRAM_Init+0x10>
    return HAL_ERROR;
 80093fc:	2001      	movs	r0, #1
}
 80093fe:	4770      	bx	lr

08009400 <TIM_OC1_SetConfig>:
>>>>>>> render
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8009528:	b430      	push	{r4, r5}
=======
 8009400:	b430      	push	{r4, r5}
>>>>>>> render
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< HEAD
 800952a:	6a03      	ldr	r3, [r0, #32]
 800952c:	f023 0301 	bic.w	r3, r3, #1
 8009530:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009532:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009534:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009536:	6982      	ldr	r2, [r0, #24]
=======
 8009402:	6a03      	ldr	r3, [r0, #32]
 8009404:	f023 0301 	bic.w	r3, r3, #1
 8009408:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800940a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800940c:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800940e:	6982      	ldr	r2, [r0, #24]
>>>>>>> render

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
<<<<<<< HEAD
 8009538:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800953c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009540:	680c      	ldr	r4, [r1, #0]
 8009542:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009544:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009548:	688c      	ldr	r4, [r1, #8]
 800954a:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800954c:	4c21      	ldr	r4, [pc, #132]	; (80095d4 <TIM_OC1_SetConfig+0xac>)
 800954e:	42a0      	cmp	r0, r4
 8009550:	d013      	beq.n	800957a <TIM_OC1_SetConfig+0x52>
 8009552:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8009556:	42a0      	cmp	r0, r4
 8009558:	d00f      	beq.n	800957a <TIM_OC1_SetConfig+0x52>
 800955a:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800955e:	42a0      	cmp	r0, r4
 8009560:	d00b      	beq.n	800957a <TIM_OC1_SetConfig+0x52>
 8009562:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009566:	42a0      	cmp	r0, r4
 8009568:	d007      	beq.n	800957a <TIM_OC1_SetConfig+0x52>
 800956a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800956e:	42a0      	cmp	r0, r4
 8009570:	d003      	beq.n	800957a <TIM_OC1_SetConfig+0x52>
 8009572:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8009576:	42a0      	cmp	r0, r4
 8009578:	d105      	bne.n	8009586 <TIM_OC1_SetConfig+0x5e>
=======
 8009410:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009414:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009418:	680c      	ldr	r4, [r1, #0]
 800941a:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800941c:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009420:	688c      	ldr	r4, [r1, #8]
 8009422:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009424:	4c21      	ldr	r4, [pc, #132]	; (80094ac <TIM_OC1_SetConfig+0xac>)
 8009426:	42a0      	cmp	r0, r4
 8009428:	d013      	beq.n	8009452 <TIM_OC1_SetConfig+0x52>
 800942a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800942e:	42a0      	cmp	r0, r4
 8009430:	d00f      	beq.n	8009452 <TIM_OC1_SetConfig+0x52>
 8009432:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8009436:	42a0      	cmp	r0, r4
 8009438:	d00b      	beq.n	8009452 <TIM_OC1_SetConfig+0x52>
 800943a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800943e:	42a0      	cmp	r0, r4
 8009440:	d007      	beq.n	8009452 <TIM_OC1_SetConfig+0x52>
 8009442:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009446:	42a0      	cmp	r0, r4
 8009448:	d003      	beq.n	8009452 <TIM_OC1_SetConfig+0x52>
 800944a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800944e:	42a0      	cmp	r0, r4
 8009450:	d105      	bne.n	800945e <TIM_OC1_SetConfig+0x5e>
>>>>>>> render
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 800957a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800957e:	68cc      	ldr	r4, [r1, #12]
 8009580:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009582:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009586:	4c13      	ldr	r4, [pc, #76]	; (80095d4 <TIM_OC1_SetConfig+0xac>)
 8009588:	42a0      	cmp	r0, r4
 800958a:	d013      	beq.n	80095b4 <TIM_OC1_SetConfig+0x8c>
 800958c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8009590:	42a0      	cmp	r0, r4
 8009592:	d00f      	beq.n	80095b4 <TIM_OC1_SetConfig+0x8c>
 8009594:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8009598:	42a0      	cmp	r0, r4
 800959a:	d00b      	beq.n	80095b4 <TIM_OC1_SetConfig+0x8c>
 800959c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80095a0:	42a0      	cmp	r0, r4
 80095a2:	d007      	beq.n	80095b4 <TIM_OC1_SetConfig+0x8c>
 80095a4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80095a8:	42a0      	cmp	r0, r4
 80095aa:	d003      	beq.n	80095b4 <TIM_OC1_SetConfig+0x8c>
 80095ac:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80095b0:	42a0      	cmp	r0, r4
 80095b2:	d107      	bne.n	80095c4 <TIM_OC1_SetConfig+0x9c>
=======
 8009452:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009456:	68cc      	ldr	r4, [r1, #12]
 8009458:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800945a:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800945e:	4c13      	ldr	r4, [pc, #76]	; (80094ac <TIM_OC1_SetConfig+0xac>)
 8009460:	42a0      	cmp	r0, r4
 8009462:	d013      	beq.n	800948c <TIM_OC1_SetConfig+0x8c>
 8009464:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8009468:	42a0      	cmp	r0, r4
 800946a:	d00f      	beq.n	800948c <TIM_OC1_SetConfig+0x8c>
 800946c:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8009470:	42a0      	cmp	r0, r4
 8009472:	d00b      	beq.n	800948c <TIM_OC1_SetConfig+0x8c>
 8009474:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009478:	42a0      	cmp	r0, r4
 800947a:	d007      	beq.n	800948c <TIM_OC1_SetConfig+0x8c>
 800947c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009480:	42a0      	cmp	r0, r4
 8009482:	d003      	beq.n	800948c <TIM_OC1_SetConfig+0x8c>
 8009484:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8009488:	42a0      	cmp	r0, r4
 800948a:	d107      	bne.n	800949c <TIM_OC1_SetConfig+0x9c>
>>>>>>> render
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
<<<<<<< HEAD
 80095b4:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80095b8:	694c      	ldr	r4, [r1, #20]
 80095ba:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80095be:	698d      	ldr	r5, [r1, #24]
 80095c0:	ea45 050c 	orr.w	r5, r5, ip
=======
 800948c:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009490:	694c      	ldr	r4, [r1, #20]
 8009492:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009496:	698d      	ldr	r5, [r1, #24]
 8009498:	ea45 050c 	orr.w	r5, r5, ip
>>>>>>> render
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80095c4:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095c6:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80095c8:	684a      	ldr	r2, [r1, #4]
 80095ca:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095cc:	6203      	str	r3, [r0, #32]
}
 80095ce:	bc30      	pop	{r4, r5}
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	40012c00 	.word	0x40012c00

080095d8 <TIM_OC3_SetConfig>:
=======
 800949c:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800949e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80094a0:	684a      	ldr	r2, [r1, #4]
 80094a2:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094a4:	6203      	str	r3, [r0, #32]
}
 80094a6:	bc30      	pop	{r4, r5}
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	40012c00 	.word	0x40012c00

080094b0 <TIM_OC3_SetConfig>:
>>>>>>> render
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80095d8:	b430      	push	{r4, r5}
=======
 80094b0:	b430      	push	{r4, r5}
>>>>>>> render
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< HEAD
 80095da:	6a03      	ldr	r3, [r0, #32]
 80095dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095e0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095e2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095e4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095e6:	69c2      	ldr	r2, [r0, #28]
=======
 80094b2:	6a03      	ldr	r3, [r0, #32]
 80094b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094b8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094ba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094bc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094be:	69c2      	ldr	r2, [r0, #28]
>>>>>>> render

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
<<<<<<< HEAD
 80095e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80095ec:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095f0:	680d      	ldr	r5, [r1, #0]
 80095f2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80095f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80095f8:	688d      	ldr	r5, [r1, #8]
 80095fa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80095fe:	4d1c      	ldr	r5, [pc, #112]	; (8009670 <TIM_OC3_SetConfig+0x98>)
 8009600:	42a8      	cmp	r0, r5
 8009602:	d007      	beq.n	8009614 <TIM_OC3_SetConfig+0x3c>
 8009604:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009608:	42a8      	cmp	r0, r5
 800960a:	d003      	beq.n	8009614 <TIM_OC3_SetConfig+0x3c>
 800960c:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8009610:	42a8      	cmp	r0, r5
 8009612:	d106      	bne.n	8009622 <TIM_OC3_SetConfig+0x4a>
=======
 80094c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80094c4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094c8:	680d      	ldr	r5, [r1, #0]
 80094ca:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80094cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80094d0:	688d      	ldr	r5, [r1, #8]
 80094d2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80094d6:	4d1c      	ldr	r5, [pc, #112]	; (8009548 <TIM_OC3_SetConfig+0x98>)
 80094d8:	42a8      	cmp	r0, r5
 80094da:	d007      	beq.n	80094ec <TIM_OC3_SetConfig+0x3c>
 80094dc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80094e0:	42a8      	cmp	r0, r5
 80094e2:	d003      	beq.n	80094ec <TIM_OC3_SetConfig+0x3c>
 80094e4:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80094e8:	42a8      	cmp	r0, r5
 80094ea:	d106      	bne.n	80094fa <TIM_OC3_SetConfig+0x4a>
>>>>>>> render
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 8009614:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009618:	68cd      	ldr	r5, [r1, #12]
 800961a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800961e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009622:	4d13      	ldr	r5, [pc, #76]	; (8009670 <TIM_OC3_SetConfig+0x98>)
 8009624:	42a8      	cmp	r0, r5
 8009626:	d013      	beq.n	8009650 <TIM_OC3_SetConfig+0x78>
 8009628:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800962c:	42a8      	cmp	r0, r5
 800962e:	d00f      	beq.n	8009650 <TIM_OC3_SetConfig+0x78>
 8009630:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009634:	42a8      	cmp	r0, r5
 8009636:	d00b      	beq.n	8009650 <TIM_OC3_SetConfig+0x78>
 8009638:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800963c:	42a8      	cmp	r0, r5
 800963e:	d007      	beq.n	8009650 <TIM_OC3_SetConfig+0x78>
 8009640:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009644:	42a8      	cmp	r0, r5
 8009646:	d003      	beq.n	8009650 <TIM_OC3_SetConfig+0x78>
 8009648:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800964c:	42a8      	cmp	r0, r5
 800964e:	d107      	bne.n	8009660 <TIM_OC3_SetConfig+0x88>
=======
 80094ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80094f0:	68cd      	ldr	r5, [r1, #12]
 80094f2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80094f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094fa:	4d13      	ldr	r5, [pc, #76]	; (8009548 <TIM_OC3_SetConfig+0x98>)
 80094fc:	42a8      	cmp	r0, r5
 80094fe:	d013      	beq.n	8009528 <TIM_OC3_SetConfig+0x78>
 8009500:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009504:	42a8      	cmp	r0, r5
 8009506:	d00f      	beq.n	8009528 <TIM_OC3_SetConfig+0x78>
 8009508:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800950c:	42a8      	cmp	r0, r5
 800950e:	d00b      	beq.n	8009528 <TIM_OC3_SetConfig+0x78>
 8009510:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009514:	42a8      	cmp	r0, r5
 8009516:	d007      	beq.n	8009528 <TIM_OC3_SetConfig+0x78>
 8009518:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800951c:	42a8      	cmp	r0, r5
 800951e:	d003      	beq.n	8009528 <TIM_OC3_SetConfig+0x78>
 8009520:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009524:	42a8      	cmp	r0, r5
 8009526:	d107      	bne.n	8009538 <TIM_OC3_SetConfig+0x88>
>>>>>>> render
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
<<<<<<< HEAD
 8009650:	f424 5c40 	bic.w	ip, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009654:	694c      	ldr	r4, [r1, #20]
 8009656:	ea4c 1c04 	orr.w	ip, ip, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800965a:	698c      	ldr	r4, [r1, #24]
 800965c:	ea4c 1404 	orr.w	r4, ip, r4, lsl #4
=======
 8009528:	f424 5c40 	bic.w	ip, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800952c:	694c      	ldr	r4, [r1, #20]
 800952e:	ea4c 1c04 	orr.w	ip, ip, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009532:	698c      	ldr	r4, [r1, #24]
 8009534:	ea4c 1404 	orr.w	r4, ip, r4, lsl #4
>>>>>>> render
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8009660:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009662:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009664:	684a      	ldr	r2, [r1, #4]
 8009666:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009668:	6203      	str	r3, [r0, #32]
}
 800966a:	bc30      	pop	{r4, r5}
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop
 8009670:	40012c00 	.word	0x40012c00

08009674 <TIM_OC4_SetConfig>:
=======
 8009538:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800953a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800953c:	684a      	ldr	r2, [r1, #4]
 800953e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009540:	6203      	str	r3, [r0, #32]
}
 8009542:	bc30      	pop	{r4, r5}
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop
 8009548:	40012c00 	.word	0x40012c00

0800954c <TIM_OC4_SetConfig>:
>>>>>>> render
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8009674:	b430      	push	{r4, r5}
=======
 800954c:	b430      	push	{r4, r5}
>>>>>>> render
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< HEAD
 8009676:	6a03      	ldr	r3, [r0, #32]
 8009678:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800967c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800967e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009680:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009682:	69c2      	ldr	r2, [r0, #28]
=======
 800954e:	6a03      	ldr	r3, [r0, #32]
 8009550:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009554:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009556:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009558:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800955a:	69c2      	ldr	r2, [r0, #28]
>>>>>>> render

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
<<<<<<< HEAD
 8009684:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009688:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800968c:	680d      	ldr	r5, [r1, #0]
 800968e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009692:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009696:	688d      	ldr	r5, [r1, #8]
 8009698:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800969c:	4d1b      	ldr	r5, [pc, #108]	; (800970c <TIM_OC4_SetConfig+0x98>)
 800969e:	42a8      	cmp	r0, r5
 80096a0:	d007      	beq.n	80096b2 <TIM_OC4_SetConfig+0x3e>
 80096a2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80096a6:	42a8      	cmp	r0, r5
 80096a8:	d003      	beq.n	80096b2 <TIM_OC4_SetConfig+0x3e>
 80096aa:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80096ae:	42a8      	cmp	r0, r5
 80096b0:	d106      	bne.n	80096c0 <TIM_OC4_SetConfig+0x4c>
=======
 800955c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009560:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009564:	680d      	ldr	r5, [r1, #0]
 8009566:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800956a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800956e:	688d      	ldr	r5, [r1, #8]
 8009570:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009574:	4d1b      	ldr	r5, [pc, #108]	; (80095e4 <TIM_OC4_SetConfig+0x98>)
 8009576:	42a8      	cmp	r0, r5
 8009578:	d007      	beq.n	800958a <TIM_OC4_SetConfig+0x3e>
 800957a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800957e:	42a8      	cmp	r0, r5
 8009580:	d003      	beq.n	800958a <TIM_OC4_SetConfig+0x3e>
 8009582:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8009586:	42a8      	cmp	r0, r5
 8009588:	d106      	bne.n	8009598 <TIM_OC4_SetConfig+0x4c>
>>>>>>> render
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
<<<<<<< HEAD
 80096b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80096b6:	68cd      	ldr	r5, [r1, #12]
 80096b8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80096bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096c0:	4d12      	ldr	r5, [pc, #72]	; (800970c <TIM_OC4_SetConfig+0x98>)
 80096c2:	42a8      	cmp	r0, r5
 80096c4:	d013      	beq.n	80096ee <TIM_OC4_SetConfig+0x7a>
 80096c6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80096ca:	42a8      	cmp	r0, r5
 80096cc:	d00f      	beq.n	80096ee <TIM_OC4_SetConfig+0x7a>
 80096ce:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80096d2:	42a8      	cmp	r0, r5
 80096d4:	d00b      	beq.n	80096ee <TIM_OC4_SetConfig+0x7a>
 80096d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80096da:	42a8      	cmp	r0, r5
 80096dc:	d007      	beq.n	80096ee <TIM_OC4_SetConfig+0x7a>
 80096de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80096e2:	42a8      	cmp	r0, r5
 80096e4:	d003      	beq.n	80096ee <TIM_OC4_SetConfig+0x7a>
 80096e6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80096ea:	42a8      	cmp	r0, r5
 80096ec:	d107      	bne.n	80096fe <TIM_OC4_SetConfig+0x8a>
=======
 800958a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800958e:	68cd      	ldr	r5, [r1, #12]
 8009590:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009594:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009598:	4d12      	ldr	r5, [pc, #72]	; (80095e4 <TIM_OC4_SetConfig+0x98>)
 800959a:	42a8      	cmp	r0, r5
 800959c:	d013      	beq.n	80095c6 <TIM_OC4_SetConfig+0x7a>
 800959e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80095a2:	42a8      	cmp	r0, r5
 80095a4:	d00f      	beq.n	80095c6 <TIM_OC4_SetConfig+0x7a>
 80095a6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80095aa:	42a8      	cmp	r0, r5
 80095ac:	d00b      	beq.n	80095c6 <TIM_OC4_SetConfig+0x7a>
 80095ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80095b2:	42a8      	cmp	r0, r5
 80095b4:	d007      	beq.n	80095c6 <TIM_OC4_SetConfig+0x7a>
 80095b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80095ba:	42a8      	cmp	r0, r5
 80095bc:	d003      	beq.n	80095c6 <TIM_OC4_SetConfig+0x7a>
 80095be:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80095c2:	42a8      	cmp	r0, r5
 80095c4:	d107      	bne.n	80095d6 <TIM_OC4_SetConfig+0x8a>
>>>>>>> render
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
<<<<<<< HEAD
 80096ee:	f424 4c40 	bic.w	ip, r4, #49152	; 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80096f2:	694c      	ldr	r4, [r1, #20]
 80096f4:	ea4c 1c84 	orr.w	ip, ip, r4, lsl #6
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80096f8:	698c      	ldr	r4, [r1, #24]
 80096fa:	ea4c 1484 	orr.w	r4, ip, r4, lsl #6
=======
 80095c6:	f424 4c40 	bic.w	ip, r4, #49152	; 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80095ca:	694c      	ldr	r4, [r1, #20]
 80095cc:	ea4c 1c84 	orr.w	ip, ip, r4, lsl #6
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80095d0:	698c      	ldr	r4, [r1, #24]
 80095d2:	ea4c 1484 	orr.w	r4, ip, r4, lsl #6
>>>>>>> render
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80096fe:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009700:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009702:	684a      	ldr	r2, [r1, #4]
 8009704:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009706:	6203      	str	r3, [r0, #32]
}
 8009708:	bc30      	pop	{r4, r5}
 800970a:	4770      	bx	lr
 800970c:	40012c00 	.word	0x40012c00

08009710 <TIM_OC5_SetConfig>:
=======
 80095d6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095d8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80095da:	684a      	ldr	r2, [r1, #4]
 80095dc:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095de:	6203      	str	r3, [r0, #32]
}
 80095e0:	bc30      	pop	{r4, r5}
 80095e2:	4770      	bx	lr
 80095e4:	40012c00 	.word	0x40012c00

080095e8 <TIM_OC5_SetConfig>:
>>>>>>> render
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8009710:	b430      	push	{r4, r5}
=======
 80095e8:	b430      	push	{r4, r5}
>>>>>>> render
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
<<<<<<< HEAD
 8009712:	6a03      	ldr	r3, [r0, #32]
 8009714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009718:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800971a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800971c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800971e:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009720:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009724:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009728:	680d      	ldr	r5, [r1, #0]
 800972a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800972c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009730:	688d      	ldr	r5, [r1, #8]
 8009732:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009736:	4d11      	ldr	r5, [pc, #68]	; (800977c <TIM_OC5_SetConfig+0x6c>)
 8009738:	42a8      	cmp	r0, r5
 800973a:	d013      	beq.n	8009764 <TIM_OC5_SetConfig+0x54>
 800973c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009740:	42a8      	cmp	r0, r5
 8009742:	d00f      	beq.n	8009764 <TIM_OC5_SetConfig+0x54>
 8009744:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009748:	42a8      	cmp	r0, r5
 800974a:	d00b      	beq.n	8009764 <TIM_OC5_SetConfig+0x54>
 800974c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009750:	42a8      	cmp	r0, r5
 8009752:	d007      	beq.n	8009764 <TIM_OC5_SetConfig+0x54>
 8009754:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009758:	42a8      	cmp	r0, r5
 800975a:	d003      	beq.n	8009764 <TIM_OC5_SetConfig+0x54>
 800975c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009760:	42a8      	cmp	r0, r5
 8009762:	d104      	bne.n	800976e <TIM_OC5_SetConfig+0x5e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009764:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009768:	694d      	ldr	r5, [r1, #20]
 800976a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800976e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009770:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009772:	684a      	ldr	r2, [r1, #4]
 8009774:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009776:	6203      	str	r3, [r0, #32]
}
 8009778:	bc30      	pop	{r4, r5}
 800977a:	4770      	bx	lr
 800977c:	40012c00 	.word	0x40012c00

08009780 <TIM_OC6_SetConfig>:
=======
 80095ea:	6a03      	ldr	r3, [r0, #32]
 80095ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095f0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095f2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095f4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80095f6:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80095f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80095fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009600:	680d      	ldr	r5, [r1, #0]
 8009602:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009604:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009608:	688d      	ldr	r5, [r1, #8]
 800960a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800960e:	4d11      	ldr	r5, [pc, #68]	; (8009654 <TIM_OC5_SetConfig+0x6c>)
 8009610:	42a8      	cmp	r0, r5
 8009612:	d013      	beq.n	800963c <TIM_OC5_SetConfig+0x54>
 8009614:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009618:	42a8      	cmp	r0, r5
 800961a:	d00f      	beq.n	800963c <TIM_OC5_SetConfig+0x54>
 800961c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009620:	42a8      	cmp	r0, r5
 8009622:	d00b      	beq.n	800963c <TIM_OC5_SetConfig+0x54>
 8009624:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009628:	42a8      	cmp	r0, r5
 800962a:	d007      	beq.n	800963c <TIM_OC5_SetConfig+0x54>
 800962c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009630:	42a8      	cmp	r0, r5
 8009632:	d003      	beq.n	800963c <TIM_OC5_SetConfig+0x54>
 8009634:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009638:	42a8      	cmp	r0, r5
 800963a:	d104      	bne.n	8009646 <TIM_OC5_SetConfig+0x5e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800963c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009640:	694d      	ldr	r5, [r1, #20]
 8009642:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009646:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009648:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800964a:	684a      	ldr	r2, [r1, #4]
 800964c:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800964e:	6203      	str	r3, [r0, #32]
}
 8009650:	bc30      	pop	{r4, r5}
 8009652:	4770      	bx	lr
 8009654:	40012c00 	.word	0x40012c00

08009658 <TIM_OC6_SetConfig>:
>>>>>>> render
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8009780:	b430      	push	{r4, r5}
=======
 8009658:	b430      	push	{r4, r5}
>>>>>>> render
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
<<<<<<< HEAD
 8009782:	6a03      	ldr	r3, [r0, #32]
 8009784:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009788:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800978a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800978c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800978e:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009790:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009794:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009798:	680d      	ldr	r5, [r1, #0]
 800979a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800979e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80097a2:	688d      	ldr	r5, [r1, #8]
 80097a4:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097a8:	4d11      	ldr	r5, [pc, #68]	; (80097f0 <TIM_OC6_SetConfig+0x70>)
 80097aa:	42a8      	cmp	r0, r5
 80097ac:	d013      	beq.n	80097d6 <TIM_OC6_SetConfig+0x56>
 80097ae:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80097b2:	42a8      	cmp	r0, r5
 80097b4:	d00f      	beq.n	80097d6 <TIM_OC6_SetConfig+0x56>
 80097b6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80097ba:	42a8      	cmp	r0, r5
 80097bc:	d00b      	beq.n	80097d6 <TIM_OC6_SetConfig+0x56>
 80097be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80097c2:	42a8      	cmp	r0, r5
 80097c4:	d007      	beq.n	80097d6 <TIM_OC6_SetConfig+0x56>
 80097c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80097ca:	42a8      	cmp	r0, r5
 80097cc:	d003      	beq.n	80097d6 <TIM_OC6_SetConfig+0x56>
 80097ce:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80097d2:	42a8      	cmp	r0, r5
 80097d4:	d104      	bne.n	80097e0 <TIM_OC6_SetConfig+0x60>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80097d6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80097da:	694d      	ldr	r5, [r1, #20]
 80097dc:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
=======
 800965a:	6a03      	ldr	r3, [r0, #32]
 800965c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009660:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009662:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009664:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009666:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009668:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800966c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009670:	680d      	ldr	r5, [r1, #0]
 8009672:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009676:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800967a:	688d      	ldr	r5, [r1, #8]
 800967c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009680:	4d11      	ldr	r5, [pc, #68]	; (80096c8 <TIM_OC6_SetConfig+0x70>)
 8009682:	42a8      	cmp	r0, r5
 8009684:	d013      	beq.n	80096ae <TIM_OC6_SetConfig+0x56>
 8009686:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800968a:	42a8      	cmp	r0, r5
 800968c:	d00f      	beq.n	80096ae <TIM_OC6_SetConfig+0x56>
 800968e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009692:	42a8      	cmp	r0, r5
 8009694:	d00b      	beq.n	80096ae <TIM_OC6_SetConfig+0x56>
 8009696:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800969a:	42a8      	cmp	r0, r5
 800969c:	d007      	beq.n	80096ae <TIM_OC6_SetConfig+0x56>
 800969e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80096a2:	42a8      	cmp	r0, r5
 80096a4:	d003      	beq.n	80096ae <TIM_OC6_SetConfig+0x56>
 80096a6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80096aa:	42a8      	cmp	r0, r5
 80096ac:	d104      	bne.n	80096b8 <TIM_OC6_SetConfig+0x60>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80096ae:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80096b2:	694d      	ldr	r5, [r1, #20]
 80096b4:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
>>>>>>> render
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80097e0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097e2:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80097e4:	684a      	ldr	r2, [r1, #4]
 80097e6:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097e8:	6203      	str	r3, [r0, #32]
}
 80097ea:	bc30      	pop	{r4, r5}
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	40012c00 	.word	0x40012c00

080097f4 <TIM_TI1_ConfigInputStage>:
=======
 80096b8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80096ba:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80096bc:	684a      	ldr	r2, [r1, #4]
 80096be:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096c0:	6203      	str	r3, [r0, #32]
}
 80096c2:	bc30      	pop	{r4, r5}
 80096c4:	4770      	bx	lr
 80096c6:	bf00      	nop
 80096c8:	40012c00 	.word	0x40012c00

080096cc <TIM_TI1_ConfigInputStage>:
>>>>>>> render
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 80097f4:	b410      	push	{r4}
=======
 80096cc:	b410      	push	{r4}
>>>>>>> render
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 80097f6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097f8:	6a04      	ldr	r4, [r0, #32]
 80097fa:	f024 0401 	bic.w	r4, r4, #1
 80097fe:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009800:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009802:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009806:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800980a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800980e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009810:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8009812:	6203      	str	r3, [r0, #32]
}
 8009814:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009818:	4770      	bx	lr

0800981a <TIM_TI2_ConfigInputStage>:
=======
 80096ce:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096d0:	6a04      	ldr	r4, [r0, #32]
 80096d2:	f024 0401 	bic.w	r4, r4, #1
 80096d6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096d8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096da:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80096de:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096e2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80096e6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80096e8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80096ea:	6203      	str	r3, [r0, #32]
}
 80096ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096f0:	4770      	bx	lr

080096f2 <TIM_TI2_ConfigInputStage>:
>>>>>>> render
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 800981a:	b410      	push	{r4}
=======
 80096f2:	b410      	push	{r4}
>>>>>>> render
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 800981c:	6a04      	ldr	r4, [r0, #32]
 800981e:	f024 0410 	bic.w	r4, r4, #16
 8009822:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009824:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8009826:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009828:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800982c:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009830:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8009834:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009838:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800983a:	6203      	str	r3, [r0, #32]
}
 800983c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009840:	4770      	bx	lr

08009842 <TIM_ITRx_SetConfig>:
=======
 80096f4:	6a04      	ldr	r4, [r0, #32]
 80096f6:	f024 0410 	bic.w	r4, r4, #16
 80096fa:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096fc:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80096fe:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009700:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009704:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009708:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800970c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009710:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8009712:	6203      	str	r3, [r0, #32]
}
 8009714:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009718:	4770      	bx	lr

0800971a <TIM_ITRx_SetConfig>:
>>>>>>> render
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 8009842:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009844:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800984c:	430b      	orrs	r3, r1
 800984e:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009852:	6083      	str	r3, [r0, #8]
}
 8009854:	4770      	bx	lr

08009856 <HAL_TIM_PWM_MspInit>:
}
 8009856:	4770      	bx	lr

08009858 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8009858:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800985a:	4a36      	ldr	r2, [pc, #216]	; (8009934 <TIM_Base_SetConfig+0xdc>)
 800985c:	4290      	cmp	r0, r2
 800985e:	d016      	beq.n	800988e <TIM_Base_SetConfig+0x36>
 8009860:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009864:	d013      	beq.n	800988e <TIM_Base_SetConfig+0x36>
 8009866:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800986a:	4290      	cmp	r0, r2
 800986c:	d00f      	beq.n	800988e <TIM_Base_SetConfig+0x36>
 800986e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009872:	4290      	cmp	r0, r2
 8009874:	d00b      	beq.n	800988e <TIM_Base_SetConfig+0x36>
 8009876:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800987a:	4290      	cmp	r0, r2
 800987c:	d007      	beq.n	800988e <TIM_Base_SetConfig+0x36>
 800987e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009882:	4290      	cmp	r0, r2
 8009884:	d003      	beq.n	800988e <TIM_Base_SetConfig+0x36>
 8009886:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800988a:	4290      	cmp	r0, r2
 800988c:	d103      	bne.n	8009896 <TIM_Base_SetConfig+0x3e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800988e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009892:	684a      	ldr	r2, [r1, #4]
 8009894:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009896:	4a27      	ldr	r2, [pc, #156]	; (8009934 <TIM_Base_SetConfig+0xdc>)
 8009898:	4290      	cmp	r0, r2
 800989a:	d022      	beq.n	80098e2 <TIM_Base_SetConfig+0x8a>
 800989c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80098a0:	d01f      	beq.n	80098e2 <TIM_Base_SetConfig+0x8a>
 80098a2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80098a6:	4290      	cmp	r0, r2
 80098a8:	d01b      	beq.n	80098e2 <TIM_Base_SetConfig+0x8a>
 80098aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80098ae:	4290      	cmp	r0, r2
 80098b0:	d017      	beq.n	80098e2 <TIM_Base_SetConfig+0x8a>
 80098b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80098b6:	4290      	cmp	r0, r2
 80098b8:	d013      	beq.n	80098e2 <TIM_Base_SetConfig+0x8a>
 80098ba:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80098be:	4290      	cmp	r0, r2
 80098c0:	d00f      	beq.n	80098e2 <TIM_Base_SetConfig+0x8a>
 80098c2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80098c6:	4290      	cmp	r0, r2
 80098c8:	d00b      	beq.n	80098e2 <TIM_Base_SetConfig+0x8a>
 80098ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80098ce:	4290      	cmp	r0, r2
 80098d0:	d007      	beq.n	80098e2 <TIM_Base_SetConfig+0x8a>
 80098d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80098d6:	4290      	cmp	r0, r2
 80098d8:	d003      	beq.n	80098e2 <TIM_Base_SetConfig+0x8a>
 80098da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098de:	4290      	cmp	r0, r2
 80098e0:	d103      	bne.n	80098ea <TIM_Base_SetConfig+0x92>
    tmpcr1 &= ~TIM_CR1_CKD;
 80098e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098e6:	68ca      	ldr	r2, [r1, #12]
 80098e8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098ee:	694a      	ldr	r2, [r1, #20]
 80098f0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80098f2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098f4:	688b      	ldr	r3, [r1, #8]
 80098f6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80098f8:	680b      	ldr	r3, [r1, #0]
 80098fa:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80098fc:	4b0d      	ldr	r3, [pc, #52]	; (8009934 <TIM_Base_SetConfig+0xdc>)
 80098fe:	4298      	cmp	r0, r3
 8009900:	d013      	beq.n	800992a <TIM_Base_SetConfig+0xd2>
 8009902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009906:	4298      	cmp	r0, r3
 8009908:	d00f      	beq.n	800992a <TIM_Base_SetConfig+0xd2>
 800990a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800990e:	4298      	cmp	r0, r3
 8009910:	d00b      	beq.n	800992a <TIM_Base_SetConfig+0xd2>
 8009912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009916:	4298      	cmp	r0, r3
 8009918:	d007      	beq.n	800992a <TIM_Base_SetConfig+0xd2>
 800991a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800991e:	4298      	cmp	r0, r3
 8009920:	d003      	beq.n	800992a <TIM_Base_SetConfig+0xd2>
 8009922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009926:	4298      	cmp	r0, r3
 8009928:	d101      	bne.n	800992e <TIM_Base_SetConfig+0xd6>
    TIMx->RCR = Structure->RepetitionCounter;
 800992a:	690b      	ldr	r3, [r1, #16]
 800992c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800992e:	2301      	movs	r3, #1
 8009930:	6143      	str	r3, [r0, #20]
}
 8009932:	4770      	bx	lr
 8009934:	40012c00 	.word	0x40012c00

08009938 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8009938:	b360      	cbz	r0, 8009994 <HAL_TIM_Base_Init+0x5c>
{
 800993a:	b510      	push	{r4, lr}
 800993c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800993e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009942:	b313      	cbz	r3, 800998a <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8009944:	2302      	movs	r3, #2
 8009946:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800994a:	4621      	mov	r1, r4
 800994c:	f851 0b04 	ldr.w	r0, [r1], #4
 8009950:	f7ff ff82 	bl	8009858 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009954:	2301      	movs	r3, #1
 8009956:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800995a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800995e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009962:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009966:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800996a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800996e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009972:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009976:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800997a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800997e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009982:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8009986:	2000      	movs	r0, #0
}
 8009988:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800998a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800998e:	f7fa fcb3 	bl	80042f8 <HAL_TIM_Base_MspInit>
 8009992:	e7d7      	b.n	8009944 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8009994:	2001      	movs	r0, #1
}
 8009996:	4770      	bx	lr

08009998 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8009998:	b360      	cbz	r0, 80099f4 <HAL_TIM_PWM_Init+0x5c>
{
 800999a:	b510      	push	{r4, lr}
 800999c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800999e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80099a2:	b313      	cbz	r3, 80099ea <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80099a4:	2302      	movs	r3, #2
 80099a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099aa:	4621      	mov	r1, r4
 80099ac:	f851 0b04 	ldr.w	r0, [r1], #4
 80099b0:	f7ff ff52 	bl	8009858 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099b4:	2301      	movs	r3, #1
 80099b6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099ba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80099be:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80099c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80099c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80099ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099d2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80099d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80099da:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80099de:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80099e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80099e6:	2000      	movs	r0, #0
}
 80099e8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80099ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80099ee:	f7ff ff32 	bl	8009856 <HAL_TIM_PWM_MspInit>
 80099f2:	e7d7      	b.n	80099a4 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80099f4:	2001      	movs	r0, #1
}
 80099f6:	4770      	bx	lr

080099f8 <TIM_OC2_SetConfig>:
{
 80099f8:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099fa:	6a03      	ldr	r3, [r0, #32]
 80099fc:	f023 0310 	bic.w	r3, r3, #16
 8009a00:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8009a02:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8009a04:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8009a06:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a08:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009a0c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a10:	680d      	ldr	r5, [r1, #0]
 8009a12:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8009a16:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a1a:	688d      	ldr	r5, [r1, #8]
 8009a1c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a20:	4d1b      	ldr	r5, [pc, #108]	; (8009a90 <TIM_OC2_SetConfig+0x98>)
 8009a22:	42a8      	cmp	r0, r5
 8009a24:	d007      	beq.n	8009a36 <TIM_OC2_SetConfig+0x3e>
 8009a26:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009a2a:	42a8      	cmp	r0, r5
 8009a2c:	d003      	beq.n	8009a36 <TIM_OC2_SetConfig+0x3e>
 8009a2e:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8009a32:	42a8      	cmp	r0, r5
 8009a34:	d106      	bne.n	8009a44 <TIM_OC2_SetConfig+0x4c>
    tmpccer &= ~TIM_CCER_CC2NP;
 8009a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009a3a:	68cd      	ldr	r5, [r1, #12]
 8009a3c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a44:	4d12      	ldr	r5, [pc, #72]	; (8009a90 <TIM_OC2_SetConfig+0x98>)
 8009a46:	42a8      	cmp	r0, r5
 8009a48:	d013      	beq.n	8009a72 <TIM_OC2_SetConfig+0x7a>
 8009a4a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009a4e:	42a8      	cmp	r0, r5
 8009a50:	d00f      	beq.n	8009a72 <TIM_OC2_SetConfig+0x7a>
 8009a52:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009a56:	42a8      	cmp	r0, r5
 8009a58:	d00b      	beq.n	8009a72 <TIM_OC2_SetConfig+0x7a>
 8009a5a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009a5e:	42a8      	cmp	r0, r5
 8009a60:	d007      	beq.n	8009a72 <TIM_OC2_SetConfig+0x7a>
 8009a62:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009a66:	42a8      	cmp	r0, r5
 8009a68:	d003      	beq.n	8009a72 <TIM_OC2_SetConfig+0x7a>
 8009a6a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009a6e:	42a8      	cmp	r0, r5
 8009a70:	d107      	bne.n	8009a82 <TIM_OC2_SetConfig+0x8a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009a72:	f424 6c40 	bic.w	ip, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009a76:	694c      	ldr	r4, [r1, #20]
 8009a78:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a7c:	698c      	ldr	r4, [r1, #24]
 8009a7e:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8009a82:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8009a84:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8009a86:	684a      	ldr	r2, [r1, #4]
 8009a88:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8009a8a:	6203      	str	r3, [r0, #32]
}
 8009a8c:	bc30      	pop	{r4, r5}
 8009a8e:	4770      	bx	lr
 8009a90:	40012c00 	.word	0x40012c00

08009a94 <HAL_TIM_PWM_ConfigChannel>:
{
 8009a94:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8009a96:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	f000 8095 	beq.w	8009bca <HAL_TIM_PWM_ConfigChannel+0x136>
 8009aa0:	4604      	mov	r4, r0
 8009aa2:	460d      	mov	r5, r1
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8009aaa:	2a14      	cmp	r2, #20
 8009aac:	f200 8088 	bhi.w	8009bc0 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8009ab0:	e8df f002 	tbb	[pc, r2]
 8009ab4:	8686860b 	.word	0x8686860b
 8009ab8:	8686861f 	.word	0x8686861f
 8009abc:	86868634 	.word	0x86868634
 8009ac0:	86868648 	.word	0x86868648
 8009ac4:	8686865d 	.word	0x8686865d
 8009ac8:	71          	.byte	0x71
 8009ac9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009aca:	6800      	ldr	r0, [r0, #0]
 8009acc:	f7ff fd2c 	bl	8009528 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009ad0:	6822      	ldr	r2, [r4, #0]
 8009ad2:	6993      	ldr	r3, [r2, #24]
 8009ad4:	f043 0308 	orr.w	r3, r3, #8
 8009ad8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ada:	6822      	ldr	r2, [r4, #0]
 8009adc:	6993      	ldr	r3, [r2, #24]
 8009ade:	f023 0304 	bic.w	r3, r3, #4
 8009ae2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009ae4:	6822      	ldr	r2, [r4, #0]
 8009ae6:	6993      	ldr	r3, [r2, #24]
 8009ae8:	6929      	ldr	r1, [r5, #16]
 8009aea:	430b      	orrs	r3, r1
 8009aec:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8009aee:	2000      	movs	r0, #0
      break;
 8009af0:	e067      	b.n	8009bc2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009af2:	6800      	ldr	r0, [r0, #0]
 8009af4:	f7ff ff80 	bl	80099f8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009af8:	6822      	ldr	r2, [r4, #0]
 8009afa:	6993      	ldr	r3, [r2, #24]
 8009afc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009b00:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b02:	6822      	ldr	r2, [r4, #0]
 8009b04:	6993      	ldr	r3, [r2, #24]
 8009b06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b0a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b0c:	6822      	ldr	r2, [r4, #0]
 8009b0e:	6993      	ldr	r3, [r2, #24]
 8009b10:	6929      	ldr	r1, [r5, #16]
 8009b12:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009b16:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8009b18:	2000      	movs	r0, #0
      break;
 8009b1a:	e052      	b.n	8009bc2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b1c:	6800      	ldr	r0, [r0, #0]
 8009b1e:	f7ff fd5b 	bl	80095d8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009b22:	6822      	ldr	r2, [r4, #0]
 8009b24:	69d3      	ldr	r3, [r2, #28]
 8009b26:	f043 0308 	orr.w	r3, r3, #8
 8009b2a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009b2c:	6822      	ldr	r2, [r4, #0]
 8009b2e:	69d3      	ldr	r3, [r2, #28]
 8009b30:	f023 0304 	bic.w	r3, r3, #4
 8009b34:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009b36:	6822      	ldr	r2, [r4, #0]
 8009b38:	69d3      	ldr	r3, [r2, #28]
 8009b3a:	6929      	ldr	r1, [r5, #16]
 8009b3c:	430b      	orrs	r3, r1
 8009b3e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8009b40:	2000      	movs	r0, #0
      break;
 8009b42:	e03e      	b.n	8009bc2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b44:	6800      	ldr	r0, [r0, #0]
 8009b46:	f7ff fd95 	bl	8009674 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b4a:	6822      	ldr	r2, [r4, #0]
 8009b4c:	69d3      	ldr	r3, [r2, #28]
 8009b4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009b52:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b54:	6822      	ldr	r2, [r4, #0]
 8009b56:	69d3      	ldr	r3, [r2, #28]
 8009b58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b5c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b5e:	6822      	ldr	r2, [r4, #0]
 8009b60:	69d3      	ldr	r3, [r2, #28]
 8009b62:	6929      	ldr	r1, [r5, #16]
 8009b64:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009b68:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8009b6a:	2000      	movs	r0, #0
      break;
 8009b6c:	e029      	b.n	8009bc2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009b6e:	6800      	ldr	r0, [r0, #0]
 8009b70:	f7ff fdce 	bl	8009710 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009b74:	6822      	ldr	r2, [r4, #0]
 8009b76:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009b78:	f043 0308 	orr.w	r3, r3, #8
 8009b7c:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009b7e:	6822      	ldr	r2, [r4, #0]
 8009b80:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009b82:	f023 0304 	bic.w	r3, r3, #4
 8009b86:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009b88:	6822      	ldr	r2, [r4, #0]
 8009b8a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009b8c:	6929      	ldr	r1, [r5, #16]
 8009b8e:	430b      	orrs	r3, r1
 8009b90:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8009b92:	2000      	movs	r0, #0
      break;
 8009b94:	e015      	b.n	8009bc2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009b96:	6800      	ldr	r0, [r0, #0]
 8009b98:	f7ff fdf2 	bl	8009780 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009b9c:	6822      	ldr	r2, [r4, #0]
 8009b9e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009ba0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009ba4:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009ba6:	6822      	ldr	r2, [r4, #0]
 8009ba8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009baa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bae:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009bb0:	6822      	ldr	r2, [r4, #0]
 8009bb2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009bb4:	6929      	ldr	r1, [r5, #16]
 8009bb6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009bba:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8009bbc:	2000      	movs	r0, #0
      break;
 8009bbe:	e000      	b.n	8009bc2 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8009bc0:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8009bc8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8009bca:	2002      	movs	r0, #2
 8009bcc:	e7fc      	b.n	8009bc8 <HAL_TIM_PWM_ConfigChannel+0x134>

08009bce <TIM_ETR_SetConfig>:
=======
 800971a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800971c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009724:	430b      	orrs	r3, r1
 8009726:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800972a:	6083      	str	r3, [r0, #8]
}
 800972c:	4770      	bx	lr

0800972e <HAL_TIM_PWM_MspInit>:
}
 800972e:	4770      	bx	lr

08009730 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8009730:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009732:	4a36      	ldr	r2, [pc, #216]	; (800980c <TIM_Base_SetConfig+0xdc>)
 8009734:	4290      	cmp	r0, r2
 8009736:	d016      	beq.n	8009766 <TIM_Base_SetConfig+0x36>
 8009738:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800973c:	d013      	beq.n	8009766 <TIM_Base_SetConfig+0x36>
 800973e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009742:	4290      	cmp	r0, r2
 8009744:	d00f      	beq.n	8009766 <TIM_Base_SetConfig+0x36>
 8009746:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800974a:	4290      	cmp	r0, r2
 800974c:	d00b      	beq.n	8009766 <TIM_Base_SetConfig+0x36>
 800974e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009752:	4290      	cmp	r0, r2
 8009754:	d007      	beq.n	8009766 <TIM_Base_SetConfig+0x36>
 8009756:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800975a:	4290      	cmp	r0, r2
 800975c:	d003      	beq.n	8009766 <TIM_Base_SetConfig+0x36>
 800975e:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8009762:	4290      	cmp	r0, r2
 8009764:	d103      	bne.n	800976e <TIM_Base_SetConfig+0x3e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800976a:	684a      	ldr	r2, [r1, #4]
 800976c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800976e:	4a27      	ldr	r2, [pc, #156]	; (800980c <TIM_Base_SetConfig+0xdc>)
 8009770:	4290      	cmp	r0, r2
 8009772:	d022      	beq.n	80097ba <TIM_Base_SetConfig+0x8a>
 8009774:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009778:	d01f      	beq.n	80097ba <TIM_Base_SetConfig+0x8a>
 800977a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800977e:	4290      	cmp	r0, r2
 8009780:	d01b      	beq.n	80097ba <TIM_Base_SetConfig+0x8a>
 8009782:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009786:	4290      	cmp	r0, r2
 8009788:	d017      	beq.n	80097ba <TIM_Base_SetConfig+0x8a>
 800978a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800978e:	4290      	cmp	r0, r2
 8009790:	d013      	beq.n	80097ba <TIM_Base_SetConfig+0x8a>
 8009792:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009796:	4290      	cmp	r0, r2
 8009798:	d00f      	beq.n	80097ba <TIM_Base_SetConfig+0x8a>
 800979a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800979e:	4290      	cmp	r0, r2
 80097a0:	d00b      	beq.n	80097ba <TIM_Base_SetConfig+0x8a>
 80097a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097a6:	4290      	cmp	r0, r2
 80097a8:	d007      	beq.n	80097ba <TIM_Base_SetConfig+0x8a>
 80097aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097ae:	4290      	cmp	r0, r2
 80097b0:	d003      	beq.n	80097ba <TIM_Base_SetConfig+0x8a>
 80097b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097b6:	4290      	cmp	r0, r2
 80097b8:	d103      	bne.n	80097c2 <TIM_Base_SetConfig+0x92>
    tmpcr1 &= ~TIM_CR1_CKD;
 80097ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097be:	68ca      	ldr	r2, [r1, #12]
 80097c0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097c6:	694a      	ldr	r2, [r1, #20]
 80097c8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80097ca:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097cc:	688b      	ldr	r3, [r1, #8]
 80097ce:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80097d0:	680b      	ldr	r3, [r1, #0]
 80097d2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097d4:	4b0d      	ldr	r3, [pc, #52]	; (800980c <TIM_Base_SetConfig+0xdc>)
 80097d6:	4298      	cmp	r0, r3
 80097d8:	d013      	beq.n	8009802 <TIM_Base_SetConfig+0xd2>
 80097da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097de:	4298      	cmp	r0, r3
 80097e0:	d00f      	beq.n	8009802 <TIM_Base_SetConfig+0xd2>
 80097e2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80097e6:	4298      	cmp	r0, r3
 80097e8:	d00b      	beq.n	8009802 <TIM_Base_SetConfig+0xd2>
 80097ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097ee:	4298      	cmp	r0, r3
 80097f0:	d007      	beq.n	8009802 <TIM_Base_SetConfig+0xd2>
 80097f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097f6:	4298      	cmp	r0, r3
 80097f8:	d003      	beq.n	8009802 <TIM_Base_SetConfig+0xd2>
 80097fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097fe:	4298      	cmp	r0, r3
 8009800:	d101      	bne.n	8009806 <TIM_Base_SetConfig+0xd6>
    TIMx->RCR = Structure->RepetitionCounter;
 8009802:	690b      	ldr	r3, [r1, #16]
 8009804:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8009806:	2301      	movs	r3, #1
 8009808:	6143      	str	r3, [r0, #20]
}
 800980a:	4770      	bx	lr
 800980c:	40012c00 	.word	0x40012c00

08009810 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8009810:	b360      	cbz	r0, 800986c <HAL_TIM_Base_Init+0x5c>
{
 8009812:	b510      	push	{r4, lr}
 8009814:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8009816:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800981a:	b313      	cbz	r3, 8009862 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800981c:	2302      	movs	r3, #2
 800981e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009822:	4621      	mov	r1, r4
 8009824:	f851 0b04 	ldr.w	r0, [r1], #4
 8009828:	f7ff ff82 	bl	8009730 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800982c:	2301      	movs	r3, #1
 800982e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009832:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009836:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800983a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800983e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009842:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009846:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800984a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800984e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009852:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009856:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800985a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800985e:	2000      	movs	r0, #0
}
 8009860:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8009862:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009866:	f7fa fd63 	bl	8004330 <HAL_TIM_Base_MspInit>
 800986a:	e7d7      	b.n	800981c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800986c:	2001      	movs	r0, #1
}
 800986e:	4770      	bx	lr

08009870 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8009870:	b360      	cbz	r0, 80098cc <HAL_TIM_PWM_Init+0x5c>
{
 8009872:	b510      	push	{r4, lr}
 8009874:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8009876:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800987a:	b313      	cbz	r3, 80098c2 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800987c:	2302      	movs	r3, #2
 800987e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009882:	4621      	mov	r1, r4
 8009884:	f851 0b04 	ldr.w	r0, [r1], #4
 8009888:	f7ff ff52 	bl	8009730 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800988c:	2301      	movs	r3, #1
 800988e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009892:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009896:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800989a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800989e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80098a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80098ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098b2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80098b6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80098ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80098be:	2000      	movs	r0, #0
}
 80098c0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80098c2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80098c6:	f7ff ff32 	bl	800972e <HAL_TIM_PWM_MspInit>
 80098ca:	e7d7      	b.n	800987c <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80098cc:	2001      	movs	r0, #1
}
 80098ce:	4770      	bx	lr

080098d0 <TIM_OC2_SetConfig>:
{
 80098d0:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098d2:	6a03      	ldr	r3, [r0, #32]
 80098d4:	f023 0310 	bic.w	r3, r3, #16
 80098d8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80098da:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80098dc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80098de:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80098e0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80098e4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098e8:	680d      	ldr	r5, [r1, #0]
 80098ea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80098ee:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80098f2:	688d      	ldr	r5, [r1, #8]
 80098f4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80098f8:	4d1b      	ldr	r5, [pc, #108]	; (8009968 <TIM_OC2_SetConfig+0x98>)
 80098fa:	42a8      	cmp	r0, r5
 80098fc:	d007      	beq.n	800990e <TIM_OC2_SetConfig+0x3e>
 80098fe:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009902:	42a8      	cmp	r0, r5
 8009904:	d003      	beq.n	800990e <TIM_OC2_SetConfig+0x3e>
 8009906:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800990a:	42a8      	cmp	r0, r5
 800990c:	d106      	bne.n	800991c <TIM_OC2_SetConfig+0x4c>
    tmpccer &= ~TIM_CCER_CC2NP;
 800990e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009912:	68cd      	ldr	r5, [r1, #12]
 8009914:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8009918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800991c:	4d12      	ldr	r5, [pc, #72]	; (8009968 <TIM_OC2_SetConfig+0x98>)
 800991e:	42a8      	cmp	r0, r5
 8009920:	d013      	beq.n	800994a <TIM_OC2_SetConfig+0x7a>
 8009922:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009926:	42a8      	cmp	r0, r5
 8009928:	d00f      	beq.n	800994a <TIM_OC2_SetConfig+0x7a>
 800992a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800992e:	42a8      	cmp	r0, r5
 8009930:	d00b      	beq.n	800994a <TIM_OC2_SetConfig+0x7a>
 8009932:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009936:	42a8      	cmp	r0, r5
 8009938:	d007      	beq.n	800994a <TIM_OC2_SetConfig+0x7a>
 800993a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800993e:	42a8      	cmp	r0, r5
 8009940:	d003      	beq.n	800994a <TIM_OC2_SetConfig+0x7a>
 8009942:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009946:	42a8      	cmp	r0, r5
 8009948:	d107      	bne.n	800995a <TIM_OC2_SetConfig+0x8a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800994a:	f424 6c40 	bic.w	ip, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800994e:	694c      	ldr	r4, [r1, #20]
 8009950:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009954:	698c      	ldr	r4, [r1, #24]
 8009956:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 800995a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800995c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800995e:	684a      	ldr	r2, [r1, #4]
 8009960:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8009962:	6203      	str	r3, [r0, #32]
}
 8009964:	bc30      	pop	{r4, r5}
 8009966:	4770      	bx	lr
 8009968:	40012c00 	.word	0x40012c00

0800996c <HAL_TIM_PWM_ConfigChannel>:
{
 800996c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800996e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009972:	2b01      	cmp	r3, #1
 8009974:	f000 8095 	beq.w	8009aa2 <HAL_TIM_PWM_ConfigChannel+0x136>
 8009978:	4604      	mov	r4, r0
 800997a:	460d      	mov	r5, r1
 800997c:	2301      	movs	r3, #1
 800997e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8009982:	2a14      	cmp	r2, #20
 8009984:	f200 8088 	bhi.w	8009a98 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8009988:	e8df f002 	tbb	[pc, r2]
 800998c:	8686860b 	.word	0x8686860b
 8009990:	8686861f 	.word	0x8686861f
 8009994:	86868634 	.word	0x86868634
 8009998:	86868648 	.word	0x86868648
 800999c:	8686865d 	.word	0x8686865d
 80099a0:	71          	.byte	0x71
 80099a1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80099a2:	6800      	ldr	r0, [r0, #0]
 80099a4:	f7ff fd2c 	bl	8009400 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80099a8:	6822      	ldr	r2, [r4, #0]
 80099aa:	6993      	ldr	r3, [r2, #24]
 80099ac:	f043 0308 	orr.w	r3, r3, #8
 80099b0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80099b2:	6822      	ldr	r2, [r4, #0]
 80099b4:	6993      	ldr	r3, [r2, #24]
 80099b6:	f023 0304 	bic.w	r3, r3, #4
 80099ba:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80099bc:	6822      	ldr	r2, [r4, #0]
 80099be:	6993      	ldr	r3, [r2, #24]
 80099c0:	6929      	ldr	r1, [r5, #16]
 80099c2:	430b      	orrs	r3, r1
 80099c4:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80099c6:	2000      	movs	r0, #0
      break;
 80099c8:	e067      	b.n	8009a9a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80099ca:	6800      	ldr	r0, [r0, #0]
 80099cc:	f7ff ff80 	bl	80098d0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80099d0:	6822      	ldr	r2, [r4, #0]
 80099d2:	6993      	ldr	r3, [r2, #24]
 80099d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80099d8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80099da:	6822      	ldr	r2, [r4, #0]
 80099dc:	6993      	ldr	r3, [r2, #24]
 80099de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099e2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80099e4:	6822      	ldr	r2, [r4, #0]
 80099e6:	6993      	ldr	r3, [r2, #24]
 80099e8:	6929      	ldr	r1, [r5, #16]
 80099ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80099ee:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80099f0:	2000      	movs	r0, #0
      break;
 80099f2:	e052      	b.n	8009a9a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80099f4:	6800      	ldr	r0, [r0, #0]
 80099f6:	f7ff fd5b 	bl	80094b0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80099fa:	6822      	ldr	r2, [r4, #0]
 80099fc:	69d3      	ldr	r3, [r2, #28]
 80099fe:	f043 0308 	orr.w	r3, r3, #8
 8009a02:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a04:	6822      	ldr	r2, [r4, #0]
 8009a06:	69d3      	ldr	r3, [r2, #28]
 8009a08:	f023 0304 	bic.w	r3, r3, #4
 8009a0c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a0e:	6822      	ldr	r2, [r4, #0]
 8009a10:	69d3      	ldr	r3, [r2, #28]
 8009a12:	6929      	ldr	r1, [r5, #16]
 8009a14:	430b      	orrs	r3, r1
 8009a16:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8009a18:	2000      	movs	r0, #0
      break;
 8009a1a:	e03e      	b.n	8009a9a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a1c:	6800      	ldr	r0, [r0, #0]
 8009a1e:	f7ff fd95 	bl	800954c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a22:	6822      	ldr	r2, [r4, #0]
 8009a24:	69d3      	ldr	r3, [r2, #28]
 8009a26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009a2a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009a2c:	6822      	ldr	r2, [r4, #0]
 8009a2e:	69d3      	ldr	r3, [r2, #28]
 8009a30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a34:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009a36:	6822      	ldr	r2, [r4, #0]
 8009a38:	69d3      	ldr	r3, [r2, #28]
 8009a3a:	6929      	ldr	r1, [r5, #16]
 8009a3c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009a40:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8009a42:	2000      	movs	r0, #0
      break;
 8009a44:	e029      	b.n	8009a9a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009a46:	6800      	ldr	r0, [r0, #0]
 8009a48:	f7ff fdce 	bl	80095e8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009a4c:	6822      	ldr	r2, [r4, #0]
 8009a4e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009a50:	f043 0308 	orr.w	r3, r3, #8
 8009a54:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009a56:	6822      	ldr	r2, [r4, #0]
 8009a58:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009a5a:	f023 0304 	bic.w	r3, r3, #4
 8009a5e:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009a60:	6822      	ldr	r2, [r4, #0]
 8009a62:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009a64:	6929      	ldr	r1, [r5, #16]
 8009a66:	430b      	orrs	r3, r1
 8009a68:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8009a6a:	2000      	movs	r0, #0
      break;
 8009a6c:	e015      	b.n	8009a9a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009a6e:	6800      	ldr	r0, [r0, #0]
 8009a70:	f7ff fdf2 	bl	8009658 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009a74:	6822      	ldr	r2, [r4, #0]
 8009a76:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009a78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009a7c:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009a7e:	6822      	ldr	r2, [r4, #0]
 8009a80:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009a82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a86:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009a88:	6822      	ldr	r2, [r4, #0]
 8009a8a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009a8c:	6929      	ldr	r1, [r5, #16]
 8009a8e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009a92:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8009a94:	2000      	movs	r0, #0
      break;
 8009a96:	e000      	b.n	8009a9a <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8009a98:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8009aa0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8009aa2:	2002      	movs	r0, #2
 8009aa4:	e7fc      	b.n	8009aa0 <HAL_TIM_PWM_ConfigChannel+0x134>

08009aa6 <TIM_ETR_SetConfig>:
>>>>>>> render
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 8009bce:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009bd0:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009bd2:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009bd6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8009bda:	430a      	orrs	r2, r1
 8009bdc:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009be0:	6082      	str	r2, [r0, #8]
}
 8009be2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8009be8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	f000 809b 	beq.w	8009d28 <HAL_TIM_ConfigClockSource+0x140>
{
 8009bf2:	b510      	push	{r4, lr}
 8009bf4:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8009bfc:	2302      	movs	r3, #2
 8009bfe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8009c02:	6802      	ldr	r2, [r0, #0]
 8009c04:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c06:	4b49      	ldr	r3, [pc, #292]	; (8009d2c <HAL_TIM_ConfigClockSource+0x144>)
 8009c08:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8009c0a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8009c0c:	680b      	ldr	r3, [r1, #0]
 8009c0e:	2b70      	cmp	r3, #112	; 0x70
 8009c10:	d061      	beq.n	8009cd6 <HAL_TIM_ConfigClockSource+0xee>
 8009c12:	d831      	bhi.n	8009c78 <HAL_TIM_ConfigClockSource+0x90>
 8009c14:	2b50      	cmp	r3, #80	; 0x50
 8009c16:	d078      	beq.n	8009d0a <HAL_TIM_ConfigClockSource+0x122>
 8009c18:	d90c      	bls.n	8009c34 <HAL_TIM_ConfigClockSource+0x4c>
 8009c1a:	2b60      	cmp	r3, #96	; 0x60
 8009c1c:	d12a      	bne.n	8009c74 <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c1e:	68ca      	ldr	r2, [r1, #12]
 8009c20:	6849      	ldr	r1, [r1, #4]
 8009c22:	6820      	ldr	r0, [r4, #0]
 8009c24:	f7ff fdf9 	bl	800981a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c28:	2160      	movs	r1, #96	; 0x60
 8009c2a:	6820      	ldr	r0, [r4, #0]
 8009c2c:	f7ff fe09 	bl	8009842 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8009c30:	2000      	movs	r0, #0
      break;
 8009c32:	e038      	b.n	8009ca6 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8009c34:	2b40      	cmp	r3, #64	; 0x40
 8009c36:	d10a      	bne.n	8009c4e <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c38:	68ca      	ldr	r2, [r1, #12]
 8009c3a:	6849      	ldr	r1, [r1, #4]
 8009c3c:	6820      	ldr	r0, [r4, #0]
 8009c3e:	f7ff fdd9 	bl	80097f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c42:	2140      	movs	r1, #64	; 0x40
 8009c44:	6820      	ldr	r0, [r4, #0]
 8009c46:	f7ff fdfc 	bl	8009842 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8009c4a:	2000      	movs	r0, #0
      break;
 8009c4c:	e02b      	b.n	8009ca6 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8009c4e:	d867      	bhi.n	8009d20 <HAL_TIM_ConfigClockSource+0x138>
 8009c50:	2b20      	cmp	r3, #32
 8009c52:	d007      	beq.n	8009c64 <HAL_TIM_ConfigClockSource+0x7c>
 8009c54:	d903      	bls.n	8009c5e <HAL_TIM_ConfigClockSource+0x76>
 8009c56:	2b30      	cmp	r3, #48	; 0x30
 8009c58:	d004      	beq.n	8009c64 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 8009c5a:	2001      	movs	r0, #1
 8009c5c:	e023      	b.n	8009ca6 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8009c5e:	b10b      	cbz	r3, 8009c64 <HAL_TIM_ConfigClockSource+0x7c>
 8009c60:	2b10      	cmp	r3, #16
 8009c62:	d105      	bne.n	8009c70 <HAL_TIM_ConfigClockSource+0x88>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c64:	4619      	mov	r1, r3
 8009c66:	6820      	ldr	r0, [r4, #0]
 8009c68:	f7ff fdeb 	bl	8009842 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8009c6c:	2000      	movs	r0, #0
      break;
 8009c6e:	e01a      	b.n	8009ca6 <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 8009c70:	2001      	movs	r0, #1
 8009c72:	e018      	b.n	8009ca6 <HAL_TIM_ConfigClockSource+0xbe>
 8009c74:	2001      	movs	r0, #1
 8009c76:	e016      	b.n	8009ca6 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8009c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c7c:	d038      	beq.n	8009cf0 <HAL_TIM_ConfigClockSource+0x108>
 8009c7e:	d90e      	bls.n	8009c9e <HAL_TIM_ConfigClockSource+0xb6>
 8009c80:	4a2b      	ldr	r2, [pc, #172]	; (8009d30 <HAL_TIM_ConfigClockSource+0x148>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d0ee      	beq.n	8009c64 <HAL_TIM_ConfigClockSource+0x7c>
 8009c86:	d915      	bls.n	8009cb4 <HAL_TIM_ConfigClockSource+0xcc>
 8009c88:	4a2a      	ldr	r2, [pc, #168]	; (8009d34 <HAL_TIM_ConfigClockSource+0x14c>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d0ea      	beq.n	8009c64 <HAL_TIM_ConfigClockSource+0x7c>
 8009c8e:	3210      	adds	r2, #16
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d0e7      	beq.n	8009c64 <HAL_TIM_ConfigClockSource+0x7c>
 8009c94:	3a20      	subs	r2, #32
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d0e4      	beq.n	8009c64 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 8009c9a:	2001      	movs	r0, #1
 8009c9c:	e003      	b.n	8009ca6 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8009c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ca2:	d13f      	bne.n	8009d24 <HAL_TIM_ConfigClockSource+0x13c>
 8009ca4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8009cac:	2300      	movs	r3, #0
 8009cae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8009cb2:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8009cb4:	3a20      	subs	r2, #32
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d0d4      	beq.n	8009c64 <HAL_TIM_ConfigClockSource+0x7c>
 8009cba:	d904      	bls.n	8009cc6 <HAL_TIM_ConfigClockSource+0xde>
 8009cbc:	4a1e      	ldr	r2, [pc, #120]	; (8009d38 <HAL_TIM_ConfigClockSource+0x150>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d0d0      	beq.n	8009c64 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 8009cc2:	2001      	movs	r0, #1
 8009cc4:	e7ef      	b.n	8009ca6 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8009cc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cca:	d0cb      	beq.n	8009c64 <HAL_TIM_ConfigClockSource+0x7c>
 8009ccc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009cd0:	d0c8      	beq.n	8009c64 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 8009cd2:	2001      	movs	r0, #1
 8009cd4:	e7e7      	b.n	8009ca6 <HAL_TIM_ConfigClockSource+0xbe>
      TIM_ETR_SetConfig(htim->Instance,
 8009cd6:	68cb      	ldr	r3, [r1, #12]
 8009cd8:	684a      	ldr	r2, [r1, #4]
 8009cda:	6889      	ldr	r1, [r1, #8]
 8009cdc:	6820      	ldr	r0, [r4, #0]
 8009cde:	f7ff ff76 	bl	8009bce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009ce2:	6822      	ldr	r2, [r4, #0]
 8009ce4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009ce6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8009cea:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009cec:	2000      	movs	r0, #0
      break;
 8009cee:	e7da      	b.n	8009ca6 <HAL_TIM_ConfigClockSource+0xbe>
      TIM_ETR_SetConfig(htim->Instance,
 8009cf0:	68cb      	ldr	r3, [r1, #12]
 8009cf2:	684a      	ldr	r2, [r1, #4]
 8009cf4:	6889      	ldr	r1, [r1, #8]
 8009cf6:	6820      	ldr	r0, [r4, #0]
 8009cf8:	f7ff ff69 	bl	8009bce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009cfc:	6822      	ldr	r2, [r4, #0]
 8009cfe:	6893      	ldr	r3, [r2, #8]
 8009d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d04:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009d06:	2000      	movs	r0, #0
      break;
 8009d08:	e7cd      	b.n	8009ca6 <HAL_TIM_ConfigClockSource+0xbe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d0a:	68ca      	ldr	r2, [r1, #12]
 8009d0c:	6849      	ldr	r1, [r1, #4]
 8009d0e:	6820      	ldr	r0, [r4, #0]
 8009d10:	f7ff fd70 	bl	80097f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d14:	2150      	movs	r1, #80	; 0x50
 8009d16:	6820      	ldr	r0, [r4, #0]
 8009d18:	f7ff fd93 	bl	8009842 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8009d1c:	2000      	movs	r0, #0
      break;
 8009d1e:	e7c2      	b.n	8009ca6 <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 8009d20:	2001      	movs	r0, #1
 8009d22:	e7c0      	b.n	8009ca6 <HAL_TIM_ConfigClockSource+0xbe>
 8009d24:	2001      	movs	r0, #1
 8009d26:	e7be      	b.n	8009ca6 <HAL_TIM_ConfigClockSource+0xbe>
  __HAL_LOCK(htim);
 8009d28:	2002      	movs	r0, #2
}
 8009d2a:	4770      	bx	lr
 8009d2c:	ffce0088 	.word	0xffce0088
 8009d30:	00100040 	.word	0x00100040
 8009d34:	00100060 	.word	0x00100060
 8009d38:	00100030 	.word	0x00100030

08009d3c <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8009aa6:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009aa8:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009aaa:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009aae:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8009ab2:	430a      	orrs	r2, r1
 8009ab4:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ab8:	6082      	str	r2, [r0, #8]
}
 8009aba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8009ac0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	f000 809b 	beq.w	8009c00 <HAL_TIM_ConfigClockSource+0x140>
{
 8009aca:	b510      	push	{r4, lr}
 8009acc:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8009ace:	2301      	movs	r3, #1
 8009ad0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8009ada:	6802      	ldr	r2, [r0, #0]
 8009adc:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ade:	4b49      	ldr	r3, [pc, #292]	; (8009c04 <HAL_TIM_ConfigClockSource+0x144>)
 8009ae0:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8009ae2:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8009ae4:	680b      	ldr	r3, [r1, #0]
 8009ae6:	2b70      	cmp	r3, #112	; 0x70
 8009ae8:	d061      	beq.n	8009bae <HAL_TIM_ConfigClockSource+0xee>
 8009aea:	d831      	bhi.n	8009b50 <HAL_TIM_ConfigClockSource+0x90>
 8009aec:	2b50      	cmp	r3, #80	; 0x50
 8009aee:	d078      	beq.n	8009be2 <HAL_TIM_ConfigClockSource+0x122>
 8009af0:	d90c      	bls.n	8009b0c <HAL_TIM_ConfigClockSource+0x4c>
 8009af2:	2b60      	cmp	r3, #96	; 0x60
 8009af4:	d12a      	bne.n	8009b4c <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009af6:	68ca      	ldr	r2, [r1, #12]
 8009af8:	6849      	ldr	r1, [r1, #4]
 8009afa:	6820      	ldr	r0, [r4, #0]
 8009afc:	f7ff fdf9 	bl	80096f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b00:	2160      	movs	r1, #96	; 0x60
 8009b02:	6820      	ldr	r0, [r4, #0]
 8009b04:	f7ff fe09 	bl	800971a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8009b08:	2000      	movs	r0, #0
      break;
 8009b0a:	e038      	b.n	8009b7e <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8009b0c:	2b40      	cmp	r3, #64	; 0x40
 8009b0e:	d10a      	bne.n	8009b26 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b10:	68ca      	ldr	r2, [r1, #12]
 8009b12:	6849      	ldr	r1, [r1, #4]
 8009b14:	6820      	ldr	r0, [r4, #0]
 8009b16:	f7ff fdd9 	bl	80096cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b1a:	2140      	movs	r1, #64	; 0x40
 8009b1c:	6820      	ldr	r0, [r4, #0]
 8009b1e:	f7ff fdfc 	bl	800971a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8009b22:	2000      	movs	r0, #0
      break;
 8009b24:	e02b      	b.n	8009b7e <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8009b26:	d867      	bhi.n	8009bf8 <HAL_TIM_ConfigClockSource+0x138>
 8009b28:	2b20      	cmp	r3, #32
 8009b2a:	d007      	beq.n	8009b3c <HAL_TIM_ConfigClockSource+0x7c>
 8009b2c:	d903      	bls.n	8009b36 <HAL_TIM_ConfigClockSource+0x76>
 8009b2e:	2b30      	cmp	r3, #48	; 0x30
 8009b30:	d004      	beq.n	8009b3c <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 8009b32:	2001      	movs	r0, #1
 8009b34:	e023      	b.n	8009b7e <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8009b36:	b10b      	cbz	r3, 8009b3c <HAL_TIM_ConfigClockSource+0x7c>
 8009b38:	2b10      	cmp	r3, #16
 8009b3a:	d105      	bne.n	8009b48 <HAL_TIM_ConfigClockSource+0x88>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	6820      	ldr	r0, [r4, #0]
 8009b40:	f7ff fdeb 	bl	800971a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8009b44:	2000      	movs	r0, #0
      break;
 8009b46:	e01a      	b.n	8009b7e <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 8009b48:	2001      	movs	r0, #1
 8009b4a:	e018      	b.n	8009b7e <HAL_TIM_ConfigClockSource+0xbe>
 8009b4c:	2001      	movs	r0, #1
 8009b4e:	e016      	b.n	8009b7e <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8009b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b54:	d038      	beq.n	8009bc8 <HAL_TIM_ConfigClockSource+0x108>
 8009b56:	d90e      	bls.n	8009b76 <HAL_TIM_ConfigClockSource+0xb6>
 8009b58:	4a2b      	ldr	r2, [pc, #172]	; (8009c08 <HAL_TIM_ConfigClockSource+0x148>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d0ee      	beq.n	8009b3c <HAL_TIM_ConfigClockSource+0x7c>
 8009b5e:	d915      	bls.n	8009b8c <HAL_TIM_ConfigClockSource+0xcc>
 8009b60:	4a2a      	ldr	r2, [pc, #168]	; (8009c0c <HAL_TIM_ConfigClockSource+0x14c>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d0ea      	beq.n	8009b3c <HAL_TIM_ConfigClockSource+0x7c>
 8009b66:	3210      	adds	r2, #16
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d0e7      	beq.n	8009b3c <HAL_TIM_ConfigClockSource+0x7c>
 8009b6c:	3a20      	subs	r2, #32
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d0e4      	beq.n	8009b3c <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 8009b72:	2001      	movs	r0, #1
 8009b74:	e003      	b.n	8009b7e <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8009b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b7a:	d13f      	bne.n	8009bfc <HAL_TIM_ConfigClockSource+0x13c>
 8009b7c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8009b84:	2300      	movs	r3, #0
 8009b86:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8009b8a:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8009b8c:	3a20      	subs	r2, #32
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d0d4      	beq.n	8009b3c <HAL_TIM_ConfigClockSource+0x7c>
 8009b92:	d904      	bls.n	8009b9e <HAL_TIM_ConfigClockSource+0xde>
 8009b94:	4a1e      	ldr	r2, [pc, #120]	; (8009c10 <HAL_TIM_ConfigClockSource+0x150>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d0d0      	beq.n	8009b3c <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 8009b9a:	2001      	movs	r0, #1
 8009b9c:	e7ef      	b.n	8009b7e <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8009b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ba2:	d0cb      	beq.n	8009b3c <HAL_TIM_ConfigClockSource+0x7c>
 8009ba4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009ba8:	d0c8      	beq.n	8009b3c <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 8009baa:	2001      	movs	r0, #1
 8009bac:	e7e7      	b.n	8009b7e <HAL_TIM_ConfigClockSource+0xbe>
      TIM_ETR_SetConfig(htim->Instance,
 8009bae:	68cb      	ldr	r3, [r1, #12]
 8009bb0:	684a      	ldr	r2, [r1, #4]
 8009bb2:	6889      	ldr	r1, [r1, #8]
 8009bb4:	6820      	ldr	r0, [r4, #0]
 8009bb6:	f7ff ff76 	bl	8009aa6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009bba:	6822      	ldr	r2, [r4, #0]
 8009bbc:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009bbe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8009bc2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009bc4:	2000      	movs	r0, #0
      break;
 8009bc6:	e7da      	b.n	8009b7e <HAL_TIM_ConfigClockSource+0xbe>
      TIM_ETR_SetConfig(htim->Instance,
 8009bc8:	68cb      	ldr	r3, [r1, #12]
 8009bca:	684a      	ldr	r2, [r1, #4]
 8009bcc:	6889      	ldr	r1, [r1, #8]
 8009bce:	6820      	ldr	r0, [r4, #0]
 8009bd0:	f7ff ff69 	bl	8009aa6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009bd4:	6822      	ldr	r2, [r4, #0]
 8009bd6:	6893      	ldr	r3, [r2, #8]
 8009bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009bdc:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009bde:	2000      	movs	r0, #0
      break;
 8009be0:	e7cd      	b.n	8009b7e <HAL_TIM_ConfigClockSource+0xbe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009be2:	68ca      	ldr	r2, [r1, #12]
 8009be4:	6849      	ldr	r1, [r1, #4]
 8009be6:	6820      	ldr	r0, [r4, #0]
 8009be8:	f7ff fd70 	bl	80096cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009bec:	2150      	movs	r1, #80	; 0x50
 8009bee:	6820      	ldr	r0, [r4, #0]
 8009bf0:	f7ff fd93 	bl	800971a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8009bf4:	2000      	movs	r0, #0
      break;
 8009bf6:	e7c2      	b.n	8009b7e <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 8009bf8:	2001      	movs	r0, #1
 8009bfa:	e7c0      	b.n	8009b7e <HAL_TIM_ConfigClockSource+0xbe>
 8009bfc:	2001      	movs	r0, #1
 8009bfe:	e7be      	b.n	8009b7e <HAL_TIM_ConfigClockSource+0xbe>
  __HAL_LOCK(htim);
 8009c00:	2002      	movs	r0, #2
}
 8009c02:	4770      	bx	lr
 8009c04:	ffce0088 	.word	0xffce0088
 8009c08:	00100040 	.word	0x00100040
 8009c0c:	00100060 	.word	0x00100060
 8009c10:	00100030 	.word	0x00100030

08009c14 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> render
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8009d3c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d04c      	beq.n	8009dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
{
 8009d44:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8009d46:	2301      	movs	r3, #1
 8009d48:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d4c:	2302      	movs	r3, #2
 8009d4e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d52:	6802      	ldr	r2, [r0, #0]
 8009d54:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d56:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d58:	4d22      	ldr	r5, [pc, #136]	; (8009de4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8009d5a:	42aa      	cmp	r2, r5
 8009d5c:	d007      	beq.n	8009d6e <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8009d5e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009d62:	42aa      	cmp	r2, r5
 8009d64:	d003      	beq.n	8009d6e <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8009d66:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8009d6a:	42aa      	cmp	r2, r5
 8009d6c:	d103      	bne.n	8009d76 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
=======
 8009c14:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d04c      	beq.n	8009cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
{
 8009c1c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8009c1e:	2301      	movs	r3, #1
 8009c20:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c24:	2302      	movs	r3, #2
 8009c26:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c2a:	6802      	ldr	r2, [r0, #0]
 8009c2c:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c2e:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009c30:	4d22      	ldr	r5, [pc, #136]	; (8009cbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8009c32:	42aa      	cmp	r2, r5
 8009c34:	d007      	beq.n	8009c46 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8009c36:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009c3a:	42aa      	cmp	r2, r5
 8009c3c:	d003      	beq.n	8009c46 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8009c3e:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8009c42:	42aa      	cmp	r2, r5
 8009c44:	d103      	bne.n	8009c4e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
>>>>>>> render
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
<<<<<<< HEAD
 8009d6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d72:	684d      	ldr	r5, [r1, #4]
 8009d74:	432b      	orrs	r3, r5
=======
 8009c46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009c4a:	684d      	ldr	r5, [r1, #4]
 8009c4c:	432b      	orrs	r3, r5
>>>>>>> render
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
<<<<<<< HEAD
 8009d76:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d7e:	680d      	ldr	r5, [r1, #0]
 8009d80:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d82:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d84:	6803      	ldr	r3, [r0, #0]
 8009d86:	4a17      	ldr	r2, [pc, #92]	; (8009de4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d01a      	beq.n	8009dc2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8009d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d90:	d017      	beq.n	8009dc2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8009d92:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d013      	beq.n	8009dc2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8009d9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d00f      	beq.n	8009dc2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8009da2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d00b      	beq.n	8009dc2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8009daa:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d007      	beq.n	8009dc2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8009db2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d003      	beq.n	8009dc2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8009dba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d104      	bne.n	8009dcc <HAL_TIMEx_MasterConfigSynchronization+0x90>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009dc2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009dc6:	688a      	ldr	r2, [r1, #8]
 8009dc8:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009dca:	609c      	str	r4, [r3, #8]
=======
 8009c4e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c56:	680d      	ldr	r5, [r1, #0]
 8009c58:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c5a:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c5c:	6803      	ldr	r3, [r0, #0]
 8009c5e:	4a17      	ldr	r2, [pc, #92]	; (8009cbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d01a      	beq.n	8009c9a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8009c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c68:	d017      	beq.n	8009c9a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8009c6a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d013      	beq.n	8009c9a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8009c72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d00f      	beq.n	8009c9a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8009c7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d00b      	beq.n	8009c9a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8009c82:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d007      	beq.n	8009c9a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8009c8a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d003      	beq.n	8009c9a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8009c92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d104      	bne.n	8009ca4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c9a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c9e:	688a      	ldr	r2, [r1, #8]
 8009ca0:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ca2:	609c      	str	r4, [r3, #8]
>>>>>>> render
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8009dcc:	2301      	movs	r3, #1
 8009dce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8009dd8:	4618      	mov	r0, r3
}
 8009dda:	bc30      	pop	{r4, r5}
 8009ddc:	4770      	bx	lr
  __HAL_LOCK(htim);
 8009dde:	2002      	movs	r0, #2
}
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	40012c00 	.word	0x40012c00

08009de8 <HAL_TIMEx_ConfigBreakDeadTime>:
=======
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009caa:	2300      	movs	r3, #0
 8009cac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8009cb0:	4618      	mov	r0, r3
}
 8009cb2:	bc30      	pop	{r4, r5}
 8009cb4:	4770      	bx	lr
  __HAL_LOCK(htim);
 8009cb6:	2002      	movs	r0, #2
}
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop
 8009cbc:	40012c00 	.word	0x40012c00

08009cc0 <HAL_TIMEx_ConfigBreakDeadTime>:
>>>>>>> render
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8009de8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d060      	beq.n	8009eb2 <HAL_TIMEx_ConfigBreakDeadTime+0xca>
{
 8009df0:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8009df2:	2301      	movs	r3, #1
 8009df4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
=======
 8009cc0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d060      	beq.n	8009d8a <HAL_TIMEx_ConfigBreakDeadTime+0xca>
{
 8009cc8:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8009cca:	2301      	movs	r3, #1
 8009ccc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
>>>>>>> render

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
<<<<<<< HEAD
 8009df8:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dfe:	688a      	ldr	r2, [r1, #8]
 8009e00:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009e02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e06:	684a      	ldr	r2, [r1, #4]
 8009e08:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009e0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e0e:	680a      	ldr	r2, [r1, #0]
 8009e10:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009e12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e16:	690a      	ldr	r2, [r1, #16]
 8009e18:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009e1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e1e:	694a      	ldr	r2, [r1, #20]
 8009e20:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e26:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8009e28:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009e2a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8009e2e:	698a      	ldr	r2, [r1, #24]
 8009e30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009e34:	6802      	ldr	r2, [r0, #0]
 8009e36:	4c20      	ldr	r4, [pc, #128]	; (8009eb8 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8009e38:	42a2      	cmp	r2, r4
 8009e3a:	d007      	beq.n	8009e4c <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8009e3c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8009e40:	42a2      	cmp	r2, r4
 8009e42:	d003      	beq.n	8009e4c <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8009e44:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8009e48:	42a2      	cmp	r2, r4
 8009e4a:	d103      	bne.n	8009e54 <HAL_TIMEx_ConfigBreakDeadTime+0x6c>
=======
 8009cd0:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cd6:	688a      	ldr	r2, [r1, #8]
 8009cd8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009cda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cde:	684a      	ldr	r2, [r1, #4]
 8009ce0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009ce2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ce6:	680a      	ldr	r2, [r1, #0]
 8009ce8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009cea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cee:	690a      	ldr	r2, [r1, #16]
 8009cf0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009cf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cf6:	694a      	ldr	r2, [r1, #20]
 8009cf8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cfe:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8009d00:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009d02:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8009d06:	698a      	ldr	r2, [r1, #24]
 8009d08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009d0c:	6802      	ldr	r2, [r0, #0]
 8009d0e:	4c20      	ldr	r4, [pc, #128]	; (8009d90 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8009d10:	42a2      	cmp	r2, r4
 8009d12:	d007      	beq.n	8009d24 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8009d14:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8009d18:	42a2      	cmp	r2, r4
 8009d1a:	d003      	beq.n	8009d24 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8009d1c:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8009d20:	42a2      	cmp	r2, r4
 8009d22:	d103      	bne.n	8009d2c <HAL_TIMEx_ConfigBreakDeadTime+0x6c>
>>>>>>> render
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
<<<<<<< HEAD
 8009e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e50:	69cc      	ldr	r4, [r1, #28]
 8009e52:	4323      	orrs	r3, r4
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009e54:	4c18      	ldr	r4, [pc, #96]	; (8009eb8 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8009e56:	42a2      	cmp	r2, r4
 8009e58:	d007      	beq.n	8009e6a <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8009e5a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8009e5e:	42a2      	cmp	r2, r4
 8009e60:	d003      	beq.n	8009e6a <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8009e62:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8009e66:	42a2      	cmp	r2, r4
 8009e68:	d11b      	bne.n	8009ea2 <HAL_TIMEx_ConfigBreakDeadTime+0xba>
=======
 8009d24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d28:	69cc      	ldr	r4, [r1, #28]
 8009d2a:	4323      	orrs	r3, r4
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009d2c:	4c18      	ldr	r4, [pc, #96]	; (8009d90 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8009d2e:	42a2      	cmp	r2, r4
 8009d30:	d007      	beq.n	8009d42 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8009d32:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8009d36:	42a2      	cmp	r2, r4
 8009d38:	d003      	beq.n	8009d42 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8009d3a:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8009d3e:	42a2      	cmp	r2, r4
 8009d40:	d11b      	bne.n	8009d7a <HAL_TIMEx_ConfigBreakDeadTime+0xba>
>>>>>>> render
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
<<<<<<< HEAD
 8009e6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009e6e:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8009e70:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009e74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e78:	6a0c      	ldr	r4, [r1, #32]
 8009e7a:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009e7c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009e80:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8009e82:	4323      	orrs	r3, r4

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009e84:	4c0c      	ldr	r4, [pc, #48]	; (8009eb8 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8009e86:	42a2      	cmp	r2, r4
 8009e88:	d007      	beq.n	8009e9a <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8009e8a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8009e8e:	42a2      	cmp	r2, r4
 8009e90:	d003      	beq.n	8009e9a <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8009e92:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8009e96:	42a2      	cmp	r2, r4
 8009e98:	d103      	bne.n	8009ea2 <HAL_TIMEx_ConfigBreakDeadTime+0xba>
=======
 8009d42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009d46:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8009d48:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009d4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d50:	6a0c      	ldr	r4, [r1, #32]
 8009d52:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009d54:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009d58:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8009d5a:	4323      	orrs	r3, r4

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009d5c:	4c0c      	ldr	r4, [pc, #48]	; (8009d90 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8009d5e:	42a2      	cmp	r2, r4
 8009d60:	d007      	beq.n	8009d72 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8009d62:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8009d66:	42a2      	cmp	r2, r4
 8009d68:	d003      	beq.n	8009d72 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8009d6a:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8009d6e:	42a2      	cmp	r2, r4
 8009d70:	d103      	bne.n	8009d7a <HAL_TIMEx_ConfigBreakDeadTime+0xba>
>>>>>>> render
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
<<<<<<< HEAD
 8009e9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009e9e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8009ea0:	430b      	orrs	r3, r1
=======
 8009d72:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009d76:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8009d78:	430b      	orrs	r3, r1
>>>>>>> render
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
<<<<<<< HEAD
 8009ea2:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8009eaa:	4618      	mov	r0, r3
}
 8009eac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009eb0:	4770      	bx	lr
  __HAL_LOCK(htim);
 8009eb2:	2002      	movs	r0, #2
}
 8009eb4:	4770      	bx	lr
 8009eb6:	bf00      	nop
 8009eb8:	40012c00 	.word	0x40012c00

08009ebc <UART_SetConfig>:
=======
 8009d7a:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8009d82:	4618      	mov	r0, r3
}
 8009d84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d88:	4770      	bx	lr
  __HAL_LOCK(htim);
 8009d8a:	2002      	movs	r0, #2
}
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop
 8009d90:	40012c00 	.word	0x40012c00

08009d94 <UART_SetConfig>:
>>>>>>> render
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8009ebc:	b570      	push	{r4, r5, r6, lr}
 8009ebe:	4604      	mov	r4, r0
=======
 8009d94:	b570      	push	{r4, r5, r6, lr}
 8009d96:	4604      	mov	r4, r0
>>>>>>> render
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
<<<<<<< HEAD
 8009ec0:	6801      	ldr	r1, [r0, #0]
=======
 8009d98:	6801      	ldr	r1, [r0, #0]
>>>>>>> render
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< HEAD
 8009ec2:	6883      	ldr	r3, [r0, #8]
 8009ec4:	6902      	ldr	r2, [r0, #16]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	6942      	ldr	r2, [r0, #20]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	69c2      	ldr	r2, [r0, #28]
 8009ece:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ed0:	6808      	ldr	r0, [r1, #0]
 8009ed2:	4a96      	ldr	r2, [pc, #600]	; (800a12c <UART_SetConfig+0x270>)
 8009ed4:	4002      	ands	r2, r0
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	600b      	str	r3, [r1, #0]
=======
 8009d9a:	6883      	ldr	r3, [r0, #8]
 8009d9c:	6902      	ldr	r2, [r0, #16]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	6942      	ldr	r2, [r0, #20]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	69c2      	ldr	r2, [r0, #28]
 8009da6:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009da8:	6808      	ldr	r0, [r1, #0]
 8009daa:	4a96      	ldr	r2, [pc, #600]	; (800a004 <UART_SetConfig+0x270>)
 8009dac:	4002      	ands	r2, r0
 8009dae:	4313      	orrs	r3, r2
 8009db0:	600b      	str	r3, [r1, #0]
>>>>>>> render

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8009eda:	6822      	ldr	r2, [r4, #0]
 8009edc:	6853      	ldr	r3, [r2, #4]
 8009ede:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009ee2:	68e1      	ldr	r1, [r4, #12]
 8009ee4:	430b      	orrs	r3, r1
 8009ee6:	6053      	str	r3, [r2, #4]
=======
 8009db2:	6822      	ldr	r2, [r4, #0]
 8009db4:	6853      	ldr	r3, [r2, #4]
 8009db6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009dba:	68e1      	ldr	r1, [r4, #12]
 8009dbc:	430b      	orrs	r3, r1
 8009dbe:	6053      	str	r3, [r2, #4]
>>>>>>> render
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< HEAD
 8009ee8:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009eea:	6822      	ldr	r2, [r4, #0]
 8009eec:	4b90      	ldr	r3, [pc, #576]	; (800a130 <UART_SetConfig+0x274>)
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d001      	beq.n	8009ef6 <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009ef2:	6a23      	ldr	r3, [r4, #32]
 8009ef4:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ef6:	6893      	ldr	r3, [r2, #8]
 8009ef8:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009efc:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009f00:	430b      	orrs	r3, r1
 8009f02:	6093      	str	r3, [r2, #8]
=======
 8009dc0:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009dc2:	6822      	ldr	r2, [r4, #0]
 8009dc4:	4b90      	ldr	r3, [pc, #576]	; (800a008 <UART_SetConfig+0x274>)
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d001      	beq.n	8009dce <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009dca:	6a23      	ldr	r3, [r4, #32]
 8009dcc:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009dce:	6893      	ldr	r3, [r2, #8]
 8009dd0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009dd4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009dd8:	430b      	orrs	r3, r1
 8009dda:	6093      	str	r3, [r2, #8]
>>>>>>> render

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
<<<<<<< HEAD
 8009f04:	6822      	ldr	r2, [r4, #0]
 8009f06:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009f08:	f023 030f 	bic.w	r3, r3, #15
 8009f0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009f0e:	430b      	orrs	r3, r1
 8009f10:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f12:	6823      	ldr	r3, [r4, #0]
 8009f14:	4a87      	ldr	r2, [pc, #540]	; (800a134 <UART_SetConfig+0x278>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d010      	beq.n	8009f3c <UART_SetConfig+0x80>
 8009f1a:	4a87      	ldr	r2, [pc, #540]	; (800a138 <UART_SetConfig+0x27c>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d021      	beq.n	8009f64 <UART_SetConfig+0xa8>
 8009f20:	4a86      	ldr	r2, [pc, #536]	; (800a13c <UART_SetConfig+0x280>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d037      	beq.n	8009f96 <UART_SetConfig+0xda>
 8009f26:	4a86      	ldr	r2, [pc, #536]	; (800a140 <UART_SetConfig+0x284>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d05c      	beq.n	8009fe6 <UART_SetConfig+0x12a>
 8009f2c:	4a85      	ldr	r2, [pc, #532]	; (800a144 <UART_SetConfig+0x288>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d06b      	beq.n	800a00a <UART_SetConfig+0x14e>
 8009f32:	4a7f      	ldr	r2, [pc, #508]	; (800a130 <UART_SetConfig+0x274>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d07d      	beq.n	800a034 <UART_SetConfig+0x178>
 8009f38:	2210      	movs	r2, #16
 8009f3a:	e03a      	b.n	8009fb2 <UART_SetConfig+0xf6>
 8009f3c:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8009f40:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8009f44:	f002 0203 	and.w	r2, r2, #3
 8009f48:	2a03      	cmp	r2, #3
 8009f4a:	d809      	bhi.n	8009f60 <UART_SetConfig+0xa4>
 8009f4c:	e8df f002 	tbb	[pc, r2]
 8009f50:	06870402 	.word	0x06870402
 8009f54:	2201      	movs	r2, #1
 8009f56:	e02c      	b.n	8009fb2 <UART_SetConfig+0xf6>
 8009f58:	2204      	movs	r2, #4
 8009f5a:	e02a      	b.n	8009fb2 <UART_SetConfig+0xf6>
 8009f5c:	2208      	movs	r2, #8
 8009f5e:	e028      	b.n	8009fb2 <UART_SetConfig+0xf6>
 8009f60:	2210      	movs	r2, #16
 8009f62:	e026      	b.n	8009fb2 <UART_SetConfig+0xf6>
 8009f64:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8009f68:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8009f6c:	f002 020c 	and.w	r2, r2, #12
 8009f70:	2a0c      	cmp	r2, #12
 8009f72:	d80e      	bhi.n	8009f92 <UART_SetConfig+0xd6>
 8009f74:	e8df f002 	tbb	[pc, r2]
 8009f78:	0d0d0d07 	.word	0x0d0d0d07
 8009f7c:	0d0d0d09 	.word	0x0d0d0d09
 8009f80:	0d0d0d75 	.word	0x0d0d0d75
 8009f84:	0b          	.byte	0x0b
 8009f85:	00          	.byte	0x00
 8009f86:	2200      	movs	r2, #0
 8009f88:	e013      	b.n	8009fb2 <UART_SetConfig+0xf6>
 8009f8a:	2204      	movs	r2, #4
 8009f8c:	e011      	b.n	8009fb2 <UART_SetConfig+0xf6>
 8009f8e:	2208      	movs	r2, #8
 8009f90:	e00f      	b.n	8009fb2 <UART_SetConfig+0xf6>
 8009f92:	2210      	movs	r2, #16
 8009f94:	e00d      	b.n	8009fb2 <UART_SetConfig+0xf6>
 8009f96:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8009f9a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8009f9e:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8009fa2:	2a20      	cmp	r2, #32
 8009fa4:	d05f      	beq.n	800a066 <UART_SetConfig+0x1aa>
 8009fa6:	d81a      	bhi.n	8009fde <UART_SetConfig+0x122>
 8009fa8:	2a00      	cmp	r2, #0
 8009faa:	d05e      	beq.n	800a06a <UART_SetConfig+0x1ae>
 8009fac:	2a10      	cmp	r2, #16
 8009fae:	d15e      	bne.n	800a06e <UART_SetConfig+0x1b2>
 8009fb0:	2204      	movs	r2, #4

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009fb2:	495f      	ldr	r1, [pc, #380]	; (800a130 <UART_SetConfig+0x274>)
 8009fb4:	428b      	cmp	r3, r1
 8009fb6:	d076      	beq.n	800a0a6 <UART_SetConfig+0x1ea>
=======
 8009ddc:	6822      	ldr	r2, [r4, #0]
 8009dde:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009de0:	f023 030f 	bic.w	r3, r3, #15
 8009de4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009de6:	430b      	orrs	r3, r1
 8009de8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009dea:	6823      	ldr	r3, [r4, #0]
 8009dec:	4a87      	ldr	r2, [pc, #540]	; (800a00c <UART_SetConfig+0x278>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d010      	beq.n	8009e14 <UART_SetConfig+0x80>
 8009df2:	4a87      	ldr	r2, [pc, #540]	; (800a010 <UART_SetConfig+0x27c>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d021      	beq.n	8009e3c <UART_SetConfig+0xa8>
 8009df8:	4a86      	ldr	r2, [pc, #536]	; (800a014 <UART_SetConfig+0x280>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d037      	beq.n	8009e6e <UART_SetConfig+0xda>
 8009dfe:	4a86      	ldr	r2, [pc, #536]	; (800a018 <UART_SetConfig+0x284>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d05c      	beq.n	8009ebe <UART_SetConfig+0x12a>
 8009e04:	4a85      	ldr	r2, [pc, #532]	; (800a01c <UART_SetConfig+0x288>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d06b      	beq.n	8009ee2 <UART_SetConfig+0x14e>
 8009e0a:	4a7f      	ldr	r2, [pc, #508]	; (800a008 <UART_SetConfig+0x274>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d07d      	beq.n	8009f0c <UART_SetConfig+0x178>
 8009e10:	2210      	movs	r2, #16
 8009e12:	e03a      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009e14:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8009e18:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8009e1c:	f002 0203 	and.w	r2, r2, #3
 8009e20:	2a03      	cmp	r2, #3
 8009e22:	d809      	bhi.n	8009e38 <UART_SetConfig+0xa4>
 8009e24:	e8df f002 	tbb	[pc, r2]
 8009e28:	06870402 	.word	0x06870402
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	e02c      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009e30:	2204      	movs	r2, #4
 8009e32:	e02a      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009e34:	2208      	movs	r2, #8
 8009e36:	e028      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009e38:	2210      	movs	r2, #16
 8009e3a:	e026      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009e3c:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8009e40:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8009e44:	f002 020c 	and.w	r2, r2, #12
 8009e48:	2a0c      	cmp	r2, #12
 8009e4a:	d80e      	bhi.n	8009e6a <UART_SetConfig+0xd6>
 8009e4c:	e8df f002 	tbb	[pc, r2]
 8009e50:	0d0d0d07 	.word	0x0d0d0d07
 8009e54:	0d0d0d09 	.word	0x0d0d0d09
 8009e58:	0d0d0d75 	.word	0x0d0d0d75
 8009e5c:	0b          	.byte	0x0b
 8009e5d:	00          	.byte	0x00
 8009e5e:	2200      	movs	r2, #0
 8009e60:	e013      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009e62:	2204      	movs	r2, #4
 8009e64:	e011      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009e66:	2208      	movs	r2, #8
 8009e68:	e00f      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009e6a:	2210      	movs	r2, #16
 8009e6c:	e00d      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009e6e:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8009e72:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8009e76:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8009e7a:	2a20      	cmp	r2, #32
 8009e7c:	d05f      	beq.n	8009f3e <UART_SetConfig+0x1aa>
 8009e7e:	d81a      	bhi.n	8009eb6 <UART_SetConfig+0x122>
 8009e80:	2a00      	cmp	r2, #0
 8009e82:	d05e      	beq.n	8009f42 <UART_SetConfig+0x1ae>
 8009e84:	2a10      	cmp	r2, #16
 8009e86:	d15e      	bne.n	8009f46 <UART_SetConfig+0x1b2>
 8009e88:	2204      	movs	r2, #4

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e8a:	495f      	ldr	r1, [pc, #380]	; (800a008 <UART_SetConfig+0x274>)
 8009e8c:	428b      	cmp	r3, r1
 8009e8e:	d076      	beq.n	8009f7e <UART_SetConfig+0x1ea>
>>>>>>> render
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
<<<<<<< HEAD
 8009fb8:	69e0      	ldr	r0, [r4, #28]
 8009fba:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009fbe:	f000 80c9 	beq.w	800a154 <UART_SetConfig+0x298>
=======
 8009e90:	69e0      	ldr	r0, [r4, #28]
 8009e92:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009e96:	f000 80c9 	beq.w	800a02c <UART_SetConfig+0x298>
>>>>>>> render
      }
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< HEAD
 8009fc2:	2a08      	cmp	r2, #8
 8009fc4:	f200 8134 	bhi.w	800a230 <UART_SetConfig+0x374>
 8009fc8:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009fcc:	011900f7 	.word	0x011900f7
 8009fd0:	013200f5 	.word	0x013200f5
 8009fd4:	0132011c 	.word	0x0132011c
 8009fd8:	01320132 	.word	0x01320132
 8009fdc:	011f      	.short	0x011f
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009fde:	2a30      	cmp	r2, #48	; 0x30
 8009fe0:	d147      	bne.n	800a072 <UART_SetConfig+0x1b6>
 8009fe2:	2208      	movs	r2, #8
 8009fe4:	e7e5      	b.n	8009fb2 <UART_SetConfig+0xf6>
 8009fe6:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8009fea:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8009fee:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8009ff2:	2a80      	cmp	r2, #128	; 0x80
 8009ff4:	d03f      	beq.n	800a076 <UART_SetConfig+0x1ba>
 8009ff6:	d804      	bhi.n	800a002 <UART_SetConfig+0x146>
 8009ff8:	b3fa      	cbz	r2, 800a07a <UART_SetConfig+0x1be>
 8009ffa:	2a40      	cmp	r2, #64	; 0x40
 8009ffc:	d13f      	bne.n	800a07e <UART_SetConfig+0x1c2>
 8009ffe:	2204      	movs	r2, #4
 800a000:	e7d7      	b.n	8009fb2 <UART_SetConfig+0xf6>
 800a002:	2ac0      	cmp	r2, #192	; 0xc0
 800a004:	d13d      	bne.n	800a082 <UART_SetConfig+0x1c6>
 800a006:	2208      	movs	r2, #8
 800a008:	e7d3      	b.n	8009fb2 <UART_SetConfig+0xf6>
 800a00a:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 800a00e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800a012:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800a016:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800a01a:	d034      	beq.n	800a086 <UART_SetConfig+0x1ca>
 800a01c:	d805      	bhi.n	800a02a <UART_SetConfig+0x16e>
 800a01e:	b3a2      	cbz	r2, 800a08a <UART_SetConfig+0x1ce>
 800a020:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800a024:	d133      	bne.n	800a08e <UART_SetConfig+0x1d2>
 800a026:	2204      	movs	r2, #4
 800a028:	e7c3      	b.n	8009fb2 <UART_SetConfig+0xf6>
 800a02a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800a02e:	d130      	bne.n	800a092 <UART_SetConfig+0x1d6>
 800a030:	2208      	movs	r2, #8
 800a032:	e7be      	b.n	8009fb2 <UART_SetConfig+0xf6>
 800a034:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 800a038:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800a03c:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800a040:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800a044:	d027      	beq.n	800a096 <UART_SetConfig+0x1da>
 800a046:	d805      	bhi.n	800a054 <UART_SetConfig+0x198>
 800a048:	b33a      	cbz	r2, 800a09a <UART_SetConfig+0x1de>
 800a04a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800a04e:	d126      	bne.n	800a09e <UART_SetConfig+0x1e2>
 800a050:	2204      	movs	r2, #4
 800a052:	e7ae      	b.n	8009fb2 <UART_SetConfig+0xf6>
 800a054:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800a058:	d123      	bne.n	800a0a2 <UART_SetConfig+0x1e6>
 800a05a:	2208      	movs	r2, #8
 800a05c:	e7a9      	b.n	8009fb2 <UART_SetConfig+0xf6>
 800a05e:	2202      	movs	r2, #2
 800a060:	e7a7      	b.n	8009fb2 <UART_SetConfig+0xf6>
 800a062:	2202      	movs	r2, #2
 800a064:	e7a5      	b.n	8009fb2 <UART_SetConfig+0xf6>
 800a066:	2202      	movs	r2, #2
 800a068:	e7a3      	b.n	8009fb2 <UART_SetConfig+0xf6>
 800a06a:	2200      	movs	r2, #0
 800a06c:	e7a1      	b.n	8009fb2 <UART_SetConfig+0xf6>
 800a06e:	2210      	movs	r2, #16
 800a070:	e79f      	b.n	8009fb2 <UART_SetConfig+0xf6>
 800a072:	2210      	movs	r2, #16
 800a074:	e79d      	b.n	8009fb2 <UART_SetConfig+0xf6>
 800a076:	2202      	movs	r2, #2
 800a078:	e79b      	b.n	8009fb2 <UART_SetConfig+0xf6>
 800a07a:	2200      	movs	r2, #0
 800a07c:	e799      	b.n	8009fb2 <UART_SetConfig+0xf6>
 800a07e:	2210      	movs	r2, #16
 800a080:	e797      	b.n	8009fb2 <UART_SetConfig+0xf6>
 800a082:	2210      	movs	r2, #16
 800a084:	e795      	b.n	8009fb2 <UART_SetConfig+0xf6>
 800a086:	2202      	movs	r2, #2
 800a088:	e793      	b.n	8009fb2 <UART_SetConfig+0xf6>
 800a08a:	2200      	movs	r2, #0
 800a08c:	e791      	b.n	8009fb2 <UART_SetConfig+0xf6>
 800a08e:	2210      	movs	r2, #16
 800a090:	e78f      	b.n	8009fb2 <UART_SetConfig+0xf6>
 800a092:	2210      	movs	r2, #16
 800a094:	e78d      	b.n	8009fb2 <UART_SetConfig+0xf6>
 800a096:	2202      	movs	r2, #2
 800a098:	e78b      	b.n	8009fb2 <UART_SetConfig+0xf6>
 800a09a:	2200      	movs	r2, #0
 800a09c:	e789      	b.n	8009fb2 <UART_SetConfig+0xf6>
 800a09e:	2210      	movs	r2, #16
 800a0a0:	e787      	b.n	8009fb2 <UART_SetConfig+0xf6>
 800a0a2:	2210      	movs	r2, #16
 800a0a4:	e785      	b.n	8009fb2 <UART_SetConfig+0xf6>
    switch (clocksource)
 800a0a6:	2a08      	cmp	r2, #8
 800a0a8:	f200 80b2 	bhi.w	800a210 <UART_SetConfig+0x354>
 800a0ac:	e8df f002 	tbb	[pc, r2]
 800a0b0:	b03bb008 	.word	0xb03bb008
 800a0b4:	b0b0b038 	.word	0xb0b0b038
 800a0b8:	05          	.byte	0x05
 800a0b9:	00          	.byte	0x00
 800a0ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a0be:	e004      	b.n	800a0ca <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0c0:	f7fe ffb2 	bl	8009028 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	f000 80a5 	beq.w	800a214 <UART_SetConfig+0x358>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a0ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a0cc:	4b1e      	ldr	r3, [pc, #120]	; (800a148 <UART_SetConfig+0x28c>)
 800a0ce:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800a0d2:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0d6:	6865      	ldr	r5, [r4, #4]
 800a0d8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800a0dc:	4299      	cmp	r1, r3
 800a0de:	f200 809b 	bhi.w	800a218 <UART_SetConfig+0x35c>
 800a0e2:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800a0e6:	f200 8099 	bhi.w	800a21c <UART_SetConfig+0x360>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0ea:	2600      	movs	r6, #0
 800a0ec:	4633      	mov	r3, r6
 800a0ee:	4631      	mov	r1, r6
 800a0f0:	f7f6 fdf2 	bl	8000cd8 <__aeabi_uldivmod>
 800a0f4:	0209      	lsls	r1, r1, #8
 800a0f6:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800a0fa:	0200      	lsls	r0, r0, #8
 800a0fc:	086b      	lsrs	r3, r5, #1
 800a0fe:	18c0      	adds	r0, r0, r3
 800a100:	462a      	mov	r2, r5
 800a102:	4633      	mov	r3, r6
 800a104:	f141 0100 	adc.w	r1, r1, #0
 800a108:	f7f6 fde6 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a10c:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800a110:	4b0e      	ldr	r3, [pc, #56]	; (800a14c <UART_SetConfig+0x290>)
 800a112:	429a      	cmp	r2, r3
 800a114:	f200 8084 	bhi.w	800a220 <UART_SetConfig+0x364>
          huart->Instance->BRR = usartdiv;
 800a118:	6823      	ldr	r3, [r4, #0]
 800a11a:	60d8      	str	r0, [r3, #12]
 800a11c:	4630      	mov	r0, r6
 800a11e:	e065      	b.n	800a1ec <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetSysClockFreq();
 800a120:	f7fe fe3c 	bl	8008d9c <HAL_RCC_GetSysClockFreq>
        break;
 800a124:	e7ce      	b.n	800a0c4 <UART_SetConfig+0x208>
        pclk = (uint32_t) HSI_VALUE;
 800a126:	480a      	ldr	r0, [pc, #40]	; (800a150 <UART_SetConfig+0x294>)
 800a128:	e7cf      	b.n	800a0ca <UART_SetConfig+0x20e>
 800a12a:	bf00      	nop
 800a12c:	cfff69f3 	.word	0xcfff69f3
 800a130:	40008000 	.word	0x40008000
 800a134:	40013800 	.word	0x40013800
 800a138:	40004400 	.word	0x40004400
 800a13c:	40004800 	.word	0x40004800
 800a140:	40004c00 	.word	0x40004c00
 800a144:	40005000 	.word	0x40005000
 800a148:	08013028 	.word	0x08013028
 800a14c:	000ffcff 	.word	0x000ffcff
 800a150:	00f42400 	.word	0x00f42400
    switch (clocksource)
 800a154:	2a08      	cmp	r2, #8
 800a156:	d865      	bhi.n	800a224 <UART_SetConfig+0x368>
 800a158:	e8df f002 	tbb	[pc, r2]
 800a15c:	64052707 	.word	0x64052707
 800a160:	6464642a 	.word	0x6464642a
 800a164:	0b          	.byte	0x0b
 800a165:	00          	.byte	0x00
 800a166:	4835      	ldr	r0, [pc, #212]	; (800a23c <UART_SetConfig+0x380>)
 800a168:	e003      	b.n	800a172 <UART_SetConfig+0x2b6>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a16a:	f7fe ff5d 	bl	8009028 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a16e:	2800      	cmp	r0, #0
 800a170:	d05a      	beq.n	800a228 <UART_SetConfig+0x36c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a172:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a174:	4b32      	ldr	r3, [pc, #200]	; (800a240 <UART_SetConfig+0x384>)
 800a176:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a17a:	fbb0 f0f3 	udiv	r0, r0, r3
 800a17e:	6862      	ldr	r2, [r4, #4]
 800a180:	0853      	lsrs	r3, r2, #1
 800a182:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800a186:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a18a:	f1a0 0210 	sub.w	r2, r0, #16
 800a18e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800a192:	429a      	cmp	r2, r3
 800a194:	d84a      	bhi.n	800a22c <UART_SetConfig+0x370>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a196:	b283      	uxth	r3, r0
 800a198:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a19c:	f3c0 0042 	ubfx	r0, r0, #1, #3
 800a1a0:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 800a1a2:	6823      	ldr	r3, [r4, #0]
 800a1a4:	60d8      	str	r0, [r3, #12]
 800a1a6:	2000      	movs	r0, #0
 800a1a8:	e020      	b.n	800a1ec <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1aa:	f7fe ff4f 	bl	800904c <HAL_RCC_GetPCLK2Freq>
        break;
 800a1ae:	e7de      	b.n	800a16e <UART_SetConfig+0x2b2>
        pclk = HAL_RCC_GetSysClockFreq();
 800a1b0:	f7fe fdf4 	bl	8008d9c <HAL_RCC_GetSysClockFreq>
        break;
 800a1b4:	e7db      	b.n	800a16e <UART_SetConfig+0x2b2>
    switch (clocksource)
 800a1b6:	4821      	ldr	r0, [pc, #132]	; (800a23c <UART_SetConfig+0x380>)
 800a1b8:	e003      	b.n	800a1c2 <UART_SetConfig+0x306>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1ba:	f7fe ff35 	bl	8009028 <HAL_RCC_GetPCLK1Freq>
=======
 8009e9a:	2a08      	cmp	r2, #8
 8009e9c:	f200 8134 	bhi.w	800a108 <UART_SetConfig+0x374>
 8009ea0:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009ea4:	011900f7 	.word	0x011900f7
 8009ea8:	013200f5 	.word	0x013200f5
 8009eac:	0132011c 	.word	0x0132011c
 8009eb0:	01320132 	.word	0x01320132
 8009eb4:	011f      	.short	0x011f
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009eb6:	2a30      	cmp	r2, #48	; 0x30
 8009eb8:	d147      	bne.n	8009f4a <UART_SetConfig+0x1b6>
 8009eba:	2208      	movs	r2, #8
 8009ebc:	e7e5      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009ebe:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8009ec2:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8009ec6:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8009eca:	2a80      	cmp	r2, #128	; 0x80
 8009ecc:	d03f      	beq.n	8009f4e <UART_SetConfig+0x1ba>
 8009ece:	d804      	bhi.n	8009eda <UART_SetConfig+0x146>
 8009ed0:	b3fa      	cbz	r2, 8009f52 <UART_SetConfig+0x1be>
 8009ed2:	2a40      	cmp	r2, #64	; 0x40
 8009ed4:	d13f      	bne.n	8009f56 <UART_SetConfig+0x1c2>
 8009ed6:	2204      	movs	r2, #4
 8009ed8:	e7d7      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009eda:	2ac0      	cmp	r2, #192	; 0xc0
 8009edc:	d13d      	bne.n	8009f5a <UART_SetConfig+0x1c6>
 8009ede:	2208      	movs	r2, #8
 8009ee0:	e7d3      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009ee2:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8009ee6:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8009eea:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8009eee:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8009ef2:	d034      	beq.n	8009f5e <UART_SetConfig+0x1ca>
 8009ef4:	d805      	bhi.n	8009f02 <UART_SetConfig+0x16e>
 8009ef6:	b3a2      	cbz	r2, 8009f62 <UART_SetConfig+0x1ce>
 8009ef8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8009efc:	d133      	bne.n	8009f66 <UART_SetConfig+0x1d2>
 8009efe:	2204      	movs	r2, #4
 8009f00:	e7c3      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009f02:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009f06:	d130      	bne.n	8009f6a <UART_SetConfig+0x1d6>
 8009f08:	2208      	movs	r2, #8
 8009f0a:	e7be      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009f0c:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8009f10:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8009f14:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8009f18:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8009f1c:	d027      	beq.n	8009f6e <UART_SetConfig+0x1da>
 8009f1e:	d805      	bhi.n	8009f2c <UART_SetConfig+0x198>
 8009f20:	b33a      	cbz	r2, 8009f72 <UART_SetConfig+0x1de>
 8009f22:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009f26:	d126      	bne.n	8009f76 <UART_SetConfig+0x1e2>
 8009f28:	2204      	movs	r2, #4
 8009f2a:	e7ae      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009f2c:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8009f30:	d123      	bne.n	8009f7a <UART_SetConfig+0x1e6>
 8009f32:	2208      	movs	r2, #8
 8009f34:	e7a9      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009f36:	2202      	movs	r2, #2
 8009f38:	e7a7      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009f3a:	2202      	movs	r2, #2
 8009f3c:	e7a5      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009f3e:	2202      	movs	r2, #2
 8009f40:	e7a3      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009f42:	2200      	movs	r2, #0
 8009f44:	e7a1      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009f46:	2210      	movs	r2, #16
 8009f48:	e79f      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009f4a:	2210      	movs	r2, #16
 8009f4c:	e79d      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009f4e:	2202      	movs	r2, #2
 8009f50:	e79b      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009f52:	2200      	movs	r2, #0
 8009f54:	e799      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009f56:	2210      	movs	r2, #16
 8009f58:	e797      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009f5a:	2210      	movs	r2, #16
 8009f5c:	e795      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009f5e:	2202      	movs	r2, #2
 8009f60:	e793      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009f62:	2200      	movs	r2, #0
 8009f64:	e791      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009f66:	2210      	movs	r2, #16
 8009f68:	e78f      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009f6a:	2210      	movs	r2, #16
 8009f6c:	e78d      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009f6e:	2202      	movs	r2, #2
 8009f70:	e78b      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009f72:	2200      	movs	r2, #0
 8009f74:	e789      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009f76:	2210      	movs	r2, #16
 8009f78:	e787      	b.n	8009e8a <UART_SetConfig+0xf6>
 8009f7a:	2210      	movs	r2, #16
 8009f7c:	e785      	b.n	8009e8a <UART_SetConfig+0xf6>
    switch (clocksource)
 8009f7e:	2a08      	cmp	r2, #8
 8009f80:	f200 80b2 	bhi.w	800a0e8 <UART_SetConfig+0x354>
 8009f84:	e8df f002 	tbb	[pc, r2]
 8009f88:	b03bb008 	.word	0xb03bb008
 8009f8c:	b0b0b038 	.word	0xb0b0b038
 8009f90:	05          	.byte	0x05
 8009f91:	00          	.byte	0x00
 8009f92:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009f96:	e004      	b.n	8009fa2 <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f98:	f7fe ffb2 	bl	8008f00 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	f000 80a5 	beq.w	800a0ec <UART_SetConfig+0x358>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009fa2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009fa4:	4b1e      	ldr	r3, [pc, #120]	; (800a020 <UART_SetConfig+0x28c>)
 8009fa6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8009faa:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fae:	6865      	ldr	r5, [r4, #4]
 8009fb0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8009fb4:	4299      	cmp	r1, r3
 8009fb6:	f200 809b 	bhi.w	800a0f0 <UART_SetConfig+0x35c>
 8009fba:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8009fbe:	f200 8099 	bhi.w	800a0f4 <UART_SetConfig+0x360>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fc2:	2600      	movs	r6, #0
 8009fc4:	4633      	mov	r3, r6
 8009fc6:	4631      	mov	r1, r6
 8009fc8:	f7f6 fe86 	bl	8000cd8 <__aeabi_uldivmod>
 8009fcc:	0209      	lsls	r1, r1, #8
 8009fce:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8009fd2:	0200      	lsls	r0, r0, #8
 8009fd4:	086b      	lsrs	r3, r5, #1
 8009fd6:	18c0      	adds	r0, r0, r3
 8009fd8:	462a      	mov	r2, r5
 8009fda:	4633      	mov	r3, r6
 8009fdc:	f141 0100 	adc.w	r1, r1, #0
 8009fe0:	f7f6 fe7a 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009fe4:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8009fe8:	4b0e      	ldr	r3, [pc, #56]	; (800a024 <UART_SetConfig+0x290>)
 8009fea:	429a      	cmp	r2, r3
 8009fec:	f200 8084 	bhi.w	800a0f8 <UART_SetConfig+0x364>
          huart->Instance->BRR = usartdiv;
 8009ff0:	6823      	ldr	r3, [r4, #0]
 8009ff2:	60d8      	str	r0, [r3, #12]
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	e065      	b.n	800a0c4 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetSysClockFreq();
 8009ff8:	f7fe fe3c 	bl	8008c74 <HAL_RCC_GetSysClockFreq>
        break;
 8009ffc:	e7ce      	b.n	8009f9c <UART_SetConfig+0x208>
        pclk = (uint32_t) HSI_VALUE;
 8009ffe:	480a      	ldr	r0, [pc, #40]	; (800a028 <UART_SetConfig+0x294>)
 800a000:	e7cf      	b.n	8009fa2 <UART_SetConfig+0x20e>
 800a002:	bf00      	nop
 800a004:	cfff69f3 	.word	0xcfff69f3
 800a008:	40008000 	.word	0x40008000
 800a00c:	40013800 	.word	0x40013800
 800a010:	40004400 	.word	0x40004400
 800a014:	40004800 	.word	0x40004800
 800a018:	40004c00 	.word	0x40004c00
 800a01c:	40005000 	.word	0x40005000
 800a020:	08012e90 	.word	0x08012e90
 800a024:	000ffcff 	.word	0x000ffcff
 800a028:	00f42400 	.word	0x00f42400
    switch (clocksource)
 800a02c:	2a08      	cmp	r2, #8
 800a02e:	d865      	bhi.n	800a0fc <UART_SetConfig+0x368>
 800a030:	e8df f002 	tbb	[pc, r2]
 800a034:	64052707 	.word	0x64052707
 800a038:	6464642a 	.word	0x6464642a
 800a03c:	0b          	.byte	0x0b
 800a03d:	00          	.byte	0x00
 800a03e:	4835      	ldr	r0, [pc, #212]	; (800a114 <UART_SetConfig+0x380>)
 800a040:	e003      	b.n	800a04a <UART_SetConfig+0x2b6>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a042:	f7fe ff5d 	bl	8008f00 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a046:	2800      	cmp	r0, #0
 800a048:	d05a      	beq.n	800a100 <UART_SetConfig+0x36c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a04a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a04c:	4b32      	ldr	r3, [pc, #200]	; (800a118 <UART_SetConfig+0x384>)
 800a04e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a052:	fbb0 f0f3 	udiv	r0, r0, r3
 800a056:	6862      	ldr	r2, [r4, #4]
 800a058:	0853      	lsrs	r3, r2, #1
 800a05a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800a05e:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a062:	f1a0 0210 	sub.w	r2, r0, #16
 800a066:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d84a      	bhi.n	800a104 <UART_SetConfig+0x370>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a06e:	b283      	uxth	r3, r0
 800a070:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a074:	f3c0 0042 	ubfx	r0, r0, #1, #3
 800a078:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 800a07a:	6823      	ldr	r3, [r4, #0]
 800a07c:	60d8      	str	r0, [r3, #12]
 800a07e:	2000      	movs	r0, #0
 800a080:	e020      	b.n	800a0c4 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetPCLK2Freq();
 800a082:	f7fe ff4f 	bl	8008f24 <HAL_RCC_GetPCLK2Freq>
        break;
 800a086:	e7de      	b.n	800a046 <UART_SetConfig+0x2b2>
        pclk = HAL_RCC_GetSysClockFreq();
 800a088:	f7fe fdf4 	bl	8008c74 <HAL_RCC_GetSysClockFreq>
        break;
 800a08c:	e7db      	b.n	800a046 <UART_SetConfig+0x2b2>
    switch (clocksource)
 800a08e:	4821      	ldr	r0, [pc, #132]	; (800a114 <UART_SetConfig+0x380>)
 800a090:	e003      	b.n	800a09a <UART_SetConfig+0x306>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a092:	f7fe ff35 	bl	8008f00 <HAL_RCC_GetPCLK1Freq>
>>>>>>> render
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
<<<<<<< HEAD
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d038      	beq.n	800a234 <UART_SetConfig+0x378>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a1c4:	4b1e      	ldr	r3, [pc, #120]	; (800a240 <UART_SetConfig+0x384>)
 800a1c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a1ca:	fbb0 f0f3 	udiv	r0, r0, r3
 800a1ce:	6863      	ldr	r3, [r4, #4]
 800a1d0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800a1d4:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1d8:	f1a0 0210 	sub.w	r2, r0, #16
 800a1dc:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d829      	bhi.n	800a238 <UART_SetConfig+0x37c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a1e4:	6823      	ldr	r3, [r4, #0]
 800a1e6:	b280      	uxth	r0, r0
 800a1e8:	60d8      	str	r0, [r3, #12]
 800a1ea:	2000      	movs	r0, #0
=======
 800a096:	2800      	cmp	r0, #0
 800a098:	d038      	beq.n	800a10c <UART_SetConfig+0x378>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a09a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a09c:	4b1e      	ldr	r3, [pc, #120]	; (800a118 <UART_SetConfig+0x384>)
 800a09e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a0a2:	fbb0 f0f3 	udiv	r0, r0, r3
 800a0a6:	6863      	ldr	r3, [r4, #4]
 800a0a8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800a0ac:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0b0:	f1a0 0210 	sub.w	r2, r0, #16
 800a0b4:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d829      	bhi.n	800a110 <UART_SetConfig+0x37c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a0bc:	6823      	ldr	r3, [r4, #0]
 800a0be:	b280      	uxth	r0, r0
 800a0c0:	60d8      	str	r0, [r3, #12]
 800a0c2:	2000      	movs	r0, #0
>>>>>>> render
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
<<<<<<< HEAD
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a1f2:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800a1fa:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 800a1fc:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1fe:	f7fe ff25 	bl	800904c <HAL_RCC_GetPCLK2Freq>
        break;
 800a202:	e7dc      	b.n	800a1be <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetSysClockFreq();
 800a204:	f7fe fdca 	bl	8008d9c <HAL_RCC_GetSysClockFreq>
        break;
 800a208:	e7d9      	b.n	800a1be <UART_SetConfig+0x302>
        pclk = (uint32_t) LSE_VALUE;
 800a20a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a20e:	e7d8      	b.n	800a1c2 <UART_SetConfig+0x306>
    switch (clocksource)
 800a210:	2001      	movs	r0, #1
 800a212:	e7eb      	b.n	800a1ec <UART_SetConfig+0x330>
 800a214:	2000      	movs	r0, #0
 800a216:	e7e9      	b.n	800a1ec <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 800a218:	2001      	movs	r0, #1
 800a21a:	e7e7      	b.n	800a1ec <UART_SetConfig+0x330>
 800a21c:	2001      	movs	r0, #1
 800a21e:	e7e5      	b.n	800a1ec <UART_SetConfig+0x330>
          ret = HAL_ERROR;
 800a220:	2001      	movs	r0, #1
 800a222:	e7e3      	b.n	800a1ec <UART_SetConfig+0x330>
    switch (clocksource)
 800a224:	2001      	movs	r0, #1
 800a226:	e7e1      	b.n	800a1ec <UART_SetConfig+0x330>
 800a228:	2000      	movs	r0, #0
 800a22a:	e7df      	b.n	800a1ec <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 800a22c:	2001      	movs	r0, #1
 800a22e:	e7dd      	b.n	800a1ec <UART_SetConfig+0x330>
    switch (clocksource)
 800a230:	2001      	movs	r0, #1
 800a232:	e7db      	b.n	800a1ec <UART_SetConfig+0x330>
 800a234:	2000      	movs	r0, #0
 800a236:	e7d9      	b.n	800a1ec <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 800a238:	2001      	movs	r0, #1
 800a23a:	e7d7      	b.n	800a1ec <UART_SetConfig+0x330>
 800a23c:	00f42400 	.word	0x00f42400
 800a240:	08013028 	.word	0x08013028

0800a244 <UART_AdvFeatureConfig>:
=======
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a0ca:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800a0d2:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 800a0d4:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0d6:	f7fe ff25 	bl	8008f24 <HAL_RCC_GetPCLK2Freq>
        break;
 800a0da:	e7dc      	b.n	800a096 <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetSysClockFreq();
 800a0dc:	f7fe fdca 	bl	8008c74 <HAL_RCC_GetSysClockFreq>
        break;
 800a0e0:	e7d9      	b.n	800a096 <UART_SetConfig+0x302>
        pclk = (uint32_t) LSE_VALUE;
 800a0e2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a0e6:	e7d8      	b.n	800a09a <UART_SetConfig+0x306>
    switch (clocksource)
 800a0e8:	2001      	movs	r0, #1
 800a0ea:	e7eb      	b.n	800a0c4 <UART_SetConfig+0x330>
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	e7e9      	b.n	800a0c4 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 800a0f0:	2001      	movs	r0, #1
 800a0f2:	e7e7      	b.n	800a0c4 <UART_SetConfig+0x330>
 800a0f4:	2001      	movs	r0, #1
 800a0f6:	e7e5      	b.n	800a0c4 <UART_SetConfig+0x330>
          ret = HAL_ERROR;
 800a0f8:	2001      	movs	r0, #1
 800a0fa:	e7e3      	b.n	800a0c4 <UART_SetConfig+0x330>
    switch (clocksource)
 800a0fc:	2001      	movs	r0, #1
 800a0fe:	e7e1      	b.n	800a0c4 <UART_SetConfig+0x330>
 800a100:	2000      	movs	r0, #0
 800a102:	e7df      	b.n	800a0c4 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 800a104:	2001      	movs	r0, #1
 800a106:	e7dd      	b.n	800a0c4 <UART_SetConfig+0x330>
    switch (clocksource)
 800a108:	2001      	movs	r0, #1
 800a10a:	e7db      	b.n	800a0c4 <UART_SetConfig+0x330>
 800a10c:	2000      	movs	r0, #0
 800a10e:	e7d9      	b.n	800a0c4 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 800a110:	2001      	movs	r0, #1
 800a112:	e7d7      	b.n	800a0c4 <UART_SetConfig+0x330>
 800a114:	00f42400 	.word	0x00f42400
 800a118:	08012e90 	.word	0x08012e90

0800a11c <UART_AdvFeatureConfig>:
>>>>>>> render
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< HEAD
 800a244:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a246:	f013 0f01 	tst.w	r3, #1
 800a24a:	d006      	beq.n	800a25a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a24c:	6802      	ldr	r2, [r0, #0]
 800a24e:	6853      	ldr	r3, [r2, #4]
 800a250:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a254:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a256:	430b      	orrs	r3, r1
 800a258:	6053      	str	r3, [r2, #4]
=======
 800a11c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a11e:	f013 0f01 	tst.w	r3, #1
 800a122:	d006      	beq.n	800a132 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a124:	6802      	ldr	r2, [r0, #0]
 800a126:	6853      	ldr	r3, [r2, #4]
 800a128:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a12c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a12e:	430b      	orrs	r3, r1
 800a130:	6053      	str	r3, [r2, #4]
>>>>>>> render
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
<<<<<<< HEAD
 800a25a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a25c:	f013 0f02 	tst.w	r3, #2
 800a260:	d006      	beq.n	800a270 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a262:	6802      	ldr	r2, [r0, #0]
 800a264:	6853      	ldr	r3, [r2, #4]
 800a266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a26a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800a26c:	430b      	orrs	r3, r1
 800a26e:	6053      	str	r3, [r2, #4]
=======
 800a132:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a134:	f013 0f02 	tst.w	r3, #2
 800a138:	d006      	beq.n	800a148 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a13a:	6802      	ldr	r2, [r0, #0]
 800a13c:	6853      	ldr	r3, [r2, #4]
 800a13e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a142:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800a144:	430b      	orrs	r3, r1
 800a146:	6053      	str	r3, [r2, #4]
>>>>>>> render
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
<<<<<<< HEAD
 800a270:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a272:	f013 0f04 	tst.w	r3, #4
 800a276:	d006      	beq.n	800a286 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a278:	6802      	ldr	r2, [r0, #0]
 800a27a:	6853      	ldr	r3, [r2, #4]
 800a27c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a280:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800a282:	430b      	orrs	r3, r1
 800a284:	6053      	str	r3, [r2, #4]
=======
 800a148:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a14a:	f013 0f04 	tst.w	r3, #4
 800a14e:	d006      	beq.n	800a15e <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a150:	6802      	ldr	r2, [r0, #0]
 800a152:	6853      	ldr	r3, [r2, #4]
 800a154:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a158:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800a15a:	430b      	orrs	r3, r1
 800a15c:	6053      	str	r3, [r2, #4]
>>>>>>> render
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
<<<<<<< HEAD
 800a286:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a288:	f013 0f08 	tst.w	r3, #8
 800a28c:	d006      	beq.n	800a29c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a28e:	6802      	ldr	r2, [r0, #0]
 800a290:	6853      	ldr	r3, [r2, #4]
 800a292:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a296:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800a298:	430b      	orrs	r3, r1
 800a29a:	6053      	str	r3, [r2, #4]
=======
 800a15e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a160:	f013 0f08 	tst.w	r3, #8
 800a164:	d006      	beq.n	800a174 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a166:	6802      	ldr	r2, [r0, #0]
 800a168:	6853      	ldr	r3, [r2, #4]
 800a16a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a16e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800a170:	430b      	orrs	r3, r1
 800a172:	6053      	str	r3, [r2, #4]
>>>>>>> render
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
<<<<<<< HEAD
 800a29c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a29e:	f013 0f10 	tst.w	r3, #16
 800a2a2:	d006      	beq.n	800a2b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2a4:	6802      	ldr	r2, [r0, #0]
 800a2a6:	6893      	ldr	r3, [r2, #8]
 800a2a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2ac:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800a2ae:	430b      	orrs	r3, r1
 800a2b0:	6093      	str	r3, [r2, #8]
=======
 800a174:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a176:	f013 0f10 	tst.w	r3, #16
 800a17a:	d006      	beq.n	800a18a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a17c:	6802      	ldr	r2, [r0, #0]
 800a17e:	6893      	ldr	r3, [r2, #8]
 800a180:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a184:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800a186:	430b      	orrs	r3, r1
 800a188:	6093      	str	r3, [r2, #8]
>>>>>>> render
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< HEAD
 800a2b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a2b4:	f013 0f20 	tst.w	r3, #32
 800a2b8:	d006      	beq.n	800a2c8 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a2ba:	6802      	ldr	r2, [r0, #0]
 800a2bc:	6893      	ldr	r3, [r2, #8]
 800a2be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2c2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800a2c4:	430b      	orrs	r3, r1
 800a2c6:	6093      	str	r3, [r2, #8]
=======
 800a18a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a18c:	f013 0f20 	tst.w	r3, #32
 800a190:	d006      	beq.n	800a1a0 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a192:	6802      	ldr	r2, [r0, #0]
 800a194:	6893      	ldr	r3, [r2, #8]
 800a196:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a19a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800a19c:	430b      	orrs	r3, r1
 800a19e:	6093      	str	r3, [r2, #8]
>>>>>>> render
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< HEAD
 800a2c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a2ca:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a2ce:	d00a      	beq.n	800a2e6 <UART_AdvFeatureConfig+0xa2>
=======
 800a1a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a1a2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a1a6:	d00a      	beq.n	800a1be <UART_AdvFeatureConfig+0xa2>
>>>>>>> render
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< HEAD
 800a2d0:	6802      	ldr	r2, [r0, #0]
 800a2d2:	6853      	ldr	r3, [r2, #4]
 800a2d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a2d8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800a2da:	430b      	orrs	r3, r1
 800a2dc:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a2de:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a2e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2e4:	d00b      	beq.n	800a2fe <UART_AdvFeatureConfig+0xba>
=======
 800a1a8:	6802      	ldr	r2, [r0, #0]
 800a1aa:	6853      	ldr	r3, [r2, #4]
 800a1ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a1b0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800a1b2:	430b      	orrs	r3, r1
 800a1b4:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a1b6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a1b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1bc:	d00b      	beq.n	800a1d6 <UART_AdvFeatureConfig+0xba>
>>>>>>> render
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< HEAD
 800a2e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a2e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a2ec:	d006      	beq.n	800a2fc <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a2ee:	6802      	ldr	r2, [r0, #0]
 800a2f0:	6853      	ldr	r3, [r2, #4]
 800a2f2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800a2f6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800a2f8:	430b      	orrs	r3, r1
 800a2fa:	6053      	str	r3, [r2, #4]
  }
}
 800a2fc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a2fe:	6802      	ldr	r2, [r0, #0]
 800a300:	6853      	ldr	r3, [r2, #4]
 800a302:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a306:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800a308:	430b      	orrs	r3, r1
 800a30a:	6053      	str	r3, [r2, #4]
 800a30c:	e7eb      	b.n	800a2e6 <UART_AdvFeatureConfig+0xa2>

0800a30e <UART_WaitOnFlagUntilTimeout>:
=======
 800a1be:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a1c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a1c4:	d006      	beq.n	800a1d4 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1c6:	6802      	ldr	r2, [r0, #0]
 800a1c8:	6853      	ldr	r3, [r2, #4]
 800a1ca:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800a1ce:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800a1d0:	430b      	orrs	r3, r1
 800a1d2:	6053      	str	r3, [r2, #4]
  }
}
 800a1d4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a1d6:	6802      	ldr	r2, [r0, #0]
 800a1d8:	6853      	ldr	r3, [r2, #4]
 800a1da:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a1de:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800a1e0:	430b      	orrs	r3, r1
 800a1e2:	6053      	str	r3, [r2, #4]
 800a1e4:	e7eb      	b.n	800a1be <UART_AdvFeatureConfig+0xa2>

0800a1e6 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> render
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 800a30e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a312:	4605      	mov	r5, r0
 800a314:	460f      	mov	r7, r1
 800a316:	4616      	mov	r6, r2
 800a318:	4699      	mov	r9, r3
 800a31a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a31e:	682c      	ldr	r4, [r5, #0]
 800a320:	69e4      	ldr	r4, [r4, #28]
 800a322:	ea37 0304 	bics.w	r3, r7, r4
 800a326:	bf0c      	ite	eq
 800a328:	f04f 0c01 	moveq.w	ip, #1
 800a32c:	f04f 0c00 	movne.w	ip, #0
 800a330:	45b4      	cmp	ip, r6
 800a332:	d157      	bne.n	800a3e4 <UART_WaitOnFlagUntilTimeout+0xd6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a334:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800a338:	d0f1      	beq.n	800a31e <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a33a:	f7fb f91d 	bl	8005578 <HAL_GetTick>
 800a33e:	eba0 0009 	sub.w	r0, r0, r9
 800a342:	4540      	cmp	r0, r8
 800a344:	d82f      	bhi.n	800a3a6 <UART_WaitOnFlagUntilTimeout+0x98>
 800a346:	f1b8 0f00 	cmp.w	r8, #0
 800a34a:	d02c      	beq.n	800a3a6 <UART_WaitOnFlagUntilTimeout+0x98>
=======
 800a1e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1ea:	4605      	mov	r5, r0
 800a1ec:	460f      	mov	r7, r1
 800a1ee:	4616      	mov	r6, r2
 800a1f0:	4699      	mov	r9, r3
 800a1f2:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1f6:	682c      	ldr	r4, [r5, #0]
 800a1f8:	69e4      	ldr	r4, [r4, #28]
 800a1fa:	ea37 0304 	bics.w	r3, r7, r4
 800a1fe:	bf0c      	ite	eq
 800a200:	f04f 0c01 	moveq.w	ip, #1
 800a204:	f04f 0c00 	movne.w	ip, #0
 800a208:	45b4      	cmp	ip, r6
 800a20a:	d157      	bne.n	800a2bc <UART_WaitOnFlagUntilTimeout+0xd6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a20c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800a210:	d0f1      	beq.n	800a1f6 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a212:	f7fb f91d 	bl	8005450 <HAL_GetTick>
 800a216:	eba0 0009 	sub.w	r0, r0, r9
 800a21a:	4540      	cmp	r0, r8
 800a21c:	d82f      	bhi.n	800a27e <UART_WaitOnFlagUntilTimeout+0x98>
 800a21e:	f1b8 0f00 	cmp.w	r8, #0
 800a222:	d02c      	beq.n	800a27e <UART_WaitOnFlagUntilTimeout+0x98>
>>>>>>> render
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
<<<<<<< HEAD
 800a34c:	682b      	ldr	r3, [r5, #0]
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	f012 0f04 	tst.w	r2, #4
 800a354:	d0e3      	beq.n	800a31e <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a356:	69da      	ldr	r2, [r3, #28]
 800a358:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800a35c:	d0df      	beq.n	800a31e <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a35e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a362:	621a      	str	r2, [r3, #32]
=======
 800a224:	682b      	ldr	r3, [r5, #0]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	f012 0f04 	tst.w	r2, #4
 800a22c:	d0e3      	beq.n	800a1f6 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a22e:	69da      	ldr	r2, [r3, #28]
 800a230:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800a234:	d0df      	beq.n	800a1f6 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a236:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a23a:	621a      	str	r2, [r3, #32]
>>>>>>> render

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
<<<<<<< HEAD
 800a364:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a366:	e852 3f00 	ldrex	r3, [r2]
 800a36a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a36e:	e842 3100 	strex	r1, r3, [r2]
 800a372:	2900      	cmp	r1, #0
 800a374:	d1f6      	bne.n	800a364 <UART_WaitOnFlagUntilTimeout+0x56>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a376:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a378:	f102 0308 	add.w	r3, r2, #8
 800a37c:	e853 3f00 	ldrex	r3, [r3]
 800a380:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a384:	3208      	adds	r2, #8
 800a386:	e842 3100 	strex	r1, r3, [r2]
 800a38a:	2900      	cmp	r1, #0
 800a38c:	d1f3      	bne.n	800a376 <UART_WaitOnFlagUntilTimeout+0x68>

          huart->gState = HAL_UART_STATE_READY;
 800a38e:	2320      	movs	r3, #32
 800a390:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a394:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a398:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a39c:	2300      	movs	r3, #0
 800a39e:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80

          return HAL_TIMEOUT;
 800a3a2:	2003      	movs	r0, #3
 800a3a4:	e01f      	b.n	800a3e6 <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a3a6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a8:	e852 3f00 	ldrex	r3, [r2]
 800a3ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b0:	e842 3100 	strex	r1, r3, [r2]
 800a3b4:	2900      	cmp	r1, #0
 800a3b6:	d1f6      	bne.n	800a3a6 <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3b8:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ba:	f102 0308 	add.w	r3, r2, #8
 800a3be:	e853 3f00 	ldrex	r3, [r3]
 800a3c2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c6:	3208      	adds	r2, #8
 800a3c8:	e842 3100 	strex	r1, r3, [r2]
 800a3cc:	2900      	cmp	r1, #0
 800a3ce:	d1f3      	bne.n	800a3b8 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 800a3d0:	2320      	movs	r3, #32
 800a3d2:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a3d6:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 800a3da:	2300      	movs	r3, #0
 800a3dc:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 800a3e0:	2003      	movs	r0, #3
 800a3e2:	e000      	b.n	800a3e6 <UART_WaitOnFlagUntilTimeout+0xd8>
=======
 800a23c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23e:	e852 3f00 	ldrex	r3, [r2]
 800a242:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a246:	e842 3100 	strex	r1, r3, [r2]
 800a24a:	2900      	cmp	r1, #0
 800a24c:	d1f6      	bne.n	800a23c <UART_WaitOnFlagUntilTimeout+0x56>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a24e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a250:	f102 0308 	add.w	r3, r2, #8
 800a254:	e853 3f00 	ldrex	r3, [r3]
 800a258:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25c:	3208      	adds	r2, #8
 800a25e:	e842 3100 	strex	r1, r3, [r2]
 800a262:	2900      	cmp	r1, #0
 800a264:	d1f3      	bne.n	800a24e <UART_WaitOnFlagUntilTimeout+0x68>

          huart->gState = HAL_UART_STATE_READY;
 800a266:	2320      	movs	r3, #32
 800a268:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a26c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a270:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a274:	2300      	movs	r3, #0
 800a276:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80

          return HAL_TIMEOUT;
 800a27a:	2003      	movs	r0, #3
 800a27c:	e01f      	b.n	800a2be <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a27e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a280:	e852 3f00 	ldrex	r3, [r2]
 800a284:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a288:	e842 3100 	strex	r1, r3, [r2]
 800a28c:	2900      	cmp	r1, #0
 800a28e:	d1f6      	bne.n	800a27e <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a290:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a292:	f102 0308 	add.w	r3, r2, #8
 800a296:	e853 3f00 	ldrex	r3, [r3]
 800a29a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29e:	3208      	adds	r2, #8
 800a2a0:	e842 3100 	strex	r1, r3, [r2]
 800a2a4:	2900      	cmp	r1, #0
 800a2a6:	d1f3      	bne.n	800a290 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 800a2a8:	2320      	movs	r3, #32
 800a2aa:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a2ae:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 800a2b8:	2003      	movs	r0, #3
 800a2ba:	e000      	b.n	800a2be <UART_WaitOnFlagUntilTimeout+0xd8>
>>>>>>> render
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 800a3e4:	2000      	movs	r0, #0
}
 800a3e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a3ea <UART_CheckIdleState>:
{
 800a3ea:	b530      	push	{r4, r5, lr}
 800a3ec:	b083      	sub	sp, #12
 800a3ee:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800a3f6:	f7fb f8bf 	bl	8005578 <HAL_GetTick>
 800a3fa:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a3fc:	6822      	ldr	r2, [r4, #0]
 800a3fe:	6812      	ldr	r2, [r2, #0]
 800a400:	f012 0f08 	tst.w	r2, #8
 800a404:	d10f      	bne.n	800a426 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f013 0f04 	tst.w	r3, #4
 800a40e:	d118      	bne.n	800a442 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800a410:	2320      	movs	r3, #32
 800a412:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a416:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a41a:	2000      	movs	r0, #0
 800a41c:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 800a41e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800a422:	b003      	add	sp, #12
 800a424:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a426:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a42a:	9300      	str	r3, [sp, #0]
 800a42c:	4603      	mov	r3, r0
 800a42e:	2200      	movs	r2, #0
 800a430:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a434:	4620      	mov	r0, r4
 800a436:	f7ff ff6a 	bl	800a30e <UART_WaitOnFlagUntilTimeout>
 800a43a:	2800      	cmp	r0, #0
 800a43c:	d0e3      	beq.n	800a406 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800a43e:	2003      	movs	r0, #3
 800a440:	e7ef      	b.n	800a422 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a442:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a446:	9300      	str	r3, [sp, #0]
 800a448:	462b      	mov	r3, r5
 800a44a:	2200      	movs	r2, #0
 800a44c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a450:	4620      	mov	r0, r4
 800a452:	f7ff ff5c 	bl	800a30e <UART_WaitOnFlagUntilTimeout>
 800a456:	2800      	cmp	r0, #0
 800a458:	d0da      	beq.n	800a410 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800a45a:	2003      	movs	r0, #3
 800a45c:	e7e1      	b.n	800a422 <UART_CheckIdleState+0x38>

0800a45e <HAL_UART_Init>:
  if (huart == NULL)
 800a45e:	b378      	cbz	r0, 800a4c0 <HAL_UART_Init+0x62>
{
 800a460:	b510      	push	{r4, lr}
 800a462:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800a464:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800a468:	b30b      	cbz	r3, 800a4ae <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800a46a:	2324      	movs	r3, #36	; 0x24
 800a46c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800a470:	6822      	ldr	r2, [r4, #0]
 800a472:	6813      	ldr	r3, [r2, #0]
 800a474:	f023 0301 	bic.w	r3, r3, #1
 800a478:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a47a:	4620      	mov	r0, r4
 800a47c:	f7ff fd1e 	bl	8009ebc <UART_SetConfig>
 800a480:	2801      	cmp	r0, #1
 800a482:	d013      	beq.n	800a4ac <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a484:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a486:	b9bb      	cbnz	r3, 800a4b8 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a488:	6822      	ldr	r2, [r4, #0]
 800a48a:	6853      	ldr	r3, [r2, #4]
 800a48c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800a490:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a492:	6822      	ldr	r2, [r4, #0]
 800a494:	6893      	ldr	r3, [r2, #8]
 800a496:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800a49a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800a49c:	6822      	ldr	r2, [r4, #0]
 800a49e:	6813      	ldr	r3, [r2, #0]
 800a4a0:	f043 0301 	orr.w	r3, r3, #1
 800a4a4:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	f7ff ff9f 	bl	800a3ea <UART_CheckIdleState>
}
 800a4ac:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800a4ae:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800a4b2:	f7fa fbed 	bl	8004c90 <HAL_UART_MspInit>
 800a4b6:	e7d8      	b.n	800a46a <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	f7ff fec3 	bl	800a244 <UART_AdvFeatureConfig>
 800a4be:	e7e3      	b.n	800a488 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800a4c0:	2001      	movs	r0, #1
}
 800a4c2:	4770      	bx	lr

0800a4c4 <UARTEx_SetNbDataToProcess>:
=======
 800a2bc:	2000      	movs	r0, #0
}
 800a2be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a2c2 <UART_CheckIdleState>:
{
 800a2c2:	b530      	push	{r4, r5, lr}
 800a2c4:	b083      	sub	sp, #12
 800a2c6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800a2ce:	f7fb f8bf 	bl	8005450 <HAL_GetTick>
 800a2d2:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2d4:	6822      	ldr	r2, [r4, #0]
 800a2d6:	6812      	ldr	r2, [r2, #0]
 800a2d8:	f012 0f08 	tst.w	r2, #8
 800a2dc:	d10f      	bne.n	800a2fe <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a2de:	6823      	ldr	r3, [r4, #0]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f013 0f04 	tst.w	r3, #4
 800a2e6:	d118      	bne.n	800a31a <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800a2e8:	2320      	movs	r3, #32
 800a2ea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a2ee:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2f2:	2000      	movs	r0, #0
 800a2f4:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 800a2f6:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800a2fa:	b003      	add	sp, #12
 800a2fc:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a302:	9300      	str	r3, [sp, #0]
 800a304:	4603      	mov	r3, r0
 800a306:	2200      	movs	r2, #0
 800a308:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a30c:	4620      	mov	r0, r4
 800a30e:	f7ff ff6a 	bl	800a1e6 <UART_WaitOnFlagUntilTimeout>
 800a312:	2800      	cmp	r0, #0
 800a314:	d0e3      	beq.n	800a2de <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800a316:	2003      	movs	r0, #3
 800a318:	e7ef      	b.n	800a2fa <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a31a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a31e:	9300      	str	r3, [sp, #0]
 800a320:	462b      	mov	r3, r5
 800a322:	2200      	movs	r2, #0
 800a324:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a328:	4620      	mov	r0, r4
 800a32a:	f7ff ff5c 	bl	800a1e6 <UART_WaitOnFlagUntilTimeout>
 800a32e:	2800      	cmp	r0, #0
 800a330:	d0da      	beq.n	800a2e8 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800a332:	2003      	movs	r0, #3
 800a334:	e7e1      	b.n	800a2fa <UART_CheckIdleState+0x38>

0800a336 <HAL_UART_Init>:
  if (huart == NULL)
 800a336:	b378      	cbz	r0, 800a398 <HAL_UART_Init+0x62>
{
 800a338:	b510      	push	{r4, lr}
 800a33a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800a33c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800a340:	b30b      	cbz	r3, 800a386 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800a342:	2324      	movs	r3, #36	; 0x24
 800a344:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800a348:	6822      	ldr	r2, [r4, #0]
 800a34a:	6813      	ldr	r3, [r2, #0]
 800a34c:	f023 0301 	bic.w	r3, r3, #1
 800a350:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a352:	4620      	mov	r0, r4
 800a354:	f7ff fd1e 	bl	8009d94 <UART_SetConfig>
 800a358:	2801      	cmp	r0, #1
 800a35a:	d013      	beq.n	800a384 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a35c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a35e:	b9bb      	cbnz	r3, 800a390 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a360:	6822      	ldr	r2, [r4, #0]
 800a362:	6853      	ldr	r3, [r2, #4]
 800a364:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800a368:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a36a:	6822      	ldr	r2, [r4, #0]
 800a36c:	6893      	ldr	r3, [r2, #8]
 800a36e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800a372:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800a374:	6822      	ldr	r2, [r4, #0]
 800a376:	6813      	ldr	r3, [r2, #0]
 800a378:	f043 0301 	orr.w	r3, r3, #1
 800a37c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800a37e:	4620      	mov	r0, r4
 800a380:	f7ff ff9f 	bl	800a2c2 <UART_CheckIdleState>
}
 800a384:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800a386:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800a38a:	f7fa fc9d 	bl	8004cc8 <HAL_UART_MspInit>
 800a38e:	e7d8      	b.n	800a342 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800a390:	4620      	mov	r0, r4
 800a392:	f7ff fec3 	bl	800a11c <UART_AdvFeatureConfig>
 800a396:	e7e3      	b.n	800a360 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800a398:	2001      	movs	r0, #1
}
 800a39a:	4770      	bx	lr

0800a39c <UARTEx_SetNbDataToProcess>:
>>>>>>> render
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
<<<<<<< HEAD
 800a4c4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a4c6:	b92b      	cbnz	r3, 800a4d4 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a4ce:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800a4d2:	4770      	bx	lr
{
 800a4d4:	b430      	push	{r4, r5}
=======
 800a39c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a39e:	b92b      	cbnz	r3, 800a3ac <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a3a6:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800a3aa:	4770      	bx	lr
{
 800a3ac:	b430      	push	{r4, r5}
>>>>>>> render
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
<<<<<<< HEAD
 800a4d6:	6803      	ldr	r3, [r0, #0]
 800a4d8:	689a      	ldr	r2, [r3, #8]
 800a4da:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a4de:	6899      	ldr	r1, [r3, #8]
 800a4e0:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4e2:	4d09      	ldr	r5, [pc, #36]	; (800a508 <UARTEx_SetNbDataToProcess+0x44>)
 800a4e4:	5c6b      	ldrb	r3, [r5, r1]
 800a4e6:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a4e8:	4c08      	ldr	r4, [pc, #32]	; (800a50c <UARTEx_SetNbDataToProcess+0x48>)
 800a4ea:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4ec:	fb93 f3f1 	sdiv	r3, r3, r1
 800a4f0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4f4:	5cab      	ldrb	r3, [r5, r2]
 800a4f6:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a4f8:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4fe:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800a502:	bc30      	pop	{r4, r5}
 800a504:	4770      	bx	lr
 800a506:	bf00      	nop
 800a508:	08013048 	.word	0x08013048
 800a50c:	08013040 	.word	0x08013040

0800a510 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800a510:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a514:	2b01      	cmp	r3, #1
 800a516:	d018      	beq.n	800a54a <HAL_UARTEx_DisableFifoMode+0x3a>
 800a518:	2301      	movs	r3, #1
 800a51a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800a51e:	2324      	movs	r3, #36	; 0x24
 800a520:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a524:	6803      	ldr	r3, [r0, #0]
 800a526:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800a528:	6819      	ldr	r1, [r3, #0]
 800a52a:	f021 0101 	bic.w	r1, r1, #1
 800a52e:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a530:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a534:	2300      	movs	r3, #0
 800a536:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a538:	6801      	ldr	r1, [r0, #0]
 800a53a:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a53c:	2220      	movs	r2, #32
 800a53e:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a542:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 800a546:	4618      	mov	r0, r3
 800a548:	4770      	bx	lr
  __HAL_LOCK(huart);
 800a54a:	2002      	movs	r0, #2
}
 800a54c:	4770      	bx	lr

0800a54e <HAL_UARTEx_SetTxFifoThreshold>:
{
 800a54e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800a550:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a554:	2b01      	cmp	r3, #1
 800a556:	d01d      	beq.n	800a594 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800a558:	4604      	mov	r4, r0
 800a55a:	2301      	movs	r3, #1
 800a55c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800a560:	2324      	movs	r3, #36	; 0x24
 800a562:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a566:	6803      	ldr	r3, [r0, #0]
 800a568:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	f022 0201 	bic.w	r2, r2, #1
 800a570:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a572:	6802      	ldr	r2, [r0, #0]
 800a574:	6893      	ldr	r3, [r2, #8]
 800a576:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800a57a:	4319      	orrs	r1, r3
 800a57c:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800a57e:	f7ff ffa1 	bl	800a4c4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a582:	6823      	ldr	r3, [r4, #0]
 800a584:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a586:	2320      	movs	r3, #32
 800a588:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a58c:	2000      	movs	r0, #0
 800a58e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800a592:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800a594:	2002      	movs	r0, #2
 800a596:	e7fc      	b.n	800a592 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800a598 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800a598:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800a59a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d01d      	beq.n	800a5de <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800a5aa:	2324      	movs	r3, #36	; 0x24
 800a5ac:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5b0:	6803      	ldr	r3, [r0, #0]
 800a5b2:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	f022 0201 	bic.w	r2, r2, #1
 800a5ba:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a5bc:	6802      	ldr	r2, [r0, #0]
 800a5be:	6893      	ldr	r3, [r2, #8]
 800a5c0:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800a5c4:	4319      	orrs	r1, r3
 800a5c6:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800a5c8:	f7ff ff7c 	bl	800a4c4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a5d0:	2320      	movs	r3, #32
 800a5d2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a5d6:	2000      	movs	r0, #0
 800a5d8:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800a5dc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800a5de:	2002      	movs	r0, #2
 800a5e0:	e7fc      	b.n	800a5dc <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

0800a5e4 <FMC_NORSRAM_Init>:
=======
 800a3ae:	6803      	ldr	r3, [r0, #0]
 800a3b0:	689a      	ldr	r2, [r3, #8]
 800a3b2:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a3b6:	6899      	ldr	r1, [r3, #8]
 800a3b8:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3ba:	4d09      	ldr	r5, [pc, #36]	; (800a3e0 <UARTEx_SetNbDataToProcess+0x44>)
 800a3bc:	5c6b      	ldrb	r3, [r5, r1]
 800a3be:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a3c0:	4c08      	ldr	r4, [pc, #32]	; (800a3e4 <UARTEx_SetNbDataToProcess+0x48>)
 800a3c2:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3c4:	fb93 f3f1 	sdiv	r3, r3, r1
 800a3c8:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3cc:	5cab      	ldrb	r3, [r5, r2]
 800a3ce:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a3d0:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3d6:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800a3da:	bc30      	pop	{r4, r5}
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	08012eb0 	.word	0x08012eb0
 800a3e4:	08012ea8 	.word	0x08012ea8

0800a3e8 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800a3e8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d018      	beq.n	800a422 <HAL_UARTEx_DisableFifoMode+0x3a>
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800a3f6:	2324      	movs	r3, #36	; 0x24
 800a3f8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3fc:	6803      	ldr	r3, [r0, #0]
 800a3fe:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800a400:	6819      	ldr	r1, [r3, #0]
 800a402:	f021 0101 	bic.w	r1, r1, #1
 800a406:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a408:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a40c:	2300      	movs	r3, #0
 800a40e:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a410:	6801      	ldr	r1, [r0, #0]
 800a412:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a414:	2220      	movs	r2, #32
 800a416:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a41a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 800a41e:	4618      	mov	r0, r3
 800a420:	4770      	bx	lr
  __HAL_LOCK(huart);
 800a422:	2002      	movs	r0, #2
}
 800a424:	4770      	bx	lr

0800a426 <HAL_UARTEx_SetTxFifoThreshold>:
{
 800a426:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800a428:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d01d      	beq.n	800a46c <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800a430:	4604      	mov	r4, r0
 800a432:	2301      	movs	r3, #1
 800a434:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800a438:	2324      	movs	r3, #36	; 0x24
 800a43a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a43e:	6803      	ldr	r3, [r0, #0]
 800a440:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	f022 0201 	bic.w	r2, r2, #1
 800a448:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a44a:	6802      	ldr	r2, [r0, #0]
 800a44c:	6893      	ldr	r3, [r2, #8]
 800a44e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800a452:	4319      	orrs	r1, r3
 800a454:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800a456:	f7ff ffa1 	bl	800a39c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a45a:	6823      	ldr	r3, [r4, #0]
 800a45c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a45e:	2320      	movs	r3, #32
 800a460:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a464:	2000      	movs	r0, #0
 800a466:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800a46a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800a46c:	2002      	movs	r0, #2
 800a46e:	e7fc      	b.n	800a46a <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800a470 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800a470:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800a472:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a476:	2b01      	cmp	r3, #1
 800a478:	d01d      	beq.n	800a4b6 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800a47a:	4604      	mov	r4, r0
 800a47c:	2301      	movs	r3, #1
 800a47e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800a482:	2324      	movs	r3, #36	; 0x24
 800a484:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a488:	6803      	ldr	r3, [r0, #0]
 800a48a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	f022 0201 	bic.w	r2, r2, #1
 800a492:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a494:	6802      	ldr	r2, [r0, #0]
 800a496:	6893      	ldr	r3, [r2, #8]
 800a498:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800a49c:	4319      	orrs	r1, r3
 800a49e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800a4a0:	f7ff ff7c 	bl	800a39c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4a4:	6823      	ldr	r3, [r4, #0]
 800a4a6:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a4a8:	2320      	movs	r3, #32
 800a4aa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a4ae:	2000      	movs	r0, #0
 800a4b0:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800a4b4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800a4b6:	2002      	movs	r0, #2
 800a4b8:	e7fc      	b.n	800a4b4 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

0800a4bc <FMC_NORSRAM_Init>:
>>>>>>> render
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
<<<<<<< HEAD
 800a5e4:	b430      	push	{r4, r5}
=======
 800a4bc:	b430      	push	{r4, r5}
>>>>>>> render
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
<<<<<<< HEAD
 800a5e6:	680a      	ldr	r2, [r1, #0]
 800a5e8:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800a5ec:	f023 0301 	bic.w	r3, r3, #1
 800a5f0:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800a5f4:	688b      	ldr	r3, [r1, #8]
 800a5f6:	2b08      	cmp	r3, #8
 800a5f8:	d036      	beq.n	800a668 <FMC_NORSRAM_Init+0x84>
=======
 800a4be:	680a      	ldr	r2, [r1, #0]
 800a4c0:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800a4c4:	f023 0301 	bic.w	r3, r3, #1
 800a4c8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800a4cc:	688b      	ldr	r3, [r1, #8]
 800a4ce:	2b08      	cmp	r3, #8
 800a4d0:	d036      	beq.n	800a540 <FMC_NORSRAM_Init+0x84>
>>>>>>> render
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
<<<<<<< HEAD
 800a5fa:	2400      	movs	r4, #0
=======
 800a4d2:	2400      	movs	r4, #0
>>>>>>> render
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
<<<<<<< HEAD
 800a5fc:	684a      	ldr	r2, [r1, #4]
  btcr_reg = (flashaccess                   | \
 800a5fe:	4322      	orrs	r2, r4
              Init->DataAddressMux          | \
 800a600:	4313      	orrs	r3, r2
              Init->MemoryType              | \
              Init->MemoryDataWidth         | \
 800a602:	68ca      	ldr	r2, [r1, #12]
              Init->MemoryType              | \
 800a604:	4313      	orrs	r3, r2
              Init->BurstAccessMode         | \
 800a606:	690a      	ldr	r2, [r1, #16]
              Init->MemoryDataWidth         | \
 800a608:	4313      	orrs	r3, r2
              Init->WaitSignalPolarity      | \
 800a60a:	694a      	ldr	r2, [r1, #20]
              Init->BurstAccessMode         | \
 800a60c:	4313      	orrs	r3, r2
              Init->WaitSignalActive        | \
 800a60e:	698a      	ldr	r2, [r1, #24]
              Init->WaitSignalPolarity      | \
 800a610:	4313      	orrs	r3, r2
              Init->WriteOperation          | \
 800a612:	69ca      	ldr	r2, [r1, #28]
              Init->WaitSignalActive        | \
 800a614:	4313      	orrs	r3, r2
              Init->WaitSignal              | \
 800a616:	6a0a      	ldr	r2, [r1, #32]
              Init->WriteOperation          | \
 800a618:	4313      	orrs	r3, r2
              Init->ExtendedMode            | \
 800a61a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
              Init->WaitSignal              | \
 800a61c:	4313      	orrs	r3, r2
              Init->AsynchronousWait        | \
 800a61e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
              Init->ExtendedMode            | \
 800a620:	4313      	orrs	r3, r2
              Init->WriteBurst);
 800a622:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800a624:	4313      	orrs	r3, r2

  btcr_reg |= Init->ContinuousClock;
 800a626:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800a628:	4313      	orrs	r3, r2
  btcr_reg |= Init->WriteFifo;
 800a62a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800a62c:	431a      	orrs	r2, r3
  btcr_reg |= Init->NBLSetupTime;
 800a62e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800a630:	431a      	orrs	r2, r3
  btcr_reg |= Init->PageSize;
 800a632:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800a634:	431a      	orrs	r2, r3
=======
 800a4d4:	684a      	ldr	r2, [r1, #4]
  btcr_reg = (flashaccess                   | \
 800a4d6:	4322      	orrs	r2, r4
              Init->DataAddressMux          | \
 800a4d8:	4313      	orrs	r3, r2
              Init->MemoryType              | \
              Init->MemoryDataWidth         | \
 800a4da:	68ca      	ldr	r2, [r1, #12]
              Init->MemoryType              | \
 800a4dc:	4313      	orrs	r3, r2
              Init->BurstAccessMode         | \
 800a4de:	690a      	ldr	r2, [r1, #16]
              Init->MemoryDataWidth         | \
 800a4e0:	4313      	orrs	r3, r2
              Init->WaitSignalPolarity      | \
 800a4e2:	694a      	ldr	r2, [r1, #20]
              Init->BurstAccessMode         | \
 800a4e4:	4313      	orrs	r3, r2
              Init->WaitSignalActive        | \
 800a4e6:	698a      	ldr	r2, [r1, #24]
              Init->WaitSignalPolarity      | \
 800a4e8:	4313      	orrs	r3, r2
              Init->WriteOperation          | \
 800a4ea:	69ca      	ldr	r2, [r1, #28]
              Init->WaitSignalActive        | \
 800a4ec:	4313      	orrs	r3, r2
              Init->WaitSignal              | \
 800a4ee:	6a0a      	ldr	r2, [r1, #32]
              Init->WriteOperation          | \
 800a4f0:	4313      	orrs	r3, r2
              Init->ExtendedMode            | \
 800a4f2:	6a4a      	ldr	r2, [r1, #36]	; 0x24
              Init->WaitSignal              | \
 800a4f4:	4313      	orrs	r3, r2
              Init->AsynchronousWait        | \
 800a4f6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
              Init->ExtendedMode            | \
 800a4f8:	4313      	orrs	r3, r2
              Init->WriteBurst);
 800a4fa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800a4fc:	4313      	orrs	r3, r2

  btcr_reg |= Init->ContinuousClock;
 800a4fe:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800a500:	4313      	orrs	r3, r2
  btcr_reg |= Init->WriteFifo;
 800a502:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800a504:	431a      	orrs	r2, r3
  btcr_reg |= Init->NBLSetupTime;
 800a506:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800a508:	431a      	orrs	r2, r3
  btcr_reg |= Init->PageSize;
 800a50a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800a50c:	431a      	orrs	r2, r3
>>>>>>> render
  mask |= FMC_BCR1_CCLKEN;
  mask |= FMC_BCR1_WFDIS;
  mask |= FMC_BCRx_NBLSET;
  mask |= FMC_BCRx_CPSIZE;

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
<<<<<<< HEAD
 800a636:	680c      	ldr	r4, [r1, #0]
 800a638:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800a63c:	4b20      	ldr	r3, [pc, #128]	; (800a6c0 <FMC_NORSRAM_Init+0xdc>)
 800a63e:	402b      	ands	r3, r5
 800a640:	4313      	orrs	r3, r2
 800a642:	f840 3024 	str.w	r3, [r0, r4, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800a646:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800a648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a64c:	d00e      	beq.n	800a66c <FMC_NORSRAM_Init+0x88>
=======
 800a50e:	680c      	ldr	r4, [r1, #0]
 800a510:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800a514:	4b20      	ldr	r3, [pc, #128]	; (800a598 <FMC_NORSRAM_Init+0xdc>)
 800a516:	402b      	ands	r3, r5
 800a518:	4313      	orrs	r3, r2
 800a51a:	f840 3024 	str.w	r3, [r0, r4, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800a51e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800a520:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a524:	d00e      	beq.n	800a544 <FMC_NORSRAM_Init+0x88>
>>>>>>> render
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
<<<<<<< HEAD
 800a64e:	680b      	ldr	r3, [r1, #0]
 800a650:	b11b      	cbz	r3, 800a65a <FMC_NORSRAM_Init+0x76>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800a652:	6803      	ldr	r3, [r0, #0]
 800a654:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800a656:	4313      	orrs	r3, r2
 800a658:	6003      	str	r3, [r0, #0]
=======
 800a526:	680b      	ldr	r3, [r1, #0]
 800a528:	b11b      	cbz	r3, 800a532 <FMC_NORSRAM_Init+0x76>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800a52a:	6803      	ldr	r3, [r0, #0]
 800a52c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800a52e:	4313      	orrs	r3, r2
 800a530:	6003      	str	r3, [r0, #0]
>>>>>>> render
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
<<<<<<< HEAD
 800a65a:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d00d      	beq.n	800a67e <FMC_NORSRAM_Init+0x9a>
=======
 800a532:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 800a536:	2b01      	cmp	r3, #1
 800a538:	d00d      	beq.n	800a556 <FMC_NORSRAM_Init+0x9a>
>>>>>>> render
        break;
    }
  }

  return HAL_OK;
}
<<<<<<< HEAD
 800a662:	2000      	movs	r0, #0
 800a664:	bc30      	pop	{r4, r5}
 800a666:	4770      	bx	lr
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a668:	2440      	movs	r4, #64	; 0x40
 800a66a:	e7c7      	b.n	800a5fc <FMC_NORSRAM_Init+0x18>
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800a66c:	680a      	ldr	r2, [r1, #0]
 800a66e:	2a00      	cmp	r2, #0
 800a670:	d0ed      	beq.n	800a64e <FMC_NORSRAM_Init+0x6a>
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800a672:	6802      	ldr	r2, [r0, #0]
 800a674:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800a678:	4313      	orrs	r3, r2
 800a67a:	6003      	str	r3, [r0, #0]
 800a67c:	e7e7      	b.n	800a64e <FMC_NORSRAM_Init+0x6a>
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800a67e:	6a03      	ldr	r3, [r0, #32]
 800a680:	0c1b      	lsrs	r3, r3, #16
 800a682:	041b      	lsls	r3, r3, #16
 800a684:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 800a686:	4313      	orrs	r3, r2
 800a688:	6203      	str	r3, [r0, #32]
    switch (Init->NSBank)
 800a68a:	680b      	ldr	r3, [r1, #0]
 800a68c:	2b02      	cmp	r3, #2
 800a68e:	d00c      	beq.n	800a6aa <FMC_NORSRAM_Init+0xc6>
 800a690:	2b04      	cmp	r3, #4
 800a692:	d00f      	beq.n	800a6b4 <FMC_NORSRAM_Init+0xd0>
 800a694:	b123      	cbz	r3, 800a6a0 <FMC_NORSRAM_Init+0xbc>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800a696:	6a03      	ldr	r3, [r0, #32]
 800a698:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a69c:	6203      	str	r3, [r0, #32]
        break;
 800a69e:	e7e0      	b.n	800a662 <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800a6a0:	6a03      	ldr	r3, [r0, #32]
 800a6a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6a6:	6203      	str	r3, [r0, #32]
        break;
 800a6a8:	e7db      	b.n	800a662 <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800a6aa:	6a03      	ldr	r3, [r0, #32]
 800a6ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6b0:	6203      	str	r3, [r0, #32]
        break;
 800a6b2:	e7d6      	b.n	800a662 <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800a6b4:	6a03      	ldr	r3, [r0, #32]
 800a6b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a6ba:	6203      	str	r3, [r0, #32]
        break;
 800a6bc:	e7d1      	b.n	800a662 <FMC_NORSRAM_Init+0x7e>
 800a6be:	bf00      	nop
 800a6c0:	ff000480 	.word	0xff000480

0800a6c4 <FMC_NORSRAM_Timing_Init>:
=======
 800a53a:	2000      	movs	r0, #0
 800a53c:	bc30      	pop	{r4, r5}
 800a53e:	4770      	bx	lr
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a540:	2440      	movs	r4, #64	; 0x40
 800a542:	e7c7      	b.n	800a4d4 <FMC_NORSRAM_Init+0x18>
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800a544:	680a      	ldr	r2, [r1, #0]
 800a546:	2a00      	cmp	r2, #0
 800a548:	d0ed      	beq.n	800a526 <FMC_NORSRAM_Init+0x6a>
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800a54a:	6802      	ldr	r2, [r0, #0]
 800a54c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800a550:	4313      	orrs	r3, r2
 800a552:	6003      	str	r3, [r0, #0]
 800a554:	e7e7      	b.n	800a526 <FMC_NORSRAM_Init+0x6a>
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800a556:	6a03      	ldr	r3, [r0, #32]
 800a558:	0c1b      	lsrs	r3, r3, #16
 800a55a:	041b      	lsls	r3, r3, #16
 800a55c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 800a55e:	4313      	orrs	r3, r2
 800a560:	6203      	str	r3, [r0, #32]
    switch (Init->NSBank)
 800a562:	680b      	ldr	r3, [r1, #0]
 800a564:	2b02      	cmp	r3, #2
 800a566:	d00c      	beq.n	800a582 <FMC_NORSRAM_Init+0xc6>
 800a568:	2b04      	cmp	r3, #4
 800a56a:	d00f      	beq.n	800a58c <FMC_NORSRAM_Init+0xd0>
 800a56c:	b123      	cbz	r3, 800a578 <FMC_NORSRAM_Init+0xbc>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800a56e:	6a03      	ldr	r3, [r0, #32]
 800a570:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a574:	6203      	str	r3, [r0, #32]
        break;
 800a576:	e7e0      	b.n	800a53a <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800a578:	6a03      	ldr	r3, [r0, #32]
 800a57a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a57e:	6203      	str	r3, [r0, #32]
        break;
 800a580:	e7db      	b.n	800a53a <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800a582:	6a03      	ldr	r3, [r0, #32]
 800a584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a588:	6203      	str	r3, [r0, #32]
        break;
 800a58a:	e7d6      	b.n	800a53a <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800a58c:	6a03      	ldr	r3, [r0, #32]
 800a58e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a592:	6203      	str	r3, [r0, #32]
        break;
 800a594:	e7d1      	b.n	800a53a <FMC_NORSRAM_Init+0x7e>
 800a596:	bf00      	nop
 800a598:	ff000480 	.word	0xff000480

0800a59c <FMC_NORSRAM_Timing_Init>:
>>>>>>> render
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
<<<<<<< HEAD
 800a6c4:	b410      	push	{r4}
=======
 800a59c:	b410      	push	{r4}
>>>>>>> render
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
<<<<<<< HEAD
 800a6c6:	3201      	adds	r2, #1
 800a6c8:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800a6cc:	680b      	ldr	r3, [r1, #0]
 800a6ce:	684c      	ldr	r4, [r1, #4]
 800a6d0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800a6d4:	688c      	ldr	r4, [r1, #8]
 800a6d6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800a6da:	68cc      	ldr	r4, [r1, #12]
 800a6dc:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
 800a6e0:	690c      	ldr	r4, [r1, #16]
 800a6e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a6e6:	694c      	ldr	r4, [r1, #20]
 800a6e8:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800a6ec:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 800a6f0:	698c      	ldr	r4, [r1, #24]
 800a6f2:	f1a4 0c02 	sub.w	ip, r4, #2
 800a6f6:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 800a6fa:	69cc      	ldr	r4, [r1, #28]
 800a6fc:	4323      	orrs	r3, r4
 800a6fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
=======
 800a59e:	3201      	adds	r2, #1
 800a5a0:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800a5a4:	680b      	ldr	r3, [r1, #0]
 800a5a6:	684c      	ldr	r4, [r1, #4]
 800a5a8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800a5ac:	688c      	ldr	r4, [r1, #8]
 800a5ae:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800a5b2:	68cc      	ldr	r4, [r1, #12]
 800a5b4:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
 800a5b8:	690c      	ldr	r4, [r1, #16]
 800a5ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a5be:	694c      	ldr	r4, [r1, #20]
 800a5c0:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800a5c4:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 800a5c8:	698c      	ldr	r4, [r1, #24]
 800a5ca:	f1a4 0c02 	sub.w	ip, r4, #2
 800a5ce:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 800a5d2:	69cc      	ldr	r4, [r1, #28]
 800a5d4:	4323      	orrs	r3, r4
 800a5d6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
>>>>>>> render
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
<<<<<<< HEAD
 800a702:	6803      	ldr	r3, [r0, #0]
 800a704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800a708:	d00b      	beq.n	800a722 <FMC_NORSRAM_Timing_Init+0x5e>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800a70a:	6843      	ldr	r3, [r0, #4]
 800a70c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800a710:	694a      	ldr	r2, [r1, #20]
 800a712:	3a01      	subs	r2, #1
 800a714:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800a718:	6843      	ldr	r3, [r0, #4]
 800a71a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a71e:	4313      	orrs	r3, r2
 800a720:	6043      	str	r3, [r0, #4]
=======
 800a5da:	6803      	ldr	r3, [r0, #0]
 800a5dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800a5e0:	d00b      	beq.n	800a5fa <FMC_NORSRAM_Timing_Init+0x5e>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800a5e2:	6843      	ldr	r3, [r0, #4]
 800a5e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800a5e8:	694a      	ldr	r2, [r1, #20]
 800a5ea:	3a01      	subs	r2, #1
 800a5ec:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800a5f0:	6843      	ldr	r3, [r0, #4]
 800a5f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	6043      	str	r3, [r0, #4]
>>>>>>> render
  }

  return HAL_OK;
}
<<<<<<< HEAD
 800a722:	2000      	movs	r0, #0
 800a724:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a728:	4770      	bx	lr

0800a72a <FMC_NORSRAM_Extended_Timing_Init>:
=======
 800a5fa:	2000      	movs	r0, #0
 800a5fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a600:	4770      	bx	lr

0800a602 <FMC_NORSRAM_Extended_Timing_Init>:
>>>>>>> render
{
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
<<<<<<< HEAD
 800a72a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a72e:	d005      	beq.n	800a73c <FMC_NORSRAM_Extended_Timing_Init+0x12>
=======
 800a602:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a606:	d005      	beq.n	800a614 <FMC_NORSRAM_Extended_Timing_Init+0x12>
>>>>>>> render
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
<<<<<<< HEAD
 800a730:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800a734:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
=======
 800a608:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800a60c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
>>>>>>> render
  }

  return HAL_OK;
}
<<<<<<< HEAD
 800a738:	2000      	movs	r0, #0
 800a73a:	4770      	bx	lr
{
 800a73c:	b410      	push	{r4}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800a73e:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800a742:	f003 6c7f 	and.w	ip, r3, #267386880	; 0xff00000
 800a746:	680b      	ldr	r3, [r1, #0]
 800a748:	684c      	ldr	r4, [r1, #4]
 800a74a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800a74e:	688c      	ldr	r4, [r1, #8]
 800a750:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800a754:	68cc      	ldr	r4, [r1, #12]
 800a756:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
 800a75a:	69cc      	ldr	r4, [r1, #28]
 800a75c:	4323      	orrs	r3, r4
 800a75e:	6909      	ldr	r1, [r1, #16]
 800a760:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a764:	ea4c 0303 	orr.w	r3, ip, r3
 800a768:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 800a76c:	2000      	movs	r0, #0
 800a76e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <LL_GPIO_Init>:
=======
 800a610:	2000      	movs	r0, #0
 800a612:	4770      	bx	lr
{
 800a614:	b410      	push	{r4}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800a616:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800a61a:	f003 6c7f 	and.w	ip, r3, #267386880	; 0xff00000
 800a61e:	680b      	ldr	r3, [r1, #0]
 800a620:	684c      	ldr	r4, [r1, #4]
 800a622:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800a626:	688c      	ldr	r4, [r1, #8]
 800a628:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800a62c:	68cc      	ldr	r4, [r1, #12]
 800a62e:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
 800a632:	69cc      	ldr	r4, [r1, #28]
 800a634:	4323      	orrs	r3, r4
 800a636:	6909      	ldr	r1, [r1, #16]
 800a638:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a63c:	ea4c 0303 	orr.w	r3, ip, r3
 800a640:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 800a644:	2000      	movs	r0, #0
 800a646:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <LL_GPIO_Init>:
>>>>>>> render
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
<<<<<<< HEAD
 800a774:	b4f0      	push	{r4, r5, r6, r7}
=======
 800a64c:	b4f0      	push	{r4, r5, r6, r7}
>>>>>>> render
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
<<<<<<< HEAD
 800a776:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a778:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800a77c:	b112      	cbz	r2, 800a784 <LL_GPIO_Init+0x10>
  return __builtin_clz(value);
 800a77e:	fab2 f282 	clz	r2, r2
 800a782:	e04e      	b.n	800a822 <LL_GPIO_Init+0xae>
    return 32U;
 800a784:	2220      	movs	r2, #32

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a786:	e04c      	b.n	800a822 <LL_GPIO_Init+0xae>
=======
 800a64e:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a650:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800a654:	b112      	cbz	r2, 800a65c <LL_GPIO_Init+0x10>
  return __builtin_clz(value);
 800a656:	fab2 f282 	clz	r2, r2
 800a65a:	e04e      	b.n	800a6fa <LL_GPIO_Init+0xae>
    return 32U;
 800a65c:	2220      	movs	r2, #32

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a65e:	e04c      	b.n	800a6fa <LL_GPIO_Init+0xae>
>>>>>>> render
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
<<<<<<< HEAD
 800a788:	688e      	ldr	r6, [r1, #8]
=======
 800a660:	688e      	ldr	r6, [r1, #8]
>>>>>>> render
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
<<<<<<< HEAD
 800a78a:	6885      	ldr	r5, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a78c:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800a790:	b1e4      	cbz	r4, 800a7cc <LL_GPIO_Init+0x58>
  return __builtin_clz(value);
 800a792:	fab4 f484 	clz	r4, r4
 800a796:	0064      	lsls	r4, r4, #1
 800a798:	f04f 0c03 	mov.w	ip, #3
 800a79c:	fa0c f404 	lsl.w	r4, ip, r4
 800a7a0:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7a4:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800a7a8:	b194      	cbz	r4, 800a7d0 <LL_GPIO_Init+0x5c>
  return __builtin_clz(value);
 800a7aa:	fab4 f484 	clz	r4, r4
 800a7ae:	0064      	lsls	r4, r4, #1
 800a7b0:	fa06 f404 	lsl.w	r4, r6, r4
 800a7b4:	432c      	orrs	r4, r5
 800a7b6:	6084      	str	r4, [r0, #8]
=======
 800a662:	6885      	ldr	r5, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a664:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800a668:	b1e4      	cbz	r4, 800a6a4 <LL_GPIO_Init+0x58>
  return __builtin_clz(value);
 800a66a:	fab4 f484 	clz	r4, r4
 800a66e:	0064      	lsls	r4, r4, #1
 800a670:	f04f 0c03 	mov.w	ip, #3
 800a674:	fa0c f404 	lsl.w	r4, ip, r4
 800a678:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a67c:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800a680:	b194      	cbz	r4, 800a6a8 <LL_GPIO_Init+0x5c>
  return __builtin_clz(value);
 800a682:	fab4 f484 	clz	r4, r4
 800a686:	0064      	lsls	r4, r4, #1
 800a688:	fa06 f404 	lsl.w	r4, r6, r4
 800a68c:	432c      	orrs	r4, r5
 800a68e:	6084      	str	r4, [r0, #8]
>>>>>>> render

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
<<<<<<< HEAD
 800a7b8:	680d      	ldr	r5, [r1, #0]
 800a7ba:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a7bc:	6844      	ldr	r4, [r0, #4]
 800a7be:	ea24 0405 	bic.w	r4, r4, r5
 800a7c2:	fb06 f505 	mul.w	r5, r6, r5
 800a7c6:	432c      	orrs	r4, r5
 800a7c8:	6044      	str	r4, [r0, #4]
}
 800a7ca:	e039      	b.n	800a840 <LL_GPIO_Init+0xcc>
    return 32U;
 800a7cc:	2420      	movs	r4, #32
 800a7ce:	e7e2      	b.n	800a796 <LL_GPIO_Init+0x22>
 800a7d0:	2420      	movs	r4, #32
 800a7d2:	e7ec      	b.n	800a7ae <LL_GPIO_Init+0x3a>
 800a7d4:	2420      	movs	r4, #32
 800a7d6:	e03b      	b.n	800a850 <LL_GPIO_Init+0xdc>
 800a7d8:	2420      	movs	r4, #32
 800a7da:	e046      	b.n	800a86a <LL_GPIO_Init+0xf6>
 800a7dc:	2420      	movs	r4, #32
 800a7de:	e056      	b.n	800a88e <LL_GPIO_Init+0x11a>
 800a7e0:	2420      	movs	r4, #32
=======
 800a690:	680d      	ldr	r5, [r1, #0]
 800a692:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a694:	6844      	ldr	r4, [r0, #4]
 800a696:	ea24 0405 	bic.w	r4, r4, r5
 800a69a:	fb06 f505 	mul.w	r5, r6, r5
 800a69e:	432c      	orrs	r4, r5
 800a6a0:	6044      	str	r4, [r0, #4]
}
 800a6a2:	e039      	b.n	800a718 <LL_GPIO_Init+0xcc>
    return 32U;
 800a6a4:	2420      	movs	r4, #32
 800a6a6:	e7e2      	b.n	800a66e <LL_GPIO_Init+0x22>
 800a6a8:	2420      	movs	r4, #32
 800a6aa:	e7ec      	b.n	800a686 <LL_GPIO_Init+0x3a>
 800a6ac:	2420      	movs	r4, #32
 800a6ae:	e03b      	b.n	800a728 <LL_GPIO_Init+0xdc>
 800a6b0:	2420      	movs	r4, #32
 800a6b2:	e046      	b.n	800a742 <LL_GPIO_Init+0xf6>
 800a6b4:	2420      	movs	r4, #32
 800a6b6:	e056      	b.n	800a766 <LL_GPIO_Init+0x11a>
 800a6b8:	2420      	movs	r4, #32
>>>>>>> render
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
<<<<<<< HEAD
 800a7e2:	00a4      	lsls	r4, r4, #2
 800a7e4:	fa06 f404 	lsl.w	r4, r6, r4
 800a7e8:	432c      	orrs	r4, r5
 800a7ea:	6204      	str	r4, [r0, #32]
=======
 800a6ba:	00a4      	lsls	r4, r4, #2
 800a6bc:	fa06 f404 	lsl.w	r4, r6, r4
 800a6c0:	432c      	orrs	r4, r5
 800a6c2:	6204      	str	r4, [r0, #32]
>>>>>>> render
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
<<<<<<< HEAD
 800a7ec:	684e      	ldr	r6, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800a7ee:	6805      	ldr	r5, [r0, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7f0:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800a7f4:	2c00      	cmp	r4, #0
 800a7f6:	d075      	beq.n	800a8e4 <LL_GPIO_Init+0x170>
  return __builtin_clz(value);
 800a7f8:	fab4 f484 	clz	r4, r4
 800a7fc:	0064      	lsls	r4, r4, #1
 800a7fe:	f04f 0c03 	mov.w	ip, #3
 800a802:	fa0c f404 	lsl.w	r4, ip, r4
 800a806:	ea25 0404 	bic.w	r4, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a80a:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d06a      	beq.n	800a8e8 <LL_GPIO_Init+0x174>
  return __builtin_clz(value);
 800a812:	fab3 f383 	clz	r3, r3
 800a816:	005b      	lsls	r3, r3, #1
 800a818:	fa06 f303 	lsl.w	r3, r6, r3
 800a81c:	4323      	orrs	r3, r4
 800a81e:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 800a820:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a822:	680b      	ldr	r3, [r1, #0]
 800a824:	fa33 f402 	lsrs.w	r4, r3, r2
 800a828:	d060      	beq.n	800a8ec <LL_GPIO_Init+0x178>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800a82a:	f04f 0c01 	mov.w	ip, #1
 800a82e:	fa0c fc02 	lsl.w	ip, ip, r2
    if (currentpin != 0x00u)
 800a832:	ea1c 0303 	ands.w	r3, ip, r3
 800a836:	d0f3      	beq.n	800a820 <LL_GPIO_Init+0xac>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a838:	684c      	ldr	r4, [r1, #4]
 800a83a:	3c01      	subs	r4, #1
 800a83c:	2c01      	cmp	r4, #1
 800a83e:	d9a3      	bls.n	800a788 <LL_GPIO_Init+0x14>
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a840:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800a842:	68c5      	ldr	r5, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a844:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800a848:	2c00      	cmp	r4, #0
 800a84a:	d0c3      	beq.n	800a7d4 <LL_GPIO_Init+0x60>
  return __builtin_clz(value);
 800a84c:	fab4 f484 	clz	r4, r4
 800a850:	0064      	lsls	r4, r4, #1
 800a852:	f04f 0c03 	mov.w	ip, #3
 800a856:	fa0c f404 	lsl.w	r4, ip, r4
 800a85a:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a85e:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800a862:	2c00      	cmp	r4, #0
 800a864:	d0b8      	beq.n	800a7d8 <LL_GPIO_Init+0x64>
  return __builtin_clz(value);
 800a866:	fab4 f484 	clz	r4, r4
 800a86a:	0064      	lsls	r4, r4, #1
 800a86c:	fa06 f404 	lsl.w	r4, r6, r4
 800a870:	432c      	orrs	r4, r5
 800a872:	60c4      	str	r4, [r0, #12]
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a874:	684c      	ldr	r4, [r1, #4]
 800a876:	2c02      	cmp	r4, #2
 800a878:	d1b8      	bne.n	800a7ec <LL_GPIO_Init+0x78>
        if (currentpin < LL_GPIO_PIN_8)
 800a87a:	2bff      	cmp	r3, #255	; 0xff
 800a87c:	d814      	bhi.n	800a8a8 <LL_GPIO_Init+0x134>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a87e:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800a880:	6a05      	ldr	r5, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a882:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800a886:	2c00      	cmp	r4, #0
 800a888:	d0a8      	beq.n	800a7dc <LL_GPIO_Init+0x68>
  return __builtin_clz(value);
 800a88a:	fab4 f484 	clz	r4, r4
 800a88e:	00a4      	lsls	r4, r4, #2
 800a890:	270f      	movs	r7, #15
 800a892:	fa07 f404 	lsl.w	r4, r7, r4
 800a896:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a89a:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800a89e:	2c00      	cmp	r4, #0
 800a8a0:	d09e      	beq.n	800a7e0 <LL_GPIO_Init+0x6c>
  return __builtin_clz(value);
 800a8a2:	fab4 f484 	clz	r4, r4
 800a8a6:	e79c      	b.n	800a7e2 <LL_GPIO_Init+0x6e>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a8a8:	694f      	ldr	r7, [r1, #20]
=======
 800a6c4:	684e      	ldr	r6, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800a6c6:	6805      	ldr	r5, [r0, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6c8:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800a6cc:	2c00      	cmp	r4, #0
 800a6ce:	d075      	beq.n	800a7bc <LL_GPIO_Init+0x170>
  return __builtin_clz(value);
 800a6d0:	fab4 f484 	clz	r4, r4
 800a6d4:	0064      	lsls	r4, r4, #1
 800a6d6:	f04f 0c03 	mov.w	ip, #3
 800a6da:	fa0c f404 	lsl.w	r4, ip, r4
 800a6de:	ea25 0404 	bic.w	r4, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6e2:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d06a      	beq.n	800a7c0 <LL_GPIO_Init+0x174>
  return __builtin_clz(value);
 800a6ea:	fab3 f383 	clz	r3, r3
 800a6ee:	005b      	lsls	r3, r3, #1
 800a6f0:	fa06 f303 	lsl.w	r3, r6, r3
 800a6f4:	4323      	orrs	r3, r4
 800a6f6:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 800a6f8:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a6fa:	680b      	ldr	r3, [r1, #0]
 800a6fc:	fa33 f402 	lsrs.w	r4, r3, r2
 800a700:	d060      	beq.n	800a7c4 <LL_GPIO_Init+0x178>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800a702:	f04f 0c01 	mov.w	ip, #1
 800a706:	fa0c fc02 	lsl.w	ip, ip, r2
    if (currentpin != 0x00u)
 800a70a:	ea1c 0303 	ands.w	r3, ip, r3
 800a70e:	d0f3      	beq.n	800a6f8 <LL_GPIO_Init+0xac>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a710:	684c      	ldr	r4, [r1, #4]
 800a712:	3c01      	subs	r4, #1
 800a714:	2c01      	cmp	r4, #1
 800a716:	d9a3      	bls.n	800a660 <LL_GPIO_Init+0x14>
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a718:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800a71a:	68c5      	ldr	r5, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a71c:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800a720:	2c00      	cmp	r4, #0
 800a722:	d0c3      	beq.n	800a6ac <LL_GPIO_Init+0x60>
  return __builtin_clz(value);
 800a724:	fab4 f484 	clz	r4, r4
 800a728:	0064      	lsls	r4, r4, #1
 800a72a:	f04f 0c03 	mov.w	ip, #3
 800a72e:	fa0c f404 	lsl.w	r4, ip, r4
 800a732:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a736:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800a73a:	2c00      	cmp	r4, #0
 800a73c:	d0b8      	beq.n	800a6b0 <LL_GPIO_Init+0x64>
  return __builtin_clz(value);
 800a73e:	fab4 f484 	clz	r4, r4
 800a742:	0064      	lsls	r4, r4, #1
 800a744:	fa06 f404 	lsl.w	r4, r6, r4
 800a748:	432c      	orrs	r4, r5
 800a74a:	60c4      	str	r4, [r0, #12]
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a74c:	684c      	ldr	r4, [r1, #4]
 800a74e:	2c02      	cmp	r4, #2
 800a750:	d1b8      	bne.n	800a6c4 <LL_GPIO_Init+0x78>
        if (currentpin < LL_GPIO_PIN_8)
 800a752:	2bff      	cmp	r3, #255	; 0xff
 800a754:	d814      	bhi.n	800a780 <LL_GPIO_Init+0x134>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a756:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800a758:	6a05      	ldr	r5, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a75a:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800a75e:	2c00      	cmp	r4, #0
 800a760:	d0a8      	beq.n	800a6b4 <LL_GPIO_Init+0x68>
  return __builtin_clz(value);
 800a762:	fab4 f484 	clz	r4, r4
 800a766:	00a4      	lsls	r4, r4, #2
 800a768:	270f      	movs	r7, #15
 800a76a:	fa07 f404 	lsl.w	r4, r7, r4
 800a76e:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a772:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800a776:	2c00      	cmp	r4, #0
 800a778:	d09e      	beq.n	800a6b8 <LL_GPIO_Init+0x6c>
  return __builtin_clz(value);
 800a77a:	fab4 f484 	clz	r4, r4
 800a77e:	e79c      	b.n	800a6ba <LL_GPIO_Init+0x6e>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a780:	694f      	ldr	r7, [r1, #20]
>>>>>>> render
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
<<<<<<< HEAD
 800a8aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a8ac:	0a1c      	lsrs	r4, r3, #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a8ae:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800a8b2:	b19d      	cbz	r5, 800a8dc <LL_GPIO_Init+0x168>
  return __builtin_clz(value);
 800a8b4:	fab5 f585 	clz	r5, r5
 800a8b8:	00ad      	lsls	r5, r5, #2
 800a8ba:	f04f 0c0f 	mov.w	ip, #15
 800a8be:	fa0c f505 	lsl.w	r5, ip, r5
 800a8c2:	ea26 0505 	bic.w	r5, r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a8c6:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 800a8ca:	b14c      	cbz	r4, 800a8e0 <LL_GPIO_Init+0x16c>
  return __builtin_clz(value);
 800a8cc:	fab4 f484 	clz	r4, r4
 800a8d0:	00a4      	lsls	r4, r4, #2
 800a8d2:	fa07 f404 	lsl.w	r4, r7, r4
 800a8d6:	432c      	orrs	r4, r5
 800a8d8:	6244      	str	r4, [r0, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800a8da:	e787      	b.n	800a7ec <LL_GPIO_Init+0x78>
    return 32U;
 800a8dc:	2520      	movs	r5, #32
 800a8de:	e7eb      	b.n	800a8b8 <LL_GPIO_Init+0x144>
 800a8e0:	2420      	movs	r4, #32
 800a8e2:	e7f5      	b.n	800a8d0 <LL_GPIO_Init+0x15c>
 800a8e4:	2420      	movs	r4, #32
 800a8e6:	e789      	b.n	800a7fc <LL_GPIO_Init+0x88>
 800a8e8:	2320      	movs	r3, #32
 800a8ea:	e794      	b.n	800a816 <LL_GPIO_Init+0xa2>
  }
  return (SUCCESS);
}
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	bcf0      	pop	{r4, r5, r6, r7}
 800a8f0:	4770      	bx	lr
	...

0800a8f4 <RCC_GetHCLKClockFreq>:
=======
 800a782:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a784:	0a1c      	lsrs	r4, r3, #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a786:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800a78a:	b19d      	cbz	r5, 800a7b4 <LL_GPIO_Init+0x168>
  return __builtin_clz(value);
 800a78c:	fab5 f585 	clz	r5, r5
 800a790:	00ad      	lsls	r5, r5, #2
 800a792:	f04f 0c0f 	mov.w	ip, #15
 800a796:	fa0c f505 	lsl.w	r5, ip, r5
 800a79a:	ea26 0505 	bic.w	r5, r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a79e:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 800a7a2:	b14c      	cbz	r4, 800a7b8 <LL_GPIO_Init+0x16c>
  return __builtin_clz(value);
 800a7a4:	fab4 f484 	clz	r4, r4
 800a7a8:	00a4      	lsls	r4, r4, #2
 800a7aa:	fa07 f404 	lsl.w	r4, r7, r4
 800a7ae:	432c      	orrs	r4, r5
 800a7b0:	6244      	str	r4, [r0, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800a7b2:	e787      	b.n	800a6c4 <LL_GPIO_Init+0x78>
    return 32U;
 800a7b4:	2520      	movs	r5, #32
 800a7b6:	e7eb      	b.n	800a790 <LL_GPIO_Init+0x144>
 800a7b8:	2420      	movs	r4, #32
 800a7ba:	e7f5      	b.n	800a7a8 <LL_GPIO_Init+0x15c>
 800a7bc:	2420      	movs	r4, #32
 800a7be:	e789      	b.n	800a6d4 <LL_GPIO_Init+0x88>
 800a7c0:	2320      	movs	r3, #32
 800a7c2:	e794      	b.n	800a6ee <LL_GPIO_Init+0xa2>
  }
  return (SUCCESS);
}
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	bcf0      	pop	{r4, r5, r6, r7}
 800a7c8:	4770      	bx	lr
	...

0800a7cc <RCC_GetHCLKClockFreq>:
>>>>>>> render
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
<<<<<<< HEAD
 800a8f4:	4b04      	ldr	r3, [pc, #16]	; (800a908 <RCC_GetHCLKClockFreq+0x14>)
 800a8f6:	689b      	ldr	r3, [r3, #8]
=======
 800a7cc:	4b04      	ldr	r3, [pc, #16]	; (800a7e0 <RCC_GetHCLKClockFreq+0x14>)
 800a7ce:	689b      	ldr	r3, [r3, #8]
>>>>>>> render
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
<<<<<<< HEAD
 800a8f8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a8fc:	4a03      	ldr	r2, [pc, #12]	; (800a90c <RCC_GetHCLKClockFreq+0x18>)
 800a8fe:	5cd3      	ldrb	r3, [r2, r3]
 800a900:	f003 031f 	and.w	r3, r3, #31
}
 800a904:	40d8      	lsrs	r0, r3
 800a906:	4770      	bx	lr
 800a908:	40021000 	.word	0x40021000
 800a90c:	08013010 	.word	0x08013010

0800a910 <RCC_GetPCLK1ClockFreq>:
=======
 800a7d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a7d4:	4a03      	ldr	r2, [pc, #12]	; (800a7e4 <RCC_GetHCLKClockFreq+0x18>)
 800a7d6:	5cd3      	ldrb	r3, [r2, r3]
 800a7d8:	f003 031f 	and.w	r3, r3, #31
}
 800a7dc:	40d8      	lsrs	r0, r3
 800a7de:	4770      	bx	lr
 800a7e0:	40021000 	.word	0x40021000
 800a7e4:	08012e78 	.word	0x08012e78

0800a7e8 <RCC_GetPCLK1ClockFreq>:
>>>>>>> render
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
<<<<<<< HEAD
 800a910:	4b04      	ldr	r3, [pc, #16]	; (800a924 <RCC_GetPCLK1ClockFreq+0x14>)
 800a912:	689b      	ldr	r3, [r3, #8]
=======
 800a7e8:	4b04      	ldr	r3, [pc, #16]	; (800a7fc <RCC_GetPCLK1ClockFreq+0x14>)
 800a7ea:	689b      	ldr	r3, [r3, #8]
>>>>>>> render
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
<<<<<<< HEAD
 800a914:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800a918:	4a03      	ldr	r2, [pc, #12]	; (800a928 <RCC_GetPCLK1ClockFreq+0x18>)
 800a91a:	5cd3      	ldrb	r3, [r2, r3]
 800a91c:	f003 031f 	and.w	r3, r3, #31
}
 800a920:	40d8      	lsrs	r0, r3
 800a922:	4770      	bx	lr
 800a924:	40021000 	.word	0x40021000
 800a928:	08013020 	.word	0x08013020

0800a92c <RCC_GetPCLK2ClockFreq>:
=======
 800a7ec:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800a7f0:	4a03      	ldr	r2, [pc, #12]	; (800a800 <RCC_GetPCLK1ClockFreq+0x18>)
 800a7f2:	5cd3      	ldrb	r3, [r2, r3]
 800a7f4:	f003 031f 	and.w	r3, r3, #31
}
 800a7f8:	40d8      	lsrs	r0, r3
 800a7fa:	4770      	bx	lr
 800a7fc:	40021000 	.word	0x40021000
 800a800:	08012e88 	.word	0x08012e88

0800a804 <RCC_GetPCLK2ClockFreq>:
>>>>>>> render
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
<<<<<<< HEAD
 800a92c:	4b04      	ldr	r3, [pc, #16]	; (800a940 <RCC_GetPCLK2ClockFreq+0x14>)
 800a92e:	689b      	ldr	r3, [r3, #8]
=======
 800a804:	4b04      	ldr	r3, [pc, #16]	; (800a818 <RCC_GetPCLK2ClockFreq+0x14>)
 800a806:	689b      	ldr	r3, [r3, #8]
>>>>>>> render
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
<<<<<<< HEAD
 800a930:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800a934:	4a03      	ldr	r2, [pc, #12]	; (800a944 <RCC_GetPCLK2ClockFreq+0x18>)
 800a936:	5cd3      	ldrb	r3, [r2, r3]
 800a938:	f003 031f 	and.w	r3, r3, #31
}
 800a93c:	40d8      	lsrs	r0, r3
 800a93e:	4770      	bx	lr
 800a940:	40021000 	.word	0x40021000
 800a944:	08013020 	.word	0x08013020

0800a948 <RCC_PLL_GetFreqDomain_SYS>:
=======
 800a808:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800a80c:	4a03      	ldr	r2, [pc, #12]	; (800a81c <RCC_GetPCLK2ClockFreq+0x18>)
 800a80e:	5cd3      	ldrb	r3, [r2, r3]
 800a810:	f003 031f 	and.w	r3, r3, #31
}
 800a814:	40d8      	lsrs	r0, r3
 800a816:	4770      	bx	lr
 800a818:	40021000 	.word	0x40021000
 800a81c:	08012e88 	.word	0x08012e88

0800a820 <RCC_PLL_GetFreqDomain_SYS>:
>>>>>>> render
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
<<<<<<< HEAD
 800a948:	4b0e      	ldr	r3, [pc, #56]	; (800a984 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	f003 0303 	and.w	r3, r3, #3
=======
 800a820:	4b0e      	ldr	r3, [pc, #56]	; (800a85c <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	f003 0303 	and.w	r3, r3, #3
>>>>>>> render
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
<<<<<<< HEAD
 800a950:	2b03      	cmp	r3, #3
 800a952:	d014      	beq.n	800a97e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800a954:	480c      	ldr	r0, [pc, #48]	; (800a988 <RCC_PLL_GetFreqDomain_SYS+0x40>)
=======
 800a828:	2b03      	cmp	r3, #3
 800a82a:	d014      	beq.n	800a856 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800a82c:	480c      	ldr	r0, [pc, #48]	; (800a860 <RCC_PLL_GetFreqDomain_SYS+0x40>)
>>>>>>> render
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
<<<<<<< HEAD
 800a956:	4a0b      	ldr	r2, [pc, #44]	; (800a984 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 800a958:	68d3      	ldr	r3, [r2, #12]
 800a95a:	f3c3 2306 	ubfx	r3, r3, #8, #7
=======
 800a82e:	4a0b      	ldr	r2, [pc, #44]	; (800a85c <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 800a830:	68d3      	ldr	r3, [r2, #12]
 800a832:	f3c3 2306 	ubfx	r3, r3, #8, #7
>>>>>>> render

    default:
      pllinputfreq = HSI_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
<<<<<<< HEAD
 800a95e:	fb03 f000 	mul.w	r0, r3, r0
=======
 800a836:	fb03 f000 	mul.w	r0, r3, r0
>>>>>>> render
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
<<<<<<< HEAD
 800a962:	68d3      	ldr	r3, [r2, #12]
 800a964:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a968:	3301      	adds	r3, #1
 800a96a:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a96e:	68d3      	ldr	r3, [r2, #12]
 800a970:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800a974:	3301      	adds	r3, #1
 800a976:	005b      	lsls	r3, r3, #1
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800a978:	fbb0 f0f3 	udiv	r0, r0, r3
 800a97c:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 800a97e:	4803      	ldr	r0, [pc, #12]	; (800a98c <RCC_PLL_GetFreqDomain_SYS+0x44>)
 800a980:	e7e9      	b.n	800a956 <RCC_PLL_GetFreqDomain_SYS+0xe>
 800a982:	bf00      	nop
 800a984:	40021000 	.word	0x40021000
 800a988:	00f42400 	.word	0x00f42400
 800a98c:	007a1200 	.word	0x007a1200

0800a990 <RCC_GetSystemClockFreq>:
{
 800a990:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a992:	4b07      	ldr	r3, [pc, #28]	; (800a9b0 <RCC_GetSystemClockFreq+0x20>)
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 800a99a:	2b08      	cmp	r3, #8
 800a99c:	d004      	beq.n	800a9a8 <RCC_GetSystemClockFreq+0x18>
 800a99e:	2b0c      	cmp	r3, #12
 800a9a0:	d104      	bne.n	800a9ac <RCC_GetSystemClockFreq+0x1c>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800a9a2:	f7ff ffd1 	bl	800a948 <RCC_PLL_GetFreqDomain_SYS>
      break;
 800a9a6:	e002      	b.n	800a9ae <RCC_GetSystemClockFreq+0x1e>
      frequency = HSE_VALUE;
 800a9a8:	4802      	ldr	r0, [pc, #8]	; (800a9b4 <RCC_GetSystemClockFreq+0x24>)
 800a9aa:	e000      	b.n	800a9ae <RCC_GetSystemClockFreq+0x1e>
  switch (LL_RCC_GetSysClkSource())
 800a9ac:	4802      	ldr	r0, [pc, #8]	; (800a9b8 <RCC_GetSystemClockFreq+0x28>)
}
 800a9ae:	bd08      	pop	{r3, pc}
 800a9b0:	40021000 	.word	0x40021000
 800a9b4:	007a1200 	.word	0x007a1200
 800a9b8:	00f42400 	.word	0x00f42400

0800a9bc <LL_RCC_GetUSARTClockFreq>:
{
 800a9bc:	b508      	push	{r3, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800a9be:	2803      	cmp	r0, #3
 800a9c0:	d005      	beq.n	800a9ce <LL_RCC_GetUSARTClockFreq+0x12>
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800a9c2:	280c      	cmp	r0, #12
 800a9c4:	d02c      	beq.n	800aa20 <LL_RCC_GetUSARTClockFreq+0x64>
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800a9c6:	2830      	cmp	r0, #48	; 0x30
 800a9c8:	d053      	beq.n	800aa72 <LL_RCC_GetUSARTClockFreq+0xb6>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800a9ca:	2000      	movs	r0, #0
}
 800a9cc:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800a9ce:	4b3d      	ldr	r3, [pc, #244]	; (800aac4 <LL_RCC_GetUSARTClockFreq+0x108>)
 800a9d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9d4:	4003      	ands	r3, r0
 800a9d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a9da:	4b3b      	ldr	r3, [pc, #236]	; (800aac8 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800a9dc:	4298      	cmp	r0, r3
 800a9de:	d00f      	beq.n	800aa00 <LL_RCC_GetUSARTClockFreq+0x44>
 800a9e0:	f1b0 1f03 	cmp.w	r0, #196611	; 0x30003
 800a9e4:	d013      	beq.n	800aa0e <LL_RCC_GetUSARTClockFreq+0x52>
 800a9e6:	3b01      	subs	r3, #1
 800a9e8:	4298      	cmp	r0, r3
 800a9ea:	d006      	beq.n	800a9fa <LL_RCC_GetUSARTClockFreq+0x3e>
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a9ec:	f7ff ffd0 	bl	800a990 <RCC_GetSystemClockFreq>
 800a9f0:	f7ff ff80 	bl	800a8f4 <RCC_GetHCLKClockFreq>
 800a9f4:	f7ff ff9a 	bl	800a92c <RCC_GetPCLK2ClockFreq>
        break;
 800a9f8:	e7e8      	b.n	800a9cc <LL_RCC_GetUSARTClockFreq+0x10>
        usart_frequency = RCC_GetSystemClockFreq();
 800a9fa:	f7ff ffc9 	bl	800a990 <RCC_GetSystemClockFreq>
        break;
 800a9fe:	e7e5      	b.n	800a9cc <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800aa00:	4b30      	ldr	r3, [pc, #192]	; (800aac4 <LL_RCC_GetUSARTClockFreq+0x108>)
 800aa02:	6818      	ldr	r0, [r3, #0]
 800aa04:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800aa08:	d0e0      	beq.n	800a9cc <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = HSI_VALUE;
 800aa0a:	4830      	ldr	r0, [pc, #192]	; (800aacc <LL_RCC_GetUSARTClockFreq+0x110>)
 800aa0c:	e7de      	b.n	800a9cc <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800aa0e:	4b2d      	ldr	r3, [pc, #180]	; (800aac4 <LL_RCC_GetUSARTClockFreq+0x108>)
 800aa10:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800aa14:	f010 0002 	ands.w	r0, r0, #2
 800aa18:	d0d8      	beq.n	800a9cc <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = LSE_VALUE;
 800aa1a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800aa1e:	e7d5      	b.n	800a9cc <LL_RCC_GetUSARTClockFreq+0x10>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800aa20:	4b28      	ldr	r3, [pc, #160]	; (800aac4 <LL_RCC_GetUSARTClockFreq+0x108>)
 800aa22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa26:	4003      	ands	r3, r0
 800aa28:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800aa2c:	4b28      	ldr	r3, [pc, #160]	; (800aad0 <LL_RCC_GetUSARTClockFreq+0x114>)
 800aa2e:	4298      	cmp	r0, r3
 800aa30:	d00f      	beq.n	800aa52 <LL_RCC_GetUSARTClockFreq+0x96>
 800aa32:	f1b0 1f0c 	cmp.w	r0, #786444	; 0xc000c
 800aa36:	d013      	beq.n	800aa60 <LL_RCC_GetUSARTClockFreq+0xa4>
 800aa38:	3b04      	subs	r3, #4
 800aa3a:	4298      	cmp	r0, r3
 800aa3c:	d006      	beq.n	800aa4c <LL_RCC_GetUSARTClockFreq+0x90>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800aa3e:	f7ff ffa7 	bl	800a990 <RCC_GetSystemClockFreq>
 800aa42:	f7ff ff57 	bl	800a8f4 <RCC_GetHCLKClockFreq>
 800aa46:	f7ff ff63 	bl	800a910 <RCC_GetPCLK1ClockFreq>
        break;
 800aa4a:	e7bf      	b.n	800a9cc <LL_RCC_GetUSARTClockFreq+0x10>
        usart_frequency = RCC_GetSystemClockFreq();
 800aa4c:	f7ff ffa0 	bl	800a990 <RCC_GetSystemClockFreq>
        break;
 800aa50:	e7bc      	b.n	800a9cc <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800aa52:	4b1c      	ldr	r3, [pc, #112]	; (800aac4 <LL_RCC_GetUSARTClockFreq+0x108>)
 800aa54:	6818      	ldr	r0, [r3, #0]
 800aa56:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800aa5a:	d0b7      	beq.n	800a9cc <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = HSI_VALUE;
 800aa5c:	481b      	ldr	r0, [pc, #108]	; (800aacc <LL_RCC_GetUSARTClockFreq+0x110>)
 800aa5e:	e7b5      	b.n	800a9cc <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800aa60:	4b18      	ldr	r3, [pc, #96]	; (800aac4 <LL_RCC_GetUSARTClockFreq+0x108>)
 800aa62:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800aa66:	f010 0002 	ands.w	r0, r0, #2
 800aa6a:	d0af      	beq.n	800a9cc <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = LSE_VALUE;
 800aa6c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800aa70:	e7ac      	b.n	800a9cc <LL_RCC_GetUSARTClockFreq+0x10>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800aa72:	4b14      	ldr	r3, [pc, #80]	; (800aac4 <LL_RCC_GetUSARTClockFreq+0x108>)
 800aa74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa78:	4003      	ands	r3, r0
 800aa7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800aa7e:	4b15      	ldr	r3, [pc, #84]	; (800aad4 <LL_RCC_GetUSARTClockFreq+0x118>)
 800aa80:	4298      	cmp	r0, r3
 800aa82:	d00f      	beq.n	800aaa4 <LL_RCC_GetUSARTClockFreq+0xe8>
 800aa84:	f1b0 1f30 	cmp.w	r0, #3145776	; 0x300030
 800aa88:	d013      	beq.n	800aab2 <LL_RCC_GetUSARTClockFreq+0xf6>
 800aa8a:	3b10      	subs	r3, #16
 800aa8c:	4298      	cmp	r0, r3
 800aa8e:	d006      	beq.n	800aa9e <LL_RCC_GetUSARTClockFreq+0xe2>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800aa90:	f7ff ff7e 	bl	800a990 <RCC_GetSystemClockFreq>
 800aa94:	f7ff ff2e 	bl	800a8f4 <RCC_GetHCLKClockFreq>
 800aa98:	f7ff ff3a 	bl	800a910 <RCC_GetPCLK1ClockFreq>
          break;
 800aa9c:	e796      	b.n	800a9cc <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = RCC_GetSystemClockFreq();
 800aa9e:	f7ff ff77 	bl	800a990 <RCC_GetSystemClockFreq>
          break;
 800aaa2:	e793      	b.n	800a9cc <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800aaa4:	4b07      	ldr	r3, [pc, #28]	; (800aac4 <LL_RCC_GetUSARTClockFreq+0x108>)
 800aaa6:	6818      	ldr	r0, [r3, #0]
 800aaa8:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800aaac:	d08e      	beq.n	800a9cc <LL_RCC_GetUSARTClockFreq+0x10>
            usart_frequency = HSI_VALUE;
 800aaae:	4807      	ldr	r0, [pc, #28]	; (800aacc <LL_RCC_GetUSARTClockFreq+0x110>)
 800aab0:	e78c      	b.n	800a9cc <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800aab2:	4b04      	ldr	r3, [pc, #16]	; (800aac4 <LL_RCC_GetUSARTClockFreq+0x108>)
 800aab4:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800aab8:	f010 0002 	ands.w	r0, r0, #2
 800aabc:	d086      	beq.n	800a9cc <LL_RCC_GetUSARTClockFreq+0x10>
            usart_frequency = LSE_VALUE;
 800aabe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return usart_frequency;
 800aac2:	e783      	b.n	800a9cc <LL_RCC_GetUSARTClockFreq+0x10>
 800aac4:	40021000 	.word	0x40021000
 800aac8:	00030002 	.word	0x00030002
 800aacc:	00f42400 	.word	0x00f42400
 800aad0:	000c0008 	.word	0x000c0008
 800aad4:	00300020 	.word	0x00300020

0800aad8 <LL_RCC_GetUARTClockFreq>:
{
 800aad8:	b510      	push	{r4, lr}
 800aada:	4604      	mov	r4, r0
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800aadc:	28c0      	cmp	r0, #192	; 0xc0
 800aade:	d004      	beq.n	800aaea <LL_RCC_GetUARTClockFreq+0x12>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800aae0:	2000      	movs	r0, #0
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800aae2:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 800aae6:	d029      	beq.n	800ab3c <LL_RCC_GetUARTClockFreq+0x64>
}
 800aae8:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800aaea:	4b29      	ldr	r3, [pc, #164]	; (800ab90 <LL_RCC_GetUARTClockFreq+0xb8>)
 800aaec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaf0:	4003      	ands	r3, r0
 800aaf2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800aaf6:	4a27      	ldr	r2, [pc, #156]	; (800ab94 <LL_RCC_GetUARTClockFreq+0xbc>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d00f      	beq.n	800ab1c <LL_RCC_GetUARTClockFreq+0x44>
 800aafc:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800ab00:	d013      	beq.n	800ab2a <LL_RCC_GetUARTClockFreq+0x52>
 800ab02:	3a40      	subs	r2, #64	; 0x40
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d006      	beq.n	800ab16 <LL_RCC_GetUARTClockFreq+0x3e>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800ab08:	f7ff ff42 	bl	800a990 <RCC_GetSystemClockFreq>
 800ab0c:	f7ff fef2 	bl	800a8f4 <RCC_GetHCLKClockFreq>
 800ab10:	f7ff fefe 	bl	800a910 <RCC_GetPCLK1ClockFreq>
        break;
 800ab14:	e7e5      	b.n	800aae2 <LL_RCC_GetUARTClockFreq+0xa>
        uart_frequency = RCC_GetSystemClockFreq();
 800ab16:	f7ff ff3b 	bl	800a990 <RCC_GetSystemClockFreq>
        break;
 800ab1a:	e7e2      	b.n	800aae2 <LL_RCC_GetUARTClockFreq+0xa>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800ab1c:	4b1c      	ldr	r3, [pc, #112]	; (800ab90 <LL_RCC_GetUARTClockFreq+0xb8>)
 800ab1e:	6818      	ldr	r0, [r3, #0]
 800ab20:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800ab24:	d0dd      	beq.n	800aae2 <LL_RCC_GetUARTClockFreq+0xa>
          uart_frequency = HSI_VALUE;
 800ab26:	481c      	ldr	r0, [pc, #112]	; (800ab98 <LL_RCC_GetUARTClockFreq+0xc0>)
 800ab28:	e7db      	b.n	800aae2 <LL_RCC_GetUARTClockFreq+0xa>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800ab2a:	4b19      	ldr	r3, [pc, #100]	; (800ab90 <LL_RCC_GetUARTClockFreq+0xb8>)
 800ab2c:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800ab30:	f010 0002 	ands.w	r0, r0, #2
 800ab34:	d0d5      	beq.n	800aae2 <LL_RCC_GetUARTClockFreq+0xa>
          uart_frequency = LSE_VALUE;
 800ab36:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ab3a:	e7d2      	b.n	800aae2 <LL_RCC_GetUARTClockFreq+0xa>
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800ab3c:	4b14      	ldr	r3, [pc, #80]	; (800ab90 <LL_RCC_GetUARTClockFreq+0xb8>)
 800ab3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab42:	4023      	ands	r3, r4
 800ab44:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800ab48:	4b14      	ldr	r3, [pc, #80]	; (800ab9c <LL_RCC_GetUARTClockFreq+0xc4>)
 800ab4a:	429c      	cmp	r4, r3
 800ab4c:	d010      	beq.n	800ab70 <LL_RCC_GetUARTClockFreq+0x98>
 800ab4e:	f1b4 2f03 	cmp.w	r4, #50332416	; 0x3000300
 800ab52:	d014      	beq.n	800ab7e <LL_RCC_GetUARTClockFreq+0xa6>
 800ab54:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800ab58:	429c      	cmp	r4, r3
 800ab5a:	d006      	beq.n	800ab6a <LL_RCC_GetUARTClockFreq+0x92>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800ab5c:	f7ff ff18 	bl	800a990 <RCC_GetSystemClockFreq>
 800ab60:	f7ff fec8 	bl	800a8f4 <RCC_GetHCLKClockFreq>
 800ab64:	f7ff fed4 	bl	800a910 <RCC_GetPCLK1ClockFreq>
        break;
 800ab68:	e7be      	b.n	800aae8 <LL_RCC_GetUARTClockFreq+0x10>
        uart_frequency = RCC_GetSystemClockFreq();
 800ab6a:	f7ff ff11 	bl	800a990 <RCC_GetSystemClockFreq>
        break;
 800ab6e:	e7bb      	b.n	800aae8 <LL_RCC_GetUARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800ab70:	4b07      	ldr	r3, [pc, #28]	; (800ab90 <LL_RCC_GetUARTClockFreq+0xb8>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800ab78:	d0b6      	beq.n	800aae8 <LL_RCC_GetUARTClockFreq+0x10>
          uart_frequency = HSI_VALUE;
 800ab7a:	4807      	ldr	r0, [pc, #28]	; (800ab98 <LL_RCC_GetUARTClockFreq+0xc0>)
 800ab7c:	e7b4      	b.n	800aae8 <LL_RCC_GetUARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800ab7e:	4b04      	ldr	r3, [pc, #16]	; (800ab90 <LL_RCC_GetUARTClockFreq+0xb8>)
 800ab80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab84:	f013 0f02 	tst.w	r3, #2
 800ab88:	d0ae      	beq.n	800aae8 <LL_RCC_GetUARTClockFreq+0x10>
          uart_frequency = LSE_VALUE;
 800ab8a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return uart_frequency;
 800ab8e:	e7ab      	b.n	800aae8 <LL_RCC_GetUARTClockFreq+0x10>
 800ab90:	40021000 	.word	0x40021000
 800ab94:	00c00080 	.word	0x00c00080
 800ab98:	00f42400 	.word	0x00f42400
 800ab9c:	03000200 	.word	0x03000200

0800aba0 <LL_USART_Init>:
=======
 800a83a:	68d3      	ldr	r3, [r2, #12]
 800a83c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a840:	3301      	adds	r3, #1
 800a842:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a846:	68d3      	ldr	r3, [r2, #12]
 800a848:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800a84c:	3301      	adds	r3, #1
 800a84e:	005b      	lsls	r3, r3, #1
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800a850:	fbb0 f0f3 	udiv	r0, r0, r3
 800a854:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 800a856:	4803      	ldr	r0, [pc, #12]	; (800a864 <RCC_PLL_GetFreqDomain_SYS+0x44>)
 800a858:	e7e9      	b.n	800a82e <RCC_PLL_GetFreqDomain_SYS+0xe>
 800a85a:	bf00      	nop
 800a85c:	40021000 	.word	0x40021000
 800a860:	00f42400 	.word	0x00f42400
 800a864:	007a1200 	.word	0x007a1200

0800a868 <RCC_GetSystemClockFreq>:
{
 800a868:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a86a:	4b07      	ldr	r3, [pc, #28]	; (800a888 <RCC_GetSystemClockFreq+0x20>)
 800a86c:	689b      	ldr	r3, [r3, #8]
 800a86e:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 800a872:	2b08      	cmp	r3, #8
 800a874:	d004      	beq.n	800a880 <RCC_GetSystemClockFreq+0x18>
 800a876:	2b0c      	cmp	r3, #12
 800a878:	d104      	bne.n	800a884 <RCC_GetSystemClockFreq+0x1c>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800a87a:	f7ff ffd1 	bl	800a820 <RCC_PLL_GetFreqDomain_SYS>
      break;
 800a87e:	e002      	b.n	800a886 <RCC_GetSystemClockFreq+0x1e>
      frequency = HSE_VALUE;
 800a880:	4802      	ldr	r0, [pc, #8]	; (800a88c <RCC_GetSystemClockFreq+0x24>)
 800a882:	e000      	b.n	800a886 <RCC_GetSystemClockFreq+0x1e>
  switch (LL_RCC_GetSysClkSource())
 800a884:	4802      	ldr	r0, [pc, #8]	; (800a890 <RCC_GetSystemClockFreq+0x28>)
}
 800a886:	bd08      	pop	{r3, pc}
 800a888:	40021000 	.word	0x40021000
 800a88c:	007a1200 	.word	0x007a1200
 800a890:	00f42400 	.word	0x00f42400

0800a894 <LL_RCC_GetUSARTClockFreq>:
{
 800a894:	b508      	push	{r3, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800a896:	2803      	cmp	r0, #3
 800a898:	d005      	beq.n	800a8a6 <LL_RCC_GetUSARTClockFreq+0x12>
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800a89a:	280c      	cmp	r0, #12
 800a89c:	d02c      	beq.n	800a8f8 <LL_RCC_GetUSARTClockFreq+0x64>
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800a89e:	2830      	cmp	r0, #48	; 0x30
 800a8a0:	d053      	beq.n	800a94a <LL_RCC_GetUSARTClockFreq+0xb6>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800a8a2:	2000      	movs	r0, #0
}
 800a8a4:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800a8a6:	4b3d      	ldr	r3, [pc, #244]	; (800a99c <LL_RCC_GetUSARTClockFreq+0x108>)
 800a8a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ac:	4003      	ands	r3, r0
 800a8ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a8b2:	4b3b      	ldr	r3, [pc, #236]	; (800a9a0 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800a8b4:	4298      	cmp	r0, r3
 800a8b6:	d00f      	beq.n	800a8d8 <LL_RCC_GetUSARTClockFreq+0x44>
 800a8b8:	f1b0 1f03 	cmp.w	r0, #196611	; 0x30003
 800a8bc:	d013      	beq.n	800a8e6 <LL_RCC_GetUSARTClockFreq+0x52>
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	4298      	cmp	r0, r3
 800a8c2:	d006      	beq.n	800a8d2 <LL_RCC_GetUSARTClockFreq+0x3e>
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a8c4:	f7ff ffd0 	bl	800a868 <RCC_GetSystemClockFreq>
 800a8c8:	f7ff ff80 	bl	800a7cc <RCC_GetHCLKClockFreq>
 800a8cc:	f7ff ff9a 	bl	800a804 <RCC_GetPCLK2ClockFreq>
        break;
 800a8d0:	e7e8      	b.n	800a8a4 <LL_RCC_GetUSARTClockFreq+0x10>
        usart_frequency = RCC_GetSystemClockFreq();
 800a8d2:	f7ff ffc9 	bl	800a868 <RCC_GetSystemClockFreq>
        break;
 800a8d6:	e7e5      	b.n	800a8a4 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a8d8:	4b30      	ldr	r3, [pc, #192]	; (800a99c <LL_RCC_GetUSARTClockFreq+0x108>)
 800a8da:	6818      	ldr	r0, [r3, #0]
 800a8dc:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800a8e0:	d0e0      	beq.n	800a8a4 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = HSI_VALUE;
 800a8e2:	4830      	ldr	r0, [pc, #192]	; (800a9a4 <LL_RCC_GetUSARTClockFreq+0x110>)
 800a8e4:	e7de      	b.n	800a8a4 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a8e6:	4b2d      	ldr	r3, [pc, #180]	; (800a99c <LL_RCC_GetUSARTClockFreq+0x108>)
 800a8e8:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800a8ec:	f010 0002 	ands.w	r0, r0, #2
 800a8f0:	d0d8      	beq.n	800a8a4 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = LSE_VALUE;
 800a8f2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a8f6:	e7d5      	b.n	800a8a4 <LL_RCC_GetUSARTClockFreq+0x10>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800a8f8:	4b28      	ldr	r3, [pc, #160]	; (800a99c <LL_RCC_GetUSARTClockFreq+0x108>)
 800a8fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8fe:	4003      	ands	r3, r0
 800a900:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a904:	4b28      	ldr	r3, [pc, #160]	; (800a9a8 <LL_RCC_GetUSARTClockFreq+0x114>)
 800a906:	4298      	cmp	r0, r3
 800a908:	d00f      	beq.n	800a92a <LL_RCC_GetUSARTClockFreq+0x96>
 800a90a:	f1b0 1f0c 	cmp.w	r0, #786444	; 0xc000c
 800a90e:	d013      	beq.n	800a938 <LL_RCC_GetUSARTClockFreq+0xa4>
 800a910:	3b04      	subs	r3, #4
 800a912:	4298      	cmp	r0, r3
 800a914:	d006      	beq.n	800a924 <LL_RCC_GetUSARTClockFreq+0x90>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a916:	f7ff ffa7 	bl	800a868 <RCC_GetSystemClockFreq>
 800a91a:	f7ff ff57 	bl	800a7cc <RCC_GetHCLKClockFreq>
 800a91e:	f7ff ff63 	bl	800a7e8 <RCC_GetPCLK1ClockFreq>
        break;
 800a922:	e7bf      	b.n	800a8a4 <LL_RCC_GetUSARTClockFreq+0x10>
        usart_frequency = RCC_GetSystemClockFreq();
 800a924:	f7ff ffa0 	bl	800a868 <RCC_GetSystemClockFreq>
        break;
 800a928:	e7bc      	b.n	800a8a4 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a92a:	4b1c      	ldr	r3, [pc, #112]	; (800a99c <LL_RCC_GetUSARTClockFreq+0x108>)
 800a92c:	6818      	ldr	r0, [r3, #0]
 800a92e:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800a932:	d0b7      	beq.n	800a8a4 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = HSI_VALUE;
 800a934:	481b      	ldr	r0, [pc, #108]	; (800a9a4 <LL_RCC_GetUSARTClockFreq+0x110>)
 800a936:	e7b5      	b.n	800a8a4 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a938:	4b18      	ldr	r3, [pc, #96]	; (800a99c <LL_RCC_GetUSARTClockFreq+0x108>)
 800a93a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800a93e:	f010 0002 	ands.w	r0, r0, #2
 800a942:	d0af      	beq.n	800a8a4 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = LSE_VALUE;
 800a944:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a948:	e7ac      	b.n	800a8a4 <LL_RCC_GetUSARTClockFreq+0x10>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800a94a:	4b14      	ldr	r3, [pc, #80]	; (800a99c <LL_RCC_GetUSARTClockFreq+0x108>)
 800a94c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a950:	4003      	ands	r3, r0
 800a952:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a956:	4b15      	ldr	r3, [pc, #84]	; (800a9ac <LL_RCC_GetUSARTClockFreq+0x118>)
 800a958:	4298      	cmp	r0, r3
 800a95a:	d00f      	beq.n	800a97c <LL_RCC_GetUSARTClockFreq+0xe8>
 800a95c:	f1b0 1f30 	cmp.w	r0, #3145776	; 0x300030
 800a960:	d013      	beq.n	800a98a <LL_RCC_GetUSARTClockFreq+0xf6>
 800a962:	3b10      	subs	r3, #16
 800a964:	4298      	cmp	r0, r3
 800a966:	d006      	beq.n	800a976 <LL_RCC_GetUSARTClockFreq+0xe2>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a968:	f7ff ff7e 	bl	800a868 <RCC_GetSystemClockFreq>
 800a96c:	f7ff ff2e 	bl	800a7cc <RCC_GetHCLKClockFreq>
 800a970:	f7ff ff3a 	bl	800a7e8 <RCC_GetPCLK1ClockFreq>
          break;
 800a974:	e796      	b.n	800a8a4 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = RCC_GetSystemClockFreq();
 800a976:	f7ff ff77 	bl	800a868 <RCC_GetSystemClockFreq>
          break;
 800a97a:	e793      	b.n	800a8a4 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a97c:	4b07      	ldr	r3, [pc, #28]	; (800a99c <LL_RCC_GetUSARTClockFreq+0x108>)
 800a97e:	6818      	ldr	r0, [r3, #0]
 800a980:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800a984:	d08e      	beq.n	800a8a4 <LL_RCC_GetUSARTClockFreq+0x10>
            usart_frequency = HSI_VALUE;
 800a986:	4807      	ldr	r0, [pc, #28]	; (800a9a4 <LL_RCC_GetUSARTClockFreq+0x110>)
 800a988:	e78c      	b.n	800a8a4 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a98a:	4b04      	ldr	r3, [pc, #16]	; (800a99c <LL_RCC_GetUSARTClockFreq+0x108>)
 800a98c:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800a990:	f010 0002 	ands.w	r0, r0, #2
 800a994:	d086      	beq.n	800a8a4 <LL_RCC_GetUSARTClockFreq+0x10>
            usart_frequency = LSE_VALUE;
 800a996:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return usart_frequency;
 800a99a:	e783      	b.n	800a8a4 <LL_RCC_GetUSARTClockFreq+0x10>
 800a99c:	40021000 	.word	0x40021000
 800a9a0:	00030002 	.word	0x00030002
 800a9a4:	00f42400 	.word	0x00f42400
 800a9a8:	000c0008 	.word	0x000c0008
 800a9ac:	00300020 	.word	0x00300020

0800a9b0 <LL_RCC_GetUARTClockFreq>:
{
 800a9b0:	b510      	push	{r4, lr}
 800a9b2:	4604      	mov	r4, r0
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800a9b4:	28c0      	cmp	r0, #192	; 0xc0
 800a9b6:	d004      	beq.n	800a9c2 <LL_RCC_GetUARTClockFreq+0x12>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800a9b8:	2000      	movs	r0, #0
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800a9ba:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 800a9be:	d029      	beq.n	800aa14 <LL_RCC_GetUARTClockFreq+0x64>
}
 800a9c0:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800a9c2:	4b29      	ldr	r3, [pc, #164]	; (800aa68 <LL_RCC_GetUARTClockFreq+0xb8>)
 800a9c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9c8:	4003      	ands	r3, r0
 800a9ca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800a9ce:	4a27      	ldr	r2, [pc, #156]	; (800aa6c <LL_RCC_GetUARTClockFreq+0xbc>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d00f      	beq.n	800a9f4 <LL_RCC_GetUARTClockFreq+0x44>
 800a9d4:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800a9d8:	d013      	beq.n	800aa02 <LL_RCC_GetUARTClockFreq+0x52>
 800a9da:	3a40      	subs	r2, #64	; 0x40
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d006      	beq.n	800a9ee <LL_RCC_GetUARTClockFreq+0x3e>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a9e0:	f7ff ff42 	bl	800a868 <RCC_GetSystemClockFreq>
 800a9e4:	f7ff fef2 	bl	800a7cc <RCC_GetHCLKClockFreq>
 800a9e8:	f7ff fefe 	bl	800a7e8 <RCC_GetPCLK1ClockFreq>
        break;
 800a9ec:	e7e5      	b.n	800a9ba <LL_RCC_GetUARTClockFreq+0xa>
        uart_frequency = RCC_GetSystemClockFreq();
 800a9ee:	f7ff ff3b 	bl	800a868 <RCC_GetSystemClockFreq>
        break;
 800a9f2:	e7e2      	b.n	800a9ba <LL_RCC_GetUARTClockFreq+0xa>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a9f4:	4b1c      	ldr	r3, [pc, #112]	; (800aa68 <LL_RCC_GetUARTClockFreq+0xb8>)
 800a9f6:	6818      	ldr	r0, [r3, #0]
 800a9f8:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800a9fc:	d0dd      	beq.n	800a9ba <LL_RCC_GetUARTClockFreq+0xa>
          uart_frequency = HSI_VALUE;
 800a9fe:	481c      	ldr	r0, [pc, #112]	; (800aa70 <LL_RCC_GetUARTClockFreq+0xc0>)
 800aa00:	e7db      	b.n	800a9ba <LL_RCC_GetUARTClockFreq+0xa>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800aa02:	4b19      	ldr	r3, [pc, #100]	; (800aa68 <LL_RCC_GetUARTClockFreq+0xb8>)
 800aa04:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800aa08:	f010 0002 	ands.w	r0, r0, #2
 800aa0c:	d0d5      	beq.n	800a9ba <LL_RCC_GetUARTClockFreq+0xa>
          uart_frequency = LSE_VALUE;
 800aa0e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800aa12:	e7d2      	b.n	800a9ba <LL_RCC_GetUARTClockFreq+0xa>
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800aa14:	4b14      	ldr	r3, [pc, #80]	; (800aa68 <LL_RCC_GetUARTClockFreq+0xb8>)
 800aa16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa1a:	4023      	ands	r3, r4
 800aa1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800aa20:	4b14      	ldr	r3, [pc, #80]	; (800aa74 <LL_RCC_GetUARTClockFreq+0xc4>)
 800aa22:	429c      	cmp	r4, r3
 800aa24:	d010      	beq.n	800aa48 <LL_RCC_GetUARTClockFreq+0x98>
 800aa26:	f1b4 2f03 	cmp.w	r4, #50332416	; 0x3000300
 800aa2a:	d014      	beq.n	800aa56 <LL_RCC_GetUARTClockFreq+0xa6>
 800aa2c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800aa30:	429c      	cmp	r4, r3
 800aa32:	d006      	beq.n	800aa42 <LL_RCC_GetUARTClockFreq+0x92>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800aa34:	f7ff ff18 	bl	800a868 <RCC_GetSystemClockFreq>
 800aa38:	f7ff fec8 	bl	800a7cc <RCC_GetHCLKClockFreq>
 800aa3c:	f7ff fed4 	bl	800a7e8 <RCC_GetPCLK1ClockFreq>
        break;
 800aa40:	e7be      	b.n	800a9c0 <LL_RCC_GetUARTClockFreq+0x10>
        uart_frequency = RCC_GetSystemClockFreq();
 800aa42:	f7ff ff11 	bl	800a868 <RCC_GetSystemClockFreq>
        break;
 800aa46:	e7bb      	b.n	800a9c0 <LL_RCC_GetUARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800aa48:	4b07      	ldr	r3, [pc, #28]	; (800aa68 <LL_RCC_GetUARTClockFreq+0xb8>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800aa50:	d0b6      	beq.n	800a9c0 <LL_RCC_GetUARTClockFreq+0x10>
          uart_frequency = HSI_VALUE;
 800aa52:	4807      	ldr	r0, [pc, #28]	; (800aa70 <LL_RCC_GetUARTClockFreq+0xc0>)
 800aa54:	e7b4      	b.n	800a9c0 <LL_RCC_GetUARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800aa56:	4b04      	ldr	r3, [pc, #16]	; (800aa68 <LL_RCC_GetUARTClockFreq+0xb8>)
 800aa58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa5c:	f013 0f02 	tst.w	r3, #2
 800aa60:	d0ae      	beq.n	800a9c0 <LL_RCC_GetUARTClockFreq+0x10>
          uart_frequency = LSE_VALUE;
 800aa62:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return uart_frequency;
 800aa66:	e7ab      	b.n	800a9c0 <LL_RCC_GetUARTClockFreq+0x10>
 800aa68:	40021000 	.word	0x40021000
 800aa6c:	00c00080 	.word	0x00c00080
 800aa70:	00f42400 	.word	0x00f42400
 800aa74:	03000200 	.word	0x03000200

0800aa78 <LL_USART_Init>:
>>>>>>> render
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
<<<<<<< HEAD
 800aba0:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800aba2:	6803      	ldr	r3, [r0, #0]
 800aba4:	f013 0f01 	tst.w	r3, #1
 800aba8:	d175      	bne.n	800ac96 <LL_USART_Init+0xf6>
 800abaa:	4604      	mov	r4, r0
 800abac:	460d      	mov	r5, r1
=======
 800aa78:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800aa7a:	6803      	ldr	r3, [r0, #0]
 800aa7c:	f013 0f01 	tst.w	r3, #1
 800aa80:	d175      	bne.n	800ab6e <LL_USART_Init+0xf6>
 800aa82:	4604      	mov	r4, r0
 800aa84:	460d      	mov	r5, r1
>>>>>>> render
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
<<<<<<< HEAD
 800abae:	6803      	ldr	r3, [r0, #0]
 800abb0:	4a3a      	ldr	r2, [pc, #232]	; (800ac9c <LL_USART_Init+0xfc>)
 800abb2:	401a      	ands	r2, r3
 800abb4:	688b      	ldr	r3, [r1, #8]
 800abb6:	6909      	ldr	r1, [r1, #16]
 800abb8:	430b      	orrs	r3, r1
 800abba:	6969      	ldr	r1, [r5, #20]
 800abbc:	430b      	orrs	r3, r1
 800abbe:	69e9      	ldr	r1, [r5, #28]
 800abc0:	430b      	orrs	r3, r1
 800abc2:	4313      	orrs	r3, r2
 800abc4:	6003      	str	r3, [r0, #0]
=======
 800aa86:	6803      	ldr	r3, [r0, #0]
 800aa88:	4a3a      	ldr	r2, [pc, #232]	; (800ab74 <LL_USART_Init+0xfc>)
 800aa8a:	401a      	ands	r2, r3
 800aa8c:	688b      	ldr	r3, [r1, #8]
 800aa8e:	6909      	ldr	r1, [r1, #16]
 800aa90:	430b      	orrs	r3, r1
 800aa92:	6969      	ldr	r1, [r5, #20]
 800aa94:	430b      	orrs	r3, r1
 800aa96:	69e9      	ldr	r1, [r5, #28]
 800aa98:	430b      	orrs	r3, r1
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	6003      	str	r3, [r0, #0]
>>>>>>> render
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
<<<<<<< HEAD
 800abc6:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800abc8:	6842      	ldr	r2, [r0, #4]
 800abca:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800abce:	4313      	orrs	r3, r2
 800abd0:	6043      	str	r3, [r0, #4]
=======
 800aa9e:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800aaa0:	6842      	ldr	r2, [r0, #4]
 800aaa2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	6043      	str	r3, [r0, #4]
>>>>>>> render
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
<<<<<<< HEAD
 800abd2:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800abd4:	6882      	ldr	r2, [r0, #8]
 800abd6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800abda:	4313      	orrs	r3, r2
 800abdc:	6083      	str	r3, [r0, #8]
=======
 800aaaa:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800aaac:	6882      	ldr	r2, [r0, #8]
 800aaae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800aab2:	4313      	orrs	r3, r2
 800aab4:	6083      	str	r3, [r0, #8]
>>>>>>> render

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
<<<<<<< HEAD
 800abde:	4b30      	ldr	r3, [pc, #192]	; (800aca0 <LL_USART_Init+0x100>)
 800abe0:	4298      	cmp	r0, r3
 800abe2:	d013      	beq.n	800ac0c <LL_USART_Init+0x6c>
=======
 800aab6:	4b30      	ldr	r3, [pc, #192]	; (800ab78 <LL_USART_Init+0x100>)
 800aab8:	4298      	cmp	r0, r3
 800aaba:	d013      	beq.n	800aae4 <LL_USART_Init+0x6c>
>>>>>>> render
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
    }
    else if (USARTx == USART2)
<<<<<<< HEAD
 800abe4:	4b2f      	ldr	r3, [pc, #188]	; (800aca4 <LL_USART_Init+0x104>)
 800abe6:	4298      	cmp	r0, r3
 800abe8:	d019      	beq.n	800ac1e <LL_USART_Init+0x7e>
=======
 800aabc:	4b2f      	ldr	r3, [pc, #188]	; (800ab7c <LL_USART_Init+0x104>)
 800aabe:	4298      	cmp	r0, r3
 800aac0:	d019      	beq.n	800aaf6 <LL_USART_Init+0x7e>
>>>>>>> render
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
    }
    else if (USARTx == USART3)
<<<<<<< HEAD
 800abea:	4b2f      	ldr	r3, [pc, #188]	; (800aca8 <LL_USART_Init+0x108>)
 800abec:	4298      	cmp	r0, r3
 800abee:	d01a      	beq.n	800ac26 <LL_USART_Init+0x86>
=======
 800aac2:	4b2f      	ldr	r3, [pc, #188]	; (800ab80 <LL_USART_Init+0x108>)
 800aac4:	4298      	cmp	r0, r3
 800aac6:	d01a      	beq.n	800aafe <LL_USART_Init+0x86>
>>>>>>> render
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
    }
#if defined(UART4)
    else if (USARTx == UART4)
<<<<<<< HEAD
 800abf0:	4b2e      	ldr	r3, [pc, #184]	; (800acac <LL_USART_Init+0x10c>)
 800abf2:	4298      	cmp	r0, r3
 800abf4:	d01b      	beq.n	800ac2e <LL_USART_Init+0x8e>
=======
 800aac8:	4b2e      	ldr	r3, [pc, #184]	; (800ab84 <LL_USART_Init+0x10c>)
 800aaca:	4298      	cmp	r0, r3
 800aacc:	d01b      	beq.n	800ab06 <LL_USART_Init+0x8e>
>>>>>>> render
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
<<<<<<< HEAD
 800abf6:	4b2e      	ldr	r3, [pc, #184]	; (800acb0 <LL_USART_Init+0x110>)
 800abf8:	4298      	cmp	r0, r3
 800abfa:	d01c      	beq.n	800ac36 <LL_USART_Init+0x96>
  ErrorStatus status = ERROR;
 800abfc:	2001      	movs	r0, #1
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800abfe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ac00:	f022 020f 	bic.w	r2, r2, #15
 800ac04:	882b      	ldrh	r3, [r5, #0]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	62e3      	str	r3, [r4, #44]	; 0x2c
=======
 800aace:	4b2e      	ldr	r3, [pc, #184]	; (800ab88 <LL_USART_Init+0x110>)
 800aad0:	4298      	cmp	r0, r3
 800aad2:	d01c      	beq.n	800ab0e <LL_USART_Init+0x96>
  ErrorStatus status = ERROR;
 800aad4:	2001      	movs	r0, #1
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800aad6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800aad8:	f022 020f 	bic.w	r2, r2, #15
 800aadc:	882b      	ldrh	r3, [r5, #0]
 800aade:	4313      	orrs	r3, r2
 800aae0:	62e3      	str	r3, [r4, #44]	; 0x2c
>>>>>>> render
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
<<<<<<< HEAD
 800ac0a:	bd38      	pop	{r3, r4, r5, pc}
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800ac0c:	2003      	movs	r0, #3
 800ac0e:	f7ff fed5 	bl	800a9bc <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800ac12:	2800      	cmp	r0, #0
 800ac14:	d03d      	beq.n	800ac92 <LL_USART_Init+0xf2>
        && (USART_InitStruct->BaudRate != 0U))
 800ac16:	686a      	ldr	r2, [r5, #4]
 800ac18:	b992      	cbnz	r2, 800ac40 <LL_USART_Init+0xa0>
  ErrorStatus status = ERROR;
 800ac1a:	2001      	movs	r0, #1
 800ac1c:	e7ef      	b.n	800abfe <LL_USART_Init+0x5e>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800ac1e:	200c      	movs	r0, #12
 800ac20:	f7ff fecc 	bl	800a9bc <LL_RCC_GetUSARTClockFreq>
 800ac24:	e7f5      	b.n	800ac12 <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800ac26:	2030      	movs	r0, #48	; 0x30
 800ac28:	f7ff fec8 	bl	800a9bc <LL_RCC_GetUSARTClockFreq>
 800ac2c:	e7f1      	b.n	800ac12 <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 800ac2e:	20c0      	movs	r0, #192	; 0xc0
 800ac30:	f7ff ff52 	bl	800aad8 <LL_RCC_GetUARTClockFreq>
 800ac34:	e7ed      	b.n	800ac12 <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800ac36:	f44f 7040 	mov.w	r0, #768	; 0x300
 800ac3a:	f7ff ff4d 	bl	800aad8 <LL_RCC_GetUARTClockFreq>
 800ac3e:	e7e8      	b.n	800ac12 <LL_USART_Init+0x72>
      LL_USART_SetBaudRate(USARTx,
 800ac40:	682b      	ldr	r3, [r5, #0]
 800ac42:	69e9      	ldr	r1, [r5, #28]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800ac44:	2b0b      	cmp	r3, #11
 800ac46:	d80f      	bhi.n	800ac68 <LL_USART_Init+0xc8>
  else if (BaudRate == 0U)
 800ac48:	b172      	cbz	r2, 800ac68 <LL_USART_Init+0xc8>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800ac4a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800ac4e:	d00d      	beq.n	800ac6c <LL_USART_Init+0xcc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	4918      	ldr	r1, [pc, #96]	; (800acb4 <LL_USART_Init+0x114>)
 800ac54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ac58:	fbb0 f3f3 	udiv	r3, r0, r3
 800ac5c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800ac60:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	60e3      	str	r3, [r4, #12]
      status = SUCCESS;
 800ac68:	2000      	movs	r0, #0
}
 800ac6a:	e7c8      	b.n	800abfe <LL_USART_Init+0x5e>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	4911      	ldr	r1, [pc, #68]	; (800acb4 <LL_USART_Init+0x114>)
 800ac70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ac74:	fbb0 f0f3 	udiv	r0, r0, r3
 800ac78:	0853      	lsrs	r3, r2, #1
 800ac7a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800ac7e:	fbb0 f3f2 	udiv	r3, r0, r2
    brrtemp = usartdiv & 0xFFF0U;
 800ac82:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800ac86:	401a      	ands	r2, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac88:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800ac8c:	4313      	orrs	r3, r2
    USARTx->BRR = brrtemp;
 800ac8e:	60e3      	str	r3, [r4, #12]
 800ac90:	e7ea      	b.n	800ac68 <LL_USART_Init+0xc8>
  ErrorStatus status = ERROR;
 800ac92:	2001      	movs	r0, #1
 800ac94:	e7b3      	b.n	800abfe <LL_USART_Init+0x5e>
 800ac96:	2001      	movs	r0, #1
 800ac98:	e7b7      	b.n	800ac0a <LL_USART_Init+0x6a>
 800ac9a:	bf00      	nop
 800ac9c:	efff69f3 	.word	0xefff69f3
 800aca0:	40013800 	.word	0x40013800
 800aca4:	40004400 	.word	0x40004400
 800aca8:	40004800 	.word	0x40004800
 800acac:	40004c00 	.word	0x40004c00
 800acb0:	40005000 	.word	0x40005000
 800acb4:	08013050 	.word	0x08013050

0800acb8 <USB_EnableGlobalInt>:
=======
 800aae2:	bd38      	pop	{r3, r4, r5, pc}
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800aae4:	2003      	movs	r0, #3
 800aae6:	f7ff fed5 	bl	800a894 <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800aaea:	2800      	cmp	r0, #0
 800aaec:	d03d      	beq.n	800ab6a <LL_USART_Init+0xf2>
        && (USART_InitStruct->BaudRate != 0U))
 800aaee:	686a      	ldr	r2, [r5, #4]
 800aaf0:	b992      	cbnz	r2, 800ab18 <LL_USART_Init+0xa0>
  ErrorStatus status = ERROR;
 800aaf2:	2001      	movs	r0, #1
 800aaf4:	e7ef      	b.n	800aad6 <LL_USART_Init+0x5e>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800aaf6:	200c      	movs	r0, #12
 800aaf8:	f7ff fecc 	bl	800a894 <LL_RCC_GetUSARTClockFreq>
 800aafc:	e7f5      	b.n	800aaea <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800aafe:	2030      	movs	r0, #48	; 0x30
 800ab00:	f7ff fec8 	bl	800a894 <LL_RCC_GetUSARTClockFreq>
 800ab04:	e7f1      	b.n	800aaea <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 800ab06:	20c0      	movs	r0, #192	; 0xc0
 800ab08:	f7ff ff52 	bl	800a9b0 <LL_RCC_GetUARTClockFreq>
 800ab0c:	e7ed      	b.n	800aaea <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800ab0e:	f44f 7040 	mov.w	r0, #768	; 0x300
 800ab12:	f7ff ff4d 	bl	800a9b0 <LL_RCC_GetUARTClockFreq>
 800ab16:	e7e8      	b.n	800aaea <LL_USART_Init+0x72>
      LL_USART_SetBaudRate(USARTx,
 800ab18:	682b      	ldr	r3, [r5, #0]
 800ab1a:	69e9      	ldr	r1, [r5, #28]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800ab1c:	2b0b      	cmp	r3, #11
 800ab1e:	d80f      	bhi.n	800ab40 <LL_USART_Init+0xc8>
  else if (BaudRate == 0U)
 800ab20:	b172      	cbz	r2, 800ab40 <LL_USART_Init+0xc8>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800ab22:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800ab26:	d00d      	beq.n	800ab44 <LL_USART_Init+0xcc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	4918      	ldr	r1, [pc, #96]	; (800ab8c <LL_USART_Init+0x114>)
 800ab2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ab30:	fbb0 f3f3 	udiv	r3, r0, r3
 800ab34:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800ab38:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	60e3      	str	r3, [r4, #12]
      status = SUCCESS;
 800ab40:	2000      	movs	r0, #0
}
 800ab42:	e7c8      	b.n	800aad6 <LL_USART_Init+0x5e>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	4911      	ldr	r1, [pc, #68]	; (800ab8c <LL_USART_Init+0x114>)
 800ab48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ab4c:	fbb0 f0f3 	udiv	r0, r0, r3
 800ab50:	0853      	lsrs	r3, r2, #1
 800ab52:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800ab56:	fbb0 f3f2 	udiv	r3, r0, r2
    brrtemp = usartdiv & 0xFFF0U;
 800ab5a:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800ab5e:	401a      	ands	r2, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab60:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800ab64:	4313      	orrs	r3, r2
    USARTx->BRR = brrtemp;
 800ab66:	60e3      	str	r3, [r4, #12]
 800ab68:	e7ea      	b.n	800ab40 <LL_USART_Init+0xc8>
  ErrorStatus status = ERROR;
 800ab6a:	2001      	movs	r0, #1
 800ab6c:	e7b3      	b.n	800aad6 <LL_USART_Init+0x5e>
 800ab6e:	2001      	movs	r0, #1
 800ab70:	e7b7      	b.n	800aae2 <LL_USART_Init+0x6a>
 800ab72:	bf00      	nop
 800ab74:	efff69f3 	.word	0xefff69f3
 800ab78:	40013800 	.word	0x40013800
 800ab7c:	40004400 	.word	0x40004400
 800ab80:	40004800 	.word	0x40004800
 800ab84:	40004c00 	.word	0x40004c00
 800ab88:	40005000 	.word	0x40005000
 800ab8c:	08012eb8 	.word	0x08012eb8

0800ab90 <USB_EnableGlobalInt>:
>>>>>>> render
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
<<<<<<< HEAD
 800acb8:	4603      	mov	r3, r0
=======
 800ab90:	4603      	mov	r3, r0
>>>>>>> render
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
<<<<<<< HEAD
 800acba:	2000      	movs	r0, #0
 800acbc:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
=======
 800ab92:	2000      	movs	r0, #0
 800ab94:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
>>>>>>> render
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
<<<<<<< HEAD
 800acc0:	f64b 7280 	movw	r2, #49024	; 0xbf80
 800acc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 800acc8:	4770      	bx	lr

0800acca <USB_DisableGlobalInt>:
=======
 800ab98:	f64b 7280 	movw	r2, #49024	; 0xbf80
 800ab9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 800aba0:	4770      	bx	lr

0800aba2 <USB_DisableGlobalInt>:
>>>>>>> render
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
<<<<<<< HEAD
 800acca:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800acce:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 800acd2:	045b      	lsls	r3, r3, #17
 800acd4:	0c5b      	lsrs	r3, r3, #17
 800acd6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800acda:	2000      	movs	r0, #0
 800acdc:	4770      	bx	lr

0800acde <USB_DevInit>:
=======
 800aba2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800aba6:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 800abaa:	045b      	lsls	r3, r3, #17
 800abac:	0c5b      	lsrs	r3, r3, #17
 800abae:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800abb2:	2000      	movs	r0, #0
 800abb4:	4770      	bx	lr

0800abb6 <USB_DevInit>:
>>>>>>> render
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
<<<<<<< HEAD
 800acde:	b084      	sub	sp, #16
 800ace0:	4684      	mov	ip, r0
 800ace2:	a801      	add	r0, sp, #4
 800ace4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
=======
 800abb6:	b084      	sub	sp, #16
 800abb8:	4684      	mov	ip, r0
 800abba:	a801      	add	r0, sp, #4
 800abbc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
>>>>>>> render
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
<<<<<<< HEAD
 800ace8:	2301      	movs	r3, #1
 800acea:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800acee:	2000      	movs	r0, #0
 800acf0:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800acf4:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800acf8:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50

  return HAL_OK;
}
 800acfc:	b004      	add	sp, #16
 800acfe:	4770      	bx	lr

0800ad00 <USB_ActivateEndpoint>:
=======
 800abc0:	2301      	movs	r3, #1
 800abc2:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800abc6:	2000      	movs	r0, #0
 800abc8:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800abcc:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800abd0:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50

  return HAL_OK;
}
 800abd4:	b004      	add	sp, #16
 800abd6:	4770      	bx	lr

0800abd8 <USB_ActivateEndpoint>:
>>>>>>> render
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< HEAD
 800ad00:	b510      	push	{r4, lr}
 800ad02:	4603      	mov	r3, r0
=======
 800abd8:	b510      	push	{r4, lr}
 800abda:	4603      	mov	r3, r0
>>>>>>> render
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
<<<<<<< HEAD
 800ad04:	780a      	ldrb	r2, [r1, #0]
 800ad06:	f830 c022 	ldrh.w	ip, [r0, r2, lsl #2]
 800ad0a:	fa1f fc8c 	uxth.w	ip, ip
 800ad0e:	f42c 4cec 	bic.w	ip, ip, #30208	; 0x7600
 800ad12:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 800ad16:	fa1f fc8c 	uxth.w	ip, ip

  /* initialize Endpoint */
  switch (ep->type)
 800ad1a:	78c8      	ldrb	r0, [r1, #3]
 800ad1c:	2803      	cmp	r0, #3
 800ad1e:	d862      	bhi.n	800ade6 <USB_ActivateEndpoint+0xe6>
 800ad20:	e8df f000 	tbb	[pc, r0]
 800ad24:	59025d56 	.word	0x59025d56
 800ad28:	2000      	movs	r0, #0
=======
 800abdc:	780a      	ldrb	r2, [r1, #0]
 800abde:	f830 c022 	ldrh.w	ip, [r0, r2, lsl #2]
 800abe2:	fa1f fc8c 	uxth.w	ip, ip
 800abe6:	f42c 4cec 	bic.w	ip, ip, #30208	; 0x7600
 800abea:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 800abee:	fa1f fc8c 	uxth.w	ip, ip

  /* initialize Endpoint */
  switch (ep->type)
 800abf2:	78c8      	ldrb	r0, [r1, #3]
 800abf4:	2803      	cmp	r0, #3
 800abf6:	d862      	bhi.n	800acbe <USB_ActivateEndpoint+0xe6>
 800abf8:	e8df f000 	tbb	[pc, r0]
 800abfc:	59025d56 	.word	0x59025d56
 800ac00:	2000      	movs	r0, #0
>>>>>>> render
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
<<<<<<< HEAD
 800ad2a:	f248 0e80 	movw	lr, #32896	; 0x8080
 800ad2e:	ea4c 0c0e 	orr.w	ip, ip, lr
 800ad32:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800ad36:	f891 c000 	ldrb.w	ip, [r1]
 800ad3a:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800ad3e:	b212      	sxth	r2, r2
 800ad40:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800ad44:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ad48:	ea4c 0202 	orr.w	r2, ip, r2
 800ad4c:	b292      	uxth	r2, r2
 800ad4e:	ea42 020e 	orr.w	r2, r2, lr
 800ad52:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  if (ep->doublebuffer == 0U)
 800ad56:	7b0a      	ldrb	r2, [r1, #12]
 800ad58:	2a00      	cmp	r2, #0
 800ad5a:	f040 80c2 	bne.w	800aee2 <USB_ActivateEndpoint+0x1e2>
  {
    if (ep->is_in != 0U)
 800ad5e:	784a      	ldrb	r2, [r1, #1]
 800ad60:	2a00      	cmp	r2, #0
 800ad62:	d051      	beq.n	800ae08 <USB_ActivateEndpoint+0x108>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ad64:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800ad68:	fa13 f282 	uxtah	r2, r3, r2
 800ad6c:	780c      	ldrb	r4, [r1, #0]
 800ad6e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ad72:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 800ad76:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ad7a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800ad7e:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ad82:	780c      	ldrb	r4, [r1, #0]
 800ad84:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800ad88:	f012 0f40 	tst.w	r2, #64	; 0x40
 800ad8c:	d00c      	beq.n	800ada8 <USB_ActivateEndpoint+0xa8>
 800ad8e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800ad92:	b292      	uxth	r2, r2
 800ad94:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800ad98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ad9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ada0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800ada4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800ada8:	78ca      	ldrb	r2, [r1, #3]
 800adaa:	2a01      	cmp	r2, #1
 800adac:	d01d      	beq.n	800adea <USB_ActivateEndpoint+0xea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800adae:	7809      	ldrb	r1, [r1, #0]
 800adb0:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800adb4:	b292      	uxth	r2, r2
 800adb6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800adba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800adbe:	f082 0220 	eor.w	r2, r2, #32
 800adc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800adc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800adca:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800adce:	e066      	b.n	800ae9e <USB_ActivateEndpoint+0x19e>
      wEpRegVal |= USB_EP_CONTROL;
 800add0:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
      break;
 800add4:	e7a9      	b.n	800ad2a <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_INTERRUPT;
 800add6:	f44c 6cc0 	orr.w	ip, ip, #1536	; 0x600
=======
 800ac02:	f248 0e80 	movw	lr, #32896	; 0x8080
 800ac06:	ea4c 0c0e 	orr.w	ip, ip, lr
 800ac0a:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800ac0e:	f891 c000 	ldrb.w	ip, [r1]
 800ac12:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800ac16:	b212      	sxth	r2, r2
 800ac18:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800ac1c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ac20:	ea4c 0202 	orr.w	r2, ip, r2
 800ac24:	b292      	uxth	r2, r2
 800ac26:	ea42 020e 	orr.w	r2, r2, lr
 800ac2a:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  if (ep->doublebuffer == 0U)
 800ac2e:	7b0a      	ldrb	r2, [r1, #12]
 800ac30:	2a00      	cmp	r2, #0
 800ac32:	f040 80c2 	bne.w	800adba <USB_ActivateEndpoint+0x1e2>
  {
    if (ep->is_in != 0U)
 800ac36:	784a      	ldrb	r2, [r1, #1]
 800ac38:	2a00      	cmp	r2, #0
 800ac3a:	d051      	beq.n	800ace0 <USB_ActivateEndpoint+0x108>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ac3c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800ac40:	fa13 f282 	uxtah	r2, r3, r2
 800ac44:	780c      	ldrb	r4, [r1, #0]
 800ac46:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ac4a:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 800ac4e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ac52:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800ac56:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac5a:	780c      	ldrb	r4, [r1, #0]
 800ac5c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800ac60:	f012 0f40 	tst.w	r2, #64	; 0x40
 800ac64:	d00c      	beq.n	800ac80 <USB_ActivateEndpoint+0xa8>
 800ac66:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800ac6a:	b292      	uxth	r2, r2
 800ac6c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800ac70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ac74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac78:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800ac7c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800ac80:	78ca      	ldrb	r2, [r1, #3]
 800ac82:	2a01      	cmp	r2, #1
 800ac84:	d01d      	beq.n	800acc2 <USB_ActivateEndpoint+0xea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ac86:	7809      	ldrb	r1, [r1, #0]
 800ac88:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800ac8c:	b292      	uxth	r2, r2
 800ac8e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800ac92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac96:	f082 0220 	eor.w	r2, r2, #32
 800ac9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aca2:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800aca6:	e066      	b.n	800ad76 <USB_ActivateEndpoint+0x19e>
      wEpRegVal |= USB_EP_CONTROL;
 800aca8:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
      break;
 800acac:	e7a9      	b.n	800ac02 <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_INTERRUPT;
 800acae:	f44c 6cc0 	orr.w	ip, ip, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800acb2:	2000      	movs	r0, #0
      break;
 800acb4:	e7a5      	b.n	800ac02 <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800acb6:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
>>>>>>> render
  HAL_StatusTypeDef ret = HAL_OK;
 800acba:	2000      	movs	r0, #0
      break;
<<<<<<< HEAD
 800addc:	e7a5      	b.n	800ad2a <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800adde:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 800ade2:	2000      	movs	r0, #0
      break;
 800ade4:	e7a1      	b.n	800ad2a <USB_ActivateEndpoint+0x2a>
      ret = HAL_ERROR;
 800ade6:	2001      	movs	r0, #1
 800ade8:	e79f      	b.n	800ad2a <USB_ActivateEndpoint+0x2a>
=======
 800acbc:	e7a1      	b.n	800ac02 <USB_ActivateEndpoint+0x2a>
      ret = HAL_ERROR;
 800acbe:	2001      	movs	r0, #1
 800acc0:	e79f      	b.n	800ac02 <USB_ActivateEndpoint+0x2a>
>>>>>>> render
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
<<<<<<< HEAD
 800adea:	7809      	ldrb	r1, [r1, #0]
 800adec:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800adf0:	b292      	uxth	r2, r2
 800adf2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800adf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800adfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800adfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ae02:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800ae06:	e04a      	b.n	800ae9e <USB_ActivateEndpoint+0x19e>
=======
 800acc2:	7809      	ldrb	r1, [r1, #0]
 800acc4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800acc8:	b292      	uxth	r2, r2
 800acca:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800acce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800acd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800acda:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800acde:	e04a      	b.n	800ad76 <USB_ActivateEndpoint+0x19e>
>>>>>>> render
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
<<<<<<< HEAD
 800ae08:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800ae0c:	fa13 f282 	uxtah	r2, r3, r2
 800ae10:	780c      	ldrb	r4, [r1, #0]
 800ae12:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ae16:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 800ae1a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ae1e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800ae22:	f8a2 c404 	strh.w	ip, [r2, #1028]	; 0x404

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ae26:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800ae2a:	fa13 f282 	uxtah	r2, r3, r2
 800ae2e:	780c      	ldrb	r4, [r1, #0]
 800ae30:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ae34:	690c      	ldr	r4, [r1, #16]
 800ae36:	2c3e      	cmp	r4, #62	; 0x3e
 800ae38:	d932      	bls.n	800aea0 <USB_ActivateEndpoint+0x1a0>
 800ae3a:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 800ae3e:	f014 0f1f 	tst.w	r4, #31
 800ae42:	d101      	bne.n	800ae48 <USB_ActivateEndpoint+0x148>
 800ae44:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800ae48:	ea6f 6ccc 	mvn.w	ip, ip, lsl #27
 800ae4c:	ea6f 4c5c 	mvn.w	ip, ip, lsr #17
 800ae50:	fa1f fc8c 	uxth.w	ip, ip
 800ae54:	f8a2 c406 	strh.w	ip, [r2, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ae58:	780c      	ldrb	r4, [r1, #0]
 800ae5a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800ae5e:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800ae62:	d00c      	beq.n	800ae7e <USB_ActivateEndpoint+0x17e>
 800ae64:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800ae68:	b292      	uxth	r2, r2
 800ae6a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800ae6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ae72:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800ae76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ae7a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ae7e:	7809      	ldrb	r1, [r1, #0]
 800ae80:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800ae84:	b292      	uxth	r2, r2
 800ae86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ae8a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ae8e:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800ae92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ae96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ae9a:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
=======
 800ace0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800ace4:	fa13 f282 	uxtah	r2, r3, r2
 800ace8:	780c      	ldrb	r4, [r1, #0]
 800acea:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800acee:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 800acf2:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800acf6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800acfa:	f8a2 c404 	strh.w	ip, [r2, #1028]	; 0x404

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800acfe:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800ad02:	fa13 f282 	uxtah	r2, r3, r2
 800ad06:	780c      	ldrb	r4, [r1, #0]
 800ad08:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ad0c:	690c      	ldr	r4, [r1, #16]
 800ad0e:	2c3e      	cmp	r4, #62	; 0x3e
 800ad10:	d932      	bls.n	800ad78 <USB_ActivateEndpoint+0x1a0>
 800ad12:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 800ad16:	f014 0f1f 	tst.w	r4, #31
 800ad1a:	d101      	bne.n	800ad20 <USB_ActivateEndpoint+0x148>
 800ad1c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800ad20:	ea6f 6ccc 	mvn.w	ip, ip, lsl #27
 800ad24:	ea6f 4c5c 	mvn.w	ip, ip, lsr #17
 800ad28:	fa1f fc8c 	uxth.w	ip, ip
 800ad2c:	f8a2 c406 	strh.w	ip, [r2, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ad30:	780c      	ldrb	r4, [r1, #0]
 800ad32:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800ad36:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800ad3a:	d00c      	beq.n	800ad56 <USB_ActivateEndpoint+0x17e>
 800ad3c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800ad40:	b292      	uxth	r2, r2
 800ad42:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800ad46:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ad4a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800ad4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ad52:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ad56:	7809      	ldrb	r1, [r1, #0]
 800ad58:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800ad5c:	b292      	uxth	r2, r2
 800ad5e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ad62:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ad66:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800ad6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ad72:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
>>>>>>> render
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
<<<<<<< HEAD
 800ae9e:	bd10      	pop	{r4, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800aea0:	b98c      	cbnz	r4, 800aec6 <USB_ActivateEndpoint+0x1c6>
 800aea2:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 800aea6:	b2a4      	uxth	r4, r4
 800aea8:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800aeac:	b2a4      	uxth	r4, r4
 800aeae:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 800aeb2:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 800aeb6:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800aeba:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800aebe:	b2a4      	uxth	r4, r4
 800aec0:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 800aec4:	e7c8      	b.n	800ae58 <USB_ActivateEndpoint+0x158>
 800aec6:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 800aeca:	f014 0f01 	tst.w	r4, #1
 800aece:	d001      	beq.n	800aed4 <USB_ActivateEndpoint+0x1d4>
 800aed0:	f10c 0c01 	add.w	ip, ip, #1
 800aed4:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 800aed8:	fa1f fc8c 	uxth.w	ip, ip
 800aedc:	f8a2 c406 	strh.w	ip, [r2, #1030]	; 0x406
 800aee0:	e7ba      	b.n	800ae58 <USB_ActivateEndpoint+0x158>
    if (ep->type == EP_TYPE_BULK)
 800aee2:	78ca      	ldrb	r2, [r1, #3]
 800aee4:	2a02      	cmp	r2, #2
 800aee6:	d072      	beq.n	800afce <USB_ActivateEndpoint+0x2ce>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800aee8:	780c      	ldrb	r4, [r1, #0]
 800aeea:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800aeee:	b292      	uxth	r2, r2
 800aef0:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 800aef4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800aef8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aefc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800af00:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800af04:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800af08:	fa13 f282 	uxtah	r2, r3, r2
 800af0c:	f891 c000 	ldrb.w	ip, [r1]
 800af10:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 800af14:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800af18:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800af1c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800af20:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
 800af24:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800af28:	fa13 f282 	uxtah	r2, r3, r2
 800af2c:	f891 c000 	ldrb.w	ip, [r1]
 800af30:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 800af34:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 800af38:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800af3c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800af40:	f8a2 c404 	strh.w	ip, [r2, #1028]	; 0x404
    if (ep->is_in == 0U)
 800af44:	784a      	ldrb	r2, [r1, #1]
 800af46:	2a00      	cmp	r2, #0
 800af48:	d150      	bne.n	800afec <USB_ActivateEndpoint+0x2ec>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af4a:	780c      	ldrb	r4, [r1, #0]
 800af4c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800af50:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800af54:	d00c      	beq.n	800af70 <USB_ActivateEndpoint+0x270>
 800af56:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800af5a:	b292      	uxth	r2, r2
 800af5c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800af60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800af64:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800af68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800af6c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af70:	780c      	ldrb	r4, [r1, #0]
 800af72:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800af76:	f012 0f40 	tst.w	r2, #64	; 0x40
 800af7a:	d00c      	beq.n	800af96 <USB_ActivateEndpoint+0x296>
 800af7c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800af80:	b292      	uxth	r2, r2
 800af82:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800af86:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800af8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af8e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800af92:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800af96:	f891 c000 	ldrb.w	ip, [r1]
 800af9a:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800af9e:	b292      	uxth	r2, r2
 800afa0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800afa4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800afa8:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800afac:	f248 0480 	movw	r4, #32896	; 0x8080
 800afb0:	4322      	orrs	r2, r4
 800afb2:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800afb6:	7809      	ldrb	r1, [r1, #0]
 800afb8:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800afbc:	b292      	uxth	r2, r2
 800afbe:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800afc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afc6:	4322      	orrs	r2, r4
 800afc8:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800afcc:	e767      	b.n	800ae9e <USB_ActivateEndpoint+0x19e>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800afce:	780c      	ldrb	r4, [r1, #0]
 800afd0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800afd4:	b292      	uxth	r2, r2
 800afd6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800afda:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800afde:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800afe2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800afe6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 800afea:	e78b      	b.n	800af04 <USB_ActivateEndpoint+0x204>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800afec:	780c      	ldrb	r4, [r1, #0]
 800afee:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800aff2:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800aff6:	d00c      	beq.n	800b012 <USB_ActivateEndpoint+0x312>
 800aff8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800affc:	b292      	uxth	r2, r2
 800affe:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b002:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b006:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800b00a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b00e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b012:	780c      	ldrb	r4, [r1, #0]
 800b014:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800b018:	f012 0f40 	tst.w	r2, #64	; 0x40
 800b01c:	d00c      	beq.n	800b038 <USB_ActivateEndpoint+0x338>
 800b01e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800b022:	b292      	uxth	r2, r2
 800b024:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b028:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b02c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b030:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800b034:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800b038:	78ca      	ldrb	r2, [r1, #3]
 800b03a:	2a01      	cmp	r2, #1
 800b03c:	d01e      	beq.n	800b07c <USB_ActivateEndpoint+0x37c>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b03e:	780c      	ldrb	r4, [r1, #0]
 800b040:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800b044:	b292      	uxth	r2, r2
 800b046:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b04a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b04e:	f082 0220 	eor.w	r2, r2, #32
 800b052:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b056:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b05a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b05e:	7809      	ldrb	r1, [r1, #0]
 800b060:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800b064:	b292      	uxth	r2, r2
 800b066:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b06a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b06e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b072:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b076:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800b07a:	e710      	b.n	800ae9e <USB_ActivateEndpoint+0x19e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b07c:	780c      	ldrb	r4, [r1, #0]
 800b07e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800b082:	b292      	uxth	r2, r2
 800b084:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b08c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b090:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b094:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 800b098:	e7e1      	b.n	800b05e <USB_ActivateEndpoint+0x35e>

0800b09a <USB_DeactivateEndpoint>:
=======
 800ad76:	bd10      	pop	{r4, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ad78:	b98c      	cbnz	r4, 800ad9e <USB_ActivateEndpoint+0x1c6>
 800ad7a:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 800ad7e:	b2a4      	uxth	r4, r4
 800ad80:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800ad84:	b2a4      	uxth	r4, r4
 800ad86:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 800ad8a:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 800ad8e:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800ad92:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800ad96:	b2a4      	uxth	r4, r4
 800ad98:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 800ad9c:	e7c8      	b.n	800ad30 <USB_ActivateEndpoint+0x158>
 800ad9e:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 800ada2:	f014 0f01 	tst.w	r4, #1
 800ada6:	d001      	beq.n	800adac <USB_ActivateEndpoint+0x1d4>
 800ada8:	f10c 0c01 	add.w	ip, ip, #1
 800adac:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 800adb0:	fa1f fc8c 	uxth.w	ip, ip
 800adb4:	f8a2 c406 	strh.w	ip, [r2, #1030]	; 0x406
 800adb8:	e7ba      	b.n	800ad30 <USB_ActivateEndpoint+0x158>
    if (ep->type == EP_TYPE_BULK)
 800adba:	78ca      	ldrb	r2, [r1, #3]
 800adbc:	2a02      	cmp	r2, #2
 800adbe:	d072      	beq.n	800aea6 <USB_ActivateEndpoint+0x2ce>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800adc0:	780c      	ldrb	r4, [r1, #0]
 800adc2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800adc6:	b292      	uxth	r2, r2
 800adc8:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 800adcc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800add0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800add4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800add8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800addc:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800ade0:	fa13 f282 	uxtah	r2, r3, r2
 800ade4:	f891 c000 	ldrb.w	ip, [r1]
 800ade8:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 800adec:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800adf0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800adf4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800adf8:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
 800adfc:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800ae00:	fa13 f282 	uxtah	r2, r3, r2
 800ae04:	f891 c000 	ldrb.w	ip, [r1]
 800ae08:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 800ae0c:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 800ae10:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ae14:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800ae18:	f8a2 c404 	strh.w	ip, [r2, #1028]	; 0x404
    if (ep->is_in == 0U)
 800ae1c:	784a      	ldrb	r2, [r1, #1]
 800ae1e:	2a00      	cmp	r2, #0
 800ae20:	d150      	bne.n	800aec4 <USB_ActivateEndpoint+0x2ec>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ae22:	780c      	ldrb	r4, [r1, #0]
 800ae24:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800ae28:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800ae2c:	d00c      	beq.n	800ae48 <USB_ActivateEndpoint+0x270>
 800ae2e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800ae32:	b292      	uxth	r2, r2
 800ae34:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800ae38:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ae3c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800ae40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ae44:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ae48:	780c      	ldrb	r4, [r1, #0]
 800ae4a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800ae4e:	f012 0f40 	tst.w	r2, #64	; 0x40
 800ae52:	d00c      	beq.n	800ae6e <USB_ActivateEndpoint+0x296>
 800ae54:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800ae58:	b292      	uxth	r2, r2
 800ae5a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800ae5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ae62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ae66:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800ae6a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ae6e:	f891 c000 	ldrb.w	ip, [r1]
 800ae72:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800ae76:	b292      	uxth	r2, r2
 800ae78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ae7c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ae80:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800ae84:	f248 0480 	movw	r4, #32896	; 0x8080
 800ae88:	4322      	orrs	r2, r4
 800ae8a:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ae8e:	7809      	ldrb	r1, [r1, #0]
 800ae90:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800ae94:	b292      	uxth	r2, r2
 800ae96:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800ae9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae9e:	4322      	orrs	r2, r4
 800aea0:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800aea4:	e767      	b.n	800ad76 <USB_ActivateEndpoint+0x19e>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800aea6:	780c      	ldrb	r4, [r1, #0]
 800aea8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800aeac:	b292      	uxth	r2, r2
 800aeae:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800aeb2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800aeb6:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800aeba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aebe:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 800aec2:	e78b      	b.n	800addc <USB_ActivateEndpoint+0x204>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aec4:	780c      	ldrb	r4, [r1, #0]
 800aec6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800aeca:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800aece:	d00c      	beq.n	800aeea <USB_ActivateEndpoint+0x312>
 800aed0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800aed4:	b292      	uxth	r2, r2
 800aed6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800aeda:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800aede:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800aee2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aee6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aeea:	780c      	ldrb	r4, [r1, #0]
 800aeec:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800aef0:	f012 0f40 	tst.w	r2, #64	; 0x40
 800aef4:	d00c      	beq.n	800af10 <USB_ActivateEndpoint+0x338>
 800aef6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800aefa:	b292      	uxth	r2, r2
 800aefc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800af00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800af04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af08:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800af0c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800af10:	78ca      	ldrb	r2, [r1, #3]
 800af12:	2a01      	cmp	r2, #1
 800af14:	d01e      	beq.n	800af54 <USB_ActivateEndpoint+0x37c>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800af16:	780c      	ldrb	r4, [r1, #0]
 800af18:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800af1c:	b292      	uxth	r2, r2
 800af1e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800af22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af26:	f082 0220 	eor.w	r2, r2, #32
 800af2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800af32:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800af36:	7809      	ldrb	r1, [r1, #0]
 800af38:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800af3c:	b292      	uxth	r2, r2
 800af3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800af42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800af46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800af4e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800af52:	e710      	b.n	800ad76 <USB_ActivateEndpoint+0x19e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800af54:	780c      	ldrb	r4, [r1, #0]
 800af56:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800af5a:	b292      	uxth	r2, r2
 800af5c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800af60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800af6c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 800af70:	e7e1      	b.n	800af36 <USB_ActivateEndpoint+0x35e>

0800af72 <USB_DeactivateEndpoint>:
>>>>>>> render
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
<<<<<<< HEAD
 800b09a:	7b0b      	ldrb	r3, [r1, #12]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d146      	bne.n	800b12e <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 800b0a0:	784b      	ldrb	r3, [r1, #1]
 800b0a2:	b313      	cbz	r3, 800b0ea <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b0a4:	780a      	ldrb	r2, [r1, #0]
 800b0a6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b0aa:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b0ae:	d00c      	beq.n	800b0ca <USB_DeactivateEndpoint+0x30>
 800b0b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b0c6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b0ca:	780a      	ldrb	r2, [r1, #0]
 800b0cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0e2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
=======
 800af72:	7b0b      	ldrb	r3, [r1, #12]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d146      	bne.n	800b006 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 800af78:	784b      	ldrb	r3, [r1, #1]
 800af7a:	b313      	cbz	r3, 800afc2 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af7c:	780a      	ldrb	r2, [r1, #0]
 800af7e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800af82:	f013 0f40 	tst.w	r3, #64	; 0x40
 800af86:	d00c      	beq.n	800afa2 <USB_DeactivateEndpoint+0x30>
 800af88:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800af9e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800afa2:	780a      	ldrb	r2, [r1, #0]
 800afa4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afba:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
>>>>>>> render
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
<<<<<<< HEAD
 800b0e6:	2000      	movs	r0, #0
 800b0e8:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b0ea:	780a      	ldrb	r2, [r1, #0]
 800b0ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b0f0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800b0f4:	d00c      	beq.n	800b110 <USB_DeactivateEndpoint+0x76>
 800b0f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b104:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b10c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b110:	780a      	ldrb	r2, [r1, #0]
 800b112:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b116:	b29b      	uxth	r3, r3
 800b118:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b11c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b128:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800b12c:	e7db      	b.n	800b0e6 <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 800b12e:	784b      	ldrb	r3, [r1, #1]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d14e      	bne.n	800b1d2 <USB_DeactivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b134:	780a      	ldrb	r2, [r1, #0]
 800b136:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b13a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800b13e:	d00c      	beq.n	800b15a <USB_DeactivateEndpoint+0xc0>
 800b140:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b144:	b29b      	uxth	r3, r3
 800b146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b14a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b14e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b156:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b15a:	780a      	ldrb	r2, [r1, #0]
 800b15c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b160:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b164:	d00c      	beq.n	800b180 <USB_DeactivateEndpoint+0xe6>
 800b166:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b178:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b17c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800b180:	780a      	ldrb	r2, [r1, #0]
 800b182:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b186:	b29b      	uxth	r3, r3
 800b188:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b18c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b194:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b198:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b19c:	780b      	ldrb	r3, [r1, #0]
 800b19e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800b1a2:	b292      	uxth	r2, r2
 800b1a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b1a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b1ac:	f248 0c80 	movw	ip, #32896	; 0x8080
 800b1b0:	ea42 020c 	orr.w	r2, r2, ip
 800b1b4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b1b8:	780a      	ldrb	r2, [r1, #0]
 800b1ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1c8:	ea43 030c 	orr.w	r3, r3, ip
 800b1cc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800b1d0:	e789      	b.n	800b0e6 <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b1d2:	780a      	ldrb	r2, [r1, #0]
 800b1d4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b1d8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800b1dc:	d00c      	beq.n	800b1f8 <USB_DeactivateEndpoint+0x15e>
 800b1de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b1f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1f4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b1f8:	780a      	ldrb	r2, [r1, #0]
 800b1fa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b1fe:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b202:	d00c      	beq.n	800b21e <USB_DeactivateEndpoint+0x184>
 800b204:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b208:	b29b      	uxth	r3, r3
 800b20a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b20e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b216:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b21a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800b21e:	780a      	ldrb	r2, [r1, #0]
 800b220:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b224:	b29b      	uxth	r3, r3
 800b226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b22a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b22e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b236:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b23a:	780b      	ldrb	r3, [r1, #0]
 800b23c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800b240:	b292      	uxth	r2, r2
 800b242:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b24a:	f248 0c80 	movw	ip, #32896	; 0x8080
 800b24e:	ea42 020c 	orr.w	r2, r2, ip
 800b252:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b256:	780a      	ldrb	r2, [r1, #0]
 800b258:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b266:	ea43 030c 	orr.w	r3, r3, ip
 800b26a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800b26e:	e73a      	b.n	800b0e6 <USB_DeactivateEndpoint+0x4c>

0800b270 <USB_EPSetStall>:
=======
 800afbe:	2000      	movs	r0, #0
 800afc0:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800afc2:	780a      	ldrb	r2, [r1, #0]
 800afc4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800afc8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800afcc:	d00c      	beq.n	800afe8 <USB_DeactivateEndpoint+0x76>
 800afce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800afe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afe4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800afe8:	780a      	ldrb	r2, [r1, #0]
 800afea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800afee:	b29b      	uxth	r3, r3
 800aff0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800affc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b000:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800b004:	e7db      	b.n	800afbe <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 800b006:	784b      	ldrb	r3, [r1, #1]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d14e      	bne.n	800b0aa <USB_DeactivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b00c:	780a      	ldrb	r2, [r1, #0]
 800b00e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b012:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800b016:	d00c      	beq.n	800b032 <USB_DeactivateEndpoint+0xc0>
 800b018:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b026:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b02a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b02e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b032:	780a      	ldrb	r2, [r1, #0]
 800b034:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b038:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b03c:	d00c      	beq.n	800b058 <USB_DeactivateEndpoint+0xe6>
 800b03e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b042:	b29b      	uxth	r3, r3
 800b044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b04c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b050:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b054:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800b058:	780a      	ldrb	r2, [r1, #0]
 800b05a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b05e:	b29b      	uxth	r3, r3
 800b060:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b06c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b070:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b074:	780b      	ldrb	r3, [r1, #0]
 800b076:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800b07a:	b292      	uxth	r2, r2
 800b07c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b080:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b084:	f248 0c80 	movw	ip, #32896	; 0x8080
 800b088:	ea42 020c 	orr.w	r2, r2, ip
 800b08c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b090:	780a      	ldrb	r2, [r1, #0]
 800b092:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b096:	b29b      	uxth	r3, r3
 800b098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b09c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0a0:	ea43 030c 	orr.w	r3, r3, ip
 800b0a4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800b0a8:	e789      	b.n	800afbe <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b0aa:	780a      	ldrb	r2, [r1, #0]
 800b0ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b0b0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800b0b4:	d00c      	beq.n	800b0d0 <USB_DeactivateEndpoint+0x15e>
 800b0b6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b0c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0cc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b0d0:	780a      	ldrb	r2, [r1, #0]
 800b0d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b0d6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b0da:	d00c      	beq.n	800b0f6 <USB_DeactivateEndpoint+0x184>
 800b0dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b0f2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800b0f6:	780a      	ldrb	r2, [r1, #0]
 800b0f8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b106:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b10a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b10e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b112:	780b      	ldrb	r3, [r1, #0]
 800b114:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800b118:	b292      	uxth	r2, r2
 800b11a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b11e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b122:	f248 0c80 	movw	ip, #32896	; 0x8080
 800b126:	ea42 020c 	orr.w	r2, r2, ip
 800b12a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b12e:	780a      	ldrb	r2, [r1, #0]
 800b130:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b134:	b29b      	uxth	r3, r3
 800b136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b13a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b13e:	ea43 030c 	orr.w	r3, r3, ip
 800b142:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800b146:	e73a      	b.n	800afbe <USB_DeactivateEndpoint+0x4c>

0800b148 <USB_EPSetStall>:
>>>>>>> render
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
<<<<<<< HEAD
 800b270:	784b      	ldrb	r3, [r1, #1]
 800b272:	b18b      	cbz	r3, 800b298 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b274:	780a      	ldrb	r2, [r1, #0]
 800b276:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b280:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b284:	f083 0310 	eor.w	r3, r3, #16
 800b288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b28c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b290:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
=======
 800b148:	784b      	ldrb	r3, [r1, #1]
 800b14a:	b18b      	cbz	r3, 800b170 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b14c:	780a      	ldrb	r2, [r1, #0]
 800b14e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b152:	b29b      	uxth	r3, r3
 800b154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b15c:	f083 0310 	eor.w	r3, r3, #16
 800b160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b168:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
>>>>>>> render
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
<<<<<<< HEAD
 800b294:	2000      	movs	r0, #0
 800b296:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b298:	780a      	ldrb	r2, [r1, #0]
 800b29a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b2a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b2ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2b4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800b2b8:	e7ec      	b.n	800b294 <USB_EPSetStall+0x24>

0800b2ba <USB_EPClearStall>:
=======
 800b16c:	2000      	movs	r0, #0
 800b16e:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b170:	780a      	ldrb	r2, [r1, #0]
 800b172:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b176:	b29b      	uxth	r3, r3
 800b178:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b17c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b180:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b18c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800b190:	e7ec      	b.n	800b16c <USB_EPSetStall+0x24>

0800b192 <USB_EPClearStall>:
>>>>>>> render
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
<<<<<<< HEAD
 800b2ba:	7b0b      	ldrb	r3, [r1, #12]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d14b      	bne.n	800b358 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 800b2c0:	784b      	ldrb	r3, [r1, #1]
 800b2c2:	b333      	cbz	r3, 800b312 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b2c4:	780a      	ldrb	r2, [r1, #0]
 800b2c6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b2ca:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b2ce:	d00c      	beq.n	800b2ea <USB_EPClearStall+0x30>
 800b2d0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b2e6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800b2ea:	78cb      	ldrb	r3, [r1, #3]
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d033      	beq.n	800b358 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b2f0:	780a      	ldrb	r2, [r1, #0]
 800b2f2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b300:	f083 0320 	eor.w	r3, r3, #32
 800b304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b30c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800b310:	e022      	b.n	800b358 <USB_EPClearStall+0x9e>
=======
 800b192:	7b0b      	ldrb	r3, [r1, #12]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d14b      	bne.n	800b230 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 800b198:	784b      	ldrb	r3, [r1, #1]
 800b19a:	b333      	cbz	r3, 800b1ea <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b19c:	780a      	ldrb	r2, [r1, #0]
 800b19e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b1a2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b1a6:	d00c      	beq.n	800b1c2 <USB_EPClearStall+0x30>
 800b1a8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b1be:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800b1c2:	78cb      	ldrb	r3, [r1, #3]
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d033      	beq.n	800b230 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b1c8:	780a      	ldrb	r2, [r1, #0]
 800b1ca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1d8:	f083 0320 	eor.w	r3, r3, #32
 800b1dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1e4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800b1e8:	e022      	b.n	800b230 <USB_EPClearStall+0x9e>
>>>>>>> render
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
<<<<<<< HEAD
 800b312:	780a      	ldrb	r2, [r1, #0]
 800b314:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b318:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800b31c:	d00c      	beq.n	800b338 <USB_EPClearStall+0x7e>
 800b31e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b322:	b29b      	uxth	r3, r3
 800b324:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b32c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b334:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b338:	780a      	ldrb	r2, [r1, #0]
 800b33a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b33e:	b29b      	uxth	r3, r3
 800b340:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b348:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800b34c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b354:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
=======
 800b1ea:	780a      	ldrb	r2, [r1, #0]
 800b1ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b1f0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800b1f4:	d00c      	beq.n	800b210 <USB_EPClearStall+0x7e>
 800b1f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b204:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b20c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b210:	780a      	ldrb	r2, [r1, #0]
 800b212:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b216:	b29b      	uxth	r3, r3
 800b218:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b21c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b220:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800b224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b22c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
>>>>>>> render
    }
  }

  return HAL_OK;
}
<<<<<<< HEAD
 800b358:	2000      	movs	r0, #0
 800b35a:	4770      	bx	lr

0800b35c <USB_SetDevAddress>:
=======
 800b230:	2000      	movs	r0, #0
 800b232:	4770      	bx	lr

0800b234 <USB_SetDevAddress>:
>>>>>>> render
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
<<<<<<< HEAD
 800b35c:	b911      	cbnz	r1, 800b364 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b35e:	2380      	movs	r3, #128	; 0x80
 800b360:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
=======
 800b234:	b911      	cbnz	r1, 800b23c <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b236:	2380      	movs	r3, #128	; 0x80
 800b238:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
>>>>>>> render
  }

  return HAL_OK;
}
<<<<<<< HEAD
 800b364:	2000      	movs	r0, #0
 800b366:	4770      	bx	lr

0800b368 <USB_DevConnect>:
=======
 800b23c:	2000      	movs	r0, #0
 800b23e:	4770      	bx	lr

0800b240 <USB_DevConnect>:
>>>>>>> render
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
<<<<<<< HEAD
 800b368:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 800b36c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b374:	b29b      	uxth	r3, r3
 800b376:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 800b37a:	2000      	movs	r0, #0
 800b37c:	4770      	bx	lr

0800b37e <USB_ReadInterrupts>:
=======
 800b240:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 800b244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 800b252:	2000      	movs	r0, #0
 800b254:	4770      	bx	lr

0800b256 <USB_ReadInterrupts>:
>>>>>>> render
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
<<<<<<< HEAD
 800b37e:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800b382:	b280      	uxth	r0, r0
 800b384:	4770      	bx	lr

0800b386 <USB_WritePMA>:
=======
 800b256:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800b25a:	b280      	uxth	r0, r0
 800b25c:	4770      	bx	lr

0800b25e <USB_WritePMA>:
>>>>>>> render
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
<<<<<<< HEAD
 800b386:	b410      	push	{r4}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b388:	1c5c      	adds	r4, r3, #1
 800b38a:	0864      	lsrs	r4, r4, #1
=======
 800b25e:	b410      	push	{r4}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b260:	1c5c      	adds	r4, r3, #1
 800b262:	0864      	lsrs	r4, r4, #1
>>>>>>> render
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
<<<<<<< HEAD
 800b38c:	4402      	add	r2, r0
 800b38e:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800b392:	e007      	b.n	800b3a4 <USB_WritePMA+0x1e>
  {
    temp1 = *pBuf;
 800b394:	780b      	ldrb	r3, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b396:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 800b398:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800b39c:	f822 3b02 	strh.w	r3, [r2], #2
=======
 800b264:	4402      	add	r2, r0
 800b266:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800b26a:	e007      	b.n	800b27c <USB_WritePMA+0x1e>
  {
    temp1 = *pBuf;
 800b26c:	780b      	ldrb	r3, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b26e:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 800b270:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800b274:	f822 3b02 	strh.w	r3, [r2], #2
>>>>>>> render

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
<<<<<<< HEAD
 800b3a0:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 800b3a2:	3c01      	subs	r4, #1
 800b3a4:	2c00      	cmp	r4, #0
 800b3a6:	d1f5      	bne.n	800b394 <USB_WritePMA+0xe>
  }
}
 800b3a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3ac:	4770      	bx	lr

0800b3ae <USB_EPStartXfer>:
{
 800b3ae:	b570      	push	{r4, r5, r6, lr}
 800b3b0:	4605      	mov	r5, r0
 800b3b2:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 800b3b4:	784a      	ldrb	r2, [r1, #1]
 800b3b6:	2a01      	cmp	r2, #1
 800b3b8:	d032      	beq.n	800b420 <USB_EPStartXfer+0x72>
    if (ep->doublebuffer == 0U)
 800b3ba:	7b0b      	ldrb	r3, [r1, #12]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	f040 8283 	bne.w	800b8c8 <USB_EPStartXfer+0x51a>
      if (ep->xfer_len > ep->maxpacket)
 800b3c2:	698b      	ldr	r3, [r1, #24]
 800b3c4:	690a      	ldr	r2, [r1, #16]
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	f240 825d 	bls.w	800b886 <USB_EPStartXfer+0x4d8>
        ep->xfer_len -= len;
 800b3cc:	1a9b      	subs	r3, r3, r2
 800b3ce:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b3d0:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800b3d4:	fa15 f383 	uxtah	r3, r5, r3
 800b3d8:	7821      	ldrb	r1, [r4, #0]
 800b3da:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800b3de:	2a3e      	cmp	r2, #62	; 0x3e
 800b3e0:	f240 8255 	bls.w	800b88e <USB_EPStartXfer+0x4e0>
 800b3e4:	0951      	lsrs	r1, r2, #5
 800b3e6:	f012 0f1f 	tst.w	r2, #31
 800b3ea:	d100      	bne.n	800b3ee <USB_EPStartXfer+0x40>
 800b3ec:	3901      	subs	r1, #1
 800b3ee:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800b3f2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800b3f6:	b289      	uxth	r1, r1
 800b3f8:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b3fc:	7822      	ldrb	r2, [r4, #0]
 800b3fe:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800b402:	b29b      	uxth	r3, r3
 800b404:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b40c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800b410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b418:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800b41c:	2000      	movs	r0, #0
}
 800b41e:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 800b420:	698e      	ldr	r6, [r1, #24]
 800b422:	6909      	ldr	r1, [r1, #16]
 800b424:	428e      	cmp	r6, r1
 800b426:	d900      	bls.n	800b42a <USB_EPStartXfer+0x7c>
      len = ep->maxpacket;
 800b428:	460e      	mov	r6, r1
    if (ep->doublebuffer == 0U)
 800b42a:	7b23      	ldrb	r3, [r4, #12]
 800b42c:	b32b      	cbz	r3, 800b47a <USB_EPStartXfer+0xcc>
      if (ep->type == EP_TYPE_BULK)
 800b42e:	78e3      	ldrb	r3, [r4, #3]
 800b430:	2b02      	cmp	r3, #2
 800b432:	d044      	beq.n	800b4be <USB_EPStartXfer+0x110>
        ep->xfer_len_db -= len;
 800b434:	6a23      	ldr	r3, [r4, #32]
 800b436:	1b9b      	subs	r3, r3, r6
 800b438:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b43a:	7823      	ldrb	r3, [r4, #0]
 800b43c:	f835 1023 	ldrh.w	r1, [r5, r3, lsl #2]
 800b440:	f011 0f40 	tst.w	r1, #64	; 0x40
 800b444:	f000 81dc 	beq.w	800b800 <USB_EPStartXfer+0x452>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b448:	2a00      	cmp	r2, #0
 800b44a:	f040 81c9 	bne.w	800b7e0 <USB_EPStartXfer+0x432>
 800b44e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b452:	fa15 f282 	uxtah	r2, r5, r2
 800b456:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b45a:	2e3e      	cmp	r6, #62	; 0x3e
 800b45c:	f240 81a3 	bls.w	800b7a6 <USB_EPStartXfer+0x3f8>
 800b460:	0972      	lsrs	r2, r6, #5
 800b462:	f016 0f1f 	tst.w	r6, #31
 800b466:	d100      	bne.n	800b46a <USB_EPStartXfer+0xbc>
 800b468:	3a01      	subs	r2, #1
 800b46a:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800b46e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b472:	b292      	uxth	r2, r2
 800b474:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b478:	e1bb      	b.n	800b7f2 <USB_EPStartXfer+0x444>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b47a:	b2b6      	uxth	r6, r6
 800b47c:	4633      	mov	r3, r6
 800b47e:	88e2      	ldrh	r2, [r4, #6]
 800b480:	6961      	ldr	r1, [r4, #20]
 800b482:	4628      	mov	r0, r5
 800b484:	f7ff ff7f 	bl	800b386 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b488:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800b48c:	fa15 f383 	uxtah	r3, r5, r3
 800b490:	7822      	ldrb	r2, [r4, #0]
 800b492:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b496:	f8a3 6402 	strh.w	r6, [r3, #1026]	; 0x402
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b49a:	7822      	ldrb	r2, [r4, #0]
 800b49c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800b4a0:	b29b      	uxth	r3, r3
 800b4a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4aa:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800b4ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4b6:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800b4ba:	2000      	movs	r0, #0
 800b4bc:	e7af      	b.n	800b41e <USB_EPStartXfer+0x70>
        if (ep->xfer_len_db > ep->maxpacket)
 800b4be:	6a23      	ldr	r3, [r4, #32]
 800b4c0:	4299      	cmp	r1, r3
 800b4c2:	f080 8152 	bcs.w	800b76a <USB_EPStartXfer+0x3bc>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b4c6:	7822      	ldrb	r2, [r4, #0]
 800b4c8:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4d6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b4da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4de:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 800b4e2:	6a23      	ldr	r3, [r4, #32]
 800b4e4:	1b9b      	subs	r3, r3, r6
 800b4e6:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b4e8:	7823      	ldrb	r3, [r4, #0]
 800b4ea:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 800b4ee:	f012 0f40 	tst.w	r2, #64	; 0x40
 800b4f2:	f000 809d 	beq.w	800b630 <USB_EPStartXfer+0x282>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b4f6:	7862      	ldrb	r2, [r4, #1]
 800b4f8:	bb8a      	cbnz	r2, 800b55e <USB_EPStartXfer+0x1b0>
 800b4fa:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b4fe:	fa15 f282 	uxtah	r2, r5, r2
 800b502:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b506:	2e3e      	cmp	r6, #62	; 0x3e
 800b508:	d90c      	bls.n	800b524 <USB_EPStartXfer+0x176>
 800b50a:	0972      	lsrs	r2, r6, #5
 800b50c:	f016 0f1f 	tst.w	r6, #31
 800b510:	d100      	bne.n	800b514 <USB_EPStartXfer+0x166>
 800b512:	3a01      	subs	r2, #1
 800b514:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800b518:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b51c:	b292      	uxth	r2, r2
 800b51e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b522:	e01e      	b.n	800b562 <USB_EPStartXfer+0x1b4>
 800b524:	b98e      	cbnz	r6, 800b54a <USB_EPStartXfer+0x19c>
 800b526:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800b52a:	b292      	uxth	r2, r2
 800b52c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b530:	b292      	uxth	r2, r2
 800b532:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b536:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800b53a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800b53e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b542:	b292      	uxth	r2, r2
 800b544:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b548:	e00b      	b.n	800b562 <USB_EPStartXfer+0x1b4>
 800b54a:	0872      	lsrs	r2, r6, #1
 800b54c:	f016 0f01 	tst.w	r6, #1
 800b550:	d000      	beq.n	800b554 <USB_EPStartXfer+0x1a6>
 800b552:	3201      	adds	r2, #1
 800b554:	0292      	lsls	r2, r2, #10
 800b556:	b292      	uxth	r2, r2
 800b558:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b55c:	e001      	b.n	800b562 <USB_EPStartXfer+0x1b4>
 800b55e:	2a01      	cmp	r2, #1
 800b560:	d027      	beq.n	800b5b2 <USB_EPStartXfer+0x204>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b562:	b2b3      	uxth	r3, r6
 800b564:	8962      	ldrh	r2, [r4, #10]
 800b566:	6961      	ldr	r1, [r4, #20]
 800b568:	4628      	mov	r0, r5
 800b56a:	f7ff ff0c 	bl	800b386 <USB_WritePMA>
            ep->xfer_buff += len;
 800b56e:	6963      	ldr	r3, [r4, #20]
 800b570:	4433      	add	r3, r6
 800b572:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800b574:	6a23      	ldr	r3, [r4, #32]
 800b576:	6922      	ldr	r2, [r4, #16]
 800b578:	4293      	cmp	r3, r2
 800b57a:	d924      	bls.n	800b5c6 <USB_EPStartXfer+0x218>
              ep->xfer_len_db -= len;
 800b57c:	1b9b      	subs	r3, r3, r6
 800b57e:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b580:	7863      	ldrb	r3, [r4, #1]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d140      	bne.n	800b608 <USB_EPStartXfer+0x25a>
 800b586:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800b58a:	fa15 f383 	uxtah	r3, r5, r3
 800b58e:	7822      	ldrb	r2, [r4, #0]
 800b590:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b594:	2e3e      	cmp	r6, #62	; 0x3e
 800b596:	d91a      	bls.n	800b5ce <USB_EPStartXfer+0x220>
 800b598:	0972      	lsrs	r2, r6, #5
 800b59a:	f016 0f1f 	tst.w	r6, #31
 800b59e:	d100      	bne.n	800b5a2 <USB_EPStartXfer+0x1f4>
 800b5a0:	3a01      	subs	r2, #1
 800b5a2:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800b5a6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b5aa:	b292      	uxth	r2, r2
 800b5ac:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b5b0:	e02c      	b.n	800b60c <USB_EPStartXfer+0x25e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b5b2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b5b6:	fa15 f282 	uxtah	r2, r5, r2
 800b5ba:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b5be:	b2b2      	uxth	r2, r6
 800b5c0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b5c4:	e7cd      	b.n	800b562 <USB_EPStartXfer+0x1b4>
              ep->xfer_len_db = 0U;
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 800b5ca:	461e      	mov	r6, r3
 800b5cc:	e7d8      	b.n	800b580 <USB_EPStartXfer+0x1d2>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b5ce:	b98e      	cbnz	r6, 800b5f4 <USB_EPStartXfer+0x246>
 800b5d0:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800b5d4:	b292      	uxth	r2, r2
 800b5d6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b5da:	b292      	uxth	r2, r2
 800b5dc:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b5e0:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800b5e4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800b5e8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b5ec:	b292      	uxth	r2, r2
 800b5ee:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b5f2:	e00b      	b.n	800b60c <USB_EPStartXfer+0x25e>
 800b5f4:	0872      	lsrs	r2, r6, #1
 800b5f6:	f016 0f01 	tst.w	r6, #1
 800b5fa:	d000      	beq.n	800b5fe <USB_EPStartXfer+0x250>
 800b5fc:	3201      	adds	r2, #1
 800b5fe:	0292      	lsls	r2, r2, #10
 800b600:	b292      	uxth	r2, r2
 800b602:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b606:	e001      	b.n	800b60c <USB_EPStartXfer+0x25e>
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d006      	beq.n	800b61a <USB_EPStartXfer+0x26c>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b60c:	b2b3      	uxth	r3, r6
 800b60e:	8922      	ldrh	r2, [r4, #8]
 800b610:	6961      	ldr	r1, [r4, #20]
 800b612:	4628      	mov	r0, r5
 800b614:	f7ff feb7 	bl	800b386 <USB_WritePMA>
 800b618:	e73f      	b.n	800b49a <USB_EPStartXfer+0xec>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b61a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800b61e:	fa15 f383 	uxtah	r3, r5, r3
 800b622:	7822      	ldrb	r2, [r4, #0]
 800b624:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b628:	b2b2      	uxth	r2, r6
 800b62a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b62e:	e7ed      	b.n	800b60c <USB_EPStartXfer+0x25e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b630:	7862      	ldrb	r2, [r4, #1]
 800b632:	bb8a      	cbnz	r2, 800b698 <USB_EPStartXfer+0x2ea>
 800b634:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b638:	fa15 f282 	uxtah	r2, r5, r2
 800b63c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b640:	2e3e      	cmp	r6, #62	; 0x3e
 800b642:	d90c      	bls.n	800b65e <USB_EPStartXfer+0x2b0>
 800b644:	0972      	lsrs	r2, r6, #5
 800b646:	f016 0f1f 	tst.w	r6, #31
 800b64a:	d100      	bne.n	800b64e <USB_EPStartXfer+0x2a0>
 800b64c:	3a01      	subs	r2, #1
 800b64e:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800b652:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b656:	b292      	uxth	r2, r2
 800b658:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b65c:	e01e      	b.n	800b69c <USB_EPStartXfer+0x2ee>
 800b65e:	b98e      	cbnz	r6, 800b684 <USB_EPStartXfer+0x2d6>
 800b660:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800b664:	b292      	uxth	r2, r2
 800b666:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b66a:	b292      	uxth	r2, r2
 800b66c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b670:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800b674:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800b678:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b67c:	b292      	uxth	r2, r2
 800b67e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b682:	e00b      	b.n	800b69c <USB_EPStartXfer+0x2ee>
 800b684:	0872      	lsrs	r2, r6, #1
 800b686:	f016 0f01 	tst.w	r6, #1
 800b68a:	d000      	beq.n	800b68e <USB_EPStartXfer+0x2e0>
 800b68c:	3201      	adds	r2, #1
 800b68e:	0292      	lsls	r2, r2, #10
 800b690:	b292      	uxth	r2, r2
 800b692:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b696:	e001      	b.n	800b69c <USB_EPStartXfer+0x2ee>
 800b698:	2a01      	cmp	r2, #1
 800b69a:	d027      	beq.n	800b6ec <USB_EPStartXfer+0x33e>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b69c:	b2b3      	uxth	r3, r6
 800b69e:	8922      	ldrh	r2, [r4, #8]
 800b6a0:	6961      	ldr	r1, [r4, #20]
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	f7ff fe6f 	bl	800b386 <USB_WritePMA>
            ep->xfer_buff += len;
 800b6a8:	6963      	ldr	r3, [r4, #20]
 800b6aa:	4433      	add	r3, r6
 800b6ac:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800b6ae:	6a23      	ldr	r3, [r4, #32]
 800b6b0:	6922      	ldr	r2, [r4, #16]
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d924      	bls.n	800b700 <USB_EPStartXfer+0x352>
              ep->xfer_len_db -= len;
 800b6b6:	1b9b      	subs	r3, r3, r6
 800b6b8:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b6ba:	7863      	ldrb	r3, [r4, #1]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d140      	bne.n	800b742 <USB_EPStartXfer+0x394>
 800b6c0:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800b6c4:	fa15 f383 	uxtah	r3, r5, r3
 800b6c8:	7822      	ldrb	r2, [r4, #0]
 800b6ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6ce:	2e3e      	cmp	r6, #62	; 0x3e
 800b6d0:	d91a      	bls.n	800b708 <USB_EPStartXfer+0x35a>
 800b6d2:	0972      	lsrs	r2, r6, #5
 800b6d4:	f016 0f1f 	tst.w	r6, #31
 800b6d8:	d100      	bne.n	800b6dc <USB_EPStartXfer+0x32e>
 800b6da:	3a01      	subs	r2, #1
 800b6dc:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800b6e0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b6e4:	b292      	uxth	r2, r2
 800b6e6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b6ea:	e02c      	b.n	800b746 <USB_EPStartXfer+0x398>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b6ec:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b6f0:	fa15 f282 	uxtah	r2, r5, r2
 800b6f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b6f8:	b2b2      	uxth	r2, r6
 800b6fa:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b6fe:	e7cd      	b.n	800b69c <USB_EPStartXfer+0x2ee>
              ep->xfer_len_db = 0U;
 800b700:	2200      	movs	r2, #0
 800b702:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 800b704:	461e      	mov	r6, r3
 800b706:	e7d8      	b.n	800b6ba <USB_EPStartXfer+0x30c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b708:	b98e      	cbnz	r6, 800b72e <USB_EPStartXfer+0x380>
 800b70a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800b70e:	b292      	uxth	r2, r2
 800b710:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b714:	b292      	uxth	r2, r2
 800b716:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b71a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800b71e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800b722:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b726:	b292      	uxth	r2, r2
 800b728:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b72c:	e00b      	b.n	800b746 <USB_EPStartXfer+0x398>
 800b72e:	0872      	lsrs	r2, r6, #1
 800b730:	f016 0f01 	tst.w	r6, #1
 800b734:	d000      	beq.n	800b738 <USB_EPStartXfer+0x38a>
 800b736:	3201      	adds	r2, #1
 800b738:	0292      	lsls	r2, r2, #10
 800b73a:	b292      	uxth	r2, r2
 800b73c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b740:	e001      	b.n	800b746 <USB_EPStartXfer+0x398>
 800b742:	2b01      	cmp	r3, #1
 800b744:	d006      	beq.n	800b754 <USB_EPStartXfer+0x3a6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b746:	b2b3      	uxth	r3, r6
 800b748:	8962      	ldrh	r2, [r4, #10]
 800b74a:	6961      	ldr	r1, [r4, #20]
 800b74c:	4628      	mov	r0, r5
 800b74e:	f7ff fe1a 	bl	800b386 <USB_WritePMA>
 800b752:	e6a2      	b.n	800b49a <USB_EPStartXfer+0xec>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b754:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800b758:	fa15 f383 	uxtah	r3, r5, r3
 800b75c:	7822      	ldrb	r2, [r4, #0]
 800b75e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b762:	b2b2      	uxth	r2, r6
 800b764:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b768:	e7ed      	b.n	800b746 <USB_EPStartXfer+0x398>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b76a:	7821      	ldrb	r1, [r4, #0]
 800b76c:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 800b770:	b292      	uxth	r2, r2
 800b772:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 800b776:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b77a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b77e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b782:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b786:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b78a:	fa15 f282 	uxtah	r2, r5, r2
 800b78e:	7821      	ldrb	r1, [r4, #0]
 800b790:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b794:	b29b      	uxth	r3, r3
 800b796:	f8a2 3402 	strh.w	r3, [r2, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b79a:	8922      	ldrh	r2, [r4, #8]
 800b79c:	6961      	ldr	r1, [r4, #20]
 800b79e:	4628      	mov	r0, r5
 800b7a0:	f7ff fdf1 	bl	800b386 <USB_WritePMA>
 800b7a4:	e679      	b.n	800b49a <USB_EPStartXfer+0xec>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b7a6:	b98e      	cbnz	r6, 800b7cc <USB_EPStartXfer+0x41e>
 800b7a8:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800b7ac:	b292      	uxth	r2, r2
 800b7ae:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b7b2:	b292      	uxth	r2, r2
 800b7b4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b7b8:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800b7bc:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800b7c0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b7c4:	b292      	uxth	r2, r2
 800b7c6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b7ca:	e012      	b.n	800b7f2 <USB_EPStartXfer+0x444>
 800b7cc:	0872      	lsrs	r2, r6, #1
 800b7ce:	f016 0f01 	tst.w	r6, #1
 800b7d2:	d000      	beq.n	800b7d6 <USB_EPStartXfer+0x428>
 800b7d4:	3201      	adds	r2, #1
 800b7d6:	0292      	lsls	r2, r2, #10
 800b7d8:	b292      	uxth	r2, r2
 800b7da:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b7de:	e008      	b.n	800b7f2 <USB_EPStartXfer+0x444>
 800b7e0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b7e4:	fa15 f282 	uxtah	r2, r5, r2
 800b7e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b7ec:	b2b2      	uxth	r2, r6
 800b7ee:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b7f2:	b2b3      	uxth	r3, r6
 800b7f4:	8962      	ldrh	r2, [r4, #10]
 800b7f6:	6961      	ldr	r1, [r4, #20]
 800b7f8:	4628      	mov	r0, r5
 800b7fa:	f7ff fdc4 	bl	800b386 <USB_WritePMA>
 800b7fe:	e64c      	b.n	800b49a <USB_EPStartXfer+0xec>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b800:	bb8a      	cbnz	r2, 800b866 <USB_EPStartXfer+0x4b8>
 800b802:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b806:	fa15 f282 	uxtah	r2, r5, r2
 800b80a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b80e:	2e3e      	cmp	r6, #62	; 0x3e
 800b810:	d90c      	bls.n	800b82c <USB_EPStartXfer+0x47e>
 800b812:	0972      	lsrs	r2, r6, #5
 800b814:	f016 0f1f 	tst.w	r6, #31
 800b818:	d100      	bne.n	800b81c <USB_EPStartXfer+0x46e>
 800b81a:	3a01      	subs	r2, #1
 800b81c:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800b820:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b824:	b292      	uxth	r2, r2
 800b826:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b82a:	e025      	b.n	800b878 <USB_EPStartXfer+0x4ca>
 800b82c:	b98e      	cbnz	r6, 800b852 <USB_EPStartXfer+0x4a4>
 800b82e:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800b832:	b292      	uxth	r2, r2
 800b834:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b838:	b292      	uxth	r2, r2
 800b83a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b83e:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800b842:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800b846:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b84a:	b292      	uxth	r2, r2
 800b84c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b850:	e012      	b.n	800b878 <USB_EPStartXfer+0x4ca>
 800b852:	0872      	lsrs	r2, r6, #1
 800b854:	f016 0f01 	tst.w	r6, #1
 800b858:	d000      	beq.n	800b85c <USB_EPStartXfer+0x4ae>
 800b85a:	3201      	adds	r2, #1
 800b85c:	0292      	lsls	r2, r2, #10
 800b85e:	b292      	uxth	r2, r2
 800b860:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b864:	e008      	b.n	800b878 <USB_EPStartXfer+0x4ca>
 800b866:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b86a:	fa15 f282 	uxtah	r2, r5, r2
 800b86e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b872:	b2b2      	uxth	r2, r6
 800b874:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b878:	b2b3      	uxth	r3, r6
 800b87a:	8922      	ldrh	r2, [r4, #8]
 800b87c:	6961      	ldr	r1, [r4, #20]
 800b87e:	4628      	mov	r0, r5
 800b880:	f7ff fd81 	bl	800b386 <USB_WritePMA>
 800b884:	e609      	b.n	800b49a <USB_EPStartXfer+0xec>
        ep->xfer_len = 0U;
 800b886:	2200      	movs	r2, #0
 800b888:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 800b88a:	461a      	mov	r2, r3
 800b88c:	e5a0      	b.n	800b3d0 <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b88e:	b98a      	cbnz	r2, 800b8b4 <USB_EPStartXfer+0x506>
 800b890:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800b894:	b292      	uxth	r2, r2
 800b896:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b89a:	b292      	uxth	r2, r2
 800b89c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b8a0:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800b8a4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800b8a8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b8ac:	b292      	uxth	r2, r2
 800b8ae:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b8b2:	e5a3      	b.n	800b3fc <USB_EPStartXfer+0x4e>
 800b8b4:	0851      	lsrs	r1, r2, #1
 800b8b6:	f012 0f01 	tst.w	r2, #1
 800b8ba:	d000      	beq.n	800b8be <USB_EPStartXfer+0x510>
 800b8bc:	3101      	adds	r1, #1
 800b8be:	0289      	lsls	r1, r1, #10
 800b8c0:	b289      	uxth	r1, r1
 800b8c2:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 800b8c6:	e599      	b.n	800b3fc <USB_EPStartXfer+0x4e>
      if (ep->type == EP_TYPE_BULK)
 800b8c8:	78cb      	ldrb	r3, [r1, #3]
 800b8ca:	2b02      	cmp	r3, #2
 800b8cc:	d03b      	beq.n	800b946 <USB_EPStartXfer+0x598>
      else if (ep->type == EP_TYPE_ISOC)
 800b8ce:	2b01      	cmp	r3, #1
 800b8d0:	f040 811b 	bne.w	800bb0a <USB_EPStartXfer+0x75c>
        if (ep->xfer_len > ep->maxpacket)
 800b8d4:	6989      	ldr	r1, [r1, #24]
 800b8d6:	6923      	ldr	r3, [r4, #16]
 800b8d8:	4299      	cmp	r1, r3
 800b8da:	f240 80ca 	bls.w	800ba72 <USB_EPStartXfer+0x6c4>
          ep->xfer_len -= len;
 800b8de:	1ac9      	subs	r1, r1, r3
 800b8e0:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b8e2:	b9aa      	cbnz	r2, 800b910 <USB_EPStartXfer+0x562>
 800b8e4:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b8e8:	fa15 f282 	uxtah	r2, r5, r2
 800b8ec:	7821      	ldrb	r1, [r4, #0]
 800b8ee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b8f2:	2b3e      	cmp	r3, #62	; 0x3e
 800b8f4:	f240 80c1 	bls.w	800ba7a <USB_EPStartXfer+0x6cc>
 800b8f8:	0959      	lsrs	r1, r3, #5
 800b8fa:	f013 0f1f 	tst.w	r3, #31
 800b8fe:	d100      	bne.n	800b902 <USB_EPStartXfer+0x554>
 800b900:	3901      	subs	r1, #1
 800b902:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800b906:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800b90a:	b289      	uxth	r1, r1
 800b90c:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800b910:	7862      	ldrb	r2, [r4, #1]
 800b912:	2a00      	cmp	r2, #0
 800b914:	f040 80eb 	bne.w	800baee <USB_EPStartXfer+0x740>
 800b918:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b91c:	fa15 f282 	uxtah	r2, r5, r2
 800b920:	7821      	ldrb	r1, [r4, #0]
 800b922:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b926:	2b3e      	cmp	r3, #62	; 0x3e
 800b928:	f240 80c4 	bls.w	800bab4 <USB_EPStartXfer+0x706>
 800b92c:	0959      	lsrs	r1, r3, #5
 800b92e:	f013 0f1f 	tst.w	r3, #31
 800b932:	d100      	bne.n	800b936 <USB_EPStartXfer+0x588>
 800b934:	3901      	subs	r1, #1
 800b936:	ea6f 63c1 	mvn.w	r3, r1, lsl #27
 800b93a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b93e:	b29b      	uxth	r3, r3
 800b940:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800b944:	e55a      	b.n	800b3fc <USB_EPStartXfer+0x4e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b946:	b9aa      	cbnz	r2, 800b974 <USB_EPStartXfer+0x5c6>
 800b948:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800b94c:	fa10 f383 	uxtah	r3, r0, r3
 800b950:	780a      	ldrb	r2, [r1, #0]
 800b952:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b956:	6909      	ldr	r1, [r1, #16]
 800b958:	293e      	cmp	r1, #62	; 0x3e
 800b95a:	d925      	bls.n	800b9a8 <USB_EPStartXfer+0x5fa>
 800b95c:	094a      	lsrs	r2, r1, #5
 800b95e:	f011 0f1f 	tst.w	r1, #31
 800b962:	d100      	bne.n	800b966 <USB_EPStartXfer+0x5b8>
 800b964:	3a01      	subs	r2, #1
 800b966:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800b96a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b96e:	b292      	uxth	r2, r2
 800b970:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b974:	7863      	ldrb	r3, [r4, #1]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d150      	bne.n	800ba1c <USB_EPStartXfer+0x66e>
 800b97a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800b97e:	fa15 f383 	uxtah	r3, r5, r3
 800b982:	7822      	ldrb	r2, [r4, #0]
 800b984:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b988:	6921      	ldr	r1, [r4, #16]
 800b98a:	293e      	cmp	r1, #62	; 0x3e
 800b98c:	d929      	bls.n	800b9e2 <USB_EPStartXfer+0x634>
 800b98e:	094a      	lsrs	r2, r1, #5
 800b990:	f011 0f1f 	tst.w	r1, #31
 800b994:	d100      	bne.n	800b998 <USB_EPStartXfer+0x5ea>
 800b996:	3a01      	subs	r2, #1
 800b998:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800b99c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b9a0:	b292      	uxth	r2, r2
 800b9a2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b9a6:	e03b      	b.n	800ba20 <USB_EPStartXfer+0x672>
 800b9a8:	b989      	cbnz	r1, 800b9ce <USB_EPStartXfer+0x620>
 800b9aa:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800b9ae:	b292      	uxth	r2, r2
 800b9b0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b9b4:	b292      	uxth	r2, r2
 800b9b6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b9ba:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800b9be:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800b9c2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b9c6:	b292      	uxth	r2, r2
 800b9c8:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b9cc:	e7d2      	b.n	800b974 <USB_EPStartXfer+0x5c6>
 800b9ce:	084a      	lsrs	r2, r1, #1
 800b9d0:	f011 0f01 	tst.w	r1, #1
 800b9d4:	d000      	beq.n	800b9d8 <USB_EPStartXfer+0x62a>
 800b9d6:	3201      	adds	r2, #1
 800b9d8:	0292      	lsls	r2, r2, #10
 800b9da:	b292      	uxth	r2, r2
 800b9dc:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b9e0:	e7c8      	b.n	800b974 <USB_EPStartXfer+0x5c6>
 800b9e2:	b989      	cbnz	r1, 800ba08 <USB_EPStartXfer+0x65a>
 800b9e4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800b9e8:	b292      	uxth	r2, r2
 800b9ea:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b9ee:	b292      	uxth	r2, r2
 800b9f0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b9f4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800b9f8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800b9fc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800ba00:	b292      	uxth	r2, r2
 800ba02:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800ba06:	e00b      	b.n	800ba20 <USB_EPStartXfer+0x672>
 800ba08:	084a      	lsrs	r2, r1, #1
 800ba0a:	f011 0f01 	tst.w	r1, #1
 800ba0e:	d000      	beq.n	800ba12 <USB_EPStartXfer+0x664>
 800ba10:	3201      	adds	r2, #1
 800ba12:	0292      	lsls	r2, r2, #10
 800ba14:	b292      	uxth	r2, r2
 800ba16:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800ba1a:	e001      	b.n	800ba20 <USB_EPStartXfer+0x672>
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d01d      	beq.n	800ba5c <USB_EPStartXfer+0x6ae>
        if (ep->xfer_count != 0U)
 800ba20:	69e3      	ldr	r3, [r4, #28]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	f43f acea 	beq.w	800b3fc <USB_EPStartXfer+0x4e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ba28:	7822      	ldrb	r2, [r4, #0]
 800ba2a:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ba2e:	f244 0340 	movw	r3, #16448	; 0x4040
 800ba32:	ea03 0001 	and.w	r0, r3, r1
 800ba36:	438b      	bics	r3, r1
 800ba38:	d002      	beq.n	800ba40 <USB_EPStartXfer+0x692>
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	f47f acde 	bne.w	800b3fc <USB_EPStartXfer+0x4e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ba40:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ba56:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 800ba5a:	e4cf      	b.n	800b3fc <USB_EPStartXfer+0x4e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ba5c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800ba60:	fa15 f383 	uxtah	r3, r5, r3
 800ba64:	7822      	ldrb	r2, [r4, #0]
 800ba66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba6a:	8a22      	ldrh	r2, [r4, #16]
 800ba6c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800ba70:	e7d6      	b.n	800ba20 <USB_EPStartXfer+0x672>
          ep->xfer_len = 0U;
 800ba72:	2300      	movs	r3, #0
 800ba74:	61a3      	str	r3, [r4, #24]
          len = ep->xfer_len;
 800ba76:	460b      	mov	r3, r1
 800ba78:	e733      	b.n	800b8e2 <USB_EPStartXfer+0x534>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ba7a:	b98b      	cbnz	r3, 800baa0 <USB_EPStartXfer+0x6f2>
 800ba7c:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 800ba80:	b289      	uxth	r1, r1
 800ba82:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800ba86:	b289      	uxth	r1, r1
 800ba88:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800ba8c:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 800ba90:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800ba94:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800ba98:	b289      	uxth	r1, r1
 800ba9a:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800ba9e:	e737      	b.n	800b910 <USB_EPStartXfer+0x562>
 800baa0:	0859      	lsrs	r1, r3, #1
 800baa2:	f013 0f01 	tst.w	r3, #1
 800baa6:	d000      	beq.n	800baaa <USB_EPStartXfer+0x6fc>
 800baa8:	3101      	adds	r1, #1
 800baaa:	0289      	lsls	r1, r1, #10
 800baac:	b289      	uxth	r1, r1
 800baae:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800bab2:	e72d      	b.n	800b910 <USB_EPStartXfer+0x562>
 800bab4:	b98b      	cbnz	r3, 800bada <USB_EPStartXfer+0x72c>
 800bab6:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 800baba:	b29b      	uxth	r3, r3
 800babc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800bac6:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 800baca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800bad8:	e490      	b.n	800b3fc <USB_EPStartXfer+0x4e>
 800bada:	0859      	lsrs	r1, r3, #1
 800badc:	f013 0f01 	tst.w	r3, #1
 800bae0:	d000      	beq.n	800bae4 <USB_EPStartXfer+0x736>
 800bae2:	3101      	adds	r1, #1
 800bae4:	028b      	lsls	r3, r1, #10
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800baec:	e486      	b.n	800b3fc <USB_EPStartXfer+0x4e>
 800baee:	2a01      	cmp	r2, #1
 800baf0:	f47f ac84 	bne.w	800b3fc <USB_EPStartXfer+0x4e>
 800baf4:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800baf8:	fa15 f282 	uxtah	r2, r5, r2
 800bafc:	7821      	ldrb	r1, [r4, #0]
 800bafe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800bb08:	e478      	b.n	800b3fc <USB_EPStartXfer+0x4e>
        return HAL_ERROR;
 800bb0a:	2001      	movs	r0, #1
 800bb0c:	e487      	b.n	800b41e <USB_EPStartXfer+0x70>

0800bb0e <USB_ReadPMA>:
=======
 800b278:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 800b27a:	3c01      	subs	r4, #1
 800b27c:	2c00      	cmp	r4, #0
 800b27e:	d1f5      	bne.n	800b26c <USB_WritePMA+0xe>
  }
}
 800b280:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b284:	4770      	bx	lr

0800b286 <USB_EPStartXfer>:
{
 800b286:	b570      	push	{r4, r5, r6, lr}
 800b288:	4605      	mov	r5, r0
 800b28a:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 800b28c:	784a      	ldrb	r2, [r1, #1]
 800b28e:	2a01      	cmp	r2, #1
 800b290:	d032      	beq.n	800b2f8 <USB_EPStartXfer+0x72>
    if (ep->doublebuffer == 0U)
 800b292:	7b0b      	ldrb	r3, [r1, #12]
 800b294:	2b00      	cmp	r3, #0
 800b296:	f040 8283 	bne.w	800b7a0 <USB_EPStartXfer+0x51a>
      if (ep->xfer_len > ep->maxpacket)
 800b29a:	698b      	ldr	r3, [r1, #24]
 800b29c:	690a      	ldr	r2, [r1, #16]
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	f240 825d 	bls.w	800b75e <USB_EPStartXfer+0x4d8>
        ep->xfer_len -= len;
 800b2a4:	1a9b      	subs	r3, r3, r2
 800b2a6:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b2a8:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800b2ac:	fa15 f383 	uxtah	r3, r5, r3
 800b2b0:	7821      	ldrb	r1, [r4, #0]
 800b2b2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800b2b6:	2a3e      	cmp	r2, #62	; 0x3e
 800b2b8:	f240 8255 	bls.w	800b766 <USB_EPStartXfer+0x4e0>
 800b2bc:	0951      	lsrs	r1, r2, #5
 800b2be:	f012 0f1f 	tst.w	r2, #31
 800b2c2:	d100      	bne.n	800b2c6 <USB_EPStartXfer+0x40>
 800b2c4:	3901      	subs	r1, #1
 800b2c6:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800b2ca:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800b2ce:	b289      	uxth	r1, r1
 800b2d0:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b2d4:	7822      	ldrb	r2, [r4, #0]
 800b2d6:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b2e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2e4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800b2e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2f0:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800b2f4:	2000      	movs	r0, #0
}
 800b2f6:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 800b2f8:	698e      	ldr	r6, [r1, #24]
 800b2fa:	6909      	ldr	r1, [r1, #16]
 800b2fc:	428e      	cmp	r6, r1
 800b2fe:	d900      	bls.n	800b302 <USB_EPStartXfer+0x7c>
      len = ep->maxpacket;
 800b300:	460e      	mov	r6, r1
    if (ep->doublebuffer == 0U)
 800b302:	7b23      	ldrb	r3, [r4, #12]
 800b304:	b32b      	cbz	r3, 800b352 <USB_EPStartXfer+0xcc>
      if (ep->type == EP_TYPE_BULK)
 800b306:	78e3      	ldrb	r3, [r4, #3]
 800b308:	2b02      	cmp	r3, #2
 800b30a:	d044      	beq.n	800b396 <USB_EPStartXfer+0x110>
        ep->xfer_len_db -= len;
 800b30c:	6a23      	ldr	r3, [r4, #32]
 800b30e:	1b9b      	subs	r3, r3, r6
 800b310:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b312:	7823      	ldrb	r3, [r4, #0]
 800b314:	f835 1023 	ldrh.w	r1, [r5, r3, lsl #2]
 800b318:	f011 0f40 	tst.w	r1, #64	; 0x40
 800b31c:	f000 81dc 	beq.w	800b6d8 <USB_EPStartXfer+0x452>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b320:	2a00      	cmp	r2, #0
 800b322:	f040 81c9 	bne.w	800b6b8 <USB_EPStartXfer+0x432>
 800b326:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b32a:	fa15 f282 	uxtah	r2, r5, r2
 800b32e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b332:	2e3e      	cmp	r6, #62	; 0x3e
 800b334:	f240 81a3 	bls.w	800b67e <USB_EPStartXfer+0x3f8>
 800b338:	0972      	lsrs	r2, r6, #5
 800b33a:	f016 0f1f 	tst.w	r6, #31
 800b33e:	d100      	bne.n	800b342 <USB_EPStartXfer+0xbc>
 800b340:	3a01      	subs	r2, #1
 800b342:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800b346:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b34a:	b292      	uxth	r2, r2
 800b34c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b350:	e1bb      	b.n	800b6ca <USB_EPStartXfer+0x444>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b352:	b2b6      	uxth	r6, r6
 800b354:	4633      	mov	r3, r6
 800b356:	88e2      	ldrh	r2, [r4, #6]
 800b358:	6961      	ldr	r1, [r4, #20]
 800b35a:	4628      	mov	r0, r5
 800b35c:	f7ff ff7f 	bl	800b25e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b360:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800b364:	fa15 f383 	uxtah	r3, r5, r3
 800b368:	7822      	ldrb	r2, [r4, #0]
 800b36a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b36e:	f8a3 6402 	strh.w	r6, [r3, #1026]	; 0x402
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b372:	7822      	ldrb	r2, [r4, #0]
 800b374:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800b378:	b29b      	uxth	r3, r3
 800b37a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b37e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b382:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800b386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b38a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b38e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800b392:	2000      	movs	r0, #0
 800b394:	e7af      	b.n	800b2f6 <USB_EPStartXfer+0x70>
        if (ep->xfer_len_db > ep->maxpacket)
 800b396:	6a23      	ldr	r3, [r4, #32]
 800b398:	4299      	cmp	r1, r3
 800b39a:	f080 8152 	bcs.w	800b642 <USB_EPStartXfer+0x3bc>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b39e:	7822      	ldrb	r2, [r4, #0]
 800b3a0:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3ae:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b3b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3b6:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 800b3ba:	6a23      	ldr	r3, [r4, #32]
 800b3bc:	1b9b      	subs	r3, r3, r6
 800b3be:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b3c0:	7823      	ldrb	r3, [r4, #0]
 800b3c2:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 800b3c6:	f012 0f40 	tst.w	r2, #64	; 0x40
 800b3ca:	f000 809d 	beq.w	800b508 <USB_EPStartXfer+0x282>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b3ce:	7862      	ldrb	r2, [r4, #1]
 800b3d0:	bb8a      	cbnz	r2, 800b436 <USB_EPStartXfer+0x1b0>
 800b3d2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b3d6:	fa15 f282 	uxtah	r2, r5, r2
 800b3da:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b3de:	2e3e      	cmp	r6, #62	; 0x3e
 800b3e0:	d90c      	bls.n	800b3fc <USB_EPStartXfer+0x176>
 800b3e2:	0972      	lsrs	r2, r6, #5
 800b3e4:	f016 0f1f 	tst.w	r6, #31
 800b3e8:	d100      	bne.n	800b3ec <USB_EPStartXfer+0x166>
 800b3ea:	3a01      	subs	r2, #1
 800b3ec:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800b3f0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b3f4:	b292      	uxth	r2, r2
 800b3f6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b3fa:	e01e      	b.n	800b43a <USB_EPStartXfer+0x1b4>
 800b3fc:	b98e      	cbnz	r6, 800b422 <USB_EPStartXfer+0x19c>
 800b3fe:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800b402:	b292      	uxth	r2, r2
 800b404:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b408:	b292      	uxth	r2, r2
 800b40a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b40e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800b412:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800b416:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b41a:	b292      	uxth	r2, r2
 800b41c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b420:	e00b      	b.n	800b43a <USB_EPStartXfer+0x1b4>
 800b422:	0872      	lsrs	r2, r6, #1
 800b424:	f016 0f01 	tst.w	r6, #1
 800b428:	d000      	beq.n	800b42c <USB_EPStartXfer+0x1a6>
 800b42a:	3201      	adds	r2, #1
 800b42c:	0292      	lsls	r2, r2, #10
 800b42e:	b292      	uxth	r2, r2
 800b430:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b434:	e001      	b.n	800b43a <USB_EPStartXfer+0x1b4>
 800b436:	2a01      	cmp	r2, #1
 800b438:	d027      	beq.n	800b48a <USB_EPStartXfer+0x204>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b43a:	b2b3      	uxth	r3, r6
 800b43c:	8962      	ldrh	r2, [r4, #10]
 800b43e:	6961      	ldr	r1, [r4, #20]
 800b440:	4628      	mov	r0, r5
 800b442:	f7ff ff0c 	bl	800b25e <USB_WritePMA>
            ep->xfer_buff += len;
 800b446:	6963      	ldr	r3, [r4, #20]
 800b448:	4433      	add	r3, r6
 800b44a:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800b44c:	6a23      	ldr	r3, [r4, #32]
 800b44e:	6922      	ldr	r2, [r4, #16]
 800b450:	4293      	cmp	r3, r2
 800b452:	d924      	bls.n	800b49e <USB_EPStartXfer+0x218>
              ep->xfer_len_db -= len;
 800b454:	1b9b      	subs	r3, r3, r6
 800b456:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b458:	7863      	ldrb	r3, [r4, #1]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d140      	bne.n	800b4e0 <USB_EPStartXfer+0x25a>
 800b45e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800b462:	fa15 f383 	uxtah	r3, r5, r3
 800b466:	7822      	ldrb	r2, [r4, #0]
 800b468:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b46c:	2e3e      	cmp	r6, #62	; 0x3e
 800b46e:	d91a      	bls.n	800b4a6 <USB_EPStartXfer+0x220>
 800b470:	0972      	lsrs	r2, r6, #5
 800b472:	f016 0f1f 	tst.w	r6, #31
 800b476:	d100      	bne.n	800b47a <USB_EPStartXfer+0x1f4>
 800b478:	3a01      	subs	r2, #1
 800b47a:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800b47e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b482:	b292      	uxth	r2, r2
 800b484:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b488:	e02c      	b.n	800b4e4 <USB_EPStartXfer+0x25e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b48a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b48e:	fa15 f282 	uxtah	r2, r5, r2
 800b492:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b496:	b2b2      	uxth	r2, r6
 800b498:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b49c:	e7cd      	b.n	800b43a <USB_EPStartXfer+0x1b4>
              ep->xfer_len_db = 0U;
 800b49e:	2200      	movs	r2, #0
 800b4a0:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 800b4a2:	461e      	mov	r6, r3
 800b4a4:	e7d8      	b.n	800b458 <USB_EPStartXfer+0x1d2>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b4a6:	b98e      	cbnz	r6, 800b4cc <USB_EPStartXfer+0x246>
 800b4a8:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800b4ac:	b292      	uxth	r2, r2
 800b4ae:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b4b2:	b292      	uxth	r2, r2
 800b4b4:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b4b8:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800b4bc:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800b4c0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b4c4:	b292      	uxth	r2, r2
 800b4c6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b4ca:	e00b      	b.n	800b4e4 <USB_EPStartXfer+0x25e>
 800b4cc:	0872      	lsrs	r2, r6, #1
 800b4ce:	f016 0f01 	tst.w	r6, #1
 800b4d2:	d000      	beq.n	800b4d6 <USB_EPStartXfer+0x250>
 800b4d4:	3201      	adds	r2, #1
 800b4d6:	0292      	lsls	r2, r2, #10
 800b4d8:	b292      	uxth	r2, r2
 800b4da:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b4de:	e001      	b.n	800b4e4 <USB_EPStartXfer+0x25e>
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d006      	beq.n	800b4f2 <USB_EPStartXfer+0x26c>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b4e4:	b2b3      	uxth	r3, r6
 800b4e6:	8922      	ldrh	r2, [r4, #8]
 800b4e8:	6961      	ldr	r1, [r4, #20]
 800b4ea:	4628      	mov	r0, r5
 800b4ec:	f7ff feb7 	bl	800b25e <USB_WritePMA>
 800b4f0:	e73f      	b.n	800b372 <USB_EPStartXfer+0xec>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b4f2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800b4f6:	fa15 f383 	uxtah	r3, r5, r3
 800b4fa:	7822      	ldrb	r2, [r4, #0]
 800b4fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b500:	b2b2      	uxth	r2, r6
 800b502:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b506:	e7ed      	b.n	800b4e4 <USB_EPStartXfer+0x25e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b508:	7862      	ldrb	r2, [r4, #1]
 800b50a:	bb8a      	cbnz	r2, 800b570 <USB_EPStartXfer+0x2ea>
 800b50c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b510:	fa15 f282 	uxtah	r2, r5, r2
 800b514:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b518:	2e3e      	cmp	r6, #62	; 0x3e
 800b51a:	d90c      	bls.n	800b536 <USB_EPStartXfer+0x2b0>
 800b51c:	0972      	lsrs	r2, r6, #5
 800b51e:	f016 0f1f 	tst.w	r6, #31
 800b522:	d100      	bne.n	800b526 <USB_EPStartXfer+0x2a0>
 800b524:	3a01      	subs	r2, #1
 800b526:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800b52a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b52e:	b292      	uxth	r2, r2
 800b530:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b534:	e01e      	b.n	800b574 <USB_EPStartXfer+0x2ee>
 800b536:	b98e      	cbnz	r6, 800b55c <USB_EPStartXfer+0x2d6>
 800b538:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800b53c:	b292      	uxth	r2, r2
 800b53e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b542:	b292      	uxth	r2, r2
 800b544:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b548:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800b54c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800b550:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b554:	b292      	uxth	r2, r2
 800b556:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b55a:	e00b      	b.n	800b574 <USB_EPStartXfer+0x2ee>
 800b55c:	0872      	lsrs	r2, r6, #1
 800b55e:	f016 0f01 	tst.w	r6, #1
 800b562:	d000      	beq.n	800b566 <USB_EPStartXfer+0x2e0>
 800b564:	3201      	adds	r2, #1
 800b566:	0292      	lsls	r2, r2, #10
 800b568:	b292      	uxth	r2, r2
 800b56a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b56e:	e001      	b.n	800b574 <USB_EPStartXfer+0x2ee>
 800b570:	2a01      	cmp	r2, #1
 800b572:	d027      	beq.n	800b5c4 <USB_EPStartXfer+0x33e>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b574:	b2b3      	uxth	r3, r6
 800b576:	8922      	ldrh	r2, [r4, #8]
 800b578:	6961      	ldr	r1, [r4, #20]
 800b57a:	4628      	mov	r0, r5
 800b57c:	f7ff fe6f 	bl	800b25e <USB_WritePMA>
            ep->xfer_buff += len;
 800b580:	6963      	ldr	r3, [r4, #20]
 800b582:	4433      	add	r3, r6
 800b584:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800b586:	6a23      	ldr	r3, [r4, #32]
 800b588:	6922      	ldr	r2, [r4, #16]
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d924      	bls.n	800b5d8 <USB_EPStartXfer+0x352>
              ep->xfer_len_db -= len;
 800b58e:	1b9b      	subs	r3, r3, r6
 800b590:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b592:	7863      	ldrb	r3, [r4, #1]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d140      	bne.n	800b61a <USB_EPStartXfer+0x394>
 800b598:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800b59c:	fa15 f383 	uxtah	r3, r5, r3
 800b5a0:	7822      	ldrb	r2, [r4, #0]
 800b5a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5a6:	2e3e      	cmp	r6, #62	; 0x3e
 800b5a8:	d91a      	bls.n	800b5e0 <USB_EPStartXfer+0x35a>
 800b5aa:	0972      	lsrs	r2, r6, #5
 800b5ac:	f016 0f1f 	tst.w	r6, #31
 800b5b0:	d100      	bne.n	800b5b4 <USB_EPStartXfer+0x32e>
 800b5b2:	3a01      	subs	r2, #1
 800b5b4:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800b5b8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b5bc:	b292      	uxth	r2, r2
 800b5be:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b5c2:	e02c      	b.n	800b61e <USB_EPStartXfer+0x398>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b5c4:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b5c8:	fa15 f282 	uxtah	r2, r5, r2
 800b5cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b5d0:	b2b2      	uxth	r2, r6
 800b5d2:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b5d6:	e7cd      	b.n	800b574 <USB_EPStartXfer+0x2ee>
              ep->xfer_len_db = 0U;
 800b5d8:	2200      	movs	r2, #0
 800b5da:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 800b5dc:	461e      	mov	r6, r3
 800b5de:	e7d8      	b.n	800b592 <USB_EPStartXfer+0x30c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b5e0:	b98e      	cbnz	r6, 800b606 <USB_EPStartXfer+0x380>
 800b5e2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800b5e6:	b292      	uxth	r2, r2
 800b5e8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b5ec:	b292      	uxth	r2, r2
 800b5ee:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b5f2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800b5f6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800b5fa:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b5fe:	b292      	uxth	r2, r2
 800b600:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b604:	e00b      	b.n	800b61e <USB_EPStartXfer+0x398>
 800b606:	0872      	lsrs	r2, r6, #1
 800b608:	f016 0f01 	tst.w	r6, #1
 800b60c:	d000      	beq.n	800b610 <USB_EPStartXfer+0x38a>
 800b60e:	3201      	adds	r2, #1
 800b610:	0292      	lsls	r2, r2, #10
 800b612:	b292      	uxth	r2, r2
 800b614:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b618:	e001      	b.n	800b61e <USB_EPStartXfer+0x398>
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d006      	beq.n	800b62c <USB_EPStartXfer+0x3a6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b61e:	b2b3      	uxth	r3, r6
 800b620:	8962      	ldrh	r2, [r4, #10]
 800b622:	6961      	ldr	r1, [r4, #20]
 800b624:	4628      	mov	r0, r5
 800b626:	f7ff fe1a 	bl	800b25e <USB_WritePMA>
 800b62a:	e6a2      	b.n	800b372 <USB_EPStartXfer+0xec>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b62c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800b630:	fa15 f383 	uxtah	r3, r5, r3
 800b634:	7822      	ldrb	r2, [r4, #0]
 800b636:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b63a:	b2b2      	uxth	r2, r6
 800b63c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b640:	e7ed      	b.n	800b61e <USB_EPStartXfer+0x398>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b642:	7821      	ldrb	r1, [r4, #0]
 800b644:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 800b648:	b292      	uxth	r2, r2
 800b64a:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 800b64e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b652:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b656:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b65a:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b65e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b662:	fa15 f282 	uxtah	r2, r5, r2
 800b666:	7821      	ldrb	r1, [r4, #0]
 800b668:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b66c:	b29b      	uxth	r3, r3
 800b66e:	f8a2 3402 	strh.w	r3, [r2, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b672:	8922      	ldrh	r2, [r4, #8]
 800b674:	6961      	ldr	r1, [r4, #20]
 800b676:	4628      	mov	r0, r5
 800b678:	f7ff fdf1 	bl	800b25e <USB_WritePMA>
 800b67c:	e679      	b.n	800b372 <USB_EPStartXfer+0xec>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b67e:	b98e      	cbnz	r6, 800b6a4 <USB_EPStartXfer+0x41e>
 800b680:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800b684:	b292      	uxth	r2, r2
 800b686:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b68a:	b292      	uxth	r2, r2
 800b68c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b690:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800b694:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800b698:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b69c:	b292      	uxth	r2, r2
 800b69e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b6a2:	e012      	b.n	800b6ca <USB_EPStartXfer+0x444>
 800b6a4:	0872      	lsrs	r2, r6, #1
 800b6a6:	f016 0f01 	tst.w	r6, #1
 800b6aa:	d000      	beq.n	800b6ae <USB_EPStartXfer+0x428>
 800b6ac:	3201      	adds	r2, #1
 800b6ae:	0292      	lsls	r2, r2, #10
 800b6b0:	b292      	uxth	r2, r2
 800b6b2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b6b6:	e008      	b.n	800b6ca <USB_EPStartXfer+0x444>
 800b6b8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b6bc:	fa15 f282 	uxtah	r2, r5, r2
 800b6c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b6c4:	b2b2      	uxth	r2, r6
 800b6c6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b6ca:	b2b3      	uxth	r3, r6
 800b6cc:	8962      	ldrh	r2, [r4, #10]
 800b6ce:	6961      	ldr	r1, [r4, #20]
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	f7ff fdc4 	bl	800b25e <USB_WritePMA>
 800b6d6:	e64c      	b.n	800b372 <USB_EPStartXfer+0xec>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b6d8:	bb8a      	cbnz	r2, 800b73e <USB_EPStartXfer+0x4b8>
 800b6da:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b6de:	fa15 f282 	uxtah	r2, r5, r2
 800b6e2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b6e6:	2e3e      	cmp	r6, #62	; 0x3e
 800b6e8:	d90c      	bls.n	800b704 <USB_EPStartXfer+0x47e>
 800b6ea:	0972      	lsrs	r2, r6, #5
 800b6ec:	f016 0f1f 	tst.w	r6, #31
 800b6f0:	d100      	bne.n	800b6f4 <USB_EPStartXfer+0x46e>
 800b6f2:	3a01      	subs	r2, #1
 800b6f4:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800b6f8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b6fc:	b292      	uxth	r2, r2
 800b6fe:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b702:	e025      	b.n	800b750 <USB_EPStartXfer+0x4ca>
 800b704:	b98e      	cbnz	r6, 800b72a <USB_EPStartXfer+0x4a4>
 800b706:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800b70a:	b292      	uxth	r2, r2
 800b70c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b710:	b292      	uxth	r2, r2
 800b712:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b716:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800b71a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800b71e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b722:	b292      	uxth	r2, r2
 800b724:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b728:	e012      	b.n	800b750 <USB_EPStartXfer+0x4ca>
 800b72a:	0872      	lsrs	r2, r6, #1
 800b72c:	f016 0f01 	tst.w	r6, #1
 800b730:	d000      	beq.n	800b734 <USB_EPStartXfer+0x4ae>
 800b732:	3201      	adds	r2, #1
 800b734:	0292      	lsls	r2, r2, #10
 800b736:	b292      	uxth	r2, r2
 800b738:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b73c:	e008      	b.n	800b750 <USB_EPStartXfer+0x4ca>
 800b73e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b742:	fa15 f282 	uxtah	r2, r5, r2
 800b746:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b74a:	b2b2      	uxth	r2, r6
 800b74c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b750:	b2b3      	uxth	r3, r6
 800b752:	8922      	ldrh	r2, [r4, #8]
 800b754:	6961      	ldr	r1, [r4, #20]
 800b756:	4628      	mov	r0, r5
 800b758:	f7ff fd81 	bl	800b25e <USB_WritePMA>
 800b75c:	e609      	b.n	800b372 <USB_EPStartXfer+0xec>
        ep->xfer_len = 0U;
 800b75e:	2200      	movs	r2, #0
 800b760:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 800b762:	461a      	mov	r2, r3
 800b764:	e5a0      	b.n	800b2a8 <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b766:	b98a      	cbnz	r2, 800b78c <USB_EPStartXfer+0x506>
 800b768:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800b76c:	b292      	uxth	r2, r2
 800b76e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b772:	b292      	uxth	r2, r2
 800b774:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b778:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800b77c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800b780:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b784:	b292      	uxth	r2, r2
 800b786:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b78a:	e5a3      	b.n	800b2d4 <USB_EPStartXfer+0x4e>
 800b78c:	0851      	lsrs	r1, r2, #1
 800b78e:	f012 0f01 	tst.w	r2, #1
 800b792:	d000      	beq.n	800b796 <USB_EPStartXfer+0x510>
 800b794:	3101      	adds	r1, #1
 800b796:	0289      	lsls	r1, r1, #10
 800b798:	b289      	uxth	r1, r1
 800b79a:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 800b79e:	e599      	b.n	800b2d4 <USB_EPStartXfer+0x4e>
      if (ep->type == EP_TYPE_BULK)
 800b7a0:	78cb      	ldrb	r3, [r1, #3]
 800b7a2:	2b02      	cmp	r3, #2
 800b7a4:	d03b      	beq.n	800b81e <USB_EPStartXfer+0x598>
      else if (ep->type == EP_TYPE_ISOC)
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	f040 811b 	bne.w	800b9e2 <USB_EPStartXfer+0x75c>
        if (ep->xfer_len > ep->maxpacket)
 800b7ac:	6989      	ldr	r1, [r1, #24]
 800b7ae:	6923      	ldr	r3, [r4, #16]
 800b7b0:	4299      	cmp	r1, r3
 800b7b2:	f240 80ca 	bls.w	800b94a <USB_EPStartXfer+0x6c4>
          ep->xfer_len -= len;
 800b7b6:	1ac9      	subs	r1, r1, r3
 800b7b8:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b7ba:	b9aa      	cbnz	r2, 800b7e8 <USB_EPStartXfer+0x562>
 800b7bc:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b7c0:	fa15 f282 	uxtah	r2, r5, r2
 800b7c4:	7821      	ldrb	r1, [r4, #0]
 800b7c6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b7ca:	2b3e      	cmp	r3, #62	; 0x3e
 800b7cc:	f240 80c1 	bls.w	800b952 <USB_EPStartXfer+0x6cc>
 800b7d0:	0959      	lsrs	r1, r3, #5
 800b7d2:	f013 0f1f 	tst.w	r3, #31
 800b7d6:	d100      	bne.n	800b7da <USB_EPStartXfer+0x554>
 800b7d8:	3901      	subs	r1, #1
 800b7da:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800b7de:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800b7e2:	b289      	uxth	r1, r1
 800b7e4:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800b7e8:	7862      	ldrb	r2, [r4, #1]
 800b7ea:	2a00      	cmp	r2, #0
 800b7ec:	f040 80eb 	bne.w	800b9c6 <USB_EPStartXfer+0x740>
 800b7f0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b7f4:	fa15 f282 	uxtah	r2, r5, r2
 800b7f8:	7821      	ldrb	r1, [r4, #0]
 800b7fa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b7fe:	2b3e      	cmp	r3, #62	; 0x3e
 800b800:	f240 80c4 	bls.w	800b98c <USB_EPStartXfer+0x706>
 800b804:	0959      	lsrs	r1, r3, #5
 800b806:	f013 0f1f 	tst.w	r3, #31
 800b80a:	d100      	bne.n	800b80e <USB_EPStartXfer+0x588>
 800b80c:	3901      	subs	r1, #1
 800b80e:	ea6f 63c1 	mvn.w	r3, r1, lsl #27
 800b812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b816:	b29b      	uxth	r3, r3
 800b818:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800b81c:	e55a      	b.n	800b2d4 <USB_EPStartXfer+0x4e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b81e:	b9aa      	cbnz	r2, 800b84c <USB_EPStartXfer+0x5c6>
 800b820:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800b824:	fa10 f383 	uxtah	r3, r0, r3
 800b828:	780a      	ldrb	r2, [r1, #0]
 800b82a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b82e:	6909      	ldr	r1, [r1, #16]
 800b830:	293e      	cmp	r1, #62	; 0x3e
 800b832:	d925      	bls.n	800b880 <USB_EPStartXfer+0x5fa>
 800b834:	094a      	lsrs	r2, r1, #5
 800b836:	f011 0f1f 	tst.w	r1, #31
 800b83a:	d100      	bne.n	800b83e <USB_EPStartXfer+0x5b8>
 800b83c:	3a01      	subs	r2, #1
 800b83e:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800b842:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b846:	b292      	uxth	r2, r2
 800b848:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b84c:	7863      	ldrb	r3, [r4, #1]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d150      	bne.n	800b8f4 <USB_EPStartXfer+0x66e>
 800b852:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800b856:	fa15 f383 	uxtah	r3, r5, r3
 800b85a:	7822      	ldrb	r2, [r4, #0]
 800b85c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b860:	6921      	ldr	r1, [r4, #16]
 800b862:	293e      	cmp	r1, #62	; 0x3e
 800b864:	d929      	bls.n	800b8ba <USB_EPStartXfer+0x634>
 800b866:	094a      	lsrs	r2, r1, #5
 800b868:	f011 0f1f 	tst.w	r1, #31
 800b86c:	d100      	bne.n	800b870 <USB_EPStartXfer+0x5ea>
 800b86e:	3a01      	subs	r2, #1
 800b870:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800b874:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b878:	b292      	uxth	r2, r2
 800b87a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b87e:	e03b      	b.n	800b8f8 <USB_EPStartXfer+0x672>
 800b880:	b989      	cbnz	r1, 800b8a6 <USB_EPStartXfer+0x620>
 800b882:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800b886:	b292      	uxth	r2, r2
 800b888:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b88c:	b292      	uxth	r2, r2
 800b88e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b892:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800b896:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800b89a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b89e:	b292      	uxth	r2, r2
 800b8a0:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b8a4:	e7d2      	b.n	800b84c <USB_EPStartXfer+0x5c6>
 800b8a6:	084a      	lsrs	r2, r1, #1
 800b8a8:	f011 0f01 	tst.w	r1, #1
 800b8ac:	d000      	beq.n	800b8b0 <USB_EPStartXfer+0x62a>
 800b8ae:	3201      	adds	r2, #1
 800b8b0:	0292      	lsls	r2, r2, #10
 800b8b2:	b292      	uxth	r2, r2
 800b8b4:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800b8b8:	e7c8      	b.n	800b84c <USB_EPStartXfer+0x5c6>
 800b8ba:	b989      	cbnz	r1, 800b8e0 <USB_EPStartXfer+0x65a>
 800b8bc:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800b8c0:	b292      	uxth	r2, r2
 800b8c2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b8c6:	b292      	uxth	r2, r2
 800b8c8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b8cc:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800b8d0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800b8d4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800b8d8:	b292      	uxth	r2, r2
 800b8da:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b8de:	e00b      	b.n	800b8f8 <USB_EPStartXfer+0x672>
 800b8e0:	084a      	lsrs	r2, r1, #1
 800b8e2:	f011 0f01 	tst.w	r1, #1
 800b8e6:	d000      	beq.n	800b8ea <USB_EPStartXfer+0x664>
 800b8e8:	3201      	adds	r2, #1
 800b8ea:	0292      	lsls	r2, r2, #10
 800b8ec:	b292      	uxth	r2, r2
 800b8ee:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b8f2:	e001      	b.n	800b8f8 <USB_EPStartXfer+0x672>
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d01d      	beq.n	800b934 <USB_EPStartXfer+0x6ae>
        if (ep->xfer_count != 0U)
 800b8f8:	69e3      	ldr	r3, [r4, #28]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	f43f acea 	beq.w	800b2d4 <USB_EPStartXfer+0x4e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b900:	7822      	ldrb	r2, [r4, #0]
 800b902:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b906:	f244 0340 	movw	r3, #16448	; 0x4040
 800b90a:	ea03 0001 	and.w	r0, r3, r1
 800b90e:	438b      	bics	r3, r1
 800b910:	d002      	beq.n	800b918 <USB_EPStartXfer+0x692>
 800b912:	2800      	cmp	r0, #0
 800b914:	f47f acde 	bne.w	800b2d4 <USB_EPStartXfer+0x4e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b918:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b92a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b92e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 800b932:	e4cf      	b.n	800b2d4 <USB_EPStartXfer+0x4e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b934:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800b938:	fa15 f383 	uxtah	r3, r5, r3
 800b93c:	7822      	ldrb	r2, [r4, #0]
 800b93e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b942:	8a22      	ldrh	r2, [r4, #16]
 800b944:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800b948:	e7d6      	b.n	800b8f8 <USB_EPStartXfer+0x672>
          ep->xfer_len = 0U;
 800b94a:	2300      	movs	r3, #0
 800b94c:	61a3      	str	r3, [r4, #24]
          len = ep->xfer_len;
 800b94e:	460b      	mov	r3, r1
 800b950:	e733      	b.n	800b7ba <USB_EPStartXfer+0x534>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b952:	b98b      	cbnz	r3, 800b978 <USB_EPStartXfer+0x6f2>
 800b954:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 800b958:	b289      	uxth	r1, r1
 800b95a:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800b95e:	b289      	uxth	r1, r1
 800b960:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800b964:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 800b968:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800b96c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800b970:	b289      	uxth	r1, r1
 800b972:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800b976:	e737      	b.n	800b7e8 <USB_EPStartXfer+0x562>
 800b978:	0859      	lsrs	r1, r3, #1
 800b97a:	f013 0f01 	tst.w	r3, #1
 800b97e:	d000      	beq.n	800b982 <USB_EPStartXfer+0x6fc>
 800b980:	3101      	adds	r1, #1
 800b982:	0289      	lsls	r1, r1, #10
 800b984:	b289      	uxth	r1, r1
 800b986:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800b98a:	e72d      	b.n	800b7e8 <USB_EPStartXfer+0x562>
 800b98c:	b98b      	cbnz	r3, 800b9b2 <USB_EPStartXfer+0x72c>
 800b98e:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 800b992:	b29b      	uxth	r3, r3
 800b994:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b998:	b29b      	uxth	r3, r3
 800b99a:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800b99e:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 800b9a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800b9b0:	e490      	b.n	800b2d4 <USB_EPStartXfer+0x4e>
 800b9b2:	0859      	lsrs	r1, r3, #1
 800b9b4:	f013 0f01 	tst.w	r3, #1
 800b9b8:	d000      	beq.n	800b9bc <USB_EPStartXfer+0x736>
 800b9ba:	3101      	adds	r1, #1
 800b9bc:	028b      	lsls	r3, r1, #10
 800b9be:	b29b      	uxth	r3, r3
 800b9c0:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800b9c4:	e486      	b.n	800b2d4 <USB_EPStartXfer+0x4e>
 800b9c6:	2a01      	cmp	r2, #1
 800b9c8:	f47f ac84 	bne.w	800b2d4 <USB_EPStartXfer+0x4e>
 800b9cc:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800b9d0:	fa15 f282 	uxtah	r2, r5, r2
 800b9d4:	7821      	ldrb	r1, [r4, #0]
 800b9d6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800b9e0:	e478      	b.n	800b2d4 <USB_EPStartXfer+0x4e>
        return HAL_ERROR;
 800b9e2:	2001      	movs	r0, #1
 800b9e4:	e487      	b.n	800b2f6 <USB_EPStartXfer+0x70>

0800b9e6 <USB_ReadPMA>:
>>>>>>> render
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
<<<<<<< HEAD
 800bb0e:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bb10:	085c      	lsrs	r4, r3, #1
=======
 800b9e6:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b9e8:	085c      	lsrs	r4, r3, #1
>>>>>>> render
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
<<<<<<< HEAD
 800bb12:	4410      	add	r0, r2
 800bb14:	f500 6080 	add.w	r0, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800bb18:	e007      	b.n	800bb2a <USB_ReadPMA+0x1c>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800bb1a:	f830 2b02 	ldrh.w	r2, [r0], #2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bb1e:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800bb20:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800bb24:	704a      	strb	r2, [r1, #1]
    pBuf++;
 800bb26:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 800bb28:	3c01      	subs	r4, #1
 800bb2a:	2c00      	cmp	r4, #0
 800bb2c:	d1f5      	bne.n	800bb1a <USB_ReadPMA+0xc>
=======
 800b9ea:	4410      	add	r0, r2
 800b9ec:	f500 6080 	add.w	r0, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800b9f0:	e007      	b.n	800ba02 <USB_ReadPMA+0x1c>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b9f2:	f830 2b02 	ldrh.w	r2, [r0], #2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b9f6:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b9f8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800b9fc:	704a      	strb	r2, [r1, #1]
    pBuf++;
 800b9fe:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 800ba00:	3c01      	subs	r4, #1
 800ba02:	2c00      	cmp	r4, #0
 800ba04:	d1f5      	bne.n	800b9f2 <USB_ReadPMA+0xc>
>>>>>>> render
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
<<<<<<< HEAD
 800bb2e:	f013 0f01 	tst.w	r3, #1
 800bb32:	d001      	beq.n	800bb38 <USB_ReadPMA+0x2a>
  {
    temp = *pdwVal;
 800bb34:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bb36:	700b      	strb	r3, [r1, #0]
  }
}
 800bb38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb3c:	4770      	bx	lr
	...

0800bb40 <LCD_IO_Init>:
=======
 800ba06:	f013 0f01 	tst.w	r3, #1
 800ba0a:	d001      	beq.n	800ba10 <USB_ReadPMA+0x2a>
  {
    temp = *pdwVal;
 800ba0c:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ba0e:	700b      	strb	r3, [r1, #0]
  }
}
 800ba10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba14:	4770      	bx	lr
	...

0800ba18 <LCD_IO_Init>:
>>>>>>> render
/*!
 * @brief Nizkonivojska inicializacija zaslona
 * @internal
 */
static void LCD_IO_Init()
{
<<<<<<< HEAD
 800bb40:	b538      	push	{r3, r4, r5, lr}
	LCD_RST_LOW();
 800bb42:	4c05      	ldr	r4, [pc, #20]	; (800bb58 <LCD_IO_Init+0x18>)
 800bb44:	2508      	movs	r5, #8
 800bb46:	62a5      	str	r5, [r4, #40]	; 0x28
	HAL_Delay(120);
 800bb48:	2078      	movs	r0, #120	; 0x78
 800bb4a:	f7f9 fd1b 	bl	8005584 <HAL_Delay>
	LCD_RST_HIGH();
 800bb4e:	61a5      	str	r5, [r4, #24]
	HAL_Delay(120);
 800bb50:	2078      	movs	r0, #120	; 0x78
 800bb52:	f7f9 fd17 	bl	8005584 <HAL_Delay>
}
 800bb56:	bd38      	pop	{r3, r4, r5, pc}
 800bb58:	48000c00 	.word	0x48000c00

0800bb5c <LCD_SetBacklight>:
=======
 800ba18:	b538      	push	{r3, r4, r5, lr}
	LCD_RST_LOW();
 800ba1a:	4c05      	ldr	r4, [pc, #20]	; (800ba30 <LCD_IO_Init+0x18>)
 800ba1c:	2508      	movs	r5, #8
 800ba1e:	62a5      	str	r5, [r4, #40]	; 0x28
	HAL_Delay(120);
 800ba20:	2078      	movs	r0, #120	; 0x78
 800ba22:	f7f9 fd1b 	bl	800545c <HAL_Delay>
	LCD_RST_HIGH();
 800ba26:	61a5      	str	r5, [r4, #24]
	HAL_Delay(120);
 800ba28:	2078      	movs	r0, #120	; 0x78
 800ba2a:	f7f9 fd17 	bl	800545c <HAL_Delay>
}
 800ba2e:	bd38      	pop	{r3, r4, r5, pc}
 800ba30:	48000c00 	.word	0x48000c00

0800ba34 <LCD_SetBacklight>:
>>>>>>> render
 * @param state logična vrednost
 */

void LCD_SetBacklight(uint8_t state)
{
	if (state == 1)
<<<<<<< HEAD
 800bb5c:	2801      	cmp	r0, #1
 800bb5e:	d003      	beq.n	800bb68 <LCD_SetBacklight+0xc>
		LCD_BCKL_ON();
	else
		LCD_BCKL_OFF();
 800bb60:	4b03      	ldr	r3, [pc, #12]	; (800bb70 <LCD_SetBacklight+0x14>)
 800bb62:	2240      	movs	r2, #64	; 0x40
 800bb64:	629a      	str	r2, [r3, #40]	; 0x28
}
 800bb66:	4770      	bx	lr
		LCD_BCKL_ON();
 800bb68:	4b01      	ldr	r3, [pc, #4]	; (800bb70 <LCD_SetBacklight+0x14>)
 800bb6a:	2240      	movs	r2, #64	; 0x40
 800bb6c:	619a      	str	r2, [r3, #24]
 800bb6e:	4770      	bx	lr
 800bb70:	48000400 	.word	0x48000400

0800bb74 <LCD_FillRect>:
=======
 800ba34:	2801      	cmp	r0, #1
 800ba36:	d003      	beq.n	800ba40 <LCD_SetBacklight+0xc>
		LCD_BCKL_ON();
	else
		LCD_BCKL_OFF();
 800ba38:	4b03      	ldr	r3, [pc, #12]	; (800ba48 <LCD_SetBacklight+0x14>)
 800ba3a:	2240      	movs	r2, #64	; 0x40
 800ba3c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ba3e:	4770      	bx	lr
		LCD_BCKL_ON();
 800ba40:	4b01      	ldr	r3, [pc, #4]	; (800ba48 <LCD_SetBacklight+0x14>)
 800ba42:	2240      	movs	r2, #64	; 0x40
 800ba44:	619a      	str	r2, [r3, #24]
 800ba46:	4770      	bx	lr
 800ba48:	48000400 	.word	0x48000400

0800ba4c <LCD_FillRect>:
>>>>>>> render
 *
 * Funkcija izbere želeno območje, potem pa tolikokrat pošlje izbrano barvo,
 * kolikor slikovnih točk je potrebnih.
 */
void LCD_FillRect(uint32_t x, uint32_t y, uint32_t w, uint32_t h, uint16_t c)
{
<<<<<<< HEAD
 800bb74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb78:	4607      	mov	r7, r0
 800bb7a:	4688      	mov	r8, r1
 800bb7c:	4615      	mov	r5, r2
 800bb7e:	461e      	mov	r6, r3
	uint32_t max_count   = ILI9341_GetParam(LCD_AREA);     /* Št. vseh pikslov     */
 800bb80:	2002      	movs	r0, #2
 800bb82:	f000 f967 	bl	800be54 <ILI9341_GetParam>
 800bb86:	4604      	mov	r4, r0
	uint32_t pixel_count = w*h;  /* Dejansko št. pikslov */
 800bb88:	fb06 f305 	mul.w	r3, r6, r5

	if(pixel_count > max_count)
 800bb8c:	4298      	cmp	r0, r3
 800bb8e:	d300      	bcc.n	800bb92 <LCD_FillRect+0x1e>
	uint32_t pixel_count = w*h;  /* Dejansko št. pikslov */
 800bb90:	461c      	mov	r4, r3
=======
 800ba4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba50:	4607      	mov	r7, r0
 800ba52:	4688      	mov	r8, r1
 800ba54:	4615      	mov	r5, r2
 800ba56:	461e      	mov	r6, r3
	uint32_t max_count   = ILI9341_GetParam(LCD_AREA);     /* Št. vseh pikslov     */
 800ba58:	2002      	movs	r0, #2
 800ba5a:	f000 f967 	bl	800bd2c <ILI9341_GetParam>
 800ba5e:	4604      	mov	r4, r0
	uint32_t pixel_count = w*h;  /* Dejansko št. pikslov */
 800ba60:	fb06 f305 	mul.w	r3, r6, r5

	if(pixel_count > max_count)
 800ba64:	4298      	cmp	r0, r3
 800ba66:	d300      	bcc.n	800ba6a <LCD_FillRect+0x1e>
	uint32_t pixel_count = w*h;  /* Dejansko št. pikslov */
 800ba68:	461c      	mov	r4, r3
>>>>>>> render
		pixel_count = max_count;

	// Izbor koordinat piksla
	ILI9341_SetDisplayWindow(x, y, w, h);
<<<<<<< HEAD
 800bb92:	4633      	mov	r3, r6
 800bb94:	462a      	mov	r2, r5
 800bb96:	4641      	mov	r1, r8
 800bb98:	4638      	mov	r0, r7
 800bb9a:	f000 f87d 	bl	800bc98 <ILI9341_SetDisplayWindow>

#ifdef ILI9341_USEDMA
	ILI9341_SendRepeatedDataDMA(c, pixel_count);
 800bb9e:	4621      	mov	r1, r4
 800bba0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800bba4:	f000 f910 	bl	800bdc8 <ILI9341_SendRepeatedDataDMA>
=======
 800ba6a:	4633      	mov	r3, r6
 800ba6c:	462a      	mov	r2, r5
 800ba6e:	4641      	mov	r1, r8
 800ba70:	4638      	mov	r0, r7
 800ba72:	f000 f87d 	bl	800bb70 <ILI9341_SetDisplayWindow>

#ifdef ILI9341_USEDMA
	ILI9341_SendRepeatedDataDMA(c, pixel_count);
 800ba76:	4621      	mov	r1, r4
 800ba78:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800ba7c:	f000 f910 	bl	800bca0 <ILI9341_SendRepeatedDataDMA>
>>>>>>> render
#else
	ILI9341_SendRepeatedData(c, pixel_count);
#endif

}
<<<<<<< HEAD
 800bba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bbac <LCD_ClearScreen>:
=======
 800ba80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ba84 <LCD_ClearScreen>:
>>>>>>> render

/*!
 * @brief Počisti zaslon (prebarvaj s črno barvo)
 */
void LCD_ClearScreen()
{
<<<<<<< HEAD
 800bbac:	b510      	push	{r4, lr}
 800bbae:	b082      	sub	sp, #8
    LCD_FillRect(0, 0, ILI9341_GetParam(LCD_WIDTH), ILI9341_GetParam(LCD_HEIGHT), 0);
 800bbb0:	2000      	movs	r0, #0
 800bbb2:	f000 f94f 	bl	800be54 <ILI9341_GetParam>
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	2001      	movs	r0, #1
 800bbba:	f000 f94b 	bl	800be54 <ILI9341_GetParam>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2000      	movs	r0, #0
 800bbc2:	9000      	str	r0, [sp, #0]
 800bbc4:	4622      	mov	r2, r4
 800bbc6:	4601      	mov	r1, r0
 800bbc8:	f7ff ffd4 	bl	800bb74 <LCD_FillRect>
}
 800bbcc:	b002      	add	sp, #8
 800bbce:	bd10      	pop	{r4, pc}

0800bbd0 <LCD_Init>:
{
 800bbd0:	b508      	push	{r3, lr}
	LCD_IO_Init();
 800bbd2:	f7ff ffb5 	bl	800bb40 <LCD_IO_Init>
	ILI9341_Init(ILI9341_COLORSPACE_RBG565, ILI9341_MISKO_ROTATE_0);
 800bbd6:	2103      	movs	r1, #3
 800bbd8:	2055      	movs	r0, #85	; 0x55
 800bbda:	f000 f8ab 	bl	800bd34 <ILI9341_Init>
	ILI9341_DisplayOn();
 800bbde:	f000 f92d 	bl	800be3c <ILI9341_DisplayOn>
	LCD_ClearScreen();
 800bbe2:	f7ff ffe3 	bl	800bbac <LCD_ClearScreen>
	ILI9341_WaitTransfer();
 800bbe6:	f000 f815 	bl	800bc14 <ILI9341_WaitTransfer>
	LCD_SetBacklight(1);
 800bbea:	2001      	movs	r0, #1
 800bbec:	f7ff ffb6 	bl	800bb5c <LCD_SetBacklight>
}
 800bbf0:	bd08      	pop	{r3, pc}
	...

0800bbf4 <ILI9341_SendData>:
=======
 800ba84:	b510      	push	{r4, lr}
 800ba86:	b082      	sub	sp, #8
    LCD_FillRect(0, 0, ILI9341_GetParam(LCD_WIDTH), ILI9341_GetParam(LCD_HEIGHT), 0);
 800ba88:	2000      	movs	r0, #0
 800ba8a:	f000 f94f 	bl	800bd2c <ILI9341_GetParam>
 800ba8e:	4604      	mov	r4, r0
 800ba90:	2001      	movs	r0, #1
 800ba92:	f000 f94b 	bl	800bd2c <ILI9341_GetParam>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2000      	movs	r0, #0
 800ba9a:	9000      	str	r0, [sp, #0]
 800ba9c:	4622      	mov	r2, r4
 800ba9e:	4601      	mov	r1, r0
 800baa0:	f7ff ffd4 	bl	800ba4c <LCD_FillRect>
}
 800baa4:	b002      	add	sp, #8
 800baa6:	bd10      	pop	{r4, pc}

0800baa8 <LCD_Init>:
{
 800baa8:	b508      	push	{r3, lr}
	LCD_IO_Init();
 800baaa:	f7ff ffb5 	bl	800ba18 <LCD_IO_Init>
	ILI9341_Init(ILI9341_COLORSPACE_RBG565, ILI9341_MISKO_ROTATE_0);
 800baae:	2103      	movs	r1, #3
 800bab0:	2055      	movs	r0, #85	; 0x55
 800bab2:	f000 f8ab 	bl	800bc0c <ILI9341_Init>
	ILI9341_DisplayOn();
 800bab6:	f000 f92d 	bl	800bd14 <ILI9341_DisplayOn>
	LCD_ClearScreen();
 800baba:	f7ff ffe3 	bl	800ba84 <LCD_ClearScreen>
	ILI9341_WaitTransfer();
 800babe:	f000 f815 	bl	800baec <ILI9341_WaitTransfer>
	LCD_SetBacklight(1);
 800bac2:	2001      	movs	r0, #1
 800bac4:	f7ff ffb6 	bl	800ba34 <LCD_SetBacklight>
}
 800bac8:	bd08      	pop	{r3, pc}
	...

0800bacc <ILI9341_SendData>:
>>>>>>> render
 */
void ILI9341_SendData(LCD_IO_Data_t *data, uint32_t length)
{
	uint8_t increment = LCD_IO_DATA_WRITE_CYCLES;

	for (uint32_t i = 0; i < (length/increment); i += increment)
<<<<<<< HEAD
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	e007      	b.n	800bc08 <ILI9341_SendData+0x14>
		FMC_BANK1_WriteData(data[i]);
 800bbf8:	f830 c013 	ldrh.w	ip, [r0, r3, lsl #1]
	*(LCD_IO_Data_t *)(FMC_BANK1_MEM) = data;
 800bbfc:	4a04      	ldr	r2, [pc, #16]	; (800bc10 <ILI9341_SendData+0x1c>)
 800bbfe:	f8a2 c000 	strh.w	ip, [r2]
  __ASM volatile ("dsb 0xF":::"memory");
 800bc02:	f3bf 8f4f 	dsb	sy
	for (uint32_t i = 0; i < (length/increment); i += increment)
 800bc06:	3301      	adds	r3, #1
 800bc08:	428b      	cmp	r3, r1
 800bc0a:	d3f5      	bcc.n	800bbf8 <ILI9341_SendData+0x4>
}
 800bc0c:	4770      	bx	lr
 800bc0e:	bf00      	nop
 800bc10:	60010000 	.word	0x60010000

0800bc14 <ILI9341_WaitTransfer>:
=======
 800bacc:	2300      	movs	r3, #0
 800bace:	e007      	b.n	800bae0 <ILI9341_SendData+0x14>
		FMC_BANK1_WriteData(data[i]);
 800bad0:	f830 c013 	ldrh.w	ip, [r0, r3, lsl #1]
	*(LCD_IO_Data_t *)(FMC_BANK1_MEM) = data;
 800bad4:	4a04      	ldr	r2, [pc, #16]	; (800bae8 <ILI9341_SendData+0x1c>)
 800bad6:	f8a2 c000 	strh.w	ip, [r2]
  __ASM volatile ("dsb 0xF":::"memory");
 800bada:	f3bf 8f4f 	dsb	sy
	for (uint32_t i = 0; i < (length/increment); i += increment)
 800bade:	3301      	adds	r3, #1
 800bae0:	428b      	cmp	r3, r1
 800bae2:	d3f5      	bcc.n	800bad0 <ILI9341_SendData+0x4>
}
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop
 800bae8:	60010000 	.word	0x60010000

0800baec <ILI9341_WaitTransfer>:
>>>>>>> render
#endif
}

//! @brief Počakaj na prenos podatka FSMC->Ili9341.
void ILI9341_WaitTransfer()
{
<<<<<<< HEAD
 800bc14:	b508      	push	{r3, lr}
#ifdef ILI9341_USEDMA
	while (HAL_DMA_GetState(&hLCDDMA) != HAL_DMA_STATE_READY);
 800bc16:	4803      	ldr	r0, [pc, #12]	; (800bc24 <ILI9341_WaitTransfer+0x10>)
 800bc18:	f7fa fee5 	bl	80069e6 <HAL_DMA_GetState>
 800bc1c:	2801      	cmp	r0, #1
 800bc1e:	d1fa      	bne.n	800bc16 <ILI9341_WaitTransfer+0x2>
#endif
}
 800bc20:	bd08      	pop	{r3, pc}
 800bc22:	bf00      	nop
 800bc24:	200006e8 	.word	0x200006e8

0800bc28 <ILI9341_SetAddress>:
{
 800bc28:	b510      	push	{r4, lr}
 800bc2a:	4604      	mov	r4, r0
	ILI9341_WaitTransfer();
 800bc2c:	f7ff fff2 	bl	800bc14 <ILI9341_WaitTransfer>
	FMC_BANK1_SetAddress(*address);
 800bc30:	8822      	ldrh	r2, [r4, #0]
	*(LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 800bc32:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800bc36:	801a      	strh	r2, [r3, #0]
 800bc38:	f3bf 8f4f 	dsb	sy
}
 800bc3c:	bd10      	pop	{r4, pc}
	...

0800bc40 <ILI9341_SetOrientation>:
{
 800bc40:	b510      	push	{r4, lr}
 800bc42:	b082      	sub	sp, #8
 800bc44:	4604      	mov	r4, r0
	ILI9341_Data_t command   = ILI9341_MAC; /* Memory Access Control */
 800bc46:	2336      	movs	r3, #54	; 0x36
 800bc48:	f8ad 3006 	strh.w	r3, [sp, #6]
	ILI9341_Data_t parameter = (ILI9341_Data_t)orientations[orientation];
 800bc4c:	4b10      	ldr	r3, [pc, #64]	; (800bc90 <ILI9341_SetOrientation+0x50>)
 800bc4e:	f833 3020 	ldrh.w	r3, [r3, r0, lsl #2]
 800bc52:	f8ad 3004 	strh.w	r3, [sp, #4]
	ILI9341_SetAddress(&command);
 800bc56:	f10d 0006 	add.w	r0, sp, #6
 800bc5a:	f7ff ffe5 	bl	800bc28 <ILI9341_SetAddress>
	ILI9341_SendData(&parameter, 1);
 800bc5e:	2101      	movs	r1, #1
 800bc60:	a801      	add	r0, sp, #4
 800bc62:	f7ff ffc7 	bl	800bbf4 <ILI9341_SendData>
	switch (orientation) {
 800bc66:	b144      	cbz	r4, 800bc7a <ILI9341_SetOrientation+0x3a>
 800bc68:	2c03      	cmp	r4, #3
 800bc6a:	d006      	beq.n	800bc7a <ILI9341_SetOrientation+0x3a>
		LCD.width  = ILI9341_WIDTH;
 800bc6c:	4b09      	ldr	r3, [pc, #36]	; (800bc94 <ILI9341_SetOrientation+0x54>)
 800bc6e:	22f0      	movs	r2, #240	; 0xf0
 800bc70:	601a      	str	r2, [r3, #0]
		LCD.height = ILI9341_HEIGHT;
 800bc72:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800bc76:	605a      	str	r2, [r3, #4]
		break;
 800bc78:	e005      	b.n	800bc86 <ILI9341_SetOrientation+0x46>
		LCD.width  = ILI9341_HEIGHT;
 800bc7a:	4b06      	ldr	r3, [pc, #24]	; (800bc94 <ILI9341_SetOrientation+0x54>)
 800bc7c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800bc80:	601a      	str	r2, [r3, #0]
		LCD.height = ILI9341_WIDTH;
 800bc82:	22f0      	movs	r2, #240	; 0xf0
 800bc84:	605a      	str	r2, [r3, #4]
	LCD.orientation = orientation;
 800bc86:	4b03      	ldr	r3, [pc, #12]	; (800bc94 <ILI9341_SetOrientation+0x54>)
 800bc88:	609c      	str	r4, [r3, #8]
}
 800bc8a:	b002      	add	sp, #8
 800bc8c:	bd10      	pop	{r4, pc}
 800bc8e:	bf00      	nop
 800bc90:	08013080 	.word	0x08013080
 800bc94:	200114a4 	.word	0x200114a4

0800bc98 <ILI9341_SetDisplayWindow>:
{
 800bc98:	b530      	push	{r4, r5, lr}
 800bc9a:	b085      	sub	sp, #20
 800bc9c:	460c      	mov	r4, r1
 800bc9e:	461d      	mov	r5, r3
	command = ILI9341_CASET;
 800bca0:	232a      	movs	r3, #42	; 0x2a
 800bca2:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = (ILI9341_Data_t)(Xpos >> 8U);
 800bca6:	f3c0 230f 	ubfx	r3, r0, #8, #16
 800bcaa:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter[1] = (ILI9341_Data_t)(Xpos & 0xFFU);
 800bcae:	b2c3      	uxtb	r3, r0
 800bcb0:	f8ad 3006 	strh.w	r3, [sp, #6]
	parameter[2] = (ILI9341_Data_t)((Xpos + Width - 1U) >> 8U);
 800bcb4:	1883      	adds	r3, r0, r2
 800bcb6:	3b01      	subs	r3, #1
 800bcb8:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800bcbc:	f8ad 3008 	strh.w	r3, [sp, #8]
	parameter[3] = (ILI9341_Data_t)((Xpos + Width - 1U) & 0xFFU);
 800bcc0:	fa12 f080 	uxtah	r0, r2, r0
 800bcc4:	b280      	uxth	r0, r0
 800bcc6:	3801      	subs	r0, #1
 800bcc8:	b2c0      	uxtb	r0, r0
 800bcca:	f8ad 000a 	strh.w	r0, [sp, #10]
	ILI9341_SetAddress(&command);
 800bcce:	f10d 000e 	add.w	r0, sp, #14
 800bcd2:	f7ff ffa9 	bl	800bc28 <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 4);
 800bcd6:	2104      	movs	r1, #4
 800bcd8:	eb0d 0001 	add.w	r0, sp, r1
 800bcdc:	f7ff ff8a 	bl	800bbf4 <ILI9341_SendData>
	command = ILI9341_RASET;
 800bce0:	232b      	movs	r3, #43	; 0x2b
 800bce2:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter [0] = (ILI9341_Data_t)(Ypos >> 8U);
 800bce6:	f3c4 230f 	ubfx	r3, r4, #8, #16
 800bcea:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter [1] = (ILI9341_Data_t)(Ypos & 0xFFU);
 800bcee:	b2e3      	uxtb	r3, r4
 800bcf0:	f8ad 3006 	strh.w	r3, [sp, #6]
	parameter [2] = (ILI9341_Data_t)((Ypos + Height - 1U) >> 8U);
 800bcf4:	1962      	adds	r2, r4, r5
 800bcf6:	3a01      	subs	r2, #1
 800bcf8:	f3c2 220f 	ubfx	r2, r2, #8, #16
 800bcfc:	f8ad 2008 	strh.w	r2, [sp, #8]
	parameter [3] = (ILI9341_Data_t)((Ypos + Height - 1U) & 0xFFU);
 800bd00:	fa15 f484 	uxtah	r4, r5, r4
 800bd04:	b2a4      	uxth	r4, r4
 800bd06:	3c01      	subs	r4, #1
 800bd08:	b2e4      	uxtb	r4, r4
 800bd0a:	f8ad 400a 	strh.w	r4, [sp, #10]
	ILI9341_SetAddress(&command);
 800bd0e:	f10d 000e 	add.w	r0, sp, #14
 800bd12:	f7ff ff89 	bl	800bc28 <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 4);
 800bd16:	2104      	movs	r1, #4
 800bd18:	eb0d 0001 	add.w	r0, sp, r1
 800bd1c:	f7ff ff6a 	bl	800bbf4 <ILI9341_SendData>
	command = ILI9341_GRAM;
 800bd20:	232c      	movs	r3, #44	; 0x2c
 800bd22:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 800bd26:	f10d 000e 	add.w	r0, sp, #14
 800bd2a:	f7ff ff7d 	bl	800bc28 <ILI9341_SetAddress>
}
 800bd2e:	b005      	add	sp, #20
 800bd30:	bd30      	pop	{r4, r5, pc}
	...

0800bd34 <ILI9341_Init>:
{
 800bd34:	b510      	push	{r4, lr}
 800bd36:	b084      	sub	sp, #16
 800bd38:	4604      	mov	r4, r0
	ILI9341_SetOrientation(orientation);
 800bd3a:	4608      	mov	r0, r1
 800bd3c:	f7ff ff80 	bl	800bc40 <ILI9341_SetOrientation>
	ILI9341_SetDisplayWindow(0U, 0U, LCD.width, LCD.height);
 800bd40:	4a20      	ldr	r2, [pc, #128]	; (800bdc4 <ILI9341_Init+0x90>)
 800bd42:	6853      	ldr	r3, [r2, #4]
 800bd44:	6812      	ldr	r2, [r2, #0]
 800bd46:	2100      	movs	r1, #0
 800bd48:	4608      	mov	r0, r1
 800bd4a:	f7ff ffa5 	bl	800bc98 <ILI9341_SetDisplayWindow>
	command = ILI9341_SLEEP_OUT;
 800bd4e:	2311      	movs	r3, #17
 800bd50:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 800bd54:	f10d 000e 	add.w	r0, sp, #14
 800bd58:	f7ff ff66 	bl	800bc28 <ILI9341_SetAddress>
	HAL_Delay(200);
 800bd5c:	20c8      	movs	r0, #200	; 0xc8
 800bd5e:	f7f9 fc11 	bl	8005584 <HAL_Delay>
	command = ILI9341_NORMAL_MODE_ON;
 800bd62:	2313      	movs	r3, #19
 800bd64:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 800bd68:	f10d 000e 	add.w	r0, sp, #14
 800bd6c:	f7ff ff5c 	bl	800bc28 <ILI9341_SetAddress>
	HAL_Delay(100);
 800bd70:	2064      	movs	r0, #100	; 0x64
 800bd72:	f7f9 fc07 	bl	8005584 <HAL_Delay>
	command = ILI9341_PIXEL_FORMAT;
 800bd76:	233a      	movs	r3, #58	; 0x3a
 800bd78:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = color_space;
 800bd7c:	f8ad 4004 	strh.w	r4, [sp, #4]
	ILI9341_SetAddress(&command);
 800bd80:	f10d 000e 	add.w	r0, sp, #14
 800bd84:	f7ff ff50 	bl	800bc28 <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 1);
 800bd88:	2101      	movs	r1, #1
 800bd8a:	a801      	add	r0, sp, #4
 800bd8c:	f7ff ff32 	bl	800bbf4 <ILI9341_SendData>
	HAL_Delay(100);
 800bd90:	2064      	movs	r0, #100	; 0x64
 800bd92:	f7f9 fbf7 	bl	8005584 <HAL_Delay>
	command = ILI9341_INTERFACE;
 800bd96:	23f6      	movs	r3, #246	; 0xf6
 800bd98:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = 0x49;
 800bd9c:	2349      	movs	r3, #73	; 0x49
 800bd9e:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter[1] = 0;
 800bda2:	2300      	movs	r3, #0
 800bda4:	f8ad 3006 	strh.w	r3, [sp, #6]
	parameter[2] = 0x20;
 800bda8:	2320      	movs	r3, #32
 800bdaa:	f8ad 3008 	strh.w	r3, [sp, #8]
	ILI9341_SetAddress(&command);
 800bdae:	f10d 000e 	add.w	r0, sp, #14
 800bdb2:	f7ff ff39 	bl	800bc28 <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 3);
 800bdb6:	2103      	movs	r1, #3
 800bdb8:	a801      	add	r0, sp, #4
 800bdba:	f7ff ff1b 	bl	800bbf4 <ILI9341_SendData>
}
 800bdbe:	b004      	add	sp, #16
 800bdc0:	bd10      	pop	{r4, pc}
 800bdc2:	bf00      	nop
 800bdc4:	200114a4 	.word	0x200114a4

0800bdc8 <ILI9341_SendRepeatedDataDMA>:
{
 800bdc8:	b530      	push	{r4, r5, lr}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	460c      	mov	r4, r1
 800bdce:	f8ad 0006 	strh.w	r0, [sp, #6]
	switch (hLCDDMA.Init.PeriphDataAlignment)
 800bdd2:	4b18      	ldr	r3, [pc, #96]	; (800be34 <ILI9341_SendRepeatedDataDMA+0x6c>)
 800bdd4:	695b      	ldr	r3, [r3, #20]
 800bdd6:	b17b      	cbz	r3, 800bdf8 <ILI9341_SendRepeatedDataDMA+0x30>
 800bdd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bddc:	d100      	bne.n	800bde0 <ILI9341_SendRepeatedDataDMA+0x18>
			len = (num_copies / (2*LCD_IO_DATA_WRITE_CYCLES));
 800bdde:	084c      	lsrs	r4, r1, #1
	ILI9341_WaitTransfer();
 800bde0:	f7ff ff18 	bl	800bc14 <ILI9341_WaitTransfer>
	HAL_DMA_DeInit(&hLCDDMA);
 800bde4:	4d13      	ldr	r5, [pc, #76]	; (800be34 <ILI9341_SendRepeatedDataDMA+0x6c>)
 800bde6:	4628      	mov	r0, r5
 800bde8:	f7fa fcb6 	bl	8006758 <HAL_DMA_DeInit>
	hLCDDMA.Init.PeriphInc = DMA_PINC_DISABLE;	// dont increment source address
 800bdec:	2300      	movs	r3, #0
 800bdee:	60eb      	str	r3, [r5, #12]
	HAL_DMA_Init(&hLCDDMA);
 800bdf0:	4628      	mov	r0, r5
 800bdf2:	f7fa fc45 	bl	8006680 <HAL_DMA_Init>
 800bdf6:	e00e      	b.n	800be16 <ILI9341_SendRepeatedDataDMA+0x4e>
			len = 2*num_copies/LCD_IO_DATA_WRITE_CYCLES;
 800bdf8:	004c      	lsls	r4, r1, #1
			break;
 800bdfa:	e7f1      	b.n	800bde0 <ILI9341_SendRepeatedDataDMA+0x18>
			len -= 65535;
 800bdfc:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
 800be00:	3cff      	subs	r4, #255	; 0xff
			transfer = 65535;
 800be02:	f64f 73ff 	movw	r3, #65535	; 0xffff
		if (HAL_DMA_Start_IT(&hLCDDMA, (uint32_t) &data, (uint32_t)FMC_BANK1_MEM, transfer) != HAL_OK) return 1;
 800be06:	4a0c      	ldr	r2, [pc, #48]	; (800be38 <ILI9341_SendRepeatedDataDMA+0x70>)
 800be08:	f10d 0106 	add.w	r1, sp, #6
 800be0c:	4809      	ldr	r0, [pc, #36]	; (800be34 <ILI9341_SendRepeatedDataDMA+0x6c>)
 800be0e:	f7fa fcff 	bl	8006810 <HAL_DMA_Start_IT>
 800be12:	b960      	cbnz	r0, 800be2e <ILI9341_SendRepeatedDataDMA+0x66>
	while (len);
 800be14:	b134      	cbz	r4, 800be24 <ILI9341_SendRepeatedDataDMA+0x5c>
		ILI9341_WaitTransfer();
 800be16:	f7ff fefd 	bl	800bc14 <ILI9341_WaitTransfer>
		if (len > 65535)
 800be1a:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800be1e:	d2ed      	bcs.n	800bdfc <ILI9341_SendRepeatedDataDMA+0x34>
		if (transfer == 0) return 1;
 800be20:	b914      	cbnz	r4, 800be28 <ILI9341_SendRepeatedDataDMA+0x60>
 800be22:	2001      	movs	r0, #1
}
 800be24:	b003      	add	sp, #12
 800be26:	bd30      	pop	{r4, r5, pc}
			transfer = len;
 800be28:	4623      	mov	r3, r4
			len = 0;
 800be2a:	2400      	movs	r4, #0
 800be2c:	e7eb      	b.n	800be06 <ILI9341_SendRepeatedDataDMA+0x3e>
		if (HAL_DMA_Start_IT(&hLCDDMA, (uint32_t) &data, (uint32_t)FMC_BANK1_MEM, transfer) != HAL_OK) return 1;
 800be2e:	2001      	movs	r0, #1
 800be30:	e7f8      	b.n	800be24 <ILI9341_SendRepeatedDataDMA+0x5c>
 800be32:	bf00      	nop
 800be34:	200006e8 	.word	0x200006e8
 800be38:	60010000 	.word	0x60010000

0800be3c <ILI9341_DisplayOn>:
=======
 800baec:	b508      	push	{r3, lr}
#ifdef ILI9341_USEDMA
	while (HAL_DMA_GetState(&hLCDDMA) != HAL_DMA_STATE_READY);
 800baee:	4803      	ldr	r0, [pc, #12]	; (800bafc <ILI9341_WaitTransfer+0x10>)
 800baf0:	f7fa fee5 	bl	80068be <HAL_DMA_GetState>
 800baf4:	2801      	cmp	r0, #1
 800baf6:	d1fa      	bne.n	800baee <ILI9341_WaitTransfer+0x2>
#endif
}
 800baf8:	bd08      	pop	{r3, pc}
 800bafa:	bf00      	nop
 800bafc:	200016d8 	.word	0x200016d8

0800bb00 <ILI9341_SetAddress>:
{
 800bb00:	b510      	push	{r4, lr}
 800bb02:	4604      	mov	r4, r0
	ILI9341_WaitTransfer();
 800bb04:	f7ff fff2 	bl	800baec <ILI9341_WaitTransfer>
	FMC_BANK1_SetAddress(*address);
 800bb08:	8822      	ldrh	r2, [r4, #0]
	*(LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 800bb0a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800bb0e:	801a      	strh	r2, [r3, #0]
 800bb10:	f3bf 8f4f 	dsb	sy
}
 800bb14:	bd10      	pop	{r4, pc}
	...

0800bb18 <ILI9341_SetOrientation>:
{
 800bb18:	b510      	push	{r4, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	4604      	mov	r4, r0
	ILI9341_Data_t command   = ILI9341_MAC; /* Memory Access Control */
 800bb1e:	2336      	movs	r3, #54	; 0x36
 800bb20:	f8ad 3006 	strh.w	r3, [sp, #6]
	ILI9341_Data_t parameter = (ILI9341_Data_t)orientations[orientation];
 800bb24:	4b10      	ldr	r3, [pc, #64]	; (800bb68 <ILI9341_SetOrientation+0x50>)
 800bb26:	f833 3020 	ldrh.w	r3, [r3, r0, lsl #2]
 800bb2a:	f8ad 3004 	strh.w	r3, [sp, #4]
	ILI9341_SetAddress(&command);
 800bb2e:	f10d 0006 	add.w	r0, sp, #6
 800bb32:	f7ff ffe5 	bl	800bb00 <ILI9341_SetAddress>
	ILI9341_SendData(&parameter, 1);
 800bb36:	2101      	movs	r1, #1
 800bb38:	a801      	add	r0, sp, #4
 800bb3a:	f7ff ffc7 	bl	800bacc <ILI9341_SendData>
	switch (orientation) {
 800bb3e:	b144      	cbz	r4, 800bb52 <ILI9341_SetOrientation+0x3a>
 800bb40:	2c03      	cmp	r4, #3
 800bb42:	d006      	beq.n	800bb52 <ILI9341_SetOrientation+0x3a>
		LCD.width  = ILI9341_WIDTH;
 800bb44:	4b09      	ldr	r3, [pc, #36]	; (800bb6c <ILI9341_SetOrientation+0x54>)
 800bb46:	22f0      	movs	r2, #240	; 0xf0
 800bb48:	601a      	str	r2, [r3, #0]
		LCD.height = ILI9341_HEIGHT;
 800bb4a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800bb4e:	605a      	str	r2, [r3, #4]
		break;
 800bb50:	e005      	b.n	800bb5e <ILI9341_SetOrientation+0x46>
		LCD.width  = ILI9341_HEIGHT;
 800bb52:	4b06      	ldr	r3, [pc, #24]	; (800bb6c <ILI9341_SetOrientation+0x54>)
 800bb54:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800bb58:	601a      	str	r2, [r3, #0]
		LCD.height = ILI9341_WIDTH;
 800bb5a:	22f0      	movs	r2, #240	; 0xf0
 800bb5c:	605a      	str	r2, [r3, #4]
	LCD.orientation = orientation;
 800bb5e:	4b03      	ldr	r3, [pc, #12]	; (800bb6c <ILI9341_SetOrientation+0x54>)
 800bb60:	609c      	str	r4, [r3, #8]
}
 800bb62:	b002      	add	sp, #8
 800bb64:	bd10      	pop	{r4, pc}
 800bb66:	bf00      	nop
 800bb68:	08012ee8 	.word	0x08012ee8
 800bb6c:	20012494 	.word	0x20012494

0800bb70 <ILI9341_SetDisplayWindow>:
{
 800bb70:	b530      	push	{r4, r5, lr}
 800bb72:	b085      	sub	sp, #20
 800bb74:	460c      	mov	r4, r1
 800bb76:	461d      	mov	r5, r3
	command = ILI9341_CASET;
 800bb78:	232a      	movs	r3, #42	; 0x2a
 800bb7a:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = (ILI9341_Data_t)(Xpos >> 8U);
 800bb7e:	f3c0 230f 	ubfx	r3, r0, #8, #16
 800bb82:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter[1] = (ILI9341_Data_t)(Xpos & 0xFFU);
 800bb86:	b2c3      	uxtb	r3, r0
 800bb88:	f8ad 3006 	strh.w	r3, [sp, #6]
	parameter[2] = (ILI9341_Data_t)((Xpos + Width - 1U) >> 8U);
 800bb8c:	1883      	adds	r3, r0, r2
 800bb8e:	3b01      	subs	r3, #1
 800bb90:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800bb94:	f8ad 3008 	strh.w	r3, [sp, #8]
	parameter[3] = (ILI9341_Data_t)((Xpos + Width - 1U) & 0xFFU);
 800bb98:	fa12 f080 	uxtah	r0, r2, r0
 800bb9c:	b280      	uxth	r0, r0
 800bb9e:	3801      	subs	r0, #1
 800bba0:	b2c0      	uxtb	r0, r0
 800bba2:	f8ad 000a 	strh.w	r0, [sp, #10]
	ILI9341_SetAddress(&command);
 800bba6:	f10d 000e 	add.w	r0, sp, #14
 800bbaa:	f7ff ffa9 	bl	800bb00 <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 4);
 800bbae:	2104      	movs	r1, #4
 800bbb0:	eb0d 0001 	add.w	r0, sp, r1
 800bbb4:	f7ff ff8a 	bl	800bacc <ILI9341_SendData>
	command = ILI9341_RASET;
 800bbb8:	232b      	movs	r3, #43	; 0x2b
 800bbba:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter [0] = (ILI9341_Data_t)(Ypos >> 8U);
 800bbbe:	f3c4 230f 	ubfx	r3, r4, #8, #16
 800bbc2:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter [1] = (ILI9341_Data_t)(Ypos & 0xFFU);
 800bbc6:	b2e3      	uxtb	r3, r4
 800bbc8:	f8ad 3006 	strh.w	r3, [sp, #6]
	parameter [2] = (ILI9341_Data_t)((Ypos + Height - 1U) >> 8U);
 800bbcc:	1962      	adds	r2, r4, r5
 800bbce:	3a01      	subs	r2, #1
 800bbd0:	f3c2 220f 	ubfx	r2, r2, #8, #16
 800bbd4:	f8ad 2008 	strh.w	r2, [sp, #8]
	parameter [3] = (ILI9341_Data_t)((Ypos + Height - 1U) & 0xFFU);
 800bbd8:	fa15 f484 	uxtah	r4, r5, r4
 800bbdc:	b2a4      	uxth	r4, r4
 800bbde:	3c01      	subs	r4, #1
 800bbe0:	b2e4      	uxtb	r4, r4
 800bbe2:	f8ad 400a 	strh.w	r4, [sp, #10]
	ILI9341_SetAddress(&command);
 800bbe6:	f10d 000e 	add.w	r0, sp, #14
 800bbea:	f7ff ff89 	bl	800bb00 <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 4);
 800bbee:	2104      	movs	r1, #4
 800bbf0:	eb0d 0001 	add.w	r0, sp, r1
 800bbf4:	f7ff ff6a 	bl	800bacc <ILI9341_SendData>
	command = ILI9341_GRAM;
 800bbf8:	232c      	movs	r3, #44	; 0x2c
 800bbfa:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 800bbfe:	f10d 000e 	add.w	r0, sp, #14
 800bc02:	f7ff ff7d 	bl	800bb00 <ILI9341_SetAddress>
}
 800bc06:	b005      	add	sp, #20
 800bc08:	bd30      	pop	{r4, r5, pc}
	...

0800bc0c <ILI9341_Init>:
{
 800bc0c:	b510      	push	{r4, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	4604      	mov	r4, r0
	ILI9341_SetOrientation(orientation);
 800bc12:	4608      	mov	r0, r1
 800bc14:	f7ff ff80 	bl	800bb18 <ILI9341_SetOrientation>
	ILI9341_SetDisplayWindow(0U, 0U, LCD.width, LCD.height);
 800bc18:	4a20      	ldr	r2, [pc, #128]	; (800bc9c <ILI9341_Init+0x90>)
 800bc1a:	6853      	ldr	r3, [r2, #4]
 800bc1c:	6812      	ldr	r2, [r2, #0]
 800bc1e:	2100      	movs	r1, #0
 800bc20:	4608      	mov	r0, r1
 800bc22:	f7ff ffa5 	bl	800bb70 <ILI9341_SetDisplayWindow>
	command = ILI9341_SLEEP_OUT;
 800bc26:	2311      	movs	r3, #17
 800bc28:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 800bc2c:	f10d 000e 	add.w	r0, sp, #14
 800bc30:	f7ff ff66 	bl	800bb00 <ILI9341_SetAddress>
	HAL_Delay(200);
 800bc34:	20c8      	movs	r0, #200	; 0xc8
 800bc36:	f7f9 fc11 	bl	800545c <HAL_Delay>
	command = ILI9341_NORMAL_MODE_ON;
 800bc3a:	2313      	movs	r3, #19
 800bc3c:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 800bc40:	f10d 000e 	add.w	r0, sp, #14
 800bc44:	f7ff ff5c 	bl	800bb00 <ILI9341_SetAddress>
	HAL_Delay(100);
 800bc48:	2064      	movs	r0, #100	; 0x64
 800bc4a:	f7f9 fc07 	bl	800545c <HAL_Delay>
	command = ILI9341_PIXEL_FORMAT;
 800bc4e:	233a      	movs	r3, #58	; 0x3a
 800bc50:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = color_space;
 800bc54:	f8ad 4004 	strh.w	r4, [sp, #4]
	ILI9341_SetAddress(&command);
 800bc58:	f10d 000e 	add.w	r0, sp, #14
 800bc5c:	f7ff ff50 	bl	800bb00 <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 1);
 800bc60:	2101      	movs	r1, #1
 800bc62:	a801      	add	r0, sp, #4
 800bc64:	f7ff ff32 	bl	800bacc <ILI9341_SendData>
	HAL_Delay(100);
 800bc68:	2064      	movs	r0, #100	; 0x64
 800bc6a:	f7f9 fbf7 	bl	800545c <HAL_Delay>
	command = ILI9341_INTERFACE;
 800bc6e:	23f6      	movs	r3, #246	; 0xf6
 800bc70:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = 0x49;
 800bc74:	2349      	movs	r3, #73	; 0x49
 800bc76:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter[1] = 0;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	f8ad 3006 	strh.w	r3, [sp, #6]
	parameter[2] = 0x20;
 800bc80:	2320      	movs	r3, #32
 800bc82:	f8ad 3008 	strh.w	r3, [sp, #8]
	ILI9341_SetAddress(&command);
 800bc86:	f10d 000e 	add.w	r0, sp, #14
 800bc8a:	f7ff ff39 	bl	800bb00 <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 3);
 800bc8e:	2103      	movs	r1, #3
 800bc90:	a801      	add	r0, sp, #4
 800bc92:	f7ff ff1b 	bl	800bacc <ILI9341_SendData>
}
 800bc96:	b004      	add	sp, #16
 800bc98:	bd10      	pop	{r4, pc}
 800bc9a:	bf00      	nop
 800bc9c:	20012494 	.word	0x20012494

0800bca0 <ILI9341_SendRepeatedDataDMA>:
{
 800bca0:	b530      	push	{r4, r5, lr}
 800bca2:	b083      	sub	sp, #12
 800bca4:	460c      	mov	r4, r1
 800bca6:	f8ad 0006 	strh.w	r0, [sp, #6]
	switch (hLCDDMA.Init.PeriphDataAlignment)
 800bcaa:	4b18      	ldr	r3, [pc, #96]	; (800bd0c <ILI9341_SendRepeatedDataDMA+0x6c>)
 800bcac:	695b      	ldr	r3, [r3, #20]
 800bcae:	b17b      	cbz	r3, 800bcd0 <ILI9341_SendRepeatedDataDMA+0x30>
 800bcb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcb4:	d100      	bne.n	800bcb8 <ILI9341_SendRepeatedDataDMA+0x18>
			len = (num_copies / (2*LCD_IO_DATA_WRITE_CYCLES));
 800bcb6:	084c      	lsrs	r4, r1, #1
	ILI9341_WaitTransfer();
 800bcb8:	f7ff ff18 	bl	800baec <ILI9341_WaitTransfer>
	HAL_DMA_DeInit(&hLCDDMA);
 800bcbc:	4d13      	ldr	r5, [pc, #76]	; (800bd0c <ILI9341_SendRepeatedDataDMA+0x6c>)
 800bcbe:	4628      	mov	r0, r5
 800bcc0:	f7fa fcb6 	bl	8006630 <HAL_DMA_DeInit>
	hLCDDMA.Init.PeriphInc = DMA_PINC_DISABLE;	// dont increment source address
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	60eb      	str	r3, [r5, #12]
	HAL_DMA_Init(&hLCDDMA);
 800bcc8:	4628      	mov	r0, r5
 800bcca:	f7fa fc45 	bl	8006558 <HAL_DMA_Init>
 800bcce:	e00e      	b.n	800bcee <ILI9341_SendRepeatedDataDMA+0x4e>
			len = 2*num_copies/LCD_IO_DATA_WRITE_CYCLES;
 800bcd0:	004c      	lsls	r4, r1, #1
			break;
 800bcd2:	e7f1      	b.n	800bcb8 <ILI9341_SendRepeatedDataDMA+0x18>
			len -= 65535;
 800bcd4:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
 800bcd8:	3cff      	subs	r4, #255	; 0xff
			transfer = 65535;
 800bcda:	f64f 73ff 	movw	r3, #65535	; 0xffff
		if (HAL_DMA_Start_IT(&hLCDDMA, (uint32_t) &data, (uint32_t)FMC_BANK1_MEM, transfer) != HAL_OK) return 1;
 800bcde:	4a0c      	ldr	r2, [pc, #48]	; (800bd10 <ILI9341_SendRepeatedDataDMA+0x70>)
 800bce0:	f10d 0106 	add.w	r1, sp, #6
 800bce4:	4809      	ldr	r0, [pc, #36]	; (800bd0c <ILI9341_SendRepeatedDataDMA+0x6c>)
 800bce6:	f7fa fcff 	bl	80066e8 <HAL_DMA_Start_IT>
 800bcea:	b960      	cbnz	r0, 800bd06 <ILI9341_SendRepeatedDataDMA+0x66>
	while (len);
 800bcec:	b134      	cbz	r4, 800bcfc <ILI9341_SendRepeatedDataDMA+0x5c>
		ILI9341_WaitTransfer();
 800bcee:	f7ff fefd 	bl	800baec <ILI9341_WaitTransfer>
		if (len > 65535)
 800bcf2:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800bcf6:	d2ed      	bcs.n	800bcd4 <ILI9341_SendRepeatedDataDMA+0x34>
		if (transfer == 0) return 1;
 800bcf8:	b914      	cbnz	r4, 800bd00 <ILI9341_SendRepeatedDataDMA+0x60>
 800bcfa:	2001      	movs	r0, #1
}
 800bcfc:	b003      	add	sp, #12
 800bcfe:	bd30      	pop	{r4, r5, pc}
			transfer = len;
 800bd00:	4623      	mov	r3, r4
			len = 0;
 800bd02:	2400      	movs	r4, #0
 800bd04:	e7eb      	b.n	800bcde <ILI9341_SendRepeatedDataDMA+0x3e>
		if (HAL_DMA_Start_IT(&hLCDDMA, (uint32_t) &data, (uint32_t)FMC_BANK1_MEM, transfer) != HAL_OK) return 1;
 800bd06:	2001      	movs	r0, #1
 800bd08:	e7f8      	b.n	800bcfc <ILI9341_SendRepeatedDataDMA+0x5c>
 800bd0a:	bf00      	nop
 800bd0c:	200016d8 	.word	0x200016d8
 800bd10:	60010000 	.word	0x60010000

0800bd14 <ILI9341_DisplayOn>:
>>>>>>> render

//! @brief Strojno omogoči zaslon
void ILI9341_DisplayOn()
{
<<<<<<< HEAD
 800be3c:	b500      	push	{lr}
 800be3e:	b083      	sub	sp, #12
	ILI9341_Data_t command = ILI9341_DISPLAY_ON;
 800be40:	2329      	movs	r3, #41	; 0x29
 800be42:	f8ad 3006 	strh.w	r3, [sp, #6]
	ILI9341_SetAddress(&command);
 800be46:	f10d 0006 	add.w	r0, sp, #6
 800be4a:	f7ff feed 	bl	800bc28 <ILI9341_SetAddress>
}
 800be4e:	b003      	add	sp, #12
 800be50:	f85d fb04 	ldr.w	pc, [sp], #4

0800be54 <ILI9341_GetParam>:
=======
 800bd14:	b500      	push	{lr}
 800bd16:	b083      	sub	sp, #12
	ILI9341_Data_t command = ILI9341_DISPLAY_ON;
 800bd18:	2329      	movs	r3, #41	; 0x29
 800bd1a:	f8ad 3006 	strh.w	r3, [sp, #6]
	ILI9341_SetAddress(&command);
 800bd1e:	f10d 0006 	add.w	r0, sp, #6
 800bd22:	f7ff feed 	bl	800bb00 <ILI9341_SetAddress>
}
 800bd26:	b003      	add	sp, #12
 800bd28:	f85d fb04 	ldr.w	pc, [sp], #4

0800bd2c <ILI9341_GetParam>:
>>>>>>> render
 */
uint32_t ILI9341_GetParam(LCD_Param_t param)
{
	uint32_t value = 0;

	switch (param) {
<<<<<<< HEAD
 800be54:	2803      	cmp	r0, #3
 800be56:	d803      	bhi.n	800be60 <ILI9341_GetParam+0xc>
 800be58:	e8df f000 	tbb	[pc, r0]
 800be5c:	0a0d0704 	.word	0x0a0d0704
 800be60:	2000      	movs	r0, #0
 800be62:	4770      	bx	lr
	case LCD_WIDTH:
		value = LCD.width;
 800be64:	4b05      	ldr	r3, [pc, #20]	; (800be7c <ILI9341_GetParam+0x28>)
 800be66:	6818      	ldr	r0, [r3, #0]
		break;
 800be68:	4770      	bx	lr
	case LCD_HEIGHT:
		value = LCD.height;
 800be6a:	4b04      	ldr	r3, [pc, #16]	; (800be7c <ILI9341_GetParam+0x28>)
 800be6c:	6858      	ldr	r0, [r3, #4]
		break;
 800be6e:	4770      	bx	lr
=======
 800bd2c:	2803      	cmp	r0, #3
 800bd2e:	d803      	bhi.n	800bd38 <ILI9341_GetParam+0xc>
 800bd30:	e8df f000 	tbb	[pc, r0]
 800bd34:	0a0d0704 	.word	0x0a0d0704
 800bd38:	2000      	movs	r0, #0
 800bd3a:	4770      	bx	lr
	case LCD_WIDTH:
		value = LCD.width;
 800bd3c:	4b05      	ldr	r3, [pc, #20]	; (800bd54 <ILI9341_GetParam+0x28>)
 800bd3e:	6818      	ldr	r0, [r3, #0]
		break;
 800bd40:	4770      	bx	lr
	case LCD_HEIGHT:
		value = LCD.height;
 800bd42:	4b04      	ldr	r3, [pc, #16]	; (800bd54 <ILI9341_GetParam+0x28>)
 800bd44:	6858      	ldr	r0, [r3, #4]
		break;
 800bd46:	4770      	bx	lr
>>>>>>> render
	case LCD_AREA:
		value = ILI9341_AREA;
		break;
	case LCD_ORIENTATION:
		value = LCD.orientation;
<<<<<<< HEAD
 800be70:	4b02      	ldr	r3, [pc, #8]	; (800be7c <ILI9341_GetParam+0x28>)
 800be72:	6898      	ldr	r0, [r3, #8]
		break;
 800be74:	4770      	bx	lr
		value = ILI9341_AREA;
 800be76:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
=======
 800bd48:	4b02      	ldr	r3, [pc, #8]	; (800bd54 <ILI9341_GetParam+0x28>)
 800bd4a:	6898      	ldr	r0, [r3, #8]
		break;
 800bd4c:	4770      	bx	lr
		value = ILI9341_AREA;
 800bd4e:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
>>>>>>> render
	default:
		break;
	}

	return value;
}
<<<<<<< HEAD
 800be7a:	4770      	bx	lr
 800be7c:	200114a4 	.word	0x200114a4

0800be80 <UserPixelSetFunction>:
=======
 800bd52:	4770      	bx	lr
 800bd54:	20012494 	.word	0x20012494

0800bd58 <UserPixelSetFunction>:
>>>>>>> render


#include "lcd_ugui.h"

void UserPixelSetFunction(UG_S16 x, UG_S16 y, UG_COLOR c)
{
<<<<<<< HEAD
 800be80:	b500      	push	{lr}
 800be82:	b083      	sub	sp, #12
 800be84:	f8ad 2006 	strh.w	r2, [sp, #6]
	ILI9341_SetDisplayWindow(x, y, 1, 1);
 800be88:	2301      	movs	r3, #1
 800be8a:	461a      	mov	r2, r3
 800be8c:	f7ff ff04 	bl	800bc98 <ILI9341_SetDisplayWindow>
	ILI9341_SendData((LCD_IO_Data_t *)&c, 1);
 800be90:	2101      	movs	r1, #1
 800be92:	f10d 0006 	add.w	r0, sp, #6
 800be96:	f7ff fead 	bl	800bbf4 <ILI9341_SendData>
}
 800be9a:	b003      	add	sp, #12
 800be9c:	f85d fb04 	ldr.w	pc, [sp], #4

0800bea0 <_HW_FillFrame_>:

UG_RESULT _HW_FillFrame_(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c)
{
 800bea0:	b510      	push	{r4, lr}
 800bea2:	b082      	sub	sp, #8
	LCD_FillRect(x1, y1, x2-x1, y2-y1, c);
 800bea4:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 800bea8:	9400      	str	r4, [sp, #0]
 800beaa:	1a5b      	subs	r3, r3, r1
 800beac:	1a12      	subs	r2, r2, r0
 800beae:	f7ff fe61 	bl	800bb74 <LCD_FillRect>
	return UG_RESULT_OK;
}
 800beb2:	2000      	movs	r0, #0
 800beb4:	b002      	add	sp, #8
 800beb6:	bd10      	pop	{r4, pc}

0800beb8 <LCD_UG_init>:
=======
 800bd58:	b500      	push	{lr}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	f8ad 2006 	strh.w	r2, [sp, #6]
	ILI9341_SetDisplayWindow(x, y, 1, 1);
 800bd60:	2301      	movs	r3, #1
 800bd62:	461a      	mov	r2, r3
 800bd64:	f7ff ff04 	bl	800bb70 <ILI9341_SetDisplayWindow>
	ILI9341_SendData((LCD_IO_Data_t *)&c, 1);
 800bd68:	2101      	movs	r1, #1
 800bd6a:	f10d 0006 	add.w	r0, sp, #6
 800bd6e:	f7ff fead 	bl	800bacc <ILI9341_SendData>
}
 800bd72:	b003      	add	sp, #12
 800bd74:	f85d fb04 	ldr.w	pc, [sp], #4

0800bd78 <_HW_FillFrame_>:

UG_RESULT _HW_FillFrame_(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c)
{
 800bd78:	b510      	push	{r4, lr}
 800bd7a:	b082      	sub	sp, #8
	LCD_FillRect(x1, y1, x2-x1, y2-y1, c);
 800bd7c:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 800bd80:	9400      	str	r4, [sp, #0]
 800bd82:	1a5b      	subs	r3, r3, r1
 800bd84:	1a12      	subs	r2, r2, r0
 800bd86:	f7ff fe61 	bl	800ba4c <LCD_FillRect>
	return UG_RESULT_OK;
}
 800bd8a:	2000      	movs	r0, #0
 800bd8c:	b002      	add	sp, #8
 800bd8e:	bd10      	pop	{r4, pc}

0800bd90 <LCD_UG_init>:
>>>>>>> render


UG_GUI gui;

UG_S16 LCD_UG_init(void)
{
<<<<<<< HEAD
 800beb8:	b510      	push	{r4, lr}
	UG_Init(&gui, UserPixelSetFunction, ILI9341_GetParam(LCD_WIDTH), ILI9341_GetParam(LCD_HEIGHT));
 800beba:	2000      	movs	r0, #0
 800bebc:	f7ff ffca 	bl	800be54 <ILI9341_GetParam>
 800bec0:	4604      	mov	r4, r0
 800bec2:	2001      	movs	r0, #1
 800bec4:	f7ff ffc6 	bl	800be54 <ILI9341_GetParam>
 800bec8:	b203      	sxth	r3, r0
 800beca:	b222      	sxth	r2, r4
 800becc:	490b      	ldr	r1, [pc, #44]	; (800befc <LCD_UG_init+0x44>)
 800bece:	480c      	ldr	r0, [pc, #48]	; (800bf00 <LCD_UG_init+0x48>)
 800bed0:	f000 f81c 	bl	800bf0c <UG_Init>
	UG_DriverRegister(DRIVER_FILL_FRAME, (void *)_HW_FillFrame_);
 800bed4:	490b      	ldr	r1, [pc, #44]	; (800bf04 <LCD_UG_init+0x4c>)
 800bed6:	2001      	movs	r0, #1
 800bed8:	f000 f8ba 	bl	800c050 <UG_DriverRegister>
	UG_DriverEnable(DRIVER_FILL_FRAME);
 800bedc:	2001      	movs	r0, #1
 800bede:	f000 f8c5 	bl	800c06c <UG_DriverEnable>

	UG_FontSelect(&FONT_8X12);
 800bee2:	4809      	ldr	r0, [pc, #36]	; (800bf08 <LCD_UG_init+0x50>)
 800bee4:	f000 f852 	bl	800bf8c <UG_FontSelect>
	UG_SetForecolor(C_WHITE);
 800bee8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800beec:	f000 f8a0 	bl	800c030 <UG_SetForecolor>
	UG_SetBackcolor(C_BLACK);
 800bef0:	2000      	movs	r0, #0
 800bef2:	f000 f8a5 	bl	800c040 <UG_SetBackcolor>
	return 0;
}
 800bef6:	2000      	movs	r0, #0
 800bef8:	bd10      	pop	{r4, pc}
 800befa:	bf00      	nop
 800befc:	0800be81 	.word	0x0800be81
 800bf00:	200114b0 	.word	0x200114b0
 800bf04:	0800bea1 	.word	0x0800bea1
 800bf08:	08013090 	.word	0x08013090

0800bf0c <UG_Init>:
=======
 800bd90:	b510      	push	{r4, lr}
	UG_Init(&gui, UserPixelSetFunction, ILI9341_GetParam(LCD_WIDTH), ILI9341_GetParam(LCD_HEIGHT));
 800bd92:	2000      	movs	r0, #0
 800bd94:	f7ff ffca 	bl	800bd2c <ILI9341_GetParam>
 800bd98:	4604      	mov	r4, r0
 800bd9a:	2001      	movs	r0, #1
 800bd9c:	f7ff ffc6 	bl	800bd2c <ILI9341_GetParam>
 800bda0:	b203      	sxth	r3, r0
 800bda2:	b222      	sxth	r2, r4
 800bda4:	490b      	ldr	r1, [pc, #44]	; (800bdd4 <LCD_UG_init+0x44>)
 800bda6:	480c      	ldr	r0, [pc, #48]	; (800bdd8 <LCD_UG_init+0x48>)
 800bda8:	f000 f81c 	bl	800bde4 <UG_Init>
	UG_DriverRegister(DRIVER_FILL_FRAME, (void *)_HW_FillFrame_);
 800bdac:	490b      	ldr	r1, [pc, #44]	; (800bddc <LCD_UG_init+0x4c>)
 800bdae:	2001      	movs	r0, #1
 800bdb0:	f000 f882 	bl	800beb8 <UG_DriverRegister>
	UG_DriverEnable(DRIVER_FILL_FRAME);
 800bdb4:	2001      	movs	r0, #1
 800bdb6:	f000 f88d 	bl	800bed4 <UG_DriverEnable>

	UG_FontSelect(&FONT_8X12);
 800bdba:	4809      	ldr	r0, [pc, #36]	; (800bde0 <LCD_UG_init+0x50>)
 800bdbc:	f000 f852 	bl	800be64 <UG_FontSelect>
	UG_SetForecolor(C_WHITE);
 800bdc0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bdc4:	f000 f868 	bl	800be98 <UG_SetForecolor>
	UG_SetBackcolor(C_BLACK);
 800bdc8:	2000      	movs	r0, #0
 800bdca:	f000 f86d 	bl	800bea8 <UG_SetBackcolor>
	return 0;
}
 800bdce:	2000      	movs	r0, #0
 800bdd0:	bd10      	pop	{r4, pc}
 800bdd2:	bf00      	nop
 800bdd4:	0800bd59 	.word	0x0800bd59
 800bdd8:	200124a0 	.word	0x200124a0
 800bddc:	0800bd79 	.word	0x0800bd79
 800bde0:	08012ef8 	.word	0x08012ef8

0800bde4 <UG_Init>:
>>>>>>> render

UG_S16 UG_Init( UG_GUI* g, void (*p)(UG_S16,UG_S16,UG_COLOR), UG_S16 x, UG_S16 y )
{
   UG_U8 i;

   g->pset = (void(*)(UG_S16,UG_S16,UG_COLOR))p;
<<<<<<< HEAD
 800bf0c:	6001      	str	r1, [r0, #0]
   g->x_dim = x;
 800bf0e:	8082      	strh	r2, [r0, #4]
   g->y_dim = y;
 800bf10:	80c3      	strh	r3, [r0, #6]
   g->console.x_start = 4;
 800bf12:	2104      	movs	r1, #4
 800bf14:	8401      	strh	r1, [r0, #32]
   g->console.y_start = 4;
 800bf16:	8441      	strh	r1, [r0, #34]	; 0x22
   g->console.x_end = g->x_dim - g->console.x_start-1;
 800bf18:	b292      	uxth	r2, r2
 800bf1a:	3a04      	subs	r2, #4
 800bf1c:	b292      	uxth	r2, r2
 800bf1e:	3a01      	subs	r2, #1
 800bf20:	b212      	sxth	r2, r2
 800bf22:	8482      	strh	r2, [r0, #36]	; 0x24
   g->console.y_end = g->y_dim - g->console.x_start-1;
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	3b04      	subs	r3, #4
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	3b01      	subs	r3, #1
 800bf2c:	b21b      	sxth	r3, r3
 800bf2e:	84c3      	strh	r3, [r0, #38]	; 0x26
   g->console.x_pos = g->console.x_end;
 800bf30:	8382      	strh	r2, [r0, #28]
   g->console.y_pos = g->console.y_end;
 800bf32:	83c3      	strh	r3, [r0, #30]
   g->char_h_space = 1;
 800bf34:	2301      	movs	r3, #1
 800bf36:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   g->char_v_space = 1;
 800bf3a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
   g->font.p = NULL;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	62c3      	str	r3, [r0, #44]	; 0x2c
   g->font.char_height = 0;
 800bf42:	8683      	strh	r3, [r0, #52]	; 0x34
   g->font.char_width = 0;
 800bf44:	8643      	strh	r3, [r0, #50]	; 0x32
   g->font.start_char = 0;
 800bf46:	86c3      	strh	r3, [r0, #54]	; 0x36
   g->font.end_char = 0;
 800bf48:	8703      	strh	r3, [r0, #56]	; 0x38
   g->font.widths = NULL;
 800bf4a:	63c3      	str	r3, [r0, #60]	; 0x3c
=======
 800bde4:	6001      	str	r1, [r0, #0]
   g->x_dim = x;
 800bde6:	8082      	strh	r2, [r0, #4]
   g->y_dim = y;
 800bde8:	80c3      	strh	r3, [r0, #6]
   g->console.x_start = 4;
 800bdea:	2104      	movs	r1, #4
 800bdec:	8401      	strh	r1, [r0, #32]
   g->console.y_start = 4;
 800bdee:	8441      	strh	r1, [r0, #34]	; 0x22
   g->console.x_end = g->x_dim - g->console.x_start-1;
 800bdf0:	b292      	uxth	r2, r2
 800bdf2:	3a04      	subs	r2, #4
 800bdf4:	b292      	uxth	r2, r2
 800bdf6:	3a01      	subs	r2, #1
 800bdf8:	b212      	sxth	r2, r2
 800bdfa:	8482      	strh	r2, [r0, #36]	; 0x24
   g->console.y_end = g->y_dim - g->console.x_start-1;
 800bdfc:	b29b      	uxth	r3, r3
 800bdfe:	3b04      	subs	r3, #4
 800be00:	b29b      	uxth	r3, r3
 800be02:	3b01      	subs	r3, #1
 800be04:	b21b      	sxth	r3, r3
 800be06:	84c3      	strh	r3, [r0, #38]	; 0x26
   g->console.x_pos = g->console.x_end;
 800be08:	8382      	strh	r2, [r0, #28]
   g->console.y_pos = g->console.y_end;
 800be0a:	83c3      	strh	r3, [r0, #30]
   g->char_h_space = 1;
 800be0c:	2301      	movs	r3, #1
 800be0e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   g->char_v_space = 1;
 800be12:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
   g->font.p = NULL;
 800be16:	2300      	movs	r3, #0
 800be18:	62c3      	str	r3, [r0, #44]	; 0x2c
   g->font.char_height = 0;
 800be1a:	8683      	strh	r3, [r0, #52]	; 0x34
   g->font.char_width = 0;
 800be1c:	8643      	strh	r3, [r0, #50]	; 0x32
   g->font.start_char = 0;
 800be1e:	86c3      	strh	r3, [r0, #54]	; 0x36
   g->font.end_char = 0;
 800be20:	8703      	strh	r3, [r0, #56]	; 0x38
   g->font.widths = NULL;
 800be22:	63c3      	str	r3, [r0, #60]	; 0x3c
>>>>>>> render
   #ifdef USE_COLOR_RGB888
   g->desktop_color = 0x5E8BEf;
   #endif
   #ifdef USE_COLOR_RGB565
   g->desktop_color = 0x5C5D;
<<<<<<< HEAD
 800bf4c:	f645 425d 	movw	r2, #23645	; 0x5c5d
 800bf50:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
   #endif
   g->fore_color = C_WHITE;
 800bf54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf58:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
   g->back_color = C_BLACK;
 800bf5c:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
   g->next_window = NULL;
 800bf60:	6103      	str	r3, [r0, #16]
   g->active_window = NULL;
 800bf62:	6143      	str	r3, [r0, #20]
   g->last_window = NULL;
 800bf64:	6183      	str	r3, [r0, #24]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800bf66:	e008      	b.n	800bf7a <UG_Init+0x6e>
   {
      g->driver[i].driver = NULL;
 800bf68:	f103 0209 	add.w	r2, r3, #9
 800bf6c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800bf70:	2100      	movs	r1, #0
 800bf72:	6051      	str	r1, [r2, #4]
      g->driver[i].state = 0;
 800bf74:	7211      	strb	r1, [r2, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800bf76:	3301      	adds	r3, #1
 800bf78:	b2db      	uxtb	r3, r3
 800bf7a:	2b02      	cmp	r3, #2
 800bf7c:	d9f4      	bls.n	800bf68 <UG_Init+0x5c>
   }

   gui = g;
 800bf7e:	4b02      	ldr	r3, [pc, #8]	; (800bf88 <UG_Init+0x7c>)
 800bf80:	6018      	str	r0, [r3, #0]
   return 1;
}
 800bf82:	2001      	movs	r0, #1
 800bf84:	4770      	bx	lr
 800bf86:	bf00      	nop
 800bf88:	20011514 	.word	0x20011514

0800bf8c <UG_FontSelect>:
=======
 800be24:	f645 425d 	movw	r2, #23645	; 0x5c5d
 800be28:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
   #endif
   g->fore_color = C_WHITE;
 800be2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be30:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
   g->back_color = C_BLACK;
 800be34:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
   g->next_window = NULL;
 800be38:	6103      	str	r3, [r0, #16]
   g->active_window = NULL;
 800be3a:	6143      	str	r3, [r0, #20]
   g->last_window = NULL;
 800be3c:	6183      	str	r3, [r0, #24]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800be3e:	e008      	b.n	800be52 <UG_Init+0x6e>
   {
      g->driver[i].driver = NULL;
 800be40:	f103 0209 	add.w	r2, r3, #9
 800be44:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800be48:	2100      	movs	r1, #0
 800be4a:	6051      	str	r1, [r2, #4]
      g->driver[i].state = 0;
 800be4c:	7211      	strb	r1, [r2, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800be4e:	3301      	adds	r3, #1
 800be50:	b2db      	uxtb	r3, r3
 800be52:	2b02      	cmp	r3, #2
 800be54:	d9f4      	bls.n	800be40 <UG_Init+0x5c>
   }

   gui = g;
 800be56:	4b02      	ldr	r3, [pc, #8]	; (800be60 <UG_Init+0x7c>)
 800be58:	6018      	str	r0, [r3, #0]
   return 1;
}
 800be5a:	2001      	movs	r0, #1
 800be5c:	4770      	bx	lr
 800be5e:	bf00      	nop
 800be60:	20012504 	.word	0x20012504

0800be64 <UG_FontSelect>:
>>>>>>> render
   gui = g;
   return 1;
}

void UG_FontSelect( const UG_FONT* font )
{
<<<<<<< HEAD
 800bf8c:	b500      	push	{lr}
   gui->font = *font;
 800bf8e:	4b07      	ldr	r3, [pc, #28]	; (800bfac <UG_FontSelect+0x20>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f103 0c2c 	add.w	ip, r3, #44	; 0x2c
 800bf96:	4686      	mov	lr, r0
 800bf98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bf9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bfa0:	f8de 3000 	ldr.w	r3, [lr]
 800bfa4:	f8cc 3000 	str.w	r3, [ip]
}
 800bfa8:	f85d fb04 	ldr.w	pc, [sp], #4
 800bfac:	20011514 	.word	0x20011514

0800bfb0 <UG_FillFrame>:
{
   UG_FillFrame(0,0,gui->x_dim-1,gui->y_dim-1,c);
}

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800bfb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bfb4:	b083      	sub	sp, #12
 800bfb6:	4606      	mov	r6, r0
 800bfb8:	4688      	mov	r8, r1
 800bfba:	4691      	mov	r9, r2
 800bfbc:	461d      	mov	r5, r3
 800bfbe:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
   UG_S16 n,m;

   if ( x2 < x1 )
 800bfc2:	4282      	cmp	r2, r0
 800bfc4:	db01      	blt.n	800bfca <UG_FillFrame+0x1a>
 800bfc6:	4681      	mov	r9, r0
 800bfc8:	4616      	mov	r6, r2
   {
      n = x2;
      x2 = x1;
      x1 = n;
   }
   if ( y2 < y1 )
 800bfca:	4545      	cmp	r5, r8
 800bfcc:	db02      	blt.n	800bfd4 <UG_FillFrame+0x24>
 800bfce:	462b      	mov	r3, r5
 800bfd0:	4645      	mov	r5, r8
 800bfd2:	4698      	mov	r8, r3
      y2 = y1;
      y1 = n;
   }

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 800bfd4:	4b11      	ldr	r3, [pc, #68]	; (800c01c <UG_FillFrame+0x6c>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800bfdc:	f012 0f02 	tst.w	r2, #2
 800bfe0:	d017      	beq.n	800c012 <UG_FillFrame+0x62>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800bfe2:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 800bfe4:	9700      	str	r7, [sp, #0]
 800bfe6:	4643      	mov	r3, r8
 800bfe8:	4632      	mov	r2, r6
 800bfea:	4629      	mov	r1, r5
 800bfec:	4648      	mov	r0, r9
 800bfee:	47a0      	blx	r4
 800bff0:	b978      	cbnz	r0, 800c012 <UG_FillFrame+0x62>
      for( n=x1; n<=x2; n++ )
      {
         gui->pset(n,m,c);
      }
   }
}
 800bff2:	b003      	add	sp, #12
 800bff4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
         gui->pset(n,m,c);
 800bff8:	4b08      	ldr	r3, [pc, #32]	; (800c01c <UG_FillFrame+0x6c>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	463a      	mov	r2, r7
 800c000:	4629      	mov	r1, r5
 800c002:	4620      	mov	r0, r4
 800c004:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 800c006:	3401      	adds	r4, #1
 800c008:	b224      	sxth	r4, r4
 800c00a:	42a6      	cmp	r6, r4
 800c00c:	daf4      	bge.n	800bff8 <UG_FillFrame+0x48>
   for( m=y1; m<=y2; m++ )
 800c00e:	3501      	adds	r5, #1
 800c010:	b22d      	sxth	r5, r5
 800c012:	45a8      	cmp	r8, r5
 800c014:	dbed      	blt.n	800bff2 <UG_FillFrame+0x42>
      for( n=x1; n<=x2; n++ )
 800c016:	464c      	mov	r4, r9
 800c018:	e7f7      	b.n	800c00a <UG_FillFrame+0x5a>
 800c01a:	bf00      	nop
 800c01c:	20011514 	.word	0x20011514

0800c020 <UG_DrawPixel>:
=======
 800be64:	b500      	push	{lr}
   gui->font = *font;
 800be66:	4b07      	ldr	r3, [pc, #28]	; (800be84 <UG_FontSelect+0x20>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f103 0c2c 	add.w	ip, r3, #44	; 0x2c
 800be6e:	4686      	mov	lr, r0
 800be70:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800be74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800be78:	f8de 3000 	ldr.w	r3, [lr]
 800be7c:	f8cc 3000 	str.w	r3, [ip]
}
 800be80:	f85d fb04 	ldr.w	pc, [sp], #4
 800be84:	20012504 	.word	0x20012504

0800be88 <UG_DrawPixel>:
>>>>>>> render
   UG_DrawArc(x1+r, y2-r, r, 0x30, c);
   UG_DrawArc(x2-r, y2-r, r, 0xC0, c);
}

void UG_DrawPixel( UG_S16 x0, UG_S16 y0, UG_COLOR c )
{
<<<<<<< HEAD
 800c020:	b508      	push	{r3, lr}
   gui->pset(x0,y0,c);
 800c022:	4b02      	ldr	r3, [pc, #8]	; (800c02c <UG_DrawPixel+0xc>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4798      	blx	r3
}
 800c02a:	bd08      	pop	{r3, pc}
 800c02c:	20011514 	.word	0x20011514

0800c030 <UG_SetForecolor>:
=======
 800be88:	b508      	push	{r3, lr}
   gui->pset(x0,y0,c);
 800be8a:	4b02      	ldr	r3, [pc, #8]	; (800be94 <UG_DrawPixel+0xc>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4798      	blx	r3
}
 800be92:	bd08      	pop	{r3, pc}
 800be94:	20012504 	.word	0x20012504

0800be98 <UG_SetForecolor>:
>>>>>>> render
   gui->console.back_color = c;
}

void UG_SetForecolor( UG_COLOR c )
{
   gui->fore_color = c;
<<<<<<< HEAD
 800c030:	4b02      	ldr	r3, [pc, #8]	; (800c03c <UG_SetForecolor+0xc>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
}
 800c038:	4770      	bx	lr
 800c03a:	bf00      	nop
 800c03c:	20011514 	.word	0x20011514

0800c040 <UG_SetBackcolor>:
=======
 800be98:	4b02      	ldr	r3, [pc, #8]	; (800bea4 <UG_SetForecolor+0xc>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
}
 800bea0:	4770      	bx	lr
 800bea2:	bf00      	nop
 800bea4:	20012504 	.word	0x20012504

0800bea8 <UG_SetBackcolor>:
>>>>>>> render

void UG_SetBackcolor( UG_COLOR c )
{
   gui->back_color = c;
<<<<<<< HEAD
 800c040:	4b02      	ldr	r3, [pc, #8]	; (800c04c <UG_SetBackcolor+0xc>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
}
 800c048:	4770      	bx	lr
 800c04a:	bf00      	nop
 800c04c:	20011514 	.word	0x20011514

0800c050 <UG_DriverRegister>:
=======
 800bea8:	4b02      	ldr	r3, [pc, #8]	; (800beb4 <UG_SetBackcolor+0xc>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
}
 800beb0:	4770      	bx	lr
 800beb2:	bf00      	nop
 800beb4:	20012504 	.word	0x20012504

0800beb8 <UG_DriverRegister>:
>>>>>>> render
/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
   if ( type >= NUMBER_OF_DRIVERS ) return;
<<<<<<< HEAD
 800c050:	2802      	cmp	r0, #2
 800c052:	d807      	bhi.n	800c064 <UG_DriverRegister+0x14>

   gui->driver[type].driver = driver;
 800c054:	4b04      	ldr	r3, [pc, #16]	; (800c068 <UG_DriverRegister+0x18>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	3009      	adds	r0, #9
 800c05a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c05e:	6041      	str	r1, [r0, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 800c060:	2303      	movs	r3, #3
 800c062:	7203      	strb	r3, [r0, #8]
}
 800c064:	4770      	bx	lr
 800c066:	bf00      	nop
 800c068:	20011514 	.word	0x20011514

0800c06c <UG_DriverEnable>:
=======
 800beb8:	2802      	cmp	r0, #2
 800beba:	d807      	bhi.n	800becc <UG_DriverRegister+0x14>

   gui->driver[type].driver = driver;
 800bebc:	4b04      	ldr	r3, [pc, #16]	; (800bed0 <UG_DriverRegister+0x18>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	3009      	adds	r0, #9
 800bec2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800bec6:	6041      	str	r1, [r0, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 800bec8:	2303      	movs	r3, #3
 800beca:	7203      	strb	r3, [r0, #8]
}
 800becc:	4770      	bx	lr
 800bece:	bf00      	nop
 800bed0:	20012504 	.word	0x20012504

0800bed4 <UG_DriverEnable>:
>>>>>>> render

void UG_DriverEnable( UG_U8 type )
{
   if ( type >= NUMBER_OF_DRIVERS ) return;
<<<<<<< HEAD
 800c06c:	2802      	cmp	r0, #2
 800c06e:	d80f      	bhi.n	800c090 <UG_DriverEnable+0x24>
   if ( gui->driver[type].state & DRIVER_REGISTERED )
 800c070:	4b08      	ldr	r3, [pc, #32]	; (800c094 <UG_DriverEnable+0x28>)
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	f100 0309 	add.w	r3, r0, #9
 800c078:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c07c:	7a1b      	ldrb	r3, [r3, #8]
 800c07e:	f013 0f01 	tst.w	r3, #1
 800c082:	d005      	beq.n	800c090 <UG_DriverEnable+0x24>
   {
      gui->driver[type].state |= DRIVER_ENABLED;
 800c084:	3009      	adds	r0, #9
 800c086:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800c08a:	f043 0302 	orr.w	r3, r3, #2
 800c08e:	7203      	strb	r3, [r0, #8]
   }
}
 800c090:	4770      	bx	lr
 800c092:	bf00      	nop
 800c094:	20011514 	.word	0x20011514

0800c098 <USBD_CDC_EP0_RxReady>:
=======
 800bed4:	2802      	cmp	r0, #2
 800bed6:	d80f      	bhi.n	800bef8 <UG_DriverEnable+0x24>
   if ( gui->driver[type].state & DRIVER_REGISTERED )
 800bed8:	4b08      	ldr	r3, [pc, #32]	; (800befc <UG_DriverEnable+0x28>)
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	f100 0309 	add.w	r3, r0, #9
 800bee0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bee4:	7a1b      	ldrb	r3, [r3, #8]
 800bee6:	f013 0f01 	tst.w	r3, #1
 800beea:	d005      	beq.n	800bef8 <UG_DriverEnable+0x24>
   {
      gui->driver[type].state |= DRIVER_ENABLED;
 800beec:	3009      	adds	r0, #9
 800beee:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800bef2:	f043 0302 	orr.w	r3, r3, #2
 800bef6:	7203      	strb	r3, [r0, #8]
   }
}
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop
 800befc:	20012504 	.word	0x20012504

0800bf00 <USBD_CDC_EP0_RxReady>:
>>>>>>> render
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800c098:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c09a:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800c09e:	b184      	cbz	r4, 800c0c2 <USBD_CDC_EP0_RxReady+0x2a>
=======
 800bf00:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf02:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800bf06:	b184      	cbz	r4, 800bf2a <USBD_CDC_EP0_RxReady+0x2a>
>>>>>>> render
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
<<<<<<< HEAD
 800c0a0:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800c0a4:	b17b      	cbz	r3, 800c0c6 <USBD_CDC_EP0_RxReady+0x2e>
 800c0a6:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800c0aa:	28ff      	cmp	r0, #255	; 0xff
 800c0ac:	d00d      	beq.n	800c0ca <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c0ae:	689b      	ldr	r3, [r3, #8]
 800c0b0:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800c0b4:	4621      	mov	r1, r4
 800c0b6:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800c0b8:	23ff      	movs	r3, #255	; 0xff
 800c0ba:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c0be:	2000      	movs	r0, #0
}
 800c0c0:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800c0c2:	2003      	movs	r0, #3
 800c0c4:	e7fc      	b.n	800c0c0 <USBD_CDC_EP0_RxReady+0x28>
  return (uint8_t)USBD_OK;
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	e7fa      	b.n	800c0c0 <USBD_CDC_EP0_RxReady+0x28>
 800c0ca:	2000      	movs	r0, #0
 800c0cc:	e7f8      	b.n	800c0c0 <USBD_CDC_EP0_RxReady+0x28>
	...

0800c0d0 <USBD_CDC_GetFSCfgDesc>:
=======
 800bf08:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800bf0c:	b17b      	cbz	r3, 800bf2e <USBD_CDC_EP0_RxReady+0x2e>
 800bf0e:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800bf12:	28ff      	cmp	r0, #255	; 0xff
 800bf14:	d00d      	beq.n	800bf32 <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bf16:	689b      	ldr	r3, [r3, #8]
 800bf18:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800bf1c:	4621      	mov	r1, r4
 800bf1e:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800bf20:	23ff      	movs	r3, #255	; 0xff
 800bf22:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bf26:	2000      	movs	r0, #0
}
 800bf28:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800bf2a:	2003      	movs	r0, #3
 800bf2c:	e7fc      	b.n	800bf28 <USBD_CDC_EP0_RxReady+0x28>
  return (uint8_t)USBD_OK;
 800bf2e:	2000      	movs	r0, #0
 800bf30:	e7fa      	b.n	800bf28 <USBD_CDC_EP0_RxReady+0x28>
 800bf32:	2000      	movs	r0, #0
 800bf34:	e7f8      	b.n	800bf28 <USBD_CDC_EP0_RxReady+0x28>
	...

0800bf38 <USBD_CDC_GetFSCfgDesc>:
>>>>>>> render
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
<<<<<<< HEAD
 800c0d0:	2343      	movs	r3, #67	; 0x43
 800c0d2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800c0d4:	4800      	ldr	r0, [pc, #0]	; (800c0d8 <USBD_CDC_GetFSCfgDesc+0x8>)
 800c0d6:	4770      	bx	lr
 800c0d8:	20000148 	.word	0x20000148

0800c0dc <USBD_CDC_GetHSCfgDesc>:
=======
 800bf38:	2343      	movs	r3, #67	; 0x43
 800bf3a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800bf3c:	4800      	ldr	r0, [pc, #0]	; (800bf40 <USBD_CDC_GetFSCfgDesc+0x8>)
 800bf3e:	4770      	bx	lr
 800bf40:	20001138 	.word	0x20001138

0800bf44 <USBD_CDC_GetHSCfgDesc>:
>>>>>>> render
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
<<<<<<< HEAD
 800c0dc:	2343      	movs	r3, #67	; 0x43
 800c0de:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800c0e0:	4800      	ldr	r0, [pc, #0]	; (800c0e4 <USBD_CDC_GetHSCfgDesc+0x8>)
 800c0e2:	4770      	bx	lr
 800c0e4:	2000018c 	.word	0x2000018c

0800c0e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
=======
 800bf44:	2343      	movs	r3, #67	; 0x43
 800bf46:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800bf48:	4800      	ldr	r0, [pc, #0]	; (800bf4c <USBD_CDC_GetHSCfgDesc+0x8>)
 800bf4a:	4770      	bx	lr
 800bf4c:	2000117c 	.word	0x2000117c

0800bf50 <USBD_CDC_GetOtherSpeedCfgDesc>:
>>>>>>> render
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
<<<<<<< HEAD
 800c0e8:	2343      	movs	r3, #67	; 0x43
 800c0ea:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800c0ec:	4800      	ldr	r0, [pc, #0]	; (800c0f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800c0ee:	4770      	bx	lr
 800c0f0:	200001dc 	.word	0x200001dc

0800c0f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
=======
 800bf50:	2343      	movs	r3, #67	; 0x43
 800bf52:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800bf54:	4800      	ldr	r0, [pc, #0]	; (800bf58 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800bf56:	4770      	bx	lr
 800bf58:	200011cc 	.word	0x200011cc

0800bf5c <USBD_CDC_GetDeviceQualifierDescriptor>:
>>>>>>> render
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
<<<<<<< HEAD
 800c0f4:	230a      	movs	r3, #10
 800c0f6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800c0f8:	4800      	ldr	r0, [pc, #0]	; (800c0fc <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800c0fa:	4770      	bx	lr
 800c0fc:	200001d0 	.word	0x200001d0

0800c100 <USBD_CDC_DataOut>:
{
 800c100:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c102:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800c106:	b175      	cbz	r5, 800c126 <USBD_CDC_DataOut+0x26>
 800c108:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c10a:	f001 f8a3 	bl	800d254 <USBD_LL_GetRxDataSize>
 800c10e:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c112:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800c116:	68db      	ldr	r3, [r3, #12]
 800c118:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800c11c:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800c120:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800c122:	2000      	movs	r0, #0
}
 800c124:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800c126:	2003      	movs	r0, #3
 800c128:	e7fc      	b.n	800c124 <USBD_CDC_DataOut+0x24>

0800c12a <USBD_CDC_DataIn>:
{
 800c12a:	b510      	push	{r4, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c12c:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 800c130:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800c134:	b353      	cbz	r3, 800c18c <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c136:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800c13a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c13e:	6992      	ldr	r2, [r2, #24]
 800c140:	b14a      	cbz	r2, 800c156 <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c142:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 800c146:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 800c14a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800c14c:	fbb2 fcf4 	udiv	ip, r2, r4
 800c150:	fb04 221c 	mls	r2, r4, ip, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c154:	b172      	cbz	r2, 800c174 <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 800c156:	2200      	movs	r2, #0
 800c158:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c15c:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800c160:	6914      	ldr	r4, [r2, #16]
 800c162:	b1ac      	cbz	r4, 800c190 <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c164:	460a      	mov	r2, r1
 800c166:	f503 7104 	add.w	r1, r3, #528	; 0x210
 800c16a:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 800c16e:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 800c170:	2000      	movs	r0, #0
}
 800c172:	bd10      	pop	{r4, pc}
    pdev->ep_in[epnum].total_length = 0U;
 800c174:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800c178:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c17c:	2400      	movs	r4, #0
 800c17e:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c180:	4623      	mov	r3, r4
 800c182:	4622      	mov	r2, r4
 800c184:	f001 f856 	bl	800d234 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800c188:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c18a:	e7f2      	b.n	800c172 <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 800c18c:	2003      	movs	r0, #3
 800c18e:	e7f0      	b.n	800c172 <USBD_CDC_DataIn+0x48>
  return (uint8_t)USBD_OK;
 800c190:	2000      	movs	r0, #0
 800c192:	e7ee      	b.n	800c172 <USBD_CDC_DataIn+0x48>

0800c194 <USBD_CDC_Setup>:
{
 800c194:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c196:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c198:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800c19c:	2300      	movs	r3, #0
 800c19e:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 800c1a2:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hcdc == NULL)
 800c1a6:	2e00      	cmp	r6, #0
 800c1a8:	d06c      	beq.n	800c284 <USBD_CDC_Setup+0xf0>
 800c1aa:	4607      	mov	r7, r0
 800c1ac:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1ae:	780b      	ldrb	r3, [r1, #0]
 800c1b0:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 800c1b4:	d02a      	beq.n	800c20c <USBD_CDC_Setup+0x78>
 800c1b6:	2d20      	cmp	r5, #32
 800c1b8:	d15e      	bne.n	800c278 <USBD_CDC_Setup+0xe4>
      if (req->wLength != 0U)
 800c1ba:	88ca      	ldrh	r2, [r1, #6]
 800c1bc:	b1f2      	cbz	r2, 800c1fc <USBD_CDC_Setup+0x68>
        if ((req->bmRequest & 0x80U) != 0U)
 800c1be:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c1c2:	d00f      	beq.n	800c1e4 <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c1c4:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800c1c8:	689b      	ldr	r3, [r3, #8]
 800c1ca:	4631      	mov	r1, r6
 800c1cc:	7860      	ldrb	r0, [r4, #1]
 800c1ce:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c1d0:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c1d2:	2a07      	cmp	r2, #7
 800c1d4:	bf28      	it	cs
 800c1d6:	2207      	movcs	r2, #7
 800c1d8:	4631      	mov	r1, r6
 800c1da:	4638      	mov	r0, r7
 800c1dc:	f000 fdd4 	bl	800cd88 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800c1e0:	2500      	movs	r5, #0
 800c1e2:	e04c      	b.n	800c27e <USBD_CDC_Setup+0xea>
          hcdc->CmdOpCode = req->bRequest;
 800c1e4:	784b      	ldrb	r3, [r1, #1]
 800c1e6:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c1ea:	798b      	ldrb	r3, [r1, #6]
 800c1ec:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c1f0:	88ca      	ldrh	r2, [r1, #6]
 800c1f2:	4631      	mov	r1, r6
 800c1f4:	f000 fddd 	bl	800cdb2 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800c1f8:	2500      	movs	r5, #0
 800c1fa:	e040      	b.n	800c27e <USBD_CDC_Setup+0xea>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c1fc:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800c200:	689b      	ldr	r3, [r3, #8]
 800c202:	2200      	movs	r2, #0
 800c204:	7848      	ldrb	r0, [r1, #1]
 800c206:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 800c208:	2500      	movs	r5, #0
 800c20a:	e038      	b.n	800c27e <USBD_CDC_Setup+0xea>
      switch (req->bRequest)
 800c20c:	784e      	ldrb	r6, [r1, #1]
 800c20e:	2e0b      	cmp	r6, #11
 800c210:	d82e      	bhi.n	800c270 <USBD_CDC_Setup+0xdc>
 800c212:	e8df f006 	tbb	[pc, r6]
 800c216:	3406      	.short	0x3406
 800c218:	2d2d2d2d 	.word	0x2d2d2d2d
 800c21c:	2d2d2d2d 	.word	0x2d2d2d2d
 800c220:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c222:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c226:	b2db      	uxtb	r3, r3
 800c228:	2b03      	cmp	r3, #3
 800c22a:	d003      	beq.n	800c234 <USBD_CDC_Setup+0xa0>
            USBD_CtlError(pdev, req);
 800c22c:	f000 fa72 	bl	800c714 <USBD_CtlError>
            ret = USBD_FAIL;
 800c230:	2503      	movs	r5, #3
 800c232:	e024      	b.n	800c27e <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c234:	2202      	movs	r2, #2
 800c236:	a901      	add	r1, sp, #4
 800c238:	f000 fda6 	bl	800cd88 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800c23c:	4635      	mov	r5, r6
 800c23e:	e01e      	b.n	800c27e <USBD_CDC_Setup+0xea>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c240:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c244:	b2db      	uxtb	r3, r3
 800c246:	2b03      	cmp	r3, #3
 800c248:	d003      	beq.n	800c252 <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 800c24a:	f000 fa63 	bl	800c714 <USBD_CtlError>
            ret = USBD_FAIL;
 800c24e:	2503      	movs	r5, #3
 800c250:	e015      	b.n	800c27e <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c252:	2201      	movs	r2, #1
 800c254:	f10d 0107 	add.w	r1, sp, #7
 800c258:	f000 fd96 	bl	800cd88 <USBD_CtlSendData>
 800c25c:	e00f      	b.n	800c27e <USBD_CDC_Setup+0xea>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c25e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c262:	b2db      	uxtb	r3, r3
 800c264:	2b03      	cmp	r3, #3
 800c266:	d00a      	beq.n	800c27e <USBD_CDC_Setup+0xea>
            USBD_CtlError(pdev, req);
 800c268:	f000 fa54 	bl	800c714 <USBD_CtlError>
            ret = USBD_FAIL;
 800c26c:	2503      	movs	r5, #3
 800c26e:	e006      	b.n	800c27e <USBD_CDC_Setup+0xea>
          USBD_CtlError(pdev, req);
 800c270:	f000 fa50 	bl	800c714 <USBD_CtlError>
          ret = USBD_FAIL;
 800c274:	2503      	movs	r5, #3
          break;
 800c276:	e002      	b.n	800c27e <USBD_CDC_Setup+0xea>
      USBD_CtlError(pdev, req);
 800c278:	f000 fa4c 	bl	800c714 <USBD_CtlError>
      ret = USBD_FAIL;
 800c27c:	2503      	movs	r5, #3
}
 800c27e:	4628      	mov	r0, r5
 800c280:	b003      	add	sp, #12
 800c282:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800c284:	2503      	movs	r5, #3
 800c286:	e7fa      	b.n	800c27e <USBD_CDC_Setup+0xea>

0800c288 <USBD_CDC_DeInit>:
{
 800c288:	b538      	push	{r3, r4, r5, lr}
 800c28a:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c28c:	2181      	movs	r1, #129	; 0x81
 800c28e:	f000 ff9a 	bl	800d1c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c292:	2500      	movs	r5, #0
 800c294:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c296:	2101      	movs	r1, #1
 800c298:	4620      	mov	r0, r4
 800c29a:	f000 ff94 	bl	800d1c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c29e:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c2a2:	2182      	movs	r1, #130	; 0x82
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	f000 ff8e 	bl	800d1c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c2aa:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c2ae:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 800c2b2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800c2b6:	b14b      	cbz	r3, 800c2cc <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c2b8:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c2c0:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800c2c4:	f000 fff4 	bl	800d2b0 <USBD_static_free>
    pdev->pClassData = NULL;
 800c2c8:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800c2cc:	2000      	movs	r0, #0
 800c2ce:	bd38      	pop	{r3, r4, r5, pc}

0800c2d0 <USBD_CDC_Init>:
{
 800c2d0:	b570      	push	{r4, r5, r6, lr}
 800c2d2:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c2d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c2d8:	f000 ffe6 	bl	800d2a8 <USBD_static_malloc>
  if (hcdc == NULL)
 800c2dc:	b3b8      	cbz	r0, 800c34e <USBD_CDC_Init+0x7e>
 800c2de:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 800c2e0:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2e4:	7c23      	ldrb	r3, [r4, #16]
 800c2e6:	bbbb      	cbnz	r3, 800c358 <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c2e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2ec:	2202      	movs	r2, #2
 800c2ee:	2181      	movs	r1, #129	; 0x81
 800c2f0:	4620      	mov	r0, r4
 800c2f2:	f000 ff5d 	bl	800d1b0 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c2f6:	2501      	movs	r5, #1
 800c2f8:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c2fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2fe:	2202      	movs	r2, #2
 800c300:	4629      	mov	r1, r5
 800c302:	4620      	mov	r0, r4
 800c304:	f000 ff54 	bl	800d1b0 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c308:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c30c:	2310      	movs	r3, #16
 800c30e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c312:	2308      	movs	r3, #8
 800c314:	2203      	movs	r2, #3
 800c316:	2182      	movs	r1, #130	; 0x82
 800c318:	4620      	mov	r0, r4
 800c31a:	f000 ff49 	bl	800d1b0 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c31e:	2301      	movs	r3, #1
 800c320:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c324:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4798      	blx	r3
  hcdc->TxState = 0U;
 800c32c:	2300      	movs	r3, #0
 800c32e:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 800c332:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c336:	7c25      	ldrb	r5, [r4, #16]
 800c338:	bb15      	cbnz	r5, 800c380 <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c33a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c33e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800c342:	2101      	movs	r1, #1
 800c344:	4620      	mov	r0, r4
 800c346:	f000 ff7d 	bl	800d244 <USBD_LL_PrepareReceive>
}
 800c34a:	4628      	mov	r0, r5
 800c34c:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 800c34e:	2300      	movs	r3, #0
 800c350:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800c354:	2502      	movs	r5, #2
 800c356:	e7f8      	b.n	800c34a <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c358:	2340      	movs	r3, #64	; 0x40
 800c35a:	2202      	movs	r2, #2
 800c35c:	2181      	movs	r1, #129	; 0x81
 800c35e:	4620      	mov	r0, r4
 800c360:	f000 ff26 	bl	800d1b0 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c364:	2501      	movs	r5, #1
 800c366:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c368:	2340      	movs	r3, #64	; 0x40
 800c36a:	2202      	movs	r2, #2
 800c36c:	4629      	mov	r1, r5
 800c36e:	4620      	mov	r0, r4
 800c370:	f000 ff1e 	bl	800d1b0 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c374:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c378:	2310      	movs	r3, #16
 800c37a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800c37e:	e7c8      	b.n	800c312 <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c380:	2340      	movs	r3, #64	; 0x40
 800c382:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800c386:	2101      	movs	r1, #1
 800c388:	4620      	mov	r0, r4
 800c38a:	f000 ff5b 	bl	800d244 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800c38e:	2500      	movs	r5, #0
 800c390:	e7db      	b.n	800c34a <USBD_CDC_Init+0x7a>

0800c392 <USBD_CDC_RegisterInterface>:
=======
 800bf5c:	230a      	movs	r3, #10
 800bf5e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800bf60:	4800      	ldr	r0, [pc, #0]	; (800bf64 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800bf62:	4770      	bx	lr
 800bf64:	200011c0 	.word	0x200011c0

0800bf68 <USBD_CDC_DataOut>:
{
 800bf68:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf6a:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800bf6e:	b175      	cbz	r5, 800bf8e <USBD_CDC_DataOut+0x26>
 800bf70:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bf72:	f001 f8a3 	bl	800d0bc <USBD_LL_GetRxDataSize>
 800bf76:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bf7a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800bf84:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800bf88:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800bf8a:	2000      	movs	r0, #0
}
 800bf8c:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800bf8e:	2003      	movs	r0, #3
 800bf90:	e7fc      	b.n	800bf8c <USBD_CDC_DataOut+0x24>

0800bf92 <USBD_CDC_DataIn>:
{
 800bf92:	b510      	push	{r4, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bf94:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 800bf98:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800bf9c:	b353      	cbz	r3, 800bff4 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bf9e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800bfa2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800bfa6:	6992      	ldr	r2, [r2, #24]
 800bfa8:	b14a      	cbz	r2, 800bfbe <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bfaa:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 800bfae:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 800bfb2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800bfb4:	fbb2 fcf4 	udiv	ip, r2, r4
 800bfb8:	fb04 221c 	mls	r2, r4, ip, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bfbc:	b172      	cbz	r2, 800bfdc <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bfc4:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800bfc8:	6914      	ldr	r4, [r2, #16]
 800bfca:	b1ac      	cbz	r4, 800bff8 <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bfcc:	460a      	mov	r2, r1
 800bfce:	f503 7104 	add.w	r1, r3, #528	; 0x210
 800bfd2:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 800bfd6:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 800bfd8:	2000      	movs	r0, #0
}
 800bfda:	bd10      	pop	{r4, pc}
    pdev->ep_in[epnum].total_length = 0U;
 800bfdc:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800bfe0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800bfe4:	2400      	movs	r4, #0
 800bfe6:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bfe8:	4623      	mov	r3, r4
 800bfea:	4622      	mov	r2, r4
 800bfec:	f001 f856 	bl	800d09c <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800bff0:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bff2:	e7f2      	b.n	800bfda <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 800bff4:	2003      	movs	r0, #3
 800bff6:	e7f0      	b.n	800bfda <USBD_CDC_DataIn+0x48>
  return (uint8_t)USBD_OK;
 800bff8:	2000      	movs	r0, #0
 800bffa:	e7ee      	b.n	800bfda <USBD_CDC_DataIn+0x48>

0800bffc <USBD_CDC_Setup>:
{
 800bffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bffe:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c000:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800c004:	2300      	movs	r3, #0
 800c006:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 800c00a:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hcdc == NULL)
 800c00e:	2e00      	cmp	r6, #0
 800c010:	d06c      	beq.n	800c0ec <USBD_CDC_Setup+0xf0>
 800c012:	4607      	mov	r7, r0
 800c014:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c016:	780b      	ldrb	r3, [r1, #0]
 800c018:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 800c01c:	d02a      	beq.n	800c074 <USBD_CDC_Setup+0x78>
 800c01e:	2d20      	cmp	r5, #32
 800c020:	d15e      	bne.n	800c0e0 <USBD_CDC_Setup+0xe4>
      if (req->wLength != 0U)
 800c022:	88ca      	ldrh	r2, [r1, #6]
 800c024:	b1f2      	cbz	r2, 800c064 <USBD_CDC_Setup+0x68>
        if ((req->bmRequest & 0x80U) != 0U)
 800c026:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c02a:	d00f      	beq.n	800c04c <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c02c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800c030:	689b      	ldr	r3, [r3, #8]
 800c032:	4631      	mov	r1, r6
 800c034:	7860      	ldrb	r0, [r4, #1]
 800c036:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c038:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c03a:	2a07      	cmp	r2, #7
 800c03c:	bf28      	it	cs
 800c03e:	2207      	movcs	r2, #7
 800c040:	4631      	mov	r1, r6
 800c042:	4638      	mov	r0, r7
 800c044:	f000 fdd4 	bl	800cbf0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800c048:	2500      	movs	r5, #0
 800c04a:	e04c      	b.n	800c0e6 <USBD_CDC_Setup+0xea>
          hcdc->CmdOpCode = req->bRequest;
 800c04c:	784b      	ldrb	r3, [r1, #1]
 800c04e:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c052:	798b      	ldrb	r3, [r1, #6]
 800c054:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c058:	88ca      	ldrh	r2, [r1, #6]
 800c05a:	4631      	mov	r1, r6
 800c05c:	f000 fddd 	bl	800cc1a <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800c060:	2500      	movs	r5, #0
 800c062:	e040      	b.n	800c0e6 <USBD_CDC_Setup+0xea>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c064:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800c068:	689b      	ldr	r3, [r3, #8]
 800c06a:	2200      	movs	r2, #0
 800c06c:	7848      	ldrb	r0, [r1, #1]
 800c06e:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 800c070:	2500      	movs	r5, #0
 800c072:	e038      	b.n	800c0e6 <USBD_CDC_Setup+0xea>
      switch (req->bRequest)
 800c074:	784e      	ldrb	r6, [r1, #1]
 800c076:	2e0b      	cmp	r6, #11
 800c078:	d82e      	bhi.n	800c0d8 <USBD_CDC_Setup+0xdc>
 800c07a:	e8df f006 	tbb	[pc, r6]
 800c07e:	3406      	.short	0x3406
 800c080:	2d2d2d2d 	.word	0x2d2d2d2d
 800c084:	2d2d2d2d 	.word	0x2d2d2d2d
 800c088:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c08a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	2b03      	cmp	r3, #3
 800c092:	d003      	beq.n	800c09c <USBD_CDC_Setup+0xa0>
            USBD_CtlError(pdev, req);
 800c094:	f000 fa72 	bl	800c57c <USBD_CtlError>
            ret = USBD_FAIL;
 800c098:	2503      	movs	r5, #3
 800c09a:	e024      	b.n	800c0e6 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c09c:	2202      	movs	r2, #2
 800c09e:	a901      	add	r1, sp, #4
 800c0a0:	f000 fda6 	bl	800cbf0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800c0a4:	4635      	mov	r5, r6
 800c0a6:	e01e      	b.n	800c0e6 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0a8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	2b03      	cmp	r3, #3
 800c0b0:	d003      	beq.n	800c0ba <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 800c0b2:	f000 fa63 	bl	800c57c <USBD_CtlError>
            ret = USBD_FAIL;
 800c0b6:	2503      	movs	r5, #3
 800c0b8:	e015      	b.n	800c0e6 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	f10d 0107 	add.w	r1, sp, #7
 800c0c0:	f000 fd96 	bl	800cbf0 <USBD_CtlSendData>
 800c0c4:	e00f      	b.n	800c0e6 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c0c6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c0ca:	b2db      	uxtb	r3, r3
 800c0cc:	2b03      	cmp	r3, #3
 800c0ce:	d00a      	beq.n	800c0e6 <USBD_CDC_Setup+0xea>
            USBD_CtlError(pdev, req);
 800c0d0:	f000 fa54 	bl	800c57c <USBD_CtlError>
            ret = USBD_FAIL;
 800c0d4:	2503      	movs	r5, #3
 800c0d6:	e006      	b.n	800c0e6 <USBD_CDC_Setup+0xea>
          USBD_CtlError(pdev, req);
 800c0d8:	f000 fa50 	bl	800c57c <USBD_CtlError>
          ret = USBD_FAIL;
 800c0dc:	2503      	movs	r5, #3
          break;
 800c0de:	e002      	b.n	800c0e6 <USBD_CDC_Setup+0xea>
      USBD_CtlError(pdev, req);
 800c0e0:	f000 fa4c 	bl	800c57c <USBD_CtlError>
      ret = USBD_FAIL;
 800c0e4:	2503      	movs	r5, #3
}
 800c0e6:	4628      	mov	r0, r5
 800c0e8:	b003      	add	sp, #12
 800c0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800c0ec:	2503      	movs	r5, #3
 800c0ee:	e7fa      	b.n	800c0e6 <USBD_CDC_Setup+0xea>

0800c0f0 <USBD_CDC_DeInit>:
{
 800c0f0:	b538      	push	{r3, r4, r5, lr}
 800c0f2:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c0f4:	2181      	movs	r1, #129	; 0x81
 800c0f6:	f000 ff9a 	bl	800d02e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c0fa:	2500      	movs	r5, #0
 800c0fc:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c0fe:	2101      	movs	r1, #1
 800c100:	4620      	mov	r0, r4
 800c102:	f000 ff94 	bl	800d02e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c106:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c10a:	2182      	movs	r1, #130	; 0x82
 800c10c:	4620      	mov	r0, r4
 800c10e:	f000 ff8e 	bl	800d02e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c112:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c116:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 800c11a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800c11e:	b14b      	cbz	r3, 800c134 <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c120:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c128:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800c12c:	f000 fff4 	bl	800d118 <USBD_static_free>
    pdev->pClassData = NULL;
 800c130:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800c134:	2000      	movs	r0, #0
 800c136:	bd38      	pop	{r3, r4, r5, pc}

0800c138 <USBD_CDC_Init>:
{
 800c138:	b570      	push	{r4, r5, r6, lr}
 800c13a:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c13c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c140:	f000 ffe6 	bl	800d110 <USBD_static_malloc>
  if (hcdc == NULL)
 800c144:	b3b8      	cbz	r0, 800c1b6 <USBD_CDC_Init+0x7e>
 800c146:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 800c148:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c14c:	7c23      	ldrb	r3, [r4, #16]
 800c14e:	bbbb      	cbnz	r3, 800c1c0 <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c150:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c154:	2202      	movs	r2, #2
 800c156:	2181      	movs	r1, #129	; 0x81
 800c158:	4620      	mov	r0, r4
 800c15a:	f000 ff5d 	bl	800d018 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c15e:	2501      	movs	r5, #1
 800c160:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c162:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c166:	2202      	movs	r2, #2
 800c168:	4629      	mov	r1, r5
 800c16a:	4620      	mov	r0, r4
 800c16c:	f000 ff54 	bl	800d018 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c170:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c174:	2310      	movs	r3, #16
 800c176:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c17a:	2308      	movs	r3, #8
 800c17c:	2203      	movs	r2, #3
 800c17e:	2182      	movs	r1, #130	; 0x82
 800c180:	4620      	mov	r0, r4
 800c182:	f000 ff49 	bl	800d018 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c186:	2301      	movs	r3, #1
 800c188:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c18c:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	4798      	blx	r3
  hcdc->TxState = 0U;
 800c194:	2300      	movs	r3, #0
 800c196:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 800c19a:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c19e:	7c25      	ldrb	r5, [r4, #16]
 800c1a0:	bb15      	cbnz	r5, 800c1e8 <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c1a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c1a6:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800c1aa:	2101      	movs	r1, #1
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	f000 ff7d 	bl	800d0ac <USBD_LL_PrepareReceive>
}
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800c1bc:	2502      	movs	r5, #2
 800c1be:	e7f8      	b.n	800c1b2 <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c1c0:	2340      	movs	r3, #64	; 0x40
 800c1c2:	2202      	movs	r2, #2
 800c1c4:	2181      	movs	r1, #129	; 0x81
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	f000 ff26 	bl	800d018 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c1cc:	2501      	movs	r5, #1
 800c1ce:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c1d0:	2340      	movs	r3, #64	; 0x40
 800c1d2:	2202      	movs	r2, #2
 800c1d4:	4629      	mov	r1, r5
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	f000 ff1e 	bl	800d018 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c1dc:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c1e0:	2310      	movs	r3, #16
 800c1e2:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800c1e6:	e7c8      	b.n	800c17a <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c1e8:	2340      	movs	r3, #64	; 0x40
 800c1ea:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800c1ee:	2101      	movs	r1, #1
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	f000 ff5b 	bl	800d0ac <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800c1f6:	2500      	movs	r5, #0
 800c1f8:	e7db      	b.n	800c1b2 <USBD_CDC_Init+0x7a>

0800c1fa <USBD_CDC_RegisterInterface>:
>>>>>>> render
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
<<<<<<< HEAD
 800c392:	b119      	cbz	r1, 800c39c <USBD_CDC_RegisterInterface+0xa>
=======
 800c1fa:	b119      	cbz	r1, 800c204 <USBD_CDC_RegisterInterface+0xa>
>>>>>>> render
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
<<<<<<< HEAD
 800c394:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c398:	2000      	movs	r0, #0
 800c39a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800c39c:	2003      	movs	r0, #3
}
 800c39e:	4770      	bx	lr

0800c3a0 <USBD_CDC_SetTxBuffer>:
=======
 800c1fc:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c200:	2000      	movs	r0, #0
 800c202:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800c204:	2003      	movs	r0, #3
}
 800c206:	4770      	bx	lr

0800c208 <USBD_CDC_SetTxBuffer>:
>>>>>>> render
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
<<<<<<< HEAD
 800c3a0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800c3a4:	b12b      	cbz	r3, 800c3b2 <USBD_CDC_SetTxBuffer+0x12>
=======
 800c208:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800c20c:	b12b      	cbz	r3, 800c21a <USBD_CDC_SetTxBuffer+0x12>
>>>>>>> render
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
<<<<<<< HEAD
 800c3a6:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c3aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c3ae:	2000      	movs	r0, #0
 800c3b0:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800c3b2:	2003      	movs	r0, #3
}
 800c3b4:	4770      	bx	lr

0800c3b6 <USBD_CDC_SetRxBuffer>:
=======
 800c20e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c212:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c216:	2000      	movs	r0, #0
 800c218:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800c21a:	2003      	movs	r0, #3
}
 800c21c:	4770      	bx	lr

0800c21e <USBD_CDC_SetRxBuffer>:
>>>>>>> render
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
<<<<<<< HEAD
 800c3b6:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800c3ba:	b11b      	cbz	r3, 800c3c4 <USBD_CDC_SetRxBuffer+0xe>
=======
 800c21e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800c222:	b11b      	cbz	r3, 800c22c <USBD_CDC_SetRxBuffer+0xe>
>>>>>>> render
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
<<<<<<< HEAD
 800c3bc:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c3c0:	2000      	movs	r0, #0
 800c3c2:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800c3c4:	2003      	movs	r0, #3
}
 800c3c6:	4770      	bx	lr

0800c3c8 <USBD_CDC_ReceivePacket>:
=======
 800c224:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c228:	2000      	movs	r0, #0
 800c22a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800c22c:	2003      	movs	r0, #3
}
 800c22e:	4770      	bx	lr

0800c230 <USBD_CDC_ReceivePacket>:
>>>>>>> render
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800c3c8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c3ca:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 800c3ce:	b192      	cbz	r2, 800c3f6 <USBD_CDC_ReceivePacket+0x2e>
=======
 800c230:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c232:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 800c236:	b192      	cbz	r2, 800c25e <USBD_CDC_ReceivePacket+0x2e>
>>>>>>> render
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
<<<<<<< HEAD
 800c3d0:	7c04      	ldrb	r4, [r0, #16]
 800c3d2:	b944      	cbnz	r4, 800c3e6 <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c3d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c3d8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800c3dc:	2101      	movs	r1, #1
 800c3de:	f000 ff31 	bl	800d244 <USBD_LL_PrepareReceive>
=======
 800c238:	7c04      	ldrb	r4, [r0, #16]
 800c23a:	b944      	cbnz	r4, 800c24e <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c23c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c240:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800c244:	2101      	movs	r1, #1
 800c246:	f000 ff31 	bl	800d0ac <USBD_LL_PrepareReceive>
>>>>>>> render
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
<<<<<<< HEAD
 800c3e2:	4620      	mov	r0, r4
 800c3e4:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c3e6:	2340      	movs	r3, #64	; 0x40
 800c3e8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800c3ec:	2101      	movs	r1, #1
 800c3ee:	f000 ff29 	bl	800d244 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800c3f2:	2400      	movs	r4, #0
 800c3f4:	e7f5      	b.n	800c3e2 <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 800c3f6:	2403      	movs	r4, #3
 800c3f8:	e7f3      	b.n	800c3e2 <USBD_CDC_ReceivePacket+0x1a>

0800c3fa <USBD_Init>:
=======
 800c24a:	4620      	mov	r0, r4
 800c24c:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c24e:	2340      	movs	r3, #64	; 0x40
 800c250:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800c254:	2101      	movs	r1, #1
 800c256:	f000 ff29 	bl	800d0ac <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800c25a:	2400      	movs	r4, #0
 800c25c:	e7f5      	b.n	800c24a <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 800c25e:	2403      	movs	r4, #3
 800c260:	e7f3      	b.n	800c24a <USBD_CDC_ReceivePacket+0x1a>

0800c262 <USBD_Init>:
>>>>>>> render
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
<<<<<<< HEAD
 800c3fa:	b198      	cbz	r0, 800c424 <USBD_Init+0x2a>
{
 800c3fc:	b508      	push	{r3, lr}
 800c3fe:	4603      	mov	r3, r0
=======
 800c262:	b198      	cbz	r0, 800c28c <USBD_Init+0x2a>
{
 800c264:	b508      	push	{r3, lr}
 800c266:	4603      	mov	r3, r0
>>>>>>> render
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
<<<<<<< HEAD
 800c400:	2000      	movs	r0, #0
 800c402:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c406:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c40a:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c40e:	b109      	cbz	r1, 800c414 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 800c410:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
=======
 800c268:	2000      	movs	r0, #0
 800c26a:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c26e:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c272:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c276:	b109      	cbz	r1, 800c27c <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 800c278:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
>>>>>>> render
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
<<<<<<< HEAD
 800c414:	2101      	movs	r1, #1
 800c416:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 800c41a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c41c:	4618      	mov	r0, r3
 800c41e:	f000 fe7b 	bl	800d118 <USBD_LL_Init>

  return ret;
}
 800c422:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800c424:	2003      	movs	r0, #3
}
 800c426:	4770      	bx	lr

0800c428 <USBD_RegisterClass>:
=======
 800c27c:	2101      	movs	r1, #1
 800c27e:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 800c282:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c284:	4618      	mov	r0, r3
 800c286:	f000 fe7b 	bl	800cf80 <USBD_LL_Init>

  return ret;
}
 800c28a:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800c28c:	2003      	movs	r0, #3
}
 800c28e:	4770      	bx	lr

0800c290 <USBD_RegisterClass>:
>>>>>>> render
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
<<<<<<< HEAD
 800c428:	b510      	push	{r4, lr}
 800c42a:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800c42c:	2300      	movs	r3, #0
 800c42e:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800c432:	b161      	cbz	r1, 800c44e <USBD_RegisterClass+0x26>
 800c434:	4604      	mov	r4, r0
=======
 800c290:	b510      	push	{r4, lr}
 800c292:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800c294:	2300      	movs	r3, #0
 800c296:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800c29a:	b161      	cbz	r1, 800c2b6 <USBD_RegisterClass+0x26>
 800c29c:	4604      	mov	r4, r0
>>>>>>> render
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
<<<<<<< HEAD
 800c436:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
=======
 800c29e:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
>>>>>>> render
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
<<<<<<< HEAD
 800c43a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800c43c:	b14b      	cbz	r3, 800c452 <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c43e:	f10d 0006 	add.w	r0, sp, #6
 800c442:	4798      	blx	r3
 800c444:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
=======
 800c2a2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800c2a4:	b14b      	cbz	r3, 800c2ba <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c2a6:	f10d 0006 	add.w	r0, sp, #6
 800c2aa:	4798      	blx	r3
 800c2ac:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
>>>>>>> render
  }
#endif /* USE_USB_FS */

  return USBD_OK;
<<<<<<< HEAD
 800c448:	2000      	movs	r0, #0
}
 800c44a:	b002      	add	sp, #8
 800c44c:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800c44e:	2003      	movs	r0, #3
 800c450:	e7fb      	b.n	800c44a <USBD_RegisterClass+0x22>
  return USBD_OK;
 800c452:	2000      	movs	r0, #0
 800c454:	e7f9      	b.n	800c44a <USBD_RegisterClass+0x22>

0800c456 <USBD_Start>:
=======
 800c2b0:	2000      	movs	r0, #0
}
 800c2b2:	b002      	add	sp, #8
 800c2b4:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800c2b6:	2003      	movs	r0, #3
 800c2b8:	e7fb      	b.n	800c2b2 <USBD_RegisterClass+0x22>
  return USBD_OK;
 800c2ba:	2000      	movs	r0, #0
 800c2bc:	e7f9      	b.n	800c2b2 <USBD_RegisterClass+0x22>

0800c2be <USBD_Start>:
>>>>>>> render
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800c456:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c458:	f000 fea2 	bl	800d1a0 <USBD_LL_Start>
}
 800c45c:	bd08      	pop	{r3, pc}

0800c45e <USBD_SetClassConfig>:
=======
 800c2be:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c2c0:	f000 fea2 	bl	800d008 <USBD_LL_Start>
}
 800c2c4:	bd08      	pop	{r3, pc}

0800c2c6 <USBD_SetClassConfig>:
>>>>>>> render
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
 800c45e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800c460:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c464:	b113      	cbz	r3, 800c46c <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4798      	blx	r3
=======
 800c2c6:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800c2c8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c2cc:	b113      	cbz	r3, 800c2d4 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4798      	blx	r3
>>>>>>> render
  }

  return ret;
}
<<<<<<< HEAD
 800c46a:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c46c:	2003      	movs	r0, #3
 800c46e:	e7fc      	b.n	800c46a <USBD_SetClassConfig+0xc>

0800c470 <USBD_ClrClassConfig>:
=======
 800c2d2:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c2d4:	2003      	movs	r0, #3
 800c2d6:	e7fc      	b.n	800c2d2 <USBD_SetClassConfig+0xc>

0800c2d8 <USBD_ClrClassConfig>:
>>>>>>> render
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
 800c470:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c472:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c476:	b10b      	cbz	r3, 800c47c <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	4798      	blx	r3
=======
 800c2d8:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c2da:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c2de:	b10b      	cbz	r3, 800c2e4 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c2e0:	685b      	ldr	r3, [r3, #4]
 800c2e2:	4798      	blx	r3
>>>>>>> render
  }

  return USBD_OK;
}
<<<<<<< HEAD
 800c47c:	2000      	movs	r0, #0
 800c47e:	bd08      	pop	{r3, pc}

0800c480 <USBD_LL_SetupStage>:
=======
 800c2e4:	2000      	movs	r0, #0
 800c2e6:	bd08      	pop	{r3, pc}

0800c2e8 <USBD_LL_SetupStage>:
>>>>>>> render
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
<<<<<<< HEAD
 800c480:	b538      	push	{r3, r4, r5, lr}
 800c482:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c484:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 800c488:	4628      	mov	r0, r5
 800c48a:	f000 f92f 	bl	800c6ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c48e:	2301      	movs	r3, #1
 800c490:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c494:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800c498:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c49c:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 800c4a0:	f001 031f 	and.w	r3, r1, #31
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	d00d      	beq.n	800c4c4 <USBD_LL_SetupStage+0x44>
 800c4a8:	2b02      	cmp	r3, #2
 800c4aa:	d010      	beq.n	800c4ce <USBD_LL_SetupStage+0x4e>
 800c4ac:	b12b      	cbz	r3, 800c4ba <USBD_LL_SetupStage+0x3a>
=======
 800c2e8:	b538      	push	{r3, r4, r5, lr}
 800c2ea:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c2ec:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	f000 f92f 	bl	800c554 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c2fc:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800c300:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c304:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 800c308:	f001 031f 	and.w	r3, r1, #31
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d00d      	beq.n	800c32c <USBD_LL_SetupStage+0x44>
 800c310:	2b02      	cmp	r3, #2
 800c312:	d010      	beq.n	800c336 <USBD_LL_SetupStage+0x4e>
 800c314:	b12b      	cbz	r3, 800c322 <USBD_LL_SetupStage+0x3a>
>>>>>>> render
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
<<<<<<< HEAD
 800c4ae:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800c4b2:	4620      	mov	r0, r4
 800c4b4:	f000 fe8f 	bl	800d1d6 <USBD_LL_StallEP>
      break;
 800c4b8:	e003      	b.n	800c4c2 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c4ba:	4629      	mov	r1, r5
 800c4bc:	4620      	mov	r0, r4
 800c4be:	f000 fae4 	bl	800ca8a <USBD_StdDevReq>
=======
 800c316:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800c31a:	4620      	mov	r0, r4
 800c31c:	f000 fe8f 	bl	800d03e <USBD_LL_StallEP>
      break;
 800c320:	e003      	b.n	800c32a <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c322:	4629      	mov	r1, r5
 800c324:	4620      	mov	r0, r4
 800c326:	f000 fae4 	bl	800c8f2 <USBD_StdDevReq>
>>>>>>> render
  }

  return ret;
}
<<<<<<< HEAD
 800c4c2:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c4c4:	4629      	mov	r1, r5
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	f000 fb17 	bl	800cafa <USBD_StdItfReq>
      break;
 800c4cc:	e7f9      	b.n	800c4c2 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c4ce:	4629      	mov	r1, r5
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	f000 fb46 	bl	800cb62 <USBD_StdEPReq>
      break;
 800c4d6:	e7f4      	b.n	800c4c2 <USBD_LL_SetupStage+0x42>

0800c4d8 <USBD_LL_DataOutStage>:
=======
 800c32a:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c32c:	4629      	mov	r1, r5
 800c32e:	4620      	mov	r0, r4
 800c330:	f000 fb17 	bl	800c962 <USBD_StdItfReq>
      break;
 800c334:	e7f9      	b.n	800c32a <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c336:	4629      	mov	r1, r5
 800c338:	4620      	mov	r0, r4
 800c33a:	f000 fb46 	bl	800c9ca <USBD_StdEPReq>
      break;
 800c33e:	e7f4      	b.n	800c32a <USBD_LL_SetupStage+0x42>

0800c340 <USBD_LL_DataOutStage>:
>>>>>>> render
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
<<<<<<< HEAD
 800c4d8:	b538      	push	{r3, r4, r5, lr}
 800c4da:	4604      	mov	r4, r0
=======
 800c340:	b538      	push	{r3, r4, r5, lr}
 800c342:	4604      	mov	r4, r0
>>>>>>> render
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
<<<<<<< HEAD
 800c4dc:	460d      	mov	r5, r1
 800c4de:	bb41      	cbnz	r1, 800c532 <USBD_LL_DataOutStage+0x5a>
 800c4e0:	4613      	mov	r3, r2
=======
 800c344:	460d      	mov	r5, r1
 800c346:	bb41      	cbnz	r1, 800c39a <USBD_LL_DataOutStage+0x5a>
 800c348:	4613      	mov	r3, r2
>>>>>>> render
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
<<<<<<< HEAD
 800c4e2:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800c4e6:	2a03      	cmp	r2, #3
 800c4e8:	d001      	beq.n	800c4ee <USBD_LL_DataOutStage+0x16>
=======
 800c34a:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800c34e:	2a03      	cmp	r2, #3
 800c350:	d001      	beq.n	800c356 <USBD_LL_DataOutStage+0x16>
>>>>>>> render
        }
      }
    }
  }

  return USBD_OK;
<<<<<<< HEAD
 800c4ea:	4608      	mov	r0, r1
}
 800c4ec:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800c4ee:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 800c4f2:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 800c4f6:	4291      	cmp	r1, r2
 800c4f8:	d809      	bhi.n	800c50e <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4fa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	2b03      	cmp	r3, #3
 800c502:	d00f      	beq.n	800c524 <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 800c504:	4620      	mov	r0, r4
 800c506:	f000 fc6b 	bl	800cde0 <USBD_CtlSendStatus>
  return USBD_OK;
 800c50a:	4628      	mov	r0, r5
 800c50c:	e7ee      	b.n	800c4ec <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800c50e:	1a89      	subs	r1, r1, r2
 800c510:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c514:	428a      	cmp	r2, r1
 800c516:	bf28      	it	cs
 800c518:	460a      	movcs	r2, r1
 800c51a:	4619      	mov	r1, r3
 800c51c:	f000 fc58 	bl	800cdd0 <USBD_CtlContinueRx>
  return USBD_OK;
 800c520:	4628      	mov	r0, r5
 800c522:	e7e3      	b.n	800c4ec <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 800c524:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c528:	691b      	ldr	r3, [r3, #16]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d0ea      	beq.n	800c504 <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 800c52e:	4798      	blx	r3
 800c530:	e7e8      	b.n	800c504 <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c532:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c536:	b2db      	uxtb	r3, r3
 800c538:	2b03      	cmp	r3, #3
 800c53a:	d001      	beq.n	800c540 <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 800c53c:	2000      	movs	r0, #0
 800c53e:	e7d5      	b.n	800c4ec <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 800c540:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c544:	699b      	ldr	r3, [r3, #24]
 800c546:	b10b      	cbz	r3, 800c54c <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c548:	4798      	blx	r3
        if (ret != USBD_OK)
 800c54a:	e7cf      	b.n	800c4ec <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 800c54c:	2000      	movs	r0, #0
 800c54e:	e7cd      	b.n	800c4ec <USBD_LL_DataOutStage+0x14>

0800c550 <USBD_LL_DataInStage>:
=======
 800c352:	4608      	mov	r0, r1
}
 800c354:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800c356:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 800c35a:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 800c35e:	4291      	cmp	r1, r2
 800c360:	d809      	bhi.n	800c376 <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c362:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c366:	b2db      	uxtb	r3, r3
 800c368:	2b03      	cmp	r3, #3
 800c36a:	d00f      	beq.n	800c38c <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 800c36c:	4620      	mov	r0, r4
 800c36e:	f000 fc6b 	bl	800cc48 <USBD_CtlSendStatus>
  return USBD_OK;
 800c372:	4628      	mov	r0, r5
 800c374:	e7ee      	b.n	800c354 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800c376:	1a89      	subs	r1, r1, r2
 800c378:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c37c:	428a      	cmp	r2, r1
 800c37e:	bf28      	it	cs
 800c380:	460a      	movcs	r2, r1
 800c382:	4619      	mov	r1, r3
 800c384:	f000 fc58 	bl	800cc38 <USBD_CtlContinueRx>
  return USBD_OK;
 800c388:	4628      	mov	r0, r5
 800c38a:	e7e3      	b.n	800c354 <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 800c38c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c390:	691b      	ldr	r3, [r3, #16]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d0ea      	beq.n	800c36c <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 800c396:	4798      	blx	r3
 800c398:	e7e8      	b.n	800c36c <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c39a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c39e:	b2db      	uxtb	r3, r3
 800c3a0:	2b03      	cmp	r3, #3
 800c3a2:	d001      	beq.n	800c3a8 <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 800c3a4:	2000      	movs	r0, #0
 800c3a6:	e7d5      	b.n	800c354 <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 800c3a8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c3ac:	699b      	ldr	r3, [r3, #24]
 800c3ae:	b10b      	cbz	r3, 800c3b4 <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c3b0:	4798      	blx	r3
        if (ret != USBD_OK)
 800c3b2:	e7cf      	b.n	800c354 <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 800c3b4:	2000      	movs	r0, #0
 800c3b6:	e7cd      	b.n	800c354 <USBD_LL_DataOutStage+0x14>

0800c3b8 <USBD_LL_DataInStage>:
>>>>>>> render
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
<<<<<<< HEAD
 800c550:	b538      	push	{r3, r4, r5, lr}
 800c552:	4604      	mov	r4, r0
=======
 800c3b8:	b538      	push	{r3, r4, r5, lr}
 800c3ba:	4604      	mov	r4, r0
>>>>>>> render
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
<<<<<<< HEAD
 800c554:	460d      	mov	r5, r1
 800c556:	2900      	cmp	r1, #0
 800c558:	d14a      	bne.n	800c5f0 <USBD_LL_DataInStage+0xa0>
 800c55a:	4613      	mov	r3, r2
=======
 800c3bc:	460d      	mov	r5, r1
 800c3be:	2900      	cmp	r1, #0
 800c3c0:	d14a      	bne.n	800c458 <USBD_LL_DataInStage+0xa0>
 800c3c2:	4613      	mov	r3, r2
>>>>>>> render
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
<<<<<<< HEAD
 800c55c:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800c560:	2a02      	cmp	r2, #2
 800c562:	d005      	beq.n	800c570 <USBD_LL_DataInStage+0x20>
=======
 800c3c4:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800c3c8:	2a02      	cmp	r2, #2
 800c3ca:	d005      	beq.n	800c3d8 <USBD_LL_DataInStage+0x20>
>>>>>>> render
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
<<<<<<< HEAD
 800c564:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d03c      	beq.n	800c5e6 <USBD_LL_DataInStage+0x96>
=======
 800c3cc:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d03c      	beq.n	800c44e <USBD_LL_DataInStage+0x96>
>>>>>>> render
        }
      }
    }
  }

  return USBD_OK;
<<<<<<< HEAD
 800c56c:	4628      	mov	r0, r5
}
 800c56e:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800c570:	69c2      	ldr	r2, [r0, #28]
 800c572:	6a01      	ldr	r1, [r0, #32]
 800c574:	428a      	cmp	r2, r1
 800c576:	d80e      	bhi.n	800c596 <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 800c578:	428a      	cmp	r2, r1
 800c57a:	d018      	beq.n	800c5ae <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c57c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800c580:	b2db      	uxtb	r3, r3
 800c582:	2b03      	cmp	r3, #3
 800c584:	d027      	beq.n	800c5d6 <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c586:	2180      	movs	r1, #128	; 0x80
 800c588:	4620      	mov	r0, r4
 800c58a:	f000 fe24 	bl	800d1d6 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c58e:	4620      	mov	r0, r4
 800c590:	f000 fc31 	bl	800cdf6 <USBD_CtlReceiveStatus>
 800c594:	e7e6      	b.n	800c564 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800c596:	1a52      	subs	r2, r2, r1
 800c598:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c59a:	4619      	mov	r1, r3
 800c59c:	f000 fc01 	bl	800cda2 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	4619      	mov	r1, r3
 800c5a6:	4620      	mov	r0, r4
 800c5a8:	f000 fe4c 	bl	800d244 <USBD_LL_PrepareReceive>
 800c5ac:	e7da      	b.n	800c564 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 800c5ae:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800c5b0:	4299      	cmp	r1, r3
 800c5b2:	d8e3      	bhi.n	800c57c <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 800c5b4:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d2df      	bcs.n	800c57c <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c5bc:	2200      	movs	r2, #0
 800c5be:	4611      	mov	r1, r2
 800c5c0:	f000 fbef 	bl	800cda2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c5c4:	2100      	movs	r1, #0
 800c5c6:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	460a      	mov	r2, r1
 800c5ce:	4620      	mov	r0, r4
 800c5d0:	f000 fe38 	bl	800d244 <USBD_LL_PrepareReceive>
 800c5d4:	e7c6      	b.n	800c564 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 800c5d6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800c5da:	68db      	ldr	r3, [r3, #12]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d0d2      	beq.n	800c586 <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	4798      	blx	r3
 800c5e4:	e7cf      	b.n	800c586 <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 800c5ec:	4628      	mov	r0, r5
 800c5ee:	e7be      	b.n	800c56e <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5f0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c5f4:	b2db      	uxtb	r3, r3
 800c5f6:	2b03      	cmp	r3, #3
 800c5f8:	d001      	beq.n	800c5fe <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 800c5fa:	2000      	movs	r0, #0
 800c5fc:	e7b7      	b.n	800c56e <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 800c5fe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c602:	695b      	ldr	r3, [r3, #20]
 800c604:	b10b      	cbz	r3, 800c60a <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c606:	4798      	blx	r3
        if (ret != USBD_OK)
 800c608:	e7b1      	b.n	800c56e <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 800c60a:	2000      	movs	r0, #0
 800c60c:	e7af      	b.n	800c56e <USBD_LL_DataInStage+0x1e>

0800c60e <USBD_LL_Reset>:
=======
 800c3d4:	4628      	mov	r0, r5
}
 800c3d6:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800c3d8:	69c2      	ldr	r2, [r0, #28]
 800c3da:	6a01      	ldr	r1, [r0, #32]
 800c3dc:	428a      	cmp	r2, r1
 800c3de:	d80e      	bhi.n	800c3fe <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 800c3e0:	428a      	cmp	r2, r1
 800c3e2:	d018      	beq.n	800c416 <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3e4:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800c3e8:	b2db      	uxtb	r3, r3
 800c3ea:	2b03      	cmp	r3, #3
 800c3ec:	d027      	beq.n	800c43e <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3ee:	2180      	movs	r1, #128	; 0x80
 800c3f0:	4620      	mov	r0, r4
 800c3f2:	f000 fe24 	bl	800d03e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	f000 fc31 	bl	800cc5e <USBD_CtlReceiveStatus>
 800c3fc:	e7e6      	b.n	800c3cc <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800c3fe:	1a52      	subs	r2, r2, r1
 800c400:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c402:	4619      	mov	r1, r3
 800c404:	f000 fc01 	bl	800cc0a <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c408:	2300      	movs	r3, #0
 800c40a:	461a      	mov	r2, r3
 800c40c:	4619      	mov	r1, r3
 800c40e:	4620      	mov	r0, r4
 800c410:	f000 fe4c 	bl	800d0ac <USBD_LL_PrepareReceive>
 800c414:	e7da      	b.n	800c3cc <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 800c416:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800c418:	4299      	cmp	r1, r3
 800c41a:	d8e3      	bhi.n	800c3e4 <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 800c41c:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c420:	4293      	cmp	r3, r2
 800c422:	d2df      	bcs.n	800c3e4 <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c424:	2200      	movs	r2, #0
 800c426:	4611      	mov	r1, r2
 800c428:	f000 fbef 	bl	800cc0a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c42c:	2100      	movs	r1, #0
 800c42e:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c432:	460b      	mov	r3, r1
 800c434:	460a      	mov	r2, r1
 800c436:	4620      	mov	r0, r4
 800c438:	f000 fe38 	bl	800d0ac <USBD_LL_PrepareReceive>
 800c43c:	e7c6      	b.n	800c3cc <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 800c43e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800c442:	68db      	ldr	r3, [r3, #12]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d0d2      	beq.n	800c3ee <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 800c448:	4620      	mov	r0, r4
 800c44a:	4798      	blx	r3
 800c44c:	e7cf      	b.n	800c3ee <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 800c44e:	2300      	movs	r3, #0
 800c450:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 800c454:	4628      	mov	r0, r5
 800c456:	e7be      	b.n	800c3d6 <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c458:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	2b03      	cmp	r3, #3
 800c460:	d001      	beq.n	800c466 <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 800c462:	2000      	movs	r0, #0
 800c464:	e7b7      	b.n	800c3d6 <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 800c466:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c46a:	695b      	ldr	r3, [r3, #20]
 800c46c:	b10b      	cbz	r3, 800c472 <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c46e:	4798      	blx	r3
        if (ret != USBD_OK)
 800c470:	e7b1      	b.n	800c3d6 <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 800c472:	2000      	movs	r0, #0
 800c474:	e7af      	b.n	800c3d6 <USBD_LL_DataInStage+0x1e>

0800c476 <USBD_LL_Reset>:
>>>>>>> render
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
<<<<<<< HEAD
 800c60e:	2301      	movs	r3, #1
 800c610:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c614:	2300      	movs	r3, #0
 800c616:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800c61a:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800c61c:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c620:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c624:	b1f3      	cbz	r3, 800c664 <USBD_LL_Reset+0x56>
{
 800c626:	b570      	push	{r4, r5, r6, lr}
 800c628:	4604      	mov	r4, r0
=======
 800c476:	2301      	movs	r3, #1
 800c478:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c47c:	2300      	movs	r3, #0
 800c47e:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800c482:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800c484:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c488:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c48c:	b1f3      	cbz	r3, 800c4cc <USBD_LL_Reset+0x56>
{
 800c48e:	b570      	push	{r4, r5, r6, lr}
 800c490:	4604      	mov	r4, r0
>>>>>>> render
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
<<<<<<< HEAD
 800c62a:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800c62e:	b11a      	cbz	r2, 800c638 <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	b10b      	cbz	r3, 800c638 <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c634:	2100      	movs	r1, #0
 800c636:	4798      	blx	r3
=======
 800c492:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800c496:	b11a      	cbz	r2, 800c4a0 <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	b10b      	cbz	r3, 800c4a0 <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c49c:	2100      	movs	r1, #0
 800c49e:	4798      	blx	r3
>>>>>>> render
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
<<<<<<< HEAD
 800c638:	2340      	movs	r3, #64	; 0x40
 800c63a:	2200      	movs	r2, #0
 800c63c:	4611      	mov	r1, r2
 800c63e:	4620      	mov	r0, r4
 800c640:	f000 fdb6 	bl	800d1b0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c644:	2601      	movs	r6, #1
 800c646:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c64a:	2540      	movs	r5, #64	; 0x40
 800c64c:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c650:	462b      	mov	r3, r5
 800c652:	2200      	movs	r2, #0
 800c654:	2180      	movs	r1, #128	; 0x80
 800c656:	4620      	mov	r0, r4
 800c658:	f000 fdaa 	bl	800d1b0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c65c:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c65e:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 800c660:	2000      	movs	r0, #0
}
 800c662:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800c664:	2003      	movs	r0, #3
}
 800c666:	4770      	bx	lr

0800c668 <USBD_LL_SetSpeed>:
=======
 800c4a0:	2340      	movs	r3, #64	; 0x40
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	4611      	mov	r1, r2
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	f000 fdb6 	bl	800d018 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c4ac:	2601      	movs	r6, #1
 800c4ae:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c4b2:	2540      	movs	r5, #64	; 0x40
 800c4b4:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c4b8:	462b      	mov	r3, r5
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	2180      	movs	r1, #128	; 0x80
 800c4be:	4620      	mov	r0, r4
 800c4c0:	f000 fdaa 	bl	800d018 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c4c4:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c4c6:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 800c4c8:	2000      	movs	r0, #0
}
 800c4ca:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800c4cc:	2003      	movs	r0, #3
}
 800c4ce:	4770      	bx	lr

0800c4d0 <USBD_LL_SetSpeed>:
>>>>>>> render
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
<<<<<<< HEAD
 800c668:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800c66a:	2000      	movs	r0, #0
 800c66c:	4770      	bx	lr

0800c66e <USBD_LL_Suspend>:
=======
 800c4d0:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800c4d2:	2000      	movs	r0, #0
 800c4d4:	4770      	bx	lr

0800c4d6 <USBD_LL_Suspend>:
>>>>>>> render
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
<<<<<<< HEAD
 800c66e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c672:	b2db      	uxtb	r3, r3
 800c674:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c678:	2304      	movs	r3, #4
 800c67a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800c67e:	2000      	movs	r0, #0
 800c680:	4770      	bx	lr

0800c682 <USBD_LL_Resume>:
=======
 800c4d6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c4e0:	2304      	movs	r3, #4
 800c4e2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800c4e6:	2000      	movs	r0, #0
 800c4e8:	4770      	bx	lr

0800c4ea <USBD_LL_Resume>:
>>>>>>> render
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
<<<<<<< HEAD
 800c682:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c686:	b2db      	uxtb	r3, r3
 800c688:	2b04      	cmp	r3, #4
 800c68a:	d001      	beq.n	800c690 <USBD_LL_Resume+0xe>
=======
 800c4ea:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c4ee:	b2db      	uxtb	r3, r3
 800c4f0:	2b04      	cmp	r3, #4
 800c4f2:	d001      	beq.n	800c4f8 <USBD_LL_Resume+0xe>
>>>>>>> render
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
<<<<<<< HEAD
 800c68c:	2000      	movs	r0, #0
 800c68e:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800c690:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800c694:	b2db      	uxtb	r3, r3
 800c696:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 800c69a:	e7f7      	b.n	800c68c <USBD_LL_Resume+0xa>

0800c69c <USBD_LL_SOF>:
=======
 800c4f4:	2000      	movs	r0, #0
 800c4f6:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800c4f8:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 800c502:	e7f7      	b.n	800c4f4 <USBD_LL_Resume+0xa>

0800c504 <USBD_LL_SOF>:
>>>>>>> render
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
<<<<<<< HEAD
 800c69c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800c6a0:	b162      	cbz	r2, 800c6bc <USBD_LL_SOF+0x20>
{
 800c6a2:	b508      	push	{r3, lr}
=======
 800c504:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800c508:	b162      	cbz	r2, 800c524 <USBD_LL_SOF+0x20>
{
 800c50a:	b508      	push	{r3, lr}
>>>>>>> render
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
<<<<<<< HEAD
 800c6a4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	2b03      	cmp	r3, #3
 800c6ac:	d001      	beq.n	800c6b2 <USBD_LL_SOF+0x16>
=======
 800c50c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c510:	b2db      	uxtb	r3, r3
 800c512:	2b03      	cmp	r3, #3
 800c514:	d001      	beq.n	800c51a <USBD_LL_SOF+0x16>
>>>>>>> render
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
<<<<<<< HEAD
 800c6ae:	2000      	movs	r0, #0
}
 800c6b0:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800c6b2:	69d3      	ldr	r3, [r2, #28]
 800c6b4:	b123      	cbz	r3, 800c6c0 <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 800c6b6:	4798      	blx	r3
  return USBD_OK;
 800c6b8:	2000      	movs	r0, #0
 800c6ba:	e7f9      	b.n	800c6b0 <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 800c6bc:	2003      	movs	r0, #3
}
 800c6be:	4770      	bx	lr
  return USBD_OK;
 800c6c0:	2000      	movs	r0, #0
 800c6c2:	e7f5      	b.n	800c6b0 <USBD_LL_SOF+0x14>

0800c6c4 <USBD_GetLen>:
=======
 800c516:	2000      	movs	r0, #0
}
 800c518:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800c51a:	69d3      	ldr	r3, [r2, #28]
 800c51c:	b123      	cbz	r3, 800c528 <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 800c51e:	4798      	blx	r3
  return USBD_OK;
 800c520:	2000      	movs	r0, #0
 800c522:	e7f9      	b.n	800c518 <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 800c524:	2003      	movs	r0, #3
}
 800c526:	4770      	bx	lr
  return USBD_OK;
 800c528:	2000      	movs	r0, #0
 800c52a:	e7f5      	b.n	800c518 <USBD_LL_SOF+0x14>

0800c52c <USBD_GetLen>:
>>>>>>> render
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
<<<<<<< HEAD
 800c6c4:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 800c6c6:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800c6c8:	e002      	b.n	800c6d0 <USBD_GetLen+0xc>
  {
    len++;
 800c6ca:	3001      	adds	r0, #1
 800c6cc:	b2c0      	uxtb	r0, r0
    pbuff++;
 800c6ce:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 800c6d0:	781a      	ldrb	r2, [r3, #0]
 800c6d2:	2a00      	cmp	r2, #0
 800c6d4:	d1f9      	bne.n	800c6ca <USBD_GetLen+0x6>
=======
 800c52c:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 800c52e:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800c530:	e002      	b.n	800c538 <USBD_GetLen+0xc>
  {
    len++;
 800c532:	3001      	adds	r0, #1
 800c534:	b2c0      	uxtb	r0, r0
    pbuff++;
 800c536:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 800c538:	781a      	ldrb	r2, [r3, #0]
 800c53a:	2a00      	cmp	r2, #0
 800c53c:	d1f9      	bne.n	800c532 <USBD_GetLen+0x6>
>>>>>>> render
  }

  return len;
}
<<<<<<< HEAD
 800c6d6:	4770      	bx	lr

0800c6d8 <USBD_SetFeature>:
{
 800c6d8:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c6da:	884b      	ldrh	r3, [r1, #2]
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d000      	beq.n	800c6e2 <USBD_SetFeature+0xa>
}
 800c6e0:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800c6e2:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c6e6:	f000 fb7b 	bl	800cde0 <USBD_CtlSendStatus>
}
 800c6ea:	e7f9      	b.n	800c6e0 <USBD_SetFeature+0x8>

0800c6ec <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800c6ec:	780b      	ldrb	r3, [r1, #0]
 800c6ee:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800c6f0:	784b      	ldrb	r3, [r1, #1]
 800c6f2:	7043      	strb	r3, [r0, #1]
=======
 800c53e:	4770      	bx	lr

0800c540 <USBD_SetFeature>:
{
 800c540:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c542:	884b      	ldrh	r3, [r1, #2]
 800c544:	2b01      	cmp	r3, #1
 800c546:	d000      	beq.n	800c54a <USBD_SetFeature+0xa>
}
 800c548:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800c54a:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c54e:	f000 fb7b 	bl	800cc48 <USBD_CtlSendStatus>
}
 800c552:	e7f9      	b.n	800c548 <USBD_SetFeature+0x8>

0800c554 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800c554:	780b      	ldrb	r3, [r1, #0]
 800c556:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800c558:	784b      	ldrb	r3, [r1, #1]
 800c55a:	7043      	strb	r3, [r0, #1]
>>>>>>> render
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
<<<<<<< HEAD
 800c6f4:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800c6f6:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c6f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800c6fc:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800c6fe:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 800c700:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c702:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800c706:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800c708:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800c70a:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c70c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800c710:	80c3      	strh	r3, [r0, #6]
}
 800c712:	4770      	bx	lr

0800c714 <USBD_CtlError>:
{
 800c714:	b510      	push	{r4, lr}
 800c716:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c718:	2180      	movs	r1, #128	; 0x80
 800c71a:	f000 fd5c 	bl	800d1d6 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c71e:	2100      	movs	r1, #0
 800c720:	4620      	mov	r0, r4
 800c722:	f000 fd58 	bl	800d1d6 <USBD_LL_StallEP>
}
 800c726:	bd10      	pop	{r4, pc}

0800c728 <USBD_GetDescriptor>:
{
 800c728:	b530      	push	{r4, r5, lr}
 800c72a:	b083      	sub	sp, #12
 800c72c:	4604      	mov	r4, r0
 800c72e:	460d      	mov	r5, r1
  uint16_t len = 0U;
 800c730:	2300      	movs	r3, #0
 800c732:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800c736:	884a      	ldrh	r2, [r1, #2]
 800c738:	0a13      	lsrs	r3, r2, #8
 800c73a:	3b01      	subs	r3, #1
 800c73c:	2b0e      	cmp	r3, #14
 800c73e:	f200 80bc 	bhi.w	800c8ba <USBD_GetDescriptor+0x192>
 800c742:	e8df f003 	tbb	[pc, r3]
 800c746:	3015      	.short	0x3015
 800c748:	9ebaba44 	.word	0x9ebaba44
 800c74c:	bababaab 	.word	0xbababaab
 800c750:	babababa 	.word	0xbabababa
 800c754:	08          	.byte	0x08
 800c755:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c756:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c75a:	69db      	ldr	r3, [r3, #28]
 800c75c:	b123      	cbz	r3, 800c768 <USBD_GetDescriptor+0x40>
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c75e:	f10d 0106 	add.w	r1, sp, #6
 800c762:	7c00      	ldrb	r0, [r0, #16]
 800c764:	4798      	blx	r3
  if (err != 0U)
 800c766:	e00a      	b.n	800c77e <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800c768:	4629      	mov	r1, r5
 800c76a:	f7ff ffd3 	bl	800c714 <USBD_CtlError>
  if (err != 0U)
 800c76e:	e018      	b.n	800c7a2 <USBD_GetDescriptor+0x7a>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c770:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f10d 0106 	add.w	r1, sp, #6
 800c77a:	7c00      	ldrb	r0, [r0, #16]
 800c77c:	4798      	blx	r3
  if (req->wLength != 0U)
 800c77e:	88ea      	ldrh	r2, [r5, #6]
 800c780:	2a00      	cmp	r2, #0
 800c782:	f000 80a3 	beq.w	800c8cc <USBD_GetDescriptor+0x1a4>
    if (len != 0U)
 800c786:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	f000 8099 	beq.w	800c8c2 <USBD_GetDescriptor+0x19a>
      len = MIN(len, req->wLength);
 800c790:	429a      	cmp	r2, r3
 800c792:	bf28      	it	cs
 800c794:	461a      	movcs	r2, r3
 800c796:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c79a:	4601      	mov	r1, r0
 800c79c:	4620      	mov	r0, r4
 800c79e:	f000 faf3 	bl	800cd88 <USBD_CtlSendData>
}
 800c7a2:	b003      	add	sp, #12
 800c7a4:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7a6:	7c03      	ldrb	r3, [r0, #16]
 800c7a8:	b943      	cbnz	r3, 800c7bc <USBD_GetDescriptor+0x94>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c7aa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7b0:	f10d 0006 	add.w	r0, sp, #6
 800c7b4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7b6:	2302      	movs	r3, #2
 800c7b8:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800c7ba:	e7e0      	b.n	800c77e <USBD_GetDescriptor+0x56>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c7bc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c2:	f10d 0006 	add.w	r0, sp, #6
 800c7c6:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7c8:	2302      	movs	r3, #2
 800c7ca:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800c7cc:	e7d7      	b.n	800c77e <USBD_GetDescriptor+0x56>
      switch ((uint8_t)(req->wValue))
 800c7ce:	b2d2      	uxtb	r2, r2
 800c7d0:	2a05      	cmp	r2, #5
 800c7d2:	d852      	bhi.n	800c87a <USBD_GetDescriptor+0x152>
 800c7d4:	e8df f002 	tbb	[pc, r2]
 800c7d8:	2a1d1003 	.word	0x2a1d1003
 800c7dc:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c7de:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	b123      	cbz	r3, 800c7f0 <USBD_GetDescriptor+0xc8>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c7e6:	f10d 0106 	add.w	r1, sp, #6
 800c7ea:	7c00      	ldrb	r0, [r0, #16]
 800c7ec:	4798      	blx	r3
  if (err != 0U)
 800c7ee:	e7c6      	b.n	800c77e <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800c7f0:	4629      	mov	r1, r5
 800c7f2:	f7ff ff8f 	bl	800c714 <USBD_CtlError>
  if (err != 0U)
 800c7f6:	e7d4      	b.n	800c7a2 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c7f8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c7fc:	689b      	ldr	r3, [r3, #8]
 800c7fe:	b123      	cbz	r3, 800c80a <USBD_GetDescriptor+0xe2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c800:	f10d 0106 	add.w	r1, sp, #6
 800c804:	7c00      	ldrb	r0, [r0, #16]
 800c806:	4798      	blx	r3
  if (err != 0U)
 800c808:	e7b9      	b.n	800c77e <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800c80a:	4629      	mov	r1, r5
 800c80c:	f7ff ff82 	bl	800c714 <USBD_CtlError>
  if (err != 0U)
 800c810:	e7c7      	b.n	800c7a2 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c812:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c816:	68db      	ldr	r3, [r3, #12]
 800c818:	b123      	cbz	r3, 800c824 <USBD_GetDescriptor+0xfc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c81a:	f10d 0106 	add.w	r1, sp, #6
 800c81e:	7c00      	ldrb	r0, [r0, #16]
 800c820:	4798      	blx	r3
  if (err != 0U)
 800c822:	e7ac      	b.n	800c77e <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800c824:	4629      	mov	r1, r5
 800c826:	f7ff ff75 	bl	800c714 <USBD_CtlError>
  if (err != 0U)
 800c82a:	e7ba      	b.n	800c7a2 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c82c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c830:	691b      	ldr	r3, [r3, #16]
 800c832:	b123      	cbz	r3, 800c83e <USBD_GetDescriptor+0x116>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c834:	f10d 0106 	add.w	r1, sp, #6
 800c838:	7c00      	ldrb	r0, [r0, #16]
 800c83a:	4798      	blx	r3
  if (err != 0U)
 800c83c:	e79f      	b.n	800c77e <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800c83e:	4629      	mov	r1, r5
 800c840:	f7ff ff68 	bl	800c714 <USBD_CtlError>
  if (err != 0U)
 800c844:	e7ad      	b.n	800c7a2 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c846:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c84a:	695b      	ldr	r3, [r3, #20]
 800c84c:	b123      	cbz	r3, 800c858 <USBD_GetDescriptor+0x130>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c84e:	f10d 0106 	add.w	r1, sp, #6
 800c852:	7c00      	ldrb	r0, [r0, #16]
 800c854:	4798      	blx	r3
  if (err != 0U)
 800c856:	e792      	b.n	800c77e <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800c858:	4629      	mov	r1, r5
 800c85a:	f7ff ff5b 	bl	800c714 <USBD_CtlError>
  if (err != 0U)
 800c85e:	e7a0      	b.n	800c7a2 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c860:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c864:	699b      	ldr	r3, [r3, #24]
 800c866:	b123      	cbz	r3, 800c872 <USBD_GetDescriptor+0x14a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c868:	f10d 0106 	add.w	r1, sp, #6
 800c86c:	7c00      	ldrb	r0, [r0, #16]
 800c86e:	4798      	blx	r3
  if (err != 0U)
 800c870:	e785      	b.n	800c77e <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800c872:	4629      	mov	r1, r5
 800c874:	f7ff ff4e 	bl	800c714 <USBD_CtlError>
  if (err != 0U)
 800c878:	e793      	b.n	800c7a2 <USBD_GetDescriptor+0x7a>
          USBD_CtlError(pdev, req);
 800c87a:	4629      	mov	r1, r5
 800c87c:	f7ff ff4a 	bl	800c714 <USBD_CtlError>
  if (err != 0U)
 800c880:	e78f      	b.n	800c7a2 <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c882:	7c03      	ldrb	r3, [r0, #16]
 800c884:	b933      	cbnz	r3, 800c894 <USBD_GetDescriptor+0x16c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c886:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c88a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c88c:	f10d 0006 	add.w	r0, sp, #6
 800c890:	4798      	blx	r3
  if (err != 0U)
 800c892:	e774      	b.n	800c77e <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800c894:	4629      	mov	r1, r5
 800c896:	f7ff ff3d 	bl	800c714 <USBD_CtlError>
  if (err != 0U)
 800c89a:	e782      	b.n	800c7a2 <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c89c:	7c03      	ldrb	r3, [r0, #16]
 800c89e:	b943      	cbnz	r3, 800c8b2 <USBD_GetDescriptor+0x18a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c8a0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c8a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8a6:	f10d 0006 	add.w	r0, sp, #6
 800c8aa:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c8ac:	2307      	movs	r3, #7
 800c8ae:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800c8b0:	e765      	b.n	800c77e <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800c8b2:	4629      	mov	r1, r5
 800c8b4:	f7ff ff2e 	bl	800c714 <USBD_CtlError>
  if (err != 0U)
 800c8b8:	e773      	b.n	800c7a2 <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 800c8ba:	4629      	mov	r1, r5
 800c8bc:	f7ff ff2a 	bl	800c714 <USBD_CtlError>
    return;
 800c8c0:	e76f      	b.n	800c7a2 <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 800c8c2:	4629      	mov	r1, r5
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	f7ff ff25 	bl	800c714 <USBD_CtlError>
 800c8ca:	e76a      	b.n	800c7a2 <USBD_GetDescriptor+0x7a>
    (void)USBD_CtlSendStatus(pdev);
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	f000 fa87 	bl	800cde0 <USBD_CtlSendStatus>
 800c8d2:	e766      	b.n	800c7a2 <USBD_GetDescriptor+0x7a>

0800c8d4 <USBD_SetAddress>:
{
 800c8d4:	b538      	push	{r3, r4, r5, lr}
 800c8d6:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c8d8:	888b      	ldrh	r3, [r1, #4]
 800c8da:	b9fb      	cbnz	r3, 800c91c <USBD_SetAddress+0x48>
 800c8dc:	88cb      	ldrh	r3, [r1, #6]
 800c8de:	b9eb      	cbnz	r3, 800c91c <USBD_SetAddress+0x48>
 800c8e0:	884b      	ldrh	r3, [r1, #2]
 800c8e2:	2b7f      	cmp	r3, #127	; 0x7f
 800c8e4:	d81a      	bhi.n	800c91c <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c8e6:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8ea:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	2b03      	cmp	r3, #3
 800c8f2:	d00c      	beq.n	800c90e <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 800c8f4:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c8f8:	4629      	mov	r1, r5
 800c8fa:	f000 fc93 	bl	800d224 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c8fe:	4620      	mov	r0, r4
 800c900:	f000 fa6e 	bl	800cde0 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800c904:	b135      	cbz	r5, 800c914 <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c906:	2302      	movs	r3, #2
 800c908:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800c90c:	e009      	b.n	800c922 <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 800c90e:	f7ff ff01 	bl	800c714 <USBD_CtlError>
 800c912:	e006      	b.n	800c922 <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c914:	2301      	movs	r3, #1
 800c916:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800c91a:	e002      	b.n	800c922 <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 800c91c:	4620      	mov	r0, r4
 800c91e:	f7ff fef9 	bl	800c714 <USBD_CtlError>
}
 800c922:	bd38      	pop	{r3, r4, r5, pc}

0800c924 <USBD_SetConfig>:
{
 800c924:	b570      	push	{r4, r5, r6, lr}
 800c926:	4604      	mov	r4, r0
 800c928:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800c92a:	788d      	ldrb	r5, [r1, #2]
 800c92c:	4b2e      	ldr	r3, [pc, #184]	; (800c9e8 <USBD_SetConfig+0xc4>)
 800c92e:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c930:	2d01      	cmp	r5, #1
 800c932:	d810      	bhi.n	800c956 <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 800c934:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c938:	b2db      	uxtb	r3, r3
 800c93a:	2b02      	cmp	r3, #2
 800c93c:	d00f      	beq.n	800c95e <USBD_SetConfig+0x3a>
 800c93e:	2b03      	cmp	r3, #3
 800c940:	d023      	beq.n	800c98a <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 800c942:	f7ff fee7 	bl	800c714 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c946:	4b28      	ldr	r3, [pc, #160]	; (800c9e8 <USBD_SetConfig+0xc4>)
 800c948:	7819      	ldrb	r1, [r3, #0]
 800c94a:	4620      	mov	r0, r4
 800c94c:	f7ff fd90 	bl	800c470 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c950:	2503      	movs	r5, #3
}
 800c952:	4628      	mov	r0, r5
 800c954:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800c956:	f7ff fedd 	bl	800c714 <USBD_CtlError>
    return USBD_FAIL;
 800c95a:	2503      	movs	r5, #3
 800c95c:	e7f9      	b.n	800c952 <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 800c95e:	b18d      	cbz	r5, 800c984 <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 800c960:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c962:	4629      	mov	r1, r5
 800c964:	f7ff fd7b 	bl	800c45e <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800c968:	4605      	mov	r5, r0
 800c96a:	b120      	cbz	r0, 800c976 <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 800c96c:	4631      	mov	r1, r6
 800c96e:	4620      	mov	r0, r4
 800c970:	f7ff fed0 	bl	800c714 <USBD_CtlError>
 800c974:	e7ed      	b.n	800c952 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800c976:	4620      	mov	r0, r4
 800c978:	f000 fa32 	bl	800cde0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c97c:	2303      	movs	r3, #3
 800c97e:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800c982:	e7e6      	b.n	800c952 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800c984:	f000 fa2c 	bl	800cde0 <USBD_CtlSendStatus>
 800c988:	e7e3      	b.n	800c952 <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 800c98a:	b1cd      	cbz	r5, 800c9c0 <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 800c98c:	6841      	ldr	r1, [r0, #4]
 800c98e:	428d      	cmp	r5, r1
 800c990:	d025      	beq.n	800c9de <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c992:	b2c9      	uxtb	r1, r1
 800c994:	f7ff fd6c 	bl	800c470 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c998:	4b13      	ldr	r3, [pc, #76]	; (800c9e8 <USBD_SetConfig+0xc4>)
 800c99a:	7819      	ldrb	r1, [r3, #0]
 800c99c:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c99e:	4620      	mov	r0, r4
 800c9a0:	f7ff fd5d 	bl	800c45e <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800c9a4:	4605      	mov	r5, r0
 800c9a6:	b1b0      	cbz	r0, 800c9d6 <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 800c9a8:	4631      	mov	r1, r6
 800c9aa:	4620      	mov	r0, r4
 800c9ac:	f7ff feb2 	bl	800c714 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c9b0:	7921      	ldrb	r1, [r4, #4]
 800c9b2:	4620      	mov	r0, r4
 800c9b4:	f7ff fd5c 	bl	800c470 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9b8:	2302      	movs	r3, #2
 800c9ba:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800c9be:	e7c8      	b.n	800c952 <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9c0:	2302      	movs	r3, #2
 800c9c2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c9c6:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c9c8:	4629      	mov	r1, r5
 800c9ca:	f7ff fd51 	bl	800c470 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c9ce:	4620      	mov	r0, r4
 800c9d0:	f000 fa06 	bl	800cde0 <USBD_CtlSendStatus>
 800c9d4:	e7bd      	b.n	800c952 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	f000 fa02 	bl	800cde0 <USBD_CtlSendStatus>
 800c9dc:	e7b9      	b.n	800c952 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800c9de:	f000 f9ff 	bl	800cde0 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800c9e2:	2500      	movs	r5, #0
 800c9e4:	e7b5      	b.n	800c952 <USBD_SetConfig+0x2e>
 800c9e6:	bf00      	nop
 800c9e8:	20011518 	.word	0x20011518

0800c9ec <USBD_GetConfig>:
{
 800c9ec:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800c9ee:	88cb      	ldrh	r3, [r1, #6]
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	d10b      	bne.n	800ca0c <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 800c9f4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	2b02      	cmp	r3, #2
 800c9fc:	d909      	bls.n	800ca12 <USBD_GetConfig+0x26>
 800c9fe:	2b03      	cmp	r3, #3
 800ca00:	d109      	bne.n	800ca16 <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ca02:	2201      	movs	r2, #1
 800ca04:	1d01      	adds	r1, r0, #4
 800ca06:	f000 f9bf 	bl	800cd88 <USBD_CtlSendData>
        break;
 800ca0a:	e001      	b.n	800ca10 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 800ca0c:	f7ff fe82 	bl	800c714 <USBD_CtlError>
}
 800ca10:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800ca12:	b25b      	sxtb	r3, r3
 800ca14:	b913      	cbnz	r3, 800ca1c <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 800ca16:	f7ff fe7d 	bl	800c714 <USBD_CtlError>
}
 800ca1a:	e7f9      	b.n	800ca10 <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 800ca1c:	4601      	mov	r1, r0
 800ca1e:	2300      	movs	r3, #0
 800ca20:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ca24:	2201      	movs	r2, #1
 800ca26:	f000 f9af 	bl	800cd88 <USBD_CtlSendData>
        break;
 800ca2a:	e7f1      	b.n	800ca10 <USBD_GetConfig+0x24>

0800ca2c <USBD_GetStatus>:
{
 800ca2c:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800ca2e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ca32:	3b01      	subs	r3, #1
 800ca34:	2b02      	cmp	r3, #2
 800ca36:	d812      	bhi.n	800ca5e <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 800ca38:	88cb      	ldrh	r3, [r1, #6]
 800ca3a:	2b02      	cmp	r3, #2
 800ca3c:	d10c      	bne.n	800ca58 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ca3e:	2301      	movs	r3, #1
 800ca40:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800ca42:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800ca46:	b10b      	cbz	r3, 800ca4c <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ca48:	2303      	movs	r3, #3
 800ca4a:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ca4c:	2202      	movs	r2, #2
 800ca4e:	f100 010c 	add.w	r1, r0, #12
 800ca52:	f000 f999 	bl	800cd88 <USBD_CtlSendData>
}
 800ca56:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 800ca58:	f7ff fe5c 	bl	800c714 <USBD_CtlError>
        break;
 800ca5c:	e7fb      	b.n	800ca56 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800ca5e:	f7ff fe59 	bl	800c714 <USBD_CtlError>
}
 800ca62:	e7f8      	b.n	800ca56 <USBD_GetStatus+0x2a>

0800ca64 <USBD_ClrFeature>:
{
 800ca64:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800ca66:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ca6a:	3b01      	subs	r3, #1
 800ca6c:	2b02      	cmp	r3, #2
 800ca6e:	d809      	bhi.n	800ca84 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ca70:	884b      	ldrh	r3, [r1, #2]
 800ca72:	2b01      	cmp	r3, #1
 800ca74:	d000      	beq.n	800ca78 <USBD_ClrFeature+0x14>
}
 800ca76:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ca7e:	f000 f9af 	bl	800cde0 <USBD_CtlSendStatus>
 800ca82:	e7f8      	b.n	800ca76 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800ca84:	f7ff fe46 	bl	800c714 <USBD_CtlError>
}
 800ca88:	e7f5      	b.n	800ca76 <USBD_ClrFeature+0x12>

0800ca8a <USBD_StdDevReq>:
{
 800ca8a:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca8c:	780c      	ldrb	r4, [r1, #0]
 800ca8e:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800ca92:	2c20      	cmp	r4, #32
 800ca94:	d006      	beq.n	800caa4 <USBD_StdDevReq+0x1a>
 800ca96:	2c40      	cmp	r4, #64	; 0x40
 800ca98:	d004      	beq.n	800caa4 <USBD_StdDevReq+0x1a>
 800ca9a:	b154      	cbz	r4, 800cab2 <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 800ca9c:	f7ff fe3a 	bl	800c714 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800caa0:	2400      	movs	r4, #0
      break;
 800caa2:	e004      	b.n	800caae <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800caa4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800caa8:	689b      	ldr	r3, [r3, #8]
 800caaa:	4798      	blx	r3
 800caac:	4604      	mov	r4, r0
}
 800caae:	4620      	mov	r0, r4
 800cab0:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800cab2:	784d      	ldrb	r5, [r1, #1]
 800cab4:	2d09      	cmp	r5, #9
 800cab6:	d81d      	bhi.n	800caf4 <USBD_StdDevReq+0x6a>
 800cab8:	e8df f005 	tbb	[pc, r5]
 800cabc:	161c1912 	.word	0x161c1912
 800cac0:	1c05081c 	.word	0x1c05081c
 800cac4:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 800cac6:	f7ff fe2f 	bl	800c728 <USBD_GetDescriptor>
          break;
 800caca:	e7f0      	b.n	800caae <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 800cacc:	f7ff ff02 	bl	800c8d4 <USBD_SetAddress>
          break;
 800cad0:	e7ed      	b.n	800caae <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 800cad2:	f7ff ff27 	bl	800c924 <USBD_SetConfig>
 800cad6:	4604      	mov	r4, r0
          break;
 800cad8:	e7e9      	b.n	800caae <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 800cada:	f7ff ff87 	bl	800c9ec <USBD_GetConfig>
          break;
 800cade:	e7e6      	b.n	800caae <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 800cae0:	f7ff ffa4 	bl	800ca2c <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800cae4:	462c      	mov	r4, r5
          break;
 800cae6:	e7e2      	b.n	800caae <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 800cae8:	f7ff fdf6 	bl	800c6d8 <USBD_SetFeature>
          break;
 800caec:	e7df      	b.n	800caae <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 800caee:	f7ff ffb9 	bl	800ca64 <USBD_ClrFeature>
          break;
 800caf2:	e7dc      	b.n	800caae <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 800caf4:	f7ff fe0e 	bl	800c714 <USBD_CtlError>
          break;
 800caf8:	e7d9      	b.n	800caae <USBD_StdDevReq+0x24>

0800cafa <USBD_StdItfReq>:
{
 800cafa:	b570      	push	{r4, r5, r6, lr}
 800cafc:	4605      	mov	r5, r0
 800cafe:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb00:	780b      	ldrb	r3, [r1, #0]
 800cb02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb06:	2b20      	cmp	r3, #32
 800cb08:	d007      	beq.n	800cb1a <USBD_StdItfReq+0x20>
 800cb0a:	2b40      	cmp	r3, #64	; 0x40
 800cb0c:	d005      	beq.n	800cb1a <USBD_StdItfReq+0x20>
 800cb0e:	b123      	cbz	r3, 800cb1a <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800cb10:	f7ff fe00 	bl	800c714 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800cb14:	2600      	movs	r6, #0
}
 800cb16:	4630      	mov	r0, r6
 800cb18:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800cb1a:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800cb1e:	3b01      	subs	r3, #1
 800cb20:	2b02      	cmp	r3, #2
 800cb22:	d818      	bhi.n	800cb56 <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cb24:	7923      	ldrb	r3, [r4, #4]
 800cb26:	2b01      	cmp	r3, #1
 800cb28:	d80f      	bhi.n	800cb4a <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb2a:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800cb2e:	689b      	ldr	r3, [r3, #8]
 800cb30:	4621      	mov	r1, r4
 800cb32:	4628      	mov	r0, r5
 800cb34:	4798      	blx	r3
 800cb36:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cb38:	88e3      	ldrh	r3, [r4, #6]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d1eb      	bne.n	800cb16 <USBD_StdItfReq+0x1c>
 800cb3e:	2800      	cmp	r0, #0
 800cb40:	d1e9      	bne.n	800cb16 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800cb42:	4628      	mov	r0, r5
 800cb44:	f000 f94c 	bl	800cde0 <USBD_CtlSendStatus>
 800cb48:	e7e5      	b.n	800cb16 <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 800cb4a:	4621      	mov	r1, r4
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	f7ff fde1 	bl	800c714 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800cb52:	2600      	movs	r6, #0
 800cb54:	e7df      	b.n	800cb16 <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 800cb56:	4621      	mov	r1, r4
 800cb58:	4628      	mov	r0, r5
 800cb5a:	f7ff fddb 	bl	800c714 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800cb5e:	2600      	movs	r6, #0
          break;
 800cb60:	e7d9      	b.n	800cb16 <USBD_StdItfReq+0x1c>

0800cb62 <USBD_StdEPReq>:
{
 800cb62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb64:	4606      	mov	r6, r0
 800cb66:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800cb68:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb6a:	780c      	ldrb	r4, [r1, #0]
 800cb6c:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800cb70:	2c20      	cmp	r4, #32
 800cb72:	d008      	beq.n	800cb86 <USBD_StdEPReq+0x24>
 800cb74:	b2d9      	uxtb	r1, r3
 800cb76:	2c40      	cmp	r4, #64	; 0x40
 800cb78:	d005      	beq.n	800cb86 <USBD_StdEPReq+0x24>
 800cb7a:	b16c      	cbz	r4, 800cb98 <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 800cb7c:	4629      	mov	r1, r5
 800cb7e:	f7ff fdc9 	bl	800c714 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800cb82:	2400      	movs	r4, #0
      break;
 800cb84:	e006      	b.n	800cb94 <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb86:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800cb8a:	689b      	ldr	r3, [r3, #8]
 800cb8c:	4629      	mov	r1, r5
 800cb8e:	4630      	mov	r0, r6
 800cb90:	4798      	blx	r3
 800cb92:	4604      	mov	r4, r0
}
 800cb94:	4620      	mov	r0, r4
 800cb96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 800cb98:	786f      	ldrb	r7, [r5, #1]
 800cb9a:	2f01      	cmp	r7, #1
 800cb9c:	d02f      	beq.n	800cbfe <USBD_StdEPReq+0x9c>
 800cb9e:	2f03      	cmp	r7, #3
 800cba0:	d005      	beq.n	800cbae <USBD_StdEPReq+0x4c>
 800cba2:	2f00      	cmp	r7, #0
 800cba4:	d059      	beq.n	800cc5a <USBD_StdEPReq+0xf8>
          USBD_CtlError(pdev, req);
 800cba6:	4629      	mov	r1, r5
 800cba8:	f7ff fdb4 	bl	800c714 <USBD_CtlError>
          break;
 800cbac:	e7f2      	b.n	800cb94 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 800cbae:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	2b02      	cmp	r3, #2
 800cbb6:	d005      	beq.n	800cbc4 <USBD_StdEPReq+0x62>
 800cbb8:	2b03      	cmp	r3, #3
 800cbba:	d012      	beq.n	800cbe2 <USBD_StdEPReq+0x80>
              USBD_CtlError(pdev, req);
 800cbbc:	4629      	mov	r1, r5
 800cbbe:	f7ff fda9 	bl	800c714 <USBD_CtlError>
              break;
 800cbc2:	e7e7      	b.n	800cb94 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbc4:	b109      	cbz	r1, 800cbca <USBD_StdEPReq+0x68>
 800cbc6:	2980      	cmp	r1, #128	; 0x80
 800cbc8:	d104      	bne.n	800cbd4 <USBD_StdEPReq+0x72>
                USBD_CtlError(pdev, req);
 800cbca:	4629      	mov	r1, r5
 800cbcc:	4630      	mov	r0, r6
 800cbce:	f7ff fda1 	bl	800c714 <USBD_CtlError>
 800cbd2:	e7df      	b.n	800cb94 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbd4:	f000 faff 	bl	800d1d6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbd8:	2180      	movs	r1, #128	; 0x80
 800cbda:	4630      	mov	r0, r6
 800cbdc:	f000 fafb 	bl	800d1d6 <USBD_LL_StallEP>
 800cbe0:	e7d8      	b.n	800cb94 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cbe2:	886b      	ldrh	r3, [r5, #2]
 800cbe4:	b923      	cbnz	r3, 800cbf0 <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cbe6:	b119      	cbz	r1, 800cbf0 <USBD_StdEPReq+0x8e>
 800cbe8:	2980      	cmp	r1, #128	; 0x80
 800cbea:	d001      	beq.n	800cbf0 <USBD_StdEPReq+0x8e>
 800cbec:	88eb      	ldrh	r3, [r5, #6]
 800cbee:	b11b      	cbz	r3, 800cbf8 <USBD_StdEPReq+0x96>
              (void)USBD_CtlSendStatus(pdev);
 800cbf0:	4630      	mov	r0, r6
 800cbf2:	f000 f8f5 	bl	800cde0 <USBD_CtlSendStatus>
              break;
 800cbf6:	e7cd      	b.n	800cb94 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbf8:	f000 faed 	bl	800d1d6 <USBD_LL_StallEP>
 800cbfc:	e7f8      	b.n	800cbf0 <USBD_StdEPReq+0x8e>
          switch (pdev->dev_state)
 800cbfe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	2b02      	cmp	r3, #2
 800cc06:	d005      	beq.n	800cc14 <USBD_StdEPReq+0xb2>
 800cc08:	2b03      	cmp	r3, #3
 800cc0a:	d012      	beq.n	800cc32 <USBD_StdEPReq+0xd0>
              USBD_CtlError(pdev, req);
 800cc0c:	4629      	mov	r1, r5
 800cc0e:	f7ff fd81 	bl	800c714 <USBD_CtlError>
              break;
 800cc12:	e7bf      	b.n	800cb94 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc14:	b109      	cbz	r1, 800cc1a <USBD_StdEPReq+0xb8>
 800cc16:	2980      	cmp	r1, #128	; 0x80
 800cc18:	d104      	bne.n	800cc24 <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 800cc1a:	4629      	mov	r1, r5
 800cc1c:	4630      	mov	r0, r6
 800cc1e:	f7ff fd79 	bl	800c714 <USBD_CtlError>
 800cc22:	e7b7      	b.n	800cb94 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cc24:	f000 fad7 	bl	800d1d6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc28:	2180      	movs	r1, #128	; 0x80
 800cc2a:	4630      	mov	r0, r6
 800cc2c:	f000 fad3 	bl	800d1d6 <USBD_LL_StallEP>
 800cc30:	e7b0      	b.n	800cb94 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc32:	886b      	ldrh	r3, [r5, #2]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d1ad      	bne.n	800cb94 <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 800cc38:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 800cc3c:	d10a      	bne.n	800cc54 <USBD_StdEPReq+0xf2>
                (void)USBD_CtlSendStatus(pdev);
 800cc3e:	4630      	mov	r0, r6
 800cc40:	f000 f8ce 	bl	800cde0 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cc44:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800cc48:	689b      	ldr	r3, [r3, #8]
 800cc4a:	4629      	mov	r1, r5
 800cc4c:	4630      	mov	r0, r6
 800cc4e:	4798      	blx	r3
 800cc50:	4604      	mov	r4, r0
 800cc52:	e79f      	b.n	800cb94 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cc54:	f000 fac7 	bl	800d1e6 <USBD_LL_ClearStallEP>
 800cc58:	e7f1      	b.n	800cc3e <USBD_StdEPReq+0xdc>
          switch (pdev->dev_state)
 800cc5a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800cc5e:	b2d2      	uxtb	r2, r2
 800cc60:	2a02      	cmp	r2, #2
 800cc62:	d006      	beq.n	800cc72 <USBD_StdEPReq+0x110>
 800cc64:	2a03      	cmp	r2, #3
 800cc66:	d029      	beq.n	800ccbc <USBD_StdEPReq+0x15a>
              USBD_CtlError(pdev, req);
 800cc68:	4629      	mov	r1, r5
 800cc6a:	f7ff fd53 	bl	800c714 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800cc6e:	463c      	mov	r4, r7
              break;
 800cc70:	e790      	b.n	800cb94 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc72:	b109      	cbz	r1, 800cc78 <USBD_StdEPReq+0x116>
 800cc74:	2980      	cmp	r1, #128	; 0x80
 800cc76:	d113      	bne.n	800cca0 <USBD_StdEPReq+0x13e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc78:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cc7c:	d115      	bne.n	800ccaa <USBD_StdEPReq+0x148>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cc7e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc82:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800cc86:	0089      	lsls	r1, r1, #2
 800cc88:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 800cc8c:	4431      	add	r1, r6
 800cc8e:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800cc90:	2300      	movs	r3, #0
 800cc92:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cc94:	2202      	movs	r2, #2
 800cc96:	4630      	mov	r0, r6
 800cc98:	f000 f876 	bl	800cd88 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800cc9c:	463c      	mov	r4, r7
              break;
 800cc9e:	e779      	b.n	800cb94 <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 800cca0:	4629      	mov	r1, r5
 800cca2:	f7ff fd37 	bl	800c714 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800cca6:	463c      	mov	r4, r7
                break;
 800cca8:	e774      	b.n	800cb94 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccaa:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800ccae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ccb2:	0089      	lsls	r1, r1, #2
 800ccb4:	3110      	adds	r1, #16
 800ccb6:	4431      	add	r1, r6
 800ccb8:	3104      	adds	r1, #4
 800ccba:	e7e9      	b.n	800cc90 <USBD_StdEPReq+0x12e>
              if ((ep_addr & 0x80U) == 0x80U)
 800ccbc:	b25b      	sxtb	r3, r3
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	db1f      	blt.n	800cd02 <USBD_StdEPReq+0x1a0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ccc2:	f001 020f 	and.w	r2, r1, #15
 800ccc6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800ccca:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ccce:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 800ccd2:	b322      	cbz	r2, 800cd1e <USBD_StdEPReq+0x1bc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	db27      	blt.n	800cd28 <USBD_StdEPReq+0x1c6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ccd8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccdc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800cce0:	009c      	lsls	r4, r3, #2
 800cce2:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 800cce6:	4434      	add	r4, r6
 800cce8:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ccea:	b109      	cbz	r1, 800ccf0 <USBD_StdEPReq+0x18e>
 800ccec:	2980      	cmp	r1, #128	; 0x80
 800ccee:	d124      	bne.n	800cd3a <USBD_StdEPReq+0x1d8>
                pep->status = 0x0000U;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ccf4:	2202      	movs	r2, #2
 800ccf6:	4621      	mov	r1, r4
 800ccf8:	4630      	mov	r0, r6
 800ccfa:	f000 f845 	bl	800cd88 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800ccfe:	463c      	mov	r4, r7
              break;
 800cd00:	e748      	b.n	800cb94 <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cd02:	f001 020f 	and.w	r2, r1, #15
 800cd06:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800cd0a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800cd0e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800cd10:	2a00      	cmp	r2, #0
 800cd12:	d1df      	bne.n	800ccd4 <USBD_StdEPReq+0x172>
                  USBD_CtlError(pdev, req);
 800cd14:	4629      	mov	r1, r5
 800cd16:	f7ff fcfd 	bl	800c714 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800cd1a:	463c      	mov	r4, r7
                  break;
 800cd1c:	e73a      	b.n	800cb94 <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 800cd1e:	4629      	mov	r1, r5
 800cd20:	f7ff fcf8 	bl	800c714 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800cd24:	463c      	mov	r4, r7
                  break;
 800cd26:	e735      	b.n	800cb94 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd28:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800cd2c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800cd30:	009c      	lsls	r4, r3, #2
 800cd32:	3410      	adds	r4, #16
 800cd34:	4434      	add	r4, r6
 800cd36:	3404      	adds	r4, #4
 800cd38:	e7d7      	b.n	800ccea <USBD_StdEPReq+0x188>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cd3a:	4630      	mov	r0, r6
 800cd3c:	f000 fa5b 	bl	800d1f6 <USBD_LL_IsStallEP>
 800cd40:	b110      	cbz	r0, 800cd48 <USBD_StdEPReq+0x1e6>
                pep->status = 0x0001U;
 800cd42:	2301      	movs	r3, #1
 800cd44:	6023      	str	r3, [r4, #0]
 800cd46:	e7d5      	b.n	800ccf4 <USBD_StdEPReq+0x192>
                pep->status = 0x0000U;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	6023      	str	r3, [r4, #0]
 800cd4c:	e7d2      	b.n	800ccf4 <USBD_StdEPReq+0x192>

0800cd4e <USBD_GetString>:
  if (desc == NULL)
 800cd4e:	b1d0      	cbz	r0, 800cd86 <USBD_GetString+0x38>
{
 800cd50:	b570      	push	{r4, r5, r6, lr}
 800cd52:	460d      	mov	r5, r1
 800cd54:	4616      	mov	r6, r2
 800cd56:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cd58:	f7ff fcb4 	bl	800c6c4 <USBD_GetLen>
 800cd5c:	1c43      	adds	r3, r0, #1
 800cd5e:	005b      	lsls	r3, r3, #1
 800cd60:	b29b      	uxth	r3, r3
 800cd62:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800cd64:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cd66:	2303      	movs	r3, #3
 800cd68:	706b      	strb	r3, [r5, #1]
  idx++;
 800cd6a:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800cd6c:	e007      	b.n	800cd7e <USBD_GetString+0x30>
    unicode[idx] = *pdesc;
 800cd6e:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 800cd70:	3401      	adds	r4, #1
    idx++;
 800cd72:	1c5a      	adds	r2, r3, #1
 800cd74:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800cd76:	2100      	movs	r1, #0
 800cd78:	54a9      	strb	r1, [r5, r2]
    idx++;
 800cd7a:	3302      	adds	r3, #2
 800cd7c:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800cd7e:	7822      	ldrb	r2, [r4, #0]
 800cd80:	2a00      	cmp	r2, #0
 800cd82:	d1f4      	bne.n	800cd6e <USBD_GetString+0x20>
}
 800cd84:	bd70      	pop	{r4, r5, r6, pc}
 800cd86:	4770      	bx	lr

0800cd88 <USBD_CtlSendData>:
=======
 800c55c:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800c55e:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c560:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800c564:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800c566:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 800c568:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c56a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800c56e:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800c570:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800c572:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c574:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800c578:	80c3      	strh	r3, [r0, #6]
}
 800c57a:	4770      	bx	lr

0800c57c <USBD_CtlError>:
{
 800c57c:	b510      	push	{r4, lr}
 800c57e:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c580:	2180      	movs	r1, #128	; 0x80
 800c582:	f000 fd5c 	bl	800d03e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c586:	2100      	movs	r1, #0
 800c588:	4620      	mov	r0, r4
 800c58a:	f000 fd58 	bl	800d03e <USBD_LL_StallEP>
}
 800c58e:	bd10      	pop	{r4, pc}

0800c590 <USBD_GetDescriptor>:
{
 800c590:	b530      	push	{r4, r5, lr}
 800c592:	b083      	sub	sp, #12
 800c594:	4604      	mov	r4, r0
 800c596:	460d      	mov	r5, r1
  uint16_t len = 0U;
 800c598:	2300      	movs	r3, #0
 800c59a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800c59e:	884a      	ldrh	r2, [r1, #2]
 800c5a0:	0a13      	lsrs	r3, r2, #8
 800c5a2:	3b01      	subs	r3, #1
 800c5a4:	2b0e      	cmp	r3, #14
 800c5a6:	f200 80bc 	bhi.w	800c722 <USBD_GetDescriptor+0x192>
 800c5aa:	e8df f003 	tbb	[pc, r3]
 800c5ae:	3015      	.short	0x3015
 800c5b0:	9ebaba44 	.word	0x9ebaba44
 800c5b4:	bababaab 	.word	0xbababaab
 800c5b8:	babababa 	.word	0xbabababa
 800c5bc:	08          	.byte	0x08
 800c5bd:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c5be:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c5c2:	69db      	ldr	r3, [r3, #28]
 800c5c4:	b123      	cbz	r3, 800c5d0 <USBD_GetDescriptor+0x40>
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c5c6:	f10d 0106 	add.w	r1, sp, #6
 800c5ca:	7c00      	ldrb	r0, [r0, #16]
 800c5cc:	4798      	blx	r3
  if (err != 0U)
 800c5ce:	e00a      	b.n	800c5e6 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800c5d0:	4629      	mov	r1, r5
 800c5d2:	f7ff ffd3 	bl	800c57c <USBD_CtlError>
  if (err != 0U)
 800c5d6:	e018      	b.n	800c60a <USBD_GetDescriptor+0x7a>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c5d8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f10d 0106 	add.w	r1, sp, #6
 800c5e2:	7c00      	ldrb	r0, [r0, #16]
 800c5e4:	4798      	blx	r3
  if (req->wLength != 0U)
 800c5e6:	88ea      	ldrh	r2, [r5, #6]
 800c5e8:	2a00      	cmp	r2, #0
 800c5ea:	f000 80a3 	beq.w	800c734 <USBD_GetDescriptor+0x1a4>
    if (len != 0U)
 800c5ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	f000 8099 	beq.w	800c72a <USBD_GetDescriptor+0x19a>
      len = MIN(len, req->wLength);
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	bf28      	it	cs
 800c5fc:	461a      	movcs	r2, r3
 800c5fe:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c602:	4601      	mov	r1, r0
 800c604:	4620      	mov	r0, r4
 800c606:	f000 faf3 	bl	800cbf0 <USBD_CtlSendData>
}
 800c60a:	b003      	add	sp, #12
 800c60c:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c60e:	7c03      	ldrb	r3, [r0, #16]
 800c610:	b943      	cbnz	r3, 800c624 <USBD_GetDescriptor+0x94>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c612:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c618:	f10d 0006 	add.w	r0, sp, #6
 800c61c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c61e:	2302      	movs	r3, #2
 800c620:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800c622:	e7e0      	b.n	800c5e6 <USBD_GetDescriptor+0x56>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c624:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c62a:	f10d 0006 	add.w	r0, sp, #6
 800c62e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c630:	2302      	movs	r3, #2
 800c632:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800c634:	e7d7      	b.n	800c5e6 <USBD_GetDescriptor+0x56>
      switch ((uint8_t)(req->wValue))
 800c636:	b2d2      	uxtb	r2, r2
 800c638:	2a05      	cmp	r2, #5
 800c63a:	d852      	bhi.n	800c6e2 <USBD_GetDescriptor+0x152>
 800c63c:	e8df f002 	tbb	[pc, r2]
 800c640:	2a1d1003 	.word	0x2a1d1003
 800c644:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c646:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c64a:	685b      	ldr	r3, [r3, #4]
 800c64c:	b123      	cbz	r3, 800c658 <USBD_GetDescriptor+0xc8>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c64e:	f10d 0106 	add.w	r1, sp, #6
 800c652:	7c00      	ldrb	r0, [r0, #16]
 800c654:	4798      	blx	r3
  if (err != 0U)
 800c656:	e7c6      	b.n	800c5e6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800c658:	4629      	mov	r1, r5
 800c65a:	f7ff ff8f 	bl	800c57c <USBD_CtlError>
  if (err != 0U)
 800c65e:	e7d4      	b.n	800c60a <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c660:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c664:	689b      	ldr	r3, [r3, #8]
 800c666:	b123      	cbz	r3, 800c672 <USBD_GetDescriptor+0xe2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c668:	f10d 0106 	add.w	r1, sp, #6
 800c66c:	7c00      	ldrb	r0, [r0, #16]
 800c66e:	4798      	blx	r3
  if (err != 0U)
 800c670:	e7b9      	b.n	800c5e6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800c672:	4629      	mov	r1, r5
 800c674:	f7ff ff82 	bl	800c57c <USBD_CtlError>
  if (err != 0U)
 800c678:	e7c7      	b.n	800c60a <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c67a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c67e:	68db      	ldr	r3, [r3, #12]
 800c680:	b123      	cbz	r3, 800c68c <USBD_GetDescriptor+0xfc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c682:	f10d 0106 	add.w	r1, sp, #6
 800c686:	7c00      	ldrb	r0, [r0, #16]
 800c688:	4798      	blx	r3
  if (err != 0U)
 800c68a:	e7ac      	b.n	800c5e6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800c68c:	4629      	mov	r1, r5
 800c68e:	f7ff ff75 	bl	800c57c <USBD_CtlError>
  if (err != 0U)
 800c692:	e7ba      	b.n	800c60a <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c694:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c698:	691b      	ldr	r3, [r3, #16]
 800c69a:	b123      	cbz	r3, 800c6a6 <USBD_GetDescriptor+0x116>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c69c:	f10d 0106 	add.w	r1, sp, #6
 800c6a0:	7c00      	ldrb	r0, [r0, #16]
 800c6a2:	4798      	blx	r3
  if (err != 0U)
 800c6a4:	e79f      	b.n	800c5e6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800c6a6:	4629      	mov	r1, r5
 800c6a8:	f7ff ff68 	bl	800c57c <USBD_CtlError>
  if (err != 0U)
 800c6ac:	e7ad      	b.n	800c60a <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c6ae:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c6b2:	695b      	ldr	r3, [r3, #20]
 800c6b4:	b123      	cbz	r3, 800c6c0 <USBD_GetDescriptor+0x130>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c6b6:	f10d 0106 	add.w	r1, sp, #6
 800c6ba:	7c00      	ldrb	r0, [r0, #16]
 800c6bc:	4798      	blx	r3
  if (err != 0U)
 800c6be:	e792      	b.n	800c5e6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800c6c0:	4629      	mov	r1, r5
 800c6c2:	f7ff ff5b 	bl	800c57c <USBD_CtlError>
  if (err != 0U)
 800c6c6:	e7a0      	b.n	800c60a <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c6c8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c6cc:	699b      	ldr	r3, [r3, #24]
 800c6ce:	b123      	cbz	r3, 800c6da <USBD_GetDescriptor+0x14a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c6d0:	f10d 0106 	add.w	r1, sp, #6
 800c6d4:	7c00      	ldrb	r0, [r0, #16]
 800c6d6:	4798      	blx	r3
  if (err != 0U)
 800c6d8:	e785      	b.n	800c5e6 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800c6da:	4629      	mov	r1, r5
 800c6dc:	f7ff ff4e 	bl	800c57c <USBD_CtlError>
  if (err != 0U)
 800c6e0:	e793      	b.n	800c60a <USBD_GetDescriptor+0x7a>
          USBD_CtlError(pdev, req);
 800c6e2:	4629      	mov	r1, r5
 800c6e4:	f7ff ff4a 	bl	800c57c <USBD_CtlError>
  if (err != 0U)
 800c6e8:	e78f      	b.n	800c60a <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6ea:	7c03      	ldrb	r3, [r0, #16]
 800c6ec:	b933      	cbnz	r3, 800c6fc <USBD_GetDescriptor+0x16c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c6ee:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c6f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6f4:	f10d 0006 	add.w	r0, sp, #6
 800c6f8:	4798      	blx	r3
  if (err != 0U)
 800c6fa:	e774      	b.n	800c5e6 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800c6fc:	4629      	mov	r1, r5
 800c6fe:	f7ff ff3d 	bl	800c57c <USBD_CtlError>
  if (err != 0U)
 800c702:	e782      	b.n	800c60a <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c704:	7c03      	ldrb	r3, [r0, #16]
 800c706:	b943      	cbnz	r3, 800c71a <USBD_GetDescriptor+0x18a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c708:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c70c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c70e:	f10d 0006 	add.w	r0, sp, #6
 800c712:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c714:	2307      	movs	r3, #7
 800c716:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800c718:	e765      	b.n	800c5e6 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800c71a:	4629      	mov	r1, r5
 800c71c:	f7ff ff2e 	bl	800c57c <USBD_CtlError>
  if (err != 0U)
 800c720:	e773      	b.n	800c60a <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 800c722:	4629      	mov	r1, r5
 800c724:	f7ff ff2a 	bl	800c57c <USBD_CtlError>
    return;
 800c728:	e76f      	b.n	800c60a <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 800c72a:	4629      	mov	r1, r5
 800c72c:	4620      	mov	r0, r4
 800c72e:	f7ff ff25 	bl	800c57c <USBD_CtlError>
 800c732:	e76a      	b.n	800c60a <USBD_GetDescriptor+0x7a>
    (void)USBD_CtlSendStatus(pdev);
 800c734:	4620      	mov	r0, r4
 800c736:	f000 fa87 	bl	800cc48 <USBD_CtlSendStatus>
 800c73a:	e766      	b.n	800c60a <USBD_GetDescriptor+0x7a>

0800c73c <USBD_SetAddress>:
{
 800c73c:	b538      	push	{r3, r4, r5, lr}
 800c73e:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c740:	888b      	ldrh	r3, [r1, #4]
 800c742:	b9fb      	cbnz	r3, 800c784 <USBD_SetAddress+0x48>
 800c744:	88cb      	ldrh	r3, [r1, #6]
 800c746:	b9eb      	cbnz	r3, 800c784 <USBD_SetAddress+0x48>
 800c748:	884b      	ldrh	r3, [r1, #2]
 800c74a:	2b7f      	cmp	r3, #127	; 0x7f
 800c74c:	d81a      	bhi.n	800c784 <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c74e:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c752:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c756:	b2db      	uxtb	r3, r3
 800c758:	2b03      	cmp	r3, #3
 800c75a:	d00c      	beq.n	800c776 <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 800c75c:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c760:	4629      	mov	r1, r5
 800c762:	f000 fc93 	bl	800d08c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c766:	4620      	mov	r0, r4
 800c768:	f000 fa6e 	bl	800cc48 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800c76c:	b135      	cbz	r5, 800c77c <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c76e:	2302      	movs	r3, #2
 800c770:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800c774:	e009      	b.n	800c78a <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 800c776:	f7ff ff01 	bl	800c57c <USBD_CtlError>
 800c77a:	e006      	b.n	800c78a <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c77c:	2301      	movs	r3, #1
 800c77e:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800c782:	e002      	b.n	800c78a <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 800c784:	4620      	mov	r0, r4
 800c786:	f7ff fef9 	bl	800c57c <USBD_CtlError>
}
 800c78a:	bd38      	pop	{r3, r4, r5, pc}

0800c78c <USBD_SetConfig>:
{
 800c78c:	b570      	push	{r4, r5, r6, lr}
 800c78e:	4604      	mov	r4, r0
 800c790:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800c792:	788d      	ldrb	r5, [r1, #2]
 800c794:	4b2e      	ldr	r3, [pc, #184]	; (800c850 <USBD_SetConfig+0xc4>)
 800c796:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c798:	2d01      	cmp	r5, #1
 800c79a:	d810      	bhi.n	800c7be <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 800c79c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c7a0:	b2db      	uxtb	r3, r3
 800c7a2:	2b02      	cmp	r3, #2
 800c7a4:	d00f      	beq.n	800c7c6 <USBD_SetConfig+0x3a>
 800c7a6:	2b03      	cmp	r3, #3
 800c7a8:	d023      	beq.n	800c7f2 <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 800c7aa:	f7ff fee7 	bl	800c57c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c7ae:	4b28      	ldr	r3, [pc, #160]	; (800c850 <USBD_SetConfig+0xc4>)
 800c7b0:	7819      	ldrb	r1, [r3, #0]
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	f7ff fd90 	bl	800c2d8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c7b8:	2503      	movs	r5, #3
}
 800c7ba:	4628      	mov	r0, r5
 800c7bc:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800c7be:	f7ff fedd 	bl	800c57c <USBD_CtlError>
    return USBD_FAIL;
 800c7c2:	2503      	movs	r5, #3
 800c7c4:	e7f9      	b.n	800c7ba <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 800c7c6:	b18d      	cbz	r5, 800c7ec <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 800c7c8:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c7ca:	4629      	mov	r1, r5
 800c7cc:	f7ff fd7b 	bl	800c2c6 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800c7d0:	4605      	mov	r5, r0
 800c7d2:	b120      	cbz	r0, 800c7de <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 800c7d4:	4631      	mov	r1, r6
 800c7d6:	4620      	mov	r0, r4
 800c7d8:	f7ff fed0 	bl	800c57c <USBD_CtlError>
 800c7dc:	e7ed      	b.n	800c7ba <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800c7de:	4620      	mov	r0, r4
 800c7e0:	f000 fa32 	bl	800cc48 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c7e4:	2303      	movs	r3, #3
 800c7e6:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800c7ea:	e7e6      	b.n	800c7ba <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800c7ec:	f000 fa2c 	bl	800cc48 <USBD_CtlSendStatus>
 800c7f0:	e7e3      	b.n	800c7ba <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 800c7f2:	b1cd      	cbz	r5, 800c828 <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 800c7f4:	6841      	ldr	r1, [r0, #4]
 800c7f6:	428d      	cmp	r5, r1
 800c7f8:	d025      	beq.n	800c846 <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c7fa:	b2c9      	uxtb	r1, r1
 800c7fc:	f7ff fd6c 	bl	800c2d8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c800:	4b13      	ldr	r3, [pc, #76]	; (800c850 <USBD_SetConfig+0xc4>)
 800c802:	7819      	ldrb	r1, [r3, #0]
 800c804:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c806:	4620      	mov	r0, r4
 800c808:	f7ff fd5d 	bl	800c2c6 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800c80c:	4605      	mov	r5, r0
 800c80e:	b1b0      	cbz	r0, 800c83e <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 800c810:	4631      	mov	r1, r6
 800c812:	4620      	mov	r0, r4
 800c814:	f7ff feb2 	bl	800c57c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c818:	7921      	ldrb	r1, [r4, #4]
 800c81a:	4620      	mov	r0, r4
 800c81c:	f7ff fd5c 	bl	800c2d8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c820:	2302      	movs	r3, #2
 800c822:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800c826:	e7c8      	b.n	800c7ba <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c828:	2302      	movs	r3, #2
 800c82a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c82e:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c830:	4629      	mov	r1, r5
 800c832:	f7ff fd51 	bl	800c2d8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c836:	4620      	mov	r0, r4
 800c838:	f000 fa06 	bl	800cc48 <USBD_CtlSendStatus>
 800c83c:	e7bd      	b.n	800c7ba <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800c83e:	4620      	mov	r0, r4
 800c840:	f000 fa02 	bl	800cc48 <USBD_CtlSendStatus>
 800c844:	e7b9      	b.n	800c7ba <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800c846:	f000 f9ff 	bl	800cc48 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800c84a:	2500      	movs	r5, #0
 800c84c:	e7b5      	b.n	800c7ba <USBD_SetConfig+0x2e>
 800c84e:	bf00      	nop
 800c850:	20012508 	.word	0x20012508

0800c854 <USBD_GetConfig>:
{
 800c854:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800c856:	88cb      	ldrh	r3, [r1, #6]
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d10b      	bne.n	800c874 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 800c85c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c860:	b2db      	uxtb	r3, r3
 800c862:	2b02      	cmp	r3, #2
 800c864:	d909      	bls.n	800c87a <USBD_GetConfig+0x26>
 800c866:	2b03      	cmp	r3, #3
 800c868:	d109      	bne.n	800c87e <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c86a:	2201      	movs	r2, #1
 800c86c:	1d01      	adds	r1, r0, #4
 800c86e:	f000 f9bf 	bl	800cbf0 <USBD_CtlSendData>
        break;
 800c872:	e001      	b.n	800c878 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 800c874:	f7ff fe82 	bl	800c57c <USBD_CtlError>
}
 800c878:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800c87a:	b25b      	sxtb	r3, r3
 800c87c:	b913      	cbnz	r3, 800c884 <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 800c87e:	f7ff fe7d 	bl	800c57c <USBD_CtlError>
}
 800c882:	e7f9      	b.n	800c878 <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 800c884:	4601      	mov	r1, r0
 800c886:	2300      	movs	r3, #0
 800c888:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c88c:	2201      	movs	r2, #1
 800c88e:	f000 f9af 	bl	800cbf0 <USBD_CtlSendData>
        break;
 800c892:	e7f1      	b.n	800c878 <USBD_GetConfig+0x24>

0800c894 <USBD_GetStatus>:
{
 800c894:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800c896:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c89a:	3b01      	subs	r3, #1
 800c89c:	2b02      	cmp	r3, #2
 800c89e:	d812      	bhi.n	800c8c6 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 800c8a0:	88cb      	ldrh	r3, [r1, #6]
 800c8a2:	2b02      	cmp	r3, #2
 800c8a4:	d10c      	bne.n	800c8c0 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800c8aa:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800c8ae:	b10b      	cbz	r3, 800c8b4 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c8b0:	2303      	movs	r3, #3
 800c8b2:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c8b4:	2202      	movs	r2, #2
 800c8b6:	f100 010c 	add.w	r1, r0, #12
 800c8ba:	f000 f999 	bl	800cbf0 <USBD_CtlSendData>
}
 800c8be:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 800c8c0:	f7ff fe5c 	bl	800c57c <USBD_CtlError>
        break;
 800c8c4:	e7fb      	b.n	800c8be <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800c8c6:	f7ff fe59 	bl	800c57c <USBD_CtlError>
}
 800c8ca:	e7f8      	b.n	800c8be <USBD_GetStatus+0x2a>

0800c8cc <USBD_ClrFeature>:
{
 800c8cc:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800c8ce:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c8d2:	3b01      	subs	r3, #1
 800c8d4:	2b02      	cmp	r3, #2
 800c8d6:	d809      	bhi.n	800c8ec <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8d8:	884b      	ldrh	r3, [r1, #2]
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d000      	beq.n	800c8e0 <USBD_ClrFeature+0x14>
}
 800c8de:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c8e6:	f000 f9af 	bl	800cc48 <USBD_CtlSendStatus>
 800c8ea:	e7f8      	b.n	800c8de <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800c8ec:	f7ff fe46 	bl	800c57c <USBD_CtlError>
}
 800c8f0:	e7f5      	b.n	800c8de <USBD_ClrFeature+0x12>

0800c8f2 <USBD_StdDevReq>:
{
 800c8f2:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c8f4:	780c      	ldrb	r4, [r1, #0]
 800c8f6:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800c8fa:	2c20      	cmp	r4, #32
 800c8fc:	d006      	beq.n	800c90c <USBD_StdDevReq+0x1a>
 800c8fe:	2c40      	cmp	r4, #64	; 0x40
 800c900:	d004      	beq.n	800c90c <USBD_StdDevReq+0x1a>
 800c902:	b154      	cbz	r4, 800c91a <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 800c904:	f7ff fe3a 	bl	800c57c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c908:	2400      	movs	r4, #0
      break;
 800c90a:	e004      	b.n	800c916 <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c90c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c910:	689b      	ldr	r3, [r3, #8]
 800c912:	4798      	blx	r3
 800c914:	4604      	mov	r4, r0
}
 800c916:	4620      	mov	r0, r4
 800c918:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800c91a:	784d      	ldrb	r5, [r1, #1]
 800c91c:	2d09      	cmp	r5, #9
 800c91e:	d81d      	bhi.n	800c95c <USBD_StdDevReq+0x6a>
 800c920:	e8df f005 	tbb	[pc, r5]
 800c924:	161c1912 	.word	0x161c1912
 800c928:	1c05081c 	.word	0x1c05081c
 800c92c:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 800c92e:	f7ff fe2f 	bl	800c590 <USBD_GetDescriptor>
          break;
 800c932:	e7f0      	b.n	800c916 <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 800c934:	f7ff ff02 	bl	800c73c <USBD_SetAddress>
          break;
 800c938:	e7ed      	b.n	800c916 <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 800c93a:	f7ff ff27 	bl	800c78c <USBD_SetConfig>
 800c93e:	4604      	mov	r4, r0
          break;
 800c940:	e7e9      	b.n	800c916 <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 800c942:	f7ff ff87 	bl	800c854 <USBD_GetConfig>
          break;
 800c946:	e7e6      	b.n	800c916 <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 800c948:	f7ff ffa4 	bl	800c894 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800c94c:	462c      	mov	r4, r5
          break;
 800c94e:	e7e2      	b.n	800c916 <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 800c950:	f7ff fdf6 	bl	800c540 <USBD_SetFeature>
          break;
 800c954:	e7df      	b.n	800c916 <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 800c956:	f7ff ffb9 	bl	800c8cc <USBD_ClrFeature>
          break;
 800c95a:	e7dc      	b.n	800c916 <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 800c95c:	f7ff fe0e 	bl	800c57c <USBD_CtlError>
          break;
 800c960:	e7d9      	b.n	800c916 <USBD_StdDevReq+0x24>

0800c962 <USBD_StdItfReq>:
{
 800c962:	b570      	push	{r4, r5, r6, lr}
 800c964:	4605      	mov	r5, r0
 800c966:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c968:	780b      	ldrb	r3, [r1, #0]
 800c96a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c96e:	2b20      	cmp	r3, #32
 800c970:	d007      	beq.n	800c982 <USBD_StdItfReq+0x20>
 800c972:	2b40      	cmp	r3, #64	; 0x40
 800c974:	d005      	beq.n	800c982 <USBD_StdItfReq+0x20>
 800c976:	b123      	cbz	r3, 800c982 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800c978:	f7ff fe00 	bl	800c57c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c97c:	2600      	movs	r6, #0
}
 800c97e:	4630      	mov	r0, r6
 800c980:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800c982:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800c986:	3b01      	subs	r3, #1
 800c988:	2b02      	cmp	r3, #2
 800c98a:	d818      	bhi.n	800c9be <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c98c:	7923      	ldrb	r3, [r4, #4]
 800c98e:	2b01      	cmp	r3, #1
 800c990:	d80f      	bhi.n	800c9b2 <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c992:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800c996:	689b      	ldr	r3, [r3, #8]
 800c998:	4621      	mov	r1, r4
 800c99a:	4628      	mov	r0, r5
 800c99c:	4798      	blx	r3
 800c99e:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c9a0:	88e3      	ldrh	r3, [r4, #6]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d1eb      	bne.n	800c97e <USBD_StdItfReq+0x1c>
 800c9a6:	2800      	cmp	r0, #0
 800c9a8:	d1e9      	bne.n	800c97e <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800c9aa:	4628      	mov	r0, r5
 800c9ac:	f000 f94c 	bl	800cc48 <USBD_CtlSendStatus>
 800c9b0:	e7e5      	b.n	800c97e <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 800c9b2:	4621      	mov	r1, r4
 800c9b4:	4628      	mov	r0, r5
 800c9b6:	f7ff fde1 	bl	800c57c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c9ba:	2600      	movs	r6, #0
 800c9bc:	e7df      	b.n	800c97e <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 800c9be:	4621      	mov	r1, r4
 800c9c0:	4628      	mov	r0, r5
 800c9c2:	f7ff fddb 	bl	800c57c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c9c6:	2600      	movs	r6, #0
          break;
 800c9c8:	e7d9      	b.n	800c97e <USBD_StdItfReq+0x1c>

0800c9ca <USBD_StdEPReq>:
{
 800c9ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9cc:	4606      	mov	r6, r0
 800c9ce:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800c9d0:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9d2:	780c      	ldrb	r4, [r1, #0]
 800c9d4:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800c9d8:	2c20      	cmp	r4, #32
 800c9da:	d008      	beq.n	800c9ee <USBD_StdEPReq+0x24>
 800c9dc:	b2d9      	uxtb	r1, r3
 800c9de:	2c40      	cmp	r4, #64	; 0x40
 800c9e0:	d005      	beq.n	800c9ee <USBD_StdEPReq+0x24>
 800c9e2:	b16c      	cbz	r4, 800ca00 <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 800c9e4:	4629      	mov	r1, r5
 800c9e6:	f7ff fdc9 	bl	800c57c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c9ea:	2400      	movs	r4, #0
      break;
 800c9ec:	e006      	b.n	800c9fc <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c9ee:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	4629      	mov	r1, r5
 800c9f6:	4630      	mov	r0, r6
 800c9f8:	4798      	blx	r3
 800c9fa:	4604      	mov	r4, r0
}
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 800ca00:	786f      	ldrb	r7, [r5, #1]
 800ca02:	2f01      	cmp	r7, #1
 800ca04:	d02f      	beq.n	800ca66 <USBD_StdEPReq+0x9c>
 800ca06:	2f03      	cmp	r7, #3
 800ca08:	d005      	beq.n	800ca16 <USBD_StdEPReq+0x4c>
 800ca0a:	2f00      	cmp	r7, #0
 800ca0c:	d059      	beq.n	800cac2 <USBD_StdEPReq+0xf8>
          USBD_CtlError(pdev, req);
 800ca0e:	4629      	mov	r1, r5
 800ca10:	f7ff fdb4 	bl	800c57c <USBD_CtlError>
          break;
 800ca14:	e7f2      	b.n	800c9fc <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 800ca16:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ca1a:	b2db      	uxtb	r3, r3
 800ca1c:	2b02      	cmp	r3, #2
 800ca1e:	d005      	beq.n	800ca2c <USBD_StdEPReq+0x62>
 800ca20:	2b03      	cmp	r3, #3
 800ca22:	d012      	beq.n	800ca4a <USBD_StdEPReq+0x80>
              USBD_CtlError(pdev, req);
 800ca24:	4629      	mov	r1, r5
 800ca26:	f7ff fda9 	bl	800c57c <USBD_CtlError>
              break;
 800ca2a:	e7e7      	b.n	800c9fc <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca2c:	b109      	cbz	r1, 800ca32 <USBD_StdEPReq+0x68>
 800ca2e:	2980      	cmp	r1, #128	; 0x80
 800ca30:	d104      	bne.n	800ca3c <USBD_StdEPReq+0x72>
                USBD_CtlError(pdev, req);
 800ca32:	4629      	mov	r1, r5
 800ca34:	4630      	mov	r0, r6
 800ca36:	f7ff fda1 	bl	800c57c <USBD_CtlError>
 800ca3a:	e7df      	b.n	800c9fc <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca3c:	f000 faff 	bl	800d03e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca40:	2180      	movs	r1, #128	; 0x80
 800ca42:	4630      	mov	r0, r6
 800ca44:	f000 fafb 	bl	800d03e <USBD_LL_StallEP>
 800ca48:	e7d8      	b.n	800c9fc <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ca4a:	886b      	ldrh	r3, [r5, #2]
 800ca4c:	b923      	cbnz	r3, 800ca58 <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ca4e:	b119      	cbz	r1, 800ca58 <USBD_StdEPReq+0x8e>
 800ca50:	2980      	cmp	r1, #128	; 0x80
 800ca52:	d001      	beq.n	800ca58 <USBD_StdEPReq+0x8e>
 800ca54:	88eb      	ldrh	r3, [r5, #6]
 800ca56:	b11b      	cbz	r3, 800ca60 <USBD_StdEPReq+0x96>
              (void)USBD_CtlSendStatus(pdev);
 800ca58:	4630      	mov	r0, r6
 800ca5a:	f000 f8f5 	bl	800cc48 <USBD_CtlSendStatus>
              break;
 800ca5e:	e7cd      	b.n	800c9fc <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca60:	f000 faed 	bl	800d03e <USBD_LL_StallEP>
 800ca64:	e7f8      	b.n	800ca58 <USBD_StdEPReq+0x8e>
          switch (pdev->dev_state)
 800ca66:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	2b02      	cmp	r3, #2
 800ca6e:	d005      	beq.n	800ca7c <USBD_StdEPReq+0xb2>
 800ca70:	2b03      	cmp	r3, #3
 800ca72:	d012      	beq.n	800ca9a <USBD_StdEPReq+0xd0>
              USBD_CtlError(pdev, req);
 800ca74:	4629      	mov	r1, r5
 800ca76:	f7ff fd81 	bl	800c57c <USBD_CtlError>
              break;
 800ca7a:	e7bf      	b.n	800c9fc <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca7c:	b109      	cbz	r1, 800ca82 <USBD_StdEPReq+0xb8>
 800ca7e:	2980      	cmp	r1, #128	; 0x80
 800ca80:	d104      	bne.n	800ca8c <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 800ca82:	4629      	mov	r1, r5
 800ca84:	4630      	mov	r0, r6
 800ca86:	f7ff fd79 	bl	800c57c <USBD_CtlError>
 800ca8a:	e7b7      	b.n	800c9fc <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca8c:	f000 fad7 	bl	800d03e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca90:	2180      	movs	r1, #128	; 0x80
 800ca92:	4630      	mov	r0, r6
 800ca94:	f000 fad3 	bl	800d03e <USBD_LL_StallEP>
 800ca98:	e7b0      	b.n	800c9fc <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ca9a:	886b      	ldrh	r3, [r5, #2]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d1ad      	bne.n	800c9fc <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 800caa0:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 800caa4:	d10a      	bne.n	800cabc <USBD_StdEPReq+0xf2>
                (void)USBD_CtlSendStatus(pdev);
 800caa6:	4630      	mov	r0, r6
 800caa8:	f000 f8ce 	bl	800cc48 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800caac:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800cab0:	689b      	ldr	r3, [r3, #8]
 800cab2:	4629      	mov	r1, r5
 800cab4:	4630      	mov	r0, r6
 800cab6:	4798      	blx	r3
 800cab8:	4604      	mov	r4, r0
 800caba:	e79f      	b.n	800c9fc <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cabc:	f000 fac7 	bl	800d04e <USBD_LL_ClearStallEP>
 800cac0:	e7f1      	b.n	800caa6 <USBD_StdEPReq+0xdc>
          switch (pdev->dev_state)
 800cac2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800cac6:	b2d2      	uxtb	r2, r2
 800cac8:	2a02      	cmp	r2, #2
 800caca:	d006      	beq.n	800cada <USBD_StdEPReq+0x110>
 800cacc:	2a03      	cmp	r2, #3
 800cace:	d029      	beq.n	800cb24 <USBD_StdEPReq+0x15a>
              USBD_CtlError(pdev, req);
 800cad0:	4629      	mov	r1, r5
 800cad2:	f7ff fd53 	bl	800c57c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800cad6:	463c      	mov	r4, r7
              break;
 800cad8:	e790      	b.n	800c9fc <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cada:	b109      	cbz	r1, 800cae0 <USBD_StdEPReq+0x116>
 800cadc:	2980      	cmp	r1, #128	; 0x80
 800cade:	d113      	bne.n	800cb08 <USBD_StdEPReq+0x13e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cae0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cae4:	d115      	bne.n	800cb12 <USBD_StdEPReq+0x148>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cae6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800caea:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800caee:	0089      	lsls	r1, r1, #2
 800caf0:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 800caf4:	4431      	add	r1, r6
 800caf6:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800caf8:	2300      	movs	r3, #0
 800cafa:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cafc:	2202      	movs	r2, #2
 800cafe:	4630      	mov	r0, r6
 800cb00:	f000 f876 	bl	800cbf0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800cb04:	463c      	mov	r4, r7
              break;
 800cb06:	e779      	b.n	800c9fc <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 800cb08:	4629      	mov	r1, r5
 800cb0a:	f7ff fd37 	bl	800c57c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800cb0e:	463c      	mov	r4, r7
                break;
 800cb10:	e774      	b.n	800c9fc <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb12:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800cb16:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800cb1a:	0089      	lsls	r1, r1, #2
 800cb1c:	3110      	adds	r1, #16
 800cb1e:	4431      	add	r1, r6
 800cb20:	3104      	adds	r1, #4
 800cb22:	e7e9      	b.n	800caf8 <USBD_StdEPReq+0x12e>
              if ((ep_addr & 0x80U) == 0x80U)
 800cb24:	b25b      	sxtb	r3, r3
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	db1f      	blt.n	800cb6a <USBD_StdEPReq+0x1a0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cb2a:	f001 020f 	and.w	r2, r1, #15
 800cb2e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800cb32:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800cb36:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 800cb3a:	b322      	cbz	r2, 800cb86 <USBD_StdEPReq+0x1bc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	db27      	blt.n	800cb90 <USBD_StdEPReq+0x1c6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cb40:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800cb48:	009c      	lsls	r4, r3, #2
 800cb4a:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 800cb4e:	4434      	add	r4, r6
 800cb50:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cb52:	b109      	cbz	r1, 800cb58 <USBD_StdEPReq+0x18e>
 800cb54:	2980      	cmp	r1, #128	; 0x80
 800cb56:	d124      	bne.n	800cba2 <USBD_StdEPReq+0x1d8>
                pep->status = 0x0000U;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cb5c:	2202      	movs	r2, #2
 800cb5e:	4621      	mov	r1, r4
 800cb60:	4630      	mov	r0, r6
 800cb62:	f000 f845 	bl	800cbf0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800cb66:	463c      	mov	r4, r7
              break;
 800cb68:	e748      	b.n	800c9fc <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cb6a:	f001 020f 	and.w	r2, r1, #15
 800cb6e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800cb72:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800cb76:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800cb78:	2a00      	cmp	r2, #0
 800cb7a:	d1df      	bne.n	800cb3c <USBD_StdEPReq+0x172>
                  USBD_CtlError(pdev, req);
 800cb7c:	4629      	mov	r1, r5
 800cb7e:	f7ff fcfd 	bl	800c57c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800cb82:	463c      	mov	r4, r7
                  break;
 800cb84:	e73a      	b.n	800c9fc <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 800cb86:	4629      	mov	r1, r5
 800cb88:	f7ff fcf8 	bl	800c57c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800cb8c:	463c      	mov	r4, r7
                  break;
 800cb8e:	e735      	b.n	800c9fc <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb90:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800cb94:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800cb98:	009c      	lsls	r4, r3, #2
 800cb9a:	3410      	adds	r4, #16
 800cb9c:	4434      	add	r4, r6
 800cb9e:	3404      	adds	r4, #4
 800cba0:	e7d7      	b.n	800cb52 <USBD_StdEPReq+0x188>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cba2:	4630      	mov	r0, r6
 800cba4:	f000 fa5b 	bl	800d05e <USBD_LL_IsStallEP>
 800cba8:	b110      	cbz	r0, 800cbb0 <USBD_StdEPReq+0x1e6>
                pep->status = 0x0001U;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	6023      	str	r3, [r4, #0]
 800cbae:	e7d5      	b.n	800cb5c <USBD_StdEPReq+0x192>
                pep->status = 0x0000U;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	6023      	str	r3, [r4, #0]
 800cbb4:	e7d2      	b.n	800cb5c <USBD_StdEPReq+0x192>

0800cbb6 <USBD_GetString>:
  if (desc == NULL)
 800cbb6:	b1d0      	cbz	r0, 800cbee <USBD_GetString+0x38>
{
 800cbb8:	b570      	push	{r4, r5, r6, lr}
 800cbba:	460d      	mov	r5, r1
 800cbbc:	4616      	mov	r6, r2
 800cbbe:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cbc0:	f7ff fcb4 	bl	800c52c <USBD_GetLen>
 800cbc4:	1c43      	adds	r3, r0, #1
 800cbc6:	005b      	lsls	r3, r3, #1
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800cbcc:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cbce:	2303      	movs	r3, #3
 800cbd0:	706b      	strb	r3, [r5, #1]
  idx++;
 800cbd2:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800cbd4:	e007      	b.n	800cbe6 <USBD_GetString+0x30>
    unicode[idx] = *pdesc;
 800cbd6:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 800cbd8:	3401      	adds	r4, #1
    idx++;
 800cbda:	1c5a      	adds	r2, r3, #1
 800cbdc:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800cbde:	2100      	movs	r1, #0
 800cbe0:	54a9      	strb	r1, [r5, r2]
    idx++;
 800cbe2:	3302      	adds	r3, #2
 800cbe4:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800cbe6:	7822      	ldrb	r2, [r4, #0]
 800cbe8:	2a00      	cmp	r2, #0
 800cbea:	d1f4      	bne.n	800cbd6 <USBD_GetString+0x20>
}
 800cbec:	bd70      	pop	{r4, r5, r6, pc}
 800cbee:	4770      	bx	lr

0800cbf0 <USBD_CtlSendData>:
>>>>>>> render
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
<<<<<<< HEAD
 800cd88:	b508      	push	{r3, lr}
 800cd8a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cd8c:	2202      	movs	r2, #2
 800cd8e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cd92:	6183      	str	r3, [r0, #24]
=======
 800cbf0:	b508      	push	{r3, lr}
 800cbf2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cbf4:	2202      	movs	r2, #2
 800cbf6:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cbfa:	6183      	str	r3, [r0, #24]
>>>>>>> render

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
<<<<<<< HEAD
 800cd94:	61c3      	str	r3, [r0, #28]
=======
 800cbfc:	61c3      	str	r3, [r0, #28]
>>>>>>> render
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
<<<<<<< HEAD
 800cd96:	460a      	mov	r2, r1
 800cd98:	2100      	movs	r1, #0
 800cd9a:	f000 fa4b 	bl	800d234 <USBD_LL_Transmit>

  return USBD_OK;
}
 800cd9e:	2000      	movs	r0, #0
 800cda0:	bd08      	pop	{r3, pc}

0800cda2 <USBD_CtlContinueSendData>:
=======
 800cbfe:	460a      	mov	r2, r1
 800cc00:	2100      	movs	r1, #0
 800cc02:	f000 fa4b 	bl	800d09c <USBD_LL_Transmit>

  return USBD_OK;
}
 800cc06:	2000      	movs	r0, #0
 800cc08:	bd08      	pop	{r3, pc}

0800cc0a <USBD_CtlContinueSendData>:
>>>>>>> render
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
<<<<<<< HEAD
 800cda2:	b508      	push	{r3, lr}
 800cda4:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cda6:	460a      	mov	r2, r1
 800cda8:	2100      	movs	r1, #0
 800cdaa:	f000 fa43 	bl	800d234 <USBD_LL_Transmit>

  return USBD_OK;
}
 800cdae:	2000      	movs	r0, #0
 800cdb0:	bd08      	pop	{r3, pc}

0800cdb2 <USBD_CtlPrepareRx>:
=======
 800cc0a:	b508      	push	{r3, lr}
 800cc0c:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cc0e:	460a      	mov	r2, r1
 800cc10:	2100      	movs	r1, #0
 800cc12:	f000 fa43 	bl	800d09c <USBD_LL_Transmit>

  return USBD_OK;
}
 800cc16:	2000      	movs	r0, #0
 800cc18:	bd08      	pop	{r3, pc}

0800cc1a <USBD_CtlPrepareRx>:
>>>>>>> render
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
<<<<<<< HEAD
 800cdb2:	b508      	push	{r3, lr}
 800cdb4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cdb6:	2203      	movs	r2, #3
 800cdb8:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cdbc:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
=======
 800cc1a:	b508      	push	{r3, lr}
 800cc1c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cc1e:	2203      	movs	r2, #3
 800cc20:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cc24:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
>>>>>>> render

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
<<<<<<< HEAD
 800cdc0:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
=======
 800cc28:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
>>>>>>> render
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
<<<<<<< HEAD
 800cdc4:	460a      	mov	r2, r1
 800cdc6:	2100      	movs	r1, #0
 800cdc8:	f000 fa3c 	bl	800d244 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800cdcc:	2000      	movs	r0, #0
 800cdce:	bd08      	pop	{r3, pc}

0800cdd0 <USBD_CtlContinueRx>:
=======
 800cc2c:	460a      	mov	r2, r1
 800cc2e:	2100      	movs	r1, #0
 800cc30:	f000 fa3c 	bl	800d0ac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800cc34:	2000      	movs	r0, #0
 800cc36:	bd08      	pop	{r3, pc}

0800cc38 <USBD_CtlContinueRx>:
>>>>>>> render
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
<<<<<<< HEAD
 800cdd0:	b508      	push	{r3, lr}
 800cdd2:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cdd4:	460a      	mov	r2, r1
 800cdd6:	2100      	movs	r1, #0
 800cdd8:	f000 fa34 	bl	800d244 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800cddc:	2000      	movs	r0, #0
 800cdde:	bd08      	pop	{r3, pc}

0800cde0 <USBD_CtlSendStatus>:
=======
 800cc38:	b508      	push	{r3, lr}
 800cc3a:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cc3c:	460a      	mov	r2, r1
 800cc3e:	2100      	movs	r1, #0
 800cc40:	f000 fa34 	bl	800d0ac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800cc44:	2000      	movs	r0, #0
 800cc46:	bd08      	pop	{r3, pc}

0800cc48 <USBD_CtlSendStatus>:
>>>>>>> render
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800cde0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cde2:	2204      	movs	r2, #4
 800cde4:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cde8:	2300      	movs	r3, #0
 800cdea:	461a      	mov	r2, r3
 800cdec:	4619      	mov	r1, r3
 800cdee:	f000 fa21 	bl	800d234 <USBD_LL_Transmit>

  return USBD_OK;
}
 800cdf2:	2000      	movs	r0, #0
 800cdf4:	bd08      	pop	{r3, pc}

0800cdf6 <USBD_CtlReceiveStatus>:
=======
 800cc48:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cc4a:	2204      	movs	r2, #4
 800cc4c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cc50:	2300      	movs	r3, #0
 800cc52:	461a      	mov	r2, r3
 800cc54:	4619      	mov	r1, r3
 800cc56:	f000 fa21 	bl	800d09c <USBD_LL_Transmit>

  return USBD_OK;
}
 800cc5a:	2000      	movs	r0, #0
 800cc5c:	bd08      	pop	{r3, pc}

0800cc5e <USBD_CtlReceiveStatus>:
>>>>>>> render
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800cdf6:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cdf8:	2205      	movs	r2, #5
 800cdfa:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cdfe:	2300      	movs	r3, #0
 800ce00:	461a      	mov	r2, r3
 800ce02:	4619      	mov	r1, r3
 800ce04:	f000 fa1e 	bl	800d244 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800ce08:	2000      	movs	r0, #0
 800ce0a:	bd08      	pop	{r3, pc}

0800ce0c <MX_USB_Device_Init>:
=======
 800cc5e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cc60:	2205      	movs	r2, #5
 800cc62:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc66:	2300      	movs	r3, #0
 800cc68:	461a      	mov	r2, r3
 800cc6a:	4619      	mov	r1, r3
 800cc6c:	f000 fa1e 	bl	800d0ac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800cc70:	2000      	movs	r0, #0
 800cc72:	bd08      	pop	{r3, pc}

0800cc74 <MX_USB_Device_Init>:
>>>>>>> render
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
<<<<<<< HEAD
 800ce0c:	b508      	push	{r3, lr}
=======
 800cc74:	b508      	push	{r3, lr}
>>>>>>> render
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
<<<<<<< HEAD
 800ce0e:	2200      	movs	r2, #0
 800ce10:	490f      	ldr	r1, [pc, #60]	; (800ce50 <MX_USB_Device_Init+0x44>)
 800ce12:	4810      	ldr	r0, [pc, #64]	; (800ce54 <MX_USB_Device_Init+0x48>)
 800ce14:	f7ff faf1 	bl	800c3fa <USBD_Init>
 800ce18:	b970      	cbnz	r0, 800ce38 <MX_USB_Device_Init+0x2c>
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800ce1a:	490f      	ldr	r1, [pc, #60]	; (800ce58 <MX_USB_Device_Init+0x4c>)
 800ce1c:	480d      	ldr	r0, [pc, #52]	; (800ce54 <MX_USB_Device_Init+0x48>)
 800ce1e:	f7ff fb03 	bl	800c428 <USBD_RegisterClass>
 800ce22:	b960      	cbnz	r0, 800ce3e <MX_USB_Device_Init+0x32>
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800ce24:	490d      	ldr	r1, [pc, #52]	; (800ce5c <MX_USB_Device_Init+0x50>)
 800ce26:	480b      	ldr	r0, [pc, #44]	; (800ce54 <MX_USB_Device_Init+0x48>)
 800ce28:	f7ff fab3 	bl	800c392 <USBD_CDC_RegisterInterface>
 800ce2c:	b950      	cbnz	r0, 800ce44 <MX_USB_Device_Init+0x38>
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800ce2e:	4809      	ldr	r0, [pc, #36]	; (800ce54 <MX_USB_Device_Init+0x48>)
 800ce30:	f7ff fb11 	bl	800c456 <USBD_Start>
 800ce34:	b948      	cbnz	r0, 800ce4a <MX_USB_Device_Init+0x3e>
=======
 800cc76:	2200      	movs	r2, #0
 800cc78:	490f      	ldr	r1, [pc, #60]	; (800ccb8 <MX_USB_Device_Init+0x44>)
 800cc7a:	4810      	ldr	r0, [pc, #64]	; (800ccbc <MX_USB_Device_Init+0x48>)
 800cc7c:	f7ff faf1 	bl	800c262 <USBD_Init>
 800cc80:	b970      	cbnz	r0, 800cca0 <MX_USB_Device_Init+0x2c>
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800cc82:	490f      	ldr	r1, [pc, #60]	; (800ccc0 <MX_USB_Device_Init+0x4c>)
 800cc84:	480d      	ldr	r0, [pc, #52]	; (800ccbc <MX_USB_Device_Init+0x48>)
 800cc86:	f7ff fb03 	bl	800c290 <USBD_RegisterClass>
 800cc8a:	b960      	cbnz	r0, 800cca6 <MX_USB_Device_Init+0x32>
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800cc8c:	490d      	ldr	r1, [pc, #52]	; (800ccc4 <MX_USB_Device_Init+0x50>)
 800cc8e:	480b      	ldr	r0, [pc, #44]	; (800ccbc <MX_USB_Device_Init+0x48>)
 800cc90:	f7ff fab3 	bl	800c1fa <USBD_CDC_RegisterInterface>
 800cc94:	b950      	cbnz	r0, 800ccac <MX_USB_Device_Init+0x38>
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800cc96:	4809      	ldr	r0, [pc, #36]	; (800ccbc <MX_USB_Device_Init+0x48>)
 800cc98:	f7ff fb11 	bl	800c2be <USBD_Start>
 800cc9c:	b948      	cbnz	r0, 800ccb2 <MX_USB_Device_Init+0x3e>
>>>>>>> render
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
<<<<<<< HEAD
 800ce36:	bd08      	pop	{r3, pc}
    Error_Handler();
 800ce38:	f7f5 f89e 	bl	8001f78 <Error_Handler>
 800ce3c:	e7ed      	b.n	800ce1a <MX_USB_Device_Init+0xe>
    Error_Handler();
 800ce3e:	f7f5 f89b 	bl	8001f78 <Error_Handler>
 800ce42:	e7ef      	b.n	800ce24 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800ce44:	f7f5 f898 	bl	8001f78 <Error_Handler>
 800ce48:	e7f1      	b.n	800ce2e <MX_USB_Device_Init+0x22>
    Error_Handler();
 800ce4a:	f7f5 f895 	bl	8001f78 <Error_Handler>
}
 800ce4e:	e7f2      	b.n	800ce36 <MX_USB_Device_Init+0x2a>
 800ce50:	20000234 	.word	0x20000234
 800ce54:	2001151c 	.word	0x2001151c
 800ce58:	20000110 	.word	0x20000110
 800ce5c:	20000220 	.word	0x20000220

0800ce60 <CDC_DeInit_FS>:
=======
 800cc9e:	bd08      	pop	{r3, pc}
    Error_Handler();
 800cca0:	f7f5 f96a 	bl	8001f78 <Error_Handler>
 800cca4:	e7ed      	b.n	800cc82 <MX_USB_Device_Init+0xe>
    Error_Handler();
 800cca6:	f7f5 f967 	bl	8001f78 <Error_Handler>
 800ccaa:	e7ef      	b.n	800cc8c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800ccac:	f7f5 f964 	bl	8001f78 <Error_Handler>
 800ccb0:	e7f1      	b.n	800cc96 <MX_USB_Device_Init+0x22>
    Error_Handler();
 800ccb2:	f7f5 f961 	bl	8001f78 <Error_Handler>
}
 800ccb6:	e7f2      	b.n	800cc9e <MX_USB_Device_Init+0x2a>
 800ccb8:	20001224 	.word	0x20001224
 800ccbc:	2001250c 	.word	0x2001250c
 800ccc0:	20001100 	.word	0x20001100
 800ccc4:	20001210 	.word	0x20001210

0800ccc8 <CDC_DeInit_FS>:
>>>>>>> render
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
<<<<<<< HEAD
 800ce60:	2000      	movs	r0, #0
 800ce62:	4770      	bx	lr

0800ce64 <CDC_Control_FS>:
=======
 800ccc8:	2000      	movs	r0, #0
 800ccca:	4770      	bx	lr

0800cccc <CDC_Control_FS>:
>>>>>>> render
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
<<<<<<< HEAD
 800ce64:	2000      	movs	r0, #0
 800ce66:	4770      	bx	lr

0800ce68 <CDC_TransmitCplt_FS>:
=======
 800cccc:	2000      	movs	r0, #0
 800ccce:	4770      	bx	lr

0800ccd0 <CDC_TransmitCplt_FS>:
>>>>>>> render
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
<<<<<<< HEAD
 800ce68:	2000      	movs	r0, #0
 800ce6a:	4770      	bx	lr

0800ce6c <CDC_Receive_FS>:
{
 800ce6c:	b510      	push	{r4, lr}
 800ce6e:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ce70:	4c04      	ldr	r4, [pc, #16]	; (800ce84 <CDC_Receive_FS+0x18>)
 800ce72:	4620      	mov	r0, r4
 800ce74:	f7ff fa9f 	bl	800c3b6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ce78:	4620      	mov	r0, r4
 800ce7a:	f7ff faa5 	bl	800c3c8 <USBD_CDC_ReceivePacket>
}
 800ce7e:	2000      	movs	r0, #0
 800ce80:	bd10      	pop	{r4, pc}
 800ce82:	bf00      	nop
 800ce84:	2001151c 	.word	0x2001151c

0800ce88 <CDC_Init_FS>:
{
 800ce88:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ce8a:	4c06      	ldr	r4, [pc, #24]	; (800cea4 <CDC_Init_FS+0x1c>)
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	4906      	ldr	r1, [pc, #24]	; (800cea8 <CDC_Init_FS+0x20>)
 800ce90:	4620      	mov	r0, r4
 800ce92:	f7ff fa85 	bl	800c3a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ce96:	4905      	ldr	r1, [pc, #20]	; (800ceac <CDC_Init_FS+0x24>)
 800ce98:	4620      	mov	r0, r4
 800ce9a:	f7ff fa8c 	bl	800c3b6 <USBD_CDC_SetRxBuffer>
}
 800ce9e:	2000      	movs	r0, #0
 800cea0:	bd10      	pop	{r4, pc}
 800cea2:	bf00      	nop
 800cea4:	2001151c 	.word	0x2001151c
 800cea8:	20011fec 	.word	0x20011fec
 800ceac:	200117ec 	.word	0x200117ec

0800ceb0 <USBD_CDC_DeviceDescriptor>:
=======
 800ccd0:	2000      	movs	r0, #0
 800ccd2:	4770      	bx	lr

0800ccd4 <CDC_Receive_FS>:
{
 800ccd4:	b510      	push	{r4, lr}
 800ccd6:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ccd8:	4c04      	ldr	r4, [pc, #16]	; (800ccec <CDC_Receive_FS+0x18>)
 800ccda:	4620      	mov	r0, r4
 800ccdc:	f7ff fa9f 	bl	800c21e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cce0:	4620      	mov	r0, r4
 800cce2:	f7ff faa5 	bl	800c230 <USBD_CDC_ReceivePacket>
}
 800cce6:	2000      	movs	r0, #0
 800cce8:	bd10      	pop	{r4, pc}
 800ccea:	bf00      	nop
 800ccec:	2001250c 	.word	0x2001250c

0800ccf0 <CDC_Init_FS>:
{
 800ccf0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ccf2:	4c06      	ldr	r4, [pc, #24]	; (800cd0c <CDC_Init_FS+0x1c>)
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	4906      	ldr	r1, [pc, #24]	; (800cd10 <CDC_Init_FS+0x20>)
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	f7ff fa85 	bl	800c208 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ccfe:	4905      	ldr	r1, [pc, #20]	; (800cd14 <CDC_Init_FS+0x24>)
 800cd00:	4620      	mov	r0, r4
 800cd02:	f7ff fa8c 	bl	800c21e <USBD_CDC_SetRxBuffer>
}
 800cd06:	2000      	movs	r0, #0
 800cd08:	bd10      	pop	{r4, pc}
 800cd0a:	bf00      	nop
 800cd0c:	2001250c 	.word	0x2001250c
 800cd10:	20012fdc 	.word	0x20012fdc
 800cd14:	200127dc 	.word	0x200127dc

0800cd18 <USBD_CDC_DeviceDescriptor>:
>>>>>>> render
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
<<<<<<< HEAD
 800ceb0:	2312      	movs	r3, #18
 800ceb2:	800b      	strh	r3, [r1, #0]
  return USBD_CDC_DeviceDesc;
}
 800ceb4:	4800      	ldr	r0, [pc, #0]	; (800ceb8 <USBD_CDC_DeviceDescriptor+0x8>)
 800ceb6:	4770      	bx	lr
 800ceb8:	20000254 	.word	0x20000254

0800cebc <USBD_CDC_LangIDStrDescriptor>:
=======
 800cd18:	2312      	movs	r3, #18
 800cd1a:	800b      	strh	r3, [r1, #0]
  return USBD_CDC_DeviceDesc;
}
 800cd1c:	4800      	ldr	r0, [pc, #0]	; (800cd20 <USBD_CDC_DeviceDescriptor+0x8>)
 800cd1e:	4770      	bx	lr
 800cd20:	20001244 	.word	0x20001244

0800cd24 <USBD_CDC_LangIDStrDescriptor>:
>>>>>>> render
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
<<<<<<< HEAD
 800cebc:	2304      	movs	r3, #4
 800cebe:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800cec0:	4800      	ldr	r0, [pc, #0]	; (800cec4 <USBD_CDC_LangIDStrDescriptor+0x8>)
 800cec2:	4770      	bx	lr
 800cec4:	20000268 	.word	0x20000268

0800cec8 <IntToUnicode>:
=======
 800cd24:	2304      	movs	r3, #4
 800cd26:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800cd28:	4800      	ldr	r0, [pc, #0]	; (800cd2c <USBD_CDC_LangIDStrDescriptor+0x8>)
 800cd2a:	4770      	bx	lr
 800cd2c:	20001258 	.word	0x20001258

0800cd30 <IntToUnicode>:
>>>>>>> render
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
<<<<<<< HEAD
 800cec8:	2300      	movs	r3, #0
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d21e      	bcs.n	800cf0c <IntToUnicode+0x44>
{
 800cece:	b500      	push	{lr}
 800ced0:	e010      	b.n	800cef4 <IntToUnicode+0x2c>
=======
 800cd30:	2300      	movs	r3, #0
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d21e      	bcs.n	800cd74 <IntToUnicode+0x44>
{
 800cd36:	b500      	push	{lr}
 800cd38:	e010      	b.n	800cd5c <IntToUnicode+0x2c>
>>>>>>> render
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
<<<<<<< HEAD
 800ced2:	f10c 0c37 	add.w	ip, ip, #55	; 0x37
 800ced6:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 800ceda:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800cedc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800cee0:	f10c 0c01 	add.w	ip, ip, #1
 800cee4:	f04f 0e00 	mov.w	lr, #0
 800cee8:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 800ceec:	3301      	adds	r3, #1
 800ceee:	b2db      	uxtb	r3, r3
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d209      	bcs.n	800cf08 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 800cef4:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 800cef8:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 800cefc:	d2e9      	bcs.n	800ced2 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800cefe:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800cf02:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 800cf06:	e7e8      	b.n	800ceda <IntToUnicode+0x12>
  }
}
 800cf08:	f85d fb04 	ldr.w	pc, [sp], #4
 800cf0c:	4770      	bx	lr
	...

0800cf10 <Get_SerialNum>:
{
 800cf10:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cf12:	4b0b      	ldr	r3, [pc, #44]	; (800cf40 <Get_SerialNum+0x30>)
 800cf14:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cf18:	f8d3 4594 	ldr.w	r4, [r3, #1428]	; 0x594
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cf1c:	f8d3 3598 	ldr.w	r3, [r3, #1432]	; 0x598
  if (deviceserial0 != 0)
 800cf20:	18c0      	adds	r0, r0, r3
 800cf22:	d100      	bne.n	800cf26 <Get_SerialNum+0x16>
}
 800cf24:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cf26:	4d07      	ldr	r5, [pc, #28]	; (800cf44 <Get_SerialNum+0x34>)
 800cf28:	2208      	movs	r2, #8
 800cf2a:	1ca9      	adds	r1, r5, #2
 800cf2c:	f7ff ffcc 	bl	800cec8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf30:	2204      	movs	r2, #4
 800cf32:	f105 0112 	add.w	r1, r5, #18
 800cf36:	4620      	mov	r0, r4
 800cf38:	f7ff ffc6 	bl	800cec8 <IntToUnicode>
}
 800cf3c:	e7f2      	b.n	800cf24 <Get_SerialNum+0x14>
 800cf3e:	bf00      	nop
 800cf40:	1fff7000 	.word	0x1fff7000
 800cf44:	2000026c 	.word	0x2000026c

0800cf48 <USBD_CDC_SerialStrDescriptor>:
{
 800cf48:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800cf4a:	231a      	movs	r3, #26
 800cf4c:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800cf4e:	f7ff ffdf 	bl	800cf10 <Get_SerialNum>
}
 800cf52:	4801      	ldr	r0, [pc, #4]	; (800cf58 <USBD_CDC_SerialStrDescriptor+0x10>)
 800cf54:	bd08      	pop	{r3, pc}
 800cf56:	bf00      	nop
 800cf58:	2000026c 	.word	0x2000026c

0800cf5c <USBD_CDC_ProductStrDescriptor>:
{
 800cf5c:	b508      	push	{r3, lr}
 800cf5e:	460a      	mov	r2, r1
  if(speed == 0)
 800cf60:	b928      	cbnz	r0, 800cf6e <USBD_CDC_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cf62:	4905      	ldr	r1, [pc, #20]	; (800cf78 <USBD_CDC_ProductStrDescriptor+0x1c>)
 800cf64:	4805      	ldr	r0, [pc, #20]	; (800cf7c <USBD_CDC_ProductStrDescriptor+0x20>)
 800cf66:	f7ff fef2 	bl	800cd4e <USBD_GetString>
}
 800cf6a:	4803      	ldr	r0, [pc, #12]	; (800cf78 <USBD_CDC_ProductStrDescriptor+0x1c>)
 800cf6c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cf6e:	4902      	ldr	r1, [pc, #8]	; (800cf78 <USBD_CDC_ProductStrDescriptor+0x1c>)
 800cf70:	4802      	ldr	r0, [pc, #8]	; (800cf7c <USBD_CDC_ProductStrDescriptor+0x20>)
 800cf72:	f7ff feec 	bl	800cd4e <USBD_GetString>
 800cf76:	e7f8      	b.n	800cf6a <USBD_CDC_ProductStrDescriptor+0xe>
 800cf78:	200127ec 	.word	0x200127ec
 800cf7c:	08013ca4 	.word	0x08013ca4

0800cf80 <USBD_CDC_ManufacturerStrDescriptor>:
{
 800cf80:	b510      	push	{r4, lr}
 800cf82:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cf84:	4c03      	ldr	r4, [pc, #12]	; (800cf94 <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 800cf86:	4621      	mov	r1, r4
 800cf88:	4803      	ldr	r0, [pc, #12]	; (800cf98 <USBD_CDC_ManufacturerStrDescriptor+0x18>)
 800cf8a:	f7ff fee0 	bl	800cd4e <USBD_GetString>
}
 800cf8e:	4620      	mov	r0, r4
 800cf90:	bd10      	pop	{r4, pc}
 800cf92:	bf00      	nop
 800cf94:	200127ec 	.word	0x200127ec
 800cf98:	08013cbc 	.word	0x08013cbc

0800cf9c <USBD_CDC_ConfigStrDescriptor>:
{
 800cf9c:	b508      	push	{r3, lr}
 800cf9e:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800cfa0:	b928      	cbnz	r0, 800cfae <USBD_CDC_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cfa2:	4905      	ldr	r1, [pc, #20]	; (800cfb8 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 800cfa4:	4805      	ldr	r0, [pc, #20]	; (800cfbc <USBD_CDC_ConfigStrDescriptor+0x20>)
 800cfa6:	f7ff fed2 	bl	800cd4e <USBD_GetString>
}
 800cfaa:	4803      	ldr	r0, [pc, #12]	; (800cfb8 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 800cfac:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cfae:	4902      	ldr	r1, [pc, #8]	; (800cfb8 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 800cfb0:	4802      	ldr	r0, [pc, #8]	; (800cfbc <USBD_CDC_ConfigStrDescriptor+0x20>)
 800cfb2:	f7ff fecc 	bl	800cd4e <USBD_GetString>
 800cfb6:	e7f8      	b.n	800cfaa <USBD_CDC_ConfigStrDescriptor+0xe>
 800cfb8:	200127ec 	.word	0x200127ec
 800cfbc:	08013cd0 	.word	0x08013cd0

0800cfc0 <USBD_CDC_InterfaceStrDescriptor>:
{
 800cfc0:	b508      	push	{r3, lr}
 800cfc2:	460a      	mov	r2, r1
  if(speed == 0)
 800cfc4:	b928      	cbnz	r0, 800cfd2 <USBD_CDC_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cfc6:	4905      	ldr	r1, [pc, #20]	; (800cfdc <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 800cfc8:	4805      	ldr	r0, [pc, #20]	; (800cfe0 <USBD_CDC_InterfaceStrDescriptor+0x20>)
 800cfca:	f7ff fec0 	bl	800cd4e <USBD_GetString>
}
 800cfce:	4803      	ldr	r0, [pc, #12]	; (800cfdc <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 800cfd0:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cfd2:	4902      	ldr	r1, [pc, #8]	; (800cfdc <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 800cfd4:	4802      	ldr	r0, [pc, #8]	; (800cfe0 <USBD_CDC_InterfaceStrDescriptor+0x20>)
 800cfd6:	f7ff feba 	bl	800cd4e <USBD_GetString>
 800cfda:	e7f8      	b.n	800cfce <USBD_CDC_InterfaceStrDescriptor+0xe>
 800cfdc:	200127ec 	.word	0x200127ec
 800cfe0:	08013cdc 	.word	0x08013cdc

0800cfe4 <USBD_Get_USB_Status>:
=======
 800cd3a:	f10c 0c37 	add.w	ip, ip, #55	; 0x37
 800cd3e:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 800cd42:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800cd44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800cd48:	f10c 0c01 	add.w	ip, ip, #1
 800cd4c:	f04f 0e00 	mov.w	lr, #0
 800cd50:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 800cd54:	3301      	adds	r3, #1
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	d209      	bcs.n	800cd70 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 800cd5c:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 800cd60:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 800cd64:	d2e9      	bcs.n	800cd3a <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800cd66:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800cd6a:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 800cd6e:	e7e8      	b.n	800cd42 <IntToUnicode+0x12>
  }
}
 800cd70:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd74:	4770      	bx	lr
	...

0800cd78 <Get_SerialNum>:
{
 800cd78:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cd7a:	4b0b      	ldr	r3, [pc, #44]	; (800cda8 <Get_SerialNum+0x30>)
 800cd7c:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cd80:	f8d3 4594 	ldr.w	r4, [r3, #1428]	; 0x594
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cd84:	f8d3 3598 	ldr.w	r3, [r3, #1432]	; 0x598
  if (deviceserial0 != 0)
 800cd88:	18c0      	adds	r0, r0, r3
 800cd8a:	d100      	bne.n	800cd8e <Get_SerialNum+0x16>
}
 800cd8c:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cd8e:	4d07      	ldr	r5, [pc, #28]	; (800cdac <Get_SerialNum+0x34>)
 800cd90:	2208      	movs	r2, #8
 800cd92:	1ca9      	adds	r1, r5, #2
 800cd94:	f7ff ffcc 	bl	800cd30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cd98:	2204      	movs	r2, #4
 800cd9a:	f105 0112 	add.w	r1, r5, #18
 800cd9e:	4620      	mov	r0, r4
 800cda0:	f7ff ffc6 	bl	800cd30 <IntToUnicode>
}
 800cda4:	e7f2      	b.n	800cd8c <Get_SerialNum+0x14>
 800cda6:	bf00      	nop
 800cda8:	1fff7000 	.word	0x1fff7000
 800cdac:	2000125c 	.word	0x2000125c

0800cdb0 <USBD_CDC_SerialStrDescriptor>:
{
 800cdb0:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800cdb2:	231a      	movs	r3, #26
 800cdb4:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800cdb6:	f7ff ffdf 	bl	800cd78 <Get_SerialNum>
}
 800cdba:	4801      	ldr	r0, [pc, #4]	; (800cdc0 <USBD_CDC_SerialStrDescriptor+0x10>)
 800cdbc:	bd08      	pop	{r3, pc}
 800cdbe:	bf00      	nop
 800cdc0:	2000125c 	.word	0x2000125c

0800cdc4 <USBD_CDC_ProductStrDescriptor>:
{
 800cdc4:	b508      	push	{r3, lr}
 800cdc6:	460a      	mov	r2, r1
  if(speed == 0)
 800cdc8:	b928      	cbnz	r0, 800cdd6 <USBD_CDC_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cdca:	4905      	ldr	r1, [pc, #20]	; (800cde0 <USBD_CDC_ProductStrDescriptor+0x1c>)
 800cdcc:	4805      	ldr	r0, [pc, #20]	; (800cde4 <USBD_CDC_ProductStrDescriptor+0x20>)
 800cdce:	f7ff fef2 	bl	800cbb6 <USBD_GetString>
}
 800cdd2:	4803      	ldr	r0, [pc, #12]	; (800cde0 <USBD_CDC_ProductStrDescriptor+0x1c>)
 800cdd4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cdd6:	4902      	ldr	r1, [pc, #8]	; (800cde0 <USBD_CDC_ProductStrDescriptor+0x1c>)
 800cdd8:	4802      	ldr	r0, [pc, #8]	; (800cde4 <USBD_CDC_ProductStrDescriptor+0x20>)
 800cdda:	f7ff feec 	bl	800cbb6 <USBD_GetString>
 800cdde:	e7f8      	b.n	800cdd2 <USBD_CDC_ProductStrDescriptor+0xe>
 800cde0:	200137dc 	.word	0x200137dc
 800cde4:	08013b0c 	.word	0x08013b0c

0800cde8 <USBD_CDC_ManufacturerStrDescriptor>:
{
 800cde8:	b510      	push	{r4, lr}
 800cdea:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cdec:	4c03      	ldr	r4, [pc, #12]	; (800cdfc <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 800cdee:	4621      	mov	r1, r4
 800cdf0:	4803      	ldr	r0, [pc, #12]	; (800ce00 <USBD_CDC_ManufacturerStrDescriptor+0x18>)
 800cdf2:	f7ff fee0 	bl	800cbb6 <USBD_GetString>
}
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	bd10      	pop	{r4, pc}
 800cdfa:	bf00      	nop
 800cdfc:	200137dc 	.word	0x200137dc
 800ce00:	08013b24 	.word	0x08013b24

0800ce04 <USBD_CDC_ConfigStrDescriptor>:
{
 800ce04:	b508      	push	{r3, lr}
 800ce06:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800ce08:	b928      	cbnz	r0, 800ce16 <USBD_CDC_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ce0a:	4905      	ldr	r1, [pc, #20]	; (800ce20 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 800ce0c:	4805      	ldr	r0, [pc, #20]	; (800ce24 <USBD_CDC_ConfigStrDescriptor+0x20>)
 800ce0e:	f7ff fed2 	bl	800cbb6 <USBD_GetString>
}
 800ce12:	4803      	ldr	r0, [pc, #12]	; (800ce20 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 800ce14:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ce16:	4902      	ldr	r1, [pc, #8]	; (800ce20 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 800ce18:	4802      	ldr	r0, [pc, #8]	; (800ce24 <USBD_CDC_ConfigStrDescriptor+0x20>)
 800ce1a:	f7ff fecc 	bl	800cbb6 <USBD_GetString>
 800ce1e:	e7f8      	b.n	800ce12 <USBD_CDC_ConfigStrDescriptor+0xe>
 800ce20:	200137dc 	.word	0x200137dc
 800ce24:	08013b38 	.word	0x08013b38

0800ce28 <USBD_CDC_InterfaceStrDescriptor>:
{
 800ce28:	b508      	push	{r3, lr}
 800ce2a:	460a      	mov	r2, r1
  if(speed == 0)
 800ce2c:	b928      	cbnz	r0, 800ce3a <USBD_CDC_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ce2e:	4905      	ldr	r1, [pc, #20]	; (800ce44 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 800ce30:	4805      	ldr	r0, [pc, #20]	; (800ce48 <USBD_CDC_InterfaceStrDescriptor+0x20>)
 800ce32:	f7ff fec0 	bl	800cbb6 <USBD_GetString>
}
 800ce36:	4803      	ldr	r0, [pc, #12]	; (800ce44 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 800ce38:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ce3a:	4902      	ldr	r1, [pc, #8]	; (800ce44 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 800ce3c:	4802      	ldr	r0, [pc, #8]	; (800ce48 <USBD_CDC_InterfaceStrDescriptor+0x20>)
 800ce3e:	f7ff feba 	bl	800cbb6 <USBD_GetString>
 800ce42:	e7f8      	b.n	800ce36 <USBD_CDC_InterfaceStrDescriptor+0xe>
 800ce44:	200137dc 	.word	0x200137dc
 800ce48:	08013b44 	.word	0x08013b44

0800ce4c <USBD_Get_USB_Status>:
>>>>>>> render
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
<<<<<<< HEAD
 800cfe4:	2803      	cmp	r0, #3
 800cfe6:	d805      	bhi.n	800cff4 <USBD_Get_USB_Status+0x10>
 800cfe8:	e8df f000 	tbb	[pc, r0]
 800cfec:	05020405 	.word	0x05020405
=======
 800ce4c:	2803      	cmp	r0, #3
 800ce4e:	d805      	bhi.n	800ce5c <USBD_Get_USB_Status+0x10>
 800ce50:	e8df f000 	tbb	[pc, r0]
 800ce54:	05020405 	.word	0x05020405
>>>>>>> render
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
<<<<<<< HEAD
 800cff0:	2001      	movs	r0, #1
    break;
 800cff2:	4770      	bx	lr
      usb_status = USBD_FAIL;
 800cff4:	2003      	movs	r0, #3
=======
 800ce58:	2001      	movs	r0, #1
    break;
 800ce5a:	4770      	bx	lr
      usb_status = USBD_FAIL;
 800ce5c:	2003      	movs	r0, #3
>>>>>>> render
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
<<<<<<< HEAD
 800cff6:	4770      	bx	lr

0800cff8 <SystemClockConfig_Resume>:
{
 800cff8:	b508      	push	{r3, lr}
  SystemClock_Config();
 800cffa:	f7f4 ffc5 	bl	8001f88 <SystemClock_Config>
}
 800cffe:	bd08      	pop	{r3, pc}

0800d000 <HAL_PCD_MspInit>:
{
 800d000:	b510      	push	{r4, lr}
 800d002:	b096      	sub	sp, #88	; 0x58
 800d004:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d006:	2254      	movs	r2, #84	; 0x54
 800d008:	2100      	movs	r1, #0
 800d00a:	a801      	add	r0, sp, #4
 800d00c:	f001 fae4 	bl	800e5d8 <memset>
  if(pcdHandle->Instance==USB)
 800d010:	6822      	ldr	r2, [r4, #0]
 800d012:	4b11      	ldr	r3, [pc, #68]	; (800d058 <HAL_PCD_MspInit+0x58>)
 800d014:	429a      	cmp	r2, r3
 800d016:	d001      	beq.n	800d01c <HAL_PCD_MspInit+0x1c>
}
 800d018:	b016      	add	sp, #88	; 0x58
 800d01a:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d01c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d020:	9301      	str	r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d022:	a801      	add	r0, sp, #4
 800d024:	f7fc f824 	bl	8009070 <HAL_RCCEx_PeriphCLKConfig>
 800d028:	b990      	cbnz	r0, 800d050 <HAL_PCD_MspInit+0x50>
    __HAL_RCC_USB_CLK_ENABLE();
 800d02a:	4b0c      	ldr	r3, [pc, #48]	; (800d05c <HAL_PCD_MspInit+0x5c>)
 800d02c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d02e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800d032:	659a      	str	r2, [r3, #88]	; 0x58
 800d034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d036:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d03a:	9300      	str	r3, [sp, #0]
 800d03c:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d03e:	2200      	movs	r2, #0
 800d040:	4611      	mov	r1, r2
 800d042:	2014      	movs	r0, #20
 800d044:	f7f9 f8e0 	bl	8006208 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d048:	2014      	movs	r0, #20
 800d04a:	f7f9 f915 	bl	8006278 <HAL_NVIC_EnableIRQ>
}
 800d04e:	e7e3      	b.n	800d018 <HAL_PCD_MspInit+0x18>
      Error_Handler();
 800d050:	f7f4 ff92 	bl	8001f78 <Error_Handler>
 800d054:	e7e9      	b.n	800d02a <HAL_PCD_MspInit+0x2a>
 800d056:	bf00      	nop
 800d058:	40005c00 	.word	0x40005c00
 800d05c:	40021000 	.word	0x40021000

0800d060 <HAL_PCD_SetupStageCallback>:
{
 800d060:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d062:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 800d066:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800d06a:	f7ff fa09 	bl	800c480 <USBD_LL_SetupStage>
}
 800d06e:	bd08      	pop	{r3, pc}

0800d070 <HAL_PCD_DataOutStageCallback>:
{
 800d070:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d072:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800d076:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800d07a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800d07e:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800d082:	f7ff fa29 	bl	800c4d8 <USBD_LL_DataOutStage>
}
 800d086:	bd08      	pop	{r3, pc}

0800d088 <HAL_PCD_DataInStageCallback>:
{
 800d088:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d08a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800d08e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800d092:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d094:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800d098:	f7ff fa5a 	bl	800c550 <USBD_LL_DataInStage>
}
 800d09c:	bd08      	pop	{r3, pc}

0800d09e <HAL_PCD_SOFCallback>:
{
 800d09e:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d0a0:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800d0a4:	f7ff fafa 	bl	800c69c <USBD_LL_SOF>
}
 800d0a8:	bd08      	pop	{r3, pc}

0800d0aa <HAL_PCD_ResetCallback>:
{
 800d0aa:	b510      	push	{r4, lr}
 800d0ac:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d0ae:	6883      	ldr	r3, [r0, #8]
 800d0b0:	2b02      	cmp	r3, #2
 800d0b2:	d109      	bne.n	800d0c8 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d0b4:	2101      	movs	r1, #1
 800d0b6:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800d0ba:	f7ff fad5 	bl	800c668 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d0be:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800d0c2:	f7ff faa4 	bl	800c60e <USBD_LL_Reset>
}
 800d0c6:	bd10      	pop	{r4, pc}
    Error_Handler();
 800d0c8:	f7f4 ff56 	bl	8001f78 <Error_Handler>
 800d0cc:	e7f2      	b.n	800d0b4 <HAL_PCD_ResetCallback+0xa>
	...

0800d0d0 <HAL_PCD_SuspendCallback>:
{
 800d0d0:	b510      	push	{r4, lr}
 800d0d2:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d0d4:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800d0d8:	f7ff fac9 	bl	800c66e <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800d0dc:	69a3      	ldr	r3, [r4, #24]
 800d0de:	b123      	cbz	r3, 800d0ea <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d0e0:	4a02      	ldr	r2, [pc, #8]	; (800d0ec <HAL_PCD_SuspendCallback+0x1c>)
 800d0e2:	6913      	ldr	r3, [r2, #16]
 800d0e4:	f043 0306 	orr.w	r3, r3, #6
 800d0e8:	6113      	str	r3, [r2, #16]
}
 800d0ea:	bd10      	pop	{r4, pc}
 800d0ec:	e000ed00 	.word	0xe000ed00

0800d0f0 <HAL_PCD_ResumeCallback>:
{
 800d0f0:	b510      	push	{r4, lr}
 800d0f2:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 800d0f4:	6983      	ldr	r3, [r0, #24]
 800d0f6:	b923      	cbnz	r3, 800d102 <HAL_PCD_ResumeCallback+0x12>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d0f8:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800d0fc:	f7ff fac1 	bl	800c682 <USBD_LL_Resume>
}
 800d100:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d102:	4a04      	ldr	r2, [pc, #16]	; (800d114 <HAL_PCD_ResumeCallback+0x24>)
 800d104:	6913      	ldr	r3, [r2, #16]
 800d106:	f023 0306 	bic.w	r3, r3, #6
 800d10a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d10c:	f7ff ff74 	bl	800cff8 <SystemClockConfig_Resume>
 800d110:	e7f2      	b.n	800d0f8 <HAL_PCD_ResumeCallback+0x8>
 800d112:	bf00      	nop
 800d114:	e000ed00 	.word	0xe000ed00

0800d118 <USBD_LL_Init>:
{
 800d118:	b510      	push	{r4, lr}
 800d11a:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800d11c:	481e      	ldr	r0, [pc, #120]	; (800d198 <USBD_LL_Init+0x80>)
 800d11e:	f8c0 42f0 	str.w	r4, [r0, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 800d122:	f8c4 02c4 	str.w	r0, [r4, #708]	; 0x2c4
  hpcd_USB_FS.Instance = USB;
 800d126:	4b1d      	ldr	r3, [pc, #116]	; (800d19c <USBD_LL_Init+0x84>)
 800d128:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d12a:	2308      	movs	r3, #8
 800d12c:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d12e:	2302      	movs	r3, #2
 800d130:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d132:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d134:	2300      	movs	r3, #0
 800d136:	6143      	str	r3, [r0, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d138:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d13a:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d13c:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d13e:	f7fa fb0e 	bl	800775e <HAL_PCD_Init>
 800d142:	bb30      	cbnz	r0, 800d192 <USBD_LL_Init+0x7a>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d144:	2318      	movs	r3, #24
 800d146:	2200      	movs	r2, #0
 800d148:	4611      	mov	r1, r2
 800d14a:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800d14e:	f7fb fa40 	bl	80085d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d152:	2358      	movs	r3, #88	; 0x58
 800d154:	2200      	movs	r2, #0
 800d156:	2180      	movs	r1, #128	; 0x80
 800d158:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800d15c:	f7fb fa39 	bl	80085d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d160:	23c0      	movs	r3, #192	; 0xc0
 800d162:	2200      	movs	r2, #0
 800d164:	2181      	movs	r1, #129	; 0x81
 800d166:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800d16a:	f7fb fa32 	bl	80085d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d16e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d172:	2200      	movs	r2, #0
 800d174:	2101      	movs	r1, #1
 800d176:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800d17a:	f7fb fa2a 	bl	80085d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d17e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d182:	2200      	movs	r2, #0
 800d184:	2182      	movs	r1, #130	; 0x82
 800d186:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800d18a:	f7fb fa22 	bl	80085d2 <HAL_PCDEx_PMAConfig>
}
 800d18e:	2000      	movs	r0, #0
 800d190:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800d192:	f7f4 fef1 	bl	8001f78 <Error_Handler>
 800d196:	e7d5      	b.n	800d144 <USBD_LL_Init+0x2c>
 800d198:	200129ec 	.word	0x200129ec
 800d19c:	40005c00 	.word	0x40005c00

0800d1a0 <USBD_LL_Start>:
{
 800d1a0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800d1a2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d1a6:	f7fa fb4c 	bl	8007842 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1aa:	f7ff ff1b 	bl	800cfe4 <USBD_Get_USB_Status>
}
 800d1ae:	bd08      	pop	{r3, pc}

0800d1b0 <USBD_LL_OpenEP>:
{
 800d1b0:	b508      	push	{r3, lr}
 800d1b2:	4694      	mov	ip, r2
 800d1b4:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d1b6:	4663      	mov	r3, ip
 800d1b8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d1bc:	f7fb f8d2 	bl	8008364 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1c0:	f7ff ff10 	bl	800cfe4 <USBD_Get_USB_Status>
}
 800d1c4:	bd08      	pop	{r3, pc}

0800d1c6 <USBD_LL_CloseEP>:
{
 800d1c6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d1c8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d1cc:	f7fb f90c 	bl	80083e8 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1d0:	f7ff ff08 	bl	800cfe4 <USBD_Get_USB_Status>
}
 800d1d4:	bd08      	pop	{r3, pc}

0800d1d6 <USBD_LL_StallEP>:
{
 800d1d6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d1d8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d1dc:	f7fb f989 	bl	80084f2 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1e0:	f7ff ff00 	bl	800cfe4 <USBD_Get_USB_Status>
}
 800d1e4:	bd08      	pop	{r3, pc}

0800d1e6 <USBD_LL_ClearStallEP>:
{
 800d1e6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d1e8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d1ec:	f7fb f9b6 	bl	800855c <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1f0:	f7ff fef8 	bl	800cfe4 <USBD_Get_USB_Status>
}
 800d1f4:	bd08      	pop	{r3, pc}

0800d1f6 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d1f6:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 800d1fa:	f011 0f80 	tst.w	r1, #128	; 0x80
 800d1fe:	d108      	bne.n	800d212 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d200:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800d204:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d208:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d20c:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 800d210:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d212:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800d216:	3101      	adds	r1, #1
 800d218:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d21c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d220:	7888      	ldrb	r0, [r1, #2]
 800d222:	4770      	bx	lr

0800d224 <USBD_LL_SetUSBAddress>:
{
 800d224:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d226:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d22a:	f7fa ffae 	bl	800818a <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d22e:	f7ff fed9 	bl	800cfe4 <USBD_Get_USB_Status>
}
 800d232:	bd08      	pop	{r3, pc}

0800d234 <USBD_LL_Transmit>:
{
 800d234:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d236:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d23a:	f7fb f932 	bl	80084a2 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d23e:	f7ff fed1 	bl	800cfe4 <USBD_Get_USB_Status>
}
 800d242:	bd08      	pop	{r3, pc}

0800d244 <USBD_LL_PrepareReceive>:
{
 800d244:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d246:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d24a:	f7fb f8ff 	bl	800844c <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d24e:	f7ff fec9 	bl	800cfe4 <USBD_Get_USB_Status>
}
 800d252:	bd08      	pop	{r3, pc}

0800d254 <USBD_LL_GetRxDataSize>:
{
 800d254:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d256:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d25a:	f7fb f919 	bl	8008490 <HAL_PCD_EP_GetRxCount>
}
 800d25e:	bd08      	pop	{r3, pc}

0800d260 <HAL_PCDEx_LPM_Callback>:
{
 800d260:	b510      	push	{r4, lr}
 800d262:	4604      	mov	r4, r0
  switch (msg)
 800d264:	b111      	cbz	r1, 800d26c <HAL_PCDEx_LPM_Callback+0xc>
 800d266:	2901      	cmp	r1, #1
 800d268:	d00f      	beq.n	800d28a <HAL_PCDEx_LPM_Callback+0x2a>
}
 800d26a:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 800d26c:	6983      	ldr	r3, [r0, #24]
 800d26e:	b923      	cbnz	r3, 800d27a <HAL_PCDEx_LPM_Callback+0x1a>
    USBD_LL_Resume(hpcd->pData);
 800d270:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800d274:	f7ff fa05 	bl	800c682 <USBD_LL_Resume>
    break;
 800d278:	e7f7      	b.n	800d26a <HAL_PCDEx_LPM_Callback+0xa>
      SystemClockConfig_Resume();
 800d27a:	f7ff febd 	bl	800cff8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d27e:	4a09      	ldr	r2, [pc, #36]	; (800d2a4 <HAL_PCDEx_LPM_Callback+0x44>)
 800d280:	6913      	ldr	r3, [r2, #16]
 800d282:	f023 0306 	bic.w	r3, r3, #6
 800d286:	6113      	str	r3, [r2, #16]
 800d288:	e7f2      	b.n	800d270 <HAL_PCDEx_LPM_Callback+0x10>
    USBD_LL_Suspend(hpcd->pData);
 800d28a:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800d28e:	f7ff f9ee 	bl	800c66e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d292:	69a3      	ldr	r3, [r4, #24]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d0e8      	beq.n	800d26a <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d298:	4a02      	ldr	r2, [pc, #8]	; (800d2a4 <HAL_PCDEx_LPM_Callback+0x44>)
 800d29a:	6913      	ldr	r3, [r2, #16]
 800d29c:	f043 0306 	orr.w	r3, r3, #6
 800d2a0:	6113      	str	r3, [r2, #16]
}
 800d2a2:	e7e2      	b.n	800d26a <HAL_PCDEx_LPM_Callback+0xa>
 800d2a4:	e000ed00 	.word	0xe000ed00

0800d2a8 <USBD_static_malloc>:
}
 800d2a8:	4800      	ldr	r0, [pc, #0]	; (800d2ac <USBD_static_malloc+0x4>)
 800d2aa:	4770      	bx	lr
 800d2ac:	20012ce0 	.word	0x20012ce0

0800d2b0 <USBD_static_free>:
}
 800d2b0:	4770      	bx	lr
	...

0800d2b4 <round>:
 800d2b4:	ec51 0b10 	vmov	r0, r1, d0
 800d2b8:	b570      	push	{r4, r5, r6, lr}
 800d2ba:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800d2be:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800d2c2:	2c13      	cmp	r4, #19
 800d2c4:	ee10 2a10 	vmov	r2, s0
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	dc19      	bgt.n	800d300 <round+0x4c>
 800d2cc:	2c00      	cmp	r4, #0
 800d2ce:	da09      	bge.n	800d2e4 <round+0x30>
 800d2d0:	3401      	adds	r4, #1
 800d2d2:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800d2d6:	d103      	bne.n	800d2e0 <round+0x2c>
 800d2d8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d2dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	e028      	b.n	800d336 <round+0x82>
 800d2e4:	4d15      	ldr	r5, [pc, #84]	; (800d33c <round+0x88>)
 800d2e6:	4125      	asrs	r5, r4
 800d2e8:	ea01 0605 	and.w	r6, r1, r5
 800d2ec:	4332      	orrs	r2, r6
 800d2ee:	d00e      	beq.n	800d30e <round+0x5a>
 800d2f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d2f4:	fa42 f404 	asr.w	r4, r2, r4
 800d2f8:	4423      	add	r3, r4
 800d2fa:	ea23 0305 	bic.w	r3, r3, r5
 800d2fe:	e7ef      	b.n	800d2e0 <round+0x2c>
 800d300:	2c33      	cmp	r4, #51	; 0x33
 800d302:	dd07      	ble.n	800d314 <round+0x60>
 800d304:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800d308:	d101      	bne.n	800d30e <round+0x5a>
 800d30a:	f7f2 ffe7 	bl	80002dc <__adddf3>
 800d30e:	ec41 0b10 	vmov	d0, r0, r1
 800d312:	bd70      	pop	{r4, r5, r6, pc}
 800d314:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800d318:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d31c:	40f5      	lsrs	r5, r6
 800d31e:	4228      	tst	r0, r5
 800d320:	d0f5      	beq.n	800d30e <round+0x5a>
 800d322:	2101      	movs	r1, #1
 800d324:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800d328:	fa01 f404 	lsl.w	r4, r1, r4
 800d32c:	1912      	adds	r2, r2, r4
 800d32e:	bf28      	it	cs
 800d330:	185b      	addcs	r3, r3, r1
 800d332:	ea22 0205 	bic.w	r2, r2, r5
 800d336:	4619      	mov	r1, r3
 800d338:	4610      	mov	r0, r2
 800d33a:	e7e8      	b.n	800d30e <round+0x5a>
 800d33c:	000fffff 	.word	0x000fffff

0800d340 <exp>:
 800d340:	b538      	push	{r3, r4, r5, lr}
 800d342:	ed2d 8b02 	vpush	{d8}
 800d346:	ec55 4b10 	vmov	r4, r5, d0
 800d34a:	f000 f8dd 	bl	800d508 <__ieee754_exp>
 800d34e:	eeb0 8a40 	vmov.f32	s16, s0
 800d352:	eef0 8a60 	vmov.f32	s17, s1
 800d356:	ec45 4b10 	vmov	d0, r4, r5
 800d35a:	f001 f872 	bl	800e442 <finite>
 800d35e:	b168      	cbz	r0, 800d37c <exp+0x3c>
 800d360:	a317      	add	r3, pc, #92	; (adr r3, 800d3c0 <exp+0x80>)
 800d362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d366:	4620      	mov	r0, r4
 800d368:	4629      	mov	r1, r5
 800d36a:	f7f3 fbfd 	bl	8000b68 <__aeabi_dcmpgt>
 800d36e:	b160      	cbz	r0, 800d38a <exp+0x4a>
 800d370:	f001 f8f8 	bl	800e564 <__errno>
 800d374:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800d3b0 <exp+0x70>
 800d378:	2322      	movs	r3, #34	; 0x22
 800d37a:	6003      	str	r3, [r0, #0]
 800d37c:	eeb0 0a48 	vmov.f32	s0, s16
 800d380:	eef0 0a68 	vmov.f32	s1, s17
 800d384:	ecbd 8b02 	vpop	{d8}
 800d388:	bd38      	pop	{r3, r4, r5, pc}
 800d38a:	a30f      	add	r3, pc, #60	; (adr r3, 800d3c8 <exp+0x88>)
 800d38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d390:	4620      	mov	r0, r4
 800d392:	4629      	mov	r1, r5
 800d394:	f7f3 fbca 	bl	8000b2c <__aeabi_dcmplt>
 800d398:	2800      	cmp	r0, #0
 800d39a:	d0ef      	beq.n	800d37c <exp+0x3c>
 800d39c:	f001 f8e2 	bl	800e564 <__errno>
 800d3a0:	2322      	movs	r3, #34	; 0x22
 800d3a2:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800d3b8 <exp+0x78>
 800d3a6:	6003      	str	r3, [r0, #0]
 800d3a8:	e7e8      	b.n	800d37c <exp+0x3c>
 800d3aa:	bf00      	nop
 800d3ac:	f3af 8000 	nop.w
 800d3b0:	00000000 	.word	0x00000000
 800d3b4:	7ff00000 	.word	0x7ff00000
	...
 800d3c0:	fefa39ef 	.word	0xfefa39ef
 800d3c4:	40862e42 	.word	0x40862e42
 800d3c8:	d52d3051 	.word	0xd52d3051
 800d3cc:	c0874910 	.word	0xc0874910

0800d3d0 <pow>:
 800d3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3d2:	ed2d 8b02 	vpush	{d8}
 800d3d6:	eeb0 8a40 	vmov.f32	s16, s0
 800d3da:	eef0 8a60 	vmov.f32	s17, s1
 800d3de:	ec55 4b11 	vmov	r4, r5, d1
 800d3e2:	f000 fa15 	bl	800d810 <__ieee754_pow>
 800d3e6:	4622      	mov	r2, r4
 800d3e8:	462b      	mov	r3, r5
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	4629      	mov	r1, r5
 800d3ee:	ec57 6b10 	vmov	r6, r7, d0
 800d3f2:	f7f3 fbc3 	bl	8000b7c <__aeabi_dcmpun>
 800d3f6:	2800      	cmp	r0, #0
 800d3f8:	d13b      	bne.n	800d472 <pow+0xa2>
 800d3fa:	ec51 0b18 	vmov	r0, r1, d8
 800d3fe:	2200      	movs	r2, #0
 800d400:	2300      	movs	r3, #0
 800d402:	f7f3 fb89 	bl	8000b18 <__aeabi_dcmpeq>
 800d406:	b1b8      	cbz	r0, 800d438 <pow+0x68>
 800d408:	2200      	movs	r2, #0
 800d40a:	2300      	movs	r3, #0
 800d40c:	4620      	mov	r0, r4
 800d40e:	4629      	mov	r1, r5
 800d410:	f7f3 fb82 	bl	8000b18 <__aeabi_dcmpeq>
 800d414:	2800      	cmp	r0, #0
 800d416:	d146      	bne.n	800d4a6 <pow+0xd6>
 800d418:	ec45 4b10 	vmov	d0, r4, r5
 800d41c:	f001 f811 	bl	800e442 <finite>
 800d420:	b338      	cbz	r0, 800d472 <pow+0xa2>
 800d422:	2200      	movs	r2, #0
 800d424:	2300      	movs	r3, #0
 800d426:	4620      	mov	r0, r4
 800d428:	4629      	mov	r1, r5
 800d42a:	f7f3 fb7f 	bl	8000b2c <__aeabi_dcmplt>
 800d42e:	b300      	cbz	r0, 800d472 <pow+0xa2>
 800d430:	f001 f898 	bl	800e564 <__errno>
 800d434:	2322      	movs	r3, #34	; 0x22
 800d436:	e01b      	b.n	800d470 <pow+0xa0>
 800d438:	ec47 6b10 	vmov	d0, r6, r7
 800d43c:	f001 f801 	bl	800e442 <finite>
 800d440:	b9e0      	cbnz	r0, 800d47c <pow+0xac>
 800d442:	eeb0 0a48 	vmov.f32	s0, s16
 800d446:	eef0 0a68 	vmov.f32	s1, s17
 800d44a:	f000 fffa 	bl	800e442 <finite>
 800d44e:	b1a8      	cbz	r0, 800d47c <pow+0xac>
 800d450:	ec45 4b10 	vmov	d0, r4, r5
 800d454:	f000 fff5 	bl	800e442 <finite>
 800d458:	b180      	cbz	r0, 800d47c <pow+0xac>
 800d45a:	4632      	mov	r2, r6
 800d45c:	463b      	mov	r3, r7
 800d45e:	4630      	mov	r0, r6
 800d460:	4639      	mov	r1, r7
 800d462:	f7f3 fb8b 	bl	8000b7c <__aeabi_dcmpun>
 800d466:	2800      	cmp	r0, #0
 800d468:	d0e2      	beq.n	800d430 <pow+0x60>
 800d46a:	f001 f87b 	bl	800e564 <__errno>
 800d46e:	2321      	movs	r3, #33	; 0x21
 800d470:	6003      	str	r3, [r0, #0]
 800d472:	ecbd 8b02 	vpop	{d8}
 800d476:	ec47 6b10 	vmov	d0, r6, r7
 800d47a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d47c:	2200      	movs	r2, #0
 800d47e:	2300      	movs	r3, #0
 800d480:	4630      	mov	r0, r6
 800d482:	4639      	mov	r1, r7
 800d484:	f7f3 fb48 	bl	8000b18 <__aeabi_dcmpeq>
 800d488:	2800      	cmp	r0, #0
 800d48a:	d0f2      	beq.n	800d472 <pow+0xa2>
 800d48c:	eeb0 0a48 	vmov.f32	s0, s16
 800d490:	eef0 0a68 	vmov.f32	s1, s17
 800d494:	f000 ffd5 	bl	800e442 <finite>
 800d498:	2800      	cmp	r0, #0
 800d49a:	d0ea      	beq.n	800d472 <pow+0xa2>
 800d49c:	ec45 4b10 	vmov	d0, r4, r5
 800d4a0:	f000 ffcf 	bl	800e442 <finite>
 800d4a4:	e7c3      	b.n	800d42e <pow+0x5e>
 800d4a6:	4f01      	ldr	r7, [pc, #4]	; (800d4ac <pow+0xdc>)
 800d4a8:	2600      	movs	r6, #0
 800d4aa:	e7e2      	b.n	800d472 <pow+0xa2>
 800d4ac:	3ff00000 	.word	0x3ff00000

0800d4b0 <sqrt>:
 800d4b0:	b538      	push	{r3, r4, r5, lr}
 800d4b2:	ed2d 8b02 	vpush	{d8}
 800d4b6:	ec55 4b10 	vmov	r4, r5, d0
 800d4ba:	f000 fed7 	bl	800e26c <__ieee754_sqrt>
 800d4be:	4622      	mov	r2, r4
 800d4c0:	462b      	mov	r3, r5
 800d4c2:	4620      	mov	r0, r4
 800d4c4:	4629      	mov	r1, r5
 800d4c6:	eeb0 8a40 	vmov.f32	s16, s0
 800d4ca:	eef0 8a60 	vmov.f32	s17, s1
 800d4ce:	f7f3 fb55 	bl	8000b7c <__aeabi_dcmpun>
 800d4d2:	b990      	cbnz	r0, 800d4fa <sqrt+0x4a>
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	4620      	mov	r0, r4
 800d4da:	4629      	mov	r1, r5
 800d4dc:	f7f3 fb26 	bl	8000b2c <__aeabi_dcmplt>
 800d4e0:	b158      	cbz	r0, 800d4fa <sqrt+0x4a>
 800d4e2:	f001 f83f 	bl	800e564 <__errno>
 800d4e6:	2321      	movs	r3, #33	; 0x21
 800d4e8:	6003      	str	r3, [r0, #0]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	4610      	mov	r0, r2
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	f7f3 f9d3 	bl	800089c <__aeabi_ddiv>
 800d4f6:	ec41 0b18 	vmov	d8, r0, r1
 800d4fa:	eeb0 0a48 	vmov.f32	s0, s16
 800d4fe:	eef0 0a68 	vmov.f32	s1, s17
 800d502:	ecbd 8b02 	vpop	{d8}
 800d506:	bd38      	pop	{r3, r4, r5, pc}

0800d508 <__ieee754_exp>:
 800d508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d50c:	ec55 4b10 	vmov	r4, r5, d0
 800d510:	49b5      	ldr	r1, [pc, #724]	; (800d7e8 <__ieee754_exp+0x2e0>)
 800d512:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d516:	428b      	cmp	r3, r1
 800d518:	ed2d 8b04 	vpush	{d8-d9}
 800d51c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800d520:	d93d      	bls.n	800d59e <__ieee754_exp+0x96>
 800d522:	49b2      	ldr	r1, [pc, #712]	; (800d7ec <__ieee754_exp+0x2e4>)
 800d524:	428b      	cmp	r3, r1
 800d526:	d918      	bls.n	800d55a <__ieee754_exp+0x52>
 800d528:	ee10 3a10 	vmov	r3, s0
 800d52c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800d530:	4313      	orrs	r3, r2
 800d532:	d009      	beq.n	800d548 <__ieee754_exp+0x40>
 800d534:	ee10 2a10 	vmov	r2, s0
 800d538:	462b      	mov	r3, r5
 800d53a:	4620      	mov	r0, r4
 800d53c:	4629      	mov	r1, r5
 800d53e:	f7f2 fecd 	bl	80002dc <__adddf3>
 800d542:	4604      	mov	r4, r0
 800d544:	460d      	mov	r5, r1
 800d546:	e002      	b.n	800d54e <__ieee754_exp+0x46>
 800d548:	b10e      	cbz	r6, 800d54e <__ieee754_exp+0x46>
 800d54a:	2400      	movs	r4, #0
 800d54c:	2500      	movs	r5, #0
 800d54e:	ecbd 8b04 	vpop	{d8-d9}
 800d552:	ec45 4b10 	vmov	d0, r4, r5
 800d556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d55a:	a38d      	add	r3, pc, #564	; (adr r3, 800d790 <__ieee754_exp+0x288>)
 800d55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d560:	ee10 0a10 	vmov	r0, s0
 800d564:	4629      	mov	r1, r5
 800d566:	f7f3 faff 	bl	8000b68 <__aeabi_dcmpgt>
 800d56a:	4607      	mov	r7, r0
 800d56c:	b130      	cbz	r0, 800d57c <__ieee754_exp+0x74>
 800d56e:	ecbd 8b04 	vpop	{d8-d9}
 800d572:	2000      	movs	r0, #0
 800d574:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d578:	f000 bf51 	b.w	800e41e <__math_oflow>
 800d57c:	a386      	add	r3, pc, #536	; (adr r3, 800d798 <__ieee754_exp+0x290>)
 800d57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d582:	4620      	mov	r0, r4
 800d584:	4629      	mov	r1, r5
 800d586:	f7f3 fad1 	bl	8000b2c <__aeabi_dcmplt>
 800d58a:	2800      	cmp	r0, #0
 800d58c:	f000 808b 	beq.w	800d6a6 <__ieee754_exp+0x19e>
 800d590:	ecbd 8b04 	vpop	{d8-d9}
 800d594:	4638      	mov	r0, r7
 800d596:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d59a:	f000 bf37 	b.w	800e40c <__math_uflow>
 800d59e:	4a94      	ldr	r2, [pc, #592]	; (800d7f0 <__ieee754_exp+0x2e8>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	f240 80ac 	bls.w	800d6fe <__ieee754_exp+0x1f6>
 800d5a6:	4a93      	ldr	r2, [pc, #588]	; (800d7f4 <__ieee754_exp+0x2ec>)
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d87c      	bhi.n	800d6a6 <__ieee754_exp+0x19e>
 800d5ac:	4b92      	ldr	r3, [pc, #584]	; (800d7f8 <__ieee754_exp+0x2f0>)
 800d5ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b6:	ee10 0a10 	vmov	r0, s0
 800d5ba:	4629      	mov	r1, r5
 800d5bc:	f7f2 fe8c 	bl	80002d8 <__aeabi_dsub>
 800d5c0:	4b8e      	ldr	r3, [pc, #568]	; (800d7fc <__ieee754_exp+0x2f4>)
 800d5c2:	00f7      	lsls	r7, r6, #3
 800d5c4:	443b      	add	r3, r7
 800d5c6:	ed93 7b00 	vldr	d7, [r3]
 800d5ca:	f1c6 0a01 	rsb	sl, r6, #1
 800d5ce:	4680      	mov	r8, r0
 800d5d0:	4689      	mov	r9, r1
 800d5d2:	ebaa 0a06 	sub.w	sl, sl, r6
 800d5d6:	eeb0 8a47 	vmov.f32	s16, s14
 800d5da:	eef0 8a67 	vmov.f32	s17, s15
 800d5de:	ec53 2b18 	vmov	r2, r3, d8
 800d5e2:	4640      	mov	r0, r8
 800d5e4:	4649      	mov	r1, r9
 800d5e6:	f7f2 fe77 	bl	80002d8 <__aeabi_dsub>
 800d5ea:	4604      	mov	r4, r0
 800d5ec:	460d      	mov	r5, r1
 800d5ee:	4622      	mov	r2, r4
 800d5f0:	462b      	mov	r3, r5
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	4629      	mov	r1, r5
 800d5f6:	f7f3 f827 	bl	8000648 <__aeabi_dmul>
 800d5fa:	a369      	add	r3, pc, #420	; (adr r3, 800d7a0 <__ieee754_exp+0x298>)
 800d5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d600:	4606      	mov	r6, r0
 800d602:	460f      	mov	r7, r1
 800d604:	f7f3 f820 	bl	8000648 <__aeabi_dmul>
 800d608:	a367      	add	r3, pc, #412	; (adr r3, 800d7a8 <__ieee754_exp+0x2a0>)
 800d60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60e:	f7f2 fe63 	bl	80002d8 <__aeabi_dsub>
 800d612:	4632      	mov	r2, r6
 800d614:	463b      	mov	r3, r7
 800d616:	f7f3 f817 	bl	8000648 <__aeabi_dmul>
 800d61a:	a365      	add	r3, pc, #404	; (adr r3, 800d7b0 <__ieee754_exp+0x2a8>)
 800d61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d620:	f7f2 fe5c 	bl	80002dc <__adddf3>
 800d624:	4632      	mov	r2, r6
 800d626:	463b      	mov	r3, r7
 800d628:	f7f3 f80e 	bl	8000648 <__aeabi_dmul>
 800d62c:	a362      	add	r3, pc, #392	; (adr r3, 800d7b8 <__ieee754_exp+0x2b0>)
 800d62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d632:	f7f2 fe51 	bl	80002d8 <__aeabi_dsub>
 800d636:	4632      	mov	r2, r6
 800d638:	463b      	mov	r3, r7
 800d63a:	f7f3 f805 	bl	8000648 <__aeabi_dmul>
 800d63e:	a360      	add	r3, pc, #384	; (adr r3, 800d7c0 <__ieee754_exp+0x2b8>)
 800d640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d644:	f7f2 fe4a 	bl	80002dc <__adddf3>
 800d648:	4632      	mov	r2, r6
 800d64a:	463b      	mov	r3, r7
 800d64c:	f7f2 fffc 	bl	8000648 <__aeabi_dmul>
 800d650:	4602      	mov	r2, r0
 800d652:	460b      	mov	r3, r1
 800d654:	4620      	mov	r0, r4
 800d656:	4629      	mov	r1, r5
 800d658:	f7f2 fe3e 	bl	80002d8 <__aeabi_dsub>
 800d65c:	4602      	mov	r2, r0
 800d65e:	460b      	mov	r3, r1
 800d660:	4606      	mov	r6, r0
 800d662:	460f      	mov	r7, r1
 800d664:	4620      	mov	r0, r4
 800d666:	4629      	mov	r1, r5
 800d668:	f7f2 ffee 	bl	8000648 <__aeabi_dmul>
 800d66c:	ec41 0b19 	vmov	d9, r0, r1
 800d670:	f1ba 0f00 	cmp.w	sl, #0
 800d674:	d15d      	bne.n	800d732 <__ieee754_exp+0x22a>
 800d676:	2200      	movs	r2, #0
 800d678:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d67c:	4630      	mov	r0, r6
 800d67e:	4639      	mov	r1, r7
 800d680:	f7f2 fe2a 	bl	80002d8 <__aeabi_dsub>
 800d684:	4602      	mov	r2, r0
 800d686:	460b      	mov	r3, r1
 800d688:	ec51 0b19 	vmov	r0, r1, d9
 800d68c:	f7f3 f906 	bl	800089c <__aeabi_ddiv>
 800d690:	4622      	mov	r2, r4
 800d692:	462b      	mov	r3, r5
 800d694:	f7f2 fe20 	bl	80002d8 <__aeabi_dsub>
 800d698:	4602      	mov	r2, r0
 800d69a:	460b      	mov	r3, r1
 800d69c:	2000      	movs	r0, #0
 800d69e:	4958      	ldr	r1, [pc, #352]	; (800d800 <__ieee754_exp+0x2f8>)
 800d6a0:	f7f2 fe1a 	bl	80002d8 <__aeabi_dsub>
 800d6a4:	e74d      	b.n	800d542 <__ieee754_exp+0x3a>
 800d6a6:	4857      	ldr	r0, [pc, #348]	; (800d804 <__ieee754_exp+0x2fc>)
 800d6a8:	a347      	add	r3, pc, #284	; (adr r3, 800d7c8 <__ieee754_exp+0x2c0>)
 800d6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ae:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800d6b2:	4629      	mov	r1, r5
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	f7f2 ffc7 	bl	8000648 <__aeabi_dmul>
 800d6ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d6be:	f7f2 fe0d 	bl	80002dc <__adddf3>
 800d6c2:	f7f3 fa71 	bl	8000ba8 <__aeabi_d2iz>
 800d6c6:	4682      	mov	sl, r0
 800d6c8:	f7f2 ff54 	bl	8000574 <__aeabi_i2d>
 800d6cc:	a340      	add	r3, pc, #256	; (adr r3, 800d7d0 <__ieee754_exp+0x2c8>)
 800d6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d2:	4606      	mov	r6, r0
 800d6d4:	460f      	mov	r7, r1
 800d6d6:	f7f2 ffb7 	bl	8000648 <__aeabi_dmul>
 800d6da:	4602      	mov	r2, r0
 800d6dc:	460b      	mov	r3, r1
 800d6de:	4620      	mov	r0, r4
 800d6e0:	4629      	mov	r1, r5
 800d6e2:	f7f2 fdf9 	bl	80002d8 <__aeabi_dsub>
 800d6e6:	a33c      	add	r3, pc, #240	; (adr r3, 800d7d8 <__ieee754_exp+0x2d0>)
 800d6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ec:	4680      	mov	r8, r0
 800d6ee:	4689      	mov	r9, r1
 800d6f0:	4630      	mov	r0, r6
 800d6f2:	4639      	mov	r1, r7
 800d6f4:	f7f2 ffa8 	bl	8000648 <__aeabi_dmul>
 800d6f8:	ec41 0b18 	vmov	d8, r0, r1
 800d6fc:	e76f      	b.n	800d5de <__ieee754_exp+0xd6>
 800d6fe:	4a42      	ldr	r2, [pc, #264]	; (800d808 <__ieee754_exp+0x300>)
 800d700:	4293      	cmp	r3, r2
 800d702:	d811      	bhi.n	800d728 <__ieee754_exp+0x220>
 800d704:	a336      	add	r3, pc, #216	; (adr r3, 800d7e0 <__ieee754_exp+0x2d8>)
 800d706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d70a:	ee10 0a10 	vmov	r0, s0
 800d70e:	4629      	mov	r1, r5
 800d710:	f7f2 fde4 	bl	80002dc <__adddf3>
 800d714:	4b3a      	ldr	r3, [pc, #232]	; (800d800 <__ieee754_exp+0x2f8>)
 800d716:	2200      	movs	r2, #0
 800d718:	f7f3 fa26 	bl	8000b68 <__aeabi_dcmpgt>
 800d71c:	b138      	cbz	r0, 800d72e <__ieee754_exp+0x226>
 800d71e:	4b38      	ldr	r3, [pc, #224]	; (800d800 <__ieee754_exp+0x2f8>)
 800d720:	2200      	movs	r2, #0
 800d722:	4620      	mov	r0, r4
 800d724:	4629      	mov	r1, r5
 800d726:	e70a      	b.n	800d53e <__ieee754_exp+0x36>
 800d728:	f04f 0a00 	mov.w	sl, #0
 800d72c:	e75f      	b.n	800d5ee <__ieee754_exp+0xe6>
 800d72e:	4682      	mov	sl, r0
 800d730:	e75d      	b.n	800d5ee <__ieee754_exp+0xe6>
 800d732:	4632      	mov	r2, r6
 800d734:	463b      	mov	r3, r7
 800d736:	2000      	movs	r0, #0
 800d738:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d73c:	f7f2 fdcc 	bl	80002d8 <__aeabi_dsub>
 800d740:	4602      	mov	r2, r0
 800d742:	460b      	mov	r3, r1
 800d744:	ec51 0b19 	vmov	r0, r1, d9
 800d748:	f7f3 f8a8 	bl	800089c <__aeabi_ddiv>
 800d74c:	4602      	mov	r2, r0
 800d74e:	460b      	mov	r3, r1
 800d750:	ec51 0b18 	vmov	r0, r1, d8
 800d754:	f7f2 fdc0 	bl	80002d8 <__aeabi_dsub>
 800d758:	4642      	mov	r2, r8
 800d75a:	464b      	mov	r3, r9
 800d75c:	f7f2 fdbc 	bl	80002d8 <__aeabi_dsub>
 800d760:	4602      	mov	r2, r0
 800d762:	460b      	mov	r3, r1
 800d764:	2000      	movs	r0, #0
 800d766:	4926      	ldr	r1, [pc, #152]	; (800d800 <__ieee754_exp+0x2f8>)
 800d768:	f7f2 fdb6 	bl	80002d8 <__aeabi_dsub>
 800d76c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800d770:	4592      	cmp	sl, r2
 800d772:	db02      	blt.n	800d77a <__ieee754_exp+0x272>
 800d774:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800d778:	e6e3      	b.n	800d542 <__ieee754_exp+0x3a>
 800d77a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800d77e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800d782:	2200      	movs	r2, #0
 800d784:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800d788:	f7f2 ff5e 	bl	8000648 <__aeabi_dmul>
 800d78c:	e6d9      	b.n	800d542 <__ieee754_exp+0x3a>
 800d78e:	bf00      	nop
 800d790:	fefa39ef 	.word	0xfefa39ef
 800d794:	40862e42 	.word	0x40862e42
 800d798:	d52d3051 	.word	0xd52d3051
 800d79c:	c0874910 	.word	0xc0874910
 800d7a0:	72bea4d0 	.word	0x72bea4d0
 800d7a4:	3e663769 	.word	0x3e663769
 800d7a8:	c5d26bf1 	.word	0xc5d26bf1
 800d7ac:	3ebbbd41 	.word	0x3ebbbd41
 800d7b0:	af25de2c 	.word	0xaf25de2c
 800d7b4:	3f11566a 	.word	0x3f11566a
 800d7b8:	16bebd93 	.word	0x16bebd93
 800d7bc:	3f66c16c 	.word	0x3f66c16c
 800d7c0:	5555553e 	.word	0x5555553e
 800d7c4:	3fc55555 	.word	0x3fc55555
 800d7c8:	652b82fe 	.word	0x652b82fe
 800d7cc:	3ff71547 	.word	0x3ff71547
 800d7d0:	fee00000 	.word	0xfee00000
 800d7d4:	3fe62e42 	.word	0x3fe62e42
 800d7d8:	35793c76 	.word	0x35793c76
 800d7dc:	3dea39ef 	.word	0x3dea39ef
 800d7e0:	8800759c 	.word	0x8800759c
 800d7e4:	7e37e43c 	.word	0x7e37e43c
 800d7e8:	40862e41 	.word	0x40862e41
 800d7ec:	7fefffff 	.word	0x7fefffff
 800d7f0:	3fd62e42 	.word	0x3fd62e42
 800d7f4:	3ff0a2b1 	.word	0x3ff0a2b1
 800d7f8:	08013d00 	.word	0x08013d00
 800d7fc:	08013d10 	.word	0x08013d10
 800d800:	3ff00000 	.word	0x3ff00000
 800d804:	08013cf0 	.word	0x08013cf0
 800d808:	3defffff 	.word	0x3defffff
 800d80c:	00000000 	.word	0x00000000

0800d810 <__ieee754_pow>:
 800d810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d814:	ed2d 8b06 	vpush	{d8-d10}
 800d818:	b089      	sub	sp, #36	; 0x24
 800d81a:	ed8d 1b00 	vstr	d1, [sp]
 800d81e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d822:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d826:	ea58 0102 	orrs.w	r1, r8, r2
 800d82a:	ec57 6b10 	vmov	r6, r7, d0
 800d82e:	d115      	bne.n	800d85c <__ieee754_pow+0x4c>
 800d830:	19b3      	adds	r3, r6, r6
 800d832:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d836:	4152      	adcs	r2, r2
 800d838:	4299      	cmp	r1, r3
 800d83a:	4b89      	ldr	r3, [pc, #548]	; (800da60 <__ieee754_pow+0x250>)
 800d83c:	4193      	sbcs	r3, r2
 800d83e:	f080 84d2 	bcs.w	800e1e6 <__ieee754_pow+0x9d6>
 800d842:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d846:	4630      	mov	r0, r6
 800d848:	4639      	mov	r1, r7
 800d84a:	f7f2 fd47 	bl	80002dc <__adddf3>
 800d84e:	ec41 0b10 	vmov	d0, r0, r1
 800d852:	b009      	add	sp, #36	; 0x24
 800d854:	ecbd 8b06 	vpop	{d8-d10}
 800d858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d85c:	4b81      	ldr	r3, [pc, #516]	; (800da64 <__ieee754_pow+0x254>)
 800d85e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d862:	429c      	cmp	r4, r3
 800d864:	ee10 aa10 	vmov	sl, s0
 800d868:	463d      	mov	r5, r7
 800d86a:	dc06      	bgt.n	800d87a <__ieee754_pow+0x6a>
 800d86c:	d101      	bne.n	800d872 <__ieee754_pow+0x62>
 800d86e:	2e00      	cmp	r6, #0
 800d870:	d1e7      	bne.n	800d842 <__ieee754_pow+0x32>
 800d872:	4598      	cmp	r8, r3
 800d874:	dc01      	bgt.n	800d87a <__ieee754_pow+0x6a>
 800d876:	d10f      	bne.n	800d898 <__ieee754_pow+0x88>
 800d878:	b172      	cbz	r2, 800d898 <__ieee754_pow+0x88>
 800d87a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d87e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d882:	ea55 050a 	orrs.w	r5, r5, sl
 800d886:	d1dc      	bne.n	800d842 <__ieee754_pow+0x32>
 800d888:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d88c:	18db      	adds	r3, r3, r3
 800d88e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d892:	4152      	adcs	r2, r2
 800d894:	429d      	cmp	r5, r3
 800d896:	e7d0      	b.n	800d83a <__ieee754_pow+0x2a>
 800d898:	2d00      	cmp	r5, #0
 800d89a:	da3b      	bge.n	800d914 <__ieee754_pow+0x104>
 800d89c:	4b72      	ldr	r3, [pc, #456]	; (800da68 <__ieee754_pow+0x258>)
 800d89e:	4598      	cmp	r8, r3
 800d8a0:	dc51      	bgt.n	800d946 <__ieee754_pow+0x136>
 800d8a2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d8a6:	4598      	cmp	r8, r3
 800d8a8:	f340 84ac 	ble.w	800e204 <__ieee754_pow+0x9f4>
 800d8ac:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d8b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d8b4:	2b14      	cmp	r3, #20
 800d8b6:	dd0f      	ble.n	800d8d8 <__ieee754_pow+0xc8>
 800d8b8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d8bc:	fa22 f103 	lsr.w	r1, r2, r3
 800d8c0:	fa01 f303 	lsl.w	r3, r1, r3
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	f040 849d 	bne.w	800e204 <__ieee754_pow+0x9f4>
 800d8ca:	f001 0101 	and.w	r1, r1, #1
 800d8ce:	f1c1 0302 	rsb	r3, r1, #2
 800d8d2:	9304      	str	r3, [sp, #16]
 800d8d4:	b182      	cbz	r2, 800d8f8 <__ieee754_pow+0xe8>
 800d8d6:	e05f      	b.n	800d998 <__ieee754_pow+0x188>
 800d8d8:	2a00      	cmp	r2, #0
 800d8da:	d15b      	bne.n	800d994 <__ieee754_pow+0x184>
 800d8dc:	f1c3 0314 	rsb	r3, r3, #20
 800d8e0:	fa48 f103 	asr.w	r1, r8, r3
 800d8e4:	fa01 f303 	lsl.w	r3, r1, r3
 800d8e8:	4543      	cmp	r3, r8
 800d8ea:	f040 8488 	bne.w	800e1fe <__ieee754_pow+0x9ee>
 800d8ee:	f001 0101 	and.w	r1, r1, #1
 800d8f2:	f1c1 0302 	rsb	r3, r1, #2
 800d8f6:	9304      	str	r3, [sp, #16]
 800d8f8:	4b5c      	ldr	r3, [pc, #368]	; (800da6c <__ieee754_pow+0x25c>)
 800d8fa:	4598      	cmp	r8, r3
 800d8fc:	d132      	bne.n	800d964 <__ieee754_pow+0x154>
 800d8fe:	f1b9 0f00 	cmp.w	r9, #0
 800d902:	f280 8478 	bge.w	800e1f6 <__ieee754_pow+0x9e6>
 800d906:	4959      	ldr	r1, [pc, #356]	; (800da6c <__ieee754_pow+0x25c>)
 800d908:	4632      	mov	r2, r6
 800d90a:	463b      	mov	r3, r7
 800d90c:	2000      	movs	r0, #0
 800d90e:	f7f2 ffc5 	bl	800089c <__aeabi_ddiv>
 800d912:	e79c      	b.n	800d84e <__ieee754_pow+0x3e>
 800d914:	2300      	movs	r3, #0
 800d916:	9304      	str	r3, [sp, #16]
 800d918:	2a00      	cmp	r2, #0
 800d91a:	d13d      	bne.n	800d998 <__ieee754_pow+0x188>
 800d91c:	4b51      	ldr	r3, [pc, #324]	; (800da64 <__ieee754_pow+0x254>)
 800d91e:	4598      	cmp	r8, r3
 800d920:	d1ea      	bne.n	800d8f8 <__ieee754_pow+0xe8>
 800d922:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d926:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d92a:	ea53 030a 	orrs.w	r3, r3, sl
 800d92e:	f000 845a 	beq.w	800e1e6 <__ieee754_pow+0x9d6>
 800d932:	4b4f      	ldr	r3, [pc, #316]	; (800da70 <__ieee754_pow+0x260>)
 800d934:	429c      	cmp	r4, r3
 800d936:	dd08      	ble.n	800d94a <__ieee754_pow+0x13a>
 800d938:	f1b9 0f00 	cmp.w	r9, #0
 800d93c:	f2c0 8457 	blt.w	800e1ee <__ieee754_pow+0x9de>
 800d940:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d944:	e783      	b.n	800d84e <__ieee754_pow+0x3e>
 800d946:	2302      	movs	r3, #2
 800d948:	e7e5      	b.n	800d916 <__ieee754_pow+0x106>
 800d94a:	f1b9 0f00 	cmp.w	r9, #0
 800d94e:	f04f 0000 	mov.w	r0, #0
 800d952:	f04f 0100 	mov.w	r1, #0
 800d956:	f6bf af7a 	bge.w	800d84e <__ieee754_pow+0x3e>
 800d95a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d95e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d962:	e774      	b.n	800d84e <__ieee754_pow+0x3e>
 800d964:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d968:	d106      	bne.n	800d978 <__ieee754_pow+0x168>
 800d96a:	4632      	mov	r2, r6
 800d96c:	463b      	mov	r3, r7
 800d96e:	4630      	mov	r0, r6
 800d970:	4639      	mov	r1, r7
 800d972:	f7f2 fe69 	bl	8000648 <__aeabi_dmul>
 800d976:	e76a      	b.n	800d84e <__ieee754_pow+0x3e>
 800d978:	4b3e      	ldr	r3, [pc, #248]	; (800da74 <__ieee754_pow+0x264>)
 800d97a:	4599      	cmp	r9, r3
 800d97c:	d10c      	bne.n	800d998 <__ieee754_pow+0x188>
 800d97e:	2d00      	cmp	r5, #0
 800d980:	db0a      	blt.n	800d998 <__ieee754_pow+0x188>
 800d982:	ec47 6b10 	vmov	d0, r6, r7
 800d986:	b009      	add	sp, #36	; 0x24
 800d988:	ecbd 8b06 	vpop	{d8-d10}
 800d98c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d990:	f000 bc6c 	b.w	800e26c <__ieee754_sqrt>
 800d994:	2300      	movs	r3, #0
 800d996:	9304      	str	r3, [sp, #16]
 800d998:	ec47 6b10 	vmov	d0, r6, r7
 800d99c:	f000 fd48 	bl	800e430 <fabs>
 800d9a0:	ec51 0b10 	vmov	r0, r1, d0
 800d9a4:	f1ba 0f00 	cmp.w	sl, #0
 800d9a8:	d129      	bne.n	800d9fe <__ieee754_pow+0x1ee>
 800d9aa:	b124      	cbz	r4, 800d9b6 <__ieee754_pow+0x1a6>
 800d9ac:	4b2f      	ldr	r3, [pc, #188]	; (800da6c <__ieee754_pow+0x25c>)
 800d9ae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d123      	bne.n	800d9fe <__ieee754_pow+0x1ee>
 800d9b6:	f1b9 0f00 	cmp.w	r9, #0
 800d9ba:	da05      	bge.n	800d9c8 <__ieee754_pow+0x1b8>
 800d9bc:	4602      	mov	r2, r0
 800d9be:	460b      	mov	r3, r1
 800d9c0:	2000      	movs	r0, #0
 800d9c2:	492a      	ldr	r1, [pc, #168]	; (800da6c <__ieee754_pow+0x25c>)
 800d9c4:	f7f2 ff6a 	bl	800089c <__aeabi_ddiv>
 800d9c8:	2d00      	cmp	r5, #0
 800d9ca:	f6bf af40 	bge.w	800d84e <__ieee754_pow+0x3e>
 800d9ce:	9b04      	ldr	r3, [sp, #16]
 800d9d0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d9d4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d9d8:	4323      	orrs	r3, r4
 800d9da:	d108      	bne.n	800d9ee <__ieee754_pow+0x1de>
 800d9dc:	4602      	mov	r2, r0
 800d9de:	460b      	mov	r3, r1
 800d9e0:	4610      	mov	r0, r2
 800d9e2:	4619      	mov	r1, r3
 800d9e4:	f7f2 fc78 	bl	80002d8 <__aeabi_dsub>
 800d9e8:	4602      	mov	r2, r0
 800d9ea:	460b      	mov	r3, r1
 800d9ec:	e78f      	b.n	800d90e <__ieee754_pow+0xfe>
 800d9ee:	9b04      	ldr	r3, [sp, #16]
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	f47f af2c 	bne.w	800d84e <__ieee754_pow+0x3e>
 800d9f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9fa:	4619      	mov	r1, r3
 800d9fc:	e727      	b.n	800d84e <__ieee754_pow+0x3e>
 800d9fe:	0feb      	lsrs	r3, r5, #31
 800da00:	3b01      	subs	r3, #1
 800da02:	9306      	str	r3, [sp, #24]
 800da04:	9a06      	ldr	r2, [sp, #24]
 800da06:	9b04      	ldr	r3, [sp, #16]
 800da08:	4313      	orrs	r3, r2
 800da0a:	d102      	bne.n	800da12 <__ieee754_pow+0x202>
 800da0c:	4632      	mov	r2, r6
 800da0e:	463b      	mov	r3, r7
 800da10:	e7e6      	b.n	800d9e0 <__ieee754_pow+0x1d0>
 800da12:	4b19      	ldr	r3, [pc, #100]	; (800da78 <__ieee754_pow+0x268>)
 800da14:	4598      	cmp	r8, r3
 800da16:	f340 80fb 	ble.w	800dc10 <__ieee754_pow+0x400>
 800da1a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800da1e:	4598      	cmp	r8, r3
 800da20:	4b13      	ldr	r3, [pc, #76]	; (800da70 <__ieee754_pow+0x260>)
 800da22:	dd0c      	ble.n	800da3e <__ieee754_pow+0x22e>
 800da24:	429c      	cmp	r4, r3
 800da26:	dc0f      	bgt.n	800da48 <__ieee754_pow+0x238>
 800da28:	f1b9 0f00 	cmp.w	r9, #0
 800da2c:	da0f      	bge.n	800da4e <__ieee754_pow+0x23e>
 800da2e:	2000      	movs	r0, #0
 800da30:	b009      	add	sp, #36	; 0x24
 800da32:	ecbd 8b06 	vpop	{d8-d10}
 800da36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da3a:	f000 bcf0 	b.w	800e41e <__math_oflow>
 800da3e:	429c      	cmp	r4, r3
 800da40:	dbf2      	blt.n	800da28 <__ieee754_pow+0x218>
 800da42:	4b0a      	ldr	r3, [pc, #40]	; (800da6c <__ieee754_pow+0x25c>)
 800da44:	429c      	cmp	r4, r3
 800da46:	dd19      	ble.n	800da7c <__ieee754_pow+0x26c>
 800da48:	f1b9 0f00 	cmp.w	r9, #0
 800da4c:	dcef      	bgt.n	800da2e <__ieee754_pow+0x21e>
 800da4e:	2000      	movs	r0, #0
 800da50:	b009      	add	sp, #36	; 0x24
 800da52:	ecbd 8b06 	vpop	{d8-d10}
 800da56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da5a:	f000 bcd7 	b.w	800e40c <__math_uflow>
 800da5e:	bf00      	nop
 800da60:	fff00000 	.word	0xfff00000
 800da64:	7ff00000 	.word	0x7ff00000
 800da68:	433fffff 	.word	0x433fffff
 800da6c:	3ff00000 	.word	0x3ff00000
 800da70:	3fefffff 	.word	0x3fefffff
 800da74:	3fe00000 	.word	0x3fe00000
 800da78:	41e00000 	.word	0x41e00000
 800da7c:	4b60      	ldr	r3, [pc, #384]	; (800dc00 <__ieee754_pow+0x3f0>)
 800da7e:	2200      	movs	r2, #0
 800da80:	f7f2 fc2a 	bl	80002d8 <__aeabi_dsub>
 800da84:	a354      	add	r3, pc, #336	; (adr r3, 800dbd8 <__ieee754_pow+0x3c8>)
 800da86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da8a:	4604      	mov	r4, r0
 800da8c:	460d      	mov	r5, r1
 800da8e:	f7f2 fddb 	bl	8000648 <__aeabi_dmul>
 800da92:	a353      	add	r3, pc, #332	; (adr r3, 800dbe0 <__ieee754_pow+0x3d0>)
 800da94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da98:	4606      	mov	r6, r0
 800da9a:	460f      	mov	r7, r1
 800da9c:	4620      	mov	r0, r4
 800da9e:	4629      	mov	r1, r5
 800daa0:	f7f2 fdd2 	bl	8000648 <__aeabi_dmul>
 800daa4:	4b57      	ldr	r3, [pc, #348]	; (800dc04 <__ieee754_pow+0x3f4>)
 800daa6:	4682      	mov	sl, r0
 800daa8:	468b      	mov	fp, r1
 800daaa:	2200      	movs	r2, #0
 800daac:	4620      	mov	r0, r4
 800daae:	4629      	mov	r1, r5
 800dab0:	f7f2 fdca 	bl	8000648 <__aeabi_dmul>
 800dab4:	4602      	mov	r2, r0
 800dab6:	460b      	mov	r3, r1
 800dab8:	a14b      	add	r1, pc, #300	; (adr r1, 800dbe8 <__ieee754_pow+0x3d8>)
 800daba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dabe:	f7f2 fc0b 	bl	80002d8 <__aeabi_dsub>
 800dac2:	4622      	mov	r2, r4
 800dac4:	462b      	mov	r3, r5
 800dac6:	f7f2 fdbf 	bl	8000648 <__aeabi_dmul>
 800daca:	4602      	mov	r2, r0
 800dacc:	460b      	mov	r3, r1
 800dace:	2000      	movs	r0, #0
 800dad0:	494d      	ldr	r1, [pc, #308]	; (800dc08 <__ieee754_pow+0x3f8>)
 800dad2:	f7f2 fc01 	bl	80002d8 <__aeabi_dsub>
 800dad6:	4622      	mov	r2, r4
 800dad8:	4680      	mov	r8, r0
 800dada:	4689      	mov	r9, r1
 800dadc:	462b      	mov	r3, r5
 800dade:	4620      	mov	r0, r4
 800dae0:	4629      	mov	r1, r5
 800dae2:	f7f2 fdb1 	bl	8000648 <__aeabi_dmul>
 800dae6:	4602      	mov	r2, r0
 800dae8:	460b      	mov	r3, r1
 800daea:	4640      	mov	r0, r8
 800daec:	4649      	mov	r1, r9
 800daee:	f7f2 fdab 	bl	8000648 <__aeabi_dmul>
 800daf2:	a33f      	add	r3, pc, #252	; (adr r3, 800dbf0 <__ieee754_pow+0x3e0>)
 800daf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf8:	f7f2 fda6 	bl	8000648 <__aeabi_dmul>
 800dafc:	4602      	mov	r2, r0
 800dafe:	460b      	mov	r3, r1
 800db00:	4650      	mov	r0, sl
 800db02:	4659      	mov	r1, fp
 800db04:	f7f2 fbe8 	bl	80002d8 <__aeabi_dsub>
 800db08:	4602      	mov	r2, r0
 800db0a:	460b      	mov	r3, r1
 800db0c:	4680      	mov	r8, r0
 800db0e:	4689      	mov	r9, r1
 800db10:	4630      	mov	r0, r6
 800db12:	4639      	mov	r1, r7
 800db14:	f7f2 fbe2 	bl	80002dc <__adddf3>
 800db18:	2000      	movs	r0, #0
 800db1a:	4632      	mov	r2, r6
 800db1c:	463b      	mov	r3, r7
 800db1e:	4604      	mov	r4, r0
 800db20:	460d      	mov	r5, r1
 800db22:	f7f2 fbd9 	bl	80002d8 <__aeabi_dsub>
 800db26:	4602      	mov	r2, r0
 800db28:	460b      	mov	r3, r1
 800db2a:	4640      	mov	r0, r8
 800db2c:	4649      	mov	r1, r9
 800db2e:	f7f2 fbd3 	bl	80002d8 <__aeabi_dsub>
 800db32:	9b04      	ldr	r3, [sp, #16]
 800db34:	9a06      	ldr	r2, [sp, #24]
 800db36:	3b01      	subs	r3, #1
 800db38:	4313      	orrs	r3, r2
 800db3a:	4682      	mov	sl, r0
 800db3c:	468b      	mov	fp, r1
 800db3e:	f040 81e7 	bne.w	800df10 <__ieee754_pow+0x700>
 800db42:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800dbf8 <__ieee754_pow+0x3e8>
 800db46:	eeb0 8a47 	vmov.f32	s16, s14
 800db4a:	eef0 8a67 	vmov.f32	s17, s15
 800db4e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800db52:	2600      	movs	r6, #0
 800db54:	4632      	mov	r2, r6
 800db56:	463b      	mov	r3, r7
 800db58:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db5c:	f7f2 fbbc 	bl	80002d8 <__aeabi_dsub>
 800db60:	4622      	mov	r2, r4
 800db62:	462b      	mov	r3, r5
 800db64:	f7f2 fd70 	bl	8000648 <__aeabi_dmul>
 800db68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db6c:	4680      	mov	r8, r0
 800db6e:	4689      	mov	r9, r1
 800db70:	4650      	mov	r0, sl
 800db72:	4659      	mov	r1, fp
 800db74:	f7f2 fd68 	bl	8000648 <__aeabi_dmul>
 800db78:	4602      	mov	r2, r0
 800db7a:	460b      	mov	r3, r1
 800db7c:	4640      	mov	r0, r8
 800db7e:	4649      	mov	r1, r9
 800db80:	f7f2 fbac 	bl	80002dc <__adddf3>
 800db84:	4632      	mov	r2, r6
 800db86:	463b      	mov	r3, r7
 800db88:	4680      	mov	r8, r0
 800db8a:	4689      	mov	r9, r1
 800db8c:	4620      	mov	r0, r4
 800db8e:	4629      	mov	r1, r5
 800db90:	f7f2 fd5a 	bl	8000648 <__aeabi_dmul>
 800db94:	460b      	mov	r3, r1
 800db96:	4604      	mov	r4, r0
 800db98:	460d      	mov	r5, r1
 800db9a:	4602      	mov	r2, r0
 800db9c:	4649      	mov	r1, r9
 800db9e:	4640      	mov	r0, r8
 800dba0:	f7f2 fb9c 	bl	80002dc <__adddf3>
 800dba4:	4b19      	ldr	r3, [pc, #100]	; (800dc0c <__ieee754_pow+0x3fc>)
 800dba6:	4299      	cmp	r1, r3
 800dba8:	ec45 4b19 	vmov	d9, r4, r5
 800dbac:	4606      	mov	r6, r0
 800dbae:	460f      	mov	r7, r1
 800dbb0:	468b      	mov	fp, r1
 800dbb2:	f340 82f1 	ble.w	800e198 <__ieee754_pow+0x988>
 800dbb6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800dbba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800dbbe:	4303      	orrs	r3, r0
 800dbc0:	f000 81e4 	beq.w	800df8c <__ieee754_pow+0x77c>
 800dbc4:	ec51 0b18 	vmov	r0, r1, d8
 800dbc8:	2200      	movs	r2, #0
 800dbca:	2300      	movs	r3, #0
 800dbcc:	f7f2 ffae 	bl	8000b2c <__aeabi_dcmplt>
 800dbd0:	3800      	subs	r0, #0
 800dbd2:	bf18      	it	ne
 800dbd4:	2001      	movne	r0, #1
 800dbd6:	e72b      	b.n	800da30 <__ieee754_pow+0x220>
 800dbd8:	60000000 	.word	0x60000000
 800dbdc:	3ff71547 	.word	0x3ff71547
 800dbe0:	f85ddf44 	.word	0xf85ddf44
 800dbe4:	3e54ae0b 	.word	0x3e54ae0b
 800dbe8:	55555555 	.word	0x55555555
 800dbec:	3fd55555 	.word	0x3fd55555
 800dbf0:	652b82fe 	.word	0x652b82fe
 800dbf4:	3ff71547 	.word	0x3ff71547
 800dbf8:	00000000 	.word	0x00000000
 800dbfc:	bff00000 	.word	0xbff00000
 800dc00:	3ff00000 	.word	0x3ff00000
 800dc04:	3fd00000 	.word	0x3fd00000
 800dc08:	3fe00000 	.word	0x3fe00000
 800dc0c:	408fffff 	.word	0x408fffff
 800dc10:	4bd5      	ldr	r3, [pc, #852]	; (800df68 <__ieee754_pow+0x758>)
 800dc12:	402b      	ands	r3, r5
 800dc14:	2200      	movs	r2, #0
 800dc16:	b92b      	cbnz	r3, 800dc24 <__ieee754_pow+0x414>
 800dc18:	4bd4      	ldr	r3, [pc, #848]	; (800df6c <__ieee754_pow+0x75c>)
 800dc1a:	f7f2 fd15 	bl	8000648 <__aeabi_dmul>
 800dc1e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800dc22:	460c      	mov	r4, r1
 800dc24:	1523      	asrs	r3, r4, #20
 800dc26:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dc2a:	4413      	add	r3, r2
 800dc2c:	9305      	str	r3, [sp, #20]
 800dc2e:	4bd0      	ldr	r3, [pc, #832]	; (800df70 <__ieee754_pow+0x760>)
 800dc30:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800dc34:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800dc38:	429c      	cmp	r4, r3
 800dc3a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800dc3e:	dd08      	ble.n	800dc52 <__ieee754_pow+0x442>
 800dc40:	4bcc      	ldr	r3, [pc, #816]	; (800df74 <__ieee754_pow+0x764>)
 800dc42:	429c      	cmp	r4, r3
 800dc44:	f340 8162 	ble.w	800df0c <__ieee754_pow+0x6fc>
 800dc48:	9b05      	ldr	r3, [sp, #20]
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	9305      	str	r3, [sp, #20]
 800dc4e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800dc52:	2400      	movs	r4, #0
 800dc54:	00e3      	lsls	r3, r4, #3
 800dc56:	9307      	str	r3, [sp, #28]
 800dc58:	4bc7      	ldr	r3, [pc, #796]	; (800df78 <__ieee754_pow+0x768>)
 800dc5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc5e:	ed93 7b00 	vldr	d7, [r3]
 800dc62:	4629      	mov	r1, r5
 800dc64:	ec53 2b17 	vmov	r2, r3, d7
 800dc68:	eeb0 9a47 	vmov.f32	s18, s14
 800dc6c:	eef0 9a67 	vmov.f32	s19, s15
 800dc70:	4682      	mov	sl, r0
 800dc72:	f7f2 fb31 	bl	80002d8 <__aeabi_dsub>
 800dc76:	4652      	mov	r2, sl
 800dc78:	4606      	mov	r6, r0
 800dc7a:	460f      	mov	r7, r1
 800dc7c:	462b      	mov	r3, r5
 800dc7e:	ec51 0b19 	vmov	r0, r1, d9
 800dc82:	f7f2 fb2b 	bl	80002dc <__adddf3>
 800dc86:	4602      	mov	r2, r0
 800dc88:	460b      	mov	r3, r1
 800dc8a:	2000      	movs	r0, #0
 800dc8c:	49bb      	ldr	r1, [pc, #748]	; (800df7c <__ieee754_pow+0x76c>)
 800dc8e:	f7f2 fe05 	bl	800089c <__aeabi_ddiv>
 800dc92:	ec41 0b1a 	vmov	d10, r0, r1
 800dc96:	4602      	mov	r2, r0
 800dc98:	460b      	mov	r3, r1
 800dc9a:	4630      	mov	r0, r6
 800dc9c:	4639      	mov	r1, r7
 800dc9e:	f7f2 fcd3 	bl	8000648 <__aeabi_dmul>
 800dca2:	2300      	movs	r3, #0
 800dca4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dca8:	9302      	str	r3, [sp, #8]
 800dcaa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dcae:	46ab      	mov	fp, r5
 800dcb0:	106d      	asrs	r5, r5, #1
 800dcb2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800dcb6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800dcba:	ec41 0b18 	vmov	d8, r0, r1
 800dcbe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	4640      	mov	r0, r8
 800dcc6:	4649      	mov	r1, r9
 800dcc8:	4614      	mov	r4, r2
 800dcca:	461d      	mov	r5, r3
 800dccc:	f7f2 fcbc 	bl	8000648 <__aeabi_dmul>
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	4630      	mov	r0, r6
 800dcd6:	4639      	mov	r1, r7
 800dcd8:	f7f2 fafe 	bl	80002d8 <__aeabi_dsub>
 800dcdc:	ec53 2b19 	vmov	r2, r3, d9
 800dce0:	4606      	mov	r6, r0
 800dce2:	460f      	mov	r7, r1
 800dce4:	4620      	mov	r0, r4
 800dce6:	4629      	mov	r1, r5
 800dce8:	f7f2 faf6 	bl	80002d8 <__aeabi_dsub>
 800dcec:	4602      	mov	r2, r0
 800dcee:	460b      	mov	r3, r1
 800dcf0:	4650      	mov	r0, sl
 800dcf2:	4659      	mov	r1, fp
 800dcf4:	f7f2 faf0 	bl	80002d8 <__aeabi_dsub>
 800dcf8:	4642      	mov	r2, r8
 800dcfa:	464b      	mov	r3, r9
 800dcfc:	f7f2 fca4 	bl	8000648 <__aeabi_dmul>
 800dd00:	4602      	mov	r2, r0
 800dd02:	460b      	mov	r3, r1
 800dd04:	4630      	mov	r0, r6
 800dd06:	4639      	mov	r1, r7
 800dd08:	f7f2 fae6 	bl	80002d8 <__aeabi_dsub>
 800dd0c:	ec53 2b1a 	vmov	r2, r3, d10
 800dd10:	f7f2 fc9a 	bl	8000648 <__aeabi_dmul>
 800dd14:	ec53 2b18 	vmov	r2, r3, d8
 800dd18:	ec41 0b19 	vmov	d9, r0, r1
 800dd1c:	ec51 0b18 	vmov	r0, r1, d8
 800dd20:	f7f2 fc92 	bl	8000648 <__aeabi_dmul>
 800dd24:	a37c      	add	r3, pc, #496	; (adr r3, 800df18 <__ieee754_pow+0x708>)
 800dd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2a:	4604      	mov	r4, r0
 800dd2c:	460d      	mov	r5, r1
 800dd2e:	f7f2 fc8b 	bl	8000648 <__aeabi_dmul>
 800dd32:	a37b      	add	r3, pc, #492	; (adr r3, 800df20 <__ieee754_pow+0x710>)
 800dd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd38:	f7f2 fad0 	bl	80002dc <__adddf3>
 800dd3c:	4622      	mov	r2, r4
 800dd3e:	462b      	mov	r3, r5
 800dd40:	f7f2 fc82 	bl	8000648 <__aeabi_dmul>
 800dd44:	a378      	add	r3, pc, #480	; (adr r3, 800df28 <__ieee754_pow+0x718>)
 800dd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4a:	f7f2 fac7 	bl	80002dc <__adddf3>
 800dd4e:	4622      	mov	r2, r4
 800dd50:	462b      	mov	r3, r5
 800dd52:	f7f2 fc79 	bl	8000648 <__aeabi_dmul>
 800dd56:	a376      	add	r3, pc, #472	; (adr r3, 800df30 <__ieee754_pow+0x720>)
 800dd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5c:	f7f2 fabe 	bl	80002dc <__adddf3>
 800dd60:	4622      	mov	r2, r4
 800dd62:	462b      	mov	r3, r5
 800dd64:	f7f2 fc70 	bl	8000648 <__aeabi_dmul>
 800dd68:	a373      	add	r3, pc, #460	; (adr r3, 800df38 <__ieee754_pow+0x728>)
 800dd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd6e:	f7f2 fab5 	bl	80002dc <__adddf3>
 800dd72:	4622      	mov	r2, r4
 800dd74:	462b      	mov	r3, r5
 800dd76:	f7f2 fc67 	bl	8000648 <__aeabi_dmul>
 800dd7a:	a371      	add	r3, pc, #452	; (adr r3, 800df40 <__ieee754_pow+0x730>)
 800dd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd80:	f7f2 faac 	bl	80002dc <__adddf3>
 800dd84:	4622      	mov	r2, r4
 800dd86:	4606      	mov	r6, r0
 800dd88:	460f      	mov	r7, r1
 800dd8a:	462b      	mov	r3, r5
 800dd8c:	4620      	mov	r0, r4
 800dd8e:	4629      	mov	r1, r5
 800dd90:	f7f2 fc5a 	bl	8000648 <__aeabi_dmul>
 800dd94:	4602      	mov	r2, r0
 800dd96:	460b      	mov	r3, r1
 800dd98:	4630      	mov	r0, r6
 800dd9a:	4639      	mov	r1, r7
 800dd9c:	f7f2 fc54 	bl	8000648 <__aeabi_dmul>
 800dda0:	4642      	mov	r2, r8
 800dda2:	4604      	mov	r4, r0
 800dda4:	460d      	mov	r5, r1
 800dda6:	464b      	mov	r3, r9
 800dda8:	ec51 0b18 	vmov	r0, r1, d8
 800ddac:	f7f2 fa96 	bl	80002dc <__adddf3>
 800ddb0:	ec53 2b19 	vmov	r2, r3, d9
 800ddb4:	f7f2 fc48 	bl	8000648 <__aeabi_dmul>
 800ddb8:	4622      	mov	r2, r4
 800ddba:	462b      	mov	r3, r5
 800ddbc:	f7f2 fa8e 	bl	80002dc <__adddf3>
 800ddc0:	4642      	mov	r2, r8
 800ddc2:	4682      	mov	sl, r0
 800ddc4:	468b      	mov	fp, r1
 800ddc6:	464b      	mov	r3, r9
 800ddc8:	4640      	mov	r0, r8
 800ddca:	4649      	mov	r1, r9
 800ddcc:	f7f2 fc3c 	bl	8000648 <__aeabi_dmul>
 800ddd0:	4b6b      	ldr	r3, [pc, #428]	; (800df80 <__ieee754_pow+0x770>)
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	4606      	mov	r6, r0
 800ddd6:	460f      	mov	r7, r1
 800ddd8:	f7f2 fa80 	bl	80002dc <__adddf3>
 800dddc:	4652      	mov	r2, sl
 800ddde:	465b      	mov	r3, fp
 800dde0:	f7f2 fa7c 	bl	80002dc <__adddf3>
 800dde4:	2000      	movs	r0, #0
 800dde6:	4604      	mov	r4, r0
 800dde8:	460d      	mov	r5, r1
 800ddea:	4602      	mov	r2, r0
 800ddec:	460b      	mov	r3, r1
 800ddee:	4640      	mov	r0, r8
 800ddf0:	4649      	mov	r1, r9
 800ddf2:	f7f2 fc29 	bl	8000648 <__aeabi_dmul>
 800ddf6:	4b62      	ldr	r3, [pc, #392]	; (800df80 <__ieee754_pow+0x770>)
 800ddf8:	4680      	mov	r8, r0
 800ddfa:	4689      	mov	r9, r1
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	4620      	mov	r0, r4
 800de00:	4629      	mov	r1, r5
 800de02:	f7f2 fa69 	bl	80002d8 <__aeabi_dsub>
 800de06:	4632      	mov	r2, r6
 800de08:	463b      	mov	r3, r7
 800de0a:	f7f2 fa65 	bl	80002d8 <__aeabi_dsub>
 800de0e:	4602      	mov	r2, r0
 800de10:	460b      	mov	r3, r1
 800de12:	4650      	mov	r0, sl
 800de14:	4659      	mov	r1, fp
 800de16:	f7f2 fa5f 	bl	80002d8 <__aeabi_dsub>
 800de1a:	ec53 2b18 	vmov	r2, r3, d8
 800de1e:	f7f2 fc13 	bl	8000648 <__aeabi_dmul>
 800de22:	4622      	mov	r2, r4
 800de24:	4606      	mov	r6, r0
 800de26:	460f      	mov	r7, r1
 800de28:	462b      	mov	r3, r5
 800de2a:	ec51 0b19 	vmov	r0, r1, d9
 800de2e:	f7f2 fc0b 	bl	8000648 <__aeabi_dmul>
 800de32:	4602      	mov	r2, r0
 800de34:	460b      	mov	r3, r1
 800de36:	4630      	mov	r0, r6
 800de38:	4639      	mov	r1, r7
 800de3a:	f7f2 fa4f 	bl	80002dc <__adddf3>
 800de3e:	4606      	mov	r6, r0
 800de40:	460f      	mov	r7, r1
 800de42:	4602      	mov	r2, r0
 800de44:	460b      	mov	r3, r1
 800de46:	4640      	mov	r0, r8
 800de48:	4649      	mov	r1, r9
 800de4a:	f7f2 fa47 	bl	80002dc <__adddf3>
 800de4e:	a33e      	add	r3, pc, #248	; (adr r3, 800df48 <__ieee754_pow+0x738>)
 800de50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de54:	2000      	movs	r0, #0
 800de56:	4604      	mov	r4, r0
 800de58:	460d      	mov	r5, r1
 800de5a:	f7f2 fbf5 	bl	8000648 <__aeabi_dmul>
 800de5e:	4642      	mov	r2, r8
 800de60:	ec41 0b18 	vmov	d8, r0, r1
 800de64:	464b      	mov	r3, r9
 800de66:	4620      	mov	r0, r4
 800de68:	4629      	mov	r1, r5
 800de6a:	f7f2 fa35 	bl	80002d8 <__aeabi_dsub>
 800de6e:	4602      	mov	r2, r0
 800de70:	460b      	mov	r3, r1
 800de72:	4630      	mov	r0, r6
 800de74:	4639      	mov	r1, r7
 800de76:	f7f2 fa2f 	bl	80002d8 <__aeabi_dsub>
 800de7a:	a335      	add	r3, pc, #212	; (adr r3, 800df50 <__ieee754_pow+0x740>)
 800de7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de80:	f7f2 fbe2 	bl	8000648 <__aeabi_dmul>
 800de84:	a334      	add	r3, pc, #208	; (adr r3, 800df58 <__ieee754_pow+0x748>)
 800de86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8a:	4606      	mov	r6, r0
 800de8c:	460f      	mov	r7, r1
 800de8e:	4620      	mov	r0, r4
 800de90:	4629      	mov	r1, r5
 800de92:	f7f2 fbd9 	bl	8000648 <__aeabi_dmul>
 800de96:	4602      	mov	r2, r0
 800de98:	460b      	mov	r3, r1
 800de9a:	4630      	mov	r0, r6
 800de9c:	4639      	mov	r1, r7
 800de9e:	f7f2 fa1d 	bl	80002dc <__adddf3>
 800dea2:	9a07      	ldr	r2, [sp, #28]
 800dea4:	4b37      	ldr	r3, [pc, #220]	; (800df84 <__ieee754_pow+0x774>)
 800dea6:	4413      	add	r3, r2
 800dea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deac:	f7f2 fa16 	bl	80002dc <__adddf3>
 800deb0:	4682      	mov	sl, r0
 800deb2:	9805      	ldr	r0, [sp, #20]
 800deb4:	468b      	mov	fp, r1
 800deb6:	f7f2 fb5d 	bl	8000574 <__aeabi_i2d>
 800deba:	9a07      	ldr	r2, [sp, #28]
 800debc:	4b32      	ldr	r3, [pc, #200]	; (800df88 <__ieee754_pow+0x778>)
 800debe:	4413      	add	r3, r2
 800dec0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dec4:	4606      	mov	r6, r0
 800dec6:	460f      	mov	r7, r1
 800dec8:	4652      	mov	r2, sl
 800deca:	465b      	mov	r3, fp
 800decc:	ec51 0b18 	vmov	r0, r1, d8
 800ded0:	f7f2 fa04 	bl	80002dc <__adddf3>
 800ded4:	4642      	mov	r2, r8
 800ded6:	464b      	mov	r3, r9
 800ded8:	f7f2 fa00 	bl	80002dc <__adddf3>
 800dedc:	4632      	mov	r2, r6
 800dede:	463b      	mov	r3, r7
 800dee0:	f7f2 f9fc 	bl	80002dc <__adddf3>
 800dee4:	2000      	movs	r0, #0
 800dee6:	4632      	mov	r2, r6
 800dee8:	463b      	mov	r3, r7
 800deea:	4604      	mov	r4, r0
 800deec:	460d      	mov	r5, r1
 800deee:	f7f2 f9f3 	bl	80002d8 <__aeabi_dsub>
 800def2:	4642      	mov	r2, r8
 800def4:	464b      	mov	r3, r9
 800def6:	f7f2 f9ef 	bl	80002d8 <__aeabi_dsub>
 800defa:	ec53 2b18 	vmov	r2, r3, d8
 800defe:	f7f2 f9eb 	bl	80002d8 <__aeabi_dsub>
 800df02:	4602      	mov	r2, r0
 800df04:	460b      	mov	r3, r1
 800df06:	4650      	mov	r0, sl
 800df08:	4659      	mov	r1, fp
 800df0a:	e610      	b.n	800db2e <__ieee754_pow+0x31e>
 800df0c:	2401      	movs	r4, #1
 800df0e:	e6a1      	b.n	800dc54 <__ieee754_pow+0x444>
 800df10:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800df60 <__ieee754_pow+0x750>
 800df14:	e617      	b.n	800db46 <__ieee754_pow+0x336>
 800df16:	bf00      	nop
 800df18:	4a454eef 	.word	0x4a454eef
 800df1c:	3fca7e28 	.word	0x3fca7e28
 800df20:	93c9db65 	.word	0x93c9db65
 800df24:	3fcd864a 	.word	0x3fcd864a
 800df28:	a91d4101 	.word	0xa91d4101
 800df2c:	3fd17460 	.word	0x3fd17460
 800df30:	518f264d 	.word	0x518f264d
 800df34:	3fd55555 	.word	0x3fd55555
 800df38:	db6fabff 	.word	0xdb6fabff
 800df3c:	3fdb6db6 	.word	0x3fdb6db6
 800df40:	33333303 	.word	0x33333303
 800df44:	3fe33333 	.word	0x3fe33333
 800df48:	e0000000 	.word	0xe0000000
 800df4c:	3feec709 	.word	0x3feec709
 800df50:	dc3a03fd 	.word	0xdc3a03fd
 800df54:	3feec709 	.word	0x3feec709
 800df58:	145b01f5 	.word	0x145b01f5
 800df5c:	be3e2fe0 	.word	0xbe3e2fe0
 800df60:	00000000 	.word	0x00000000
 800df64:	3ff00000 	.word	0x3ff00000
 800df68:	7ff00000 	.word	0x7ff00000
 800df6c:	43400000 	.word	0x43400000
 800df70:	0003988e 	.word	0x0003988e
 800df74:	000bb679 	.word	0x000bb679
 800df78:	08013d20 	.word	0x08013d20
 800df7c:	3ff00000 	.word	0x3ff00000
 800df80:	40080000 	.word	0x40080000
 800df84:	08013d40 	.word	0x08013d40
 800df88:	08013d30 	.word	0x08013d30
 800df8c:	a3b5      	add	r3, pc, #724	; (adr r3, 800e264 <__ieee754_pow+0xa54>)
 800df8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df92:	4640      	mov	r0, r8
 800df94:	4649      	mov	r1, r9
 800df96:	f7f2 f9a1 	bl	80002dc <__adddf3>
 800df9a:	4622      	mov	r2, r4
 800df9c:	ec41 0b1a 	vmov	d10, r0, r1
 800dfa0:	462b      	mov	r3, r5
 800dfa2:	4630      	mov	r0, r6
 800dfa4:	4639      	mov	r1, r7
 800dfa6:	f7f2 f997 	bl	80002d8 <__aeabi_dsub>
 800dfaa:	4602      	mov	r2, r0
 800dfac:	460b      	mov	r3, r1
 800dfae:	ec51 0b1a 	vmov	r0, r1, d10
 800dfb2:	f7f2 fdd9 	bl	8000b68 <__aeabi_dcmpgt>
 800dfb6:	2800      	cmp	r0, #0
 800dfb8:	f47f ae04 	bne.w	800dbc4 <__ieee754_pow+0x3b4>
 800dfbc:	4aa4      	ldr	r2, [pc, #656]	; (800e250 <__ieee754_pow+0xa40>)
 800dfbe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	f340 8108 	ble.w	800e1d8 <__ieee754_pow+0x9c8>
 800dfc8:	151b      	asrs	r3, r3, #20
 800dfca:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800dfce:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800dfd2:	fa4a f303 	asr.w	r3, sl, r3
 800dfd6:	445b      	add	r3, fp
 800dfd8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800dfdc:	4e9d      	ldr	r6, [pc, #628]	; (800e254 <__ieee754_pow+0xa44>)
 800dfde:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800dfe2:	4116      	asrs	r6, r2
 800dfe4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800dfe8:	2000      	movs	r0, #0
 800dfea:	ea23 0106 	bic.w	r1, r3, r6
 800dfee:	f1c2 0214 	rsb	r2, r2, #20
 800dff2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800dff6:	fa4a fa02 	asr.w	sl, sl, r2
 800dffa:	f1bb 0f00 	cmp.w	fp, #0
 800dffe:	4602      	mov	r2, r0
 800e000:	460b      	mov	r3, r1
 800e002:	4620      	mov	r0, r4
 800e004:	4629      	mov	r1, r5
 800e006:	bfb8      	it	lt
 800e008:	f1ca 0a00 	rsblt	sl, sl, #0
 800e00c:	f7f2 f964 	bl	80002d8 <__aeabi_dsub>
 800e010:	ec41 0b19 	vmov	d9, r0, r1
 800e014:	4642      	mov	r2, r8
 800e016:	464b      	mov	r3, r9
 800e018:	ec51 0b19 	vmov	r0, r1, d9
 800e01c:	f7f2 f95e 	bl	80002dc <__adddf3>
 800e020:	a37b      	add	r3, pc, #492	; (adr r3, 800e210 <__ieee754_pow+0xa00>)
 800e022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e026:	2000      	movs	r0, #0
 800e028:	4604      	mov	r4, r0
 800e02a:	460d      	mov	r5, r1
 800e02c:	f7f2 fb0c 	bl	8000648 <__aeabi_dmul>
 800e030:	ec53 2b19 	vmov	r2, r3, d9
 800e034:	4606      	mov	r6, r0
 800e036:	460f      	mov	r7, r1
 800e038:	4620      	mov	r0, r4
 800e03a:	4629      	mov	r1, r5
 800e03c:	f7f2 f94c 	bl	80002d8 <__aeabi_dsub>
 800e040:	4602      	mov	r2, r0
 800e042:	460b      	mov	r3, r1
 800e044:	4640      	mov	r0, r8
 800e046:	4649      	mov	r1, r9
 800e048:	f7f2 f946 	bl	80002d8 <__aeabi_dsub>
 800e04c:	a372      	add	r3, pc, #456	; (adr r3, 800e218 <__ieee754_pow+0xa08>)
 800e04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e052:	f7f2 faf9 	bl	8000648 <__aeabi_dmul>
 800e056:	a372      	add	r3, pc, #456	; (adr r3, 800e220 <__ieee754_pow+0xa10>)
 800e058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e05c:	4680      	mov	r8, r0
 800e05e:	4689      	mov	r9, r1
 800e060:	4620      	mov	r0, r4
 800e062:	4629      	mov	r1, r5
 800e064:	f7f2 faf0 	bl	8000648 <__aeabi_dmul>
 800e068:	4602      	mov	r2, r0
 800e06a:	460b      	mov	r3, r1
 800e06c:	4640      	mov	r0, r8
 800e06e:	4649      	mov	r1, r9
 800e070:	f7f2 f934 	bl	80002dc <__adddf3>
 800e074:	4604      	mov	r4, r0
 800e076:	460d      	mov	r5, r1
 800e078:	4602      	mov	r2, r0
 800e07a:	460b      	mov	r3, r1
 800e07c:	4630      	mov	r0, r6
 800e07e:	4639      	mov	r1, r7
 800e080:	f7f2 f92c 	bl	80002dc <__adddf3>
 800e084:	4632      	mov	r2, r6
 800e086:	463b      	mov	r3, r7
 800e088:	4680      	mov	r8, r0
 800e08a:	4689      	mov	r9, r1
 800e08c:	f7f2 f924 	bl	80002d8 <__aeabi_dsub>
 800e090:	4602      	mov	r2, r0
 800e092:	460b      	mov	r3, r1
 800e094:	4620      	mov	r0, r4
 800e096:	4629      	mov	r1, r5
 800e098:	f7f2 f91e 	bl	80002d8 <__aeabi_dsub>
 800e09c:	4642      	mov	r2, r8
 800e09e:	4606      	mov	r6, r0
 800e0a0:	460f      	mov	r7, r1
 800e0a2:	464b      	mov	r3, r9
 800e0a4:	4640      	mov	r0, r8
 800e0a6:	4649      	mov	r1, r9
 800e0a8:	f7f2 face 	bl	8000648 <__aeabi_dmul>
 800e0ac:	a35e      	add	r3, pc, #376	; (adr r3, 800e228 <__ieee754_pow+0xa18>)
 800e0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b2:	4604      	mov	r4, r0
 800e0b4:	460d      	mov	r5, r1
 800e0b6:	f7f2 fac7 	bl	8000648 <__aeabi_dmul>
 800e0ba:	a35d      	add	r3, pc, #372	; (adr r3, 800e230 <__ieee754_pow+0xa20>)
 800e0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c0:	f7f2 f90a 	bl	80002d8 <__aeabi_dsub>
 800e0c4:	4622      	mov	r2, r4
 800e0c6:	462b      	mov	r3, r5
 800e0c8:	f7f2 fabe 	bl	8000648 <__aeabi_dmul>
 800e0cc:	a35a      	add	r3, pc, #360	; (adr r3, 800e238 <__ieee754_pow+0xa28>)
 800e0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d2:	f7f2 f903 	bl	80002dc <__adddf3>
 800e0d6:	4622      	mov	r2, r4
 800e0d8:	462b      	mov	r3, r5
 800e0da:	f7f2 fab5 	bl	8000648 <__aeabi_dmul>
 800e0de:	a358      	add	r3, pc, #352	; (adr r3, 800e240 <__ieee754_pow+0xa30>)
 800e0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e4:	f7f2 f8f8 	bl	80002d8 <__aeabi_dsub>
 800e0e8:	4622      	mov	r2, r4
 800e0ea:	462b      	mov	r3, r5
 800e0ec:	f7f2 faac 	bl	8000648 <__aeabi_dmul>
 800e0f0:	a355      	add	r3, pc, #340	; (adr r3, 800e248 <__ieee754_pow+0xa38>)
 800e0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f6:	f7f2 f8f1 	bl	80002dc <__adddf3>
 800e0fa:	4622      	mov	r2, r4
 800e0fc:	462b      	mov	r3, r5
 800e0fe:	f7f2 faa3 	bl	8000648 <__aeabi_dmul>
 800e102:	4602      	mov	r2, r0
 800e104:	460b      	mov	r3, r1
 800e106:	4640      	mov	r0, r8
 800e108:	4649      	mov	r1, r9
 800e10a:	f7f2 f8e5 	bl	80002d8 <__aeabi_dsub>
 800e10e:	4604      	mov	r4, r0
 800e110:	460d      	mov	r5, r1
 800e112:	4602      	mov	r2, r0
 800e114:	460b      	mov	r3, r1
 800e116:	4640      	mov	r0, r8
 800e118:	4649      	mov	r1, r9
 800e11a:	f7f2 fa95 	bl	8000648 <__aeabi_dmul>
 800e11e:	2200      	movs	r2, #0
 800e120:	ec41 0b19 	vmov	d9, r0, r1
 800e124:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e128:	4620      	mov	r0, r4
 800e12a:	4629      	mov	r1, r5
 800e12c:	f7f2 f8d4 	bl	80002d8 <__aeabi_dsub>
 800e130:	4602      	mov	r2, r0
 800e132:	460b      	mov	r3, r1
 800e134:	ec51 0b19 	vmov	r0, r1, d9
 800e138:	f7f2 fbb0 	bl	800089c <__aeabi_ddiv>
 800e13c:	4632      	mov	r2, r6
 800e13e:	4604      	mov	r4, r0
 800e140:	460d      	mov	r5, r1
 800e142:	463b      	mov	r3, r7
 800e144:	4640      	mov	r0, r8
 800e146:	4649      	mov	r1, r9
 800e148:	f7f2 fa7e 	bl	8000648 <__aeabi_dmul>
 800e14c:	4632      	mov	r2, r6
 800e14e:	463b      	mov	r3, r7
 800e150:	f7f2 f8c4 	bl	80002dc <__adddf3>
 800e154:	4602      	mov	r2, r0
 800e156:	460b      	mov	r3, r1
 800e158:	4620      	mov	r0, r4
 800e15a:	4629      	mov	r1, r5
 800e15c:	f7f2 f8bc 	bl	80002d8 <__aeabi_dsub>
 800e160:	4642      	mov	r2, r8
 800e162:	464b      	mov	r3, r9
 800e164:	f7f2 f8b8 	bl	80002d8 <__aeabi_dsub>
 800e168:	460b      	mov	r3, r1
 800e16a:	4602      	mov	r2, r0
 800e16c:	493a      	ldr	r1, [pc, #232]	; (800e258 <__ieee754_pow+0xa48>)
 800e16e:	2000      	movs	r0, #0
 800e170:	f7f2 f8b2 	bl	80002d8 <__aeabi_dsub>
 800e174:	ec41 0b10 	vmov	d0, r0, r1
 800e178:	ee10 3a90 	vmov	r3, s1
 800e17c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e180:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e184:	da2b      	bge.n	800e1de <__ieee754_pow+0x9ce>
 800e186:	4650      	mov	r0, sl
 800e188:	f000 f966 	bl	800e458 <scalbn>
 800e18c:	ec51 0b10 	vmov	r0, r1, d0
 800e190:	ec53 2b18 	vmov	r2, r3, d8
 800e194:	f7ff bbed 	b.w	800d972 <__ieee754_pow+0x162>
 800e198:	4b30      	ldr	r3, [pc, #192]	; (800e25c <__ieee754_pow+0xa4c>)
 800e19a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e19e:	429e      	cmp	r6, r3
 800e1a0:	f77f af0c 	ble.w	800dfbc <__ieee754_pow+0x7ac>
 800e1a4:	4b2e      	ldr	r3, [pc, #184]	; (800e260 <__ieee754_pow+0xa50>)
 800e1a6:	440b      	add	r3, r1
 800e1a8:	4303      	orrs	r3, r0
 800e1aa:	d009      	beq.n	800e1c0 <__ieee754_pow+0x9b0>
 800e1ac:	ec51 0b18 	vmov	r0, r1, d8
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	f7f2 fcba 	bl	8000b2c <__aeabi_dcmplt>
 800e1b8:	3800      	subs	r0, #0
 800e1ba:	bf18      	it	ne
 800e1bc:	2001      	movne	r0, #1
 800e1be:	e447      	b.n	800da50 <__ieee754_pow+0x240>
 800e1c0:	4622      	mov	r2, r4
 800e1c2:	462b      	mov	r3, r5
 800e1c4:	f7f2 f888 	bl	80002d8 <__aeabi_dsub>
 800e1c8:	4642      	mov	r2, r8
 800e1ca:	464b      	mov	r3, r9
 800e1cc:	f7f2 fcc2 	bl	8000b54 <__aeabi_dcmpge>
 800e1d0:	2800      	cmp	r0, #0
 800e1d2:	f43f aef3 	beq.w	800dfbc <__ieee754_pow+0x7ac>
 800e1d6:	e7e9      	b.n	800e1ac <__ieee754_pow+0x99c>
 800e1d8:	f04f 0a00 	mov.w	sl, #0
 800e1dc:	e71a      	b.n	800e014 <__ieee754_pow+0x804>
 800e1de:	ec51 0b10 	vmov	r0, r1, d0
 800e1e2:	4619      	mov	r1, r3
 800e1e4:	e7d4      	b.n	800e190 <__ieee754_pow+0x980>
 800e1e6:	491c      	ldr	r1, [pc, #112]	; (800e258 <__ieee754_pow+0xa48>)
 800e1e8:	2000      	movs	r0, #0
 800e1ea:	f7ff bb30 	b.w	800d84e <__ieee754_pow+0x3e>
 800e1ee:	2000      	movs	r0, #0
 800e1f0:	2100      	movs	r1, #0
 800e1f2:	f7ff bb2c 	b.w	800d84e <__ieee754_pow+0x3e>
 800e1f6:	4630      	mov	r0, r6
 800e1f8:	4639      	mov	r1, r7
 800e1fa:	f7ff bb28 	b.w	800d84e <__ieee754_pow+0x3e>
 800e1fe:	9204      	str	r2, [sp, #16]
 800e200:	f7ff bb7a 	b.w	800d8f8 <__ieee754_pow+0xe8>
 800e204:	2300      	movs	r3, #0
 800e206:	f7ff bb64 	b.w	800d8d2 <__ieee754_pow+0xc2>
 800e20a:	bf00      	nop
 800e20c:	f3af 8000 	nop.w
 800e210:	00000000 	.word	0x00000000
 800e214:	3fe62e43 	.word	0x3fe62e43
 800e218:	fefa39ef 	.word	0xfefa39ef
 800e21c:	3fe62e42 	.word	0x3fe62e42
 800e220:	0ca86c39 	.word	0x0ca86c39
 800e224:	be205c61 	.word	0xbe205c61
 800e228:	72bea4d0 	.word	0x72bea4d0
 800e22c:	3e663769 	.word	0x3e663769
 800e230:	c5d26bf1 	.word	0xc5d26bf1
 800e234:	3ebbbd41 	.word	0x3ebbbd41
 800e238:	af25de2c 	.word	0xaf25de2c
 800e23c:	3f11566a 	.word	0x3f11566a
 800e240:	16bebd93 	.word	0x16bebd93
 800e244:	3f66c16c 	.word	0x3f66c16c
 800e248:	5555553e 	.word	0x5555553e
 800e24c:	3fc55555 	.word	0x3fc55555
 800e250:	3fe00000 	.word	0x3fe00000
 800e254:	000fffff 	.word	0x000fffff
 800e258:	3ff00000 	.word	0x3ff00000
 800e25c:	4090cbff 	.word	0x4090cbff
 800e260:	3f6f3400 	.word	0x3f6f3400
 800e264:	652b82fe 	.word	0x652b82fe
 800e268:	3c971547 	.word	0x3c971547

0800e26c <__ieee754_sqrt>:
 800e26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e270:	ec55 4b10 	vmov	r4, r5, d0
 800e274:	4e55      	ldr	r6, [pc, #340]	; (800e3cc <__ieee754_sqrt+0x160>)
 800e276:	43ae      	bics	r6, r5
 800e278:	ee10 0a10 	vmov	r0, s0
 800e27c:	ee10 3a10 	vmov	r3, s0
 800e280:	462a      	mov	r2, r5
 800e282:	4629      	mov	r1, r5
 800e284:	d110      	bne.n	800e2a8 <__ieee754_sqrt+0x3c>
 800e286:	ee10 2a10 	vmov	r2, s0
 800e28a:	462b      	mov	r3, r5
 800e28c:	f7f2 f9dc 	bl	8000648 <__aeabi_dmul>
 800e290:	4602      	mov	r2, r0
 800e292:	460b      	mov	r3, r1
 800e294:	4620      	mov	r0, r4
 800e296:	4629      	mov	r1, r5
 800e298:	f7f2 f820 	bl	80002dc <__adddf3>
 800e29c:	4604      	mov	r4, r0
 800e29e:	460d      	mov	r5, r1
 800e2a0:	ec45 4b10 	vmov	d0, r4, r5
 800e2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2a8:	2d00      	cmp	r5, #0
 800e2aa:	dc10      	bgt.n	800e2ce <__ieee754_sqrt+0x62>
 800e2ac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e2b0:	4330      	orrs	r0, r6
 800e2b2:	d0f5      	beq.n	800e2a0 <__ieee754_sqrt+0x34>
 800e2b4:	b15d      	cbz	r5, 800e2ce <__ieee754_sqrt+0x62>
 800e2b6:	ee10 2a10 	vmov	r2, s0
 800e2ba:	462b      	mov	r3, r5
 800e2bc:	ee10 0a10 	vmov	r0, s0
 800e2c0:	f7f2 f80a 	bl	80002d8 <__aeabi_dsub>
 800e2c4:	4602      	mov	r2, r0
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	f7f2 fae8 	bl	800089c <__aeabi_ddiv>
 800e2cc:	e7e6      	b.n	800e29c <__ieee754_sqrt+0x30>
 800e2ce:	1512      	asrs	r2, r2, #20
 800e2d0:	d074      	beq.n	800e3bc <__ieee754_sqrt+0x150>
 800e2d2:	07d4      	lsls	r4, r2, #31
 800e2d4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e2d8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e2dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e2e0:	bf5e      	ittt	pl
 800e2e2:	0fda      	lsrpl	r2, r3, #31
 800e2e4:	005b      	lslpl	r3, r3, #1
 800e2e6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e2ea:	2400      	movs	r4, #0
 800e2ec:	0fda      	lsrs	r2, r3, #31
 800e2ee:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e2f2:	107f      	asrs	r7, r7, #1
 800e2f4:	005b      	lsls	r3, r3, #1
 800e2f6:	2516      	movs	r5, #22
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e2fe:	1886      	adds	r6, r0, r2
 800e300:	428e      	cmp	r6, r1
 800e302:	bfde      	ittt	le
 800e304:	1b89      	suble	r1, r1, r6
 800e306:	18b0      	addle	r0, r6, r2
 800e308:	18a4      	addle	r4, r4, r2
 800e30a:	0049      	lsls	r1, r1, #1
 800e30c:	3d01      	subs	r5, #1
 800e30e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e312:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e316:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e31a:	d1f0      	bne.n	800e2fe <__ieee754_sqrt+0x92>
 800e31c:	462a      	mov	r2, r5
 800e31e:	f04f 0e20 	mov.w	lr, #32
 800e322:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e326:	4281      	cmp	r1, r0
 800e328:	eb06 0c05 	add.w	ip, r6, r5
 800e32c:	dc02      	bgt.n	800e334 <__ieee754_sqrt+0xc8>
 800e32e:	d113      	bne.n	800e358 <__ieee754_sqrt+0xec>
 800e330:	459c      	cmp	ip, r3
 800e332:	d811      	bhi.n	800e358 <__ieee754_sqrt+0xec>
 800e334:	f1bc 0f00 	cmp.w	ip, #0
 800e338:	eb0c 0506 	add.w	r5, ip, r6
 800e33c:	da43      	bge.n	800e3c6 <__ieee754_sqrt+0x15a>
 800e33e:	2d00      	cmp	r5, #0
 800e340:	db41      	blt.n	800e3c6 <__ieee754_sqrt+0x15a>
 800e342:	f100 0801 	add.w	r8, r0, #1
 800e346:	1a09      	subs	r1, r1, r0
 800e348:	459c      	cmp	ip, r3
 800e34a:	bf88      	it	hi
 800e34c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800e350:	eba3 030c 	sub.w	r3, r3, ip
 800e354:	4432      	add	r2, r6
 800e356:	4640      	mov	r0, r8
 800e358:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e35c:	f1be 0e01 	subs.w	lr, lr, #1
 800e360:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e364:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e368:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e36c:	d1db      	bne.n	800e326 <__ieee754_sqrt+0xba>
 800e36e:	430b      	orrs	r3, r1
 800e370:	d006      	beq.n	800e380 <__ieee754_sqrt+0x114>
 800e372:	1c50      	adds	r0, r2, #1
 800e374:	bf13      	iteet	ne
 800e376:	3201      	addne	r2, #1
 800e378:	3401      	addeq	r4, #1
 800e37a:	4672      	moveq	r2, lr
 800e37c:	f022 0201 	bicne.w	r2, r2, #1
 800e380:	1063      	asrs	r3, r4, #1
 800e382:	0852      	lsrs	r2, r2, #1
 800e384:	07e1      	lsls	r1, r4, #31
 800e386:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e38a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e38e:	bf48      	it	mi
 800e390:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e394:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e398:	4614      	mov	r4, r2
 800e39a:	e781      	b.n	800e2a0 <__ieee754_sqrt+0x34>
 800e39c:	0ad9      	lsrs	r1, r3, #11
 800e39e:	3815      	subs	r0, #21
 800e3a0:	055b      	lsls	r3, r3, #21
 800e3a2:	2900      	cmp	r1, #0
 800e3a4:	d0fa      	beq.n	800e39c <__ieee754_sqrt+0x130>
 800e3a6:	02cd      	lsls	r5, r1, #11
 800e3a8:	d50a      	bpl.n	800e3c0 <__ieee754_sqrt+0x154>
 800e3aa:	f1c2 0420 	rsb	r4, r2, #32
 800e3ae:	fa23 f404 	lsr.w	r4, r3, r4
 800e3b2:	1e55      	subs	r5, r2, #1
 800e3b4:	4093      	lsls	r3, r2
 800e3b6:	4321      	orrs	r1, r4
 800e3b8:	1b42      	subs	r2, r0, r5
 800e3ba:	e78a      	b.n	800e2d2 <__ieee754_sqrt+0x66>
 800e3bc:	4610      	mov	r0, r2
 800e3be:	e7f0      	b.n	800e3a2 <__ieee754_sqrt+0x136>
 800e3c0:	0049      	lsls	r1, r1, #1
 800e3c2:	3201      	adds	r2, #1
 800e3c4:	e7ef      	b.n	800e3a6 <__ieee754_sqrt+0x13a>
 800e3c6:	4680      	mov	r8, r0
 800e3c8:	e7bd      	b.n	800e346 <__ieee754_sqrt+0xda>
 800e3ca:	bf00      	nop
 800e3cc:	7ff00000 	.word	0x7ff00000

0800e3d0 <with_errno>:
 800e3d0:	b570      	push	{r4, r5, r6, lr}
 800e3d2:	4604      	mov	r4, r0
 800e3d4:	460d      	mov	r5, r1
 800e3d6:	4616      	mov	r6, r2
 800e3d8:	f000 f8c4 	bl	800e564 <__errno>
 800e3dc:	4629      	mov	r1, r5
 800e3de:	6006      	str	r6, [r0, #0]
 800e3e0:	4620      	mov	r0, r4
 800e3e2:	bd70      	pop	{r4, r5, r6, pc}

0800e3e4 <xflow>:
 800e3e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e3e6:	4614      	mov	r4, r2
 800e3e8:	461d      	mov	r5, r3
 800e3ea:	b108      	cbz	r0, 800e3f0 <xflow+0xc>
 800e3ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e3f0:	e9cd 2300 	strd	r2, r3, [sp]
 800e3f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3f8:	4620      	mov	r0, r4
 800e3fa:	4629      	mov	r1, r5
 800e3fc:	f7f2 f924 	bl	8000648 <__aeabi_dmul>
 800e400:	2222      	movs	r2, #34	; 0x22
 800e402:	b003      	add	sp, #12
 800e404:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e408:	f7ff bfe2 	b.w	800e3d0 <with_errno>

0800e40c <__math_uflow>:
 800e40c:	b508      	push	{r3, lr}
 800e40e:	2200      	movs	r2, #0
 800e410:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e414:	f7ff ffe6 	bl	800e3e4 <xflow>
 800e418:	ec41 0b10 	vmov	d0, r0, r1
 800e41c:	bd08      	pop	{r3, pc}

0800e41e <__math_oflow>:
 800e41e:	b508      	push	{r3, lr}
 800e420:	2200      	movs	r2, #0
 800e422:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e426:	f7ff ffdd 	bl	800e3e4 <xflow>
 800e42a:	ec41 0b10 	vmov	d0, r0, r1
 800e42e:	bd08      	pop	{r3, pc}

0800e430 <fabs>:
 800e430:	ec51 0b10 	vmov	r0, r1, d0
 800e434:	ee10 2a10 	vmov	r2, s0
 800e438:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e43c:	ec43 2b10 	vmov	d0, r2, r3
 800e440:	4770      	bx	lr

0800e442 <finite>:
 800e442:	b082      	sub	sp, #8
 800e444:	ed8d 0b00 	vstr	d0, [sp]
 800e448:	9801      	ldr	r0, [sp, #4]
 800e44a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e44e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e452:	0fc0      	lsrs	r0, r0, #31
 800e454:	b002      	add	sp, #8
 800e456:	4770      	bx	lr

0800e458 <scalbn>:
 800e458:	b570      	push	{r4, r5, r6, lr}
 800e45a:	ec55 4b10 	vmov	r4, r5, d0
 800e45e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e462:	4606      	mov	r6, r0
 800e464:	462b      	mov	r3, r5
 800e466:	b99a      	cbnz	r2, 800e490 <scalbn+0x38>
 800e468:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e46c:	4323      	orrs	r3, r4
 800e46e:	d036      	beq.n	800e4de <scalbn+0x86>
 800e470:	4b39      	ldr	r3, [pc, #228]	; (800e558 <scalbn+0x100>)
 800e472:	4629      	mov	r1, r5
 800e474:	ee10 0a10 	vmov	r0, s0
 800e478:	2200      	movs	r2, #0
 800e47a:	f7f2 f8e5 	bl	8000648 <__aeabi_dmul>
 800e47e:	4b37      	ldr	r3, [pc, #220]	; (800e55c <scalbn+0x104>)
 800e480:	429e      	cmp	r6, r3
 800e482:	4604      	mov	r4, r0
 800e484:	460d      	mov	r5, r1
 800e486:	da10      	bge.n	800e4aa <scalbn+0x52>
 800e488:	a32b      	add	r3, pc, #172	; (adr r3, 800e538 <scalbn+0xe0>)
 800e48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e48e:	e03a      	b.n	800e506 <scalbn+0xae>
 800e490:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e494:	428a      	cmp	r2, r1
 800e496:	d10c      	bne.n	800e4b2 <scalbn+0x5a>
 800e498:	ee10 2a10 	vmov	r2, s0
 800e49c:	4620      	mov	r0, r4
 800e49e:	4629      	mov	r1, r5
 800e4a0:	f7f1 ff1c 	bl	80002dc <__adddf3>
 800e4a4:	4604      	mov	r4, r0
 800e4a6:	460d      	mov	r5, r1
 800e4a8:	e019      	b.n	800e4de <scalbn+0x86>
 800e4aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e4ae:	460b      	mov	r3, r1
 800e4b0:	3a36      	subs	r2, #54	; 0x36
 800e4b2:	4432      	add	r2, r6
 800e4b4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e4b8:	428a      	cmp	r2, r1
 800e4ba:	dd08      	ble.n	800e4ce <scalbn+0x76>
 800e4bc:	2d00      	cmp	r5, #0
 800e4be:	a120      	add	r1, pc, #128	; (adr r1, 800e540 <scalbn+0xe8>)
 800e4c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4c4:	da1c      	bge.n	800e500 <scalbn+0xa8>
 800e4c6:	a120      	add	r1, pc, #128	; (adr r1, 800e548 <scalbn+0xf0>)
 800e4c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4cc:	e018      	b.n	800e500 <scalbn+0xa8>
 800e4ce:	2a00      	cmp	r2, #0
 800e4d0:	dd08      	ble.n	800e4e4 <scalbn+0x8c>
 800e4d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e4d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e4da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e4de:	ec45 4b10 	vmov	d0, r4, r5
 800e4e2:	bd70      	pop	{r4, r5, r6, pc}
 800e4e4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e4e8:	da19      	bge.n	800e51e <scalbn+0xc6>
 800e4ea:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e4ee:	429e      	cmp	r6, r3
 800e4f0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e4f4:	dd0a      	ble.n	800e50c <scalbn+0xb4>
 800e4f6:	a112      	add	r1, pc, #72	; (adr r1, 800e540 <scalbn+0xe8>)
 800e4f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d1e2      	bne.n	800e4c6 <scalbn+0x6e>
 800e500:	a30f      	add	r3, pc, #60	; (adr r3, 800e540 <scalbn+0xe8>)
 800e502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e506:	f7f2 f89f 	bl	8000648 <__aeabi_dmul>
 800e50a:	e7cb      	b.n	800e4a4 <scalbn+0x4c>
 800e50c:	a10a      	add	r1, pc, #40	; (adr r1, 800e538 <scalbn+0xe0>)
 800e50e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d0b8      	beq.n	800e488 <scalbn+0x30>
 800e516:	a10e      	add	r1, pc, #56	; (adr r1, 800e550 <scalbn+0xf8>)
 800e518:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e51c:	e7b4      	b.n	800e488 <scalbn+0x30>
 800e51e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e522:	3236      	adds	r2, #54	; 0x36
 800e524:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e528:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e52c:	4620      	mov	r0, r4
 800e52e:	4b0c      	ldr	r3, [pc, #48]	; (800e560 <scalbn+0x108>)
 800e530:	2200      	movs	r2, #0
 800e532:	e7e8      	b.n	800e506 <scalbn+0xae>
 800e534:	f3af 8000 	nop.w
 800e538:	c2f8f359 	.word	0xc2f8f359
 800e53c:	01a56e1f 	.word	0x01a56e1f
 800e540:	8800759c 	.word	0x8800759c
 800e544:	7e37e43c 	.word	0x7e37e43c
 800e548:	8800759c 	.word	0x8800759c
 800e54c:	fe37e43c 	.word	0xfe37e43c
 800e550:	c2f8f359 	.word	0xc2f8f359
 800e554:	81a56e1f 	.word	0x81a56e1f
 800e558:	43500000 	.word	0x43500000
 800e55c:	ffff3cb0 	.word	0xffff3cb0
 800e560:	3c900000 	.word	0x3c900000

0800e564 <__errno>:
 800e564:	4b01      	ldr	r3, [pc, #4]	; (800e56c <__errno+0x8>)
 800e566:	6818      	ldr	r0, [r3, #0]
 800e568:	4770      	bx	lr
 800e56a:	bf00      	nop
 800e56c:	20000288 	.word	0x20000288

0800e570 <__libc_init_array>:
 800e570:	b570      	push	{r4, r5, r6, lr}
 800e572:	4d0d      	ldr	r5, [pc, #52]	; (800e5a8 <__libc_init_array+0x38>)
 800e574:	4c0d      	ldr	r4, [pc, #52]	; (800e5ac <__libc_init_array+0x3c>)
 800e576:	1b64      	subs	r4, r4, r5
 800e578:	10a4      	asrs	r4, r4, #2
 800e57a:	2600      	movs	r6, #0
 800e57c:	42a6      	cmp	r6, r4
 800e57e:	d109      	bne.n	800e594 <__libc_init_array+0x24>
 800e580:	4d0b      	ldr	r5, [pc, #44]	; (800e5b0 <__libc_init_array+0x40>)
 800e582:	4c0c      	ldr	r4, [pc, #48]	; (800e5b4 <__libc_init_array+0x44>)
 800e584:	f004 fd38 	bl	8012ff8 <_init>
 800e588:	1b64      	subs	r4, r4, r5
 800e58a:	10a4      	asrs	r4, r4, #2
 800e58c:	2600      	movs	r6, #0
 800e58e:	42a6      	cmp	r6, r4
 800e590:	d105      	bne.n	800e59e <__libc_init_array+0x2e>
 800e592:	bd70      	pop	{r4, r5, r6, pc}
 800e594:	f855 3b04 	ldr.w	r3, [r5], #4
 800e598:	4798      	blx	r3
 800e59a:	3601      	adds	r6, #1
 800e59c:	e7ee      	b.n	800e57c <__libc_init_array+0xc>
 800e59e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5a2:	4798      	blx	r3
 800e5a4:	3601      	adds	r6, #1
 800e5a6:	e7f2      	b.n	800e58e <__libc_init_array+0x1e>
 800e5a8:	08014258 	.word	0x08014258
 800e5ac:	08014258 	.word	0x08014258
 800e5b0:	08014258 	.word	0x08014258
 800e5b4:	0801425c 	.word	0x0801425c

0800e5b8 <malloc>:
 800e5b8:	4b02      	ldr	r3, [pc, #8]	; (800e5c4 <malloc+0xc>)
 800e5ba:	4601      	mov	r1, r0
 800e5bc:	6818      	ldr	r0, [r3, #0]
 800e5be:	f000 b87f 	b.w	800e6c0 <_malloc_r>
 800e5c2:	bf00      	nop
 800e5c4:	20000288 	.word	0x20000288

0800e5c8 <free>:
 800e5c8:	4b02      	ldr	r3, [pc, #8]	; (800e5d4 <free+0xc>)
 800e5ca:	4601      	mov	r1, r0
 800e5cc:	6818      	ldr	r0, [r3, #0]
 800e5ce:	f000 b80b 	b.w	800e5e8 <_free_r>
 800e5d2:	bf00      	nop
 800e5d4:	20000288 	.word	0x20000288

0800e5d8 <memset>:
 800e5d8:	4402      	add	r2, r0
 800e5da:	4603      	mov	r3, r0
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	d100      	bne.n	800e5e2 <memset+0xa>
 800e5e0:	4770      	bx	lr
 800e5e2:	f803 1b01 	strb.w	r1, [r3], #1
 800e5e6:	e7f9      	b.n	800e5dc <memset+0x4>

0800e5e8 <_free_r>:
 800e5e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e5ea:	2900      	cmp	r1, #0
 800e5ec:	d044      	beq.n	800e678 <_free_r+0x90>
 800e5ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5f2:	9001      	str	r0, [sp, #4]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	f1a1 0404 	sub.w	r4, r1, #4
 800e5fa:	bfb8      	it	lt
 800e5fc:	18e4      	addlt	r4, r4, r3
 800e5fe:	f003 f905 	bl	801180c <__malloc_lock>
 800e602:	4a1e      	ldr	r2, [pc, #120]	; (800e67c <_free_r+0x94>)
 800e604:	9801      	ldr	r0, [sp, #4]
 800e606:	6813      	ldr	r3, [r2, #0]
 800e608:	b933      	cbnz	r3, 800e618 <_free_r+0x30>
 800e60a:	6063      	str	r3, [r4, #4]
 800e60c:	6014      	str	r4, [r2, #0]
 800e60e:	b003      	add	sp, #12
 800e610:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e614:	f003 b900 	b.w	8011818 <__malloc_unlock>
 800e618:	42a3      	cmp	r3, r4
 800e61a:	d908      	bls.n	800e62e <_free_r+0x46>
 800e61c:	6825      	ldr	r5, [r4, #0]
 800e61e:	1961      	adds	r1, r4, r5
 800e620:	428b      	cmp	r3, r1
 800e622:	bf01      	itttt	eq
 800e624:	6819      	ldreq	r1, [r3, #0]
 800e626:	685b      	ldreq	r3, [r3, #4]
 800e628:	1949      	addeq	r1, r1, r5
 800e62a:	6021      	streq	r1, [r4, #0]
 800e62c:	e7ed      	b.n	800e60a <_free_r+0x22>
 800e62e:	461a      	mov	r2, r3
 800e630:	685b      	ldr	r3, [r3, #4]
 800e632:	b10b      	cbz	r3, 800e638 <_free_r+0x50>
 800e634:	42a3      	cmp	r3, r4
 800e636:	d9fa      	bls.n	800e62e <_free_r+0x46>
 800e638:	6811      	ldr	r1, [r2, #0]
 800e63a:	1855      	adds	r5, r2, r1
 800e63c:	42a5      	cmp	r5, r4
 800e63e:	d10b      	bne.n	800e658 <_free_r+0x70>
 800e640:	6824      	ldr	r4, [r4, #0]
 800e642:	4421      	add	r1, r4
 800e644:	1854      	adds	r4, r2, r1
 800e646:	42a3      	cmp	r3, r4
 800e648:	6011      	str	r1, [r2, #0]
 800e64a:	d1e0      	bne.n	800e60e <_free_r+0x26>
 800e64c:	681c      	ldr	r4, [r3, #0]
 800e64e:	685b      	ldr	r3, [r3, #4]
 800e650:	6053      	str	r3, [r2, #4]
 800e652:	4421      	add	r1, r4
 800e654:	6011      	str	r1, [r2, #0]
 800e656:	e7da      	b.n	800e60e <_free_r+0x26>
 800e658:	d902      	bls.n	800e660 <_free_r+0x78>
 800e65a:	230c      	movs	r3, #12
 800e65c:	6003      	str	r3, [r0, #0]
 800e65e:	e7d6      	b.n	800e60e <_free_r+0x26>
 800e660:	6825      	ldr	r5, [r4, #0]
 800e662:	1961      	adds	r1, r4, r5
 800e664:	428b      	cmp	r3, r1
 800e666:	bf04      	itt	eq
 800e668:	6819      	ldreq	r1, [r3, #0]
 800e66a:	685b      	ldreq	r3, [r3, #4]
 800e66c:	6063      	str	r3, [r4, #4]
 800e66e:	bf04      	itt	eq
 800e670:	1949      	addeq	r1, r1, r5
 800e672:	6021      	streq	r1, [r4, #0]
 800e674:	6054      	str	r4, [r2, #4]
 800e676:	e7ca      	b.n	800e60e <_free_r+0x26>
 800e678:	b003      	add	sp, #12
 800e67a:	bd30      	pop	{r4, r5, pc}
 800e67c:	20012f00 	.word	0x20012f00

0800e680 <sbrk_aligned>:
 800e680:	b570      	push	{r4, r5, r6, lr}
 800e682:	4e0e      	ldr	r6, [pc, #56]	; (800e6bc <sbrk_aligned+0x3c>)
 800e684:	460c      	mov	r4, r1
 800e686:	6831      	ldr	r1, [r6, #0]
 800e688:	4605      	mov	r5, r0
 800e68a:	b911      	cbnz	r1, 800e692 <sbrk_aligned+0x12>
 800e68c:	f000 ff72 	bl	800f574 <_sbrk_r>
 800e690:	6030      	str	r0, [r6, #0]
 800e692:	4621      	mov	r1, r4
 800e694:	4628      	mov	r0, r5
 800e696:	f000 ff6d 	bl	800f574 <_sbrk_r>
 800e69a:	1c43      	adds	r3, r0, #1
 800e69c:	d00a      	beq.n	800e6b4 <sbrk_aligned+0x34>
 800e69e:	1cc4      	adds	r4, r0, #3
 800e6a0:	f024 0403 	bic.w	r4, r4, #3
 800e6a4:	42a0      	cmp	r0, r4
 800e6a6:	d007      	beq.n	800e6b8 <sbrk_aligned+0x38>
 800e6a8:	1a21      	subs	r1, r4, r0
 800e6aa:	4628      	mov	r0, r5
 800e6ac:	f000 ff62 	bl	800f574 <_sbrk_r>
 800e6b0:	3001      	adds	r0, #1
 800e6b2:	d101      	bne.n	800e6b8 <sbrk_aligned+0x38>
 800e6b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e6b8:	4620      	mov	r0, r4
 800e6ba:	bd70      	pop	{r4, r5, r6, pc}
 800e6bc:	20012f04 	.word	0x20012f04

0800e6c0 <_malloc_r>:
 800e6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6c4:	1ccd      	adds	r5, r1, #3
 800e6c6:	f025 0503 	bic.w	r5, r5, #3
 800e6ca:	3508      	adds	r5, #8
 800e6cc:	2d0c      	cmp	r5, #12
 800e6ce:	bf38      	it	cc
 800e6d0:	250c      	movcc	r5, #12
 800e6d2:	2d00      	cmp	r5, #0
 800e6d4:	4607      	mov	r7, r0
 800e6d6:	db01      	blt.n	800e6dc <_malloc_r+0x1c>
 800e6d8:	42a9      	cmp	r1, r5
 800e6da:	d905      	bls.n	800e6e8 <_malloc_r+0x28>
 800e6dc:	230c      	movs	r3, #12
 800e6de:	603b      	str	r3, [r7, #0]
 800e6e0:	2600      	movs	r6, #0
 800e6e2:	4630      	mov	r0, r6
 800e6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6e8:	4e2e      	ldr	r6, [pc, #184]	; (800e7a4 <_malloc_r+0xe4>)
 800e6ea:	f003 f88f 	bl	801180c <__malloc_lock>
 800e6ee:	6833      	ldr	r3, [r6, #0]
 800e6f0:	461c      	mov	r4, r3
 800e6f2:	bb34      	cbnz	r4, 800e742 <_malloc_r+0x82>
 800e6f4:	4629      	mov	r1, r5
 800e6f6:	4638      	mov	r0, r7
 800e6f8:	f7ff ffc2 	bl	800e680 <sbrk_aligned>
 800e6fc:	1c43      	adds	r3, r0, #1
 800e6fe:	4604      	mov	r4, r0
 800e700:	d14d      	bne.n	800e79e <_malloc_r+0xde>
 800e702:	6834      	ldr	r4, [r6, #0]
 800e704:	4626      	mov	r6, r4
 800e706:	2e00      	cmp	r6, #0
 800e708:	d140      	bne.n	800e78c <_malloc_r+0xcc>
 800e70a:	6823      	ldr	r3, [r4, #0]
 800e70c:	4631      	mov	r1, r6
 800e70e:	4638      	mov	r0, r7
 800e710:	eb04 0803 	add.w	r8, r4, r3
 800e714:	f000 ff2e 	bl	800f574 <_sbrk_r>
 800e718:	4580      	cmp	r8, r0
 800e71a:	d13a      	bne.n	800e792 <_malloc_r+0xd2>
 800e71c:	6821      	ldr	r1, [r4, #0]
 800e71e:	3503      	adds	r5, #3
 800e720:	1a6d      	subs	r5, r5, r1
 800e722:	f025 0503 	bic.w	r5, r5, #3
 800e726:	3508      	adds	r5, #8
 800e728:	2d0c      	cmp	r5, #12
 800e72a:	bf38      	it	cc
 800e72c:	250c      	movcc	r5, #12
 800e72e:	4629      	mov	r1, r5
 800e730:	4638      	mov	r0, r7
 800e732:	f7ff ffa5 	bl	800e680 <sbrk_aligned>
 800e736:	3001      	adds	r0, #1
 800e738:	d02b      	beq.n	800e792 <_malloc_r+0xd2>
 800e73a:	6823      	ldr	r3, [r4, #0]
 800e73c:	442b      	add	r3, r5
 800e73e:	6023      	str	r3, [r4, #0]
 800e740:	e00e      	b.n	800e760 <_malloc_r+0xa0>
 800e742:	6822      	ldr	r2, [r4, #0]
 800e744:	1b52      	subs	r2, r2, r5
 800e746:	d41e      	bmi.n	800e786 <_malloc_r+0xc6>
 800e748:	2a0b      	cmp	r2, #11
 800e74a:	d916      	bls.n	800e77a <_malloc_r+0xba>
 800e74c:	1961      	adds	r1, r4, r5
 800e74e:	42a3      	cmp	r3, r4
 800e750:	6025      	str	r5, [r4, #0]
 800e752:	bf18      	it	ne
 800e754:	6059      	strne	r1, [r3, #4]
 800e756:	6863      	ldr	r3, [r4, #4]
 800e758:	bf08      	it	eq
 800e75a:	6031      	streq	r1, [r6, #0]
 800e75c:	5162      	str	r2, [r4, r5]
 800e75e:	604b      	str	r3, [r1, #4]
 800e760:	4638      	mov	r0, r7
 800e762:	f104 060b 	add.w	r6, r4, #11
 800e766:	f003 f857 	bl	8011818 <__malloc_unlock>
 800e76a:	f026 0607 	bic.w	r6, r6, #7
 800e76e:	1d23      	adds	r3, r4, #4
 800e770:	1af2      	subs	r2, r6, r3
 800e772:	d0b6      	beq.n	800e6e2 <_malloc_r+0x22>
 800e774:	1b9b      	subs	r3, r3, r6
 800e776:	50a3      	str	r3, [r4, r2]
 800e778:	e7b3      	b.n	800e6e2 <_malloc_r+0x22>
 800e77a:	6862      	ldr	r2, [r4, #4]
 800e77c:	42a3      	cmp	r3, r4
 800e77e:	bf0c      	ite	eq
 800e780:	6032      	streq	r2, [r6, #0]
 800e782:	605a      	strne	r2, [r3, #4]
 800e784:	e7ec      	b.n	800e760 <_malloc_r+0xa0>
 800e786:	4623      	mov	r3, r4
 800e788:	6864      	ldr	r4, [r4, #4]
 800e78a:	e7b2      	b.n	800e6f2 <_malloc_r+0x32>
 800e78c:	4634      	mov	r4, r6
 800e78e:	6876      	ldr	r6, [r6, #4]
 800e790:	e7b9      	b.n	800e706 <_malloc_r+0x46>
 800e792:	230c      	movs	r3, #12
 800e794:	603b      	str	r3, [r7, #0]
 800e796:	4638      	mov	r0, r7
 800e798:	f003 f83e 	bl	8011818 <__malloc_unlock>
 800e79c:	e7a1      	b.n	800e6e2 <_malloc_r+0x22>
 800e79e:	6025      	str	r5, [r4, #0]
 800e7a0:	e7de      	b.n	800e760 <_malloc_r+0xa0>
 800e7a2:	bf00      	nop
 800e7a4:	20012f00 	.word	0x20012f00

0800e7a8 <__cvt>:
 800e7a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e7ac:	ec55 4b10 	vmov	r4, r5, d0
 800e7b0:	2d00      	cmp	r5, #0
 800e7b2:	460e      	mov	r6, r1
 800e7b4:	4619      	mov	r1, r3
 800e7b6:	462b      	mov	r3, r5
 800e7b8:	bfbb      	ittet	lt
 800e7ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e7be:	461d      	movlt	r5, r3
 800e7c0:	2300      	movge	r3, #0
 800e7c2:	232d      	movlt	r3, #45	; 0x2d
 800e7c4:	700b      	strb	r3, [r1, #0]
 800e7c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e7c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e7cc:	4691      	mov	r9, r2
 800e7ce:	f023 0820 	bic.w	r8, r3, #32
 800e7d2:	bfbc      	itt	lt
 800e7d4:	4622      	movlt	r2, r4
 800e7d6:	4614      	movlt	r4, r2
 800e7d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e7dc:	d005      	beq.n	800e7ea <__cvt+0x42>
 800e7de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e7e2:	d100      	bne.n	800e7e6 <__cvt+0x3e>
 800e7e4:	3601      	adds	r6, #1
 800e7e6:	2102      	movs	r1, #2
 800e7e8:	e000      	b.n	800e7ec <__cvt+0x44>
 800e7ea:	2103      	movs	r1, #3
 800e7ec:	ab03      	add	r3, sp, #12
 800e7ee:	9301      	str	r3, [sp, #4]
 800e7f0:	ab02      	add	r3, sp, #8
 800e7f2:	9300      	str	r3, [sp, #0]
 800e7f4:	ec45 4b10 	vmov	d0, r4, r5
 800e7f8:	4653      	mov	r3, sl
 800e7fa:	4632      	mov	r2, r6
 800e7fc:	f001 fe60 	bl	80104c0 <_dtoa_r>
 800e800:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e804:	4607      	mov	r7, r0
 800e806:	d102      	bne.n	800e80e <__cvt+0x66>
 800e808:	f019 0f01 	tst.w	r9, #1
 800e80c:	d022      	beq.n	800e854 <__cvt+0xac>
 800e80e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e812:	eb07 0906 	add.w	r9, r7, r6
 800e816:	d110      	bne.n	800e83a <__cvt+0x92>
 800e818:	783b      	ldrb	r3, [r7, #0]
 800e81a:	2b30      	cmp	r3, #48	; 0x30
 800e81c:	d10a      	bne.n	800e834 <__cvt+0x8c>
 800e81e:	2200      	movs	r2, #0
 800e820:	2300      	movs	r3, #0
 800e822:	4620      	mov	r0, r4
 800e824:	4629      	mov	r1, r5
 800e826:	f7f2 f977 	bl	8000b18 <__aeabi_dcmpeq>
 800e82a:	b918      	cbnz	r0, 800e834 <__cvt+0x8c>
 800e82c:	f1c6 0601 	rsb	r6, r6, #1
 800e830:	f8ca 6000 	str.w	r6, [sl]
 800e834:	f8da 3000 	ldr.w	r3, [sl]
 800e838:	4499      	add	r9, r3
 800e83a:	2200      	movs	r2, #0
 800e83c:	2300      	movs	r3, #0
 800e83e:	4620      	mov	r0, r4
 800e840:	4629      	mov	r1, r5
 800e842:	f7f2 f969 	bl	8000b18 <__aeabi_dcmpeq>
 800e846:	b108      	cbz	r0, 800e84c <__cvt+0xa4>
 800e848:	f8cd 900c 	str.w	r9, [sp, #12]
 800e84c:	2230      	movs	r2, #48	; 0x30
 800e84e:	9b03      	ldr	r3, [sp, #12]
 800e850:	454b      	cmp	r3, r9
 800e852:	d307      	bcc.n	800e864 <__cvt+0xbc>
 800e854:	9b03      	ldr	r3, [sp, #12]
 800e856:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e858:	1bdb      	subs	r3, r3, r7
 800e85a:	4638      	mov	r0, r7
 800e85c:	6013      	str	r3, [r2, #0]
 800e85e:	b004      	add	sp, #16
 800e860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e864:	1c59      	adds	r1, r3, #1
 800e866:	9103      	str	r1, [sp, #12]
 800e868:	701a      	strb	r2, [r3, #0]
 800e86a:	e7f0      	b.n	800e84e <__cvt+0xa6>

0800e86c <__exponent>:
 800e86c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e86e:	4603      	mov	r3, r0
 800e870:	2900      	cmp	r1, #0
 800e872:	bfb8      	it	lt
 800e874:	4249      	neglt	r1, r1
 800e876:	f803 2b02 	strb.w	r2, [r3], #2
 800e87a:	bfb4      	ite	lt
 800e87c:	222d      	movlt	r2, #45	; 0x2d
 800e87e:	222b      	movge	r2, #43	; 0x2b
 800e880:	2909      	cmp	r1, #9
 800e882:	7042      	strb	r2, [r0, #1]
 800e884:	dd2a      	ble.n	800e8dc <__exponent+0x70>
 800e886:	f10d 0407 	add.w	r4, sp, #7
 800e88a:	46a4      	mov	ip, r4
 800e88c:	270a      	movs	r7, #10
 800e88e:	46a6      	mov	lr, r4
 800e890:	460a      	mov	r2, r1
 800e892:	fb91 f6f7 	sdiv	r6, r1, r7
 800e896:	fb07 1516 	mls	r5, r7, r6, r1
 800e89a:	3530      	adds	r5, #48	; 0x30
 800e89c:	2a63      	cmp	r2, #99	; 0x63
 800e89e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800e8a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e8a6:	4631      	mov	r1, r6
 800e8a8:	dcf1      	bgt.n	800e88e <__exponent+0x22>
 800e8aa:	3130      	adds	r1, #48	; 0x30
 800e8ac:	f1ae 0502 	sub.w	r5, lr, #2
 800e8b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e8b4:	1c44      	adds	r4, r0, #1
 800e8b6:	4629      	mov	r1, r5
 800e8b8:	4561      	cmp	r1, ip
 800e8ba:	d30a      	bcc.n	800e8d2 <__exponent+0x66>
 800e8bc:	f10d 0209 	add.w	r2, sp, #9
 800e8c0:	eba2 020e 	sub.w	r2, r2, lr
 800e8c4:	4565      	cmp	r5, ip
 800e8c6:	bf88      	it	hi
 800e8c8:	2200      	movhi	r2, #0
 800e8ca:	4413      	add	r3, r2
 800e8cc:	1a18      	subs	r0, r3, r0
 800e8ce:	b003      	add	sp, #12
 800e8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e8d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e8da:	e7ed      	b.n	800e8b8 <__exponent+0x4c>
 800e8dc:	2330      	movs	r3, #48	; 0x30
 800e8de:	3130      	adds	r1, #48	; 0x30
 800e8e0:	7083      	strb	r3, [r0, #2]
 800e8e2:	70c1      	strb	r1, [r0, #3]
 800e8e4:	1d03      	adds	r3, r0, #4
 800e8e6:	e7f1      	b.n	800e8cc <__exponent+0x60>

0800e8e8 <_printf_float>:
 800e8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ec:	ed2d 8b02 	vpush	{d8}
 800e8f0:	b08d      	sub	sp, #52	; 0x34
 800e8f2:	460c      	mov	r4, r1
 800e8f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e8f8:	4616      	mov	r6, r2
 800e8fa:	461f      	mov	r7, r3
 800e8fc:	4605      	mov	r5, r0
 800e8fe:	f002 ff61 	bl	80117c4 <_localeconv_r>
 800e902:	f8d0 a000 	ldr.w	sl, [r0]
 800e906:	4650      	mov	r0, sl
 800e908:	f7f1 fc8a 	bl	8000220 <strlen>
 800e90c:	2300      	movs	r3, #0
 800e90e:	930a      	str	r3, [sp, #40]	; 0x28
 800e910:	6823      	ldr	r3, [r4, #0]
 800e912:	9305      	str	r3, [sp, #20]
 800e914:	f8d8 3000 	ldr.w	r3, [r8]
 800e918:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e91c:	3307      	adds	r3, #7
 800e91e:	f023 0307 	bic.w	r3, r3, #7
 800e922:	f103 0208 	add.w	r2, r3, #8
 800e926:	f8c8 2000 	str.w	r2, [r8]
 800e92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e92e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e932:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e936:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e93a:	9307      	str	r3, [sp, #28]
 800e93c:	f8cd 8018 	str.w	r8, [sp, #24]
 800e940:	ee08 0a10 	vmov	s16, r0
 800e944:	4b9f      	ldr	r3, [pc, #636]	; (800ebc4 <_printf_float+0x2dc>)
 800e946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e94a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e94e:	f7f2 f915 	bl	8000b7c <__aeabi_dcmpun>
 800e952:	bb88      	cbnz	r0, 800e9b8 <_printf_float+0xd0>
 800e954:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e958:	4b9a      	ldr	r3, [pc, #616]	; (800ebc4 <_printf_float+0x2dc>)
 800e95a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e95e:	f7f2 f8ef 	bl	8000b40 <__aeabi_dcmple>
 800e962:	bb48      	cbnz	r0, 800e9b8 <_printf_float+0xd0>
 800e964:	2200      	movs	r2, #0
 800e966:	2300      	movs	r3, #0
 800e968:	4640      	mov	r0, r8
 800e96a:	4649      	mov	r1, r9
 800e96c:	f7f2 f8de 	bl	8000b2c <__aeabi_dcmplt>
 800e970:	b110      	cbz	r0, 800e978 <_printf_float+0x90>
 800e972:	232d      	movs	r3, #45	; 0x2d
 800e974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e978:	4b93      	ldr	r3, [pc, #588]	; (800ebc8 <_printf_float+0x2e0>)
 800e97a:	4894      	ldr	r0, [pc, #592]	; (800ebcc <_printf_float+0x2e4>)
 800e97c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e980:	bf94      	ite	ls
 800e982:	4698      	movls	r8, r3
 800e984:	4680      	movhi	r8, r0
 800e986:	2303      	movs	r3, #3
 800e988:	6123      	str	r3, [r4, #16]
 800e98a:	9b05      	ldr	r3, [sp, #20]
 800e98c:	f023 0204 	bic.w	r2, r3, #4
 800e990:	6022      	str	r2, [r4, #0]
 800e992:	f04f 0900 	mov.w	r9, #0
 800e996:	9700      	str	r7, [sp, #0]
 800e998:	4633      	mov	r3, r6
 800e99a:	aa0b      	add	r2, sp, #44	; 0x2c
 800e99c:	4621      	mov	r1, r4
 800e99e:	4628      	mov	r0, r5
 800e9a0:	f000 f9d8 	bl	800ed54 <_printf_common>
 800e9a4:	3001      	adds	r0, #1
 800e9a6:	f040 8090 	bne.w	800eaca <_printf_float+0x1e2>
 800e9aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e9ae:	b00d      	add	sp, #52	; 0x34
 800e9b0:	ecbd 8b02 	vpop	{d8}
 800e9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9b8:	4642      	mov	r2, r8
 800e9ba:	464b      	mov	r3, r9
 800e9bc:	4640      	mov	r0, r8
 800e9be:	4649      	mov	r1, r9
 800e9c0:	f7f2 f8dc 	bl	8000b7c <__aeabi_dcmpun>
 800e9c4:	b140      	cbz	r0, 800e9d8 <_printf_float+0xf0>
 800e9c6:	464b      	mov	r3, r9
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	bfbc      	itt	lt
 800e9cc:	232d      	movlt	r3, #45	; 0x2d
 800e9ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e9d2:	487f      	ldr	r0, [pc, #508]	; (800ebd0 <_printf_float+0x2e8>)
 800e9d4:	4b7f      	ldr	r3, [pc, #508]	; (800ebd4 <_printf_float+0x2ec>)
 800e9d6:	e7d1      	b.n	800e97c <_printf_float+0x94>
 800e9d8:	6863      	ldr	r3, [r4, #4]
 800e9da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e9de:	9206      	str	r2, [sp, #24]
 800e9e0:	1c5a      	adds	r2, r3, #1
 800e9e2:	d13f      	bne.n	800ea64 <_printf_float+0x17c>
 800e9e4:	2306      	movs	r3, #6
 800e9e6:	6063      	str	r3, [r4, #4]
 800e9e8:	9b05      	ldr	r3, [sp, #20]
 800e9ea:	6861      	ldr	r1, [r4, #4]
 800e9ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	9303      	str	r3, [sp, #12]
 800e9f4:	ab0a      	add	r3, sp, #40	; 0x28
 800e9f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e9fa:	ab09      	add	r3, sp, #36	; 0x24
 800e9fc:	ec49 8b10 	vmov	d0, r8, r9
 800ea00:	9300      	str	r3, [sp, #0]
 800ea02:	6022      	str	r2, [r4, #0]
 800ea04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ea08:	4628      	mov	r0, r5
 800ea0a:	f7ff fecd 	bl	800e7a8 <__cvt>
 800ea0e:	9b06      	ldr	r3, [sp, #24]
 800ea10:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea12:	2b47      	cmp	r3, #71	; 0x47
 800ea14:	4680      	mov	r8, r0
 800ea16:	d108      	bne.n	800ea2a <_printf_float+0x142>
 800ea18:	1cc8      	adds	r0, r1, #3
 800ea1a:	db02      	blt.n	800ea22 <_printf_float+0x13a>
 800ea1c:	6863      	ldr	r3, [r4, #4]
 800ea1e:	4299      	cmp	r1, r3
 800ea20:	dd41      	ble.n	800eaa6 <_printf_float+0x1be>
 800ea22:	f1ab 0b02 	sub.w	fp, fp, #2
 800ea26:	fa5f fb8b 	uxtb.w	fp, fp
 800ea2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ea2e:	d820      	bhi.n	800ea72 <_printf_float+0x18a>
 800ea30:	3901      	subs	r1, #1
 800ea32:	465a      	mov	r2, fp
 800ea34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ea38:	9109      	str	r1, [sp, #36]	; 0x24
 800ea3a:	f7ff ff17 	bl	800e86c <__exponent>
 800ea3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea40:	1813      	adds	r3, r2, r0
 800ea42:	2a01      	cmp	r2, #1
 800ea44:	4681      	mov	r9, r0
 800ea46:	6123      	str	r3, [r4, #16]
 800ea48:	dc02      	bgt.n	800ea50 <_printf_float+0x168>
 800ea4a:	6822      	ldr	r2, [r4, #0]
 800ea4c:	07d2      	lsls	r2, r2, #31
 800ea4e:	d501      	bpl.n	800ea54 <_printf_float+0x16c>
 800ea50:	3301      	adds	r3, #1
 800ea52:	6123      	str	r3, [r4, #16]
 800ea54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d09c      	beq.n	800e996 <_printf_float+0xae>
 800ea5c:	232d      	movs	r3, #45	; 0x2d
 800ea5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea62:	e798      	b.n	800e996 <_printf_float+0xae>
 800ea64:	9a06      	ldr	r2, [sp, #24]
 800ea66:	2a47      	cmp	r2, #71	; 0x47
 800ea68:	d1be      	bne.n	800e9e8 <_printf_float+0x100>
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d1bc      	bne.n	800e9e8 <_printf_float+0x100>
 800ea6e:	2301      	movs	r3, #1
 800ea70:	e7b9      	b.n	800e9e6 <_printf_float+0xfe>
 800ea72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ea76:	d118      	bne.n	800eaaa <_printf_float+0x1c2>
 800ea78:	2900      	cmp	r1, #0
 800ea7a:	6863      	ldr	r3, [r4, #4]
 800ea7c:	dd0b      	ble.n	800ea96 <_printf_float+0x1ae>
 800ea7e:	6121      	str	r1, [r4, #16]
 800ea80:	b913      	cbnz	r3, 800ea88 <_printf_float+0x1a0>
 800ea82:	6822      	ldr	r2, [r4, #0]
 800ea84:	07d0      	lsls	r0, r2, #31
 800ea86:	d502      	bpl.n	800ea8e <_printf_float+0x1a6>
 800ea88:	3301      	adds	r3, #1
 800ea8a:	440b      	add	r3, r1
 800ea8c:	6123      	str	r3, [r4, #16]
 800ea8e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ea90:	f04f 0900 	mov.w	r9, #0
 800ea94:	e7de      	b.n	800ea54 <_printf_float+0x16c>
 800ea96:	b913      	cbnz	r3, 800ea9e <_printf_float+0x1b6>
 800ea98:	6822      	ldr	r2, [r4, #0]
 800ea9a:	07d2      	lsls	r2, r2, #31
 800ea9c:	d501      	bpl.n	800eaa2 <_printf_float+0x1ba>
 800ea9e:	3302      	adds	r3, #2
 800eaa0:	e7f4      	b.n	800ea8c <_printf_float+0x1a4>
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	e7f2      	b.n	800ea8c <_printf_float+0x1a4>
 800eaa6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800eaaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaac:	4299      	cmp	r1, r3
 800eaae:	db05      	blt.n	800eabc <_printf_float+0x1d4>
 800eab0:	6823      	ldr	r3, [r4, #0]
 800eab2:	6121      	str	r1, [r4, #16]
 800eab4:	07d8      	lsls	r0, r3, #31
 800eab6:	d5ea      	bpl.n	800ea8e <_printf_float+0x1a6>
 800eab8:	1c4b      	adds	r3, r1, #1
 800eaba:	e7e7      	b.n	800ea8c <_printf_float+0x1a4>
 800eabc:	2900      	cmp	r1, #0
 800eabe:	bfd4      	ite	le
 800eac0:	f1c1 0202 	rsble	r2, r1, #2
 800eac4:	2201      	movgt	r2, #1
 800eac6:	4413      	add	r3, r2
 800eac8:	e7e0      	b.n	800ea8c <_printf_float+0x1a4>
 800eaca:	6823      	ldr	r3, [r4, #0]
 800eacc:	055a      	lsls	r2, r3, #21
 800eace:	d407      	bmi.n	800eae0 <_printf_float+0x1f8>
 800ead0:	6923      	ldr	r3, [r4, #16]
 800ead2:	4642      	mov	r2, r8
 800ead4:	4631      	mov	r1, r6
 800ead6:	4628      	mov	r0, r5
 800ead8:	47b8      	blx	r7
 800eada:	3001      	adds	r0, #1
 800eadc:	d12c      	bne.n	800eb38 <_printf_float+0x250>
 800eade:	e764      	b.n	800e9aa <_printf_float+0xc2>
 800eae0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eae4:	f240 80e0 	bls.w	800eca8 <_printf_float+0x3c0>
 800eae8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eaec:	2200      	movs	r2, #0
 800eaee:	2300      	movs	r3, #0
 800eaf0:	f7f2 f812 	bl	8000b18 <__aeabi_dcmpeq>
 800eaf4:	2800      	cmp	r0, #0
 800eaf6:	d034      	beq.n	800eb62 <_printf_float+0x27a>
 800eaf8:	4a37      	ldr	r2, [pc, #220]	; (800ebd8 <_printf_float+0x2f0>)
 800eafa:	2301      	movs	r3, #1
 800eafc:	4631      	mov	r1, r6
 800eafe:	4628      	mov	r0, r5
 800eb00:	47b8      	blx	r7
 800eb02:	3001      	adds	r0, #1
 800eb04:	f43f af51 	beq.w	800e9aa <_printf_float+0xc2>
 800eb08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	db02      	blt.n	800eb16 <_printf_float+0x22e>
 800eb10:	6823      	ldr	r3, [r4, #0]
 800eb12:	07d8      	lsls	r0, r3, #31
 800eb14:	d510      	bpl.n	800eb38 <_printf_float+0x250>
 800eb16:	ee18 3a10 	vmov	r3, s16
 800eb1a:	4652      	mov	r2, sl
 800eb1c:	4631      	mov	r1, r6
 800eb1e:	4628      	mov	r0, r5
 800eb20:	47b8      	blx	r7
 800eb22:	3001      	adds	r0, #1
 800eb24:	f43f af41 	beq.w	800e9aa <_printf_float+0xc2>
 800eb28:	f04f 0800 	mov.w	r8, #0
 800eb2c:	f104 091a 	add.w	r9, r4, #26
 800eb30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb32:	3b01      	subs	r3, #1
 800eb34:	4543      	cmp	r3, r8
 800eb36:	dc09      	bgt.n	800eb4c <_printf_float+0x264>
 800eb38:	6823      	ldr	r3, [r4, #0]
 800eb3a:	079b      	lsls	r3, r3, #30
 800eb3c:	f100 8105 	bmi.w	800ed4a <_printf_float+0x462>
 800eb40:	68e0      	ldr	r0, [r4, #12]
 800eb42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb44:	4298      	cmp	r0, r3
 800eb46:	bfb8      	it	lt
 800eb48:	4618      	movlt	r0, r3
 800eb4a:	e730      	b.n	800e9ae <_printf_float+0xc6>
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	464a      	mov	r2, r9
 800eb50:	4631      	mov	r1, r6
 800eb52:	4628      	mov	r0, r5
 800eb54:	47b8      	blx	r7
 800eb56:	3001      	adds	r0, #1
 800eb58:	f43f af27 	beq.w	800e9aa <_printf_float+0xc2>
 800eb5c:	f108 0801 	add.w	r8, r8, #1
 800eb60:	e7e6      	b.n	800eb30 <_printf_float+0x248>
 800eb62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	dc39      	bgt.n	800ebdc <_printf_float+0x2f4>
 800eb68:	4a1b      	ldr	r2, [pc, #108]	; (800ebd8 <_printf_float+0x2f0>)
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	4631      	mov	r1, r6
 800eb6e:	4628      	mov	r0, r5
 800eb70:	47b8      	blx	r7
 800eb72:	3001      	adds	r0, #1
 800eb74:	f43f af19 	beq.w	800e9aa <_printf_float+0xc2>
 800eb78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb7c:	4313      	orrs	r3, r2
 800eb7e:	d102      	bne.n	800eb86 <_printf_float+0x29e>
 800eb80:	6823      	ldr	r3, [r4, #0]
 800eb82:	07d9      	lsls	r1, r3, #31
 800eb84:	d5d8      	bpl.n	800eb38 <_printf_float+0x250>
 800eb86:	ee18 3a10 	vmov	r3, s16
 800eb8a:	4652      	mov	r2, sl
 800eb8c:	4631      	mov	r1, r6
 800eb8e:	4628      	mov	r0, r5
 800eb90:	47b8      	blx	r7
 800eb92:	3001      	adds	r0, #1
 800eb94:	f43f af09 	beq.w	800e9aa <_printf_float+0xc2>
 800eb98:	f04f 0900 	mov.w	r9, #0
 800eb9c:	f104 0a1a 	add.w	sl, r4, #26
 800eba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eba2:	425b      	negs	r3, r3
 800eba4:	454b      	cmp	r3, r9
 800eba6:	dc01      	bgt.n	800ebac <_printf_float+0x2c4>
 800eba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebaa:	e792      	b.n	800ead2 <_printf_float+0x1ea>
 800ebac:	2301      	movs	r3, #1
 800ebae:	4652      	mov	r2, sl
 800ebb0:	4631      	mov	r1, r6
 800ebb2:	4628      	mov	r0, r5
 800ebb4:	47b8      	blx	r7
 800ebb6:	3001      	adds	r0, #1
 800ebb8:	f43f aef7 	beq.w	800e9aa <_printf_float+0xc2>
 800ebbc:	f109 0901 	add.w	r9, r9, #1
 800ebc0:	e7ee      	b.n	800eba0 <_printf_float+0x2b8>
 800ebc2:	bf00      	nop
 800ebc4:	7fefffff 	.word	0x7fefffff
 800ebc8:	08013d54 	.word	0x08013d54
 800ebcc:	08013d58 	.word	0x08013d58
 800ebd0:	08013d60 	.word	0x08013d60
 800ebd4:	08013d5c 	.word	0x08013d5c
 800ebd8:	08013d64 	.word	0x08013d64
 800ebdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ebde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	bfa8      	it	ge
 800ebe4:	461a      	movge	r2, r3
 800ebe6:	2a00      	cmp	r2, #0
 800ebe8:	4691      	mov	r9, r2
 800ebea:	dc37      	bgt.n	800ec5c <_printf_float+0x374>
 800ebec:	f04f 0b00 	mov.w	fp, #0
 800ebf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ebf4:	f104 021a 	add.w	r2, r4, #26
 800ebf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ebfa:	9305      	str	r3, [sp, #20]
 800ebfc:	eba3 0309 	sub.w	r3, r3, r9
 800ec00:	455b      	cmp	r3, fp
 800ec02:	dc33      	bgt.n	800ec6c <_printf_float+0x384>
 800ec04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	db3b      	blt.n	800ec84 <_printf_float+0x39c>
 800ec0c:	6823      	ldr	r3, [r4, #0]
 800ec0e:	07da      	lsls	r2, r3, #31
 800ec10:	d438      	bmi.n	800ec84 <_printf_float+0x39c>
 800ec12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec14:	9a05      	ldr	r2, [sp, #20]
 800ec16:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec18:	1a9a      	subs	r2, r3, r2
 800ec1a:	eba3 0901 	sub.w	r9, r3, r1
 800ec1e:	4591      	cmp	r9, r2
 800ec20:	bfa8      	it	ge
 800ec22:	4691      	movge	r9, r2
 800ec24:	f1b9 0f00 	cmp.w	r9, #0
 800ec28:	dc35      	bgt.n	800ec96 <_printf_float+0x3ae>
 800ec2a:	f04f 0800 	mov.w	r8, #0
 800ec2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec32:	f104 0a1a 	add.w	sl, r4, #26
 800ec36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec3a:	1a9b      	subs	r3, r3, r2
 800ec3c:	eba3 0309 	sub.w	r3, r3, r9
 800ec40:	4543      	cmp	r3, r8
 800ec42:	f77f af79 	ble.w	800eb38 <_printf_float+0x250>
 800ec46:	2301      	movs	r3, #1
 800ec48:	4652      	mov	r2, sl
 800ec4a:	4631      	mov	r1, r6
 800ec4c:	4628      	mov	r0, r5
 800ec4e:	47b8      	blx	r7
 800ec50:	3001      	adds	r0, #1
 800ec52:	f43f aeaa 	beq.w	800e9aa <_printf_float+0xc2>
 800ec56:	f108 0801 	add.w	r8, r8, #1
 800ec5a:	e7ec      	b.n	800ec36 <_printf_float+0x34e>
 800ec5c:	4613      	mov	r3, r2
 800ec5e:	4631      	mov	r1, r6
 800ec60:	4642      	mov	r2, r8
 800ec62:	4628      	mov	r0, r5
 800ec64:	47b8      	blx	r7
 800ec66:	3001      	adds	r0, #1
 800ec68:	d1c0      	bne.n	800ebec <_printf_float+0x304>
 800ec6a:	e69e      	b.n	800e9aa <_printf_float+0xc2>
 800ec6c:	2301      	movs	r3, #1
 800ec6e:	4631      	mov	r1, r6
 800ec70:	4628      	mov	r0, r5
 800ec72:	9205      	str	r2, [sp, #20]
 800ec74:	47b8      	blx	r7
 800ec76:	3001      	adds	r0, #1
 800ec78:	f43f ae97 	beq.w	800e9aa <_printf_float+0xc2>
 800ec7c:	9a05      	ldr	r2, [sp, #20]
 800ec7e:	f10b 0b01 	add.w	fp, fp, #1
 800ec82:	e7b9      	b.n	800ebf8 <_printf_float+0x310>
 800ec84:	ee18 3a10 	vmov	r3, s16
 800ec88:	4652      	mov	r2, sl
 800ec8a:	4631      	mov	r1, r6
 800ec8c:	4628      	mov	r0, r5
 800ec8e:	47b8      	blx	r7
 800ec90:	3001      	adds	r0, #1
 800ec92:	d1be      	bne.n	800ec12 <_printf_float+0x32a>
 800ec94:	e689      	b.n	800e9aa <_printf_float+0xc2>
 800ec96:	9a05      	ldr	r2, [sp, #20]
 800ec98:	464b      	mov	r3, r9
 800ec9a:	4442      	add	r2, r8
 800ec9c:	4631      	mov	r1, r6
 800ec9e:	4628      	mov	r0, r5
 800eca0:	47b8      	blx	r7
 800eca2:	3001      	adds	r0, #1
 800eca4:	d1c1      	bne.n	800ec2a <_printf_float+0x342>
 800eca6:	e680      	b.n	800e9aa <_printf_float+0xc2>
 800eca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ecaa:	2a01      	cmp	r2, #1
 800ecac:	dc01      	bgt.n	800ecb2 <_printf_float+0x3ca>
 800ecae:	07db      	lsls	r3, r3, #31
 800ecb0:	d538      	bpl.n	800ed24 <_printf_float+0x43c>
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	4642      	mov	r2, r8
 800ecb6:	4631      	mov	r1, r6
 800ecb8:	4628      	mov	r0, r5
 800ecba:	47b8      	blx	r7
 800ecbc:	3001      	adds	r0, #1
 800ecbe:	f43f ae74 	beq.w	800e9aa <_printf_float+0xc2>
 800ecc2:	ee18 3a10 	vmov	r3, s16
 800ecc6:	4652      	mov	r2, sl
 800ecc8:	4631      	mov	r1, r6
 800ecca:	4628      	mov	r0, r5
 800eccc:	47b8      	blx	r7
 800ecce:	3001      	adds	r0, #1
 800ecd0:	f43f ae6b 	beq.w	800e9aa <_printf_float+0xc2>
 800ecd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ecd8:	2200      	movs	r2, #0
 800ecda:	2300      	movs	r3, #0
 800ecdc:	f7f1 ff1c 	bl	8000b18 <__aeabi_dcmpeq>
 800ece0:	b9d8      	cbnz	r0, 800ed1a <_printf_float+0x432>
 800ece2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ece4:	f108 0201 	add.w	r2, r8, #1
 800ece8:	3b01      	subs	r3, #1
 800ecea:	4631      	mov	r1, r6
 800ecec:	4628      	mov	r0, r5
 800ecee:	47b8      	blx	r7
 800ecf0:	3001      	adds	r0, #1
 800ecf2:	d10e      	bne.n	800ed12 <_printf_float+0x42a>
 800ecf4:	e659      	b.n	800e9aa <_printf_float+0xc2>
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	4652      	mov	r2, sl
 800ecfa:	4631      	mov	r1, r6
 800ecfc:	4628      	mov	r0, r5
 800ecfe:	47b8      	blx	r7
 800ed00:	3001      	adds	r0, #1
 800ed02:	f43f ae52 	beq.w	800e9aa <_printf_float+0xc2>
 800ed06:	f108 0801 	add.w	r8, r8, #1
 800ed0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed0c:	3b01      	subs	r3, #1
 800ed0e:	4543      	cmp	r3, r8
 800ed10:	dcf1      	bgt.n	800ecf6 <_printf_float+0x40e>
 800ed12:	464b      	mov	r3, r9
 800ed14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ed18:	e6dc      	b.n	800ead4 <_printf_float+0x1ec>
 800ed1a:	f04f 0800 	mov.w	r8, #0
 800ed1e:	f104 0a1a 	add.w	sl, r4, #26
 800ed22:	e7f2      	b.n	800ed0a <_printf_float+0x422>
 800ed24:	2301      	movs	r3, #1
 800ed26:	4642      	mov	r2, r8
 800ed28:	e7df      	b.n	800ecea <_printf_float+0x402>
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	464a      	mov	r2, r9
 800ed2e:	4631      	mov	r1, r6
 800ed30:	4628      	mov	r0, r5
 800ed32:	47b8      	blx	r7
 800ed34:	3001      	adds	r0, #1
 800ed36:	f43f ae38 	beq.w	800e9aa <_printf_float+0xc2>
 800ed3a:	f108 0801 	add.w	r8, r8, #1
 800ed3e:	68e3      	ldr	r3, [r4, #12]
 800ed40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ed42:	1a5b      	subs	r3, r3, r1
 800ed44:	4543      	cmp	r3, r8
 800ed46:	dcf0      	bgt.n	800ed2a <_printf_float+0x442>
 800ed48:	e6fa      	b.n	800eb40 <_printf_float+0x258>
 800ed4a:	f04f 0800 	mov.w	r8, #0
 800ed4e:	f104 0919 	add.w	r9, r4, #25
 800ed52:	e7f4      	b.n	800ed3e <_printf_float+0x456>

0800ed54 <_printf_common>:
 800ed54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed58:	4616      	mov	r6, r2
 800ed5a:	4699      	mov	r9, r3
 800ed5c:	688a      	ldr	r2, [r1, #8]
 800ed5e:	690b      	ldr	r3, [r1, #16]
 800ed60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ed64:	4293      	cmp	r3, r2
 800ed66:	bfb8      	it	lt
 800ed68:	4613      	movlt	r3, r2
 800ed6a:	6033      	str	r3, [r6, #0]
 800ed6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ed70:	4607      	mov	r7, r0
 800ed72:	460c      	mov	r4, r1
 800ed74:	b10a      	cbz	r2, 800ed7a <_printf_common+0x26>
 800ed76:	3301      	adds	r3, #1
 800ed78:	6033      	str	r3, [r6, #0]
 800ed7a:	6823      	ldr	r3, [r4, #0]
 800ed7c:	0699      	lsls	r1, r3, #26
 800ed7e:	bf42      	ittt	mi
 800ed80:	6833      	ldrmi	r3, [r6, #0]
 800ed82:	3302      	addmi	r3, #2
 800ed84:	6033      	strmi	r3, [r6, #0]
 800ed86:	6825      	ldr	r5, [r4, #0]
 800ed88:	f015 0506 	ands.w	r5, r5, #6
 800ed8c:	d106      	bne.n	800ed9c <_printf_common+0x48>
 800ed8e:	f104 0a19 	add.w	sl, r4, #25
 800ed92:	68e3      	ldr	r3, [r4, #12]
 800ed94:	6832      	ldr	r2, [r6, #0]
 800ed96:	1a9b      	subs	r3, r3, r2
 800ed98:	42ab      	cmp	r3, r5
 800ed9a:	dc26      	bgt.n	800edea <_printf_common+0x96>
 800ed9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eda0:	1e13      	subs	r3, r2, #0
 800eda2:	6822      	ldr	r2, [r4, #0]
 800eda4:	bf18      	it	ne
 800eda6:	2301      	movne	r3, #1
 800eda8:	0692      	lsls	r2, r2, #26
 800edaa:	d42b      	bmi.n	800ee04 <_printf_common+0xb0>
 800edac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800edb0:	4649      	mov	r1, r9
 800edb2:	4638      	mov	r0, r7
 800edb4:	47c0      	blx	r8
 800edb6:	3001      	adds	r0, #1
 800edb8:	d01e      	beq.n	800edf8 <_printf_common+0xa4>
 800edba:	6823      	ldr	r3, [r4, #0]
 800edbc:	68e5      	ldr	r5, [r4, #12]
 800edbe:	6832      	ldr	r2, [r6, #0]
 800edc0:	f003 0306 	and.w	r3, r3, #6
 800edc4:	2b04      	cmp	r3, #4
 800edc6:	bf08      	it	eq
 800edc8:	1aad      	subeq	r5, r5, r2
 800edca:	68a3      	ldr	r3, [r4, #8]
 800edcc:	6922      	ldr	r2, [r4, #16]
 800edce:	bf0c      	ite	eq
 800edd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800edd4:	2500      	movne	r5, #0
 800edd6:	4293      	cmp	r3, r2
 800edd8:	bfc4      	itt	gt
 800edda:	1a9b      	subgt	r3, r3, r2
 800eddc:	18ed      	addgt	r5, r5, r3
 800edde:	2600      	movs	r6, #0
 800ede0:	341a      	adds	r4, #26
 800ede2:	42b5      	cmp	r5, r6
 800ede4:	d11a      	bne.n	800ee1c <_printf_common+0xc8>
 800ede6:	2000      	movs	r0, #0
 800ede8:	e008      	b.n	800edfc <_printf_common+0xa8>
 800edea:	2301      	movs	r3, #1
 800edec:	4652      	mov	r2, sl
 800edee:	4649      	mov	r1, r9
 800edf0:	4638      	mov	r0, r7
 800edf2:	47c0      	blx	r8
 800edf4:	3001      	adds	r0, #1
 800edf6:	d103      	bne.n	800ee00 <_printf_common+0xac>
 800edf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800edfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee00:	3501      	adds	r5, #1
 800ee02:	e7c6      	b.n	800ed92 <_printf_common+0x3e>
 800ee04:	18e1      	adds	r1, r4, r3
 800ee06:	1c5a      	adds	r2, r3, #1
 800ee08:	2030      	movs	r0, #48	; 0x30
 800ee0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ee0e:	4422      	add	r2, r4
 800ee10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ee14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ee18:	3302      	adds	r3, #2
 800ee1a:	e7c7      	b.n	800edac <_printf_common+0x58>
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	4622      	mov	r2, r4
 800ee20:	4649      	mov	r1, r9
 800ee22:	4638      	mov	r0, r7
 800ee24:	47c0      	blx	r8
 800ee26:	3001      	adds	r0, #1
 800ee28:	d0e6      	beq.n	800edf8 <_printf_common+0xa4>
 800ee2a:	3601      	adds	r6, #1
 800ee2c:	e7d9      	b.n	800ede2 <_printf_common+0x8e>
	...

0800ee30 <_printf_i>:
 800ee30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee34:	7e0f      	ldrb	r7, [r1, #24]
 800ee36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ee38:	2f78      	cmp	r7, #120	; 0x78
 800ee3a:	4691      	mov	r9, r2
 800ee3c:	4680      	mov	r8, r0
 800ee3e:	460c      	mov	r4, r1
 800ee40:	469a      	mov	sl, r3
 800ee42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ee46:	d807      	bhi.n	800ee58 <_printf_i+0x28>
 800ee48:	2f62      	cmp	r7, #98	; 0x62
 800ee4a:	d80a      	bhi.n	800ee62 <_printf_i+0x32>
 800ee4c:	2f00      	cmp	r7, #0
 800ee4e:	f000 80d8 	beq.w	800f002 <_printf_i+0x1d2>
 800ee52:	2f58      	cmp	r7, #88	; 0x58
 800ee54:	f000 80a3 	beq.w	800ef9e <_printf_i+0x16e>
 800ee58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ee60:	e03a      	b.n	800eed8 <_printf_i+0xa8>
 800ee62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ee66:	2b15      	cmp	r3, #21
 800ee68:	d8f6      	bhi.n	800ee58 <_printf_i+0x28>
 800ee6a:	a101      	add	r1, pc, #4	; (adr r1, 800ee70 <_printf_i+0x40>)
 800ee6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ee70:	0800eec9 	.word	0x0800eec9
 800ee74:	0800eedd 	.word	0x0800eedd
 800ee78:	0800ee59 	.word	0x0800ee59
 800ee7c:	0800ee59 	.word	0x0800ee59
 800ee80:	0800ee59 	.word	0x0800ee59
 800ee84:	0800ee59 	.word	0x0800ee59
 800ee88:	0800eedd 	.word	0x0800eedd
 800ee8c:	0800ee59 	.word	0x0800ee59
 800ee90:	0800ee59 	.word	0x0800ee59
 800ee94:	0800ee59 	.word	0x0800ee59
 800ee98:	0800ee59 	.word	0x0800ee59
 800ee9c:	0800efe9 	.word	0x0800efe9
 800eea0:	0800ef0d 	.word	0x0800ef0d
 800eea4:	0800efcb 	.word	0x0800efcb
 800eea8:	0800ee59 	.word	0x0800ee59
 800eeac:	0800ee59 	.word	0x0800ee59
 800eeb0:	0800f00b 	.word	0x0800f00b
 800eeb4:	0800ee59 	.word	0x0800ee59
 800eeb8:	0800ef0d 	.word	0x0800ef0d
 800eebc:	0800ee59 	.word	0x0800ee59
 800eec0:	0800ee59 	.word	0x0800ee59
 800eec4:	0800efd3 	.word	0x0800efd3
 800eec8:	682b      	ldr	r3, [r5, #0]
 800eeca:	1d1a      	adds	r2, r3, #4
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	602a      	str	r2, [r5, #0]
 800eed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eed4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eed8:	2301      	movs	r3, #1
 800eeda:	e0a3      	b.n	800f024 <_printf_i+0x1f4>
 800eedc:	6820      	ldr	r0, [r4, #0]
 800eede:	6829      	ldr	r1, [r5, #0]
 800eee0:	0606      	lsls	r6, r0, #24
 800eee2:	f101 0304 	add.w	r3, r1, #4
 800eee6:	d50a      	bpl.n	800eefe <_printf_i+0xce>
 800eee8:	680e      	ldr	r6, [r1, #0]
 800eeea:	602b      	str	r3, [r5, #0]
 800eeec:	2e00      	cmp	r6, #0
 800eeee:	da03      	bge.n	800eef8 <_printf_i+0xc8>
 800eef0:	232d      	movs	r3, #45	; 0x2d
 800eef2:	4276      	negs	r6, r6
 800eef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eef8:	485e      	ldr	r0, [pc, #376]	; (800f074 <_printf_i+0x244>)
 800eefa:	230a      	movs	r3, #10
 800eefc:	e019      	b.n	800ef32 <_printf_i+0x102>
 800eefe:	680e      	ldr	r6, [r1, #0]
 800ef00:	602b      	str	r3, [r5, #0]
 800ef02:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ef06:	bf18      	it	ne
 800ef08:	b236      	sxthne	r6, r6
 800ef0a:	e7ef      	b.n	800eeec <_printf_i+0xbc>
 800ef0c:	682b      	ldr	r3, [r5, #0]
 800ef0e:	6820      	ldr	r0, [r4, #0]
 800ef10:	1d19      	adds	r1, r3, #4
 800ef12:	6029      	str	r1, [r5, #0]
 800ef14:	0601      	lsls	r1, r0, #24
 800ef16:	d501      	bpl.n	800ef1c <_printf_i+0xec>
 800ef18:	681e      	ldr	r6, [r3, #0]
 800ef1a:	e002      	b.n	800ef22 <_printf_i+0xf2>
 800ef1c:	0646      	lsls	r6, r0, #25
 800ef1e:	d5fb      	bpl.n	800ef18 <_printf_i+0xe8>
 800ef20:	881e      	ldrh	r6, [r3, #0]
 800ef22:	4854      	ldr	r0, [pc, #336]	; (800f074 <_printf_i+0x244>)
 800ef24:	2f6f      	cmp	r7, #111	; 0x6f
 800ef26:	bf0c      	ite	eq
 800ef28:	2308      	moveq	r3, #8
 800ef2a:	230a      	movne	r3, #10
 800ef2c:	2100      	movs	r1, #0
 800ef2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ef32:	6865      	ldr	r5, [r4, #4]
 800ef34:	60a5      	str	r5, [r4, #8]
 800ef36:	2d00      	cmp	r5, #0
 800ef38:	bfa2      	ittt	ge
 800ef3a:	6821      	ldrge	r1, [r4, #0]
 800ef3c:	f021 0104 	bicge.w	r1, r1, #4
 800ef40:	6021      	strge	r1, [r4, #0]
 800ef42:	b90e      	cbnz	r6, 800ef48 <_printf_i+0x118>
 800ef44:	2d00      	cmp	r5, #0
 800ef46:	d04d      	beq.n	800efe4 <_printf_i+0x1b4>
 800ef48:	4615      	mov	r5, r2
 800ef4a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ef4e:	fb03 6711 	mls	r7, r3, r1, r6
 800ef52:	5dc7      	ldrb	r7, [r0, r7]
 800ef54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ef58:	4637      	mov	r7, r6
 800ef5a:	42bb      	cmp	r3, r7
 800ef5c:	460e      	mov	r6, r1
 800ef5e:	d9f4      	bls.n	800ef4a <_printf_i+0x11a>
 800ef60:	2b08      	cmp	r3, #8
 800ef62:	d10b      	bne.n	800ef7c <_printf_i+0x14c>
 800ef64:	6823      	ldr	r3, [r4, #0]
 800ef66:	07de      	lsls	r6, r3, #31
 800ef68:	d508      	bpl.n	800ef7c <_printf_i+0x14c>
 800ef6a:	6923      	ldr	r3, [r4, #16]
 800ef6c:	6861      	ldr	r1, [r4, #4]
 800ef6e:	4299      	cmp	r1, r3
 800ef70:	bfde      	ittt	le
 800ef72:	2330      	movle	r3, #48	; 0x30
 800ef74:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ef78:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ef7c:	1b52      	subs	r2, r2, r5
 800ef7e:	6122      	str	r2, [r4, #16]
 800ef80:	f8cd a000 	str.w	sl, [sp]
 800ef84:	464b      	mov	r3, r9
 800ef86:	aa03      	add	r2, sp, #12
 800ef88:	4621      	mov	r1, r4
 800ef8a:	4640      	mov	r0, r8
 800ef8c:	f7ff fee2 	bl	800ed54 <_printf_common>
 800ef90:	3001      	adds	r0, #1
 800ef92:	d14c      	bne.n	800f02e <_printf_i+0x1fe>
 800ef94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef98:	b004      	add	sp, #16
 800ef9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef9e:	4835      	ldr	r0, [pc, #212]	; (800f074 <_printf_i+0x244>)
 800efa0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800efa4:	6829      	ldr	r1, [r5, #0]
 800efa6:	6823      	ldr	r3, [r4, #0]
 800efa8:	f851 6b04 	ldr.w	r6, [r1], #4
 800efac:	6029      	str	r1, [r5, #0]
 800efae:	061d      	lsls	r5, r3, #24
 800efb0:	d514      	bpl.n	800efdc <_printf_i+0x1ac>
 800efb2:	07df      	lsls	r7, r3, #31
 800efb4:	bf44      	itt	mi
 800efb6:	f043 0320 	orrmi.w	r3, r3, #32
 800efba:	6023      	strmi	r3, [r4, #0]
 800efbc:	b91e      	cbnz	r6, 800efc6 <_printf_i+0x196>
 800efbe:	6823      	ldr	r3, [r4, #0]
 800efc0:	f023 0320 	bic.w	r3, r3, #32
 800efc4:	6023      	str	r3, [r4, #0]
 800efc6:	2310      	movs	r3, #16
 800efc8:	e7b0      	b.n	800ef2c <_printf_i+0xfc>
 800efca:	6823      	ldr	r3, [r4, #0]
 800efcc:	f043 0320 	orr.w	r3, r3, #32
 800efd0:	6023      	str	r3, [r4, #0]
 800efd2:	2378      	movs	r3, #120	; 0x78
 800efd4:	4828      	ldr	r0, [pc, #160]	; (800f078 <_printf_i+0x248>)
 800efd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800efda:	e7e3      	b.n	800efa4 <_printf_i+0x174>
 800efdc:	0659      	lsls	r1, r3, #25
 800efde:	bf48      	it	mi
 800efe0:	b2b6      	uxthmi	r6, r6
 800efe2:	e7e6      	b.n	800efb2 <_printf_i+0x182>
 800efe4:	4615      	mov	r5, r2
 800efe6:	e7bb      	b.n	800ef60 <_printf_i+0x130>
 800efe8:	682b      	ldr	r3, [r5, #0]
 800efea:	6826      	ldr	r6, [r4, #0]
 800efec:	6961      	ldr	r1, [r4, #20]
 800efee:	1d18      	adds	r0, r3, #4
 800eff0:	6028      	str	r0, [r5, #0]
 800eff2:	0635      	lsls	r5, r6, #24
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	d501      	bpl.n	800effc <_printf_i+0x1cc>
 800eff8:	6019      	str	r1, [r3, #0]
 800effa:	e002      	b.n	800f002 <_printf_i+0x1d2>
 800effc:	0670      	lsls	r0, r6, #25
 800effe:	d5fb      	bpl.n	800eff8 <_printf_i+0x1c8>
 800f000:	8019      	strh	r1, [r3, #0]
 800f002:	2300      	movs	r3, #0
 800f004:	6123      	str	r3, [r4, #16]
 800f006:	4615      	mov	r5, r2
 800f008:	e7ba      	b.n	800ef80 <_printf_i+0x150>
 800f00a:	682b      	ldr	r3, [r5, #0]
 800f00c:	1d1a      	adds	r2, r3, #4
 800f00e:	602a      	str	r2, [r5, #0]
 800f010:	681d      	ldr	r5, [r3, #0]
 800f012:	6862      	ldr	r2, [r4, #4]
 800f014:	2100      	movs	r1, #0
 800f016:	4628      	mov	r0, r5
 800f018:	f7f1 f90a 	bl	8000230 <memchr>
 800f01c:	b108      	cbz	r0, 800f022 <_printf_i+0x1f2>
 800f01e:	1b40      	subs	r0, r0, r5
 800f020:	6060      	str	r0, [r4, #4]
 800f022:	6863      	ldr	r3, [r4, #4]
 800f024:	6123      	str	r3, [r4, #16]
 800f026:	2300      	movs	r3, #0
 800f028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f02c:	e7a8      	b.n	800ef80 <_printf_i+0x150>
 800f02e:	6923      	ldr	r3, [r4, #16]
 800f030:	462a      	mov	r2, r5
 800f032:	4649      	mov	r1, r9
 800f034:	4640      	mov	r0, r8
 800f036:	47d0      	blx	sl
 800f038:	3001      	adds	r0, #1
 800f03a:	d0ab      	beq.n	800ef94 <_printf_i+0x164>
 800f03c:	6823      	ldr	r3, [r4, #0]
 800f03e:	079b      	lsls	r3, r3, #30
 800f040:	d413      	bmi.n	800f06a <_printf_i+0x23a>
 800f042:	68e0      	ldr	r0, [r4, #12]
 800f044:	9b03      	ldr	r3, [sp, #12]
 800f046:	4298      	cmp	r0, r3
 800f048:	bfb8      	it	lt
 800f04a:	4618      	movlt	r0, r3
 800f04c:	e7a4      	b.n	800ef98 <_printf_i+0x168>
 800f04e:	2301      	movs	r3, #1
 800f050:	4632      	mov	r2, r6
 800f052:	4649      	mov	r1, r9
 800f054:	4640      	mov	r0, r8
 800f056:	47d0      	blx	sl
 800f058:	3001      	adds	r0, #1
 800f05a:	d09b      	beq.n	800ef94 <_printf_i+0x164>
 800f05c:	3501      	adds	r5, #1
 800f05e:	68e3      	ldr	r3, [r4, #12]
 800f060:	9903      	ldr	r1, [sp, #12]
 800f062:	1a5b      	subs	r3, r3, r1
 800f064:	42ab      	cmp	r3, r5
 800f066:	dcf2      	bgt.n	800f04e <_printf_i+0x21e>
 800f068:	e7eb      	b.n	800f042 <_printf_i+0x212>
 800f06a:	2500      	movs	r5, #0
 800f06c:	f104 0619 	add.w	r6, r4, #25
 800f070:	e7f5      	b.n	800f05e <_printf_i+0x22e>
 800f072:	bf00      	nop
 800f074:	08013d66 	.word	0x08013d66
 800f078:	08013d77 	.word	0x08013d77

0800f07c <_scanf_float>:
 800f07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f080:	b087      	sub	sp, #28
 800f082:	4617      	mov	r7, r2
 800f084:	9303      	str	r3, [sp, #12]
 800f086:	688b      	ldr	r3, [r1, #8]
 800f088:	1e5a      	subs	r2, r3, #1
 800f08a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f08e:	bf83      	ittte	hi
 800f090:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f094:	195b      	addhi	r3, r3, r5
 800f096:	9302      	strhi	r3, [sp, #8]
 800f098:	2300      	movls	r3, #0
 800f09a:	bf86      	itte	hi
 800f09c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f0a0:	608b      	strhi	r3, [r1, #8]
 800f0a2:	9302      	strls	r3, [sp, #8]
 800f0a4:	680b      	ldr	r3, [r1, #0]
 800f0a6:	468b      	mov	fp, r1
 800f0a8:	2500      	movs	r5, #0
 800f0aa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f0ae:	f84b 3b1c 	str.w	r3, [fp], #28
 800f0b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f0b6:	4680      	mov	r8, r0
 800f0b8:	460c      	mov	r4, r1
 800f0ba:	465e      	mov	r6, fp
 800f0bc:	46aa      	mov	sl, r5
 800f0be:	46a9      	mov	r9, r5
 800f0c0:	9501      	str	r5, [sp, #4]
 800f0c2:	68a2      	ldr	r2, [r4, #8]
 800f0c4:	b152      	cbz	r2, 800f0dc <_scanf_float+0x60>
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	781b      	ldrb	r3, [r3, #0]
 800f0ca:	2b4e      	cmp	r3, #78	; 0x4e
 800f0cc:	d864      	bhi.n	800f198 <_scanf_float+0x11c>
 800f0ce:	2b40      	cmp	r3, #64	; 0x40
 800f0d0:	d83c      	bhi.n	800f14c <_scanf_float+0xd0>
 800f0d2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f0d6:	b2c8      	uxtb	r0, r1
 800f0d8:	280e      	cmp	r0, #14
 800f0da:	d93a      	bls.n	800f152 <_scanf_float+0xd6>
 800f0dc:	f1b9 0f00 	cmp.w	r9, #0
 800f0e0:	d003      	beq.n	800f0ea <_scanf_float+0x6e>
 800f0e2:	6823      	ldr	r3, [r4, #0]
 800f0e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f0e8:	6023      	str	r3, [r4, #0]
 800f0ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f0ee:	f1ba 0f01 	cmp.w	sl, #1
 800f0f2:	f200 8113 	bhi.w	800f31c <_scanf_float+0x2a0>
 800f0f6:	455e      	cmp	r6, fp
 800f0f8:	f200 8105 	bhi.w	800f306 <_scanf_float+0x28a>
 800f0fc:	2501      	movs	r5, #1
 800f0fe:	4628      	mov	r0, r5
 800f100:	b007      	add	sp, #28
 800f102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f106:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f10a:	2a0d      	cmp	r2, #13
 800f10c:	d8e6      	bhi.n	800f0dc <_scanf_float+0x60>
 800f10e:	a101      	add	r1, pc, #4	; (adr r1, 800f114 <_scanf_float+0x98>)
 800f110:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f114:	0800f253 	.word	0x0800f253
 800f118:	0800f0dd 	.word	0x0800f0dd
 800f11c:	0800f0dd 	.word	0x0800f0dd
 800f120:	0800f0dd 	.word	0x0800f0dd
 800f124:	0800f2b3 	.word	0x0800f2b3
 800f128:	0800f28b 	.word	0x0800f28b
 800f12c:	0800f0dd 	.word	0x0800f0dd
 800f130:	0800f0dd 	.word	0x0800f0dd
 800f134:	0800f261 	.word	0x0800f261
 800f138:	0800f0dd 	.word	0x0800f0dd
 800f13c:	0800f0dd 	.word	0x0800f0dd
 800f140:	0800f0dd 	.word	0x0800f0dd
 800f144:	0800f0dd 	.word	0x0800f0dd
 800f148:	0800f219 	.word	0x0800f219
 800f14c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f150:	e7db      	b.n	800f10a <_scanf_float+0x8e>
 800f152:	290e      	cmp	r1, #14
 800f154:	d8c2      	bhi.n	800f0dc <_scanf_float+0x60>
 800f156:	a001      	add	r0, pc, #4	; (adr r0, 800f15c <_scanf_float+0xe0>)
 800f158:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f15c:	0800f20b 	.word	0x0800f20b
 800f160:	0800f0dd 	.word	0x0800f0dd
 800f164:	0800f20b 	.word	0x0800f20b
 800f168:	0800f29f 	.word	0x0800f29f
 800f16c:	0800f0dd 	.word	0x0800f0dd
 800f170:	0800f1b9 	.word	0x0800f1b9
 800f174:	0800f1f5 	.word	0x0800f1f5
 800f178:	0800f1f5 	.word	0x0800f1f5
 800f17c:	0800f1f5 	.word	0x0800f1f5
 800f180:	0800f1f5 	.word	0x0800f1f5
 800f184:	0800f1f5 	.word	0x0800f1f5
 800f188:	0800f1f5 	.word	0x0800f1f5
 800f18c:	0800f1f5 	.word	0x0800f1f5
 800f190:	0800f1f5 	.word	0x0800f1f5
 800f194:	0800f1f5 	.word	0x0800f1f5
 800f198:	2b6e      	cmp	r3, #110	; 0x6e
 800f19a:	d809      	bhi.n	800f1b0 <_scanf_float+0x134>
 800f19c:	2b60      	cmp	r3, #96	; 0x60
 800f19e:	d8b2      	bhi.n	800f106 <_scanf_float+0x8a>
 800f1a0:	2b54      	cmp	r3, #84	; 0x54
 800f1a2:	d077      	beq.n	800f294 <_scanf_float+0x218>
 800f1a4:	2b59      	cmp	r3, #89	; 0x59
 800f1a6:	d199      	bne.n	800f0dc <_scanf_float+0x60>
 800f1a8:	2d07      	cmp	r5, #7
 800f1aa:	d197      	bne.n	800f0dc <_scanf_float+0x60>
 800f1ac:	2508      	movs	r5, #8
 800f1ae:	e029      	b.n	800f204 <_scanf_float+0x188>
 800f1b0:	2b74      	cmp	r3, #116	; 0x74
 800f1b2:	d06f      	beq.n	800f294 <_scanf_float+0x218>
 800f1b4:	2b79      	cmp	r3, #121	; 0x79
 800f1b6:	e7f6      	b.n	800f1a6 <_scanf_float+0x12a>
 800f1b8:	6821      	ldr	r1, [r4, #0]
 800f1ba:	05c8      	lsls	r0, r1, #23
 800f1bc:	d51a      	bpl.n	800f1f4 <_scanf_float+0x178>
 800f1be:	9b02      	ldr	r3, [sp, #8]
 800f1c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f1c4:	6021      	str	r1, [r4, #0]
 800f1c6:	f109 0901 	add.w	r9, r9, #1
 800f1ca:	b11b      	cbz	r3, 800f1d4 <_scanf_float+0x158>
 800f1cc:	3b01      	subs	r3, #1
 800f1ce:	3201      	adds	r2, #1
 800f1d0:	9302      	str	r3, [sp, #8]
 800f1d2:	60a2      	str	r2, [r4, #8]
 800f1d4:	68a3      	ldr	r3, [r4, #8]
 800f1d6:	3b01      	subs	r3, #1
 800f1d8:	60a3      	str	r3, [r4, #8]
 800f1da:	6923      	ldr	r3, [r4, #16]
 800f1dc:	3301      	adds	r3, #1
 800f1de:	6123      	str	r3, [r4, #16]
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	3b01      	subs	r3, #1
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	607b      	str	r3, [r7, #4]
 800f1e8:	f340 8084 	ble.w	800f2f4 <_scanf_float+0x278>
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	3301      	adds	r3, #1
 800f1f0:	603b      	str	r3, [r7, #0]
 800f1f2:	e766      	b.n	800f0c2 <_scanf_float+0x46>
 800f1f4:	eb1a 0f05 	cmn.w	sl, r5
 800f1f8:	f47f af70 	bne.w	800f0dc <_scanf_float+0x60>
 800f1fc:	6822      	ldr	r2, [r4, #0]
 800f1fe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f202:	6022      	str	r2, [r4, #0]
 800f204:	f806 3b01 	strb.w	r3, [r6], #1
 800f208:	e7e4      	b.n	800f1d4 <_scanf_float+0x158>
 800f20a:	6822      	ldr	r2, [r4, #0]
 800f20c:	0610      	lsls	r0, r2, #24
 800f20e:	f57f af65 	bpl.w	800f0dc <_scanf_float+0x60>
 800f212:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f216:	e7f4      	b.n	800f202 <_scanf_float+0x186>
 800f218:	f1ba 0f00 	cmp.w	sl, #0
 800f21c:	d10e      	bne.n	800f23c <_scanf_float+0x1c0>
 800f21e:	f1b9 0f00 	cmp.w	r9, #0
 800f222:	d10e      	bne.n	800f242 <_scanf_float+0x1c6>
 800f224:	6822      	ldr	r2, [r4, #0]
 800f226:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f22a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f22e:	d108      	bne.n	800f242 <_scanf_float+0x1c6>
 800f230:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f234:	6022      	str	r2, [r4, #0]
 800f236:	f04f 0a01 	mov.w	sl, #1
 800f23a:	e7e3      	b.n	800f204 <_scanf_float+0x188>
 800f23c:	f1ba 0f02 	cmp.w	sl, #2
 800f240:	d055      	beq.n	800f2ee <_scanf_float+0x272>
 800f242:	2d01      	cmp	r5, #1
 800f244:	d002      	beq.n	800f24c <_scanf_float+0x1d0>
 800f246:	2d04      	cmp	r5, #4
 800f248:	f47f af48 	bne.w	800f0dc <_scanf_float+0x60>
 800f24c:	3501      	adds	r5, #1
 800f24e:	b2ed      	uxtb	r5, r5
 800f250:	e7d8      	b.n	800f204 <_scanf_float+0x188>
 800f252:	f1ba 0f01 	cmp.w	sl, #1
 800f256:	f47f af41 	bne.w	800f0dc <_scanf_float+0x60>
 800f25a:	f04f 0a02 	mov.w	sl, #2
 800f25e:	e7d1      	b.n	800f204 <_scanf_float+0x188>
 800f260:	b97d      	cbnz	r5, 800f282 <_scanf_float+0x206>
 800f262:	f1b9 0f00 	cmp.w	r9, #0
 800f266:	f47f af3c 	bne.w	800f0e2 <_scanf_float+0x66>
 800f26a:	6822      	ldr	r2, [r4, #0]
 800f26c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f270:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f274:	f47f af39 	bne.w	800f0ea <_scanf_float+0x6e>
 800f278:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f27c:	6022      	str	r2, [r4, #0]
 800f27e:	2501      	movs	r5, #1
 800f280:	e7c0      	b.n	800f204 <_scanf_float+0x188>
 800f282:	2d03      	cmp	r5, #3
 800f284:	d0e2      	beq.n	800f24c <_scanf_float+0x1d0>
 800f286:	2d05      	cmp	r5, #5
 800f288:	e7de      	b.n	800f248 <_scanf_float+0x1cc>
 800f28a:	2d02      	cmp	r5, #2
 800f28c:	f47f af26 	bne.w	800f0dc <_scanf_float+0x60>
 800f290:	2503      	movs	r5, #3
 800f292:	e7b7      	b.n	800f204 <_scanf_float+0x188>
 800f294:	2d06      	cmp	r5, #6
 800f296:	f47f af21 	bne.w	800f0dc <_scanf_float+0x60>
 800f29a:	2507      	movs	r5, #7
 800f29c:	e7b2      	b.n	800f204 <_scanf_float+0x188>
 800f29e:	6822      	ldr	r2, [r4, #0]
 800f2a0:	0591      	lsls	r1, r2, #22
 800f2a2:	f57f af1b 	bpl.w	800f0dc <_scanf_float+0x60>
 800f2a6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f2aa:	6022      	str	r2, [r4, #0]
 800f2ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800f2b0:	e7a8      	b.n	800f204 <_scanf_float+0x188>
 800f2b2:	6822      	ldr	r2, [r4, #0]
 800f2b4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f2b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f2bc:	d006      	beq.n	800f2cc <_scanf_float+0x250>
 800f2be:	0550      	lsls	r0, r2, #21
 800f2c0:	f57f af0c 	bpl.w	800f0dc <_scanf_float+0x60>
 800f2c4:	f1b9 0f00 	cmp.w	r9, #0
 800f2c8:	f43f af0f 	beq.w	800f0ea <_scanf_float+0x6e>
 800f2cc:	0591      	lsls	r1, r2, #22
 800f2ce:	bf58      	it	pl
 800f2d0:	9901      	ldrpl	r1, [sp, #4]
 800f2d2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f2d6:	bf58      	it	pl
 800f2d8:	eba9 0101 	subpl.w	r1, r9, r1
 800f2dc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f2e0:	bf58      	it	pl
 800f2e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f2e6:	6022      	str	r2, [r4, #0]
 800f2e8:	f04f 0900 	mov.w	r9, #0
 800f2ec:	e78a      	b.n	800f204 <_scanf_float+0x188>
 800f2ee:	f04f 0a03 	mov.w	sl, #3
 800f2f2:	e787      	b.n	800f204 <_scanf_float+0x188>
 800f2f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f2f8:	4639      	mov	r1, r7
 800f2fa:	4640      	mov	r0, r8
 800f2fc:	4798      	blx	r3
 800f2fe:	2800      	cmp	r0, #0
 800f300:	f43f aedf 	beq.w	800f0c2 <_scanf_float+0x46>
 800f304:	e6ea      	b.n	800f0dc <_scanf_float+0x60>
 800f306:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f30a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f30e:	463a      	mov	r2, r7
 800f310:	4640      	mov	r0, r8
 800f312:	4798      	blx	r3
 800f314:	6923      	ldr	r3, [r4, #16]
 800f316:	3b01      	subs	r3, #1
 800f318:	6123      	str	r3, [r4, #16]
 800f31a:	e6ec      	b.n	800f0f6 <_scanf_float+0x7a>
 800f31c:	1e6b      	subs	r3, r5, #1
 800f31e:	2b06      	cmp	r3, #6
 800f320:	d825      	bhi.n	800f36e <_scanf_float+0x2f2>
 800f322:	2d02      	cmp	r5, #2
 800f324:	d836      	bhi.n	800f394 <_scanf_float+0x318>
 800f326:	455e      	cmp	r6, fp
 800f328:	f67f aee8 	bls.w	800f0fc <_scanf_float+0x80>
 800f32c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f330:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f334:	463a      	mov	r2, r7
 800f336:	4640      	mov	r0, r8
 800f338:	4798      	blx	r3
 800f33a:	6923      	ldr	r3, [r4, #16]
 800f33c:	3b01      	subs	r3, #1
 800f33e:	6123      	str	r3, [r4, #16]
 800f340:	e7f1      	b.n	800f326 <_scanf_float+0x2aa>
 800f342:	9802      	ldr	r0, [sp, #8]
 800f344:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f348:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f34c:	9002      	str	r0, [sp, #8]
 800f34e:	463a      	mov	r2, r7
 800f350:	4640      	mov	r0, r8
 800f352:	4798      	blx	r3
 800f354:	6923      	ldr	r3, [r4, #16]
 800f356:	3b01      	subs	r3, #1
 800f358:	6123      	str	r3, [r4, #16]
 800f35a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f35e:	fa5f fa8a 	uxtb.w	sl, sl
 800f362:	f1ba 0f02 	cmp.w	sl, #2
 800f366:	d1ec      	bne.n	800f342 <_scanf_float+0x2c6>
 800f368:	3d03      	subs	r5, #3
 800f36a:	b2ed      	uxtb	r5, r5
 800f36c:	1b76      	subs	r6, r6, r5
 800f36e:	6823      	ldr	r3, [r4, #0]
 800f370:	05da      	lsls	r2, r3, #23
 800f372:	d52f      	bpl.n	800f3d4 <_scanf_float+0x358>
 800f374:	055b      	lsls	r3, r3, #21
 800f376:	d510      	bpl.n	800f39a <_scanf_float+0x31e>
 800f378:	455e      	cmp	r6, fp
 800f37a:	f67f aebf 	bls.w	800f0fc <_scanf_float+0x80>
 800f37e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f382:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f386:	463a      	mov	r2, r7
 800f388:	4640      	mov	r0, r8
 800f38a:	4798      	blx	r3
 800f38c:	6923      	ldr	r3, [r4, #16]
 800f38e:	3b01      	subs	r3, #1
 800f390:	6123      	str	r3, [r4, #16]
 800f392:	e7f1      	b.n	800f378 <_scanf_float+0x2fc>
 800f394:	46aa      	mov	sl, r5
 800f396:	9602      	str	r6, [sp, #8]
 800f398:	e7df      	b.n	800f35a <_scanf_float+0x2de>
 800f39a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f39e:	6923      	ldr	r3, [r4, #16]
 800f3a0:	2965      	cmp	r1, #101	; 0x65
 800f3a2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800f3a6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800f3aa:	6123      	str	r3, [r4, #16]
 800f3ac:	d00c      	beq.n	800f3c8 <_scanf_float+0x34c>
 800f3ae:	2945      	cmp	r1, #69	; 0x45
 800f3b0:	d00a      	beq.n	800f3c8 <_scanf_float+0x34c>
 800f3b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f3b6:	463a      	mov	r2, r7
 800f3b8:	4640      	mov	r0, r8
 800f3ba:	4798      	blx	r3
 800f3bc:	6923      	ldr	r3, [r4, #16]
 800f3be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f3c2:	3b01      	subs	r3, #1
 800f3c4:	1eb5      	subs	r5, r6, #2
 800f3c6:	6123      	str	r3, [r4, #16]
 800f3c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f3cc:	463a      	mov	r2, r7
 800f3ce:	4640      	mov	r0, r8
 800f3d0:	4798      	blx	r3
 800f3d2:	462e      	mov	r6, r5
 800f3d4:	6825      	ldr	r5, [r4, #0]
 800f3d6:	f015 0510 	ands.w	r5, r5, #16
 800f3da:	d159      	bne.n	800f490 <_scanf_float+0x414>
 800f3dc:	7035      	strb	r5, [r6, #0]
 800f3de:	6823      	ldr	r3, [r4, #0]
 800f3e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f3e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f3e8:	d11b      	bne.n	800f422 <_scanf_float+0x3a6>
 800f3ea:	9b01      	ldr	r3, [sp, #4]
 800f3ec:	454b      	cmp	r3, r9
 800f3ee:	eba3 0209 	sub.w	r2, r3, r9
 800f3f2:	d123      	bne.n	800f43c <_scanf_float+0x3c0>
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	4659      	mov	r1, fp
 800f3f8:	4640      	mov	r0, r8
 800f3fa:	f000 ff13 	bl	8010224 <_strtod_r>
 800f3fe:	6822      	ldr	r2, [r4, #0]
 800f400:	9b03      	ldr	r3, [sp, #12]
 800f402:	f012 0f02 	tst.w	r2, #2
 800f406:	ec57 6b10 	vmov	r6, r7, d0
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	d021      	beq.n	800f452 <_scanf_float+0x3d6>
 800f40e:	9903      	ldr	r1, [sp, #12]
 800f410:	1d1a      	adds	r2, r3, #4
 800f412:	600a      	str	r2, [r1, #0]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	e9c3 6700 	strd	r6, r7, [r3]
 800f41a:	68e3      	ldr	r3, [r4, #12]
 800f41c:	3301      	adds	r3, #1
 800f41e:	60e3      	str	r3, [r4, #12]
 800f420:	e66d      	b.n	800f0fe <_scanf_float+0x82>
 800f422:	9b04      	ldr	r3, [sp, #16]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d0e5      	beq.n	800f3f4 <_scanf_float+0x378>
 800f428:	9905      	ldr	r1, [sp, #20]
 800f42a:	230a      	movs	r3, #10
 800f42c:	462a      	mov	r2, r5
 800f42e:	3101      	adds	r1, #1
 800f430:	4640      	mov	r0, r8
 800f432:	f000 ff7f 	bl	8010334 <_strtol_r>
 800f436:	9b04      	ldr	r3, [sp, #16]
 800f438:	9e05      	ldr	r6, [sp, #20]
 800f43a:	1ac2      	subs	r2, r0, r3
 800f43c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f440:	429e      	cmp	r6, r3
 800f442:	bf28      	it	cs
 800f444:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f448:	4912      	ldr	r1, [pc, #72]	; (800f494 <_scanf_float+0x418>)
 800f44a:	4630      	mov	r0, r6
 800f44c:	f000 f8a8 	bl	800f5a0 <siprintf>
 800f450:	e7d0      	b.n	800f3f4 <_scanf_float+0x378>
 800f452:	9903      	ldr	r1, [sp, #12]
 800f454:	f012 0f04 	tst.w	r2, #4
 800f458:	f103 0204 	add.w	r2, r3, #4
 800f45c:	600a      	str	r2, [r1, #0]
 800f45e:	d1d9      	bne.n	800f414 <_scanf_float+0x398>
 800f460:	f8d3 8000 	ldr.w	r8, [r3]
 800f464:	ee10 2a10 	vmov	r2, s0
 800f468:	ee10 0a10 	vmov	r0, s0
 800f46c:	463b      	mov	r3, r7
 800f46e:	4639      	mov	r1, r7
 800f470:	f7f1 fb84 	bl	8000b7c <__aeabi_dcmpun>
 800f474:	b128      	cbz	r0, 800f482 <_scanf_float+0x406>
 800f476:	4808      	ldr	r0, [pc, #32]	; (800f498 <_scanf_float+0x41c>)
 800f478:	f000 f88c 	bl	800f594 <nanf>
 800f47c:	ed88 0a00 	vstr	s0, [r8]
 800f480:	e7cb      	b.n	800f41a <_scanf_float+0x39e>
 800f482:	4630      	mov	r0, r6
 800f484:	4639      	mov	r1, r7
 800f486:	f7f1 fbd7 	bl	8000c38 <__aeabi_d2f>
 800f48a:	f8c8 0000 	str.w	r0, [r8]
 800f48e:	e7c4      	b.n	800f41a <_scanf_float+0x39e>
 800f490:	2500      	movs	r5, #0
 800f492:	e634      	b.n	800f0fe <_scanf_float+0x82>
 800f494:	08013d88 	.word	0x08013d88
 800f498:	08013e8b 	.word	0x08013e8b

0800f49c <srand>:
 800f49c:	b538      	push	{r3, r4, r5, lr}
 800f49e:	4b10      	ldr	r3, [pc, #64]	; (800f4e0 <srand+0x44>)
 800f4a0:	681d      	ldr	r5, [r3, #0]
 800f4a2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800f4a4:	4604      	mov	r4, r0
 800f4a6:	b9b3      	cbnz	r3, 800f4d6 <srand+0x3a>
 800f4a8:	2018      	movs	r0, #24
 800f4aa:	f7ff f885 	bl	800e5b8 <malloc>
 800f4ae:	4602      	mov	r2, r0
 800f4b0:	63a8      	str	r0, [r5, #56]	; 0x38
 800f4b2:	b920      	cbnz	r0, 800f4be <srand+0x22>
 800f4b4:	4b0b      	ldr	r3, [pc, #44]	; (800f4e4 <srand+0x48>)
 800f4b6:	480c      	ldr	r0, [pc, #48]	; (800f4e8 <srand+0x4c>)
 800f4b8:	2142      	movs	r1, #66	; 0x42
 800f4ba:	f000 ff57 	bl	801036c <__assert_func>
 800f4be:	490b      	ldr	r1, [pc, #44]	; (800f4ec <srand+0x50>)
 800f4c0:	4b0b      	ldr	r3, [pc, #44]	; (800f4f0 <srand+0x54>)
 800f4c2:	e9c0 1300 	strd	r1, r3, [r0]
 800f4c6:	4b0b      	ldr	r3, [pc, #44]	; (800f4f4 <srand+0x58>)
 800f4c8:	6083      	str	r3, [r0, #8]
 800f4ca:	230b      	movs	r3, #11
 800f4cc:	8183      	strh	r3, [r0, #12]
 800f4ce:	2100      	movs	r1, #0
 800f4d0:	2001      	movs	r0, #1
 800f4d2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f4d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800f4d8:	2200      	movs	r2, #0
 800f4da:	611c      	str	r4, [r3, #16]
 800f4dc:	615a      	str	r2, [r3, #20]
 800f4de:	bd38      	pop	{r3, r4, r5, pc}
 800f4e0:	20000288 	.word	0x20000288
 800f4e4:	08013d8d 	.word	0x08013d8d
 800f4e8:	08013da4 	.word	0x08013da4
 800f4ec:	abcd330e 	.word	0xabcd330e
 800f4f0:	e66d1234 	.word	0xe66d1234
 800f4f4:	0005deec 	.word	0x0005deec

0800f4f8 <rand>:
 800f4f8:	4b16      	ldr	r3, [pc, #88]	; (800f554 <rand+0x5c>)
 800f4fa:	b510      	push	{r4, lr}
 800f4fc:	681c      	ldr	r4, [r3, #0]
 800f4fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f500:	b9b3      	cbnz	r3, 800f530 <rand+0x38>
 800f502:	2018      	movs	r0, #24
 800f504:	f7ff f858 	bl	800e5b8 <malloc>
 800f508:	63a0      	str	r0, [r4, #56]	; 0x38
 800f50a:	b928      	cbnz	r0, 800f518 <rand+0x20>
 800f50c:	4602      	mov	r2, r0
 800f50e:	4b12      	ldr	r3, [pc, #72]	; (800f558 <rand+0x60>)
 800f510:	4812      	ldr	r0, [pc, #72]	; (800f55c <rand+0x64>)
 800f512:	214e      	movs	r1, #78	; 0x4e
 800f514:	f000 ff2a 	bl	801036c <__assert_func>
 800f518:	4a11      	ldr	r2, [pc, #68]	; (800f560 <rand+0x68>)
 800f51a:	4b12      	ldr	r3, [pc, #72]	; (800f564 <rand+0x6c>)
 800f51c:	e9c0 2300 	strd	r2, r3, [r0]
 800f520:	4b11      	ldr	r3, [pc, #68]	; (800f568 <rand+0x70>)
 800f522:	6083      	str	r3, [r0, #8]
 800f524:	230b      	movs	r3, #11
 800f526:	8183      	strh	r3, [r0, #12]
 800f528:	2201      	movs	r2, #1
 800f52a:	2300      	movs	r3, #0
 800f52c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f530:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800f532:	4a0e      	ldr	r2, [pc, #56]	; (800f56c <rand+0x74>)
 800f534:	6920      	ldr	r0, [r4, #16]
 800f536:	6963      	ldr	r3, [r4, #20]
 800f538:	490d      	ldr	r1, [pc, #52]	; (800f570 <rand+0x78>)
 800f53a:	4342      	muls	r2, r0
 800f53c:	fb01 2203 	mla	r2, r1, r3, r2
 800f540:	fba0 0101 	umull	r0, r1, r0, r1
 800f544:	1c43      	adds	r3, r0, #1
 800f546:	eb42 0001 	adc.w	r0, r2, r1
 800f54a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800f54e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f552:	bd10      	pop	{r4, pc}
 800f554:	20000288 	.word	0x20000288
 800f558:	08013d8d 	.word	0x08013d8d
 800f55c:	08013da4 	.word	0x08013da4
 800f560:	abcd330e 	.word	0xabcd330e
 800f564:	e66d1234 	.word	0xe66d1234
 800f568:	0005deec 	.word	0x0005deec
 800f56c:	5851f42d 	.word	0x5851f42d
 800f570:	4c957f2d 	.word	0x4c957f2d

0800f574 <_sbrk_r>:
 800f574:	b538      	push	{r3, r4, r5, lr}
 800f576:	4d06      	ldr	r5, [pc, #24]	; (800f590 <_sbrk_r+0x1c>)
 800f578:	2300      	movs	r3, #0
 800f57a:	4604      	mov	r4, r0
 800f57c:	4608      	mov	r0, r1
 800f57e:	602b      	str	r3, [r5, #0]
 800f580:	f7f4 fe8c 	bl	800429c <_sbrk>
 800f584:	1c43      	adds	r3, r0, #1
 800f586:	d102      	bne.n	800f58e <_sbrk_r+0x1a>
 800f588:	682b      	ldr	r3, [r5, #0]
 800f58a:	b103      	cbz	r3, 800f58e <_sbrk_r+0x1a>
 800f58c:	6023      	str	r3, [r4, #0]
 800f58e:	bd38      	pop	{r3, r4, r5, pc}
 800f590:	20012f08 	.word	0x20012f08

0800f594 <nanf>:
 800f594:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f59c <nanf+0x8>
 800f598:	4770      	bx	lr
 800f59a:	bf00      	nop
 800f59c:	7fc00000 	.word	0x7fc00000

0800f5a0 <siprintf>:
 800f5a0:	b40e      	push	{r1, r2, r3}
 800f5a2:	b500      	push	{lr}
 800f5a4:	b09c      	sub	sp, #112	; 0x70
 800f5a6:	ab1d      	add	r3, sp, #116	; 0x74
 800f5a8:	9002      	str	r0, [sp, #8]
 800f5aa:	9006      	str	r0, [sp, #24]
 800f5ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f5b0:	4809      	ldr	r0, [pc, #36]	; (800f5d8 <siprintf+0x38>)
 800f5b2:	9107      	str	r1, [sp, #28]
 800f5b4:	9104      	str	r1, [sp, #16]
 800f5b6:	4909      	ldr	r1, [pc, #36]	; (800f5dc <siprintf+0x3c>)
 800f5b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5bc:	9105      	str	r1, [sp, #20]
 800f5be:	6800      	ldr	r0, [r0, #0]
 800f5c0:	9301      	str	r3, [sp, #4]
 800f5c2:	a902      	add	r1, sp, #8
 800f5c4:	f002 fe60 	bl	8012288 <_svfiprintf_r>
 800f5c8:	9b02      	ldr	r3, [sp, #8]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	701a      	strb	r2, [r3, #0]
 800f5ce:	b01c      	add	sp, #112	; 0x70
 800f5d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5d4:	b003      	add	sp, #12
 800f5d6:	4770      	bx	lr
 800f5d8:	20000288 	.word	0x20000288
 800f5dc:	ffff0208 	.word	0xffff0208

0800f5e0 <sulp>:
 800f5e0:	b570      	push	{r4, r5, r6, lr}
 800f5e2:	4604      	mov	r4, r0
 800f5e4:	460d      	mov	r5, r1
 800f5e6:	ec45 4b10 	vmov	d0, r4, r5
 800f5ea:	4616      	mov	r6, r2
 800f5ec:	f002 fc8c 	bl	8011f08 <__ulp>
 800f5f0:	ec51 0b10 	vmov	r0, r1, d0
 800f5f4:	b17e      	cbz	r6, 800f616 <sulp+0x36>
 800f5f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f5fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	dd09      	ble.n	800f616 <sulp+0x36>
 800f602:	051b      	lsls	r3, r3, #20
 800f604:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f608:	2400      	movs	r4, #0
 800f60a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f60e:	4622      	mov	r2, r4
 800f610:	462b      	mov	r3, r5
 800f612:	f7f1 f819 	bl	8000648 <__aeabi_dmul>
 800f616:	bd70      	pop	{r4, r5, r6, pc}

0800f618 <_strtod_l>:
 800f618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f61c:	ed2d 8b02 	vpush	{d8}
 800f620:	b09d      	sub	sp, #116	; 0x74
 800f622:	461f      	mov	r7, r3
 800f624:	2300      	movs	r3, #0
 800f626:	9318      	str	r3, [sp, #96]	; 0x60
 800f628:	4ba2      	ldr	r3, [pc, #648]	; (800f8b4 <_strtod_l+0x29c>)
 800f62a:	9213      	str	r2, [sp, #76]	; 0x4c
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	9305      	str	r3, [sp, #20]
 800f630:	4604      	mov	r4, r0
 800f632:	4618      	mov	r0, r3
 800f634:	4688      	mov	r8, r1
 800f636:	f7f0 fdf3 	bl	8000220 <strlen>
 800f63a:	f04f 0a00 	mov.w	sl, #0
 800f63e:	4605      	mov	r5, r0
 800f640:	f04f 0b00 	mov.w	fp, #0
 800f644:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f648:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f64a:	781a      	ldrb	r2, [r3, #0]
 800f64c:	2a2b      	cmp	r2, #43	; 0x2b
 800f64e:	d04e      	beq.n	800f6ee <_strtod_l+0xd6>
 800f650:	d83b      	bhi.n	800f6ca <_strtod_l+0xb2>
 800f652:	2a0d      	cmp	r2, #13
 800f654:	d834      	bhi.n	800f6c0 <_strtod_l+0xa8>
 800f656:	2a08      	cmp	r2, #8
 800f658:	d834      	bhi.n	800f6c4 <_strtod_l+0xac>
 800f65a:	2a00      	cmp	r2, #0
 800f65c:	d03e      	beq.n	800f6dc <_strtod_l+0xc4>
 800f65e:	2300      	movs	r3, #0
 800f660:	930a      	str	r3, [sp, #40]	; 0x28
 800f662:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f664:	7833      	ldrb	r3, [r6, #0]
 800f666:	2b30      	cmp	r3, #48	; 0x30
 800f668:	f040 80b0 	bne.w	800f7cc <_strtod_l+0x1b4>
 800f66c:	7873      	ldrb	r3, [r6, #1]
 800f66e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f672:	2b58      	cmp	r3, #88	; 0x58
 800f674:	d168      	bne.n	800f748 <_strtod_l+0x130>
 800f676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f678:	9301      	str	r3, [sp, #4]
 800f67a:	ab18      	add	r3, sp, #96	; 0x60
 800f67c:	9702      	str	r7, [sp, #8]
 800f67e:	9300      	str	r3, [sp, #0]
 800f680:	4a8d      	ldr	r2, [pc, #564]	; (800f8b8 <_strtod_l+0x2a0>)
 800f682:	ab19      	add	r3, sp, #100	; 0x64
 800f684:	a917      	add	r1, sp, #92	; 0x5c
 800f686:	4620      	mov	r0, r4
 800f688:	f001 fd82 	bl	8011190 <__gethex>
 800f68c:	f010 0707 	ands.w	r7, r0, #7
 800f690:	4605      	mov	r5, r0
 800f692:	d005      	beq.n	800f6a0 <_strtod_l+0x88>
 800f694:	2f06      	cmp	r7, #6
 800f696:	d12c      	bne.n	800f6f2 <_strtod_l+0xda>
 800f698:	3601      	adds	r6, #1
 800f69a:	2300      	movs	r3, #0
 800f69c:	9617      	str	r6, [sp, #92]	; 0x5c
 800f69e:	930a      	str	r3, [sp, #40]	; 0x28
 800f6a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	f040 8590 	bne.w	80101c8 <_strtod_l+0xbb0>
 800f6a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6aa:	b1eb      	cbz	r3, 800f6e8 <_strtod_l+0xd0>
 800f6ac:	4652      	mov	r2, sl
 800f6ae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f6b2:	ec43 2b10 	vmov	d0, r2, r3
 800f6b6:	b01d      	add	sp, #116	; 0x74
 800f6b8:	ecbd 8b02 	vpop	{d8}
 800f6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6c0:	2a20      	cmp	r2, #32
 800f6c2:	d1cc      	bne.n	800f65e <_strtod_l+0x46>
 800f6c4:	3301      	adds	r3, #1
 800f6c6:	9317      	str	r3, [sp, #92]	; 0x5c
 800f6c8:	e7be      	b.n	800f648 <_strtod_l+0x30>
 800f6ca:	2a2d      	cmp	r2, #45	; 0x2d
 800f6cc:	d1c7      	bne.n	800f65e <_strtod_l+0x46>
 800f6ce:	2201      	movs	r2, #1
 800f6d0:	920a      	str	r2, [sp, #40]	; 0x28
 800f6d2:	1c5a      	adds	r2, r3, #1
 800f6d4:	9217      	str	r2, [sp, #92]	; 0x5c
 800f6d6:	785b      	ldrb	r3, [r3, #1]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d1c2      	bne.n	800f662 <_strtod_l+0x4a>
 800f6dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f6de:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	f040 856e 	bne.w	80101c4 <_strtod_l+0xbac>
 800f6e8:	4652      	mov	r2, sl
 800f6ea:	465b      	mov	r3, fp
 800f6ec:	e7e1      	b.n	800f6b2 <_strtod_l+0x9a>
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	e7ee      	b.n	800f6d0 <_strtod_l+0xb8>
 800f6f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f6f4:	b13a      	cbz	r2, 800f706 <_strtod_l+0xee>
 800f6f6:	2135      	movs	r1, #53	; 0x35
 800f6f8:	a81a      	add	r0, sp, #104	; 0x68
 800f6fa:	f002 fd10 	bl	801211e <__copybits>
 800f6fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f700:	4620      	mov	r0, r4
 800f702:	f002 f8cf 	bl	80118a4 <_Bfree>
 800f706:	3f01      	subs	r7, #1
 800f708:	2f04      	cmp	r7, #4
 800f70a:	d806      	bhi.n	800f71a <_strtod_l+0x102>
 800f70c:	e8df f007 	tbb	[pc, r7]
 800f710:	1714030a 	.word	0x1714030a
 800f714:	0a          	.byte	0x0a
 800f715:	00          	.byte	0x00
 800f716:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800f71a:	0728      	lsls	r0, r5, #28
 800f71c:	d5c0      	bpl.n	800f6a0 <_strtod_l+0x88>
 800f71e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f722:	e7bd      	b.n	800f6a0 <_strtod_l+0x88>
 800f724:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800f728:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f72a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f72e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f732:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f736:	e7f0      	b.n	800f71a <_strtod_l+0x102>
 800f738:	f8df b180 	ldr.w	fp, [pc, #384]	; 800f8bc <_strtod_l+0x2a4>
 800f73c:	e7ed      	b.n	800f71a <_strtod_l+0x102>
 800f73e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f742:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800f746:	e7e8      	b.n	800f71a <_strtod_l+0x102>
 800f748:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f74a:	1c5a      	adds	r2, r3, #1
 800f74c:	9217      	str	r2, [sp, #92]	; 0x5c
 800f74e:	785b      	ldrb	r3, [r3, #1]
 800f750:	2b30      	cmp	r3, #48	; 0x30
 800f752:	d0f9      	beq.n	800f748 <_strtod_l+0x130>
 800f754:	2b00      	cmp	r3, #0
 800f756:	d0a3      	beq.n	800f6a0 <_strtod_l+0x88>
 800f758:	2301      	movs	r3, #1
 800f75a:	f04f 0900 	mov.w	r9, #0
 800f75e:	9304      	str	r3, [sp, #16]
 800f760:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f762:	9308      	str	r3, [sp, #32]
 800f764:	f8cd 901c 	str.w	r9, [sp, #28]
 800f768:	464f      	mov	r7, r9
 800f76a:	220a      	movs	r2, #10
 800f76c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f76e:	7806      	ldrb	r6, [r0, #0]
 800f770:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f774:	b2d9      	uxtb	r1, r3
 800f776:	2909      	cmp	r1, #9
 800f778:	d92a      	bls.n	800f7d0 <_strtod_l+0x1b8>
 800f77a:	9905      	ldr	r1, [sp, #20]
 800f77c:	462a      	mov	r2, r5
 800f77e:	f002 ffe7 	bl	8012750 <strncmp>
 800f782:	b398      	cbz	r0, 800f7ec <_strtod_l+0x1d4>
 800f784:	2000      	movs	r0, #0
 800f786:	4632      	mov	r2, r6
 800f788:	463d      	mov	r5, r7
 800f78a:	9005      	str	r0, [sp, #20]
 800f78c:	4603      	mov	r3, r0
 800f78e:	2a65      	cmp	r2, #101	; 0x65
 800f790:	d001      	beq.n	800f796 <_strtod_l+0x17e>
 800f792:	2a45      	cmp	r2, #69	; 0x45
 800f794:	d118      	bne.n	800f7c8 <_strtod_l+0x1b0>
 800f796:	b91d      	cbnz	r5, 800f7a0 <_strtod_l+0x188>
 800f798:	9a04      	ldr	r2, [sp, #16]
 800f79a:	4302      	orrs	r2, r0
 800f79c:	d09e      	beq.n	800f6dc <_strtod_l+0xc4>
 800f79e:	2500      	movs	r5, #0
 800f7a0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800f7a4:	f108 0201 	add.w	r2, r8, #1
 800f7a8:	9217      	str	r2, [sp, #92]	; 0x5c
 800f7aa:	f898 2001 	ldrb.w	r2, [r8, #1]
 800f7ae:	2a2b      	cmp	r2, #43	; 0x2b
 800f7b0:	d075      	beq.n	800f89e <_strtod_l+0x286>
 800f7b2:	2a2d      	cmp	r2, #45	; 0x2d
 800f7b4:	d07b      	beq.n	800f8ae <_strtod_l+0x296>
 800f7b6:	f04f 0c00 	mov.w	ip, #0
 800f7ba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f7be:	2909      	cmp	r1, #9
 800f7c0:	f240 8082 	bls.w	800f8c8 <_strtod_l+0x2b0>
 800f7c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f7c8:	2600      	movs	r6, #0
 800f7ca:	e09d      	b.n	800f908 <_strtod_l+0x2f0>
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	e7c4      	b.n	800f75a <_strtod_l+0x142>
 800f7d0:	2f08      	cmp	r7, #8
 800f7d2:	bfd8      	it	le
 800f7d4:	9907      	ldrle	r1, [sp, #28]
 800f7d6:	f100 0001 	add.w	r0, r0, #1
 800f7da:	bfda      	itte	le
 800f7dc:	fb02 3301 	mlale	r3, r2, r1, r3
 800f7e0:	9307      	strle	r3, [sp, #28]
 800f7e2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f7e6:	3701      	adds	r7, #1
 800f7e8:	9017      	str	r0, [sp, #92]	; 0x5c
 800f7ea:	e7bf      	b.n	800f76c <_strtod_l+0x154>
 800f7ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f7ee:	195a      	adds	r2, r3, r5
 800f7f0:	9217      	str	r2, [sp, #92]	; 0x5c
 800f7f2:	5d5a      	ldrb	r2, [r3, r5]
 800f7f4:	2f00      	cmp	r7, #0
 800f7f6:	d037      	beq.n	800f868 <_strtod_l+0x250>
 800f7f8:	9005      	str	r0, [sp, #20]
 800f7fa:	463d      	mov	r5, r7
 800f7fc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f800:	2b09      	cmp	r3, #9
 800f802:	d912      	bls.n	800f82a <_strtod_l+0x212>
 800f804:	2301      	movs	r3, #1
 800f806:	e7c2      	b.n	800f78e <_strtod_l+0x176>
 800f808:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f80a:	1c5a      	adds	r2, r3, #1
 800f80c:	9217      	str	r2, [sp, #92]	; 0x5c
 800f80e:	785a      	ldrb	r2, [r3, #1]
 800f810:	3001      	adds	r0, #1
 800f812:	2a30      	cmp	r2, #48	; 0x30
 800f814:	d0f8      	beq.n	800f808 <_strtod_l+0x1f0>
 800f816:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f81a:	2b08      	cmp	r3, #8
 800f81c:	f200 84d9 	bhi.w	80101d2 <_strtod_l+0xbba>
 800f820:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f822:	9005      	str	r0, [sp, #20]
 800f824:	2000      	movs	r0, #0
 800f826:	9308      	str	r3, [sp, #32]
 800f828:	4605      	mov	r5, r0
 800f82a:	3a30      	subs	r2, #48	; 0x30
 800f82c:	f100 0301 	add.w	r3, r0, #1
 800f830:	d014      	beq.n	800f85c <_strtod_l+0x244>
 800f832:	9905      	ldr	r1, [sp, #20]
 800f834:	4419      	add	r1, r3
 800f836:	9105      	str	r1, [sp, #20]
 800f838:	462b      	mov	r3, r5
 800f83a:	eb00 0e05 	add.w	lr, r0, r5
 800f83e:	210a      	movs	r1, #10
 800f840:	4573      	cmp	r3, lr
 800f842:	d113      	bne.n	800f86c <_strtod_l+0x254>
 800f844:	182b      	adds	r3, r5, r0
 800f846:	2b08      	cmp	r3, #8
 800f848:	f105 0501 	add.w	r5, r5, #1
 800f84c:	4405      	add	r5, r0
 800f84e:	dc1c      	bgt.n	800f88a <_strtod_l+0x272>
 800f850:	9907      	ldr	r1, [sp, #28]
 800f852:	230a      	movs	r3, #10
 800f854:	fb03 2301 	mla	r3, r3, r1, r2
 800f858:	9307      	str	r3, [sp, #28]
 800f85a:	2300      	movs	r3, #0
 800f85c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f85e:	1c51      	adds	r1, r2, #1
 800f860:	9117      	str	r1, [sp, #92]	; 0x5c
 800f862:	7852      	ldrb	r2, [r2, #1]
 800f864:	4618      	mov	r0, r3
 800f866:	e7c9      	b.n	800f7fc <_strtod_l+0x1e4>
 800f868:	4638      	mov	r0, r7
 800f86a:	e7d2      	b.n	800f812 <_strtod_l+0x1fa>
 800f86c:	2b08      	cmp	r3, #8
 800f86e:	dc04      	bgt.n	800f87a <_strtod_l+0x262>
 800f870:	9e07      	ldr	r6, [sp, #28]
 800f872:	434e      	muls	r6, r1
 800f874:	9607      	str	r6, [sp, #28]
 800f876:	3301      	adds	r3, #1
 800f878:	e7e2      	b.n	800f840 <_strtod_l+0x228>
 800f87a:	f103 0c01 	add.w	ip, r3, #1
 800f87e:	f1bc 0f10 	cmp.w	ip, #16
 800f882:	bfd8      	it	le
 800f884:	fb01 f909 	mulle.w	r9, r1, r9
 800f888:	e7f5      	b.n	800f876 <_strtod_l+0x25e>
 800f88a:	2d10      	cmp	r5, #16
 800f88c:	bfdc      	itt	le
 800f88e:	230a      	movle	r3, #10
 800f890:	fb03 2909 	mlale	r9, r3, r9, r2
 800f894:	e7e1      	b.n	800f85a <_strtod_l+0x242>
 800f896:	2300      	movs	r3, #0
 800f898:	9305      	str	r3, [sp, #20]
 800f89a:	2301      	movs	r3, #1
 800f89c:	e77c      	b.n	800f798 <_strtod_l+0x180>
 800f89e:	f04f 0c00 	mov.w	ip, #0
 800f8a2:	f108 0202 	add.w	r2, r8, #2
 800f8a6:	9217      	str	r2, [sp, #92]	; 0x5c
 800f8a8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800f8ac:	e785      	b.n	800f7ba <_strtod_l+0x1a2>
 800f8ae:	f04f 0c01 	mov.w	ip, #1
 800f8b2:	e7f6      	b.n	800f8a2 <_strtod_l+0x28a>
 800f8b4:	0801406c 	.word	0x0801406c
 800f8b8:	08013e00 	.word	0x08013e00
 800f8bc:	7ff00000 	.word	0x7ff00000
 800f8c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f8c2:	1c51      	adds	r1, r2, #1
 800f8c4:	9117      	str	r1, [sp, #92]	; 0x5c
 800f8c6:	7852      	ldrb	r2, [r2, #1]
 800f8c8:	2a30      	cmp	r2, #48	; 0x30
 800f8ca:	d0f9      	beq.n	800f8c0 <_strtod_l+0x2a8>
 800f8cc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f8d0:	2908      	cmp	r1, #8
 800f8d2:	f63f af79 	bhi.w	800f7c8 <_strtod_l+0x1b0>
 800f8d6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f8da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f8dc:	9206      	str	r2, [sp, #24]
 800f8de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f8e0:	1c51      	adds	r1, r2, #1
 800f8e2:	9117      	str	r1, [sp, #92]	; 0x5c
 800f8e4:	7852      	ldrb	r2, [r2, #1]
 800f8e6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f8ea:	2e09      	cmp	r6, #9
 800f8ec:	d937      	bls.n	800f95e <_strtod_l+0x346>
 800f8ee:	9e06      	ldr	r6, [sp, #24]
 800f8f0:	1b89      	subs	r1, r1, r6
 800f8f2:	2908      	cmp	r1, #8
 800f8f4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f8f8:	dc02      	bgt.n	800f900 <_strtod_l+0x2e8>
 800f8fa:	4576      	cmp	r6, lr
 800f8fc:	bfa8      	it	ge
 800f8fe:	4676      	movge	r6, lr
 800f900:	f1bc 0f00 	cmp.w	ip, #0
 800f904:	d000      	beq.n	800f908 <_strtod_l+0x2f0>
 800f906:	4276      	negs	r6, r6
 800f908:	2d00      	cmp	r5, #0
 800f90a:	d14d      	bne.n	800f9a8 <_strtod_l+0x390>
 800f90c:	9904      	ldr	r1, [sp, #16]
 800f90e:	4301      	orrs	r1, r0
 800f910:	f47f aec6 	bne.w	800f6a0 <_strtod_l+0x88>
 800f914:	2b00      	cmp	r3, #0
 800f916:	f47f aee1 	bne.w	800f6dc <_strtod_l+0xc4>
 800f91a:	2a69      	cmp	r2, #105	; 0x69
 800f91c:	d027      	beq.n	800f96e <_strtod_l+0x356>
 800f91e:	dc24      	bgt.n	800f96a <_strtod_l+0x352>
 800f920:	2a49      	cmp	r2, #73	; 0x49
 800f922:	d024      	beq.n	800f96e <_strtod_l+0x356>
 800f924:	2a4e      	cmp	r2, #78	; 0x4e
 800f926:	f47f aed9 	bne.w	800f6dc <_strtod_l+0xc4>
 800f92a:	499f      	ldr	r1, [pc, #636]	; (800fba8 <_strtod_l+0x590>)
 800f92c:	a817      	add	r0, sp, #92	; 0x5c
 800f92e:	f001 fe87 	bl	8011640 <__match>
 800f932:	2800      	cmp	r0, #0
 800f934:	f43f aed2 	beq.w	800f6dc <_strtod_l+0xc4>
 800f938:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	2b28      	cmp	r3, #40	; 0x28
 800f93e:	d12d      	bne.n	800f99c <_strtod_l+0x384>
 800f940:	499a      	ldr	r1, [pc, #616]	; (800fbac <_strtod_l+0x594>)
 800f942:	aa1a      	add	r2, sp, #104	; 0x68
 800f944:	a817      	add	r0, sp, #92	; 0x5c
 800f946:	f001 fe8f 	bl	8011668 <__hexnan>
 800f94a:	2805      	cmp	r0, #5
 800f94c:	d126      	bne.n	800f99c <_strtod_l+0x384>
 800f94e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f950:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800f954:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f958:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f95c:	e6a0      	b.n	800f6a0 <_strtod_l+0x88>
 800f95e:	210a      	movs	r1, #10
 800f960:	fb01 2e0e 	mla	lr, r1, lr, r2
 800f964:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f968:	e7b9      	b.n	800f8de <_strtod_l+0x2c6>
 800f96a:	2a6e      	cmp	r2, #110	; 0x6e
 800f96c:	e7db      	b.n	800f926 <_strtod_l+0x30e>
 800f96e:	4990      	ldr	r1, [pc, #576]	; (800fbb0 <_strtod_l+0x598>)
 800f970:	a817      	add	r0, sp, #92	; 0x5c
 800f972:	f001 fe65 	bl	8011640 <__match>
 800f976:	2800      	cmp	r0, #0
 800f978:	f43f aeb0 	beq.w	800f6dc <_strtod_l+0xc4>
 800f97c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f97e:	498d      	ldr	r1, [pc, #564]	; (800fbb4 <_strtod_l+0x59c>)
 800f980:	3b01      	subs	r3, #1
 800f982:	a817      	add	r0, sp, #92	; 0x5c
 800f984:	9317      	str	r3, [sp, #92]	; 0x5c
 800f986:	f001 fe5b 	bl	8011640 <__match>
 800f98a:	b910      	cbnz	r0, 800f992 <_strtod_l+0x37a>
 800f98c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f98e:	3301      	adds	r3, #1
 800f990:	9317      	str	r3, [sp, #92]	; 0x5c
 800f992:	f8df b230 	ldr.w	fp, [pc, #560]	; 800fbc4 <_strtod_l+0x5ac>
 800f996:	f04f 0a00 	mov.w	sl, #0
 800f99a:	e681      	b.n	800f6a0 <_strtod_l+0x88>
 800f99c:	4886      	ldr	r0, [pc, #536]	; (800fbb8 <_strtod_l+0x5a0>)
 800f99e:	f002 fecf 	bl	8012740 <nan>
 800f9a2:	ec5b ab10 	vmov	sl, fp, d0
 800f9a6:	e67b      	b.n	800f6a0 <_strtod_l+0x88>
 800f9a8:	9b05      	ldr	r3, [sp, #20]
 800f9aa:	9807      	ldr	r0, [sp, #28]
 800f9ac:	1af3      	subs	r3, r6, r3
 800f9ae:	2f00      	cmp	r7, #0
 800f9b0:	bf08      	it	eq
 800f9b2:	462f      	moveq	r7, r5
 800f9b4:	2d10      	cmp	r5, #16
 800f9b6:	9306      	str	r3, [sp, #24]
 800f9b8:	46a8      	mov	r8, r5
 800f9ba:	bfa8      	it	ge
 800f9bc:	f04f 0810 	movge.w	r8, #16
 800f9c0:	f7f0 fdc8 	bl	8000554 <__aeabi_ui2d>
 800f9c4:	2d09      	cmp	r5, #9
 800f9c6:	4682      	mov	sl, r0
 800f9c8:	468b      	mov	fp, r1
 800f9ca:	dd13      	ble.n	800f9f4 <_strtod_l+0x3dc>
 800f9cc:	4b7b      	ldr	r3, [pc, #492]	; (800fbbc <_strtod_l+0x5a4>)
 800f9ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f9d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f9d6:	f7f0 fe37 	bl	8000648 <__aeabi_dmul>
 800f9da:	4682      	mov	sl, r0
 800f9dc:	4648      	mov	r0, r9
 800f9de:	468b      	mov	fp, r1
 800f9e0:	f7f0 fdb8 	bl	8000554 <__aeabi_ui2d>
 800f9e4:	4602      	mov	r2, r0
 800f9e6:	460b      	mov	r3, r1
 800f9e8:	4650      	mov	r0, sl
 800f9ea:	4659      	mov	r1, fp
 800f9ec:	f7f0 fc76 	bl	80002dc <__adddf3>
 800f9f0:	4682      	mov	sl, r0
 800f9f2:	468b      	mov	fp, r1
 800f9f4:	2d0f      	cmp	r5, #15
 800f9f6:	dc38      	bgt.n	800fa6a <_strtod_l+0x452>
 800f9f8:	9b06      	ldr	r3, [sp, #24]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	f43f ae50 	beq.w	800f6a0 <_strtod_l+0x88>
 800fa00:	dd24      	ble.n	800fa4c <_strtod_l+0x434>
 800fa02:	2b16      	cmp	r3, #22
 800fa04:	dc0b      	bgt.n	800fa1e <_strtod_l+0x406>
 800fa06:	496d      	ldr	r1, [pc, #436]	; (800fbbc <_strtod_l+0x5a4>)
 800fa08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fa0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa10:	4652      	mov	r2, sl
 800fa12:	465b      	mov	r3, fp
 800fa14:	f7f0 fe18 	bl	8000648 <__aeabi_dmul>
 800fa18:	4682      	mov	sl, r0
 800fa1a:	468b      	mov	fp, r1
 800fa1c:	e640      	b.n	800f6a0 <_strtod_l+0x88>
 800fa1e:	9a06      	ldr	r2, [sp, #24]
 800fa20:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800fa24:	4293      	cmp	r3, r2
 800fa26:	db20      	blt.n	800fa6a <_strtod_l+0x452>
 800fa28:	4c64      	ldr	r4, [pc, #400]	; (800fbbc <_strtod_l+0x5a4>)
 800fa2a:	f1c5 050f 	rsb	r5, r5, #15
 800fa2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fa32:	4652      	mov	r2, sl
 800fa34:	465b      	mov	r3, fp
 800fa36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa3a:	f7f0 fe05 	bl	8000648 <__aeabi_dmul>
 800fa3e:	9b06      	ldr	r3, [sp, #24]
 800fa40:	1b5d      	subs	r5, r3, r5
 800fa42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fa46:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fa4a:	e7e3      	b.n	800fa14 <_strtod_l+0x3fc>
 800fa4c:	9b06      	ldr	r3, [sp, #24]
 800fa4e:	3316      	adds	r3, #22
 800fa50:	db0b      	blt.n	800fa6a <_strtod_l+0x452>
 800fa52:	9b05      	ldr	r3, [sp, #20]
 800fa54:	1b9e      	subs	r6, r3, r6
 800fa56:	4b59      	ldr	r3, [pc, #356]	; (800fbbc <_strtod_l+0x5a4>)
 800fa58:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800fa5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fa60:	4650      	mov	r0, sl
 800fa62:	4659      	mov	r1, fp
 800fa64:	f7f0 ff1a 	bl	800089c <__aeabi_ddiv>
 800fa68:	e7d6      	b.n	800fa18 <_strtod_l+0x400>
 800fa6a:	9b06      	ldr	r3, [sp, #24]
 800fa6c:	eba5 0808 	sub.w	r8, r5, r8
 800fa70:	4498      	add	r8, r3
 800fa72:	f1b8 0f00 	cmp.w	r8, #0
 800fa76:	dd74      	ble.n	800fb62 <_strtod_l+0x54a>
 800fa78:	f018 030f 	ands.w	r3, r8, #15
 800fa7c:	d00a      	beq.n	800fa94 <_strtod_l+0x47c>
 800fa7e:	494f      	ldr	r1, [pc, #316]	; (800fbbc <_strtod_l+0x5a4>)
 800fa80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fa84:	4652      	mov	r2, sl
 800fa86:	465b      	mov	r3, fp
 800fa88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa8c:	f7f0 fddc 	bl	8000648 <__aeabi_dmul>
 800fa90:	4682      	mov	sl, r0
 800fa92:	468b      	mov	fp, r1
 800fa94:	f038 080f 	bics.w	r8, r8, #15
 800fa98:	d04f      	beq.n	800fb3a <_strtod_l+0x522>
 800fa9a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fa9e:	dd22      	ble.n	800fae6 <_strtod_l+0x4ce>
 800faa0:	2500      	movs	r5, #0
 800faa2:	462e      	mov	r6, r5
 800faa4:	9507      	str	r5, [sp, #28]
 800faa6:	9505      	str	r5, [sp, #20]
 800faa8:	2322      	movs	r3, #34	; 0x22
 800faaa:	f8df b118 	ldr.w	fp, [pc, #280]	; 800fbc4 <_strtod_l+0x5ac>
 800faae:	6023      	str	r3, [r4, #0]
 800fab0:	f04f 0a00 	mov.w	sl, #0
 800fab4:	9b07      	ldr	r3, [sp, #28]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	f43f adf2 	beq.w	800f6a0 <_strtod_l+0x88>
 800fabc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fabe:	4620      	mov	r0, r4
 800fac0:	f001 fef0 	bl	80118a4 <_Bfree>
 800fac4:	9905      	ldr	r1, [sp, #20]
 800fac6:	4620      	mov	r0, r4
 800fac8:	f001 feec 	bl	80118a4 <_Bfree>
 800facc:	4631      	mov	r1, r6
 800face:	4620      	mov	r0, r4
 800fad0:	f001 fee8 	bl	80118a4 <_Bfree>
 800fad4:	9907      	ldr	r1, [sp, #28]
 800fad6:	4620      	mov	r0, r4
 800fad8:	f001 fee4 	bl	80118a4 <_Bfree>
 800fadc:	4629      	mov	r1, r5
 800fade:	4620      	mov	r0, r4
 800fae0:	f001 fee0 	bl	80118a4 <_Bfree>
 800fae4:	e5dc      	b.n	800f6a0 <_strtod_l+0x88>
 800fae6:	4b36      	ldr	r3, [pc, #216]	; (800fbc0 <_strtod_l+0x5a8>)
 800fae8:	9304      	str	r3, [sp, #16]
 800faea:	2300      	movs	r3, #0
 800faec:	ea4f 1828 	mov.w	r8, r8, asr #4
 800faf0:	4650      	mov	r0, sl
 800faf2:	4659      	mov	r1, fp
 800faf4:	4699      	mov	r9, r3
 800faf6:	f1b8 0f01 	cmp.w	r8, #1
 800fafa:	dc21      	bgt.n	800fb40 <_strtod_l+0x528>
 800fafc:	b10b      	cbz	r3, 800fb02 <_strtod_l+0x4ea>
 800fafe:	4682      	mov	sl, r0
 800fb00:	468b      	mov	fp, r1
 800fb02:	4b2f      	ldr	r3, [pc, #188]	; (800fbc0 <_strtod_l+0x5a8>)
 800fb04:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800fb08:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800fb0c:	4652      	mov	r2, sl
 800fb0e:	465b      	mov	r3, fp
 800fb10:	e9d9 0100 	ldrd	r0, r1, [r9]
 800fb14:	f7f0 fd98 	bl	8000648 <__aeabi_dmul>
 800fb18:	4b2a      	ldr	r3, [pc, #168]	; (800fbc4 <_strtod_l+0x5ac>)
 800fb1a:	460a      	mov	r2, r1
 800fb1c:	400b      	ands	r3, r1
 800fb1e:	492a      	ldr	r1, [pc, #168]	; (800fbc8 <_strtod_l+0x5b0>)
 800fb20:	428b      	cmp	r3, r1
 800fb22:	4682      	mov	sl, r0
 800fb24:	d8bc      	bhi.n	800faa0 <_strtod_l+0x488>
 800fb26:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fb2a:	428b      	cmp	r3, r1
 800fb2c:	bf86      	itte	hi
 800fb2e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800fbcc <_strtod_l+0x5b4>
 800fb32:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800fb36:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	9304      	str	r3, [sp, #16]
 800fb3e:	e084      	b.n	800fc4a <_strtod_l+0x632>
 800fb40:	f018 0f01 	tst.w	r8, #1
 800fb44:	d005      	beq.n	800fb52 <_strtod_l+0x53a>
 800fb46:	9b04      	ldr	r3, [sp, #16]
 800fb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb4c:	f7f0 fd7c 	bl	8000648 <__aeabi_dmul>
 800fb50:	2301      	movs	r3, #1
 800fb52:	9a04      	ldr	r2, [sp, #16]
 800fb54:	3208      	adds	r2, #8
 800fb56:	f109 0901 	add.w	r9, r9, #1
 800fb5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fb5e:	9204      	str	r2, [sp, #16]
 800fb60:	e7c9      	b.n	800faf6 <_strtod_l+0x4de>
 800fb62:	d0ea      	beq.n	800fb3a <_strtod_l+0x522>
 800fb64:	f1c8 0800 	rsb	r8, r8, #0
 800fb68:	f018 020f 	ands.w	r2, r8, #15
 800fb6c:	d00a      	beq.n	800fb84 <_strtod_l+0x56c>
 800fb6e:	4b13      	ldr	r3, [pc, #76]	; (800fbbc <_strtod_l+0x5a4>)
 800fb70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fb74:	4650      	mov	r0, sl
 800fb76:	4659      	mov	r1, fp
 800fb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb7c:	f7f0 fe8e 	bl	800089c <__aeabi_ddiv>
 800fb80:	4682      	mov	sl, r0
 800fb82:	468b      	mov	fp, r1
 800fb84:	ea5f 1828 	movs.w	r8, r8, asr #4
 800fb88:	d0d7      	beq.n	800fb3a <_strtod_l+0x522>
 800fb8a:	f1b8 0f1f 	cmp.w	r8, #31
 800fb8e:	dd1f      	ble.n	800fbd0 <_strtod_l+0x5b8>
 800fb90:	2500      	movs	r5, #0
 800fb92:	462e      	mov	r6, r5
 800fb94:	9507      	str	r5, [sp, #28]
 800fb96:	9505      	str	r5, [sp, #20]
 800fb98:	2322      	movs	r3, #34	; 0x22
 800fb9a:	f04f 0a00 	mov.w	sl, #0
 800fb9e:	f04f 0b00 	mov.w	fp, #0
 800fba2:	6023      	str	r3, [r4, #0]
 800fba4:	e786      	b.n	800fab4 <_strtod_l+0x49c>
 800fba6:	bf00      	nop
 800fba8:	08013d61 	.word	0x08013d61
 800fbac:	08013e14 	.word	0x08013e14
 800fbb0:	08013d59 	.word	0x08013d59
 800fbb4:	08013f90 	.word	0x08013f90
 800fbb8:	08013e8b 	.word	0x08013e8b
 800fbbc:	08014108 	.word	0x08014108
 800fbc0:	080140e0 	.word	0x080140e0
 800fbc4:	7ff00000 	.word	0x7ff00000
 800fbc8:	7ca00000 	.word	0x7ca00000
 800fbcc:	7fefffff 	.word	0x7fefffff
 800fbd0:	f018 0310 	ands.w	r3, r8, #16
 800fbd4:	bf18      	it	ne
 800fbd6:	236a      	movne	r3, #106	; 0x6a
 800fbd8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ff88 <_strtod_l+0x970>
 800fbdc:	9304      	str	r3, [sp, #16]
 800fbde:	4650      	mov	r0, sl
 800fbe0:	4659      	mov	r1, fp
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	f018 0f01 	tst.w	r8, #1
 800fbe8:	d004      	beq.n	800fbf4 <_strtod_l+0x5dc>
 800fbea:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fbee:	f7f0 fd2b 	bl	8000648 <__aeabi_dmul>
 800fbf2:	2301      	movs	r3, #1
 800fbf4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800fbf8:	f109 0908 	add.w	r9, r9, #8
 800fbfc:	d1f2      	bne.n	800fbe4 <_strtod_l+0x5cc>
 800fbfe:	b10b      	cbz	r3, 800fc04 <_strtod_l+0x5ec>
 800fc00:	4682      	mov	sl, r0
 800fc02:	468b      	mov	fp, r1
 800fc04:	9b04      	ldr	r3, [sp, #16]
 800fc06:	b1c3      	cbz	r3, 800fc3a <_strtod_l+0x622>
 800fc08:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800fc0c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	4659      	mov	r1, fp
 800fc14:	dd11      	ble.n	800fc3a <_strtod_l+0x622>
 800fc16:	2b1f      	cmp	r3, #31
 800fc18:	f340 8124 	ble.w	800fe64 <_strtod_l+0x84c>
 800fc1c:	2b34      	cmp	r3, #52	; 0x34
 800fc1e:	bfde      	ittt	le
 800fc20:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800fc24:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800fc28:	fa03 f202 	lslle.w	r2, r3, r2
 800fc2c:	f04f 0a00 	mov.w	sl, #0
 800fc30:	bfcc      	ite	gt
 800fc32:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800fc36:	ea02 0b01 	andle.w	fp, r2, r1
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	4650      	mov	r0, sl
 800fc40:	4659      	mov	r1, fp
 800fc42:	f7f0 ff69 	bl	8000b18 <__aeabi_dcmpeq>
 800fc46:	2800      	cmp	r0, #0
 800fc48:	d1a2      	bne.n	800fb90 <_strtod_l+0x578>
 800fc4a:	9b07      	ldr	r3, [sp, #28]
 800fc4c:	9300      	str	r3, [sp, #0]
 800fc4e:	9908      	ldr	r1, [sp, #32]
 800fc50:	462b      	mov	r3, r5
 800fc52:	463a      	mov	r2, r7
 800fc54:	4620      	mov	r0, r4
 800fc56:	f001 fe8d 	bl	8011974 <__s2b>
 800fc5a:	9007      	str	r0, [sp, #28]
 800fc5c:	2800      	cmp	r0, #0
 800fc5e:	f43f af1f 	beq.w	800faa0 <_strtod_l+0x488>
 800fc62:	9b05      	ldr	r3, [sp, #20]
 800fc64:	1b9e      	subs	r6, r3, r6
 800fc66:	9b06      	ldr	r3, [sp, #24]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	bfb4      	ite	lt
 800fc6c:	4633      	movlt	r3, r6
 800fc6e:	2300      	movge	r3, #0
 800fc70:	930c      	str	r3, [sp, #48]	; 0x30
 800fc72:	9b06      	ldr	r3, [sp, #24]
 800fc74:	2500      	movs	r5, #0
 800fc76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fc7a:	9312      	str	r3, [sp, #72]	; 0x48
 800fc7c:	462e      	mov	r6, r5
 800fc7e:	9b07      	ldr	r3, [sp, #28]
 800fc80:	4620      	mov	r0, r4
 800fc82:	6859      	ldr	r1, [r3, #4]
 800fc84:	f001 fdce 	bl	8011824 <_Balloc>
 800fc88:	9005      	str	r0, [sp, #20]
 800fc8a:	2800      	cmp	r0, #0
 800fc8c:	f43f af0c 	beq.w	800faa8 <_strtod_l+0x490>
 800fc90:	9b07      	ldr	r3, [sp, #28]
 800fc92:	691a      	ldr	r2, [r3, #16]
 800fc94:	3202      	adds	r2, #2
 800fc96:	f103 010c 	add.w	r1, r3, #12
 800fc9a:	0092      	lsls	r2, r2, #2
 800fc9c:	300c      	adds	r0, #12
 800fc9e:	f001 fda7 	bl	80117f0 <memcpy>
 800fca2:	ec4b ab10 	vmov	d0, sl, fp
 800fca6:	aa1a      	add	r2, sp, #104	; 0x68
 800fca8:	a919      	add	r1, sp, #100	; 0x64
 800fcaa:	4620      	mov	r0, r4
 800fcac:	f002 f9a8 	bl	8012000 <__d2b>
 800fcb0:	ec4b ab18 	vmov	d8, sl, fp
 800fcb4:	9018      	str	r0, [sp, #96]	; 0x60
 800fcb6:	2800      	cmp	r0, #0
 800fcb8:	f43f aef6 	beq.w	800faa8 <_strtod_l+0x490>
 800fcbc:	2101      	movs	r1, #1
 800fcbe:	4620      	mov	r0, r4
 800fcc0:	f001 fef2 	bl	8011aa8 <__i2b>
 800fcc4:	4606      	mov	r6, r0
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	f43f aeee 	beq.w	800faa8 <_strtod_l+0x490>
 800fccc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fcce:	9904      	ldr	r1, [sp, #16]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	bfab      	itete	ge
 800fcd4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800fcd6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800fcd8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800fcda:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800fcde:	bfac      	ite	ge
 800fce0:	eb03 0902 	addge.w	r9, r3, r2
 800fce4:	1ad7      	sublt	r7, r2, r3
 800fce6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fce8:	eba3 0801 	sub.w	r8, r3, r1
 800fcec:	4490      	add	r8, r2
 800fcee:	4ba1      	ldr	r3, [pc, #644]	; (800ff74 <_strtod_l+0x95c>)
 800fcf0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800fcf4:	4598      	cmp	r8, r3
 800fcf6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fcfa:	f280 80c7 	bge.w	800fe8c <_strtod_l+0x874>
 800fcfe:	eba3 0308 	sub.w	r3, r3, r8
 800fd02:	2b1f      	cmp	r3, #31
 800fd04:	eba2 0203 	sub.w	r2, r2, r3
 800fd08:	f04f 0101 	mov.w	r1, #1
 800fd0c:	f300 80b1 	bgt.w	800fe72 <_strtod_l+0x85a>
 800fd10:	fa01 f303 	lsl.w	r3, r1, r3
 800fd14:	930d      	str	r3, [sp, #52]	; 0x34
 800fd16:	2300      	movs	r3, #0
 800fd18:	9308      	str	r3, [sp, #32]
 800fd1a:	eb09 0802 	add.w	r8, r9, r2
 800fd1e:	9b04      	ldr	r3, [sp, #16]
 800fd20:	45c1      	cmp	r9, r8
 800fd22:	4417      	add	r7, r2
 800fd24:	441f      	add	r7, r3
 800fd26:	464b      	mov	r3, r9
 800fd28:	bfa8      	it	ge
 800fd2a:	4643      	movge	r3, r8
 800fd2c:	42bb      	cmp	r3, r7
 800fd2e:	bfa8      	it	ge
 800fd30:	463b      	movge	r3, r7
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	bfc2      	ittt	gt
 800fd36:	eba8 0803 	subgt.w	r8, r8, r3
 800fd3a:	1aff      	subgt	r7, r7, r3
 800fd3c:	eba9 0903 	subgt.w	r9, r9, r3
 800fd40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	dd17      	ble.n	800fd76 <_strtod_l+0x75e>
 800fd46:	4631      	mov	r1, r6
 800fd48:	461a      	mov	r2, r3
 800fd4a:	4620      	mov	r0, r4
 800fd4c:	f001 ff6c 	bl	8011c28 <__pow5mult>
 800fd50:	4606      	mov	r6, r0
 800fd52:	2800      	cmp	r0, #0
 800fd54:	f43f aea8 	beq.w	800faa8 <_strtod_l+0x490>
 800fd58:	4601      	mov	r1, r0
 800fd5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fd5c:	4620      	mov	r0, r4
 800fd5e:	f001 feb9 	bl	8011ad4 <__multiply>
 800fd62:	900b      	str	r0, [sp, #44]	; 0x2c
 800fd64:	2800      	cmp	r0, #0
 800fd66:	f43f ae9f 	beq.w	800faa8 <_strtod_l+0x490>
 800fd6a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fd6c:	4620      	mov	r0, r4
 800fd6e:	f001 fd99 	bl	80118a4 <_Bfree>
 800fd72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd74:	9318      	str	r3, [sp, #96]	; 0x60
 800fd76:	f1b8 0f00 	cmp.w	r8, #0
 800fd7a:	f300 808c 	bgt.w	800fe96 <_strtod_l+0x87e>
 800fd7e:	9b06      	ldr	r3, [sp, #24]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	dd08      	ble.n	800fd96 <_strtod_l+0x77e>
 800fd84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fd86:	9905      	ldr	r1, [sp, #20]
 800fd88:	4620      	mov	r0, r4
 800fd8a:	f001 ff4d 	bl	8011c28 <__pow5mult>
 800fd8e:	9005      	str	r0, [sp, #20]
 800fd90:	2800      	cmp	r0, #0
 800fd92:	f43f ae89 	beq.w	800faa8 <_strtod_l+0x490>
 800fd96:	2f00      	cmp	r7, #0
 800fd98:	dd08      	ble.n	800fdac <_strtod_l+0x794>
 800fd9a:	9905      	ldr	r1, [sp, #20]
 800fd9c:	463a      	mov	r2, r7
 800fd9e:	4620      	mov	r0, r4
 800fda0:	f001 ff9c 	bl	8011cdc <__lshift>
 800fda4:	9005      	str	r0, [sp, #20]
 800fda6:	2800      	cmp	r0, #0
 800fda8:	f43f ae7e 	beq.w	800faa8 <_strtod_l+0x490>
 800fdac:	f1b9 0f00 	cmp.w	r9, #0
 800fdb0:	dd08      	ble.n	800fdc4 <_strtod_l+0x7ac>
 800fdb2:	4631      	mov	r1, r6
 800fdb4:	464a      	mov	r2, r9
 800fdb6:	4620      	mov	r0, r4
 800fdb8:	f001 ff90 	bl	8011cdc <__lshift>
 800fdbc:	4606      	mov	r6, r0
 800fdbe:	2800      	cmp	r0, #0
 800fdc0:	f43f ae72 	beq.w	800faa8 <_strtod_l+0x490>
 800fdc4:	9a05      	ldr	r2, [sp, #20]
 800fdc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fdc8:	4620      	mov	r0, r4
 800fdca:	f002 f813 	bl	8011df4 <__mdiff>
 800fdce:	4605      	mov	r5, r0
 800fdd0:	2800      	cmp	r0, #0
 800fdd2:	f43f ae69 	beq.w	800faa8 <_strtod_l+0x490>
 800fdd6:	68c3      	ldr	r3, [r0, #12]
 800fdd8:	930b      	str	r3, [sp, #44]	; 0x2c
 800fdda:	2300      	movs	r3, #0
 800fddc:	60c3      	str	r3, [r0, #12]
 800fdde:	4631      	mov	r1, r6
 800fde0:	f001 ffec 	bl	8011dbc <__mcmp>
 800fde4:	2800      	cmp	r0, #0
 800fde6:	da60      	bge.n	800feaa <_strtod_l+0x892>
 800fde8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fdea:	ea53 030a 	orrs.w	r3, r3, sl
 800fdee:	f040 8082 	bne.w	800fef6 <_strtod_l+0x8de>
 800fdf2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d17d      	bne.n	800fef6 <_strtod_l+0x8de>
 800fdfa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fdfe:	0d1b      	lsrs	r3, r3, #20
 800fe00:	051b      	lsls	r3, r3, #20
 800fe02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800fe06:	d976      	bls.n	800fef6 <_strtod_l+0x8de>
 800fe08:	696b      	ldr	r3, [r5, #20]
 800fe0a:	b913      	cbnz	r3, 800fe12 <_strtod_l+0x7fa>
 800fe0c:	692b      	ldr	r3, [r5, #16]
 800fe0e:	2b01      	cmp	r3, #1
 800fe10:	dd71      	ble.n	800fef6 <_strtod_l+0x8de>
 800fe12:	4629      	mov	r1, r5
 800fe14:	2201      	movs	r2, #1
 800fe16:	4620      	mov	r0, r4
 800fe18:	f001 ff60 	bl	8011cdc <__lshift>
 800fe1c:	4631      	mov	r1, r6
 800fe1e:	4605      	mov	r5, r0
 800fe20:	f001 ffcc 	bl	8011dbc <__mcmp>
 800fe24:	2800      	cmp	r0, #0
 800fe26:	dd66      	ble.n	800fef6 <_strtod_l+0x8de>
 800fe28:	9904      	ldr	r1, [sp, #16]
 800fe2a:	4a53      	ldr	r2, [pc, #332]	; (800ff78 <_strtod_l+0x960>)
 800fe2c:	465b      	mov	r3, fp
 800fe2e:	2900      	cmp	r1, #0
 800fe30:	f000 8081 	beq.w	800ff36 <_strtod_l+0x91e>
 800fe34:	ea02 010b 	and.w	r1, r2, fp
 800fe38:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fe3c:	dc7b      	bgt.n	800ff36 <_strtod_l+0x91e>
 800fe3e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fe42:	f77f aea9 	ble.w	800fb98 <_strtod_l+0x580>
 800fe46:	4b4d      	ldr	r3, [pc, #308]	; (800ff7c <_strtod_l+0x964>)
 800fe48:	4650      	mov	r0, sl
 800fe4a:	4659      	mov	r1, fp
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	f7f0 fbfb 	bl	8000648 <__aeabi_dmul>
 800fe52:	460b      	mov	r3, r1
 800fe54:	4303      	orrs	r3, r0
 800fe56:	bf08      	it	eq
 800fe58:	2322      	moveq	r3, #34	; 0x22
 800fe5a:	4682      	mov	sl, r0
 800fe5c:	468b      	mov	fp, r1
 800fe5e:	bf08      	it	eq
 800fe60:	6023      	streq	r3, [r4, #0]
 800fe62:	e62b      	b.n	800fabc <_strtod_l+0x4a4>
 800fe64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fe68:	fa02 f303 	lsl.w	r3, r2, r3
 800fe6c:	ea03 0a0a 	and.w	sl, r3, sl
 800fe70:	e6e3      	b.n	800fc3a <_strtod_l+0x622>
 800fe72:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800fe76:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800fe7a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800fe7e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800fe82:	fa01 f308 	lsl.w	r3, r1, r8
 800fe86:	9308      	str	r3, [sp, #32]
 800fe88:	910d      	str	r1, [sp, #52]	; 0x34
 800fe8a:	e746      	b.n	800fd1a <_strtod_l+0x702>
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	9308      	str	r3, [sp, #32]
 800fe90:	2301      	movs	r3, #1
 800fe92:	930d      	str	r3, [sp, #52]	; 0x34
 800fe94:	e741      	b.n	800fd1a <_strtod_l+0x702>
 800fe96:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fe98:	4642      	mov	r2, r8
 800fe9a:	4620      	mov	r0, r4
 800fe9c:	f001 ff1e 	bl	8011cdc <__lshift>
 800fea0:	9018      	str	r0, [sp, #96]	; 0x60
 800fea2:	2800      	cmp	r0, #0
 800fea4:	f47f af6b 	bne.w	800fd7e <_strtod_l+0x766>
 800fea8:	e5fe      	b.n	800faa8 <_strtod_l+0x490>
 800feaa:	465f      	mov	r7, fp
 800feac:	d16e      	bne.n	800ff8c <_strtod_l+0x974>
 800feae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800feb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800feb4:	b342      	cbz	r2, 800ff08 <_strtod_l+0x8f0>
 800feb6:	4a32      	ldr	r2, [pc, #200]	; (800ff80 <_strtod_l+0x968>)
 800feb8:	4293      	cmp	r3, r2
 800feba:	d128      	bne.n	800ff0e <_strtod_l+0x8f6>
 800febc:	9b04      	ldr	r3, [sp, #16]
 800febe:	4651      	mov	r1, sl
 800fec0:	b1eb      	cbz	r3, 800fefe <_strtod_l+0x8e6>
 800fec2:	4b2d      	ldr	r3, [pc, #180]	; (800ff78 <_strtod_l+0x960>)
 800fec4:	403b      	ands	r3, r7
 800fec6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800feca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fece:	d819      	bhi.n	800ff04 <_strtod_l+0x8ec>
 800fed0:	0d1b      	lsrs	r3, r3, #20
 800fed2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fed6:	fa02 f303 	lsl.w	r3, r2, r3
 800feda:	4299      	cmp	r1, r3
 800fedc:	d117      	bne.n	800ff0e <_strtod_l+0x8f6>
 800fede:	4b29      	ldr	r3, [pc, #164]	; (800ff84 <_strtod_l+0x96c>)
 800fee0:	429f      	cmp	r7, r3
 800fee2:	d102      	bne.n	800feea <_strtod_l+0x8d2>
 800fee4:	3101      	adds	r1, #1
 800fee6:	f43f addf 	beq.w	800faa8 <_strtod_l+0x490>
 800feea:	4b23      	ldr	r3, [pc, #140]	; (800ff78 <_strtod_l+0x960>)
 800feec:	403b      	ands	r3, r7
 800feee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800fef2:	f04f 0a00 	mov.w	sl, #0
 800fef6:	9b04      	ldr	r3, [sp, #16]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d1a4      	bne.n	800fe46 <_strtod_l+0x82e>
 800fefc:	e5de      	b.n	800fabc <_strtod_l+0x4a4>
 800fefe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff02:	e7ea      	b.n	800feda <_strtod_l+0x8c2>
 800ff04:	4613      	mov	r3, r2
 800ff06:	e7e8      	b.n	800feda <_strtod_l+0x8c2>
 800ff08:	ea53 030a 	orrs.w	r3, r3, sl
 800ff0c:	d08c      	beq.n	800fe28 <_strtod_l+0x810>
 800ff0e:	9b08      	ldr	r3, [sp, #32]
 800ff10:	b1db      	cbz	r3, 800ff4a <_strtod_l+0x932>
 800ff12:	423b      	tst	r3, r7
 800ff14:	d0ef      	beq.n	800fef6 <_strtod_l+0x8de>
 800ff16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff18:	9a04      	ldr	r2, [sp, #16]
 800ff1a:	4650      	mov	r0, sl
 800ff1c:	4659      	mov	r1, fp
 800ff1e:	b1c3      	cbz	r3, 800ff52 <_strtod_l+0x93a>
 800ff20:	f7ff fb5e 	bl	800f5e0 <sulp>
 800ff24:	4602      	mov	r2, r0
 800ff26:	460b      	mov	r3, r1
 800ff28:	ec51 0b18 	vmov	r0, r1, d8
 800ff2c:	f7f0 f9d6 	bl	80002dc <__adddf3>
 800ff30:	4682      	mov	sl, r0
 800ff32:	468b      	mov	fp, r1
 800ff34:	e7df      	b.n	800fef6 <_strtod_l+0x8de>
 800ff36:	4013      	ands	r3, r2
 800ff38:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ff3c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ff40:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ff44:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ff48:	e7d5      	b.n	800fef6 <_strtod_l+0x8de>
 800ff4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff4c:	ea13 0f0a 	tst.w	r3, sl
 800ff50:	e7e0      	b.n	800ff14 <_strtod_l+0x8fc>
 800ff52:	f7ff fb45 	bl	800f5e0 <sulp>
 800ff56:	4602      	mov	r2, r0
 800ff58:	460b      	mov	r3, r1
 800ff5a:	ec51 0b18 	vmov	r0, r1, d8
 800ff5e:	f7f0 f9bb 	bl	80002d8 <__aeabi_dsub>
 800ff62:	2200      	movs	r2, #0
 800ff64:	2300      	movs	r3, #0
 800ff66:	4682      	mov	sl, r0
 800ff68:	468b      	mov	fp, r1
 800ff6a:	f7f0 fdd5 	bl	8000b18 <__aeabi_dcmpeq>
 800ff6e:	2800      	cmp	r0, #0
 800ff70:	d0c1      	beq.n	800fef6 <_strtod_l+0x8de>
 800ff72:	e611      	b.n	800fb98 <_strtod_l+0x580>
 800ff74:	fffffc02 	.word	0xfffffc02
 800ff78:	7ff00000 	.word	0x7ff00000
 800ff7c:	39500000 	.word	0x39500000
 800ff80:	000fffff 	.word	0x000fffff
 800ff84:	7fefffff 	.word	0x7fefffff
 800ff88:	08013e28 	.word	0x08013e28
 800ff8c:	4631      	mov	r1, r6
 800ff8e:	4628      	mov	r0, r5
 800ff90:	f002 f892 	bl	80120b8 <__ratio>
 800ff94:	ec59 8b10 	vmov	r8, r9, d0
 800ff98:	ee10 0a10 	vmov	r0, s0
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ffa2:	4649      	mov	r1, r9
 800ffa4:	f7f0 fdcc 	bl	8000b40 <__aeabi_dcmple>
 800ffa8:	2800      	cmp	r0, #0
 800ffaa:	d07a      	beq.n	80100a2 <_strtod_l+0xa8a>
 800ffac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d04a      	beq.n	8010048 <_strtod_l+0xa30>
 800ffb2:	4b95      	ldr	r3, [pc, #596]	; (8010208 <_strtod_l+0xbf0>)
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ffba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010208 <_strtod_l+0xbf0>
 800ffbe:	f04f 0800 	mov.w	r8, #0
 800ffc2:	4b92      	ldr	r3, [pc, #584]	; (801020c <_strtod_l+0xbf4>)
 800ffc4:	403b      	ands	r3, r7
 800ffc6:	930d      	str	r3, [sp, #52]	; 0x34
 800ffc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ffca:	4b91      	ldr	r3, [pc, #580]	; (8010210 <_strtod_l+0xbf8>)
 800ffcc:	429a      	cmp	r2, r3
 800ffce:	f040 80b0 	bne.w	8010132 <_strtod_l+0xb1a>
 800ffd2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ffd6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ffda:	ec4b ab10 	vmov	d0, sl, fp
 800ffde:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ffe2:	f001 ff91 	bl	8011f08 <__ulp>
 800ffe6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ffea:	ec53 2b10 	vmov	r2, r3, d0
 800ffee:	f7f0 fb2b 	bl	8000648 <__aeabi_dmul>
 800fff2:	4652      	mov	r2, sl
 800fff4:	465b      	mov	r3, fp
 800fff6:	f7f0 f971 	bl	80002dc <__adddf3>
 800fffa:	460b      	mov	r3, r1
 800fffc:	4983      	ldr	r1, [pc, #524]	; (801020c <_strtod_l+0xbf4>)
 800fffe:	4a85      	ldr	r2, [pc, #532]	; (8010214 <_strtod_l+0xbfc>)
 8010000:	4019      	ands	r1, r3
 8010002:	4291      	cmp	r1, r2
 8010004:	4682      	mov	sl, r0
 8010006:	d960      	bls.n	80100ca <_strtod_l+0xab2>
 8010008:	ee18 3a90 	vmov	r3, s17
 801000c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010010:	4293      	cmp	r3, r2
 8010012:	d104      	bne.n	801001e <_strtod_l+0xa06>
 8010014:	ee18 3a10 	vmov	r3, s16
 8010018:	3301      	adds	r3, #1
 801001a:	f43f ad45 	beq.w	800faa8 <_strtod_l+0x490>
 801001e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8010220 <_strtod_l+0xc08>
 8010022:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010026:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010028:	4620      	mov	r0, r4
 801002a:	f001 fc3b 	bl	80118a4 <_Bfree>
 801002e:	9905      	ldr	r1, [sp, #20]
 8010030:	4620      	mov	r0, r4
 8010032:	f001 fc37 	bl	80118a4 <_Bfree>
 8010036:	4631      	mov	r1, r6
 8010038:	4620      	mov	r0, r4
 801003a:	f001 fc33 	bl	80118a4 <_Bfree>
 801003e:	4629      	mov	r1, r5
 8010040:	4620      	mov	r0, r4
 8010042:	f001 fc2f 	bl	80118a4 <_Bfree>
 8010046:	e61a      	b.n	800fc7e <_strtod_l+0x666>
 8010048:	f1ba 0f00 	cmp.w	sl, #0
 801004c:	d11b      	bne.n	8010086 <_strtod_l+0xa6e>
 801004e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010052:	b9f3      	cbnz	r3, 8010092 <_strtod_l+0xa7a>
 8010054:	4b6c      	ldr	r3, [pc, #432]	; (8010208 <_strtod_l+0xbf0>)
 8010056:	2200      	movs	r2, #0
 8010058:	4640      	mov	r0, r8
 801005a:	4649      	mov	r1, r9
 801005c:	f7f0 fd66 	bl	8000b2c <__aeabi_dcmplt>
 8010060:	b9d0      	cbnz	r0, 8010098 <_strtod_l+0xa80>
 8010062:	4640      	mov	r0, r8
 8010064:	4649      	mov	r1, r9
 8010066:	4b6c      	ldr	r3, [pc, #432]	; (8010218 <_strtod_l+0xc00>)
 8010068:	2200      	movs	r2, #0
 801006a:	f7f0 faed 	bl	8000648 <__aeabi_dmul>
 801006e:	4680      	mov	r8, r0
 8010070:	4689      	mov	r9, r1
 8010072:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010076:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801007a:	9315      	str	r3, [sp, #84]	; 0x54
 801007c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010080:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010084:	e79d      	b.n	800ffc2 <_strtod_l+0x9aa>
 8010086:	f1ba 0f01 	cmp.w	sl, #1
 801008a:	d102      	bne.n	8010092 <_strtod_l+0xa7a>
 801008c:	2f00      	cmp	r7, #0
 801008e:	f43f ad83 	beq.w	800fb98 <_strtod_l+0x580>
 8010092:	4b62      	ldr	r3, [pc, #392]	; (801021c <_strtod_l+0xc04>)
 8010094:	2200      	movs	r2, #0
 8010096:	e78e      	b.n	800ffb6 <_strtod_l+0x99e>
 8010098:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8010218 <_strtod_l+0xc00>
 801009c:	f04f 0800 	mov.w	r8, #0
 80100a0:	e7e7      	b.n	8010072 <_strtod_l+0xa5a>
 80100a2:	4b5d      	ldr	r3, [pc, #372]	; (8010218 <_strtod_l+0xc00>)
 80100a4:	4640      	mov	r0, r8
 80100a6:	4649      	mov	r1, r9
 80100a8:	2200      	movs	r2, #0
 80100aa:	f7f0 facd 	bl	8000648 <__aeabi_dmul>
 80100ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100b0:	4680      	mov	r8, r0
 80100b2:	4689      	mov	r9, r1
 80100b4:	b933      	cbnz	r3, 80100c4 <_strtod_l+0xaac>
 80100b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80100ba:	900e      	str	r0, [sp, #56]	; 0x38
 80100bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80100be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80100c2:	e7dd      	b.n	8010080 <_strtod_l+0xa68>
 80100c4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80100c8:	e7f9      	b.n	80100be <_strtod_l+0xaa6>
 80100ca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80100ce:	9b04      	ldr	r3, [sp, #16]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d1a8      	bne.n	8010026 <_strtod_l+0xa0e>
 80100d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80100d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80100da:	0d1b      	lsrs	r3, r3, #20
 80100dc:	051b      	lsls	r3, r3, #20
 80100de:	429a      	cmp	r2, r3
 80100e0:	d1a1      	bne.n	8010026 <_strtod_l+0xa0e>
 80100e2:	4640      	mov	r0, r8
 80100e4:	4649      	mov	r1, r9
 80100e6:	f7f0 fe0f 	bl	8000d08 <__aeabi_d2lz>
 80100ea:	f7f0 fa7f 	bl	80005ec <__aeabi_l2d>
 80100ee:	4602      	mov	r2, r0
 80100f0:	460b      	mov	r3, r1
 80100f2:	4640      	mov	r0, r8
 80100f4:	4649      	mov	r1, r9
 80100f6:	f7f0 f8ef 	bl	80002d8 <__aeabi_dsub>
 80100fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80100fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010100:	ea43 030a 	orr.w	r3, r3, sl
 8010104:	4313      	orrs	r3, r2
 8010106:	4680      	mov	r8, r0
 8010108:	4689      	mov	r9, r1
 801010a:	d055      	beq.n	80101b8 <_strtod_l+0xba0>
 801010c:	a336      	add	r3, pc, #216	; (adr r3, 80101e8 <_strtod_l+0xbd0>)
 801010e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010112:	f7f0 fd0b 	bl	8000b2c <__aeabi_dcmplt>
 8010116:	2800      	cmp	r0, #0
 8010118:	f47f acd0 	bne.w	800fabc <_strtod_l+0x4a4>
 801011c:	a334      	add	r3, pc, #208	; (adr r3, 80101f0 <_strtod_l+0xbd8>)
 801011e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010122:	4640      	mov	r0, r8
 8010124:	4649      	mov	r1, r9
 8010126:	f7f0 fd1f 	bl	8000b68 <__aeabi_dcmpgt>
 801012a:	2800      	cmp	r0, #0
 801012c:	f43f af7b 	beq.w	8010026 <_strtod_l+0xa0e>
 8010130:	e4c4      	b.n	800fabc <_strtod_l+0x4a4>
 8010132:	9b04      	ldr	r3, [sp, #16]
 8010134:	b333      	cbz	r3, 8010184 <_strtod_l+0xb6c>
 8010136:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010138:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801013c:	d822      	bhi.n	8010184 <_strtod_l+0xb6c>
 801013e:	a32e      	add	r3, pc, #184	; (adr r3, 80101f8 <_strtod_l+0xbe0>)
 8010140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010144:	4640      	mov	r0, r8
 8010146:	4649      	mov	r1, r9
 8010148:	f7f0 fcfa 	bl	8000b40 <__aeabi_dcmple>
 801014c:	b1a0      	cbz	r0, 8010178 <_strtod_l+0xb60>
 801014e:	4649      	mov	r1, r9
 8010150:	4640      	mov	r0, r8
 8010152:	f7f0 fd51 	bl	8000bf8 <__aeabi_d2uiz>
 8010156:	2801      	cmp	r0, #1
 8010158:	bf38      	it	cc
 801015a:	2001      	movcc	r0, #1
 801015c:	f7f0 f9fa 	bl	8000554 <__aeabi_ui2d>
 8010160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010162:	4680      	mov	r8, r0
 8010164:	4689      	mov	r9, r1
 8010166:	bb23      	cbnz	r3, 80101b2 <_strtod_l+0xb9a>
 8010168:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801016c:	9010      	str	r0, [sp, #64]	; 0x40
 801016e:	9311      	str	r3, [sp, #68]	; 0x44
 8010170:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010174:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801017a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801017c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010180:	1a9b      	subs	r3, r3, r2
 8010182:	9309      	str	r3, [sp, #36]	; 0x24
 8010184:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010188:	eeb0 0a48 	vmov.f32	s0, s16
 801018c:	eef0 0a68 	vmov.f32	s1, s17
 8010190:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010194:	f001 feb8 	bl	8011f08 <__ulp>
 8010198:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801019c:	ec53 2b10 	vmov	r2, r3, d0
 80101a0:	f7f0 fa52 	bl	8000648 <__aeabi_dmul>
 80101a4:	ec53 2b18 	vmov	r2, r3, d8
 80101a8:	f7f0 f898 	bl	80002dc <__adddf3>
 80101ac:	4682      	mov	sl, r0
 80101ae:	468b      	mov	fp, r1
 80101b0:	e78d      	b.n	80100ce <_strtod_l+0xab6>
 80101b2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80101b6:	e7db      	b.n	8010170 <_strtod_l+0xb58>
 80101b8:	a311      	add	r3, pc, #68	; (adr r3, 8010200 <_strtod_l+0xbe8>)
 80101ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101be:	f7f0 fcb5 	bl	8000b2c <__aeabi_dcmplt>
 80101c2:	e7b2      	b.n	801012a <_strtod_l+0xb12>
 80101c4:	2300      	movs	r3, #0
 80101c6:	930a      	str	r3, [sp, #40]	; 0x28
 80101c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80101ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80101cc:	6013      	str	r3, [r2, #0]
 80101ce:	f7ff ba6b 	b.w	800f6a8 <_strtod_l+0x90>
 80101d2:	2a65      	cmp	r2, #101	; 0x65
 80101d4:	f43f ab5f 	beq.w	800f896 <_strtod_l+0x27e>
 80101d8:	2a45      	cmp	r2, #69	; 0x45
 80101da:	f43f ab5c 	beq.w	800f896 <_strtod_l+0x27e>
 80101de:	2301      	movs	r3, #1
 80101e0:	f7ff bb94 	b.w	800f90c <_strtod_l+0x2f4>
 80101e4:	f3af 8000 	nop.w
 80101e8:	94a03595 	.word	0x94a03595
 80101ec:	3fdfffff 	.word	0x3fdfffff
 80101f0:	35afe535 	.word	0x35afe535
 80101f4:	3fe00000 	.word	0x3fe00000
 80101f8:	ffc00000 	.word	0xffc00000
 80101fc:	41dfffff 	.word	0x41dfffff
 8010200:	94a03595 	.word	0x94a03595
 8010204:	3fcfffff 	.word	0x3fcfffff
 8010208:	3ff00000 	.word	0x3ff00000
 801020c:	7ff00000 	.word	0x7ff00000
 8010210:	7fe00000 	.word	0x7fe00000
 8010214:	7c9fffff 	.word	0x7c9fffff
 8010218:	3fe00000 	.word	0x3fe00000
 801021c:	bff00000 	.word	0xbff00000
 8010220:	7fefffff 	.word	0x7fefffff

08010224 <_strtod_r>:
 8010224:	4b01      	ldr	r3, [pc, #4]	; (801022c <_strtod_r+0x8>)
 8010226:	f7ff b9f7 	b.w	800f618 <_strtod_l>
 801022a:	bf00      	nop
 801022c:	200002f0 	.word	0x200002f0

08010230 <_strtol_l.constprop.0>:
 8010230:	2b01      	cmp	r3, #1
 8010232:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010236:	d001      	beq.n	801023c <_strtol_l.constprop.0+0xc>
 8010238:	2b24      	cmp	r3, #36	; 0x24
 801023a:	d906      	bls.n	801024a <_strtol_l.constprop.0+0x1a>
 801023c:	f7fe f992 	bl	800e564 <__errno>
 8010240:	2316      	movs	r3, #22
 8010242:	6003      	str	r3, [r0, #0]
 8010244:	2000      	movs	r0, #0
 8010246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801024a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010330 <_strtol_l.constprop.0+0x100>
 801024e:	460d      	mov	r5, r1
 8010250:	462e      	mov	r6, r5
 8010252:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010256:	f814 700c 	ldrb.w	r7, [r4, ip]
 801025a:	f017 0708 	ands.w	r7, r7, #8
 801025e:	d1f7      	bne.n	8010250 <_strtol_l.constprop.0+0x20>
 8010260:	2c2d      	cmp	r4, #45	; 0x2d
 8010262:	d132      	bne.n	80102ca <_strtol_l.constprop.0+0x9a>
 8010264:	782c      	ldrb	r4, [r5, #0]
 8010266:	2701      	movs	r7, #1
 8010268:	1cb5      	adds	r5, r6, #2
 801026a:	2b00      	cmp	r3, #0
 801026c:	d05b      	beq.n	8010326 <_strtol_l.constprop.0+0xf6>
 801026e:	2b10      	cmp	r3, #16
 8010270:	d109      	bne.n	8010286 <_strtol_l.constprop.0+0x56>
 8010272:	2c30      	cmp	r4, #48	; 0x30
 8010274:	d107      	bne.n	8010286 <_strtol_l.constprop.0+0x56>
 8010276:	782c      	ldrb	r4, [r5, #0]
 8010278:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801027c:	2c58      	cmp	r4, #88	; 0x58
 801027e:	d14d      	bne.n	801031c <_strtol_l.constprop.0+0xec>
 8010280:	786c      	ldrb	r4, [r5, #1]
 8010282:	2310      	movs	r3, #16
 8010284:	3502      	adds	r5, #2
 8010286:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801028a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801028e:	f04f 0c00 	mov.w	ip, #0
 8010292:	fbb8 f9f3 	udiv	r9, r8, r3
 8010296:	4666      	mov	r6, ip
 8010298:	fb03 8a19 	mls	sl, r3, r9, r8
 801029c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80102a0:	f1be 0f09 	cmp.w	lr, #9
 80102a4:	d816      	bhi.n	80102d4 <_strtol_l.constprop.0+0xa4>
 80102a6:	4674      	mov	r4, lr
 80102a8:	42a3      	cmp	r3, r4
 80102aa:	dd24      	ble.n	80102f6 <_strtol_l.constprop.0+0xc6>
 80102ac:	f1bc 0f00 	cmp.w	ip, #0
 80102b0:	db1e      	blt.n	80102f0 <_strtol_l.constprop.0+0xc0>
 80102b2:	45b1      	cmp	r9, r6
 80102b4:	d31c      	bcc.n	80102f0 <_strtol_l.constprop.0+0xc0>
 80102b6:	d101      	bne.n	80102bc <_strtol_l.constprop.0+0x8c>
 80102b8:	45a2      	cmp	sl, r4
 80102ba:	db19      	blt.n	80102f0 <_strtol_l.constprop.0+0xc0>
 80102bc:	fb06 4603 	mla	r6, r6, r3, r4
 80102c0:	f04f 0c01 	mov.w	ip, #1
 80102c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80102c8:	e7e8      	b.n	801029c <_strtol_l.constprop.0+0x6c>
 80102ca:	2c2b      	cmp	r4, #43	; 0x2b
 80102cc:	bf04      	itt	eq
 80102ce:	782c      	ldrbeq	r4, [r5, #0]
 80102d0:	1cb5      	addeq	r5, r6, #2
 80102d2:	e7ca      	b.n	801026a <_strtol_l.constprop.0+0x3a>
 80102d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80102d8:	f1be 0f19 	cmp.w	lr, #25
 80102dc:	d801      	bhi.n	80102e2 <_strtol_l.constprop.0+0xb2>
 80102de:	3c37      	subs	r4, #55	; 0x37
 80102e0:	e7e2      	b.n	80102a8 <_strtol_l.constprop.0+0x78>
 80102e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80102e6:	f1be 0f19 	cmp.w	lr, #25
 80102ea:	d804      	bhi.n	80102f6 <_strtol_l.constprop.0+0xc6>
 80102ec:	3c57      	subs	r4, #87	; 0x57
 80102ee:	e7db      	b.n	80102a8 <_strtol_l.constprop.0+0x78>
 80102f0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80102f4:	e7e6      	b.n	80102c4 <_strtol_l.constprop.0+0x94>
 80102f6:	f1bc 0f00 	cmp.w	ip, #0
 80102fa:	da05      	bge.n	8010308 <_strtol_l.constprop.0+0xd8>
 80102fc:	2322      	movs	r3, #34	; 0x22
 80102fe:	6003      	str	r3, [r0, #0]
 8010300:	4646      	mov	r6, r8
 8010302:	b942      	cbnz	r2, 8010316 <_strtol_l.constprop.0+0xe6>
 8010304:	4630      	mov	r0, r6
 8010306:	e79e      	b.n	8010246 <_strtol_l.constprop.0+0x16>
 8010308:	b107      	cbz	r7, 801030c <_strtol_l.constprop.0+0xdc>
 801030a:	4276      	negs	r6, r6
 801030c:	2a00      	cmp	r2, #0
 801030e:	d0f9      	beq.n	8010304 <_strtol_l.constprop.0+0xd4>
 8010310:	f1bc 0f00 	cmp.w	ip, #0
 8010314:	d000      	beq.n	8010318 <_strtol_l.constprop.0+0xe8>
 8010316:	1e69      	subs	r1, r5, #1
 8010318:	6011      	str	r1, [r2, #0]
 801031a:	e7f3      	b.n	8010304 <_strtol_l.constprop.0+0xd4>
 801031c:	2430      	movs	r4, #48	; 0x30
 801031e:	2b00      	cmp	r3, #0
 8010320:	d1b1      	bne.n	8010286 <_strtol_l.constprop.0+0x56>
 8010322:	2308      	movs	r3, #8
 8010324:	e7af      	b.n	8010286 <_strtol_l.constprop.0+0x56>
 8010326:	2c30      	cmp	r4, #48	; 0x30
 8010328:	d0a5      	beq.n	8010276 <_strtol_l.constprop.0+0x46>
 801032a:	230a      	movs	r3, #10
 801032c:	e7ab      	b.n	8010286 <_strtol_l.constprop.0+0x56>
 801032e:	bf00      	nop
 8010330:	08013e8d 	.word	0x08013e8d

08010334 <_strtol_r>:
 8010334:	f7ff bf7c 	b.w	8010230 <_strtol_l.constprop.0>

08010338 <time>:
 8010338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801033a:	4b0b      	ldr	r3, [pc, #44]	; (8010368 <time+0x30>)
 801033c:	2200      	movs	r2, #0
 801033e:	4669      	mov	r1, sp
 8010340:	4604      	mov	r4, r0
 8010342:	6818      	ldr	r0, [r3, #0]
 8010344:	f001 fa2c 	bl	80117a0 <_gettimeofday_r>
 8010348:	2800      	cmp	r0, #0
 801034a:	bfbe      	ittt	lt
 801034c:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8010350:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010354:	e9cd 2300 	strdlt	r2, r3, [sp]
 8010358:	e9dd 0100 	ldrd	r0, r1, [sp]
 801035c:	b10c      	cbz	r4, 8010362 <time+0x2a>
 801035e:	e9c4 0100 	strd	r0, r1, [r4]
 8010362:	b004      	add	sp, #16
 8010364:	bd10      	pop	{r4, pc}
 8010366:	bf00      	nop
 8010368:	20000288 	.word	0x20000288

0801036c <__assert_func>:
 801036c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801036e:	4614      	mov	r4, r2
 8010370:	461a      	mov	r2, r3
 8010372:	4b09      	ldr	r3, [pc, #36]	; (8010398 <__assert_func+0x2c>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	4605      	mov	r5, r0
 8010378:	68d8      	ldr	r0, [r3, #12]
 801037a:	b14c      	cbz	r4, 8010390 <__assert_func+0x24>
 801037c:	4b07      	ldr	r3, [pc, #28]	; (801039c <__assert_func+0x30>)
 801037e:	9100      	str	r1, [sp, #0]
 8010380:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010384:	4906      	ldr	r1, [pc, #24]	; (80103a0 <__assert_func+0x34>)
 8010386:	462b      	mov	r3, r5
 8010388:	f000 fe88 	bl	801109c <fiprintf>
 801038c:	f002 fac2 	bl	8012914 <abort>
 8010390:	4b04      	ldr	r3, [pc, #16]	; (80103a4 <__assert_func+0x38>)
 8010392:	461c      	mov	r4, r3
 8010394:	e7f3      	b.n	801037e <__assert_func+0x12>
 8010396:	bf00      	nop
 8010398:	20000288 	.word	0x20000288
 801039c:	08013e50 	.word	0x08013e50
 80103a0:	08013e5d 	.word	0x08013e5d
 80103a4:	08013e8b 	.word	0x08013e8b

080103a8 <quorem>:
 80103a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103ac:	6903      	ldr	r3, [r0, #16]
 80103ae:	690c      	ldr	r4, [r1, #16]
 80103b0:	42a3      	cmp	r3, r4
 80103b2:	4607      	mov	r7, r0
 80103b4:	f2c0 8081 	blt.w	80104ba <quorem+0x112>
 80103b8:	3c01      	subs	r4, #1
 80103ba:	f101 0814 	add.w	r8, r1, #20
 80103be:	f100 0514 	add.w	r5, r0, #20
 80103c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80103c6:	9301      	str	r3, [sp, #4]
 80103c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80103cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80103d0:	3301      	adds	r3, #1
 80103d2:	429a      	cmp	r2, r3
 80103d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80103d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80103dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80103e0:	d331      	bcc.n	8010446 <quorem+0x9e>
 80103e2:	f04f 0e00 	mov.w	lr, #0
 80103e6:	4640      	mov	r0, r8
 80103e8:	46ac      	mov	ip, r5
 80103ea:	46f2      	mov	sl, lr
 80103ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80103f0:	b293      	uxth	r3, r2
 80103f2:	fb06 e303 	mla	r3, r6, r3, lr
 80103f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80103fa:	b29b      	uxth	r3, r3
 80103fc:	ebaa 0303 	sub.w	r3, sl, r3
 8010400:	f8dc a000 	ldr.w	sl, [ip]
 8010404:	0c12      	lsrs	r2, r2, #16
 8010406:	fa13 f38a 	uxtah	r3, r3, sl
 801040a:	fb06 e202 	mla	r2, r6, r2, lr
 801040e:	9300      	str	r3, [sp, #0]
 8010410:	9b00      	ldr	r3, [sp, #0]
 8010412:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010416:	b292      	uxth	r2, r2
 8010418:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801041c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010420:	f8bd 3000 	ldrh.w	r3, [sp]
 8010424:	4581      	cmp	r9, r0
 8010426:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801042a:	f84c 3b04 	str.w	r3, [ip], #4
 801042e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010432:	d2db      	bcs.n	80103ec <quorem+0x44>
 8010434:	f855 300b 	ldr.w	r3, [r5, fp]
 8010438:	b92b      	cbnz	r3, 8010446 <quorem+0x9e>
 801043a:	9b01      	ldr	r3, [sp, #4]
 801043c:	3b04      	subs	r3, #4
 801043e:	429d      	cmp	r5, r3
 8010440:	461a      	mov	r2, r3
 8010442:	d32e      	bcc.n	80104a2 <quorem+0xfa>
 8010444:	613c      	str	r4, [r7, #16]
 8010446:	4638      	mov	r0, r7
 8010448:	f001 fcb8 	bl	8011dbc <__mcmp>
 801044c:	2800      	cmp	r0, #0
 801044e:	db24      	blt.n	801049a <quorem+0xf2>
 8010450:	3601      	adds	r6, #1
 8010452:	4628      	mov	r0, r5
 8010454:	f04f 0c00 	mov.w	ip, #0
 8010458:	f858 2b04 	ldr.w	r2, [r8], #4
 801045c:	f8d0 e000 	ldr.w	lr, [r0]
 8010460:	b293      	uxth	r3, r2
 8010462:	ebac 0303 	sub.w	r3, ip, r3
 8010466:	0c12      	lsrs	r2, r2, #16
 8010468:	fa13 f38e 	uxtah	r3, r3, lr
 801046c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010470:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010474:	b29b      	uxth	r3, r3
 8010476:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801047a:	45c1      	cmp	r9, r8
 801047c:	f840 3b04 	str.w	r3, [r0], #4
 8010480:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010484:	d2e8      	bcs.n	8010458 <quorem+0xb0>
 8010486:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801048a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801048e:	b922      	cbnz	r2, 801049a <quorem+0xf2>
 8010490:	3b04      	subs	r3, #4
 8010492:	429d      	cmp	r5, r3
 8010494:	461a      	mov	r2, r3
 8010496:	d30a      	bcc.n	80104ae <quorem+0x106>
 8010498:	613c      	str	r4, [r7, #16]
 801049a:	4630      	mov	r0, r6
 801049c:	b003      	add	sp, #12
 801049e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104a2:	6812      	ldr	r2, [r2, #0]
 80104a4:	3b04      	subs	r3, #4
 80104a6:	2a00      	cmp	r2, #0
 80104a8:	d1cc      	bne.n	8010444 <quorem+0x9c>
 80104aa:	3c01      	subs	r4, #1
 80104ac:	e7c7      	b.n	801043e <quorem+0x96>
 80104ae:	6812      	ldr	r2, [r2, #0]
 80104b0:	3b04      	subs	r3, #4
 80104b2:	2a00      	cmp	r2, #0
 80104b4:	d1f0      	bne.n	8010498 <quorem+0xf0>
 80104b6:	3c01      	subs	r4, #1
 80104b8:	e7eb      	b.n	8010492 <quorem+0xea>
 80104ba:	2000      	movs	r0, #0
 80104bc:	e7ee      	b.n	801049c <quorem+0xf4>
	...

080104c0 <_dtoa_r>:
 80104c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104c4:	ed2d 8b04 	vpush	{d8-d9}
 80104c8:	ec57 6b10 	vmov	r6, r7, d0
 80104cc:	b093      	sub	sp, #76	; 0x4c
 80104ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80104d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80104d4:	9106      	str	r1, [sp, #24]
 80104d6:	ee10 aa10 	vmov	sl, s0
 80104da:	4604      	mov	r4, r0
 80104dc:	9209      	str	r2, [sp, #36]	; 0x24
 80104de:	930c      	str	r3, [sp, #48]	; 0x30
 80104e0:	46bb      	mov	fp, r7
 80104e2:	b975      	cbnz	r5, 8010502 <_dtoa_r+0x42>
 80104e4:	2010      	movs	r0, #16
 80104e6:	f7fe f867 	bl	800e5b8 <malloc>
 80104ea:	4602      	mov	r2, r0
 80104ec:	6260      	str	r0, [r4, #36]	; 0x24
 80104ee:	b920      	cbnz	r0, 80104fa <_dtoa_r+0x3a>
 80104f0:	4ba7      	ldr	r3, [pc, #668]	; (8010790 <_dtoa_r+0x2d0>)
 80104f2:	21ea      	movs	r1, #234	; 0xea
 80104f4:	48a7      	ldr	r0, [pc, #668]	; (8010794 <_dtoa_r+0x2d4>)
 80104f6:	f7ff ff39 	bl	801036c <__assert_func>
 80104fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80104fe:	6005      	str	r5, [r0, #0]
 8010500:	60c5      	str	r5, [r0, #12]
 8010502:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010504:	6819      	ldr	r1, [r3, #0]
 8010506:	b151      	cbz	r1, 801051e <_dtoa_r+0x5e>
 8010508:	685a      	ldr	r2, [r3, #4]
 801050a:	604a      	str	r2, [r1, #4]
 801050c:	2301      	movs	r3, #1
 801050e:	4093      	lsls	r3, r2
 8010510:	608b      	str	r3, [r1, #8]
 8010512:	4620      	mov	r0, r4
 8010514:	f001 f9c6 	bl	80118a4 <_Bfree>
 8010518:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801051a:	2200      	movs	r2, #0
 801051c:	601a      	str	r2, [r3, #0]
 801051e:	1e3b      	subs	r3, r7, #0
 8010520:	bfaa      	itet	ge
 8010522:	2300      	movge	r3, #0
 8010524:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010528:	f8c8 3000 	strge.w	r3, [r8]
 801052c:	4b9a      	ldr	r3, [pc, #616]	; (8010798 <_dtoa_r+0x2d8>)
 801052e:	bfbc      	itt	lt
 8010530:	2201      	movlt	r2, #1
 8010532:	f8c8 2000 	strlt.w	r2, [r8]
 8010536:	ea33 030b 	bics.w	r3, r3, fp
 801053a:	d11b      	bne.n	8010574 <_dtoa_r+0xb4>
 801053c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801053e:	f242 730f 	movw	r3, #9999	; 0x270f
 8010542:	6013      	str	r3, [r2, #0]
 8010544:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010548:	4333      	orrs	r3, r6
 801054a:	f000 8592 	beq.w	8011072 <_dtoa_r+0xbb2>
 801054e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010550:	b963      	cbnz	r3, 801056c <_dtoa_r+0xac>
 8010552:	4b92      	ldr	r3, [pc, #584]	; (801079c <_dtoa_r+0x2dc>)
 8010554:	e022      	b.n	801059c <_dtoa_r+0xdc>
 8010556:	4b92      	ldr	r3, [pc, #584]	; (80107a0 <_dtoa_r+0x2e0>)
 8010558:	9301      	str	r3, [sp, #4]
 801055a:	3308      	adds	r3, #8
 801055c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801055e:	6013      	str	r3, [r2, #0]
 8010560:	9801      	ldr	r0, [sp, #4]
 8010562:	b013      	add	sp, #76	; 0x4c
 8010564:	ecbd 8b04 	vpop	{d8-d9}
 8010568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801056c:	4b8b      	ldr	r3, [pc, #556]	; (801079c <_dtoa_r+0x2dc>)
 801056e:	9301      	str	r3, [sp, #4]
 8010570:	3303      	adds	r3, #3
 8010572:	e7f3      	b.n	801055c <_dtoa_r+0x9c>
 8010574:	2200      	movs	r2, #0
 8010576:	2300      	movs	r3, #0
 8010578:	4650      	mov	r0, sl
 801057a:	4659      	mov	r1, fp
 801057c:	f7f0 facc 	bl	8000b18 <__aeabi_dcmpeq>
 8010580:	ec4b ab19 	vmov	d9, sl, fp
 8010584:	4680      	mov	r8, r0
 8010586:	b158      	cbz	r0, 80105a0 <_dtoa_r+0xe0>
 8010588:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801058a:	2301      	movs	r3, #1
 801058c:	6013      	str	r3, [r2, #0]
 801058e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010590:	2b00      	cmp	r3, #0
 8010592:	f000 856b 	beq.w	801106c <_dtoa_r+0xbac>
 8010596:	4883      	ldr	r0, [pc, #524]	; (80107a4 <_dtoa_r+0x2e4>)
 8010598:	6018      	str	r0, [r3, #0]
 801059a:	1e43      	subs	r3, r0, #1
 801059c:	9301      	str	r3, [sp, #4]
 801059e:	e7df      	b.n	8010560 <_dtoa_r+0xa0>
 80105a0:	ec4b ab10 	vmov	d0, sl, fp
 80105a4:	aa10      	add	r2, sp, #64	; 0x40
 80105a6:	a911      	add	r1, sp, #68	; 0x44
 80105a8:	4620      	mov	r0, r4
 80105aa:	f001 fd29 	bl	8012000 <__d2b>
 80105ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80105b2:	ee08 0a10 	vmov	s16, r0
 80105b6:	2d00      	cmp	r5, #0
 80105b8:	f000 8084 	beq.w	80106c4 <_dtoa_r+0x204>
 80105bc:	ee19 3a90 	vmov	r3, s19
 80105c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80105c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80105c8:	4656      	mov	r6, sl
 80105ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80105ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80105d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80105d6:	4b74      	ldr	r3, [pc, #464]	; (80107a8 <_dtoa_r+0x2e8>)
 80105d8:	2200      	movs	r2, #0
 80105da:	4630      	mov	r0, r6
 80105dc:	4639      	mov	r1, r7
 80105de:	f7ef fe7b 	bl	80002d8 <__aeabi_dsub>
 80105e2:	a365      	add	r3, pc, #404	; (adr r3, 8010778 <_dtoa_r+0x2b8>)
 80105e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e8:	f7f0 f82e 	bl	8000648 <__aeabi_dmul>
 80105ec:	a364      	add	r3, pc, #400	; (adr r3, 8010780 <_dtoa_r+0x2c0>)
 80105ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105f2:	f7ef fe73 	bl	80002dc <__adddf3>
 80105f6:	4606      	mov	r6, r0
 80105f8:	4628      	mov	r0, r5
 80105fa:	460f      	mov	r7, r1
 80105fc:	f7ef ffba 	bl	8000574 <__aeabi_i2d>
 8010600:	a361      	add	r3, pc, #388	; (adr r3, 8010788 <_dtoa_r+0x2c8>)
 8010602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010606:	f7f0 f81f 	bl	8000648 <__aeabi_dmul>
 801060a:	4602      	mov	r2, r0
 801060c:	460b      	mov	r3, r1
 801060e:	4630      	mov	r0, r6
 8010610:	4639      	mov	r1, r7
 8010612:	f7ef fe63 	bl	80002dc <__adddf3>
 8010616:	4606      	mov	r6, r0
 8010618:	460f      	mov	r7, r1
 801061a:	f7f0 fac5 	bl	8000ba8 <__aeabi_d2iz>
 801061e:	2200      	movs	r2, #0
 8010620:	9000      	str	r0, [sp, #0]
 8010622:	2300      	movs	r3, #0
 8010624:	4630      	mov	r0, r6
 8010626:	4639      	mov	r1, r7
 8010628:	f7f0 fa80 	bl	8000b2c <__aeabi_dcmplt>
 801062c:	b150      	cbz	r0, 8010644 <_dtoa_r+0x184>
 801062e:	9800      	ldr	r0, [sp, #0]
 8010630:	f7ef ffa0 	bl	8000574 <__aeabi_i2d>
 8010634:	4632      	mov	r2, r6
 8010636:	463b      	mov	r3, r7
 8010638:	f7f0 fa6e 	bl	8000b18 <__aeabi_dcmpeq>
 801063c:	b910      	cbnz	r0, 8010644 <_dtoa_r+0x184>
 801063e:	9b00      	ldr	r3, [sp, #0]
 8010640:	3b01      	subs	r3, #1
 8010642:	9300      	str	r3, [sp, #0]
 8010644:	9b00      	ldr	r3, [sp, #0]
 8010646:	2b16      	cmp	r3, #22
 8010648:	d85a      	bhi.n	8010700 <_dtoa_r+0x240>
 801064a:	9a00      	ldr	r2, [sp, #0]
 801064c:	4b57      	ldr	r3, [pc, #348]	; (80107ac <_dtoa_r+0x2ec>)
 801064e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010656:	ec51 0b19 	vmov	r0, r1, d9
 801065a:	f7f0 fa67 	bl	8000b2c <__aeabi_dcmplt>
 801065e:	2800      	cmp	r0, #0
 8010660:	d050      	beq.n	8010704 <_dtoa_r+0x244>
 8010662:	9b00      	ldr	r3, [sp, #0]
 8010664:	3b01      	subs	r3, #1
 8010666:	9300      	str	r3, [sp, #0]
 8010668:	2300      	movs	r3, #0
 801066a:	930b      	str	r3, [sp, #44]	; 0x2c
 801066c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801066e:	1b5d      	subs	r5, r3, r5
 8010670:	1e6b      	subs	r3, r5, #1
 8010672:	9305      	str	r3, [sp, #20]
 8010674:	bf45      	ittet	mi
 8010676:	f1c5 0301 	rsbmi	r3, r5, #1
 801067a:	9304      	strmi	r3, [sp, #16]
 801067c:	2300      	movpl	r3, #0
 801067e:	2300      	movmi	r3, #0
 8010680:	bf4c      	ite	mi
 8010682:	9305      	strmi	r3, [sp, #20]
 8010684:	9304      	strpl	r3, [sp, #16]
 8010686:	9b00      	ldr	r3, [sp, #0]
 8010688:	2b00      	cmp	r3, #0
 801068a:	db3d      	blt.n	8010708 <_dtoa_r+0x248>
 801068c:	9b05      	ldr	r3, [sp, #20]
 801068e:	9a00      	ldr	r2, [sp, #0]
 8010690:	920a      	str	r2, [sp, #40]	; 0x28
 8010692:	4413      	add	r3, r2
 8010694:	9305      	str	r3, [sp, #20]
 8010696:	2300      	movs	r3, #0
 8010698:	9307      	str	r3, [sp, #28]
 801069a:	9b06      	ldr	r3, [sp, #24]
 801069c:	2b09      	cmp	r3, #9
 801069e:	f200 8089 	bhi.w	80107b4 <_dtoa_r+0x2f4>
 80106a2:	2b05      	cmp	r3, #5
 80106a4:	bfc4      	itt	gt
 80106a6:	3b04      	subgt	r3, #4
 80106a8:	9306      	strgt	r3, [sp, #24]
 80106aa:	9b06      	ldr	r3, [sp, #24]
 80106ac:	f1a3 0302 	sub.w	r3, r3, #2
 80106b0:	bfcc      	ite	gt
 80106b2:	2500      	movgt	r5, #0
 80106b4:	2501      	movle	r5, #1
 80106b6:	2b03      	cmp	r3, #3
 80106b8:	f200 8087 	bhi.w	80107ca <_dtoa_r+0x30a>
 80106bc:	e8df f003 	tbb	[pc, r3]
 80106c0:	59383a2d 	.word	0x59383a2d
 80106c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80106c8:	441d      	add	r5, r3
 80106ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80106ce:	2b20      	cmp	r3, #32
 80106d0:	bfc1      	itttt	gt
 80106d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80106d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80106da:	fa0b f303 	lslgt.w	r3, fp, r3
 80106de:	fa26 f000 	lsrgt.w	r0, r6, r0
 80106e2:	bfda      	itte	le
 80106e4:	f1c3 0320 	rsble	r3, r3, #32
 80106e8:	fa06 f003 	lslle.w	r0, r6, r3
 80106ec:	4318      	orrgt	r0, r3
 80106ee:	f7ef ff31 	bl	8000554 <__aeabi_ui2d>
 80106f2:	2301      	movs	r3, #1
 80106f4:	4606      	mov	r6, r0
 80106f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80106fa:	3d01      	subs	r5, #1
 80106fc:	930e      	str	r3, [sp, #56]	; 0x38
 80106fe:	e76a      	b.n	80105d6 <_dtoa_r+0x116>
 8010700:	2301      	movs	r3, #1
 8010702:	e7b2      	b.n	801066a <_dtoa_r+0x1aa>
 8010704:	900b      	str	r0, [sp, #44]	; 0x2c
 8010706:	e7b1      	b.n	801066c <_dtoa_r+0x1ac>
 8010708:	9b04      	ldr	r3, [sp, #16]
 801070a:	9a00      	ldr	r2, [sp, #0]
 801070c:	1a9b      	subs	r3, r3, r2
 801070e:	9304      	str	r3, [sp, #16]
 8010710:	4253      	negs	r3, r2
 8010712:	9307      	str	r3, [sp, #28]
 8010714:	2300      	movs	r3, #0
 8010716:	930a      	str	r3, [sp, #40]	; 0x28
 8010718:	e7bf      	b.n	801069a <_dtoa_r+0x1da>
 801071a:	2300      	movs	r3, #0
 801071c:	9308      	str	r3, [sp, #32]
 801071e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010720:	2b00      	cmp	r3, #0
 8010722:	dc55      	bgt.n	80107d0 <_dtoa_r+0x310>
 8010724:	2301      	movs	r3, #1
 8010726:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801072a:	461a      	mov	r2, r3
 801072c:	9209      	str	r2, [sp, #36]	; 0x24
 801072e:	e00c      	b.n	801074a <_dtoa_r+0x28a>
 8010730:	2301      	movs	r3, #1
 8010732:	e7f3      	b.n	801071c <_dtoa_r+0x25c>
 8010734:	2300      	movs	r3, #0
 8010736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010738:	9308      	str	r3, [sp, #32]
 801073a:	9b00      	ldr	r3, [sp, #0]
 801073c:	4413      	add	r3, r2
 801073e:	9302      	str	r3, [sp, #8]
 8010740:	3301      	adds	r3, #1
 8010742:	2b01      	cmp	r3, #1
 8010744:	9303      	str	r3, [sp, #12]
 8010746:	bfb8      	it	lt
 8010748:	2301      	movlt	r3, #1
 801074a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801074c:	2200      	movs	r2, #0
 801074e:	6042      	str	r2, [r0, #4]
 8010750:	2204      	movs	r2, #4
 8010752:	f102 0614 	add.w	r6, r2, #20
 8010756:	429e      	cmp	r6, r3
 8010758:	6841      	ldr	r1, [r0, #4]
 801075a:	d93d      	bls.n	80107d8 <_dtoa_r+0x318>
 801075c:	4620      	mov	r0, r4
 801075e:	f001 f861 	bl	8011824 <_Balloc>
 8010762:	9001      	str	r0, [sp, #4]
 8010764:	2800      	cmp	r0, #0
 8010766:	d13b      	bne.n	80107e0 <_dtoa_r+0x320>
 8010768:	4b11      	ldr	r3, [pc, #68]	; (80107b0 <_dtoa_r+0x2f0>)
 801076a:	4602      	mov	r2, r0
 801076c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010770:	e6c0      	b.n	80104f4 <_dtoa_r+0x34>
 8010772:	2301      	movs	r3, #1
 8010774:	e7df      	b.n	8010736 <_dtoa_r+0x276>
 8010776:	bf00      	nop
 8010778:	636f4361 	.word	0x636f4361
 801077c:	3fd287a7 	.word	0x3fd287a7
 8010780:	8b60c8b3 	.word	0x8b60c8b3
 8010784:	3fc68a28 	.word	0x3fc68a28
 8010788:	509f79fb 	.word	0x509f79fb
 801078c:	3fd34413 	.word	0x3fd34413
 8010790:	08013d8d 	.word	0x08013d8d
 8010794:	08013f9a 	.word	0x08013f9a
 8010798:	7ff00000 	.word	0x7ff00000
 801079c:	08013f96 	.word	0x08013f96
 80107a0:	08013f8d 	.word	0x08013f8d
 80107a4:	08013d65 	.word	0x08013d65
 80107a8:	3ff80000 	.word	0x3ff80000
 80107ac:	08014108 	.word	0x08014108
 80107b0:	08013ff5 	.word	0x08013ff5
 80107b4:	2501      	movs	r5, #1
 80107b6:	2300      	movs	r3, #0
 80107b8:	9306      	str	r3, [sp, #24]
 80107ba:	9508      	str	r5, [sp, #32]
 80107bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80107c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80107c4:	2200      	movs	r2, #0
 80107c6:	2312      	movs	r3, #18
 80107c8:	e7b0      	b.n	801072c <_dtoa_r+0x26c>
 80107ca:	2301      	movs	r3, #1
 80107cc:	9308      	str	r3, [sp, #32]
 80107ce:	e7f5      	b.n	80107bc <_dtoa_r+0x2fc>
 80107d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80107d6:	e7b8      	b.n	801074a <_dtoa_r+0x28a>
 80107d8:	3101      	adds	r1, #1
 80107da:	6041      	str	r1, [r0, #4]
 80107dc:	0052      	lsls	r2, r2, #1
 80107de:	e7b8      	b.n	8010752 <_dtoa_r+0x292>
 80107e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80107e2:	9a01      	ldr	r2, [sp, #4]
 80107e4:	601a      	str	r2, [r3, #0]
 80107e6:	9b03      	ldr	r3, [sp, #12]
 80107e8:	2b0e      	cmp	r3, #14
 80107ea:	f200 809d 	bhi.w	8010928 <_dtoa_r+0x468>
 80107ee:	2d00      	cmp	r5, #0
 80107f0:	f000 809a 	beq.w	8010928 <_dtoa_r+0x468>
 80107f4:	9b00      	ldr	r3, [sp, #0]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	dd32      	ble.n	8010860 <_dtoa_r+0x3a0>
 80107fa:	4ab7      	ldr	r2, [pc, #732]	; (8010ad8 <_dtoa_r+0x618>)
 80107fc:	f003 030f 	and.w	r3, r3, #15
 8010800:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010804:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010808:	9b00      	ldr	r3, [sp, #0]
 801080a:	05d8      	lsls	r0, r3, #23
 801080c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010810:	d516      	bpl.n	8010840 <_dtoa_r+0x380>
 8010812:	4bb2      	ldr	r3, [pc, #712]	; (8010adc <_dtoa_r+0x61c>)
 8010814:	ec51 0b19 	vmov	r0, r1, d9
 8010818:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801081c:	f7f0 f83e 	bl	800089c <__aeabi_ddiv>
 8010820:	f007 070f 	and.w	r7, r7, #15
 8010824:	4682      	mov	sl, r0
 8010826:	468b      	mov	fp, r1
 8010828:	2503      	movs	r5, #3
 801082a:	4eac      	ldr	r6, [pc, #688]	; (8010adc <_dtoa_r+0x61c>)
 801082c:	b957      	cbnz	r7, 8010844 <_dtoa_r+0x384>
 801082e:	4642      	mov	r2, r8
 8010830:	464b      	mov	r3, r9
 8010832:	4650      	mov	r0, sl
 8010834:	4659      	mov	r1, fp
 8010836:	f7f0 f831 	bl	800089c <__aeabi_ddiv>
 801083a:	4682      	mov	sl, r0
 801083c:	468b      	mov	fp, r1
 801083e:	e028      	b.n	8010892 <_dtoa_r+0x3d2>
 8010840:	2502      	movs	r5, #2
 8010842:	e7f2      	b.n	801082a <_dtoa_r+0x36a>
 8010844:	07f9      	lsls	r1, r7, #31
 8010846:	d508      	bpl.n	801085a <_dtoa_r+0x39a>
 8010848:	4640      	mov	r0, r8
 801084a:	4649      	mov	r1, r9
 801084c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010850:	f7ef fefa 	bl	8000648 <__aeabi_dmul>
 8010854:	3501      	adds	r5, #1
 8010856:	4680      	mov	r8, r0
 8010858:	4689      	mov	r9, r1
 801085a:	107f      	asrs	r7, r7, #1
 801085c:	3608      	adds	r6, #8
 801085e:	e7e5      	b.n	801082c <_dtoa_r+0x36c>
 8010860:	f000 809b 	beq.w	801099a <_dtoa_r+0x4da>
 8010864:	9b00      	ldr	r3, [sp, #0]
 8010866:	4f9d      	ldr	r7, [pc, #628]	; (8010adc <_dtoa_r+0x61c>)
 8010868:	425e      	negs	r6, r3
 801086a:	4b9b      	ldr	r3, [pc, #620]	; (8010ad8 <_dtoa_r+0x618>)
 801086c:	f006 020f 	and.w	r2, r6, #15
 8010870:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010878:	ec51 0b19 	vmov	r0, r1, d9
 801087c:	f7ef fee4 	bl	8000648 <__aeabi_dmul>
 8010880:	1136      	asrs	r6, r6, #4
 8010882:	4682      	mov	sl, r0
 8010884:	468b      	mov	fp, r1
 8010886:	2300      	movs	r3, #0
 8010888:	2502      	movs	r5, #2
 801088a:	2e00      	cmp	r6, #0
 801088c:	d17a      	bne.n	8010984 <_dtoa_r+0x4c4>
 801088e:	2b00      	cmp	r3, #0
 8010890:	d1d3      	bne.n	801083a <_dtoa_r+0x37a>
 8010892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010894:	2b00      	cmp	r3, #0
 8010896:	f000 8082 	beq.w	801099e <_dtoa_r+0x4de>
 801089a:	4b91      	ldr	r3, [pc, #580]	; (8010ae0 <_dtoa_r+0x620>)
 801089c:	2200      	movs	r2, #0
 801089e:	4650      	mov	r0, sl
 80108a0:	4659      	mov	r1, fp
 80108a2:	f7f0 f943 	bl	8000b2c <__aeabi_dcmplt>
 80108a6:	2800      	cmp	r0, #0
 80108a8:	d079      	beq.n	801099e <_dtoa_r+0x4de>
 80108aa:	9b03      	ldr	r3, [sp, #12]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d076      	beq.n	801099e <_dtoa_r+0x4de>
 80108b0:	9b02      	ldr	r3, [sp, #8]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	dd36      	ble.n	8010924 <_dtoa_r+0x464>
 80108b6:	9b00      	ldr	r3, [sp, #0]
 80108b8:	4650      	mov	r0, sl
 80108ba:	4659      	mov	r1, fp
 80108bc:	1e5f      	subs	r7, r3, #1
 80108be:	2200      	movs	r2, #0
 80108c0:	4b88      	ldr	r3, [pc, #544]	; (8010ae4 <_dtoa_r+0x624>)
 80108c2:	f7ef fec1 	bl	8000648 <__aeabi_dmul>
 80108c6:	9e02      	ldr	r6, [sp, #8]
 80108c8:	4682      	mov	sl, r0
 80108ca:	468b      	mov	fp, r1
 80108cc:	3501      	adds	r5, #1
 80108ce:	4628      	mov	r0, r5
 80108d0:	f7ef fe50 	bl	8000574 <__aeabi_i2d>
 80108d4:	4652      	mov	r2, sl
 80108d6:	465b      	mov	r3, fp
 80108d8:	f7ef feb6 	bl	8000648 <__aeabi_dmul>
 80108dc:	4b82      	ldr	r3, [pc, #520]	; (8010ae8 <_dtoa_r+0x628>)
 80108de:	2200      	movs	r2, #0
 80108e0:	f7ef fcfc 	bl	80002dc <__adddf3>
 80108e4:	46d0      	mov	r8, sl
 80108e6:	46d9      	mov	r9, fp
 80108e8:	4682      	mov	sl, r0
 80108ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80108ee:	2e00      	cmp	r6, #0
 80108f0:	d158      	bne.n	80109a4 <_dtoa_r+0x4e4>
 80108f2:	4b7e      	ldr	r3, [pc, #504]	; (8010aec <_dtoa_r+0x62c>)
 80108f4:	2200      	movs	r2, #0
 80108f6:	4640      	mov	r0, r8
 80108f8:	4649      	mov	r1, r9
 80108fa:	f7ef fced 	bl	80002d8 <__aeabi_dsub>
 80108fe:	4652      	mov	r2, sl
 8010900:	465b      	mov	r3, fp
 8010902:	4680      	mov	r8, r0
 8010904:	4689      	mov	r9, r1
 8010906:	f7f0 f92f 	bl	8000b68 <__aeabi_dcmpgt>
 801090a:	2800      	cmp	r0, #0
 801090c:	f040 8295 	bne.w	8010e3a <_dtoa_r+0x97a>
 8010910:	4652      	mov	r2, sl
 8010912:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010916:	4640      	mov	r0, r8
 8010918:	4649      	mov	r1, r9
 801091a:	f7f0 f907 	bl	8000b2c <__aeabi_dcmplt>
 801091e:	2800      	cmp	r0, #0
 8010920:	f040 8289 	bne.w	8010e36 <_dtoa_r+0x976>
 8010924:	ec5b ab19 	vmov	sl, fp, d9
 8010928:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801092a:	2b00      	cmp	r3, #0
 801092c:	f2c0 8148 	blt.w	8010bc0 <_dtoa_r+0x700>
 8010930:	9a00      	ldr	r2, [sp, #0]
 8010932:	2a0e      	cmp	r2, #14
 8010934:	f300 8144 	bgt.w	8010bc0 <_dtoa_r+0x700>
 8010938:	4b67      	ldr	r3, [pc, #412]	; (8010ad8 <_dtoa_r+0x618>)
 801093a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801093e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010944:	2b00      	cmp	r3, #0
 8010946:	f280 80d5 	bge.w	8010af4 <_dtoa_r+0x634>
 801094a:	9b03      	ldr	r3, [sp, #12]
 801094c:	2b00      	cmp	r3, #0
 801094e:	f300 80d1 	bgt.w	8010af4 <_dtoa_r+0x634>
 8010952:	f040 826f 	bne.w	8010e34 <_dtoa_r+0x974>
 8010956:	4b65      	ldr	r3, [pc, #404]	; (8010aec <_dtoa_r+0x62c>)
 8010958:	2200      	movs	r2, #0
 801095a:	4640      	mov	r0, r8
 801095c:	4649      	mov	r1, r9
 801095e:	f7ef fe73 	bl	8000648 <__aeabi_dmul>
 8010962:	4652      	mov	r2, sl
 8010964:	465b      	mov	r3, fp
 8010966:	f7f0 f8f5 	bl	8000b54 <__aeabi_dcmpge>
 801096a:	9e03      	ldr	r6, [sp, #12]
 801096c:	4637      	mov	r7, r6
 801096e:	2800      	cmp	r0, #0
 8010970:	f040 8245 	bne.w	8010dfe <_dtoa_r+0x93e>
 8010974:	9d01      	ldr	r5, [sp, #4]
 8010976:	2331      	movs	r3, #49	; 0x31
 8010978:	f805 3b01 	strb.w	r3, [r5], #1
 801097c:	9b00      	ldr	r3, [sp, #0]
 801097e:	3301      	adds	r3, #1
 8010980:	9300      	str	r3, [sp, #0]
 8010982:	e240      	b.n	8010e06 <_dtoa_r+0x946>
 8010984:	07f2      	lsls	r2, r6, #31
 8010986:	d505      	bpl.n	8010994 <_dtoa_r+0x4d4>
 8010988:	e9d7 2300 	ldrd	r2, r3, [r7]
 801098c:	f7ef fe5c 	bl	8000648 <__aeabi_dmul>
 8010990:	3501      	adds	r5, #1
 8010992:	2301      	movs	r3, #1
 8010994:	1076      	asrs	r6, r6, #1
 8010996:	3708      	adds	r7, #8
 8010998:	e777      	b.n	801088a <_dtoa_r+0x3ca>
 801099a:	2502      	movs	r5, #2
 801099c:	e779      	b.n	8010892 <_dtoa_r+0x3d2>
 801099e:	9f00      	ldr	r7, [sp, #0]
 80109a0:	9e03      	ldr	r6, [sp, #12]
 80109a2:	e794      	b.n	80108ce <_dtoa_r+0x40e>
 80109a4:	9901      	ldr	r1, [sp, #4]
 80109a6:	4b4c      	ldr	r3, [pc, #304]	; (8010ad8 <_dtoa_r+0x618>)
 80109a8:	4431      	add	r1, r6
 80109aa:	910d      	str	r1, [sp, #52]	; 0x34
 80109ac:	9908      	ldr	r1, [sp, #32]
 80109ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80109b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80109b6:	2900      	cmp	r1, #0
 80109b8:	d043      	beq.n	8010a42 <_dtoa_r+0x582>
 80109ba:	494d      	ldr	r1, [pc, #308]	; (8010af0 <_dtoa_r+0x630>)
 80109bc:	2000      	movs	r0, #0
 80109be:	f7ef ff6d 	bl	800089c <__aeabi_ddiv>
 80109c2:	4652      	mov	r2, sl
 80109c4:	465b      	mov	r3, fp
 80109c6:	f7ef fc87 	bl	80002d8 <__aeabi_dsub>
 80109ca:	9d01      	ldr	r5, [sp, #4]
 80109cc:	4682      	mov	sl, r0
 80109ce:	468b      	mov	fp, r1
 80109d0:	4649      	mov	r1, r9
 80109d2:	4640      	mov	r0, r8
 80109d4:	f7f0 f8e8 	bl	8000ba8 <__aeabi_d2iz>
 80109d8:	4606      	mov	r6, r0
 80109da:	f7ef fdcb 	bl	8000574 <__aeabi_i2d>
 80109de:	4602      	mov	r2, r0
 80109e0:	460b      	mov	r3, r1
 80109e2:	4640      	mov	r0, r8
 80109e4:	4649      	mov	r1, r9
 80109e6:	f7ef fc77 	bl	80002d8 <__aeabi_dsub>
 80109ea:	3630      	adds	r6, #48	; 0x30
 80109ec:	f805 6b01 	strb.w	r6, [r5], #1
 80109f0:	4652      	mov	r2, sl
 80109f2:	465b      	mov	r3, fp
 80109f4:	4680      	mov	r8, r0
 80109f6:	4689      	mov	r9, r1
 80109f8:	f7f0 f898 	bl	8000b2c <__aeabi_dcmplt>
 80109fc:	2800      	cmp	r0, #0
 80109fe:	d163      	bne.n	8010ac8 <_dtoa_r+0x608>
 8010a00:	4642      	mov	r2, r8
 8010a02:	464b      	mov	r3, r9
 8010a04:	4936      	ldr	r1, [pc, #216]	; (8010ae0 <_dtoa_r+0x620>)
 8010a06:	2000      	movs	r0, #0
 8010a08:	f7ef fc66 	bl	80002d8 <__aeabi_dsub>
 8010a0c:	4652      	mov	r2, sl
 8010a0e:	465b      	mov	r3, fp
 8010a10:	f7f0 f88c 	bl	8000b2c <__aeabi_dcmplt>
 8010a14:	2800      	cmp	r0, #0
 8010a16:	f040 80b5 	bne.w	8010b84 <_dtoa_r+0x6c4>
 8010a1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a1c:	429d      	cmp	r5, r3
 8010a1e:	d081      	beq.n	8010924 <_dtoa_r+0x464>
 8010a20:	4b30      	ldr	r3, [pc, #192]	; (8010ae4 <_dtoa_r+0x624>)
 8010a22:	2200      	movs	r2, #0
 8010a24:	4650      	mov	r0, sl
 8010a26:	4659      	mov	r1, fp
 8010a28:	f7ef fe0e 	bl	8000648 <__aeabi_dmul>
 8010a2c:	4b2d      	ldr	r3, [pc, #180]	; (8010ae4 <_dtoa_r+0x624>)
 8010a2e:	4682      	mov	sl, r0
 8010a30:	468b      	mov	fp, r1
 8010a32:	4640      	mov	r0, r8
 8010a34:	4649      	mov	r1, r9
 8010a36:	2200      	movs	r2, #0
 8010a38:	f7ef fe06 	bl	8000648 <__aeabi_dmul>
 8010a3c:	4680      	mov	r8, r0
 8010a3e:	4689      	mov	r9, r1
 8010a40:	e7c6      	b.n	80109d0 <_dtoa_r+0x510>
 8010a42:	4650      	mov	r0, sl
 8010a44:	4659      	mov	r1, fp
 8010a46:	f7ef fdff 	bl	8000648 <__aeabi_dmul>
 8010a4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a4c:	9d01      	ldr	r5, [sp, #4]
 8010a4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010a50:	4682      	mov	sl, r0
 8010a52:	468b      	mov	fp, r1
 8010a54:	4649      	mov	r1, r9
 8010a56:	4640      	mov	r0, r8
 8010a58:	f7f0 f8a6 	bl	8000ba8 <__aeabi_d2iz>
 8010a5c:	4606      	mov	r6, r0
 8010a5e:	f7ef fd89 	bl	8000574 <__aeabi_i2d>
 8010a62:	3630      	adds	r6, #48	; 0x30
 8010a64:	4602      	mov	r2, r0
 8010a66:	460b      	mov	r3, r1
 8010a68:	4640      	mov	r0, r8
 8010a6a:	4649      	mov	r1, r9
 8010a6c:	f7ef fc34 	bl	80002d8 <__aeabi_dsub>
 8010a70:	f805 6b01 	strb.w	r6, [r5], #1
 8010a74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a76:	429d      	cmp	r5, r3
 8010a78:	4680      	mov	r8, r0
 8010a7a:	4689      	mov	r9, r1
 8010a7c:	f04f 0200 	mov.w	r2, #0
 8010a80:	d124      	bne.n	8010acc <_dtoa_r+0x60c>
 8010a82:	4b1b      	ldr	r3, [pc, #108]	; (8010af0 <_dtoa_r+0x630>)
 8010a84:	4650      	mov	r0, sl
 8010a86:	4659      	mov	r1, fp
 8010a88:	f7ef fc28 	bl	80002dc <__adddf3>
 8010a8c:	4602      	mov	r2, r0
 8010a8e:	460b      	mov	r3, r1
 8010a90:	4640      	mov	r0, r8
 8010a92:	4649      	mov	r1, r9
 8010a94:	f7f0 f868 	bl	8000b68 <__aeabi_dcmpgt>
 8010a98:	2800      	cmp	r0, #0
 8010a9a:	d173      	bne.n	8010b84 <_dtoa_r+0x6c4>
 8010a9c:	4652      	mov	r2, sl
 8010a9e:	465b      	mov	r3, fp
 8010aa0:	4913      	ldr	r1, [pc, #76]	; (8010af0 <_dtoa_r+0x630>)
 8010aa2:	2000      	movs	r0, #0
 8010aa4:	f7ef fc18 	bl	80002d8 <__aeabi_dsub>
 8010aa8:	4602      	mov	r2, r0
 8010aaa:	460b      	mov	r3, r1
 8010aac:	4640      	mov	r0, r8
 8010aae:	4649      	mov	r1, r9
 8010ab0:	f7f0 f83c 	bl	8000b2c <__aeabi_dcmplt>
 8010ab4:	2800      	cmp	r0, #0
 8010ab6:	f43f af35 	beq.w	8010924 <_dtoa_r+0x464>
 8010aba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010abc:	1e6b      	subs	r3, r5, #1
 8010abe:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ac0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010ac4:	2b30      	cmp	r3, #48	; 0x30
 8010ac6:	d0f8      	beq.n	8010aba <_dtoa_r+0x5fa>
 8010ac8:	9700      	str	r7, [sp, #0]
 8010aca:	e049      	b.n	8010b60 <_dtoa_r+0x6a0>
 8010acc:	4b05      	ldr	r3, [pc, #20]	; (8010ae4 <_dtoa_r+0x624>)
 8010ace:	f7ef fdbb 	bl	8000648 <__aeabi_dmul>
 8010ad2:	4680      	mov	r8, r0
 8010ad4:	4689      	mov	r9, r1
 8010ad6:	e7bd      	b.n	8010a54 <_dtoa_r+0x594>
 8010ad8:	08014108 	.word	0x08014108
 8010adc:	080140e0 	.word	0x080140e0
 8010ae0:	3ff00000 	.word	0x3ff00000
 8010ae4:	40240000 	.word	0x40240000
 8010ae8:	401c0000 	.word	0x401c0000
 8010aec:	40140000 	.word	0x40140000
 8010af0:	3fe00000 	.word	0x3fe00000
 8010af4:	9d01      	ldr	r5, [sp, #4]
 8010af6:	4656      	mov	r6, sl
 8010af8:	465f      	mov	r7, fp
 8010afa:	4642      	mov	r2, r8
 8010afc:	464b      	mov	r3, r9
 8010afe:	4630      	mov	r0, r6
 8010b00:	4639      	mov	r1, r7
 8010b02:	f7ef fecb 	bl	800089c <__aeabi_ddiv>
 8010b06:	f7f0 f84f 	bl	8000ba8 <__aeabi_d2iz>
 8010b0a:	4682      	mov	sl, r0
 8010b0c:	f7ef fd32 	bl	8000574 <__aeabi_i2d>
 8010b10:	4642      	mov	r2, r8
 8010b12:	464b      	mov	r3, r9
 8010b14:	f7ef fd98 	bl	8000648 <__aeabi_dmul>
 8010b18:	4602      	mov	r2, r0
 8010b1a:	460b      	mov	r3, r1
 8010b1c:	4630      	mov	r0, r6
 8010b1e:	4639      	mov	r1, r7
 8010b20:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010b24:	f7ef fbd8 	bl	80002d8 <__aeabi_dsub>
 8010b28:	f805 6b01 	strb.w	r6, [r5], #1
 8010b2c:	9e01      	ldr	r6, [sp, #4]
 8010b2e:	9f03      	ldr	r7, [sp, #12]
 8010b30:	1bae      	subs	r6, r5, r6
 8010b32:	42b7      	cmp	r7, r6
 8010b34:	4602      	mov	r2, r0
 8010b36:	460b      	mov	r3, r1
 8010b38:	d135      	bne.n	8010ba6 <_dtoa_r+0x6e6>
 8010b3a:	f7ef fbcf 	bl	80002dc <__adddf3>
 8010b3e:	4642      	mov	r2, r8
 8010b40:	464b      	mov	r3, r9
 8010b42:	4606      	mov	r6, r0
 8010b44:	460f      	mov	r7, r1
 8010b46:	f7f0 f80f 	bl	8000b68 <__aeabi_dcmpgt>
 8010b4a:	b9d0      	cbnz	r0, 8010b82 <_dtoa_r+0x6c2>
 8010b4c:	4642      	mov	r2, r8
 8010b4e:	464b      	mov	r3, r9
 8010b50:	4630      	mov	r0, r6
 8010b52:	4639      	mov	r1, r7
 8010b54:	f7ef ffe0 	bl	8000b18 <__aeabi_dcmpeq>
 8010b58:	b110      	cbz	r0, 8010b60 <_dtoa_r+0x6a0>
 8010b5a:	f01a 0f01 	tst.w	sl, #1
 8010b5e:	d110      	bne.n	8010b82 <_dtoa_r+0x6c2>
 8010b60:	4620      	mov	r0, r4
 8010b62:	ee18 1a10 	vmov	r1, s16
 8010b66:	f000 fe9d 	bl	80118a4 <_Bfree>
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	9800      	ldr	r0, [sp, #0]
 8010b6e:	702b      	strb	r3, [r5, #0]
 8010b70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b72:	3001      	adds	r0, #1
 8010b74:	6018      	str	r0, [r3, #0]
 8010b76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	f43f acf1 	beq.w	8010560 <_dtoa_r+0xa0>
 8010b7e:	601d      	str	r5, [r3, #0]
 8010b80:	e4ee      	b.n	8010560 <_dtoa_r+0xa0>
 8010b82:	9f00      	ldr	r7, [sp, #0]
 8010b84:	462b      	mov	r3, r5
 8010b86:	461d      	mov	r5, r3
 8010b88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010b8c:	2a39      	cmp	r2, #57	; 0x39
 8010b8e:	d106      	bne.n	8010b9e <_dtoa_r+0x6de>
 8010b90:	9a01      	ldr	r2, [sp, #4]
 8010b92:	429a      	cmp	r2, r3
 8010b94:	d1f7      	bne.n	8010b86 <_dtoa_r+0x6c6>
 8010b96:	9901      	ldr	r1, [sp, #4]
 8010b98:	2230      	movs	r2, #48	; 0x30
 8010b9a:	3701      	adds	r7, #1
 8010b9c:	700a      	strb	r2, [r1, #0]
 8010b9e:	781a      	ldrb	r2, [r3, #0]
 8010ba0:	3201      	adds	r2, #1
 8010ba2:	701a      	strb	r2, [r3, #0]
 8010ba4:	e790      	b.n	8010ac8 <_dtoa_r+0x608>
 8010ba6:	4ba6      	ldr	r3, [pc, #664]	; (8010e40 <_dtoa_r+0x980>)
 8010ba8:	2200      	movs	r2, #0
 8010baa:	f7ef fd4d 	bl	8000648 <__aeabi_dmul>
 8010bae:	2200      	movs	r2, #0
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	4606      	mov	r6, r0
 8010bb4:	460f      	mov	r7, r1
 8010bb6:	f7ef ffaf 	bl	8000b18 <__aeabi_dcmpeq>
 8010bba:	2800      	cmp	r0, #0
 8010bbc:	d09d      	beq.n	8010afa <_dtoa_r+0x63a>
 8010bbe:	e7cf      	b.n	8010b60 <_dtoa_r+0x6a0>
 8010bc0:	9a08      	ldr	r2, [sp, #32]
 8010bc2:	2a00      	cmp	r2, #0
 8010bc4:	f000 80d7 	beq.w	8010d76 <_dtoa_r+0x8b6>
 8010bc8:	9a06      	ldr	r2, [sp, #24]
 8010bca:	2a01      	cmp	r2, #1
 8010bcc:	f300 80ba 	bgt.w	8010d44 <_dtoa_r+0x884>
 8010bd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010bd2:	2a00      	cmp	r2, #0
 8010bd4:	f000 80b2 	beq.w	8010d3c <_dtoa_r+0x87c>
 8010bd8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010bdc:	9e07      	ldr	r6, [sp, #28]
 8010bde:	9d04      	ldr	r5, [sp, #16]
 8010be0:	9a04      	ldr	r2, [sp, #16]
 8010be2:	441a      	add	r2, r3
 8010be4:	9204      	str	r2, [sp, #16]
 8010be6:	9a05      	ldr	r2, [sp, #20]
 8010be8:	2101      	movs	r1, #1
 8010bea:	441a      	add	r2, r3
 8010bec:	4620      	mov	r0, r4
 8010bee:	9205      	str	r2, [sp, #20]
 8010bf0:	f000 ff5a 	bl	8011aa8 <__i2b>
 8010bf4:	4607      	mov	r7, r0
 8010bf6:	2d00      	cmp	r5, #0
 8010bf8:	dd0c      	ble.n	8010c14 <_dtoa_r+0x754>
 8010bfa:	9b05      	ldr	r3, [sp, #20]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	dd09      	ble.n	8010c14 <_dtoa_r+0x754>
 8010c00:	42ab      	cmp	r3, r5
 8010c02:	9a04      	ldr	r2, [sp, #16]
 8010c04:	bfa8      	it	ge
 8010c06:	462b      	movge	r3, r5
 8010c08:	1ad2      	subs	r2, r2, r3
 8010c0a:	9204      	str	r2, [sp, #16]
 8010c0c:	9a05      	ldr	r2, [sp, #20]
 8010c0e:	1aed      	subs	r5, r5, r3
 8010c10:	1ad3      	subs	r3, r2, r3
 8010c12:	9305      	str	r3, [sp, #20]
 8010c14:	9b07      	ldr	r3, [sp, #28]
 8010c16:	b31b      	cbz	r3, 8010c60 <_dtoa_r+0x7a0>
 8010c18:	9b08      	ldr	r3, [sp, #32]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	f000 80af 	beq.w	8010d7e <_dtoa_r+0x8be>
 8010c20:	2e00      	cmp	r6, #0
 8010c22:	dd13      	ble.n	8010c4c <_dtoa_r+0x78c>
 8010c24:	4639      	mov	r1, r7
 8010c26:	4632      	mov	r2, r6
 8010c28:	4620      	mov	r0, r4
 8010c2a:	f000 fffd 	bl	8011c28 <__pow5mult>
 8010c2e:	ee18 2a10 	vmov	r2, s16
 8010c32:	4601      	mov	r1, r0
 8010c34:	4607      	mov	r7, r0
 8010c36:	4620      	mov	r0, r4
 8010c38:	f000 ff4c 	bl	8011ad4 <__multiply>
 8010c3c:	ee18 1a10 	vmov	r1, s16
 8010c40:	4680      	mov	r8, r0
 8010c42:	4620      	mov	r0, r4
 8010c44:	f000 fe2e 	bl	80118a4 <_Bfree>
 8010c48:	ee08 8a10 	vmov	s16, r8
 8010c4c:	9b07      	ldr	r3, [sp, #28]
 8010c4e:	1b9a      	subs	r2, r3, r6
 8010c50:	d006      	beq.n	8010c60 <_dtoa_r+0x7a0>
 8010c52:	ee18 1a10 	vmov	r1, s16
 8010c56:	4620      	mov	r0, r4
 8010c58:	f000 ffe6 	bl	8011c28 <__pow5mult>
 8010c5c:	ee08 0a10 	vmov	s16, r0
 8010c60:	2101      	movs	r1, #1
 8010c62:	4620      	mov	r0, r4
 8010c64:	f000 ff20 	bl	8011aa8 <__i2b>
 8010c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	4606      	mov	r6, r0
 8010c6e:	f340 8088 	ble.w	8010d82 <_dtoa_r+0x8c2>
 8010c72:	461a      	mov	r2, r3
 8010c74:	4601      	mov	r1, r0
 8010c76:	4620      	mov	r0, r4
 8010c78:	f000 ffd6 	bl	8011c28 <__pow5mult>
 8010c7c:	9b06      	ldr	r3, [sp, #24]
 8010c7e:	2b01      	cmp	r3, #1
 8010c80:	4606      	mov	r6, r0
 8010c82:	f340 8081 	ble.w	8010d88 <_dtoa_r+0x8c8>
 8010c86:	f04f 0800 	mov.w	r8, #0
 8010c8a:	6933      	ldr	r3, [r6, #16]
 8010c8c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010c90:	6918      	ldr	r0, [r3, #16]
 8010c92:	f000 feb9 	bl	8011a08 <__hi0bits>
 8010c96:	f1c0 0020 	rsb	r0, r0, #32
 8010c9a:	9b05      	ldr	r3, [sp, #20]
 8010c9c:	4418      	add	r0, r3
 8010c9e:	f010 001f 	ands.w	r0, r0, #31
 8010ca2:	f000 8092 	beq.w	8010dca <_dtoa_r+0x90a>
 8010ca6:	f1c0 0320 	rsb	r3, r0, #32
 8010caa:	2b04      	cmp	r3, #4
 8010cac:	f340 808a 	ble.w	8010dc4 <_dtoa_r+0x904>
 8010cb0:	f1c0 001c 	rsb	r0, r0, #28
 8010cb4:	9b04      	ldr	r3, [sp, #16]
 8010cb6:	4403      	add	r3, r0
 8010cb8:	9304      	str	r3, [sp, #16]
 8010cba:	9b05      	ldr	r3, [sp, #20]
 8010cbc:	4403      	add	r3, r0
 8010cbe:	4405      	add	r5, r0
 8010cc0:	9305      	str	r3, [sp, #20]
 8010cc2:	9b04      	ldr	r3, [sp, #16]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	dd07      	ble.n	8010cd8 <_dtoa_r+0x818>
 8010cc8:	ee18 1a10 	vmov	r1, s16
 8010ccc:	461a      	mov	r2, r3
 8010cce:	4620      	mov	r0, r4
 8010cd0:	f001 f804 	bl	8011cdc <__lshift>
 8010cd4:	ee08 0a10 	vmov	s16, r0
 8010cd8:	9b05      	ldr	r3, [sp, #20]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	dd05      	ble.n	8010cea <_dtoa_r+0x82a>
 8010cde:	4631      	mov	r1, r6
 8010ce0:	461a      	mov	r2, r3
 8010ce2:	4620      	mov	r0, r4
 8010ce4:	f000 fffa 	bl	8011cdc <__lshift>
 8010ce8:	4606      	mov	r6, r0
 8010cea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d06e      	beq.n	8010dce <_dtoa_r+0x90e>
 8010cf0:	ee18 0a10 	vmov	r0, s16
 8010cf4:	4631      	mov	r1, r6
 8010cf6:	f001 f861 	bl	8011dbc <__mcmp>
 8010cfa:	2800      	cmp	r0, #0
 8010cfc:	da67      	bge.n	8010dce <_dtoa_r+0x90e>
 8010cfe:	9b00      	ldr	r3, [sp, #0]
 8010d00:	3b01      	subs	r3, #1
 8010d02:	ee18 1a10 	vmov	r1, s16
 8010d06:	9300      	str	r3, [sp, #0]
 8010d08:	220a      	movs	r2, #10
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	4620      	mov	r0, r4
 8010d0e:	f000 fdeb 	bl	80118e8 <__multadd>
 8010d12:	9b08      	ldr	r3, [sp, #32]
 8010d14:	ee08 0a10 	vmov	s16, r0
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	f000 81b1 	beq.w	8011080 <_dtoa_r+0xbc0>
 8010d1e:	2300      	movs	r3, #0
 8010d20:	4639      	mov	r1, r7
 8010d22:	220a      	movs	r2, #10
 8010d24:	4620      	mov	r0, r4
 8010d26:	f000 fddf 	bl	80118e8 <__multadd>
 8010d2a:	9b02      	ldr	r3, [sp, #8]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	4607      	mov	r7, r0
 8010d30:	f300 808e 	bgt.w	8010e50 <_dtoa_r+0x990>
 8010d34:	9b06      	ldr	r3, [sp, #24]
 8010d36:	2b02      	cmp	r3, #2
 8010d38:	dc51      	bgt.n	8010dde <_dtoa_r+0x91e>
 8010d3a:	e089      	b.n	8010e50 <_dtoa_r+0x990>
 8010d3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010d3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010d42:	e74b      	b.n	8010bdc <_dtoa_r+0x71c>
 8010d44:	9b03      	ldr	r3, [sp, #12]
 8010d46:	1e5e      	subs	r6, r3, #1
 8010d48:	9b07      	ldr	r3, [sp, #28]
 8010d4a:	42b3      	cmp	r3, r6
 8010d4c:	bfbf      	itttt	lt
 8010d4e:	9b07      	ldrlt	r3, [sp, #28]
 8010d50:	9607      	strlt	r6, [sp, #28]
 8010d52:	1af2      	sublt	r2, r6, r3
 8010d54:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010d56:	bfb6      	itet	lt
 8010d58:	189b      	addlt	r3, r3, r2
 8010d5a:	1b9e      	subge	r6, r3, r6
 8010d5c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010d5e:	9b03      	ldr	r3, [sp, #12]
 8010d60:	bfb8      	it	lt
 8010d62:	2600      	movlt	r6, #0
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	bfb7      	itett	lt
 8010d68:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010d6c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010d70:	1a9d      	sublt	r5, r3, r2
 8010d72:	2300      	movlt	r3, #0
 8010d74:	e734      	b.n	8010be0 <_dtoa_r+0x720>
 8010d76:	9e07      	ldr	r6, [sp, #28]
 8010d78:	9d04      	ldr	r5, [sp, #16]
 8010d7a:	9f08      	ldr	r7, [sp, #32]
 8010d7c:	e73b      	b.n	8010bf6 <_dtoa_r+0x736>
 8010d7e:	9a07      	ldr	r2, [sp, #28]
 8010d80:	e767      	b.n	8010c52 <_dtoa_r+0x792>
 8010d82:	9b06      	ldr	r3, [sp, #24]
 8010d84:	2b01      	cmp	r3, #1
 8010d86:	dc18      	bgt.n	8010dba <_dtoa_r+0x8fa>
 8010d88:	f1ba 0f00 	cmp.w	sl, #0
 8010d8c:	d115      	bne.n	8010dba <_dtoa_r+0x8fa>
 8010d8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010d92:	b993      	cbnz	r3, 8010dba <_dtoa_r+0x8fa>
 8010d94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010d98:	0d1b      	lsrs	r3, r3, #20
 8010d9a:	051b      	lsls	r3, r3, #20
 8010d9c:	b183      	cbz	r3, 8010dc0 <_dtoa_r+0x900>
 8010d9e:	9b04      	ldr	r3, [sp, #16]
 8010da0:	3301      	adds	r3, #1
 8010da2:	9304      	str	r3, [sp, #16]
 8010da4:	9b05      	ldr	r3, [sp, #20]
 8010da6:	3301      	adds	r3, #1
 8010da8:	9305      	str	r3, [sp, #20]
 8010daa:	f04f 0801 	mov.w	r8, #1
 8010dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	f47f af6a 	bne.w	8010c8a <_dtoa_r+0x7ca>
 8010db6:	2001      	movs	r0, #1
 8010db8:	e76f      	b.n	8010c9a <_dtoa_r+0x7da>
 8010dba:	f04f 0800 	mov.w	r8, #0
 8010dbe:	e7f6      	b.n	8010dae <_dtoa_r+0x8ee>
 8010dc0:	4698      	mov	r8, r3
 8010dc2:	e7f4      	b.n	8010dae <_dtoa_r+0x8ee>
 8010dc4:	f43f af7d 	beq.w	8010cc2 <_dtoa_r+0x802>
 8010dc8:	4618      	mov	r0, r3
 8010dca:	301c      	adds	r0, #28
 8010dcc:	e772      	b.n	8010cb4 <_dtoa_r+0x7f4>
 8010dce:	9b03      	ldr	r3, [sp, #12]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	dc37      	bgt.n	8010e44 <_dtoa_r+0x984>
 8010dd4:	9b06      	ldr	r3, [sp, #24]
 8010dd6:	2b02      	cmp	r3, #2
 8010dd8:	dd34      	ble.n	8010e44 <_dtoa_r+0x984>
 8010dda:	9b03      	ldr	r3, [sp, #12]
 8010ddc:	9302      	str	r3, [sp, #8]
 8010dde:	9b02      	ldr	r3, [sp, #8]
 8010de0:	b96b      	cbnz	r3, 8010dfe <_dtoa_r+0x93e>
 8010de2:	4631      	mov	r1, r6
 8010de4:	2205      	movs	r2, #5
 8010de6:	4620      	mov	r0, r4
 8010de8:	f000 fd7e 	bl	80118e8 <__multadd>
 8010dec:	4601      	mov	r1, r0
 8010dee:	4606      	mov	r6, r0
 8010df0:	ee18 0a10 	vmov	r0, s16
 8010df4:	f000 ffe2 	bl	8011dbc <__mcmp>
 8010df8:	2800      	cmp	r0, #0
 8010dfa:	f73f adbb 	bgt.w	8010974 <_dtoa_r+0x4b4>
 8010dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e00:	9d01      	ldr	r5, [sp, #4]
 8010e02:	43db      	mvns	r3, r3
 8010e04:	9300      	str	r3, [sp, #0]
 8010e06:	f04f 0800 	mov.w	r8, #0
 8010e0a:	4631      	mov	r1, r6
 8010e0c:	4620      	mov	r0, r4
 8010e0e:	f000 fd49 	bl	80118a4 <_Bfree>
 8010e12:	2f00      	cmp	r7, #0
 8010e14:	f43f aea4 	beq.w	8010b60 <_dtoa_r+0x6a0>
 8010e18:	f1b8 0f00 	cmp.w	r8, #0
 8010e1c:	d005      	beq.n	8010e2a <_dtoa_r+0x96a>
 8010e1e:	45b8      	cmp	r8, r7
 8010e20:	d003      	beq.n	8010e2a <_dtoa_r+0x96a>
 8010e22:	4641      	mov	r1, r8
 8010e24:	4620      	mov	r0, r4
 8010e26:	f000 fd3d 	bl	80118a4 <_Bfree>
 8010e2a:	4639      	mov	r1, r7
 8010e2c:	4620      	mov	r0, r4
 8010e2e:	f000 fd39 	bl	80118a4 <_Bfree>
 8010e32:	e695      	b.n	8010b60 <_dtoa_r+0x6a0>
 8010e34:	2600      	movs	r6, #0
 8010e36:	4637      	mov	r7, r6
 8010e38:	e7e1      	b.n	8010dfe <_dtoa_r+0x93e>
 8010e3a:	9700      	str	r7, [sp, #0]
 8010e3c:	4637      	mov	r7, r6
 8010e3e:	e599      	b.n	8010974 <_dtoa_r+0x4b4>
 8010e40:	40240000 	.word	0x40240000
 8010e44:	9b08      	ldr	r3, [sp, #32]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	f000 80ca 	beq.w	8010fe0 <_dtoa_r+0xb20>
 8010e4c:	9b03      	ldr	r3, [sp, #12]
 8010e4e:	9302      	str	r3, [sp, #8]
 8010e50:	2d00      	cmp	r5, #0
 8010e52:	dd05      	ble.n	8010e60 <_dtoa_r+0x9a0>
 8010e54:	4639      	mov	r1, r7
 8010e56:	462a      	mov	r2, r5
 8010e58:	4620      	mov	r0, r4
 8010e5a:	f000 ff3f 	bl	8011cdc <__lshift>
 8010e5e:	4607      	mov	r7, r0
 8010e60:	f1b8 0f00 	cmp.w	r8, #0
 8010e64:	d05b      	beq.n	8010f1e <_dtoa_r+0xa5e>
 8010e66:	6879      	ldr	r1, [r7, #4]
 8010e68:	4620      	mov	r0, r4
 8010e6a:	f000 fcdb 	bl	8011824 <_Balloc>
 8010e6e:	4605      	mov	r5, r0
 8010e70:	b928      	cbnz	r0, 8010e7e <_dtoa_r+0x9be>
 8010e72:	4b87      	ldr	r3, [pc, #540]	; (8011090 <_dtoa_r+0xbd0>)
 8010e74:	4602      	mov	r2, r0
 8010e76:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010e7a:	f7ff bb3b 	b.w	80104f4 <_dtoa_r+0x34>
 8010e7e:	693a      	ldr	r2, [r7, #16]
 8010e80:	3202      	adds	r2, #2
 8010e82:	0092      	lsls	r2, r2, #2
 8010e84:	f107 010c 	add.w	r1, r7, #12
 8010e88:	300c      	adds	r0, #12
 8010e8a:	f000 fcb1 	bl	80117f0 <memcpy>
 8010e8e:	2201      	movs	r2, #1
 8010e90:	4629      	mov	r1, r5
 8010e92:	4620      	mov	r0, r4
 8010e94:	f000 ff22 	bl	8011cdc <__lshift>
 8010e98:	9b01      	ldr	r3, [sp, #4]
 8010e9a:	f103 0901 	add.w	r9, r3, #1
 8010e9e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010ea2:	4413      	add	r3, r2
 8010ea4:	9305      	str	r3, [sp, #20]
 8010ea6:	f00a 0301 	and.w	r3, sl, #1
 8010eaa:	46b8      	mov	r8, r7
 8010eac:	9304      	str	r3, [sp, #16]
 8010eae:	4607      	mov	r7, r0
 8010eb0:	4631      	mov	r1, r6
 8010eb2:	ee18 0a10 	vmov	r0, s16
 8010eb6:	f7ff fa77 	bl	80103a8 <quorem>
 8010eba:	4641      	mov	r1, r8
 8010ebc:	9002      	str	r0, [sp, #8]
 8010ebe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010ec2:	ee18 0a10 	vmov	r0, s16
 8010ec6:	f000 ff79 	bl	8011dbc <__mcmp>
 8010eca:	463a      	mov	r2, r7
 8010ecc:	9003      	str	r0, [sp, #12]
 8010ece:	4631      	mov	r1, r6
 8010ed0:	4620      	mov	r0, r4
 8010ed2:	f000 ff8f 	bl	8011df4 <__mdiff>
 8010ed6:	68c2      	ldr	r2, [r0, #12]
 8010ed8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8010edc:	4605      	mov	r5, r0
 8010ede:	bb02      	cbnz	r2, 8010f22 <_dtoa_r+0xa62>
 8010ee0:	4601      	mov	r1, r0
 8010ee2:	ee18 0a10 	vmov	r0, s16
 8010ee6:	f000 ff69 	bl	8011dbc <__mcmp>
 8010eea:	4602      	mov	r2, r0
 8010eec:	4629      	mov	r1, r5
 8010eee:	4620      	mov	r0, r4
 8010ef0:	9207      	str	r2, [sp, #28]
 8010ef2:	f000 fcd7 	bl	80118a4 <_Bfree>
 8010ef6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010efa:	ea43 0102 	orr.w	r1, r3, r2
 8010efe:	9b04      	ldr	r3, [sp, #16]
 8010f00:	430b      	orrs	r3, r1
 8010f02:	464d      	mov	r5, r9
 8010f04:	d10f      	bne.n	8010f26 <_dtoa_r+0xa66>
 8010f06:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010f0a:	d02a      	beq.n	8010f62 <_dtoa_r+0xaa2>
 8010f0c:	9b03      	ldr	r3, [sp, #12]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	dd02      	ble.n	8010f18 <_dtoa_r+0xa58>
 8010f12:	9b02      	ldr	r3, [sp, #8]
 8010f14:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010f18:	f88b a000 	strb.w	sl, [fp]
 8010f1c:	e775      	b.n	8010e0a <_dtoa_r+0x94a>
 8010f1e:	4638      	mov	r0, r7
 8010f20:	e7ba      	b.n	8010e98 <_dtoa_r+0x9d8>
 8010f22:	2201      	movs	r2, #1
 8010f24:	e7e2      	b.n	8010eec <_dtoa_r+0xa2c>
 8010f26:	9b03      	ldr	r3, [sp, #12]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	db04      	blt.n	8010f36 <_dtoa_r+0xa76>
 8010f2c:	9906      	ldr	r1, [sp, #24]
 8010f2e:	430b      	orrs	r3, r1
 8010f30:	9904      	ldr	r1, [sp, #16]
 8010f32:	430b      	orrs	r3, r1
 8010f34:	d122      	bne.n	8010f7c <_dtoa_r+0xabc>
 8010f36:	2a00      	cmp	r2, #0
 8010f38:	ddee      	ble.n	8010f18 <_dtoa_r+0xa58>
 8010f3a:	ee18 1a10 	vmov	r1, s16
 8010f3e:	2201      	movs	r2, #1
 8010f40:	4620      	mov	r0, r4
 8010f42:	f000 fecb 	bl	8011cdc <__lshift>
 8010f46:	4631      	mov	r1, r6
 8010f48:	ee08 0a10 	vmov	s16, r0
 8010f4c:	f000 ff36 	bl	8011dbc <__mcmp>
 8010f50:	2800      	cmp	r0, #0
 8010f52:	dc03      	bgt.n	8010f5c <_dtoa_r+0xa9c>
 8010f54:	d1e0      	bne.n	8010f18 <_dtoa_r+0xa58>
 8010f56:	f01a 0f01 	tst.w	sl, #1
 8010f5a:	d0dd      	beq.n	8010f18 <_dtoa_r+0xa58>
 8010f5c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010f60:	d1d7      	bne.n	8010f12 <_dtoa_r+0xa52>
 8010f62:	2339      	movs	r3, #57	; 0x39
 8010f64:	f88b 3000 	strb.w	r3, [fp]
 8010f68:	462b      	mov	r3, r5
 8010f6a:	461d      	mov	r5, r3
 8010f6c:	3b01      	subs	r3, #1
 8010f6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010f72:	2a39      	cmp	r2, #57	; 0x39
 8010f74:	d071      	beq.n	801105a <_dtoa_r+0xb9a>
 8010f76:	3201      	adds	r2, #1
 8010f78:	701a      	strb	r2, [r3, #0]
 8010f7a:	e746      	b.n	8010e0a <_dtoa_r+0x94a>
 8010f7c:	2a00      	cmp	r2, #0
 8010f7e:	dd07      	ble.n	8010f90 <_dtoa_r+0xad0>
 8010f80:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010f84:	d0ed      	beq.n	8010f62 <_dtoa_r+0xaa2>
 8010f86:	f10a 0301 	add.w	r3, sl, #1
 8010f8a:	f88b 3000 	strb.w	r3, [fp]
 8010f8e:	e73c      	b.n	8010e0a <_dtoa_r+0x94a>
 8010f90:	9b05      	ldr	r3, [sp, #20]
 8010f92:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010f96:	4599      	cmp	r9, r3
 8010f98:	d047      	beq.n	801102a <_dtoa_r+0xb6a>
 8010f9a:	ee18 1a10 	vmov	r1, s16
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	220a      	movs	r2, #10
 8010fa2:	4620      	mov	r0, r4
 8010fa4:	f000 fca0 	bl	80118e8 <__multadd>
 8010fa8:	45b8      	cmp	r8, r7
 8010faa:	ee08 0a10 	vmov	s16, r0
 8010fae:	f04f 0300 	mov.w	r3, #0
 8010fb2:	f04f 020a 	mov.w	r2, #10
 8010fb6:	4641      	mov	r1, r8
 8010fb8:	4620      	mov	r0, r4
 8010fba:	d106      	bne.n	8010fca <_dtoa_r+0xb0a>
 8010fbc:	f000 fc94 	bl	80118e8 <__multadd>
 8010fc0:	4680      	mov	r8, r0
 8010fc2:	4607      	mov	r7, r0
 8010fc4:	f109 0901 	add.w	r9, r9, #1
 8010fc8:	e772      	b.n	8010eb0 <_dtoa_r+0x9f0>
 8010fca:	f000 fc8d 	bl	80118e8 <__multadd>
 8010fce:	4639      	mov	r1, r7
 8010fd0:	4680      	mov	r8, r0
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	220a      	movs	r2, #10
 8010fd6:	4620      	mov	r0, r4
 8010fd8:	f000 fc86 	bl	80118e8 <__multadd>
 8010fdc:	4607      	mov	r7, r0
 8010fde:	e7f1      	b.n	8010fc4 <_dtoa_r+0xb04>
 8010fe0:	9b03      	ldr	r3, [sp, #12]
 8010fe2:	9302      	str	r3, [sp, #8]
 8010fe4:	9d01      	ldr	r5, [sp, #4]
 8010fe6:	ee18 0a10 	vmov	r0, s16
 8010fea:	4631      	mov	r1, r6
 8010fec:	f7ff f9dc 	bl	80103a8 <quorem>
 8010ff0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010ff4:	9b01      	ldr	r3, [sp, #4]
 8010ff6:	f805 ab01 	strb.w	sl, [r5], #1
 8010ffa:	1aea      	subs	r2, r5, r3
 8010ffc:	9b02      	ldr	r3, [sp, #8]
 8010ffe:	4293      	cmp	r3, r2
 8011000:	dd09      	ble.n	8011016 <_dtoa_r+0xb56>
 8011002:	ee18 1a10 	vmov	r1, s16
 8011006:	2300      	movs	r3, #0
 8011008:	220a      	movs	r2, #10
 801100a:	4620      	mov	r0, r4
 801100c:	f000 fc6c 	bl	80118e8 <__multadd>
 8011010:	ee08 0a10 	vmov	s16, r0
 8011014:	e7e7      	b.n	8010fe6 <_dtoa_r+0xb26>
 8011016:	9b02      	ldr	r3, [sp, #8]
 8011018:	2b00      	cmp	r3, #0
 801101a:	bfc8      	it	gt
 801101c:	461d      	movgt	r5, r3
 801101e:	9b01      	ldr	r3, [sp, #4]
 8011020:	bfd8      	it	le
 8011022:	2501      	movle	r5, #1
 8011024:	441d      	add	r5, r3
 8011026:	f04f 0800 	mov.w	r8, #0
 801102a:	ee18 1a10 	vmov	r1, s16
 801102e:	2201      	movs	r2, #1
 8011030:	4620      	mov	r0, r4
 8011032:	f000 fe53 	bl	8011cdc <__lshift>
 8011036:	4631      	mov	r1, r6
 8011038:	ee08 0a10 	vmov	s16, r0
 801103c:	f000 febe 	bl	8011dbc <__mcmp>
 8011040:	2800      	cmp	r0, #0
 8011042:	dc91      	bgt.n	8010f68 <_dtoa_r+0xaa8>
 8011044:	d102      	bne.n	801104c <_dtoa_r+0xb8c>
 8011046:	f01a 0f01 	tst.w	sl, #1
 801104a:	d18d      	bne.n	8010f68 <_dtoa_r+0xaa8>
 801104c:	462b      	mov	r3, r5
 801104e:	461d      	mov	r5, r3
 8011050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011054:	2a30      	cmp	r2, #48	; 0x30
 8011056:	d0fa      	beq.n	801104e <_dtoa_r+0xb8e>
 8011058:	e6d7      	b.n	8010e0a <_dtoa_r+0x94a>
 801105a:	9a01      	ldr	r2, [sp, #4]
 801105c:	429a      	cmp	r2, r3
 801105e:	d184      	bne.n	8010f6a <_dtoa_r+0xaaa>
 8011060:	9b00      	ldr	r3, [sp, #0]
 8011062:	3301      	adds	r3, #1
 8011064:	9300      	str	r3, [sp, #0]
 8011066:	2331      	movs	r3, #49	; 0x31
 8011068:	7013      	strb	r3, [r2, #0]
 801106a:	e6ce      	b.n	8010e0a <_dtoa_r+0x94a>
 801106c:	4b09      	ldr	r3, [pc, #36]	; (8011094 <_dtoa_r+0xbd4>)
 801106e:	f7ff ba95 	b.w	801059c <_dtoa_r+0xdc>
 8011072:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011074:	2b00      	cmp	r3, #0
 8011076:	f47f aa6e 	bne.w	8010556 <_dtoa_r+0x96>
 801107a:	4b07      	ldr	r3, [pc, #28]	; (8011098 <_dtoa_r+0xbd8>)
 801107c:	f7ff ba8e 	b.w	801059c <_dtoa_r+0xdc>
 8011080:	9b02      	ldr	r3, [sp, #8]
 8011082:	2b00      	cmp	r3, #0
 8011084:	dcae      	bgt.n	8010fe4 <_dtoa_r+0xb24>
 8011086:	9b06      	ldr	r3, [sp, #24]
 8011088:	2b02      	cmp	r3, #2
 801108a:	f73f aea8 	bgt.w	8010dde <_dtoa_r+0x91e>
 801108e:	e7a9      	b.n	8010fe4 <_dtoa_r+0xb24>
 8011090:	08013ff5 	.word	0x08013ff5
 8011094:	08013d64 	.word	0x08013d64
 8011098:	08013f8d 	.word	0x08013f8d

0801109c <fiprintf>:
 801109c:	b40e      	push	{r1, r2, r3}
 801109e:	b503      	push	{r0, r1, lr}
 80110a0:	4601      	mov	r1, r0
 80110a2:	ab03      	add	r3, sp, #12
 80110a4:	4805      	ldr	r0, [pc, #20]	; (80110bc <fiprintf+0x20>)
 80110a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80110aa:	6800      	ldr	r0, [r0, #0]
 80110ac:	9301      	str	r3, [sp, #4]
 80110ae:	f001 fa15 	bl	80124dc <_vfiprintf_r>
 80110b2:	b002      	add	sp, #8
 80110b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80110b8:	b003      	add	sp, #12
 80110ba:	4770      	bx	lr
 80110bc:	20000288 	.word	0x20000288

080110c0 <rshift>:
 80110c0:	6903      	ldr	r3, [r0, #16]
 80110c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80110c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80110ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 80110ce:	f100 0414 	add.w	r4, r0, #20
 80110d2:	dd45      	ble.n	8011160 <rshift+0xa0>
 80110d4:	f011 011f 	ands.w	r1, r1, #31
 80110d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80110dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80110e0:	d10c      	bne.n	80110fc <rshift+0x3c>
 80110e2:	f100 0710 	add.w	r7, r0, #16
 80110e6:	4629      	mov	r1, r5
 80110e8:	42b1      	cmp	r1, r6
 80110ea:	d334      	bcc.n	8011156 <rshift+0x96>
 80110ec:	1a9b      	subs	r3, r3, r2
 80110ee:	009b      	lsls	r3, r3, #2
 80110f0:	1eea      	subs	r2, r5, #3
 80110f2:	4296      	cmp	r6, r2
 80110f4:	bf38      	it	cc
 80110f6:	2300      	movcc	r3, #0
 80110f8:	4423      	add	r3, r4
 80110fa:	e015      	b.n	8011128 <rshift+0x68>
 80110fc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011100:	f1c1 0820 	rsb	r8, r1, #32
 8011104:	40cf      	lsrs	r7, r1
 8011106:	f105 0e04 	add.w	lr, r5, #4
 801110a:	46a1      	mov	r9, r4
 801110c:	4576      	cmp	r6, lr
 801110e:	46f4      	mov	ip, lr
 8011110:	d815      	bhi.n	801113e <rshift+0x7e>
 8011112:	1a9a      	subs	r2, r3, r2
 8011114:	0092      	lsls	r2, r2, #2
 8011116:	3a04      	subs	r2, #4
 8011118:	3501      	adds	r5, #1
 801111a:	42ae      	cmp	r6, r5
 801111c:	bf38      	it	cc
 801111e:	2200      	movcc	r2, #0
 8011120:	18a3      	adds	r3, r4, r2
 8011122:	50a7      	str	r7, [r4, r2]
 8011124:	b107      	cbz	r7, 8011128 <rshift+0x68>
 8011126:	3304      	adds	r3, #4
 8011128:	1b1a      	subs	r2, r3, r4
 801112a:	42a3      	cmp	r3, r4
 801112c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011130:	bf08      	it	eq
 8011132:	2300      	moveq	r3, #0
 8011134:	6102      	str	r2, [r0, #16]
 8011136:	bf08      	it	eq
 8011138:	6143      	streq	r3, [r0, #20]
 801113a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801113e:	f8dc c000 	ldr.w	ip, [ip]
 8011142:	fa0c fc08 	lsl.w	ip, ip, r8
 8011146:	ea4c 0707 	orr.w	r7, ip, r7
 801114a:	f849 7b04 	str.w	r7, [r9], #4
 801114e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011152:	40cf      	lsrs	r7, r1
 8011154:	e7da      	b.n	801110c <rshift+0x4c>
 8011156:	f851 cb04 	ldr.w	ip, [r1], #4
 801115a:	f847 cf04 	str.w	ip, [r7, #4]!
 801115e:	e7c3      	b.n	80110e8 <rshift+0x28>
 8011160:	4623      	mov	r3, r4
 8011162:	e7e1      	b.n	8011128 <rshift+0x68>

08011164 <__hexdig_fun>:
 8011164:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011168:	2b09      	cmp	r3, #9
 801116a:	d802      	bhi.n	8011172 <__hexdig_fun+0xe>
 801116c:	3820      	subs	r0, #32
 801116e:	b2c0      	uxtb	r0, r0
 8011170:	4770      	bx	lr
 8011172:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011176:	2b05      	cmp	r3, #5
 8011178:	d801      	bhi.n	801117e <__hexdig_fun+0x1a>
 801117a:	3847      	subs	r0, #71	; 0x47
 801117c:	e7f7      	b.n	801116e <__hexdig_fun+0xa>
 801117e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011182:	2b05      	cmp	r3, #5
 8011184:	d801      	bhi.n	801118a <__hexdig_fun+0x26>
 8011186:	3827      	subs	r0, #39	; 0x27
 8011188:	e7f1      	b.n	801116e <__hexdig_fun+0xa>
 801118a:	2000      	movs	r0, #0
 801118c:	4770      	bx	lr
	...

08011190 <__gethex>:
 8011190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011194:	ed2d 8b02 	vpush	{d8}
 8011198:	b089      	sub	sp, #36	; 0x24
 801119a:	ee08 0a10 	vmov	s16, r0
 801119e:	9304      	str	r3, [sp, #16]
 80111a0:	4bb4      	ldr	r3, [pc, #720]	; (8011474 <__gethex+0x2e4>)
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	9301      	str	r3, [sp, #4]
 80111a6:	4618      	mov	r0, r3
 80111a8:	468b      	mov	fp, r1
 80111aa:	4690      	mov	r8, r2
 80111ac:	f7ef f838 	bl	8000220 <strlen>
 80111b0:	9b01      	ldr	r3, [sp, #4]
 80111b2:	f8db 2000 	ldr.w	r2, [fp]
 80111b6:	4403      	add	r3, r0
 80111b8:	4682      	mov	sl, r0
 80111ba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80111be:	9305      	str	r3, [sp, #20]
 80111c0:	1c93      	adds	r3, r2, #2
 80111c2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80111c6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80111ca:	32fe      	adds	r2, #254	; 0xfe
 80111cc:	18d1      	adds	r1, r2, r3
 80111ce:	461f      	mov	r7, r3
 80111d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80111d4:	9100      	str	r1, [sp, #0]
 80111d6:	2830      	cmp	r0, #48	; 0x30
 80111d8:	d0f8      	beq.n	80111cc <__gethex+0x3c>
 80111da:	f7ff ffc3 	bl	8011164 <__hexdig_fun>
 80111de:	4604      	mov	r4, r0
 80111e0:	2800      	cmp	r0, #0
 80111e2:	d13a      	bne.n	801125a <__gethex+0xca>
 80111e4:	9901      	ldr	r1, [sp, #4]
 80111e6:	4652      	mov	r2, sl
 80111e8:	4638      	mov	r0, r7
 80111ea:	f001 fab1 	bl	8012750 <strncmp>
 80111ee:	4605      	mov	r5, r0
 80111f0:	2800      	cmp	r0, #0
 80111f2:	d168      	bne.n	80112c6 <__gethex+0x136>
 80111f4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80111f8:	eb07 060a 	add.w	r6, r7, sl
 80111fc:	f7ff ffb2 	bl	8011164 <__hexdig_fun>
 8011200:	2800      	cmp	r0, #0
 8011202:	d062      	beq.n	80112ca <__gethex+0x13a>
 8011204:	4633      	mov	r3, r6
 8011206:	7818      	ldrb	r0, [r3, #0]
 8011208:	2830      	cmp	r0, #48	; 0x30
 801120a:	461f      	mov	r7, r3
 801120c:	f103 0301 	add.w	r3, r3, #1
 8011210:	d0f9      	beq.n	8011206 <__gethex+0x76>
 8011212:	f7ff ffa7 	bl	8011164 <__hexdig_fun>
 8011216:	2301      	movs	r3, #1
 8011218:	fab0 f480 	clz	r4, r0
 801121c:	0964      	lsrs	r4, r4, #5
 801121e:	4635      	mov	r5, r6
 8011220:	9300      	str	r3, [sp, #0]
 8011222:	463a      	mov	r2, r7
 8011224:	4616      	mov	r6, r2
 8011226:	3201      	adds	r2, #1
 8011228:	7830      	ldrb	r0, [r6, #0]
 801122a:	f7ff ff9b 	bl	8011164 <__hexdig_fun>
 801122e:	2800      	cmp	r0, #0
 8011230:	d1f8      	bne.n	8011224 <__gethex+0x94>
 8011232:	9901      	ldr	r1, [sp, #4]
 8011234:	4652      	mov	r2, sl
 8011236:	4630      	mov	r0, r6
 8011238:	f001 fa8a 	bl	8012750 <strncmp>
 801123c:	b980      	cbnz	r0, 8011260 <__gethex+0xd0>
 801123e:	b94d      	cbnz	r5, 8011254 <__gethex+0xc4>
 8011240:	eb06 050a 	add.w	r5, r6, sl
 8011244:	462a      	mov	r2, r5
 8011246:	4616      	mov	r6, r2
 8011248:	3201      	adds	r2, #1
 801124a:	7830      	ldrb	r0, [r6, #0]
 801124c:	f7ff ff8a 	bl	8011164 <__hexdig_fun>
 8011250:	2800      	cmp	r0, #0
 8011252:	d1f8      	bne.n	8011246 <__gethex+0xb6>
 8011254:	1bad      	subs	r5, r5, r6
 8011256:	00ad      	lsls	r5, r5, #2
 8011258:	e004      	b.n	8011264 <__gethex+0xd4>
 801125a:	2400      	movs	r4, #0
 801125c:	4625      	mov	r5, r4
 801125e:	e7e0      	b.n	8011222 <__gethex+0x92>
 8011260:	2d00      	cmp	r5, #0
 8011262:	d1f7      	bne.n	8011254 <__gethex+0xc4>
 8011264:	7833      	ldrb	r3, [r6, #0]
 8011266:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801126a:	2b50      	cmp	r3, #80	; 0x50
 801126c:	d13b      	bne.n	80112e6 <__gethex+0x156>
 801126e:	7873      	ldrb	r3, [r6, #1]
 8011270:	2b2b      	cmp	r3, #43	; 0x2b
 8011272:	d02c      	beq.n	80112ce <__gethex+0x13e>
 8011274:	2b2d      	cmp	r3, #45	; 0x2d
 8011276:	d02e      	beq.n	80112d6 <__gethex+0x146>
 8011278:	1c71      	adds	r1, r6, #1
 801127a:	f04f 0900 	mov.w	r9, #0
 801127e:	7808      	ldrb	r0, [r1, #0]
 8011280:	f7ff ff70 	bl	8011164 <__hexdig_fun>
 8011284:	1e43      	subs	r3, r0, #1
 8011286:	b2db      	uxtb	r3, r3
 8011288:	2b18      	cmp	r3, #24
 801128a:	d82c      	bhi.n	80112e6 <__gethex+0x156>
 801128c:	f1a0 0210 	sub.w	r2, r0, #16
 8011290:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011294:	f7ff ff66 	bl	8011164 <__hexdig_fun>
 8011298:	1e43      	subs	r3, r0, #1
 801129a:	b2db      	uxtb	r3, r3
 801129c:	2b18      	cmp	r3, #24
 801129e:	d91d      	bls.n	80112dc <__gethex+0x14c>
 80112a0:	f1b9 0f00 	cmp.w	r9, #0
 80112a4:	d000      	beq.n	80112a8 <__gethex+0x118>
 80112a6:	4252      	negs	r2, r2
 80112a8:	4415      	add	r5, r2
 80112aa:	f8cb 1000 	str.w	r1, [fp]
 80112ae:	b1e4      	cbz	r4, 80112ea <__gethex+0x15a>
 80112b0:	9b00      	ldr	r3, [sp, #0]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	bf14      	ite	ne
 80112b6:	2700      	movne	r7, #0
 80112b8:	2706      	moveq	r7, #6
 80112ba:	4638      	mov	r0, r7
 80112bc:	b009      	add	sp, #36	; 0x24
 80112be:	ecbd 8b02 	vpop	{d8}
 80112c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112c6:	463e      	mov	r6, r7
 80112c8:	4625      	mov	r5, r4
 80112ca:	2401      	movs	r4, #1
 80112cc:	e7ca      	b.n	8011264 <__gethex+0xd4>
 80112ce:	f04f 0900 	mov.w	r9, #0
 80112d2:	1cb1      	adds	r1, r6, #2
 80112d4:	e7d3      	b.n	801127e <__gethex+0xee>
 80112d6:	f04f 0901 	mov.w	r9, #1
 80112da:	e7fa      	b.n	80112d2 <__gethex+0x142>
 80112dc:	230a      	movs	r3, #10
 80112de:	fb03 0202 	mla	r2, r3, r2, r0
 80112e2:	3a10      	subs	r2, #16
 80112e4:	e7d4      	b.n	8011290 <__gethex+0x100>
 80112e6:	4631      	mov	r1, r6
 80112e8:	e7df      	b.n	80112aa <__gethex+0x11a>
 80112ea:	1bf3      	subs	r3, r6, r7
 80112ec:	3b01      	subs	r3, #1
 80112ee:	4621      	mov	r1, r4
 80112f0:	2b07      	cmp	r3, #7
 80112f2:	dc0b      	bgt.n	801130c <__gethex+0x17c>
 80112f4:	ee18 0a10 	vmov	r0, s16
 80112f8:	f000 fa94 	bl	8011824 <_Balloc>
 80112fc:	4604      	mov	r4, r0
 80112fe:	b940      	cbnz	r0, 8011312 <__gethex+0x182>
 8011300:	4b5d      	ldr	r3, [pc, #372]	; (8011478 <__gethex+0x2e8>)
 8011302:	4602      	mov	r2, r0
 8011304:	21de      	movs	r1, #222	; 0xde
 8011306:	485d      	ldr	r0, [pc, #372]	; (801147c <__gethex+0x2ec>)
 8011308:	f7ff f830 	bl	801036c <__assert_func>
 801130c:	3101      	adds	r1, #1
 801130e:	105b      	asrs	r3, r3, #1
 8011310:	e7ee      	b.n	80112f0 <__gethex+0x160>
 8011312:	f100 0914 	add.w	r9, r0, #20
 8011316:	f04f 0b00 	mov.w	fp, #0
 801131a:	f1ca 0301 	rsb	r3, sl, #1
 801131e:	f8cd 9008 	str.w	r9, [sp, #8]
 8011322:	f8cd b000 	str.w	fp, [sp]
 8011326:	9306      	str	r3, [sp, #24]
 8011328:	42b7      	cmp	r7, r6
 801132a:	d340      	bcc.n	80113ae <__gethex+0x21e>
 801132c:	9802      	ldr	r0, [sp, #8]
 801132e:	9b00      	ldr	r3, [sp, #0]
 8011330:	f840 3b04 	str.w	r3, [r0], #4
 8011334:	eba0 0009 	sub.w	r0, r0, r9
 8011338:	1080      	asrs	r0, r0, #2
 801133a:	0146      	lsls	r6, r0, #5
 801133c:	6120      	str	r0, [r4, #16]
 801133e:	4618      	mov	r0, r3
 8011340:	f000 fb62 	bl	8011a08 <__hi0bits>
 8011344:	1a30      	subs	r0, r6, r0
 8011346:	f8d8 6000 	ldr.w	r6, [r8]
 801134a:	42b0      	cmp	r0, r6
 801134c:	dd63      	ble.n	8011416 <__gethex+0x286>
 801134e:	1b87      	subs	r7, r0, r6
 8011350:	4639      	mov	r1, r7
 8011352:	4620      	mov	r0, r4
 8011354:	f000 ff06 	bl	8012164 <__any_on>
 8011358:	4682      	mov	sl, r0
 801135a:	b1a8      	cbz	r0, 8011388 <__gethex+0x1f8>
 801135c:	1e7b      	subs	r3, r7, #1
 801135e:	1159      	asrs	r1, r3, #5
 8011360:	f003 021f 	and.w	r2, r3, #31
 8011364:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011368:	f04f 0a01 	mov.w	sl, #1
 801136c:	fa0a f202 	lsl.w	r2, sl, r2
 8011370:	420a      	tst	r2, r1
 8011372:	d009      	beq.n	8011388 <__gethex+0x1f8>
 8011374:	4553      	cmp	r3, sl
 8011376:	dd05      	ble.n	8011384 <__gethex+0x1f4>
 8011378:	1eb9      	subs	r1, r7, #2
 801137a:	4620      	mov	r0, r4
 801137c:	f000 fef2 	bl	8012164 <__any_on>
 8011380:	2800      	cmp	r0, #0
 8011382:	d145      	bne.n	8011410 <__gethex+0x280>
 8011384:	f04f 0a02 	mov.w	sl, #2
 8011388:	4639      	mov	r1, r7
 801138a:	4620      	mov	r0, r4
 801138c:	f7ff fe98 	bl	80110c0 <rshift>
 8011390:	443d      	add	r5, r7
 8011392:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011396:	42ab      	cmp	r3, r5
 8011398:	da4c      	bge.n	8011434 <__gethex+0x2a4>
 801139a:	ee18 0a10 	vmov	r0, s16
 801139e:	4621      	mov	r1, r4
 80113a0:	f000 fa80 	bl	80118a4 <_Bfree>
 80113a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80113a6:	2300      	movs	r3, #0
 80113a8:	6013      	str	r3, [r2, #0]
 80113aa:	27a3      	movs	r7, #163	; 0xa3
 80113ac:	e785      	b.n	80112ba <__gethex+0x12a>
 80113ae:	1e73      	subs	r3, r6, #1
 80113b0:	9a05      	ldr	r2, [sp, #20]
 80113b2:	9303      	str	r3, [sp, #12]
 80113b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80113b8:	4293      	cmp	r3, r2
 80113ba:	d019      	beq.n	80113f0 <__gethex+0x260>
 80113bc:	f1bb 0f20 	cmp.w	fp, #32
 80113c0:	d107      	bne.n	80113d2 <__gethex+0x242>
 80113c2:	9b02      	ldr	r3, [sp, #8]
 80113c4:	9a00      	ldr	r2, [sp, #0]
 80113c6:	f843 2b04 	str.w	r2, [r3], #4
 80113ca:	9302      	str	r3, [sp, #8]
 80113cc:	2300      	movs	r3, #0
 80113ce:	9300      	str	r3, [sp, #0]
 80113d0:	469b      	mov	fp, r3
 80113d2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80113d6:	f7ff fec5 	bl	8011164 <__hexdig_fun>
 80113da:	9b00      	ldr	r3, [sp, #0]
 80113dc:	f000 000f 	and.w	r0, r0, #15
 80113e0:	fa00 f00b 	lsl.w	r0, r0, fp
 80113e4:	4303      	orrs	r3, r0
 80113e6:	9300      	str	r3, [sp, #0]
 80113e8:	f10b 0b04 	add.w	fp, fp, #4
 80113ec:	9b03      	ldr	r3, [sp, #12]
 80113ee:	e00d      	b.n	801140c <__gethex+0x27c>
 80113f0:	9b03      	ldr	r3, [sp, #12]
 80113f2:	9a06      	ldr	r2, [sp, #24]
 80113f4:	4413      	add	r3, r2
 80113f6:	42bb      	cmp	r3, r7
 80113f8:	d3e0      	bcc.n	80113bc <__gethex+0x22c>
 80113fa:	4618      	mov	r0, r3
 80113fc:	9901      	ldr	r1, [sp, #4]
 80113fe:	9307      	str	r3, [sp, #28]
 8011400:	4652      	mov	r2, sl
 8011402:	f001 f9a5 	bl	8012750 <strncmp>
 8011406:	9b07      	ldr	r3, [sp, #28]
 8011408:	2800      	cmp	r0, #0
 801140a:	d1d7      	bne.n	80113bc <__gethex+0x22c>
 801140c:	461e      	mov	r6, r3
 801140e:	e78b      	b.n	8011328 <__gethex+0x198>
 8011410:	f04f 0a03 	mov.w	sl, #3
 8011414:	e7b8      	b.n	8011388 <__gethex+0x1f8>
 8011416:	da0a      	bge.n	801142e <__gethex+0x29e>
 8011418:	1a37      	subs	r7, r6, r0
 801141a:	4621      	mov	r1, r4
 801141c:	ee18 0a10 	vmov	r0, s16
 8011420:	463a      	mov	r2, r7
 8011422:	f000 fc5b 	bl	8011cdc <__lshift>
 8011426:	1bed      	subs	r5, r5, r7
 8011428:	4604      	mov	r4, r0
 801142a:	f100 0914 	add.w	r9, r0, #20
 801142e:	f04f 0a00 	mov.w	sl, #0
 8011432:	e7ae      	b.n	8011392 <__gethex+0x202>
 8011434:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011438:	42a8      	cmp	r0, r5
 801143a:	dd72      	ble.n	8011522 <__gethex+0x392>
 801143c:	1b45      	subs	r5, r0, r5
 801143e:	42ae      	cmp	r6, r5
 8011440:	dc36      	bgt.n	80114b0 <__gethex+0x320>
 8011442:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011446:	2b02      	cmp	r3, #2
 8011448:	d02a      	beq.n	80114a0 <__gethex+0x310>
 801144a:	2b03      	cmp	r3, #3
 801144c:	d02c      	beq.n	80114a8 <__gethex+0x318>
 801144e:	2b01      	cmp	r3, #1
 8011450:	d11c      	bne.n	801148c <__gethex+0x2fc>
 8011452:	42ae      	cmp	r6, r5
 8011454:	d11a      	bne.n	801148c <__gethex+0x2fc>
 8011456:	2e01      	cmp	r6, #1
 8011458:	d112      	bne.n	8011480 <__gethex+0x2f0>
 801145a:	9a04      	ldr	r2, [sp, #16]
 801145c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011460:	6013      	str	r3, [r2, #0]
 8011462:	2301      	movs	r3, #1
 8011464:	6123      	str	r3, [r4, #16]
 8011466:	f8c9 3000 	str.w	r3, [r9]
 801146a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801146c:	2762      	movs	r7, #98	; 0x62
 801146e:	601c      	str	r4, [r3, #0]
 8011470:	e723      	b.n	80112ba <__gethex+0x12a>
 8011472:	bf00      	nop
 8011474:	0801406c 	.word	0x0801406c
 8011478:	08013ff5 	.word	0x08013ff5
 801147c:	08014006 	.word	0x08014006
 8011480:	1e71      	subs	r1, r6, #1
 8011482:	4620      	mov	r0, r4
 8011484:	f000 fe6e 	bl	8012164 <__any_on>
 8011488:	2800      	cmp	r0, #0
 801148a:	d1e6      	bne.n	801145a <__gethex+0x2ca>
 801148c:	ee18 0a10 	vmov	r0, s16
 8011490:	4621      	mov	r1, r4
 8011492:	f000 fa07 	bl	80118a4 <_Bfree>
 8011496:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011498:	2300      	movs	r3, #0
 801149a:	6013      	str	r3, [r2, #0]
 801149c:	2750      	movs	r7, #80	; 0x50
 801149e:	e70c      	b.n	80112ba <__gethex+0x12a>
 80114a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d1f2      	bne.n	801148c <__gethex+0x2fc>
 80114a6:	e7d8      	b.n	801145a <__gethex+0x2ca>
 80114a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d1d5      	bne.n	801145a <__gethex+0x2ca>
 80114ae:	e7ed      	b.n	801148c <__gethex+0x2fc>
 80114b0:	1e6f      	subs	r7, r5, #1
 80114b2:	f1ba 0f00 	cmp.w	sl, #0
 80114b6:	d131      	bne.n	801151c <__gethex+0x38c>
 80114b8:	b127      	cbz	r7, 80114c4 <__gethex+0x334>
 80114ba:	4639      	mov	r1, r7
 80114bc:	4620      	mov	r0, r4
 80114be:	f000 fe51 	bl	8012164 <__any_on>
 80114c2:	4682      	mov	sl, r0
 80114c4:	117b      	asrs	r3, r7, #5
 80114c6:	2101      	movs	r1, #1
 80114c8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80114cc:	f007 071f 	and.w	r7, r7, #31
 80114d0:	fa01 f707 	lsl.w	r7, r1, r7
 80114d4:	421f      	tst	r7, r3
 80114d6:	4629      	mov	r1, r5
 80114d8:	4620      	mov	r0, r4
 80114da:	bf18      	it	ne
 80114dc:	f04a 0a02 	orrne.w	sl, sl, #2
 80114e0:	1b76      	subs	r6, r6, r5
 80114e2:	f7ff fded 	bl	80110c0 <rshift>
 80114e6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80114ea:	2702      	movs	r7, #2
 80114ec:	f1ba 0f00 	cmp.w	sl, #0
 80114f0:	d048      	beq.n	8011584 <__gethex+0x3f4>
 80114f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80114f6:	2b02      	cmp	r3, #2
 80114f8:	d015      	beq.n	8011526 <__gethex+0x396>
 80114fa:	2b03      	cmp	r3, #3
 80114fc:	d017      	beq.n	801152e <__gethex+0x39e>
 80114fe:	2b01      	cmp	r3, #1
 8011500:	d109      	bne.n	8011516 <__gethex+0x386>
 8011502:	f01a 0f02 	tst.w	sl, #2
 8011506:	d006      	beq.n	8011516 <__gethex+0x386>
 8011508:	f8d9 0000 	ldr.w	r0, [r9]
 801150c:	ea4a 0a00 	orr.w	sl, sl, r0
 8011510:	f01a 0f01 	tst.w	sl, #1
 8011514:	d10e      	bne.n	8011534 <__gethex+0x3a4>
 8011516:	f047 0710 	orr.w	r7, r7, #16
 801151a:	e033      	b.n	8011584 <__gethex+0x3f4>
 801151c:	f04f 0a01 	mov.w	sl, #1
 8011520:	e7d0      	b.n	80114c4 <__gethex+0x334>
 8011522:	2701      	movs	r7, #1
 8011524:	e7e2      	b.n	80114ec <__gethex+0x35c>
 8011526:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011528:	f1c3 0301 	rsb	r3, r3, #1
 801152c:	9315      	str	r3, [sp, #84]	; 0x54
 801152e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011530:	2b00      	cmp	r3, #0
 8011532:	d0f0      	beq.n	8011516 <__gethex+0x386>
 8011534:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011538:	f104 0314 	add.w	r3, r4, #20
 801153c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011540:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011544:	f04f 0c00 	mov.w	ip, #0
 8011548:	4618      	mov	r0, r3
 801154a:	f853 2b04 	ldr.w	r2, [r3], #4
 801154e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8011552:	d01c      	beq.n	801158e <__gethex+0x3fe>
 8011554:	3201      	adds	r2, #1
 8011556:	6002      	str	r2, [r0, #0]
 8011558:	2f02      	cmp	r7, #2
 801155a:	f104 0314 	add.w	r3, r4, #20
 801155e:	d13f      	bne.n	80115e0 <__gethex+0x450>
 8011560:	f8d8 2000 	ldr.w	r2, [r8]
 8011564:	3a01      	subs	r2, #1
 8011566:	42b2      	cmp	r2, r6
 8011568:	d10a      	bne.n	8011580 <__gethex+0x3f0>
 801156a:	1171      	asrs	r1, r6, #5
 801156c:	2201      	movs	r2, #1
 801156e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011572:	f006 061f 	and.w	r6, r6, #31
 8011576:	fa02 f606 	lsl.w	r6, r2, r6
 801157a:	421e      	tst	r6, r3
 801157c:	bf18      	it	ne
 801157e:	4617      	movne	r7, r2
 8011580:	f047 0720 	orr.w	r7, r7, #32
 8011584:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011586:	601c      	str	r4, [r3, #0]
 8011588:	9b04      	ldr	r3, [sp, #16]
 801158a:	601d      	str	r5, [r3, #0]
 801158c:	e695      	b.n	80112ba <__gethex+0x12a>
 801158e:	4299      	cmp	r1, r3
 8011590:	f843 cc04 	str.w	ip, [r3, #-4]
 8011594:	d8d8      	bhi.n	8011548 <__gethex+0x3b8>
 8011596:	68a3      	ldr	r3, [r4, #8]
 8011598:	459b      	cmp	fp, r3
 801159a:	db19      	blt.n	80115d0 <__gethex+0x440>
 801159c:	6861      	ldr	r1, [r4, #4]
 801159e:	ee18 0a10 	vmov	r0, s16
 80115a2:	3101      	adds	r1, #1
 80115a4:	f000 f93e 	bl	8011824 <_Balloc>
 80115a8:	4681      	mov	r9, r0
 80115aa:	b918      	cbnz	r0, 80115b4 <__gethex+0x424>
 80115ac:	4b1a      	ldr	r3, [pc, #104]	; (8011618 <__gethex+0x488>)
 80115ae:	4602      	mov	r2, r0
 80115b0:	2184      	movs	r1, #132	; 0x84
 80115b2:	e6a8      	b.n	8011306 <__gethex+0x176>
 80115b4:	6922      	ldr	r2, [r4, #16]
 80115b6:	3202      	adds	r2, #2
 80115b8:	f104 010c 	add.w	r1, r4, #12
 80115bc:	0092      	lsls	r2, r2, #2
 80115be:	300c      	adds	r0, #12
 80115c0:	f000 f916 	bl	80117f0 <memcpy>
 80115c4:	4621      	mov	r1, r4
 80115c6:	ee18 0a10 	vmov	r0, s16
 80115ca:	f000 f96b 	bl	80118a4 <_Bfree>
 80115ce:	464c      	mov	r4, r9
 80115d0:	6923      	ldr	r3, [r4, #16]
 80115d2:	1c5a      	adds	r2, r3, #1
 80115d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80115d8:	6122      	str	r2, [r4, #16]
 80115da:	2201      	movs	r2, #1
 80115dc:	615a      	str	r2, [r3, #20]
 80115de:	e7bb      	b.n	8011558 <__gethex+0x3c8>
 80115e0:	6922      	ldr	r2, [r4, #16]
 80115e2:	455a      	cmp	r2, fp
 80115e4:	dd0b      	ble.n	80115fe <__gethex+0x46e>
 80115e6:	2101      	movs	r1, #1
 80115e8:	4620      	mov	r0, r4
 80115ea:	f7ff fd69 	bl	80110c0 <rshift>
 80115ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80115f2:	3501      	adds	r5, #1
 80115f4:	42ab      	cmp	r3, r5
 80115f6:	f6ff aed0 	blt.w	801139a <__gethex+0x20a>
 80115fa:	2701      	movs	r7, #1
 80115fc:	e7c0      	b.n	8011580 <__gethex+0x3f0>
 80115fe:	f016 061f 	ands.w	r6, r6, #31
 8011602:	d0fa      	beq.n	80115fa <__gethex+0x46a>
 8011604:	4453      	add	r3, sl
 8011606:	f1c6 0620 	rsb	r6, r6, #32
 801160a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801160e:	f000 f9fb 	bl	8011a08 <__hi0bits>
 8011612:	42b0      	cmp	r0, r6
 8011614:	dbe7      	blt.n	80115e6 <__gethex+0x456>
 8011616:	e7f0      	b.n	80115fa <__gethex+0x46a>
 8011618:	08013ff5 	.word	0x08013ff5

0801161c <L_shift>:
 801161c:	f1c2 0208 	rsb	r2, r2, #8
 8011620:	0092      	lsls	r2, r2, #2
 8011622:	b570      	push	{r4, r5, r6, lr}
 8011624:	f1c2 0620 	rsb	r6, r2, #32
 8011628:	6843      	ldr	r3, [r0, #4]
 801162a:	6804      	ldr	r4, [r0, #0]
 801162c:	fa03 f506 	lsl.w	r5, r3, r6
 8011630:	432c      	orrs	r4, r5
 8011632:	40d3      	lsrs	r3, r2
 8011634:	6004      	str	r4, [r0, #0]
 8011636:	f840 3f04 	str.w	r3, [r0, #4]!
 801163a:	4288      	cmp	r0, r1
 801163c:	d3f4      	bcc.n	8011628 <L_shift+0xc>
 801163e:	bd70      	pop	{r4, r5, r6, pc}

08011640 <__match>:
 8011640:	b530      	push	{r4, r5, lr}
 8011642:	6803      	ldr	r3, [r0, #0]
 8011644:	3301      	adds	r3, #1
 8011646:	f811 4b01 	ldrb.w	r4, [r1], #1
 801164a:	b914      	cbnz	r4, 8011652 <__match+0x12>
 801164c:	6003      	str	r3, [r0, #0]
 801164e:	2001      	movs	r0, #1
 8011650:	bd30      	pop	{r4, r5, pc}
 8011652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011656:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801165a:	2d19      	cmp	r5, #25
 801165c:	bf98      	it	ls
 801165e:	3220      	addls	r2, #32
 8011660:	42a2      	cmp	r2, r4
 8011662:	d0f0      	beq.n	8011646 <__match+0x6>
 8011664:	2000      	movs	r0, #0
 8011666:	e7f3      	b.n	8011650 <__match+0x10>

08011668 <__hexnan>:
 8011668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801166c:	680b      	ldr	r3, [r1, #0]
 801166e:	115e      	asrs	r6, r3, #5
 8011670:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011674:	f013 031f 	ands.w	r3, r3, #31
 8011678:	b087      	sub	sp, #28
 801167a:	bf18      	it	ne
 801167c:	3604      	addne	r6, #4
 801167e:	2500      	movs	r5, #0
 8011680:	1f37      	subs	r7, r6, #4
 8011682:	4690      	mov	r8, r2
 8011684:	6802      	ldr	r2, [r0, #0]
 8011686:	9301      	str	r3, [sp, #4]
 8011688:	4682      	mov	sl, r0
 801168a:	f846 5c04 	str.w	r5, [r6, #-4]
 801168e:	46b9      	mov	r9, r7
 8011690:	463c      	mov	r4, r7
 8011692:	9502      	str	r5, [sp, #8]
 8011694:	46ab      	mov	fp, r5
 8011696:	7851      	ldrb	r1, [r2, #1]
 8011698:	1c53      	adds	r3, r2, #1
 801169a:	9303      	str	r3, [sp, #12]
 801169c:	b341      	cbz	r1, 80116f0 <__hexnan+0x88>
 801169e:	4608      	mov	r0, r1
 80116a0:	9205      	str	r2, [sp, #20]
 80116a2:	9104      	str	r1, [sp, #16]
 80116a4:	f7ff fd5e 	bl	8011164 <__hexdig_fun>
 80116a8:	2800      	cmp	r0, #0
 80116aa:	d14f      	bne.n	801174c <__hexnan+0xe4>
 80116ac:	9904      	ldr	r1, [sp, #16]
 80116ae:	9a05      	ldr	r2, [sp, #20]
 80116b0:	2920      	cmp	r1, #32
 80116b2:	d818      	bhi.n	80116e6 <__hexnan+0x7e>
 80116b4:	9b02      	ldr	r3, [sp, #8]
 80116b6:	459b      	cmp	fp, r3
 80116b8:	dd13      	ble.n	80116e2 <__hexnan+0x7a>
 80116ba:	454c      	cmp	r4, r9
 80116bc:	d206      	bcs.n	80116cc <__hexnan+0x64>
 80116be:	2d07      	cmp	r5, #7
 80116c0:	dc04      	bgt.n	80116cc <__hexnan+0x64>
 80116c2:	462a      	mov	r2, r5
 80116c4:	4649      	mov	r1, r9
 80116c6:	4620      	mov	r0, r4
 80116c8:	f7ff ffa8 	bl	801161c <L_shift>
 80116cc:	4544      	cmp	r4, r8
 80116ce:	d950      	bls.n	8011772 <__hexnan+0x10a>
 80116d0:	2300      	movs	r3, #0
 80116d2:	f1a4 0904 	sub.w	r9, r4, #4
 80116d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80116da:	f8cd b008 	str.w	fp, [sp, #8]
 80116de:	464c      	mov	r4, r9
 80116e0:	461d      	mov	r5, r3
 80116e2:	9a03      	ldr	r2, [sp, #12]
 80116e4:	e7d7      	b.n	8011696 <__hexnan+0x2e>
 80116e6:	2929      	cmp	r1, #41	; 0x29
 80116e8:	d156      	bne.n	8011798 <__hexnan+0x130>
 80116ea:	3202      	adds	r2, #2
 80116ec:	f8ca 2000 	str.w	r2, [sl]
 80116f0:	f1bb 0f00 	cmp.w	fp, #0
 80116f4:	d050      	beq.n	8011798 <__hexnan+0x130>
 80116f6:	454c      	cmp	r4, r9
 80116f8:	d206      	bcs.n	8011708 <__hexnan+0xa0>
 80116fa:	2d07      	cmp	r5, #7
 80116fc:	dc04      	bgt.n	8011708 <__hexnan+0xa0>
 80116fe:	462a      	mov	r2, r5
 8011700:	4649      	mov	r1, r9
 8011702:	4620      	mov	r0, r4
 8011704:	f7ff ff8a 	bl	801161c <L_shift>
 8011708:	4544      	cmp	r4, r8
 801170a:	d934      	bls.n	8011776 <__hexnan+0x10e>
 801170c:	f1a8 0204 	sub.w	r2, r8, #4
 8011710:	4623      	mov	r3, r4
 8011712:	f853 1b04 	ldr.w	r1, [r3], #4
 8011716:	f842 1f04 	str.w	r1, [r2, #4]!
 801171a:	429f      	cmp	r7, r3
 801171c:	d2f9      	bcs.n	8011712 <__hexnan+0xaa>
 801171e:	1b3b      	subs	r3, r7, r4
 8011720:	f023 0303 	bic.w	r3, r3, #3
 8011724:	3304      	adds	r3, #4
 8011726:	3401      	adds	r4, #1
 8011728:	3e03      	subs	r6, #3
 801172a:	42b4      	cmp	r4, r6
 801172c:	bf88      	it	hi
 801172e:	2304      	movhi	r3, #4
 8011730:	4443      	add	r3, r8
 8011732:	2200      	movs	r2, #0
 8011734:	f843 2b04 	str.w	r2, [r3], #4
 8011738:	429f      	cmp	r7, r3
 801173a:	d2fb      	bcs.n	8011734 <__hexnan+0xcc>
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	b91b      	cbnz	r3, 8011748 <__hexnan+0xe0>
 8011740:	4547      	cmp	r7, r8
 8011742:	d127      	bne.n	8011794 <__hexnan+0x12c>
 8011744:	2301      	movs	r3, #1
 8011746:	603b      	str	r3, [r7, #0]
 8011748:	2005      	movs	r0, #5
 801174a:	e026      	b.n	801179a <__hexnan+0x132>
 801174c:	3501      	adds	r5, #1
 801174e:	2d08      	cmp	r5, #8
 8011750:	f10b 0b01 	add.w	fp, fp, #1
 8011754:	dd06      	ble.n	8011764 <__hexnan+0xfc>
 8011756:	4544      	cmp	r4, r8
 8011758:	d9c3      	bls.n	80116e2 <__hexnan+0x7a>
 801175a:	2300      	movs	r3, #0
 801175c:	f844 3c04 	str.w	r3, [r4, #-4]
 8011760:	2501      	movs	r5, #1
 8011762:	3c04      	subs	r4, #4
 8011764:	6822      	ldr	r2, [r4, #0]
 8011766:	f000 000f 	and.w	r0, r0, #15
 801176a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801176e:	6022      	str	r2, [r4, #0]
 8011770:	e7b7      	b.n	80116e2 <__hexnan+0x7a>
 8011772:	2508      	movs	r5, #8
 8011774:	e7b5      	b.n	80116e2 <__hexnan+0x7a>
 8011776:	9b01      	ldr	r3, [sp, #4]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d0df      	beq.n	801173c <__hexnan+0xd4>
 801177c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011780:	f1c3 0320 	rsb	r3, r3, #32
 8011784:	fa22 f303 	lsr.w	r3, r2, r3
 8011788:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801178c:	401a      	ands	r2, r3
 801178e:	f846 2c04 	str.w	r2, [r6, #-4]
 8011792:	e7d3      	b.n	801173c <__hexnan+0xd4>
 8011794:	3f04      	subs	r7, #4
 8011796:	e7d1      	b.n	801173c <__hexnan+0xd4>
 8011798:	2004      	movs	r0, #4
 801179a:	b007      	add	sp, #28
 801179c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080117a0 <_gettimeofday_r>:
 80117a0:	b538      	push	{r3, r4, r5, lr}
 80117a2:	4d07      	ldr	r5, [pc, #28]	; (80117c0 <_gettimeofday_r+0x20>)
 80117a4:	2300      	movs	r3, #0
 80117a6:	4604      	mov	r4, r0
 80117a8:	4608      	mov	r0, r1
 80117aa:	4611      	mov	r1, r2
 80117ac:	602b      	str	r3, [r5, #0]
 80117ae:	f001 fc1b 	bl	8012fe8 <_gettimeofday>
 80117b2:	1c43      	adds	r3, r0, #1
 80117b4:	d102      	bne.n	80117bc <_gettimeofday_r+0x1c>
 80117b6:	682b      	ldr	r3, [r5, #0]
 80117b8:	b103      	cbz	r3, 80117bc <_gettimeofday_r+0x1c>
 80117ba:	6023      	str	r3, [r4, #0]
 80117bc:	bd38      	pop	{r3, r4, r5, pc}
 80117be:	bf00      	nop
 80117c0:	20012f08 	.word	0x20012f08

080117c4 <_localeconv_r>:
 80117c4:	4800      	ldr	r0, [pc, #0]	; (80117c8 <_localeconv_r+0x4>)
 80117c6:	4770      	bx	lr
 80117c8:	200003e0 	.word	0x200003e0

080117cc <__ascii_mbtowc>:
 80117cc:	b082      	sub	sp, #8
 80117ce:	b901      	cbnz	r1, 80117d2 <__ascii_mbtowc+0x6>
 80117d0:	a901      	add	r1, sp, #4
 80117d2:	b142      	cbz	r2, 80117e6 <__ascii_mbtowc+0x1a>
 80117d4:	b14b      	cbz	r3, 80117ea <__ascii_mbtowc+0x1e>
 80117d6:	7813      	ldrb	r3, [r2, #0]
 80117d8:	600b      	str	r3, [r1, #0]
 80117da:	7812      	ldrb	r2, [r2, #0]
 80117dc:	1e10      	subs	r0, r2, #0
 80117de:	bf18      	it	ne
 80117e0:	2001      	movne	r0, #1
 80117e2:	b002      	add	sp, #8
 80117e4:	4770      	bx	lr
 80117e6:	4610      	mov	r0, r2
 80117e8:	e7fb      	b.n	80117e2 <__ascii_mbtowc+0x16>
 80117ea:	f06f 0001 	mvn.w	r0, #1
 80117ee:	e7f8      	b.n	80117e2 <__ascii_mbtowc+0x16>

080117f0 <memcpy>:
 80117f0:	440a      	add	r2, r1
 80117f2:	4291      	cmp	r1, r2
 80117f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80117f8:	d100      	bne.n	80117fc <memcpy+0xc>
 80117fa:	4770      	bx	lr
 80117fc:	b510      	push	{r4, lr}
 80117fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011802:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011806:	4291      	cmp	r1, r2
 8011808:	d1f9      	bne.n	80117fe <memcpy+0xe>
 801180a:	bd10      	pop	{r4, pc}

0801180c <__malloc_lock>:
 801180c:	4801      	ldr	r0, [pc, #4]	; (8011814 <__malloc_lock+0x8>)
 801180e:	f001 ba41 	b.w	8012c94 <__retarget_lock_acquire_recursive>
 8011812:	bf00      	nop
 8011814:	20012f0c 	.word	0x20012f0c

08011818 <__malloc_unlock>:
 8011818:	4801      	ldr	r0, [pc, #4]	; (8011820 <__malloc_unlock+0x8>)
 801181a:	f001 ba3c 	b.w	8012c96 <__retarget_lock_release_recursive>
 801181e:	bf00      	nop
 8011820:	20012f0c 	.word	0x20012f0c

08011824 <_Balloc>:
 8011824:	b570      	push	{r4, r5, r6, lr}
 8011826:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011828:	4604      	mov	r4, r0
 801182a:	460d      	mov	r5, r1
 801182c:	b976      	cbnz	r6, 801184c <_Balloc+0x28>
 801182e:	2010      	movs	r0, #16
 8011830:	f7fc fec2 	bl	800e5b8 <malloc>
 8011834:	4602      	mov	r2, r0
 8011836:	6260      	str	r0, [r4, #36]	; 0x24
 8011838:	b920      	cbnz	r0, 8011844 <_Balloc+0x20>
 801183a:	4b18      	ldr	r3, [pc, #96]	; (801189c <_Balloc+0x78>)
 801183c:	4818      	ldr	r0, [pc, #96]	; (80118a0 <_Balloc+0x7c>)
 801183e:	2166      	movs	r1, #102	; 0x66
 8011840:	f7fe fd94 	bl	801036c <__assert_func>
 8011844:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011848:	6006      	str	r6, [r0, #0]
 801184a:	60c6      	str	r6, [r0, #12]
 801184c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801184e:	68f3      	ldr	r3, [r6, #12]
 8011850:	b183      	cbz	r3, 8011874 <_Balloc+0x50>
 8011852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011854:	68db      	ldr	r3, [r3, #12]
 8011856:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801185a:	b9b8      	cbnz	r0, 801188c <_Balloc+0x68>
 801185c:	2101      	movs	r1, #1
 801185e:	fa01 f605 	lsl.w	r6, r1, r5
 8011862:	1d72      	adds	r2, r6, #5
 8011864:	0092      	lsls	r2, r2, #2
 8011866:	4620      	mov	r0, r4
 8011868:	f000 fc9d 	bl	80121a6 <_calloc_r>
 801186c:	b160      	cbz	r0, 8011888 <_Balloc+0x64>
 801186e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011872:	e00e      	b.n	8011892 <_Balloc+0x6e>
 8011874:	2221      	movs	r2, #33	; 0x21
 8011876:	2104      	movs	r1, #4
 8011878:	4620      	mov	r0, r4
 801187a:	f000 fc94 	bl	80121a6 <_calloc_r>
 801187e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011880:	60f0      	str	r0, [r6, #12]
 8011882:	68db      	ldr	r3, [r3, #12]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d1e4      	bne.n	8011852 <_Balloc+0x2e>
 8011888:	2000      	movs	r0, #0
 801188a:	bd70      	pop	{r4, r5, r6, pc}
 801188c:	6802      	ldr	r2, [r0, #0]
 801188e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011892:	2300      	movs	r3, #0
 8011894:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011898:	e7f7      	b.n	801188a <_Balloc+0x66>
 801189a:	bf00      	nop
 801189c:	08013d8d 	.word	0x08013d8d
 80118a0:	08014080 	.word	0x08014080

080118a4 <_Bfree>:
 80118a4:	b570      	push	{r4, r5, r6, lr}
 80118a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80118a8:	4605      	mov	r5, r0
 80118aa:	460c      	mov	r4, r1
 80118ac:	b976      	cbnz	r6, 80118cc <_Bfree+0x28>
 80118ae:	2010      	movs	r0, #16
 80118b0:	f7fc fe82 	bl	800e5b8 <malloc>
 80118b4:	4602      	mov	r2, r0
 80118b6:	6268      	str	r0, [r5, #36]	; 0x24
 80118b8:	b920      	cbnz	r0, 80118c4 <_Bfree+0x20>
 80118ba:	4b09      	ldr	r3, [pc, #36]	; (80118e0 <_Bfree+0x3c>)
 80118bc:	4809      	ldr	r0, [pc, #36]	; (80118e4 <_Bfree+0x40>)
 80118be:	218a      	movs	r1, #138	; 0x8a
 80118c0:	f7fe fd54 	bl	801036c <__assert_func>
 80118c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80118c8:	6006      	str	r6, [r0, #0]
 80118ca:	60c6      	str	r6, [r0, #12]
 80118cc:	b13c      	cbz	r4, 80118de <_Bfree+0x3a>
 80118ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80118d0:	6862      	ldr	r2, [r4, #4]
 80118d2:	68db      	ldr	r3, [r3, #12]
 80118d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80118d8:	6021      	str	r1, [r4, #0]
 80118da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80118de:	bd70      	pop	{r4, r5, r6, pc}
 80118e0:	08013d8d 	.word	0x08013d8d
 80118e4:	08014080 	.word	0x08014080

080118e8 <__multadd>:
 80118e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118ec:	690d      	ldr	r5, [r1, #16]
 80118ee:	4607      	mov	r7, r0
 80118f0:	460c      	mov	r4, r1
 80118f2:	461e      	mov	r6, r3
 80118f4:	f101 0c14 	add.w	ip, r1, #20
 80118f8:	2000      	movs	r0, #0
 80118fa:	f8dc 3000 	ldr.w	r3, [ip]
 80118fe:	b299      	uxth	r1, r3
 8011900:	fb02 6101 	mla	r1, r2, r1, r6
 8011904:	0c1e      	lsrs	r6, r3, #16
 8011906:	0c0b      	lsrs	r3, r1, #16
 8011908:	fb02 3306 	mla	r3, r2, r6, r3
 801190c:	b289      	uxth	r1, r1
 801190e:	3001      	adds	r0, #1
 8011910:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011914:	4285      	cmp	r5, r0
 8011916:	f84c 1b04 	str.w	r1, [ip], #4
 801191a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801191e:	dcec      	bgt.n	80118fa <__multadd+0x12>
 8011920:	b30e      	cbz	r6, 8011966 <__multadd+0x7e>
 8011922:	68a3      	ldr	r3, [r4, #8]
 8011924:	42ab      	cmp	r3, r5
 8011926:	dc19      	bgt.n	801195c <__multadd+0x74>
 8011928:	6861      	ldr	r1, [r4, #4]
 801192a:	4638      	mov	r0, r7
 801192c:	3101      	adds	r1, #1
 801192e:	f7ff ff79 	bl	8011824 <_Balloc>
 8011932:	4680      	mov	r8, r0
 8011934:	b928      	cbnz	r0, 8011942 <__multadd+0x5a>
 8011936:	4602      	mov	r2, r0
 8011938:	4b0c      	ldr	r3, [pc, #48]	; (801196c <__multadd+0x84>)
 801193a:	480d      	ldr	r0, [pc, #52]	; (8011970 <__multadd+0x88>)
 801193c:	21b5      	movs	r1, #181	; 0xb5
 801193e:	f7fe fd15 	bl	801036c <__assert_func>
 8011942:	6922      	ldr	r2, [r4, #16]
 8011944:	3202      	adds	r2, #2
 8011946:	f104 010c 	add.w	r1, r4, #12
 801194a:	0092      	lsls	r2, r2, #2
 801194c:	300c      	adds	r0, #12
 801194e:	f7ff ff4f 	bl	80117f0 <memcpy>
 8011952:	4621      	mov	r1, r4
 8011954:	4638      	mov	r0, r7
 8011956:	f7ff ffa5 	bl	80118a4 <_Bfree>
 801195a:	4644      	mov	r4, r8
 801195c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011960:	3501      	adds	r5, #1
 8011962:	615e      	str	r6, [r3, #20]
 8011964:	6125      	str	r5, [r4, #16]
 8011966:	4620      	mov	r0, r4
 8011968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801196c:	08013ff5 	.word	0x08013ff5
 8011970:	08014080 	.word	0x08014080

08011974 <__s2b>:
 8011974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011978:	460c      	mov	r4, r1
 801197a:	4615      	mov	r5, r2
 801197c:	461f      	mov	r7, r3
 801197e:	2209      	movs	r2, #9
 8011980:	3308      	adds	r3, #8
 8011982:	4606      	mov	r6, r0
 8011984:	fb93 f3f2 	sdiv	r3, r3, r2
 8011988:	2100      	movs	r1, #0
 801198a:	2201      	movs	r2, #1
 801198c:	429a      	cmp	r2, r3
 801198e:	db09      	blt.n	80119a4 <__s2b+0x30>
 8011990:	4630      	mov	r0, r6
 8011992:	f7ff ff47 	bl	8011824 <_Balloc>
 8011996:	b940      	cbnz	r0, 80119aa <__s2b+0x36>
 8011998:	4602      	mov	r2, r0
 801199a:	4b19      	ldr	r3, [pc, #100]	; (8011a00 <__s2b+0x8c>)
 801199c:	4819      	ldr	r0, [pc, #100]	; (8011a04 <__s2b+0x90>)
 801199e:	21ce      	movs	r1, #206	; 0xce
 80119a0:	f7fe fce4 	bl	801036c <__assert_func>
 80119a4:	0052      	lsls	r2, r2, #1
 80119a6:	3101      	adds	r1, #1
 80119a8:	e7f0      	b.n	801198c <__s2b+0x18>
 80119aa:	9b08      	ldr	r3, [sp, #32]
 80119ac:	6143      	str	r3, [r0, #20]
 80119ae:	2d09      	cmp	r5, #9
 80119b0:	f04f 0301 	mov.w	r3, #1
 80119b4:	6103      	str	r3, [r0, #16]
 80119b6:	dd16      	ble.n	80119e6 <__s2b+0x72>
 80119b8:	f104 0909 	add.w	r9, r4, #9
 80119bc:	46c8      	mov	r8, r9
 80119be:	442c      	add	r4, r5
 80119c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80119c4:	4601      	mov	r1, r0
 80119c6:	3b30      	subs	r3, #48	; 0x30
 80119c8:	220a      	movs	r2, #10
 80119ca:	4630      	mov	r0, r6
 80119cc:	f7ff ff8c 	bl	80118e8 <__multadd>
 80119d0:	45a0      	cmp	r8, r4
 80119d2:	d1f5      	bne.n	80119c0 <__s2b+0x4c>
 80119d4:	f1a5 0408 	sub.w	r4, r5, #8
 80119d8:	444c      	add	r4, r9
 80119da:	1b2d      	subs	r5, r5, r4
 80119dc:	1963      	adds	r3, r4, r5
 80119de:	42bb      	cmp	r3, r7
 80119e0:	db04      	blt.n	80119ec <__s2b+0x78>
 80119e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119e6:	340a      	adds	r4, #10
 80119e8:	2509      	movs	r5, #9
 80119ea:	e7f6      	b.n	80119da <__s2b+0x66>
 80119ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80119f0:	4601      	mov	r1, r0
 80119f2:	3b30      	subs	r3, #48	; 0x30
 80119f4:	220a      	movs	r2, #10
 80119f6:	4630      	mov	r0, r6
 80119f8:	f7ff ff76 	bl	80118e8 <__multadd>
 80119fc:	e7ee      	b.n	80119dc <__s2b+0x68>
 80119fe:	bf00      	nop
 8011a00:	08013ff5 	.word	0x08013ff5
 8011a04:	08014080 	.word	0x08014080

08011a08 <__hi0bits>:
 8011a08:	0c03      	lsrs	r3, r0, #16
 8011a0a:	041b      	lsls	r3, r3, #16
 8011a0c:	b9d3      	cbnz	r3, 8011a44 <__hi0bits+0x3c>
 8011a0e:	0400      	lsls	r0, r0, #16
 8011a10:	2310      	movs	r3, #16
 8011a12:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011a16:	bf04      	itt	eq
 8011a18:	0200      	lsleq	r0, r0, #8
 8011a1a:	3308      	addeq	r3, #8
 8011a1c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011a20:	bf04      	itt	eq
 8011a22:	0100      	lsleq	r0, r0, #4
 8011a24:	3304      	addeq	r3, #4
 8011a26:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011a2a:	bf04      	itt	eq
 8011a2c:	0080      	lsleq	r0, r0, #2
 8011a2e:	3302      	addeq	r3, #2
 8011a30:	2800      	cmp	r0, #0
 8011a32:	db05      	blt.n	8011a40 <__hi0bits+0x38>
 8011a34:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011a38:	f103 0301 	add.w	r3, r3, #1
 8011a3c:	bf08      	it	eq
 8011a3e:	2320      	moveq	r3, #32
 8011a40:	4618      	mov	r0, r3
 8011a42:	4770      	bx	lr
 8011a44:	2300      	movs	r3, #0
 8011a46:	e7e4      	b.n	8011a12 <__hi0bits+0xa>

08011a48 <__lo0bits>:
 8011a48:	6803      	ldr	r3, [r0, #0]
 8011a4a:	f013 0207 	ands.w	r2, r3, #7
 8011a4e:	4601      	mov	r1, r0
 8011a50:	d00b      	beq.n	8011a6a <__lo0bits+0x22>
 8011a52:	07da      	lsls	r2, r3, #31
 8011a54:	d423      	bmi.n	8011a9e <__lo0bits+0x56>
 8011a56:	0798      	lsls	r0, r3, #30
 8011a58:	bf49      	itett	mi
 8011a5a:	085b      	lsrmi	r3, r3, #1
 8011a5c:	089b      	lsrpl	r3, r3, #2
 8011a5e:	2001      	movmi	r0, #1
 8011a60:	600b      	strmi	r3, [r1, #0]
 8011a62:	bf5c      	itt	pl
 8011a64:	600b      	strpl	r3, [r1, #0]
 8011a66:	2002      	movpl	r0, #2
 8011a68:	4770      	bx	lr
 8011a6a:	b298      	uxth	r0, r3
 8011a6c:	b9a8      	cbnz	r0, 8011a9a <__lo0bits+0x52>
 8011a6e:	0c1b      	lsrs	r3, r3, #16
 8011a70:	2010      	movs	r0, #16
 8011a72:	b2da      	uxtb	r2, r3
 8011a74:	b90a      	cbnz	r2, 8011a7a <__lo0bits+0x32>
 8011a76:	3008      	adds	r0, #8
 8011a78:	0a1b      	lsrs	r3, r3, #8
 8011a7a:	071a      	lsls	r2, r3, #28
 8011a7c:	bf04      	itt	eq
 8011a7e:	091b      	lsreq	r3, r3, #4
 8011a80:	3004      	addeq	r0, #4
 8011a82:	079a      	lsls	r2, r3, #30
 8011a84:	bf04      	itt	eq
 8011a86:	089b      	lsreq	r3, r3, #2
 8011a88:	3002      	addeq	r0, #2
 8011a8a:	07da      	lsls	r2, r3, #31
 8011a8c:	d403      	bmi.n	8011a96 <__lo0bits+0x4e>
 8011a8e:	085b      	lsrs	r3, r3, #1
 8011a90:	f100 0001 	add.w	r0, r0, #1
 8011a94:	d005      	beq.n	8011aa2 <__lo0bits+0x5a>
 8011a96:	600b      	str	r3, [r1, #0]
 8011a98:	4770      	bx	lr
 8011a9a:	4610      	mov	r0, r2
 8011a9c:	e7e9      	b.n	8011a72 <__lo0bits+0x2a>
 8011a9e:	2000      	movs	r0, #0
 8011aa0:	4770      	bx	lr
 8011aa2:	2020      	movs	r0, #32
 8011aa4:	4770      	bx	lr
	...

08011aa8 <__i2b>:
 8011aa8:	b510      	push	{r4, lr}
 8011aaa:	460c      	mov	r4, r1
 8011aac:	2101      	movs	r1, #1
 8011aae:	f7ff feb9 	bl	8011824 <_Balloc>
 8011ab2:	4602      	mov	r2, r0
 8011ab4:	b928      	cbnz	r0, 8011ac2 <__i2b+0x1a>
 8011ab6:	4b05      	ldr	r3, [pc, #20]	; (8011acc <__i2b+0x24>)
 8011ab8:	4805      	ldr	r0, [pc, #20]	; (8011ad0 <__i2b+0x28>)
 8011aba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011abe:	f7fe fc55 	bl	801036c <__assert_func>
 8011ac2:	2301      	movs	r3, #1
 8011ac4:	6144      	str	r4, [r0, #20]
 8011ac6:	6103      	str	r3, [r0, #16]
 8011ac8:	bd10      	pop	{r4, pc}
 8011aca:	bf00      	nop
 8011acc:	08013ff5 	.word	0x08013ff5
 8011ad0:	08014080 	.word	0x08014080

08011ad4 <__multiply>:
 8011ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ad8:	4691      	mov	r9, r2
 8011ada:	690a      	ldr	r2, [r1, #16]
 8011adc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011ae0:	429a      	cmp	r2, r3
 8011ae2:	bfb8      	it	lt
 8011ae4:	460b      	movlt	r3, r1
 8011ae6:	460c      	mov	r4, r1
 8011ae8:	bfbc      	itt	lt
 8011aea:	464c      	movlt	r4, r9
 8011aec:	4699      	movlt	r9, r3
 8011aee:	6927      	ldr	r7, [r4, #16]
 8011af0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011af4:	68a3      	ldr	r3, [r4, #8]
 8011af6:	6861      	ldr	r1, [r4, #4]
 8011af8:	eb07 060a 	add.w	r6, r7, sl
 8011afc:	42b3      	cmp	r3, r6
 8011afe:	b085      	sub	sp, #20
 8011b00:	bfb8      	it	lt
 8011b02:	3101      	addlt	r1, #1
 8011b04:	f7ff fe8e 	bl	8011824 <_Balloc>
 8011b08:	b930      	cbnz	r0, 8011b18 <__multiply+0x44>
 8011b0a:	4602      	mov	r2, r0
 8011b0c:	4b44      	ldr	r3, [pc, #272]	; (8011c20 <__multiply+0x14c>)
 8011b0e:	4845      	ldr	r0, [pc, #276]	; (8011c24 <__multiply+0x150>)
 8011b10:	f240 115d 	movw	r1, #349	; 0x15d
 8011b14:	f7fe fc2a 	bl	801036c <__assert_func>
 8011b18:	f100 0514 	add.w	r5, r0, #20
 8011b1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011b20:	462b      	mov	r3, r5
 8011b22:	2200      	movs	r2, #0
 8011b24:	4543      	cmp	r3, r8
 8011b26:	d321      	bcc.n	8011b6c <__multiply+0x98>
 8011b28:	f104 0314 	add.w	r3, r4, #20
 8011b2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011b30:	f109 0314 	add.w	r3, r9, #20
 8011b34:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011b38:	9202      	str	r2, [sp, #8]
 8011b3a:	1b3a      	subs	r2, r7, r4
 8011b3c:	3a15      	subs	r2, #21
 8011b3e:	f022 0203 	bic.w	r2, r2, #3
 8011b42:	3204      	adds	r2, #4
 8011b44:	f104 0115 	add.w	r1, r4, #21
 8011b48:	428f      	cmp	r7, r1
 8011b4a:	bf38      	it	cc
 8011b4c:	2204      	movcc	r2, #4
 8011b4e:	9201      	str	r2, [sp, #4]
 8011b50:	9a02      	ldr	r2, [sp, #8]
 8011b52:	9303      	str	r3, [sp, #12]
 8011b54:	429a      	cmp	r2, r3
 8011b56:	d80c      	bhi.n	8011b72 <__multiply+0x9e>
 8011b58:	2e00      	cmp	r6, #0
 8011b5a:	dd03      	ble.n	8011b64 <__multiply+0x90>
 8011b5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d05a      	beq.n	8011c1a <__multiply+0x146>
 8011b64:	6106      	str	r6, [r0, #16]
 8011b66:	b005      	add	sp, #20
 8011b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b6c:	f843 2b04 	str.w	r2, [r3], #4
 8011b70:	e7d8      	b.n	8011b24 <__multiply+0x50>
 8011b72:	f8b3 a000 	ldrh.w	sl, [r3]
 8011b76:	f1ba 0f00 	cmp.w	sl, #0
 8011b7a:	d024      	beq.n	8011bc6 <__multiply+0xf2>
 8011b7c:	f104 0e14 	add.w	lr, r4, #20
 8011b80:	46a9      	mov	r9, r5
 8011b82:	f04f 0c00 	mov.w	ip, #0
 8011b86:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011b8a:	f8d9 1000 	ldr.w	r1, [r9]
 8011b8e:	fa1f fb82 	uxth.w	fp, r2
 8011b92:	b289      	uxth	r1, r1
 8011b94:	fb0a 110b 	mla	r1, sl, fp, r1
 8011b98:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011b9c:	f8d9 2000 	ldr.w	r2, [r9]
 8011ba0:	4461      	add	r1, ip
 8011ba2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011ba6:	fb0a c20b 	mla	r2, sl, fp, ip
 8011baa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011bae:	b289      	uxth	r1, r1
 8011bb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011bb4:	4577      	cmp	r7, lr
 8011bb6:	f849 1b04 	str.w	r1, [r9], #4
 8011bba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011bbe:	d8e2      	bhi.n	8011b86 <__multiply+0xb2>
 8011bc0:	9a01      	ldr	r2, [sp, #4]
 8011bc2:	f845 c002 	str.w	ip, [r5, r2]
 8011bc6:	9a03      	ldr	r2, [sp, #12]
 8011bc8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011bcc:	3304      	adds	r3, #4
 8011bce:	f1b9 0f00 	cmp.w	r9, #0
 8011bd2:	d020      	beq.n	8011c16 <__multiply+0x142>
 8011bd4:	6829      	ldr	r1, [r5, #0]
 8011bd6:	f104 0c14 	add.w	ip, r4, #20
 8011bda:	46ae      	mov	lr, r5
 8011bdc:	f04f 0a00 	mov.w	sl, #0
 8011be0:	f8bc b000 	ldrh.w	fp, [ip]
 8011be4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011be8:	fb09 220b 	mla	r2, r9, fp, r2
 8011bec:	4492      	add	sl, r2
 8011bee:	b289      	uxth	r1, r1
 8011bf0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011bf4:	f84e 1b04 	str.w	r1, [lr], #4
 8011bf8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011bfc:	f8be 1000 	ldrh.w	r1, [lr]
 8011c00:	0c12      	lsrs	r2, r2, #16
 8011c02:	fb09 1102 	mla	r1, r9, r2, r1
 8011c06:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011c0a:	4567      	cmp	r7, ip
 8011c0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011c10:	d8e6      	bhi.n	8011be0 <__multiply+0x10c>
 8011c12:	9a01      	ldr	r2, [sp, #4]
 8011c14:	50a9      	str	r1, [r5, r2]
 8011c16:	3504      	adds	r5, #4
 8011c18:	e79a      	b.n	8011b50 <__multiply+0x7c>
 8011c1a:	3e01      	subs	r6, #1
 8011c1c:	e79c      	b.n	8011b58 <__multiply+0x84>
 8011c1e:	bf00      	nop
 8011c20:	08013ff5 	.word	0x08013ff5
 8011c24:	08014080 	.word	0x08014080

08011c28 <__pow5mult>:
 8011c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c2c:	4615      	mov	r5, r2
 8011c2e:	f012 0203 	ands.w	r2, r2, #3
 8011c32:	4606      	mov	r6, r0
 8011c34:	460f      	mov	r7, r1
 8011c36:	d007      	beq.n	8011c48 <__pow5mult+0x20>
 8011c38:	4c25      	ldr	r4, [pc, #148]	; (8011cd0 <__pow5mult+0xa8>)
 8011c3a:	3a01      	subs	r2, #1
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011c42:	f7ff fe51 	bl	80118e8 <__multadd>
 8011c46:	4607      	mov	r7, r0
 8011c48:	10ad      	asrs	r5, r5, #2
 8011c4a:	d03d      	beq.n	8011cc8 <__pow5mult+0xa0>
 8011c4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011c4e:	b97c      	cbnz	r4, 8011c70 <__pow5mult+0x48>
 8011c50:	2010      	movs	r0, #16
 8011c52:	f7fc fcb1 	bl	800e5b8 <malloc>
 8011c56:	4602      	mov	r2, r0
 8011c58:	6270      	str	r0, [r6, #36]	; 0x24
 8011c5a:	b928      	cbnz	r0, 8011c68 <__pow5mult+0x40>
 8011c5c:	4b1d      	ldr	r3, [pc, #116]	; (8011cd4 <__pow5mult+0xac>)
 8011c5e:	481e      	ldr	r0, [pc, #120]	; (8011cd8 <__pow5mult+0xb0>)
 8011c60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011c64:	f7fe fb82 	bl	801036c <__assert_func>
 8011c68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011c6c:	6004      	str	r4, [r0, #0]
 8011c6e:	60c4      	str	r4, [r0, #12]
 8011c70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011c74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011c78:	b94c      	cbnz	r4, 8011c8e <__pow5mult+0x66>
 8011c7a:	f240 2171 	movw	r1, #625	; 0x271
 8011c7e:	4630      	mov	r0, r6
 8011c80:	f7ff ff12 	bl	8011aa8 <__i2b>
 8011c84:	2300      	movs	r3, #0
 8011c86:	f8c8 0008 	str.w	r0, [r8, #8]
 8011c8a:	4604      	mov	r4, r0
 8011c8c:	6003      	str	r3, [r0, #0]
 8011c8e:	f04f 0900 	mov.w	r9, #0
 8011c92:	07eb      	lsls	r3, r5, #31
 8011c94:	d50a      	bpl.n	8011cac <__pow5mult+0x84>
 8011c96:	4639      	mov	r1, r7
 8011c98:	4622      	mov	r2, r4
 8011c9a:	4630      	mov	r0, r6
 8011c9c:	f7ff ff1a 	bl	8011ad4 <__multiply>
 8011ca0:	4639      	mov	r1, r7
 8011ca2:	4680      	mov	r8, r0
 8011ca4:	4630      	mov	r0, r6
 8011ca6:	f7ff fdfd 	bl	80118a4 <_Bfree>
 8011caa:	4647      	mov	r7, r8
 8011cac:	106d      	asrs	r5, r5, #1
 8011cae:	d00b      	beq.n	8011cc8 <__pow5mult+0xa0>
 8011cb0:	6820      	ldr	r0, [r4, #0]
 8011cb2:	b938      	cbnz	r0, 8011cc4 <__pow5mult+0x9c>
 8011cb4:	4622      	mov	r2, r4
 8011cb6:	4621      	mov	r1, r4
 8011cb8:	4630      	mov	r0, r6
 8011cba:	f7ff ff0b 	bl	8011ad4 <__multiply>
 8011cbe:	6020      	str	r0, [r4, #0]
 8011cc0:	f8c0 9000 	str.w	r9, [r0]
 8011cc4:	4604      	mov	r4, r0
 8011cc6:	e7e4      	b.n	8011c92 <__pow5mult+0x6a>
 8011cc8:	4638      	mov	r0, r7
 8011cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cce:	bf00      	nop
 8011cd0:	080141d0 	.word	0x080141d0
 8011cd4:	08013d8d 	.word	0x08013d8d
 8011cd8:	08014080 	.word	0x08014080

08011cdc <__lshift>:
 8011cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ce0:	460c      	mov	r4, r1
 8011ce2:	6849      	ldr	r1, [r1, #4]
 8011ce4:	6923      	ldr	r3, [r4, #16]
 8011ce6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011cea:	68a3      	ldr	r3, [r4, #8]
 8011cec:	4607      	mov	r7, r0
 8011cee:	4691      	mov	r9, r2
 8011cf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011cf4:	f108 0601 	add.w	r6, r8, #1
 8011cf8:	42b3      	cmp	r3, r6
 8011cfa:	db0b      	blt.n	8011d14 <__lshift+0x38>
 8011cfc:	4638      	mov	r0, r7
 8011cfe:	f7ff fd91 	bl	8011824 <_Balloc>
 8011d02:	4605      	mov	r5, r0
 8011d04:	b948      	cbnz	r0, 8011d1a <__lshift+0x3e>
 8011d06:	4602      	mov	r2, r0
 8011d08:	4b2a      	ldr	r3, [pc, #168]	; (8011db4 <__lshift+0xd8>)
 8011d0a:	482b      	ldr	r0, [pc, #172]	; (8011db8 <__lshift+0xdc>)
 8011d0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011d10:	f7fe fb2c 	bl	801036c <__assert_func>
 8011d14:	3101      	adds	r1, #1
 8011d16:	005b      	lsls	r3, r3, #1
 8011d18:	e7ee      	b.n	8011cf8 <__lshift+0x1c>
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	f100 0114 	add.w	r1, r0, #20
 8011d20:	f100 0210 	add.w	r2, r0, #16
 8011d24:	4618      	mov	r0, r3
 8011d26:	4553      	cmp	r3, sl
 8011d28:	db37      	blt.n	8011d9a <__lshift+0xbe>
 8011d2a:	6920      	ldr	r0, [r4, #16]
 8011d2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011d30:	f104 0314 	add.w	r3, r4, #20
 8011d34:	f019 091f 	ands.w	r9, r9, #31
 8011d38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011d3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011d40:	d02f      	beq.n	8011da2 <__lshift+0xc6>
 8011d42:	f1c9 0e20 	rsb	lr, r9, #32
 8011d46:	468a      	mov	sl, r1
 8011d48:	f04f 0c00 	mov.w	ip, #0
 8011d4c:	681a      	ldr	r2, [r3, #0]
 8011d4e:	fa02 f209 	lsl.w	r2, r2, r9
 8011d52:	ea42 020c 	orr.w	r2, r2, ip
 8011d56:	f84a 2b04 	str.w	r2, [sl], #4
 8011d5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d5e:	4298      	cmp	r0, r3
 8011d60:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011d64:	d8f2      	bhi.n	8011d4c <__lshift+0x70>
 8011d66:	1b03      	subs	r3, r0, r4
 8011d68:	3b15      	subs	r3, #21
 8011d6a:	f023 0303 	bic.w	r3, r3, #3
 8011d6e:	3304      	adds	r3, #4
 8011d70:	f104 0215 	add.w	r2, r4, #21
 8011d74:	4290      	cmp	r0, r2
 8011d76:	bf38      	it	cc
 8011d78:	2304      	movcc	r3, #4
 8011d7a:	f841 c003 	str.w	ip, [r1, r3]
 8011d7e:	f1bc 0f00 	cmp.w	ip, #0
 8011d82:	d001      	beq.n	8011d88 <__lshift+0xac>
 8011d84:	f108 0602 	add.w	r6, r8, #2
 8011d88:	3e01      	subs	r6, #1
 8011d8a:	4638      	mov	r0, r7
 8011d8c:	612e      	str	r6, [r5, #16]
 8011d8e:	4621      	mov	r1, r4
 8011d90:	f7ff fd88 	bl	80118a4 <_Bfree>
 8011d94:	4628      	mov	r0, r5
 8011d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8011d9e:	3301      	adds	r3, #1
 8011da0:	e7c1      	b.n	8011d26 <__lshift+0x4a>
 8011da2:	3904      	subs	r1, #4
 8011da4:	f853 2b04 	ldr.w	r2, [r3], #4
 8011da8:	f841 2f04 	str.w	r2, [r1, #4]!
 8011dac:	4298      	cmp	r0, r3
 8011dae:	d8f9      	bhi.n	8011da4 <__lshift+0xc8>
 8011db0:	e7ea      	b.n	8011d88 <__lshift+0xac>
 8011db2:	bf00      	nop
 8011db4:	08013ff5 	.word	0x08013ff5
 8011db8:	08014080 	.word	0x08014080

08011dbc <__mcmp>:
 8011dbc:	b530      	push	{r4, r5, lr}
 8011dbe:	6902      	ldr	r2, [r0, #16]
 8011dc0:	690c      	ldr	r4, [r1, #16]
 8011dc2:	1b12      	subs	r2, r2, r4
 8011dc4:	d10e      	bne.n	8011de4 <__mcmp+0x28>
 8011dc6:	f100 0314 	add.w	r3, r0, #20
 8011dca:	3114      	adds	r1, #20
 8011dcc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011dd0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011dd4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011dd8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011ddc:	42a5      	cmp	r5, r4
 8011dde:	d003      	beq.n	8011de8 <__mcmp+0x2c>
 8011de0:	d305      	bcc.n	8011dee <__mcmp+0x32>
 8011de2:	2201      	movs	r2, #1
 8011de4:	4610      	mov	r0, r2
 8011de6:	bd30      	pop	{r4, r5, pc}
 8011de8:	4283      	cmp	r3, r0
 8011dea:	d3f3      	bcc.n	8011dd4 <__mcmp+0x18>
 8011dec:	e7fa      	b.n	8011de4 <__mcmp+0x28>
 8011dee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011df2:	e7f7      	b.n	8011de4 <__mcmp+0x28>

08011df4 <__mdiff>:
 8011df4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011df8:	460c      	mov	r4, r1
 8011dfa:	4606      	mov	r6, r0
 8011dfc:	4611      	mov	r1, r2
 8011dfe:	4620      	mov	r0, r4
 8011e00:	4690      	mov	r8, r2
 8011e02:	f7ff ffdb 	bl	8011dbc <__mcmp>
 8011e06:	1e05      	subs	r5, r0, #0
 8011e08:	d110      	bne.n	8011e2c <__mdiff+0x38>
 8011e0a:	4629      	mov	r1, r5
 8011e0c:	4630      	mov	r0, r6
 8011e0e:	f7ff fd09 	bl	8011824 <_Balloc>
 8011e12:	b930      	cbnz	r0, 8011e22 <__mdiff+0x2e>
 8011e14:	4b3a      	ldr	r3, [pc, #232]	; (8011f00 <__mdiff+0x10c>)
 8011e16:	4602      	mov	r2, r0
 8011e18:	f240 2132 	movw	r1, #562	; 0x232
 8011e1c:	4839      	ldr	r0, [pc, #228]	; (8011f04 <__mdiff+0x110>)
 8011e1e:	f7fe faa5 	bl	801036c <__assert_func>
 8011e22:	2301      	movs	r3, #1
 8011e24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011e28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e2c:	bfa4      	itt	ge
 8011e2e:	4643      	movge	r3, r8
 8011e30:	46a0      	movge	r8, r4
 8011e32:	4630      	mov	r0, r6
 8011e34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011e38:	bfa6      	itte	ge
 8011e3a:	461c      	movge	r4, r3
 8011e3c:	2500      	movge	r5, #0
 8011e3e:	2501      	movlt	r5, #1
 8011e40:	f7ff fcf0 	bl	8011824 <_Balloc>
 8011e44:	b920      	cbnz	r0, 8011e50 <__mdiff+0x5c>
 8011e46:	4b2e      	ldr	r3, [pc, #184]	; (8011f00 <__mdiff+0x10c>)
 8011e48:	4602      	mov	r2, r0
 8011e4a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011e4e:	e7e5      	b.n	8011e1c <__mdiff+0x28>
 8011e50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011e54:	6926      	ldr	r6, [r4, #16]
 8011e56:	60c5      	str	r5, [r0, #12]
 8011e58:	f104 0914 	add.w	r9, r4, #20
 8011e5c:	f108 0514 	add.w	r5, r8, #20
 8011e60:	f100 0e14 	add.w	lr, r0, #20
 8011e64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011e68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011e6c:	f108 0210 	add.w	r2, r8, #16
 8011e70:	46f2      	mov	sl, lr
 8011e72:	2100      	movs	r1, #0
 8011e74:	f859 3b04 	ldr.w	r3, [r9], #4
 8011e78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011e7c:	fa1f f883 	uxth.w	r8, r3
 8011e80:	fa11 f18b 	uxtah	r1, r1, fp
 8011e84:	0c1b      	lsrs	r3, r3, #16
 8011e86:	eba1 0808 	sub.w	r8, r1, r8
 8011e8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011e8e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011e92:	fa1f f888 	uxth.w	r8, r8
 8011e96:	1419      	asrs	r1, r3, #16
 8011e98:	454e      	cmp	r6, r9
 8011e9a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011e9e:	f84a 3b04 	str.w	r3, [sl], #4
 8011ea2:	d8e7      	bhi.n	8011e74 <__mdiff+0x80>
 8011ea4:	1b33      	subs	r3, r6, r4
 8011ea6:	3b15      	subs	r3, #21
 8011ea8:	f023 0303 	bic.w	r3, r3, #3
 8011eac:	3304      	adds	r3, #4
 8011eae:	3415      	adds	r4, #21
 8011eb0:	42a6      	cmp	r6, r4
 8011eb2:	bf38      	it	cc
 8011eb4:	2304      	movcc	r3, #4
 8011eb6:	441d      	add	r5, r3
 8011eb8:	4473      	add	r3, lr
 8011eba:	469e      	mov	lr, r3
 8011ebc:	462e      	mov	r6, r5
 8011ebe:	4566      	cmp	r6, ip
 8011ec0:	d30e      	bcc.n	8011ee0 <__mdiff+0xec>
 8011ec2:	f10c 0203 	add.w	r2, ip, #3
 8011ec6:	1b52      	subs	r2, r2, r5
 8011ec8:	f022 0203 	bic.w	r2, r2, #3
 8011ecc:	3d03      	subs	r5, #3
 8011ece:	45ac      	cmp	ip, r5
 8011ed0:	bf38      	it	cc
 8011ed2:	2200      	movcc	r2, #0
 8011ed4:	441a      	add	r2, r3
 8011ed6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011eda:	b17b      	cbz	r3, 8011efc <__mdiff+0x108>
 8011edc:	6107      	str	r7, [r0, #16]
 8011ede:	e7a3      	b.n	8011e28 <__mdiff+0x34>
 8011ee0:	f856 8b04 	ldr.w	r8, [r6], #4
 8011ee4:	fa11 f288 	uxtah	r2, r1, r8
 8011ee8:	1414      	asrs	r4, r2, #16
 8011eea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011eee:	b292      	uxth	r2, r2
 8011ef0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011ef4:	f84e 2b04 	str.w	r2, [lr], #4
 8011ef8:	1421      	asrs	r1, r4, #16
 8011efa:	e7e0      	b.n	8011ebe <__mdiff+0xca>
 8011efc:	3f01      	subs	r7, #1
 8011efe:	e7ea      	b.n	8011ed6 <__mdiff+0xe2>
 8011f00:	08013ff5 	.word	0x08013ff5
 8011f04:	08014080 	.word	0x08014080

08011f08 <__ulp>:
 8011f08:	b082      	sub	sp, #8
 8011f0a:	ed8d 0b00 	vstr	d0, [sp]
 8011f0e:	9b01      	ldr	r3, [sp, #4]
 8011f10:	4912      	ldr	r1, [pc, #72]	; (8011f5c <__ulp+0x54>)
 8011f12:	4019      	ands	r1, r3
 8011f14:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011f18:	2900      	cmp	r1, #0
 8011f1a:	dd05      	ble.n	8011f28 <__ulp+0x20>
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	460b      	mov	r3, r1
 8011f20:	ec43 2b10 	vmov	d0, r2, r3
 8011f24:	b002      	add	sp, #8
 8011f26:	4770      	bx	lr
 8011f28:	4249      	negs	r1, r1
 8011f2a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011f2e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011f32:	f04f 0200 	mov.w	r2, #0
 8011f36:	f04f 0300 	mov.w	r3, #0
 8011f3a:	da04      	bge.n	8011f46 <__ulp+0x3e>
 8011f3c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011f40:	fa41 f300 	asr.w	r3, r1, r0
 8011f44:	e7ec      	b.n	8011f20 <__ulp+0x18>
 8011f46:	f1a0 0114 	sub.w	r1, r0, #20
 8011f4a:	291e      	cmp	r1, #30
 8011f4c:	bfda      	itte	le
 8011f4e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8011f52:	fa20 f101 	lsrle.w	r1, r0, r1
 8011f56:	2101      	movgt	r1, #1
 8011f58:	460a      	mov	r2, r1
 8011f5a:	e7e1      	b.n	8011f20 <__ulp+0x18>
 8011f5c:	7ff00000 	.word	0x7ff00000

08011f60 <__b2d>:
 8011f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f62:	6905      	ldr	r5, [r0, #16]
 8011f64:	f100 0714 	add.w	r7, r0, #20
 8011f68:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011f6c:	1f2e      	subs	r6, r5, #4
 8011f6e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011f72:	4620      	mov	r0, r4
 8011f74:	f7ff fd48 	bl	8011a08 <__hi0bits>
 8011f78:	f1c0 0320 	rsb	r3, r0, #32
 8011f7c:	280a      	cmp	r0, #10
 8011f7e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011ffc <__b2d+0x9c>
 8011f82:	600b      	str	r3, [r1, #0]
 8011f84:	dc14      	bgt.n	8011fb0 <__b2d+0x50>
 8011f86:	f1c0 0e0b 	rsb	lr, r0, #11
 8011f8a:	fa24 f10e 	lsr.w	r1, r4, lr
 8011f8e:	42b7      	cmp	r7, r6
 8011f90:	ea41 030c 	orr.w	r3, r1, ip
 8011f94:	bf34      	ite	cc
 8011f96:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011f9a:	2100      	movcs	r1, #0
 8011f9c:	3015      	adds	r0, #21
 8011f9e:	fa04 f000 	lsl.w	r0, r4, r0
 8011fa2:	fa21 f10e 	lsr.w	r1, r1, lr
 8011fa6:	ea40 0201 	orr.w	r2, r0, r1
 8011faa:	ec43 2b10 	vmov	d0, r2, r3
 8011fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fb0:	42b7      	cmp	r7, r6
 8011fb2:	bf3a      	itte	cc
 8011fb4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011fb8:	f1a5 0608 	subcc.w	r6, r5, #8
 8011fbc:	2100      	movcs	r1, #0
 8011fbe:	380b      	subs	r0, #11
 8011fc0:	d017      	beq.n	8011ff2 <__b2d+0x92>
 8011fc2:	f1c0 0c20 	rsb	ip, r0, #32
 8011fc6:	fa04 f500 	lsl.w	r5, r4, r0
 8011fca:	42be      	cmp	r6, r7
 8011fcc:	fa21 f40c 	lsr.w	r4, r1, ip
 8011fd0:	ea45 0504 	orr.w	r5, r5, r4
 8011fd4:	bf8c      	ite	hi
 8011fd6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011fda:	2400      	movls	r4, #0
 8011fdc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011fe0:	fa01 f000 	lsl.w	r0, r1, r0
 8011fe4:	fa24 f40c 	lsr.w	r4, r4, ip
 8011fe8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011fec:	ea40 0204 	orr.w	r2, r0, r4
 8011ff0:	e7db      	b.n	8011faa <__b2d+0x4a>
 8011ff2:	ea44 030c 	orr.w	r3, r4, ip
 8011ff6:	460a      	mov	r2, r1
 8011ff8:	e7d7      	b.n	8011faa <__b2d+0x4a>
 8011ffa:	bf00      	nop
 8011ffc:	3ff00000 	.word	0x3ff00000

08012000 <__d2b>:
 8012000:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012004:	4689      	mov	r9, r1
 8012006:	2101      	movs	r1, #1
 8012008:	ec57 6b10 	vmov	r6, r7, d0
 801200c:	4690      	mov	r8, r2
 801200e:	f7ff fc09 	bl	8011824 <_Balloc>
 8012012:	4604      	mov	r4, r0
 8012014:	b930      	cbnz	r0, 8012024 <__d2b+0x24>
 8012016:	4602      	mov	r2, r0
 8012018:	4b25      	ldr	r3, [pc, #148]	; (80120b0 <__d2b+0xb0>)
 801201a:	4826      	ldr	r0, [pc, #152]	; (80120b4 <__d2b+0xb4>)
 801201c:	f240 310a 	movw	r1, #778	; 0x30a
 8012020:	f7fe f9a4 	bl	801036c <__assert_func>
 8012024:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012028:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801202c:	bb35      	cbnz	r5, 801207c <__d2b+0x7c>
 801202e:	2e00      	cmp	r6, #0
 8012030:	9301      	str	r3, [sp, #4]
 8012032:	d028      	beq.n	8012086 <__d2b+0x86>
 8012034:	4668      	mov	r0, sp
 8012036:	9600      	str	r6, [sp, #0]
 8012038:	f7ff fd06 	bl	8011a48 <__lo0bits>
 801203c:	9900      	ldr	r1, [sp, #0]
 801203e:	b300      	cbz	r0, 8012082 <__d2b+0x82>
 8012040:	9a01      	ldr	r2, [sp, #4]
 8012042:	f1c0 0320 	rsb	r3, r0, #32
 8012046:	fa02 f303 	lsl.w	r3, r2, r3
 801204a:	430b      	orrs	r3, r1
 801204c:	40c2      	lsrs	r2, r0
 801204e:	6163      	str	r3, [r4, #20]
 8012050:	9201      	str	r2, [sp, #4]
 8012052:	9b01      	ldr	r3, [sp, #4]
 8012054:	61a3      	str	r3, [r4, #24]
 8012056:	2b00      	cmp	r3, #0
 8012058:	bf14      	ite	ne
 801205a:	2202      	movne	r2, #2
 801205c:	2201      	moveq	r2, #1
 801205e:	6122      	str	r2, [r4, #16]
 8012060:	b1d5      	cbz	r5, 8012098 <__d2b+0x98>
 8012062:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012066:	4405      	add	r5, r0
 8012068:	f8c9 5000 	str.w	r5, [r9]
 801206c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012070:	f8c8 0000 	str.w	r0, [r8]
 8012074:	4620      	mov	r0, r4
 8012076:	b003      	add	sp, #12
 8012078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801207c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012080:	e7d5      	b.n	801202e <__d2b+0x2e>
 8012082:	6161      	str	r1, [r4, #20]
 8012084:	e7e5      	b.n	8012052 <__d2b+0x52>
 8012086:	a801      	add	r0, sp, #4
 8012088:	f7ff fcde 	bl	8011a48 <__lo0bits>
 801208c:	9b01      	ldr	r3, [sp, #4]
 801208e:	6163      	str	r3, [r4, #20]
 8012090:	2201      	movs	r2, #1
 8012092:	6122      	str	r2, [r4, #16]
 8012094:	3020      	adds	r0, #32
 8012096:	e7e3      	b.n	8012060 <__d2b+0x60>
 8012098:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801209c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80120a0:	f8c9 0000 	str.w	r0, [r9]
 80120a4:	6918      	ldr	r0, [r3, #16]
 80120a6:	f7ff fcaf 	bl	8011a08 <__hi0bits>
 80120aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80120ae:	e7df      	b.n	8012070 <__d2b+0x70>
 80120b0:	08013ff5 	.word	0x08013ff5
 80120b4:	08014080 	.word	0x08014080

080120b8 <__ratio>:
 80120b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120bc:	4688      	mov	r8, r1
 80120be:	4669      	mov	r1, sp
 80120c0:	4681      	mov	r9, r0
 80120c2:	f7ff ff4d 	bl	8011f60 <__b2d>
 80120c6:	a901      	add	r1, sp, #4
 80120c8:	4640      	mov	r0, r8
 80120ca:	ec55 4b10 	vmov	r4, r5, d0
 80120ce:	f7ff ff47 	bl	8011f60 <__b2d>
 80120d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80120d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80120da:	eba3 0c02 	sub.w	ip, r3, r2
 80120de:	e9dd 3200 	ldrd	r3, r2, [sp]
 80120e2:	1a9b      	subs	r3, r3, r2
 80120e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80120e8:	ec51 0b10 	vmov	r0, r1, d0
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	bfd6      	itet	le
 80120f0:	460a      	movle	r2, r1
 80120f2:	462a      	movgt	r2, r5
 80120f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80120f8:	468b      	mov	fp, r1
 80120fa:	462f      	mov	r7, r5
 80120fc:	bfd4      	ite	le
 80120fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012102:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012106:	4620      	mov	r0, r4
 8012108:	ee10 2a10 	vmov	r2, s0
 801210c:	465b      	mov	r3, fp
 801210e:	4639      	mov	r1, r7
 8012110:	f7ee fbc4 	bl	800089c <__aeabi_ddiv>
 8012114:	ec41 0b10 	vmov	d0, r0, r1
 8012118:	b003      	add	sp, #12
 801211a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801211e <__copybits>:
 801211e:	3901      	subs	r1, #1
 8012120:	b570      	push	{r4, r5, r6, lr}
 8012122:	1149      	asrs	r1, r1, #5
 8012124:	6914      	ldr	r4, [r2, #16]
 8012126:	3101      	adds	r1, #1
 8012128:	f102 0314 	add.w	r3, r2, #20
 801212c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012130:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012134:	1f05      	subs	r5, r0, #4
 8012136:	42a3      	cmp	r3, r4
 8012138:	d30c      	bcc.n	8012154 <__copybits+0x36>
 801213a:	1aa3      	subs	r3, r4, r2
 801213c:	3b11      	subs	r3, #17
 801213e:	f023 0303 	bic.w	r3, r3, #3
 8012142:	3211      	adds	r2, #17
 8012144:	42a2      	cmp	r2, r4
 8012146:	bf88      	it	hi
 8012148:	2300      	movhi	r3, #0
 801214a:	4418      	add	r0, r3
 801214c:	2300      	movs	r3, #0
 801214e:	4288      	cmp	r0, r1
 8012150:	d305      	bcc.n	801215e <__copybits+0x40>
 8012152:	bd70      	pop	{r4, r5, r6, pc}
 8012154:	f853 6b04 	ldr.w	r6, [r3], #4
 8012158:	f845 6f04 	str.w	r6, [r5, #4]!
 801215c:	e7eb      	b.n	8012136 <__copybits+0x18>
 801215e:	f840 3b04 	str.w	r3, [r0], #4
 8012162:	e7f4      	b.n	801214e <__copybits+0x30>

08012164 <__any_on>:
 8012164:	f100 0214 	add.w	r2, r0, #20
 8012168:	6900      	ldr	r0, [r0, #16]
 801216a:	114b      	asrs	r3, r1, #5
 801216c:	4298      	cmp	r0, r3
 801216e:	b510      	push	{r4, lr}
 8012170:	db11      	blt.n	8012196 <__any_on+0x32>
 8012172:	dd0a      	ble.n	801218a <__any_on+0x26>
 8012174:	f011 011f 	ands.w	r1, r1, #31
 8012178:	d007      	beq.n	801218a <__any_on+0x26>
 801217a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801217e:	fa24 f001 	lsr.w	r0, r4, r1
 8012182:	fa00 f101 	lsl.w	r1, r0, r1
 8012186:	428c      	cmp	r4, r1
 8012188:	d10b      	bne.n	80121a2 <__any_on+0x3e>
 801218a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801218e:	4293      	cmp	r3, r2
 8012190:	d803      	bhi.n	801219a <__any_on+0x36>
 8012192:	2000      	movs	r0, #0
 8012194:	bd10      	pop	{r4, pc}
 8012196:	4603      	mov	r3, r0
 8012198:	e7f7      	b.n	801218a <__any_on+0x26>
 801219a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801219e:	2900      	cmp	r1, #0
 80121a0:	d0f5      	beq.n	801218e <__any_on+0x2a>
 80121a2:	2001      	movs	r0, #1
 80121a4:	e7f6      	b.n	8012194 <__any_on+0x30>

080121a6 <_calloc_r>:
 80121a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80121a8:	fba1 2402 	umull	r2, r4, r1, r2
 80121ac:	b94c      	cbnz	r4, 80121c2 <_calloc_r+0x1c>
 80121ae:	4611      	mov	r1, r2
 80121b0:	9201      	str	r2, [sp, #4]
 80121b2:	f7fc fa85 	bl	800e6c0 <_malloc_r>
 80121b6:	9a01      	ldr	r2, [sp, #4]
 80121b8:	4605      	mov	r5, r0
 80121ba:	b930      	cbnz	r0, 80121ca <_calloc_r+0x24>
 80121bc:	4628      	mov	r0, r5
 80121be:	b003      	add	sp, #12
 80121c0:	bd30      	pop	{r4, r5, pc}
 80121c2:	220c      	movs	r2, #12
 80121c4:	6002      	str	r2, [r0, #0]
 80121c6:	2500      	movs	r5, #0
 80121c8:	e7f8      	b.n	80121bc <_calloc_r+0x16>
 80121ca:	4621      	mov	r1, r4
 80121cc:	f7fc fa04 	bl	800e5d8 <memset>
 80121d0:	e7f4      	b.n	80121bc <_calloc_r+0x16>

080121d2 <__ssputs_r>:
 80121d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121d6:	688e      	ldr	r6, [r1, #8]
 80121d8:	429e      	cmp	r6, r3
 80121da:	4682      	mov	sl, r0
 80121dc:	460c      	mov	r4, r1
 80121de:	4690      	mov	r8, r2
 80121e0:	461f      	mov	r7, r3
 80121e2:	d838      	bhi.n	8012256 <__ssputs_r+0x84>
 80121e4:	898a      	ldrh	r2, [r1, #12]
 80121e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80121ea:	d032      	beq.n	8012252 <__ssputs_r+0x80>
 80121ec:	6825      	ldr	r5, [r4, #0]
 80121ee:	6909      	ldr	r1, [r1, #16]
 80121f0:	eba5 0901 	sub.w	r9, r5, r1
 80121f4:	6965      	ldr	r5, [r4, #20]
 80121f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80121fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80121fe:	3301      	adds	r3, #1
 8012200:	444b      	add	r3, r9
 8012202:	106d      	asrs	r5, r5, #1
 8012204:	429d      	cmp	r5, r3
 8012206:	bf38      	it	cc
 8012208:	461d      	movcc	r5, r3
 801220a:	0553      	lsls	r3, r2, #21
 801220c:	d531      	bpl.n	8012272 <__ssputs_r+0xa0>
 801220e:	4629      	mov	r1, r5
 8012210:	f7fc fa56 	bl	800e6c0 <_malloc_r>
 8012214:	4606      	mov	r6, r0
 8012216:	b950      	cbnz	r0, 801222e <__ssputs_r+0x5c>
 8012218:	230c      	movs	r3, #12
 801221a:	f8ca 3000 	str.w	r3, [sl]
 801221e:	89a3      	ldrh	r3, [r4, #12]
 8012220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012224:	81a3      	strh	r3, [r4, #12]
 8012226:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801222a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801222e:	6921      	ldr	r1, [r4, #16]
 8012230:	464a      	mov	r2, r9
 8012232:	f7ff fadd 	bl	80117f0 <memcpy>
 8012236:	89a3      	ldrh	r3, [r4, #12]
 8012238:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801223c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012240:	81a3      	strh	r3, [r4, #12]
 8012242:	6126      	str	r6, [r4, #16]
 8012244:	6165      	str	r5, [r4, #20]
 8012246:	444e      	add	r6, r9
 8012248:	eba5 0509 	sub.w	r5, r5, r9
 801224c:	6026      	str	r6, [r4, #0]
 801224e:	60a5      	str	r5, [r4, #8]
 8012250:	463e      	mov	r6, r7
 8012252:	42be      	cmp	r6, r7
 8012254:	d900      	bls.n	8012258 <__ssputs_r+0x86>
 8012256:	463e      	mov	r6, r7
 8012258:	6820      	ldr	r0, [r4, #0]
 801225a:	4632      	mov	r2, r6
 801225c:	4641      	mov	r1, r8
 801225e:	f000 fd81 	bl	8012d64 <memmove>
 8012262:	68a3      	ldr	r3, [r4, #8]
 8012264:	1b9b      	subs	r3, r3, r6
 8012266:	60a3      	str	r3, [r4, #8]
 8012268:	6823      	ldr	r3, [r4, #0]
 801226a:	4433      	add	r3, r6
 801226c:	6023      	str	r3, [r4, #0]
 801226e:	2000      	movs	r0, #0
 8012270:	e7db      	b.n	801222a <__ssputs_r+0x58>
 8012272:	462a      	mov	r2, r5
 8012274:	f000 fd90 	bl	8012d98 <_realloc_r>
 8012278:	4606      	mov	r6, r0
 801227a:	2800      	cmp	r0, #0
 801227c:	d1e1      	bne.n	8012242 <__ssputs_r+0x70>
 801227e:	6921      	ldr	r1, [r4, #16]
 8012280:	4650      	mov	r0, sl
 8012282:	f7fc f9b1 	bl	800e5e8 <_free_r>
 8012286:	e7c7      	b.n	8012218 <__ssputs_r+0x46>

08012288 <_svfiprintf_r>:
 8012288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801228c:	4698      	mov	r8, r3
 801228e:	898b      	ldrh	r3, [r1, #12]
 8012290:	061b      	lsls	r3, r3, #24
 8012292:	b09d      	sub	sp, #116	; 0x74
 8012294:	4607      	mov	r7, r0
 8012296:	460d      	mov	r5, r1
 8012298:	4614      	mov	r4, r2
 801229a:	d50e      	bpl.n	80122ba <_svfiprintf_r+0x32>
 801229c:	690b      	ldr	r3, [r1, #16]
 801229e:	b963      	cbnz	r3, 80122ba <_svfiprintf_r+0x32>
 80122a0:	2140      	movs	r1, #64	; 0x40
 80122a2:	f7fc fa0d 	bl	800e6c0 <_malloc_r>
 80122a6:	6028      	str	r0, [r5, #0]
 80122a8:	6128      	str	r0, [r5, #16]
 80122aa:	b920      	cbnz	r0, 80122b6 <_svfiprintf_r+0x2e>
 80122ac:	230c      	movs	r3, #12
 80122ae:	603b      	str	r3, [r7, #0]
 80122b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80122b4:	e0d1      	b.n	801245a <_svfiprintf_r+0x1d2>
 80122b6:	2340      	movs	r3, #64	; 0x40
 80122b8:	616b      	str	r3, [r5, #20]
 80122ba:	2300      	movs	r3, #0
 80122bc:	9309      	str	r3, [sp, #36]	; 0x24
 80122be:	2320      	movs	r3, #32
 80122c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80122c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80122c8:	2330      	movs	r3, #48	; 0x30
 80122ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012474 <_svfiprintf_r+0x1ec>
 80122ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80122d2:	f04f 0901 	mov.w	r9, #1
 80122d6:	4623      	mov	r3, r4
 80122d8:	469a      	mov	sl, r3
 80122da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122de:	b10a      	cbz	r2, 80122e4 <_svfiprintf_r+0x5c>
 80122e0:	2a25      	cmp	r2, #37	; 0x25
 80122e2:	d1f9      	bne.n	80122d8 <_svfiprintf_r+0x50>
 80122e4:	ebba 0b04 	subs.w	fp, sl, r4
 80122e8:	d00b      	beq.n	8012302 <_svfiprintf_r+0x7a>
 80122ea:	465b      	mov	r3, fp
 80122ec:	4622      	mov	r2, r4
 80122ee:	4629      	mov	r1, r5
 80122f0:	4638      	mov	r0, r7
 80122f2:	f7ff ff6e 	bl	80121d2 <__ssputs_r>
 80122f6:	3001      	adds	r0, #1
 80122f8:	f000 80aa 	beq.w	8012450 <_svfiprintf_r+0x1c8>
 80122fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80122fe:	445a      	add	r2, fp
 8012300:	9209      	str	r2, [sp, #36]	; 0x24
 8012302:	f89a 3000 	ldrb.w	r3, [sl]
 8012306:	2b00      	cmp	r3, #0
 8012308:	f000 80a2 	beq.w	8012450 <_svfiprintf_r+0x1c8>
 801230c:	2300      	movs	r3, #0
 801230e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012312:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012316:	f10a 0a01 	add.w	sl, sl, #1
 801231a:	9304      	str	r3, [sp, #16]
 801231c:	9307      	str	r3, [sp, #28]
 801231e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012322:	931a      	str	r3, [sp, #104]	; 0x68
 8012324:	4654      	mov	r4, sl
 8012326:	2205      	movs	r2, #5
 8012328:	f814 1b01 	ldrb.w	r1, [r4], #1
 801232c:	4851      	ldr	r0, [pc, #324]	; (8012474 <_svfiprintf_r+0x1ec>)
 801232e:	f7ed ff7f 	bl	8000230 <memchr>
 8012332:	9a04      	ldr	r2, [sp, #16]
 8012334:	b9d8      	cbnz	r0, 801236e <_svfiprintf_r+0xe6>
 8012336:	06d0      	lsls	r0, r2, #27
 8012338:	bf44      	itt	mi
 801233a:	2320      	movmi	r3, #32
 801233c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012340:	0711      	lsls	r1, r2, #28
 8012342:	bf44      	itt	mi
 8012344:	232b      	movmi	r3, #43	; 0x2b
 8012346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801234a:	f89a 3000 	ldrb.w	r3, [sl]
 801234e:	2b2a      	cmp	r3, #42	; 0x2a
 8012350:	d015      	beq.n	801237e <_svfiprintf_r+0xf6>
 8012352:	9a07      	ldr	r2, [sp, #28]
 8012354:	4654      	mov	r4, sl
 8012356:	2000      	movs	r0, #0
 8012358:	f04f 0c0a 	mov.w	ip, #10
 801235c:	4621      	mov	r1, r4
 801235e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012362:	3b30      	subs	r3, #48	; 0x30
 8012364:	2b09      	cmp	r3, #9
 8012366:	d94e      	bls.n	8012406 <_svfiprintf_r+0x17e>
 8012368:	b1b0      	cbz	r0, 8012398 <_svfiprintf_r+0x110>
 801236a:	9207      	str	r2, [sp, #28]
 801236c:	e014      	b.n	8012398 <_svfiprintf_r+0x110>
 801236e:	eba0 0308 	sub.w	r3, r0, r8
 8012372:	fa09 f303 	lsl.w	r3, r9, r3
 8012376:	4313      	orrs	r3, r2
 8012378:	9304      	str	r3, [sp, #16]
 801237a:	46a2      	mov	sl, r4
 801237c:	e7d2      	b.n	8012324 <_svfiprintf_r+0x9c>
 801237e:	9b03      	ldr	r3, [sp, #12]
 8012380:	1d19      	adds	r1, r3, #4
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	9103      	str	r1, [sp, #12]
 8012386:	2b00      	cmp	r3, #0
 8012388:	bfbb      	ittet	lt
 801238a:	425b      	neglt	r3, r3
 801238c:	f042 0202 	orrlt.w	r2, r2, #2
 8012390:	9307      	strge	r3, [sp, #28]
 8012392:	9307      	strlt	r3, [sp, #28]
 8012394:	bfb8      	it	lt
 8012396:	9204      	strlt	r2, [sp, #16]
 8012398:	7823      	ldrb	r3, [r4, #0]
 801239a:	2b2e      	cmp	r3, #46	; 0x2e
 801239c:	d10c      	bne.n	80123b8 <_svfiprintf_r+0x130>
 801239e:	7863      	ldrb	r3, [r4, #1]
 80123a0:	2b2a      	cmp	r3, #42	; 0x2a
 80123a2:	d135      	bne.n	8012410 <_svfiprintf_r+0x188>
 80123a4:	9b03      	ldr	r3, [sp, #12]
 80123a6:	1d1a      	adds	r2, r3, #4
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	9203      	str	r2, [sp, #12]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	bfb8      	it	lt
 80123b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80123b4:	3402      	adds	r4, #2
 80123b6:	9305      	str	r3, [sp, #20]
 80123b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012484 <_svfiprintf_r+0x1fc>
 80123bc:	7821      	ldrb	r1, [r4, #0]
 80123be:	2203      	movs	r2, #3
 80123c0:	4650      	mov	r0, sl
 80123c2:	f7ed ff35 	bl	8000230 <memchr>
 80123c6:	b140      	cbz	r0, 80123da <_svfiprintf_r+0x152>
 80123c8:	2340      	movs	r3, #64	; 0x40
 80123ca:	eba0 000a 	sub.w	r0, r0, sl
 80123ce:	fa03 f000 	lsl.w	r0, r3, r0
 80123d2:	9b04      	ldr	r3, [sp, #16]
 80123d4:	4303      	orrs	r3, r0
 80123d6:	3401      	adds	r4, #1
 80123d8:	9304      	str	r3, [sp, #16]
 80123da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123de:	4826      	ldr	r0, [pc, #152]	; (8012478 <_svfiprintf_r+0x1f0>)
 80123e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80123e4:	2206      	movs	r2, #6
 80123e6:	f7ed ff23 	bl	8000230 <memchr>
 80123ea:	2800      	cmp	r0, #0
 80123ec:	d038      	beq.n	8012460 <_svfiprintf_r+0x1d8>
 80123ee:	4b23      	ldr	r3, [pc, #140]	; (801247c <_svfiprintf_r+0x1f4>)
 80123f0:	bb1b      	cbnz	r3, 801243a <_svfiprintf_r+0x1b2>
 80123f2:	9b03      	ldr	r3, [sp, #12]
 80123f4:	3307      	adds	r3, #7
 80123f6:	f023 0307 	bic.w	r3, r3, #7
 80123fa:	3308      	adds	r3, #8
 80123fc:	9303      	str	r3, [sp, #12]
 80123fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012400:	4433      	add	r3, r6
 8012402:	9309      	str	r3, [sp, #36]	; 0x24
 8012404:	e767      	b.n	80122d6 <_svfiprintf_r+0x4e>
 8012406:	fb0c 3202 	mla	r2, ip, r2, r3
 801240a:	460c      	mov	r4, r1
 801240c:	2001      	movs	r0, #1
 801240e:	e7a5      	b.n	801235c <_svfiprintf_r+0xd4>
 8012410:	2300      	movs	r3, #0
 8012412:	3401      	adds	r4, #1
 8012414:	9305      	str	r3, [sp, #20]
 8012416:	4619      	mov	r1, r3
 8012418:	f04f 0c0a 	mov.w	ip, #10
 801241c:	4620      	mov	r0, r4
 801241e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012422:	3a30      	subs	r2, #48	; 0x30
 8012424:	2a09      	cmp	r2, #9
 8012426:	d903      	bls.n	8012430 <_svfiprintf_r+0x1a8>
 8012428:	2b00      	cmp	r3, #0
 801242a:	d0c5      	beq.n	80123b8 <_svfiprintf_r+0x130>
 801242c:	9105      	str	r1, [sp, #20]
 801242e:	e7c3      	b.n	80123b8 <_svfiprintf_r+0x130>
 8012430:	fb0c 2101 	mla	r1, ip, r1, r2
 8012434:	4604      	mov	r4, r0
 8012436:	2301      	movs	r3, #1
 8012438:	e7f0      	b.n	801241c <_svfiprintf_r+0x194>
 801243a:	ab03      	add	r3, sp, #12
 801243c:	9300      	str	r3, [sp, #0]
 801243e:	462a      	mov	r2, r5
 8012440:	4b0f      	ldr	r3, [pc, #60]	; (8012480 <_svfiprintf_r+0x1f8>)
 8012442:	a904      	add	r1, sp, #16
 8012444:	4638      	mov	r0, r7
 8012446:	f7fc fa4f 	bl	800e8e8 <_printf_float>
 801244a:	1c42      	adds	r2, r0, #1
 801244c:	4606      	mov	r6, r0
 801244e:	d1d6      	bne.n	80123fe <_svfiprintf_r+0x176>
 8012450:	89ab      	ldrh	r3, [r5, #12]
 8012452:	065b      	lsls	r3, r3, #25
 8012454:	f53f af2c 	bmi.w	80122b0 <_svfiprintf_r+0x28>
 8012458:	9809      	ldr	r0, [sp, #36]	; 0x24
 801245a:	b01d      	add	sp, #116	; 0x74
 801245c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012460:	ab03      	add	r3, sp, #12
 8012462:	9300      	str	r3, [sp, #0]
 8012464:	462a      	mov	r2, r5
 8012466:	4b06      	ldr	r3, [pc, #24]	; (8012480 <_svfiprintf_r+0x1f8>)
 8012468:	a904      	add	r1, sp, #16
 801246a:	4638      	mov	r0, r7
 801246c:	f7fc fce0 	bl	800ee30 <_printf_i>
 8012470:	e7eb      	b.n	801244a <_svfiprintf_r+0x1c2>
 8012472:	bf00      	nop
 8012474:	080141dc 	.word	0x080141dc
 8012478:	080141e6 	.word	0x080141e6
 801247c:	0800e8e9 	.word	0x0800e8e9
 8012480:	080121d3 	.word	0x080121d3
 8012484:	080141e2 	.word	0x080141e2

08012488 <__sfputc_r>:
 8012488:	6893      	ldr	r3, [r2, #8]
 801248a:	3b01      	subs	r3, #1
 801248c:	2b00      	cmp	r3, #0
 801248e:	b410      	push	{r4}
 8012490:	6093      	str	r3, [r2, #8]
 8012492:	da08      	bge.n	80124a6 <__sfputc_r+0x1e>
 8012494:	6994      	ldr	r4, [r2, #24]
 8012496:	42a3      	cmp	r3, r4
 8012498:	db01      	blt.n	801249e <__sfputc_r+0x16>
 801249a:	290a      	cmp	r1, #10
 801249c:	d103      	bne.n	80124a6 <__sfputc_r+0x1e>
 801249e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124a2:	f000 b969 	b.w	8012778 <__swbuf_r>
 80124a6:	6813      	ldr	r3, [r2, #0]
 80124a8:	1c58      	adds	r0, r3, #1
 80124aa:	6010      	str	r0, [r2, #0]
 80124ac:	7019      	strb	r1, [r3, #0]
 80124ae:	4608      	mov	r0, r1
 80124b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124b4:	4770      	bx	lr

080124b6 <__sfputs_r>:
 80124b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124b8:	4606      	mov	r6, r0
 80124ba:	460f      	mov	r7, r1
 80124bc:	4614      	mov	r4, r2
 80124be:	18d5      	adds	r5, r2, r3
 80124c0:	42ac      	cmp	r4, r5
 80124c2:	d101      	bne.n	80124c8 <__sfputs_r+0x12>
 80124c4:	2000      	movs	r0, #0
 80124c6:	e007      	b.n	80124d8 <__sfputs_r+0x22>
 80124c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124cc:	463a      	mov	r2, r7
 80124ce:	4630      	mov	r0, r6
 80124d0:	f7ff ffda 	bl	8012488 <__sfputc_r>
 80124d4:	1c43      	adds	r3, r0, #1
 80124d6:	d1f3      	bne.n	80124c0 <__sfputs_r+0xa>
 80124d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080124dc <_vfiprintf_r>:
 80124dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124e0:	460d      	mov	r5, r1
 80124e2:	b09d      	sub	sp, #116	; 0x74
 80124e4:	4614      	mov	r4, r2
 80124e6:	4698      	mov	r8, r3
 80124e8:	4606      	mov	r6, r0
 80124ea:	b118      	cbz	r0, 80124f4 <_vfiprintf_r+0x18>
 80124ec:	6983      	ldr	r3, [r0, #24]
 80124ee:	b90b      	cbnz	r3, 80124f4 <_vfiprintf_r+0x18>
 80124f0:	f000 fb32 	bl	8012b58 <__sinit>
 80124f4:	4b89      	ldr	r3, [pc, #548]	; (801271c <_vfiprintf_r+0x240>)
 80124f6:	429d      	cmp	r5, r3
 80124f8:	d11b      	bne.n	8012532 <_vfiprintf_r+0x56>
 80124fa:	6875      	ldr	r5, [r6, #4]
 80124fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80124fe:	07d9      	lsls	r1, r3, #31
 8012500:	d405      	bmi.n	801250e <_vfiprintf_r+0x32>
 8012502:	89ab      	ldrh	r3, [r5, #12]
 8012504:	059a      	lsls	r2, r3, #22
 8012506:	d402      	bmi.n	801250e <_vfiprintf_r+0x32>
 8012508:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801250a:	f000 fbc3 	bl	8012c94 <__retarget_lock_acquire_recursive>
 801250e:	89ab      	ldrh	r3, [r5, #12]
 8012510:	071b      	lsls	r3, r3, #28
 8012512:	d501      	bpl.n	8012518 <_vfiprintf_r+0x3c>
 8012514:	692b      	ldr	r3, [r5, #16]
 8012516:	b9eb      	cbnz	r3, 8012554 <_vfiprintf_r+0x78>
 8012518:	4629      	mov	r1, r5
 801251a:	4630      	mov	r0, r6
 801251c:	f000 f98c 	bl	8012838 <__swsetup_r>
 8012520:	b1c0      	cbz	r0, 8012554 <_vfiprintf_r+0x78>
 8012522:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012524:	07dc      	lsls	r4, r3, #31
 8012526:	d50e      	bpl.n	8012546 <_vfiprintf_r+0x6a>
 8012528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801252c:	b01d      	add	sp, #116	; 0x74
 801252e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012532:	4b7b      	ldr	r3, [pc, #492]	; (8012720 <_vfiprintf_r+0x244>)
 8012534:	429d      	cmp	r5, r3
 8012536:	d101      	bne.n	801253c <_vfiprintf_r+0x60>
 8012538:	68b5      	ldr	r5, [r6, #8]
 801253a:	e7df      	b.n	80124fc <_vfiprintf_r+0x20>
 801253c:	4b79      	ldr	r3, [pc, #484]	; (8012724 <_vfiprintf_r+0x248>)
 801253e:	429d      	cmp	r5, r3
 8012540:	bf08      	it	eq
 8012542:	68f5      	ldreq	r5, [r6, #12]
 8012544:	e7da      	b.n	80124fc <_vfiprintf_r+0x20>
 8012546:	89ab      	ldrh	r3, [r5, #12]
 8012548:	0598      	lsls	r0, r3, #22
 801254a:	d4ed      	bmi.n	8012528 <_vfiprintf_r+0x4c>
 801254c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801254e:	f000 fba2 	bl	8012c96 <__retarget_lock_release_recursive>
 8012552:	e7e9      	b.n	8012528 <_vfiprintf_r+0x4c>
 8012554:	2300      	movs	r3, #0
 8012556:	9309      	str	r3, [sp, #36]	; 0x24
 8012558:	2320      	movs	r3, #32
 801255a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801255e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012562:	2330      	movs	r3, #48	; 0x30
 8012564:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012728 <_vfiprintf_r+0x24c>
 8012568:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801256c:	f04f 0901 	mov.w	r9, #1
 8012570:	4623      	mov	r3, r4
 8012572:	469a      	mov	sl, r3
 8012574:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012578:	b10a      	cbz	r2, 801257e <_vfiprintf_r+0xa2>
 801257a:	2a25      	cmp	r2, #37	; 0x25
 801257c:	d1f9      	bne.n	8012572 <_vfiprintf_r+0x96>
 801257e:	ebba 0b04 	subs.w	fp, sl, r4
 8012582:	d00b      	beq.n	801259c <_vfiprintf_r+0xc0>
 8012584:	465b      	mov	r3, fp
 8012586:	4622      	mov	r2, r4
 8012588:	4629      	mov	r1, r5
 801258a:	4630      	mov	r0, r6
 801258c:	f7ff ff93 	bl	80124b6 <__sfputs_r>
 8012590:	3001      	adds	r0, #1
 8012592:	f000 80aa 	beq.w	80126ea <_vfiprintf_r+0x20e>
 8012596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012598:	445a      	add	r2, fp
 801259a:	9209      	str	r2, [sp, #36]	; 0x24
 801259c:	f89a 3000 	ldrb.w	r3, [sl]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	f000 80a2 	beq.w	80126ea <_vfiprintf_r+0x20e>
 80125a6:	2300      	movs	r3, #0
 80125a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80125ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80125b0:	f10a 0a01 	add.w	sl, sl, #1
 80125b4:	9304      	str	r3, [sp, #16]
 80125b6:	9307      	str	r3, [sp, #28]
 80125b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80125bc:	931a      	str	r3, [sp, #104]	; 0x68
 80125be:	4654      	mov	r4, sl
 80125c0:	2205      	movs	r2, #5
 80125c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125c6:	4858      	ldr	r0, [pc, #352]	; (8012728 <_vfiprintf_r+0x24c>)
 80125c8:	f7ed fe32 	bl	8000230 <memchr>
 80125cc:	9a04      	ldr	r2, [sp, #16]
 80125ce:	b9d8      	cbnz	r0, 8012608 <_vfiprintf_r+0x12c>
 80125d0:	06d1      	lsls	r1, r2, #27
 80125d2:	bf44      	itt	mi
 80125d4:	2320      	movmi	r3, #32
 80125d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80125da:	0713      	lsls	r3, r2, #28
 80125dc:	bf44      	itt	mi
 80125de:	232b      	movmi	r3, #43	; 0x2b
 80125e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80125e4:	f89a 3000 	ldrb.w	r3, [sl]
 80125e8:	2b2a      	cmp	r3, #42	; 0x2a
 80125ea:	d015      	beq.n	8012618 <_vfiprintf_r+0x13c>
 80125ec:	9a07      	ldr	r2, [sp, #28]
 80125ee:	4654      	mov	r4, sl
 80125f0:	2000      	movs	r0, #0
 80125f2:	f04f 0c0a 	mov.w	ip, #10
 80125f6:	4621      	mov	r1, r4
 80125f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80125fc:	3b30      	subs	r3, #48	; 0x30
 80125fe:	2b09      	cmp	r3, #9
 8012600:	d94e      	bls.n	80126a0 <_vfiprintf_r+0x1c4>
 8012602:	b1b0      	cbz	r0, 8012632 <_vfiprintf_r+0x156>
 8012604:	9207      	str	r2, [sp, #28]
 8012606:	e014      	b.n	8012632 <_vfiprintf_r+0x156>
 8012608:	eba0 0308 	sub.w	r3, r0, r8
 801260c:	fa09 f303 	lsl.w	r3, r9, r3
 8012610:	4313      	orrs	r3, r2
 8012612:	9304      	str	r3, [sp, #16]
 8012614:	46a2      	mov	sl, r4
 8012616:	e7d2      	b.n	80125be <_vfiprintf_r+0xe2>
 8012618:	9b03      	ldr	r3, [sp, #12]
 801261a:	1d19      	adds	r1, r3, #4
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	9103      	str	r1, [sp, #12]
 8012620:	2b00      	cmp	r3, #0
 8012622:	bfbb      	ittet	lt
 8012624:	425b      	neglt	r3, r3
 8012626:	f042 0202 	orrlt.w	r2, r2, #2
 801262a:	9307      	strge	r3, [sp, #28]
 801262c:	9307      	strlt	r3, [sp, #28]
 801262e:	bfb8      	it	lt
 8012630:	9204      	strlt	r2, [sp, #16]
 8012632:	7823      	ldrb	r3, [r4, #0]
 8012634:	2b2e      	cmp	r3, #46	; 0x2e
 8012636:	d10c      	bne.n	8012652 <_vfiprintf_r+0x176>
 8012638:	7863      	ldrb	r3, [r4, #1]
 801263a:	2b2a      	cmp	r3, #42	; 0x2a
 801263c:	d135      	bne.n	80126aa <_vfiprintf_r+0x1ce>
 801263e:	9b03      	ldr	r3, [sp, #12]
 8012640:	1d1a      	adds	r2, r3, #4
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	9203      	str	r2, [sp, #12]
 8012646:	2b00      	cmp	r3, #0
 8012648:	bfb8      	it	lt
 801264a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801264e:	3402      	adds	r4, #2
 8012650:	9305      	str	r3, [sp, #20]
 8012652:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012738 <_vfiprintf_r+0x25c>
 8012656:	7821      	ldrb	r1, [r4, #0]
 8012658:	2203      	movs	r2, #3
 801265a:	4650      	mov	r0, sl
 801265c:	f7ed fde8 	bl	8000230 <memchr>
 8012660:	b140      	cbz	r0, 8012674 <_vfiprintf_r+0x198>
 8012662:	2340      	movs	r3, #64	; 0x40
 8012664:	eba0 000a 	sub.w	r0, r0, sl
 8012668:	fa03 f000 	lsl.w	r0, r3, r0
 801266c:	9b04      	ldr	r3, [sp, #16]
 801266e:	4303      	orrs	r3, r0
 8012670:	3401      	adds	r4, #1
 8012672:	9304      	str	r3, [sp, #16]
 8012674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012678:	482c      	ldr	r0, [pc, #176]	; (801272c <_vfiprintf_r+0x250>)
 801267a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801267e:	2206      	movs	r2, #6
 8012680:	f7ed fdd6 	bl	8000230 <memchr>
 8012684:	2800      	cmp	r0, #0
 8012686:	d03f      	beq.n	8012708 <_vfiprintf_r+0x22c>
 8012688:	4b29      	ldr	r3, [pc, #164]	; (8012730 <_vfiprintf_r+0x254>)
 801268a:	bb1b      	cbnz	r3, 80126d4 <_vfiprintf_r+0x1f8>
 801268c:	9b03      	ldr	r3, [sp, #12]
 801268e:	3307      	adds	r3, #7
 8012690:	f023 0307 	bic.w	r3, r3, #7
 8012694:	3308      	adds	r3, #8
 8012696:	9303      	str	r3, [sp, #12]
 8012698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801269a:	443b      	add	r3, r7
 801269c:	9309      	str	r3, [sp, #36]	; 0x24
 801269e:	e767      	b.n	8012570 <_vfiprintf_r+0x94>
 80126a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80126a4:	460c      	mov	r4, r1
 80126a6:	2001      	movs	r0, #1
 80126a8:	e7a5      	b.n	80125f6 <_vfiprintf_r+0x11a>
 80126aa:	2300      	movs	r3, #0
 80126ac:	3401      	adds	r4, #1
 80126ae:	9305      	str	r3, [sp, #20]
 80126b0:	4619      	mov	r1, r3
 80126b2:	f04f 0c0a 	mov.w	ip, #10
 80126b6:	4620      	mov	r0, r4
 80126b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80126bc:	3a30      	subs	r2, #48	; 0x30
 80126be:	2a09      	cmp	r2, #9
 80126c0:	d903      	bls.n	80126ca <_vfiprintf_r+0x1ee>
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d0c5      	beq.n	8012652 <_vfiprintf_r+0x176>
 80126c6:	9105      	str	r1, [sp, #20]
 80126c8:	e7c3      	b.n	8012652 <_vfiprintf_r+0x176>
 80126ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80126ce:	4604      	mov	r4, r0
 80126d0:	2301      	movs	r3, #1
 80126d2:	e7f0      	b.n	80126b6 <_vfiprintf_r+0x1da>
 80126d4:	ab03      	add	r3, sp, #12
 80126d6:	9300      	str	r3, [sp, #0]
 80126d8:	462a      	mov	r2, r5
 80126da:	4b16      	ldr	r3, [pc, #88]	; (8012734 <_vfiprintf_r+0x258>)
 80126dc:	a904      	add	r1, sp, #16
 80126de:	4630      	mov	r0, r6
 80126e0:	f7fc f902 	bl	800e8e8 <_printf_float>
 80126e4:	4607      	mov	r7, r0
 80126e6:	1c78      	adds	r0, r7, #1
 80126e8:	d1d6      	bne.n	8012698 <_vfiprintf_r+0x1bc>
 80126ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80126ec:	07d9      	lsls	r1, r3, #31
 80126ee:	d405      	bmi.n	80126fc <_vfiprintf_r+0x220>
 80126f0:	89ab      	ldrh	r3, [r5, #12]
 80126f2:	059a      	lsls	r2, r3, #22
 80126f4:	d402      	bmi.n	80126fc <_vfiprintf_r+0x220>
 80126f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80126f8:	f000 facd 	bl	8012c96 <__retarget_lock_release_recursive>
 80126fc:	89ab      	ldrh	r3, [r5, #12]
 80126fe:	065b      	lsls	r3, r3, #25
 8012700:	f53f af12 	bmi.w	8012528 <_vfiprintf_r+0x4c>
 8012704:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012706:	e711      	b.n	801252c <_vfiprintf_r+0x50>
 8012708:	ab03      	add	r3, sp, #12
 801270a:	9300      	str	r3, [sp, #0]
 801270c:	462a      	mov	r2, r5
 801270e:	4b09      	ldr	r3, [pc, #36]	; (8012734 <_vfiprintf_r+0x258>)
 8012710:	a904      	add	r1, sp, #16
 8012712:	4630      	mov	r0, r6
 8012714:	f7fc fb8c 	bl	800ee30 <_printf_i>
 8012718:	e7e4      	b.n	80126e4 <_vfiprintf_r+0x208>
 801271a:	bf00      	nop
 801271c:	08014210 	.word	0x08014210
 8012720:	08014230 	.word	0x08014230
 8012724:	080141f0 	.word	0x080141f0
 8012728:	080141dc 	.word	0x080141dc
 801272c:	080141e6 	.word	0x080141e6
 8012730:	0800e8e9 	.word	0x0800e8e9
 8012734:	080124b7 	.word	0x080124b7
 8012738:	080141e2 	.word	0x080141e2
 801273c:	00000000 	.word	0x00000000

08012740 <nan>:
 8012740:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012748 <nan+0x8>
 8012744:	4770      	bx	lr
 8012746:	bf00      	nop
 8012748:	00000000 	.word	0x00000000
 801274c:	7ff80000 	.word	0x7ff80000

08012750 <strncmp>:
 8012750:	b510      	push	{r4, lr}
 8012752:	b17a      	cbz	r2, 8012774 <strncmp+0x24>
 8012754:	4603      	mov	r3, r0
 8012756:	3901      	subs	r1, #1
 8012758:	1884      	adds	r4, r0, r2
 801275a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801275e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012762:	4290      	cmp	r0, r2
 8012764:	d101      	bne.n	801276a <strncmp+0x1a>
 8012766:	42a3      	cmp	r3, r4
 8012768:	d101      	bne.n	801276e <strncmp+0x1e>
 801276a:	1a80      	subs	r0, r0, r2
 801276c:	bd10      	pop	{r4, pc}
 801276e:	2800      	cmp	r0, #0
 8012770:	d1f3      	bne.n	801275a <strncmp+0xa>
 8012772:	e7fa      	b.n	801276a <strncmp+0x1a>
 8012774:	4610      	mov	r0, r2
 8012776:	e7f9      	b.n	801276c <strncmp+0x1c>

08012778 <__swbuf_r>:
 8012778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801277a:	460e      	mov	r6, r1
 801277c:	4614      	mov	r4, r2
 801277e:	4605      	mov	r5, r0
 8012780:	b118      	cbz	r0, 801278a <__swbuf_r+0x12>
 8012782:	6983      	ldr	r3, [r0, #24]
 8012784:	b90b      	cbnz	r3, 801278a <__swbuf_r+0x12>
 8012786:	f000 f9e7 	bl	8012b58 <__sinit>
 801278a:	4b21      	ldr	r3, [pc, #132]	; (8012810 <__swbuf_r+0x98>)
 801278c:	429c      	cmp	r4, r3
 801278e:	d12b      	bne.n	80127e8 <__swbuf_r+0x70>
 8012790:	686c      	ldr	r4, [r5, #4]
 8012792:	69a3      	ldr	r3, [r4, #24]
 8012794:	60a3      	str	r3, [r4, #8]
 8012796:	89a3      	ldrh	r3, [r4, #12]
 8012798:	071a      	lsls	r2, r3, #28
 801279a:	d52f      	bpl.n	80127fc <__swbuf_r+0x84>
 801279c:	6923      	ldr	r3, [r4, #16]
 801279e:	b36b      	cbz	r3, 80127fc <__swbuf_r+0x84>
 80127a0:	6923      	ldr	r3, [r4, #16]
 80127a2:	6820      	ldr	r0, [r4, #0]
 80127a4:	1ac0      	subs	r0, r0, r3
 80127a6:	6963      	ldr	r3, [r4, #20]
 80127a8:	b2f6      	uxtb	r6, r6
 80127aa:	4283      	cmp	r3, r0
 80127ac:	4637      	mov	r7, r6
 80127ae:	dc04      	bgt.n	80127ba <__swbuf_r+0x42>
 80127b0:	4621      	mov	r1, r4
 80127b2:	4628      	mov	r0, r5
 80127b4:	f000 f93c 	bl	8012a30 <_fflush_r>
 80127b8:	bb30      	cbnz	r0, 8012808 <__swbuf_r+0x90>
 80127ba:	68a3      	ldr	r3, [r4, #8]
 80127bc:	3b01      	subs	r3, #1
 80127be:	60a3      	str	r3, [r4, #8]
 80127c0:	6823      	ldr	r3, [r4, #0]
 80127c2:	1c5a      	adds	r2, r3, #1
 80127c4:	6022      	str	r2, [r4, #0]
 80127c6:	701e      	strb	r6, [r3, #0]
 80127c8:	6963      	ldr	r3, [r4, #20]
 80127ca:	3001      	adds	r0, #1
 80127cc:	4283      	cmp	r3, r0
 80127ce:	d004      	beq.n	80127da <__swbuf_r+0x62>
 80127d0:	89a3      	ldrh	r3, [r4, #12]
 80127d2:	07db      	lsls	r3, r3, #31
 80127d4:	d506      	bpl.n	80127e4 <__swbuf_r+0x6c>
 80127d6:	2e0a      	cmp	r6, #10
 80127d8:	d104      	bne.n	80127e4 <__swbuf_r+0x6c>
 80127da:	4621      	mov	r1, r4
 80127dc:	4628      	mov	r0, r5
 80127de:	f000 f927 	bl	8012a30 <_fflush_r>
 80127e2:	b988      	cbnz	r0, 8012808 <__swbuf_r+0x90>
 80127e4:	4638      	mov	r0, r7
 80127e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127e8:	4b0a      	ldr	r3, [pc, #40]	; (8012814 <__swbuf_r+0x9c>)
 80127ea:	429c      	cmp	r4, r3
 80127ec:	d101      	bne.n	80127f2 <__swbuf_r+0x7a>
 80127ee:	68ac      	ldr	r4, [r5, #8]
 80127f0:	e7cf      	b.n	8012792 <__swbuf_r+0x1a>
 80127f2:	4b09      	ldr	r3, [pc, #36]	; (8012818 <__swbuf_r+0xa0>)
 80127f4:	429c      	cmp	r4, r3
 80127f6:	bf08      	it	eq
 80127f8:	68ec      	ldreq	r4, [r5, #12]
 80127fa:	e7ca      	b.n	8012792 <__swbuf_r+0x1a>
 80127fc:	4621      	mov	r1, r4
 80127fe:	4628      	mov	r0, r5
 8012800:	f000 f81a 	bl	8012838 <__swsetup_r>
 8012804:	2800      	cmp	r0, #0
 8012806:	d0cb      	beq.n	80127a0 <__swbuf_r+0x28>
 8012808:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801280c:	e7ea      	b.n	80127e4 <__swbuf_r+0x6c>
 801280e:	bf00      	nop
 8012810:	08014210 	.word	0x08014210
 8012814:	08014230 	.word	0x08014230
 8012818:	080141f0 	.word	0x080141f0

0801281c <__ascii_wctomb>:
 801281c:	b149      	cbz	r1, 8012832 <__ascii_wctomb+0x16>
 801281e:	2aff      	cmp	r2, #255	; 0xff
 8012820:	bf85      	ittet	hi
 8012822:	238a      	movhi	r3, #138	; 0x8a
 8012824:	6003      	strhi	r3, [r0, #0]
 8012826:	700a      	strbls	r2, [r1, #0]
 8012828:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801282c:	bf98      	it	ls
 801282e:	2001      	movls	r0, #1
 8012830:	4770      	bx	lr
 8012832:	4608      	mov	r0, r1
 8012834:	4770      	bx	lr
	...

08012838 <__swsetup_r>:
 8012838:	4b32      	ldr	r3, [pc, #200]	; (8012904 <__swsetup_r+0xcc>)
 801283a:	b570      	push	{r4, r5, r6, lr}
 801283c:	681d      	ldr	r5, [r3, #0]
 801283e:	4606      	mov	r6, r0
 8012840:	460c      	mov	r4, r1
 8012842:	b125      	cbz	r5, 801284e <__swsetup_r+0x16>
 8012844:	69ab      	ldr	r3, [r5, #24]
 8012846:	b913      	cbnz	r3, 801284e <__swsetup_r+0x16>
 8012848:	4628      	mov	r0, r5
 801284a:	f000 f985 	bl	8012b58 <__sinit>
 801284e:	4b2e      	ldr	r3, [pc, #184]	; (8012908 <__swsetup_r+0xd0>)
 8012850:	429c      	cmp	r4, r3
 8012852:	d10f      	bne.n	8012874 <__swsetup_r+0x3c>
 8012854:	686c      	ldr	r4, [r5, #4]
 8012856:	89a3      	ldrh	r3, [r4, #12]
 8012858:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801285c:	0719      	lsls	r1, r3, #28
 801285e:	d42c      	bmi.n	80128ba <__swsetup_r+0x82>
 8012860:	06dd      	lsls	r5, r3, #27
 8012862:	d411      	bmi.n	8012888 <__swsetup_r+0x50>
 8012864:	2309      	movs	r3, #9
 8012866:	6033      	str	r3, [r6, #0]
 8012868:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801286c:	81a3      	strh	r3, [r4, #12]
 801286e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012872:	e03e      	b.n	80128f2 <__swsetup_r+0xba>
 8012874:	4b25      	ldr	r3, [pc, #148]	; (801290c <__swsetup_r+0xd4>)
 8012876:	429c      	cmp	r4, r3
 8012878:	d101      	bne.n	801287e <__swsetup_r+0x46>
 801287a:	68ac      	ldr	r4, [r5, #8]
 801287c:	e7eb      	b.n	8012856 <__swsetup_r+0x1e>
 801287e:	4b24      	ldr	r3, [pc, #144]	; (8012910 <__swsetup_r+0xd8>)
 8012880:	429c      	cmp	r4, r3
 8012882:	bf08      	it	eq
 8012884:	68ec      	ldreq	r4, [r5, #12]
 8012886:	e7e6      	b.n	8012856 <__swsetup_r+0x1e>
 8012888:	0758      	lsls	r0, r3, #29
 801288a:	d512      	bpl.n	80128b2 <__swsetup_r+0x7a>
 801288c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801288e:	b141      	cbz	r1, 80128a2 <__swsetup_r+0x6a>
 8012890:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012894:	4299      	cmp	r1, r3
 8012896:	d002      	beq.n	801289e <__swsetup_r+0x66>
 8012898:	4630      	mov	r0, r6
 801289a:	f7fb fea5 	bl	800e5e8 <_free_r>
 801289e:	2300      	movs	r3, #0
 80128a0:	6363      	str	r3, [r4, #52]	; 0x34
 80128a2:	89a3      	ldrh	r3, [r4, #12]
 80128a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80128a8:	81a3      	strh	r3, [r4, #12]
 80128aa:	2300      	movs	r3, #0
 80128ac:	6063      	str	r3, [r4, #4]
 80128ae:	6923      	ldr	r3, [r4, #16]
 80128b0:	6023      	str	r3, [r4, #0]
 80128b2:	89a3      	ldrh	r3, [r4, #12]
 80128b4:	f043 0308 	orr.w	r3, r3, #8
 80128b8:	81a3      	strh	r3, [r4, #12]
 80128ba:	6923      	ldr	r3, [r4, #16]
 80128bc:	b94b      	cbnz	r3, 80128d2 <__swsetup_r+0x9a>
 80128be:	89a3      	ldrh	r3, [r4, #12]
 80128c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80128c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80128c8:	d003      	beq.n	80128d2 <__swsetup_r+0x9a>
 80128ca:	4621      	mov	r1, r4
 80128cc:	4630      	mov	r0, r6
 80128ce:	f000 fa09 	bl	8012ce4 <__smakebuf_r>
 80128d2:	89a0      	ldrh	r0, [r4, #12]
 80128d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80128d8:	f010 0301 	ands.w	r3, r0, #1
 80128dc:	d00a      	beq.n	80128f4 <__swsetup_r+0xbc>
 80128de:	2300      	movs	r3, #0
 80128e0:	60a3      	str	r3, [r4, #8]
 80128e2:	6963      	ldr	r3, [r4, #20]
 80128e4:	425b      	negs	r3, r3
 80128e6:	61a3      	str	r3, [r4, #24]
 80128e8:	6923      	ldr	r3, [r4, #16]
 80128ea:	b943      	cbnz	r3, 80128fe <__swsetup_r+0xc6>
 80128ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80128f0:	d1ba      	bne.n	8012868 <__swsetup_r+0x30>
 80128f2:	bd70      	pop	{r4, r5, r6, pc}
 80128f4:	0781      	lsls	r1, r0, #30
 80128f6:	bf58      	it	pl
 80128f8:	6963      	ldrpl	r3, [r4, #20]
 80128fa:	60a3      	str	r3, [r4, #8]
 80128fc:	e7f4      	b.n	80128e8 <__swsetup_r+0xb0>
 80128fe:	2000      	movs	r0, #0
 8012900:	e7f7      	b.n	80128f2 <__swsetup_r+0xba>
 8012902:	bf00      	nop
 8012904:	20000288 	.word	0x20000288
 8012908:	08014210 	.word	0x08014210
 801290c:	08014230 	.word	0x08014230
 8012910:	080141f0 	.word	0x080141f0

08012914 <abort>:
 8012914:	b508      	push	{r3, lr}
 8012916:	2006      	movs	r0, #6
 8012918:	f000 fa96 	bl	8012e48 <raise>
 801291c:	2001      	movs	r0, #1
 801291e:	f7f1 fc8d 	bl	800423c <_exit>
	...

08012924 <__sflush_r>:
 8012924:	898a      	ldrh	r2, [r1, #12]
 8012926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801292a:	4605      	mov	r5, r0
 801292c:	0710      	lsls	r0, r2, #28
 801292e:	460c      	mov	r4, r1
 8012930:	d458      	bmi.n	80129e4 <__sflush_r+0xc0>
 8012932:	684b      	ldr	r3, [r1, #4]
 8012934:	2b00      	cmp	r3, #0
 8012936:	dc05      	bgt.n	8012944 <__sflush_r+0x20>
 8012938:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801293a:	2b00      	cmp	r3, #0
 801293c:	dc02      	bgt.n	8012944 <__sflush_r+0x20>
 801293e:	2000      	movs	r0, #0
 8012940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012944:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012946:	2e00      	cmp	r6, #0
 8012948:	d0f9      	beq.n	801293e <__sflush_r+0x1a>
 801294a:	2300      	movs	r3, #0
 801294c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012950:	682f      	ldr	r7, [r5, #0]
 8012952:	602b      	str	r3, [r5, #0]
 8012954:	d032      	beq.n	80129bc <__sflush_r+0x98>
 8012956:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012958:	89a3      	ldrh	r3, [r4, #12]
 801295a:	075a      	lsls	r2, r3, #29
 801295c:	d505      	bpl.n	801296a <__sflush_r+0x46>
 801295e:	6863      	ldr	r3, [r4, #4]
 8012960:	1ac0      	subs	r0, r0, r3
 8012962:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012964:	b10b      	cbz	r3, 801296a <__sflush_r+0x46>
 8012966:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012968:	1ac0      	subs	r0, r0, r3
 801296a:	2300      	movs	r3, #0
 801296c:	4602      	mov	r2, r0
 801296e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012970:	6a21      	ldr	r1, [r4, #32]
 8012972:	4628      	mov	r0, r5
 8012974:	47b0      	blx	r6
 8012976:	1c43      	adds	r3, r0, #1
 8012978:	89a3      	ldrh	r3, [r4, #12]
 801297a:	d106      	bne.n	801298a <__sflush_r+0x66>
 801297c:	6829      	ldr	r1, [r5, #0]
 801297e:	291d      	cmp	r1, #29
 8012980:	d82c      	bhi.n	80129dc <__sflush_r+0xb8>
 8012982:	4a2a      	ldr	r2, [pc, #168]	; (8012a2c <__sflush_r+0x108>)
 8012984:	40ca      	lsrs	r2, r1
 8012986:	07d6      	lsls	r6, r2, #31
 8012988:	d528      	bpl.n	80129dc <__sflush_r+0xb8>
 801298a:	2200      	movs	r2, #0
 801298c:	6062      	str	r2, [r4, #4]
 801298e:	04d9      	lsls	r1, r3, #19
 8012990:	6922      	ldr	r2, [r4, #16]
 8012992:	6022      	str	r2, [r4, #0]
 8012994:	d504      	bpl.n	80129a0 <__sflush_r+0x7c>
 8012996:	1c42      	adds	r2, r0, #1
 8012998:	d101      	bne.n	801299e <__sflush_r+0x7a>
 801299a:	682b      	ldr	r3, [r5, #0]
 801299c:	b903      	cbnz	r3, 80129a0 <__sflush_r+0x7c>
 801299e:	6560      	str	r0, [r4, #84]	; 0x54
 80129a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80129a2:	602f      	str	r7, [r5, #0]
 80129a4:	2900      	cmp	r1, #0
 80129a6:	d0ca      	beq.n	801293e <__sflush_r+0x1a>
 80129a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80129ac:	4299      	cmp	r1, r3
 80129ae:	d002      	beq.n	80129b6 <__sflush_r+0x92>
 80129b0:	4628      	mov	r0, r5
 80129b2:	f7fb fe19 	bl	800e5e8 <_free_r>
 80129b6:	2000      	movs	r0, #0
 80129b8:	6360      	str	r0, [r4, #52]	; 0x34
 80129ba:	e7c1      	b.n	8012940 <__sflush_r+0x1c>
 80129bc:	6a21      	ldr	r1, [r4, #32]
 80129be:	2301      	movs	r3, #1
 80129c0:	4628      	mov	r0, r5
 80129c2:	47b0      	blx	r6
 80129c4:	1c41      	adds	r1, r0, #1
 80129c6:	d1c7      	bne.n	8012958 <__sflush_r+0x34>
 80129c8:	682b      	ldr	r3, [r5, #0]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d0c4      	beq.n	8012958 <__sflush_r+0x34>
 80129ce:	2b1d      	cmp	r3, #29
 80129d0:	d001      	beq.n	80129d6 <__sflush_r+0xb2>
 80129d2:	2b16      	cmp	r3, #22
 80129d4:	d101      	bne.n	80129da <__sflush_r+0xb6>
 80129d6:	602f      	str	r7, [r5, #0]
 80129d8:	e7b1      	b.n	801293e <__sflush_r+0x1a>
 80129da:	89a3      	ldrh	r3, [r4, #12]
 80129dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80129e0:	81a3      	strh	r3, [r4, #12]
 80129e2:	e7ad      	b.n	8012940 <__sflush_r+0x1c>
 80129e4:	690f      	ldr	r7, [r1, #16]
 80129e6:	2f00      	cmp	r7, #0
 80129e8:	d0a9      	beq.n	801293e <__sflush_r+0x1a>
 80129ea:	0793      	lsls	r3, r2, #30
 80129ec:	680e      	ldr	r6, [r1, #0]
 80129ee:	bf08      	it	eq
 80129f0:	694b      	ldreq	r3, [r1, #20]
 80129f2:	600f      	str	r7, [r1, #0]
 80129f4:	bf18      	it	ne
 80129f6:	2300      	movne	r3, #0
 80129f8:	eba6 0807 	sub.w	r8, r6, r7
 80129fc:	608b      	str	r3, [r1, #8]
 80129fe:	f1b8 0f00 	cmp.w	r8, #0
 8012a02:	dd9c      	ble.n	801293e <__sflush_r+0x1a>
 8012a04:	6a21      	ldr	r1, [r4, #32]
 8012a06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012a08:	4643      	mov	r3, r8
 8012a0a:	463a      	mov	r2, r7
 8012a0c:	4628      	mov	r0, r5
 8012a0e:	47b0      	blx	r6
 8012a10:	2800      	cmp	r0, #0
 8012a12:	dc06      	bgt.n	8012a22 <__sflush_r+0xfe>
 8012a14:	89a3      	ldrh	r3, [r4, #12]
 8012a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a1a:	81a3      	strh	r3, [r4, #12]
 8012a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a20:	e78e      	b.n	8012940 <__sflush_r+0x1c>
 8012a22:	4407      	add	r7, r0
 8012a24:	eba8 0800 	sub.w	r8, r8, r0
 8012a28:	e7e9      	b.n	80129fe <__sflush_r+0xda>
 8012a2a:	bf00      	nop
 8012a2c:	20400001 	.word	0x20400001

08012a30 <_fflush_r>:
 8012a30:	b538      	push	{r3, r4, r5, lr}
 8012a32:	690b      	ldr	r3, [r1, #16]
 8012a34:	4605      	mov	r5, r0
 8012a36:	460c      	mov	r4, r1
 8012a38:	b913      	cbnz	r3, 8012a40 <_fflush_r+0x10>
 8012a3a:	2500      	movs	r5, #0
 8012a3c:	4628      	mov	r0, r5
 8012a3e:	bd38      	pop	{r3, r4, r5, pc}
 8012a40:	b118      	cbz	r0, 8012a4a <_fflush_r+0x1a>
 8012a42:	6983      	ldr	r3, [r0, #24]
 8012a44:	b90b      	cbnz	r3, 8012a4a <_fflush_r+0x1a>
 8012a46:	f000 f887 	bl	8012b58 <__sinit>
 8012a4a:	4b14      	ldr	r3, [pc, #80]	; (8012a9c <_fflush_r+0x6c>)
 8012a4c:	429c      	cmp	r4, r3
 8012a4e:	d11b      	bne.n	8012a88 <_fflush_r+0x58>
 8012a50:	686c      	ldr	r4, [r5, #4]
 8012a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d0ef      	beq.n	8012a3a <_fflush_r+0xa>
 8012a5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012a5c:	07d0      	lsls	r0, r2, #31
 8012a5e:	d404      	bmi.n	8012a6a <_fflush_r+0x3a>
 8012a60:	0599      	lsls	r1, r3, #22
 8012a62:	d402      	bmi.n	8012a6a <_fflush_r+0x3a>
 8012a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a66:	f000 f915 	bl	8012c94 <__retarget_lock_acquire_recursive>
 8012a6a:	4628      	mov	r0, r5
 8012a6c:	4621      	mov	r1, r4
 8012a6e:	f7ff ff59 	bl	8012924 <__sflush_r>
 8012a72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a74:	07da      	lsls	r2, r3, #31
 8012a76:	4605      	mov	r5, r0
 8012a78:	d4e0      	bmi.n	8012a3c <_fflush_r+0xc>
 8012a7a:	89a3      	ldrh	r3, [r4, #12]
 8012a7c:	059b      	lsls	r3, r3, #22
 8012a7e:	d4dd      	bmi.n	8012a3c <_fflush_r+0xc>
 8012a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a82:	f000 f908 	bl	8012c96 <__retarget_lock_release_recursive>
 8012a86:	e7d9      	b.n	8012a3c <_fflush_r+0xc>
 8012a88:	4b05      	ldr	r3, [pc, #20]	; (8012aa0 <_fflush_r+0x70>)
 8012a8a:	429c      	cmp	r4, r3
 8012a8c:	d101      	bne.n	8012a92 <_fflush_r+0x62>
 8012a8e:	68ac      	ldr	r4, [r5, #8]
 8012a90:	e7df      	b.n	8012a52 <_fflush_r+0x22>
 8012a92:	4b04      	ldr	r3, [pc, #16]	; (8012aa4 <_fflush_r+0x74>)
 8012a94:	429c      	cmp	r4, r3
 8012a96:	bf08      	it	eq
 8012a98:	68ec      	ldreq	r4, [r5, #12]
 8012a9a:	e7da      	b.n	8012a52 <_fflush_r+0x22>
 8012a9c:	08014210 	.word	0x08014210
 8012aa0:	08014230 	.word	0x08014230
 8012aa4:	080141f0 	.word	0x080141f0

08012aa8 <std>:
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	b510      	push	{r4, lr}
 8012aac:	4604      	mov	r4, r0
 8012aae:	e9c0 3300 	strd	r3, r3, [r0]
 8012ab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012ab6:	6083      	str	r3, [r0, #8]
 8012ab8:	8181      	strh	r1, [r0, #12]
 8012aba:	6643      	str	r3, [r0, #100]	; 0x64
 8012abc:	81c2      	strh	r2, [r0, #14]
 8012abe:	6183      	str	r3, [r0, #24]
 8012ac0:	4619      	mov	r1, r3
 8012ac2:	2208      	movs	r2, #8
 8012ac4:	305c      	adds	r0, #92	; 0x5c
 8012ac6:	f7fb fd87 	bl	800e5d8 <memset>
 8012aca:	4b05      	ldr	r3, [pc, #20]	; (8012ae0 <std+0x38>)
 8012acc:	6263      	str	r3, [r4, #36]	; 0x24
 8012ace:	4b05      	ldr	r3, [pc, #20]	; (8012ae4 <std+0x3c>)
 8012ad0:	62a3      	str	r3, [r4, #40]	; 0x28
 8012ad2:	4b05      	ldr	r3, [pc, #20]	; (8012ae8 <std+0x40>)
 8012ad4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012ad6:	4b05      	ldr	r3, [pc, #20]	; (8012aec <std+0x44>)
 8012ad8:	6224      	str	r4, [r4, #32]
 8012ada:	6323      	str	r3, [r4, #48]	; 0x30
 8012adc:	bd10      	pop	{r4, pc}
 8012ade:	bf00      	nop
 8012ae0:	08012e81 	.word	0x08012e81
 8012ae4:	08012ea3 	.word	0x08012ea3
 8012ae8:	08012edb 	.word	0x08012edb
 8012aec:	08012eff 	.word	0x08012eff

08012af0 <_cleanup_r>:
 8012af0:	4901      	ldr	r1, [pc, #4]	; (8012af8 <_cleanup_r+0x8>)
 8012af2:	f000 b8af 	b.w	8012c54 <_fwalk_reent>
 8012af6:	bf00      	nop
 8012af8:	08012a31 	.word	0x08012a31

08012afc <__sfmoreglue>:
 8012afc:	b570      	push	{r4, r5, r6, lr}
 8012afe:	2268      	movs	r2, #104	; 0x68
 8012b00:	1e4d      	subs	r5, r1, #1
 8012b02:	4355      	muls	r5, r2
 8012b04:	460e      	mov	r6, r1
 8012b06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012b0a:	f7fb fdd9 	bl	800e6c0 <_malloc_r>
 8012b0e:	4604      	mov	r4, r0
 8012b10:	b140      	cbz	r0, 8012b24 <__sfmoreglue+0x28>
 8012b12:	2100      	movs	r1, #0
 8012b14:	e9c0 1600 	strd	r1, r6, [r0]
 8012b18:	300c      	adds	r0, #12
 8012b1a:	60a0      	str	r0, [r4, #8]
 8012b1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012b20:	f7fb fd5a 	bl	800e5d8 <memset>
 8012b24:	4620      	mov	r0, r4
 8012b26:	bd70      	pop	{r4, r5, r6, pc}

08012b28 <__sfp_lock_acquire>:
 8012b28:	4801      	ldr	r0, [pc, #4]	; (8012b30 <__sfp_lock_acquire+0x8>)
 8012b2a:	f000 b8b3 	b.w	8012c94 <__retarget_lock_acquire_recursive>
 8012b2e:	bf00      	nop
 8012b30:	20012f0d 	.word	0x20012f0d

08012b34 <__sfp_lock_release>:
 8012b34:	4801      	ldr	r0, [pc, #4]	; (8012b3c <__sfp_lock_release+0x8>)
 8012b36:	f000 b8ae 	b.w	8012c96 <__retarget_lock_release_recursive>
 8012b3a:	bf00      	nop
 8012b3c:	20012f0d 	.word	0x20012f0d

08012b40 <__sinit_lock_acquire>:
 8012b40:	4801      	ldr	r0, [pc, #4]	; (8012b48 <__sinit_lock_acquire+0x8>)
 8012b42:	f000 b8a7 	b.w	8012c94 <__retarget_lock_acquire_recursive>
 8012b46:	bf00      	nop
 8012b48:	20012f0e 	.word	0x20012f0e

08012b4c <__sinit_lock_release>:
 8012b4c:	4801      	ldr	r0, [pc, #4]	; (8012b54 <__sinit_lock_release+0x8>)
 8012b4e:	f000 b8a2 	b.w	8012c96 <__retarget_lock_release_recursive>
 8012b52:	bf00      	nop
 8012b54:	20012f0e 	.word	0x20012f0e

08012b58 <__sinit>:
 8012b58:	b510      	push	{r4, lr}
 8012b5a:	4604      	mov	r4, r0
 8012b5c:	f7ff fff0 	bl	8012b40 <__sinit_lock_acquire>
 8012b60:	69a3      	ldr	r3, [r4, #24]
 8012b62:	b11b      	cbz	r3, 8012b6c <__sinit+0x14>
 8012b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b68:	f7ff bff0 	b.w	8012b4c <__sinit_lock_release>
 8012b6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012b70:	6523      	str	r3, [r4, #80]	; 0x50
 8012b72:	4b13      	ldr	r3, [pc, #76]	; (8012bc0 <__sinit+0x68>)
 8012b74:	4a13      	ldr	r2, [pc, #76]	; (8012bc4 <__sinit+0x6c>)
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	62a2      	str	r2, [r4, #40]	; 0x28
 8012b7a:	42a3      	cmp	r3, r4
 8012b7c:	bf04      	itt	eq
 8012b7e:	2301      	moveq	r3, #1
 8012b80:	61a3      	streq	r3, [r4, #24]
 8012b82:	4620      	mov	r0, r4
 8012b84:	f000 f820 	bl	8012bc8 <__sfp>
 8012b88:	6060      	str	r0, [r4, #4]
 8012b8a:	4620      	mov	r0, r4
 8012b8c:	f000 f81c 	bl	8012bc8 <__sfp>
 8012b90:	60a0      	str	r0, [r4, #8]
 8012b92:	4620      	mov	r0, r4
 8012b94:	f000 f818 	bl	8012bc8 <__sfp>
 8012b98:	2200      	movs	r2, #0
 8012b9a:	60e0      	str	r0, [r4, #12]
 8012b9c:	2104      	movs	r1, #4
 8012b9e:	6860      	ldr	r0, [r4, #4]
 8012ba0:	f7ff ff82 	bl	8012aa8 <std>
 8012ba4:	68a0      	ldr	r0, [r4, #8]
 8012ba6:	2201      	movs	r2, #1
 8012ba8:	2109      	movs	r1, #9
 8012baa:	f7ff ff7d 	bl	8012aa8 <std>
 8012bae:	68e0      	ldr	r0, [r4, #12]
 8012bb0:	2202      	movs	r2, #2
 8012bb2:	2112      	movs	r1, #18
 8012bb4:	f7ff ff78 	bl	8012aa8 <std>
 8012bb8:	2301      	movs	r3, #1
 8012bba:	61a3      	str	r3, [r4, #24]
 8012bbc:	e7d2      	b.n	8012b64 <__sinit+0xc>
 8012bbe:	bf00      	nop
 8012bc0:	08013d50 	.word	0x08013d50
 8012bc4:	08012af1 	.word	0x08012af1

08012bc8 <__sfp>:
 8012bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bca:	4607      	mov	r7, r0
 8012bcc:	f7ff ffac 	bl	8012b28 <__sfp_lock_acquire>
 8012bd0:	4b1e      	ldr	r3, [pc, #120]	; (8012c4c <__sfp+0x84>)
 8012bd2:	681e      	ldr	r6, [r3, #0]
 8012bd4:	69b3      	ldr	r3, [r6, #24]
 8012bd6:	b913      	cbnz	r3, 8012bde <__sfp+0x16>
 8012bd8:	4630      	mov	r0, r6
 8012bda:	f7ff ffbd 	bl	8012b58 <__sinit>
 8012bde:	3648      	adds	r6, #72	; 0x48
 8012be0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012be4:	3b01      	subs	r3, #1
 8012be6:	d503      	bpl.n	8012bf0 <__sfp+0x28>
 8012be8:	6833      	ldr	r3, [r6, #0]
 8012bea:	b30b      	cbz	r3, 8012c30 <__sfp+0x68>
 8012bec:	6836      	ldr	r6, [r6, #0]
 8012bee:	e7f7      	b.n	8012be0 <__sfp+0x18>
 8012bf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012bf4:	b9d5      	cbnz	r5, 8012c2c <__sfp+0x64>
 8012bf6:	4b16      	ldr	r3, [pc, #88]	; (8012c50 <__sfp+0x88>)
 8012bf8:	60e3      	str	r3, [r4, #12]
 8012bfa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012bfe:	6665      	str	r5, [r4, #100]	; 0x64
 8012c00:	f000 f847 	bl	8012c92 <__retarget_lock_init_recursive>
 8012c04:	f7ff ff96 	bl	8012b34 <__sfp_lock_release>
 8012c08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012c0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012c10:	6025      	str	r5, [r4, #0]
 8012c12:	61a5      	str	r5, [r4, #24]
 8012c14:	2208      	movs	r2, #8
 8012c16:	4629      	mov	r1, r5
 8012c18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012c1c:	f7fb fcdc 	bl	800e5d8 <memset>
 8012c20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012c24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012c28:	4620      	mov	r0, r4
 8012c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c2c:	3468      	adds	r4, #104	; 0x68
 8012c2e:	e7d9      	b.n	8012be4 <__sfp+0x1c>
 8012c30:	2104      	movs	r1, #4
 8012c32:	4638      	mov	r0, r7
 8012c34:	f7ff ff62 	bl	8012afc <__sfmoreglue>
 8012c38:	4604      	mov	r4, r0
 8012c3a:	6030      	str	r0, [r6, #0]
 8012c3c:	2800      	cmp	r0, #0
 8012c3e:	d1d5      	bne.n	8012bec <__sfp+0x24>
 8012c40:	f7ff ff78 	bl	8012b34 <__sfp_lock_release>
 8012c44:	230c      	movs	r3, #12
 8012c46:	603b      	str	r3, [r7, #0]
 8012c48:	e7ee      	b.n	8012c28 <__sfp+0x60>
 8012c4a:	bf00      	nop
 8012c4c:	08013d50 	.word	0x08013d50
 8012c50:	ffff0001 	.word	0xffff0001

08012c54 <_fwalk_reent>:
 8012c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c58:	4606      	mov	r6, r0
 8012c5a:	4688      	mov	r8, r1
 8012c5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012c60:	2700      	movs	r7, #0
 8012c62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012c66:	f1b9 0901 	subs.w	r9, r9, #1
 8012c6a:	d505      	bpl.n	8012c78 <_fwalk_reent+0x24>
 8012c6c:	6824      	ldr	r4, [r4, #0]
 8012c6e:	2c00      	cmp	r4, #0
 8012c70:	d1f7      	bne.n	8012c62 <_fwalk_reent+0xe>
 8012c72:	4638      	mov	r0, r7
 8012c74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c78:	89ab      	ldrh	r3, [r5, #12]
 8012c7a:	2b01      	cmp	r3, #1
 8012c7c:	d907      	bls.n	8012c8e <_fwalk_reent+0x3a>
 8012c7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012c82:	3301      	adds	r3, #1
 8012c84:	d003      	beq.n	8012c8e <_fwalk_reent+0x3a>
 8012c86:	4629      	mov	r1, r5
 8012c88:	4630      	mov	r0, r6
 8012c8a:	47c0      	blx	r8
 8012c8c:	4307      	orrs	r7, r0
 8012c8e:	3568      	adds	r5, #104	; 0x68
 8012c90:	e7e9      	b.n	8012c66 <_fwalk_reent+0x12>

08012c92 <__retarget_lock_init_recursive>:
 8012c92:	4770      	bx	lr

08012c94 <__retarget_lock_acquire_recursive>:
 8012c94:	4770      	bx	lr

08012c96 <__retarget_lock_release_recursive>:
 8012c96:	4770      	bx	lr

08012c98 <__swhatbuf_r>:
 8012c98:	b570      	push	{r4, r5, r6, lr}
 8012c9a:	460e      	mov	r6, r1
 8012c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ca0:	2900      	cmp	r1, #0
 8012ca2:	b096      	sub	sp, #88	; 0x58
 8012ca4:	4614      	mov	r4, r2
 8012ca6:	461d      	mov	r5, r3
 8012ca8:	da08      	bge.n	8012cbc <__swhatbuf_r+0x24>
 8012caa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012cae:	2200      	movs	r2, #0
 8012cb0:	602a      	str	r2, [r5, #0]
 8012cb2:	061a      	lsls	r2, r3, #24
 8012cb4:	d410      	bmi.n	8012cd8 <__swhatbuf_r+0x40>
 8012cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012cba:	e00e      	b.n	8012cda <__swhatbuf_r+0x42>
 8012cbc:	466a      	mov	r2, sp
 8012cbe:	f000 f945 	bl	8012f4c <_fstat_r>
 8012cc2:	2800      	cmp	r0, #0
 8012cc4:	dbf1      	blt.n	8012caa <__swhatbuf_r+0x12>
 8012cc6:	9a01      	ldr	r2, [sp, #4]
 8012cc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012ccc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012cd0:	425a      	negs	r2, r3
 8012cd2:	415a      	adcs	r2, r3
 8012cd4:	602a      	str	r2, [r5, #0]
 8012cd6:	e7ee      	b.n	8012cb6 <__swhatbuf_r+0x1e>
 8012cd8:	2340      	movs	r3, #64	; 0x40
 8012cda:	2000      	movs	r0, #0
 8012cdc:	6023      	str	r3, [r4, #0]
 8012cde:	b016      	add	sp, #88	; 0x58
 8012ce0:	bd70      	pop	{r4, r5, r6, pc}
	...

08012ce4 <__smakebuf_r>:
 8012ce4:	898b      	ldrh	r3, [r1, #12]
 8012ce6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012ce8:	079d      	lsls	r5, r3, #30
 8012cea:	4606      	mov	r6, r0
 8012cec:	460c      	mov	r4, r1
 8012cee:	d507      	bpl.n	8012d00 <__smakebuf_r+0x1c>
 8012cf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012cf4:	6023      	str	r3, [r4, #0]
 8012cf6:	6123      	str	r3, [r4, #16]
 8012cf8:	2301      	movs	r3, #1
 8012cfa:	6163      	str	r3, [r4, #20]
 8012cfc:	b002      	add	sp, #8
 8012cfe:	bd70      	pop	{r4, r5, r6, pc}
 8012d00:	ab01      	add	r3, sp, #4
 8012d02:	466a      	mov	r2, sp
 8012d04:	f7ff ffc8 	bl	8012c98 <__swhatbuf_r>
 8012d08:	9900      	ldr	r1, [sp, #0]
 8012d0a:	4605      	mov	r5, r0
 8012d0c:	4630      	mov	r0, r6
 8012d0e:	f7fb fcd7 	bl	800e6c0 <_malloc_r>
 8012d12:	b948      	cbnz	r0, 8012d28 <__smakebuf_r+0x44>
 8012d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d18:	059a      	lsls	r2, r3, #22
 8012d1a:	d4ef      	bmi.n	8012cfc <__smakebuf_r+0x18>
 8012d1c:	f023 0303 	bic.w	r3, r3, #3
 8012d20:	f043 0302 	orr.w	r3, r3, #2
 8012d24:	81a3      	strh	r3, [r4, #12]
 8012d26:	e7e3      	b.n	8012cf0 <__smakebuf_r+0xc>
 8012d28:	4b0d      	ldr	r3, [pc, #52]	; (8012d60 <__smakebuf_r+0x7c>)
 8012d2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8012d2c:	89a3      	ldrh	r3, [r4, #12]
 8012d2e:	6020      	str	r0, [r4, #0]
 8012d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d34:	81a3      	strh	r3, [r4, #12]
 8012d36:	9b00      	ldr	r3, [sp, #0]
 8012d38:	6163      	str	r3, [r4, #20]
 8012d3a:	9b01      	ldr	r3, [sp, #4]
 8012d3c:	6120      	str	r0, [r4, #16]
 8012d3e:	b15b      	cbz	r3, 8012d58 <__smakebuf_r+0x74>
 8012d40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d44:	4630      	mov	r0, r6
 8012d46:	f000 f913 	bl	8012f70 <_isatty_r>
 8012d4a:	b128      	cbz	r0, 8012d58 <__smakebuf_r+0x74>
 8012d4c:	89a3      	ldrh	r3, [r4, #12]
 8012d4e:	f023 0303 	bic.w	r3, r3, #3
 8012d52:	f043 0301 	orr.w	r3, r3, #1
 8012d56:	81a3      	strh	r3, [r4, #12]
 8012d58:	89a0      	ldrh	r0, [r4, #12]
 8012d5a:	4305      	orrs	r5, r0
 8012d5c:	81a5      	strh	r5, [r4, #12]
 8012d5e:	e7cd      	b.n	8012cfc <__smakebuf_r+0x18>
 8012d60:	08012af1 	.word	0x08012af1

08012d64 <memmove>:
 8012d64:	4288      	cmp	r0, r1
 8012d66:	b510      	push	{r4, lr}
 8012d68:	eb01 0402 	add.w	r4, r1, r2
 8012d6c:	d902      	bls.n	8012d74 <memmove+0x10>
 8012d6e:	4284      	cmp	r4, r0
 8012d70:	4623      	mov	r3, r4
 8012d72:	d807      	bhi.n	8012d84 <memmove+0x20>
 8012d74:	1e43      	subs	r3, r0, #1
 8012d76:	42a1      	cmp	r1, r4
 8012d78:	d008      	beq.n	8012d8c <memmove+0x28>
 8012d7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012d7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012d82:	e7f8      	b.n	8012d76 <memmove+0x12>
 8012d84:	4402      	add	r2, r0
 8012d86:	4601      	mov	r1, r0
 8012d88:	428a      	cmp	r2, r1
 8012d8a:	d100      	bne.n	8012d8e <memmove+0x2a>
 8012d8c:	bd10      	pop	{r4, pc}
 8012d8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012d92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012d96:	e7f7      	b.n	8012d88 <memmove+0x24>

08012d98 <_realloc_r>:
 8012d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d9c:	4680      	mov	r8, r0
 8012d9e:	4614      	mov	r4, r2
 8012da0:	460e      	mov	r6, r1
 8012da2:	b921      	cbnz	r1, 8012dae <_realloc_r+0x16>
 8012da4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012da8:	4611      	mov	r1, r2
 8012daa:	f7fb bc89 	b.w	800e6c0 <_malloc_r>
 8012dae:	b92a      	cbnz	r2, 8012dbc <_realloc_r+0x24>
 8012db0:	f7fb fc1a 	bl	800e5e8 <_free_r>
 8012db4:	4625      	mov	r5, r4
 8012db6:	4628      	mov	r0, r5
 8012db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dbc:	f000 f8fa 	bl	8012fb4 <_malloc_usable_size_r>
 8012dc0:	4284      	cmp	r4, r0
 8012dc2:	4607      	mov	r7, r0
 8012dc4:	d802      	bhi.n	8012dcc <_realloc_r+0x34>
 8012dc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012dca:	d812      	bhi.n	8012df2 <_realloc_r+0x5a>
 8012dcc:	4621      	mov	r1, r4
 8012dce:	4640      	mov	r0, r8
 8012dd0:	f7fb fc76 	bl	800e6c0 <_malloc_r>
 8012dd4:	4605      	mov	r5, r0
 8012dd6:	2800      	cmp	r0, #0
 8012dd8:	d0ed      	beq.n	8012db6 <_realloc_r+0x1e>
 8012dda:	42bc      	cmp	r4, r7
 8012ddc:	4622      	mov	r2, r4
 8012dde:	4631      	mov	r1, r6
 8012de0:	bf28      	it	cs
 8012de2:	463a      	movcs	r2, r7
 8012de4:	f7fe fd04 	bl	80117f0 <memcpy>
 8012de8:	4631      	mov	r1, r6
 8012dea:	4640      	mov	r0, r8
 8012dec:	f7fb fbfc 	bl	800e5e8 <_free_r>
 8012df0:	e7e1      	b.n	8012db6 <_realloc_r+0x1e>
 8012df2:	4635      	mov	r5, r6
 8012df4:	e7df      	b.n	8012db6 <_realloc_r+0x1e>

08012df6 <_raise_r>:
 8012df6:	291f      	cmp	r1, #31
 8012df8:	b538      	push	{r3, r4, r5, lr}
 8012dfa:	4604      	mov	r4, r0
 8012dfc:	460d      	mov	r5, r1
 8012dfe:	d904      	bls.n	8012e0a <_raise_r+0x14>
 8012e00:	2316      	movs	r3, #22
 8012e02:	6003      	str	r3, [r0, #0]
 8012e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e08:	bd38      	pop	{r3, r4, r5, pc}
 8012e0a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012e0c:	b112      	cbz	r2, 8012e14 <_raise_r+0x1e>
 8012e0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012e12:	b94b      	cbnz	r3, 8012e28 <_raise_r+0x32>
 8012e14:	4620      	mov	r0, r4
 8012e16:	f000 f831 	bl	8012e7c <_getpid_r>
 8012e1a:	462a      	mov	r2, r5
 8012e1c:	4601      	mov	r1, r0
 8012e1e:	4620      	mov	r0, r4
 8012e20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e24:	f000 b818 	b.w	8012e58 <_kill_r>
 8012e28:	2b01      	cmp	r3, #1
 8012e2a:	d00a      	beq.n	8012e42 <_raise_r+0x4c>
 8012e2c:	1c59      	adds	r1, r3, #1
 8012e2e:	d103      	bne.n	8012e38 <_raise_r+0x42>
 8012e30:	2316      	movs	r3, #22
 8012e32:	6003      	str	r3, [r0, #0]
 8012e34:	2001      	movs	r0, #1
 8012e36:	e7e7      	b.n	8012e08 <_raise_r+0x12>
 8012e38:	2400      	movs	r4, #0
 8012e3a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012e3e:	4628      	mov	r0, r5
 8012e40:	4798      	blx	r3
 8012e42:	2000      	movs	r0, #0
 8012e44:	e7e0      	b.n	8012e08 <_raise_r+0x12>
	...

08012e48 <raise>:
 8012e48:	4b02      	ldr	r3, [pc, #8]	; (8012e54 <raise+0xc>)
 8012e4a:	4601      	mov	r1, r0
 8012e4c:	6818      	ldr	r0, [r3, #0]
 8012e4e:	f7ff bfd2 	b.w	8012df6 <_raise_r>
 8012e52:	bf00      	nop
 8012e54:	20000288 	.word	0x20000288

08012e58 <_kill_r>:
 8012e58:	b538      	push	{r3, r4, r5, lr}
 8012e5a:	4d07      	ldr	r5, [pc, #28]	; (8012e78 <_kill_r+0x20>)
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	4604      	mov	r4, r0
 8012e60:	4608      	mov	r0, r1
 8012e62:	4611      	mov	r1, r2
 8012e64:	602b      	str	r3, [r5, #0]
 8012e66:	f7f1 f9e1 	bl	800422c <_kill>
 8012e6a:	1c43      	adds	r3, r0, #1
 8012e6c:	d102      	bne.n	8012e74 <_kill_r+0x1c>
 8012e6e:	682b      	ldr	r3, [r5, #0]
 8012e70:	b103      	cbz	r3, 8012e74 <_kill_r+0x1c>
 8012e72:	6023      	str	r3, [r4, #0]
 8012e74:	bd38      	pop	{r3, r4, r5, pc}
 8012e76:	bf00      	nop
 8012e78:	20012f08 	.word	0x20012f08

08012e7c <_getpid_r>:
 8012e7c:	f7f1 b9d4 	b.w	8004228 <_getpid>

08012e80 <__sread>:
 8012e80:	b510      	push	{r4, lr}
 8012e82:	460c      	mov	r4, r1
 8012e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e88:	f000 f89c 	bl	8012fc4 <_read_r>
 8012e8c:	2800      	cmp	r0, #0
 8012e8e:	bfab      	itete	ge
 8012e90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012e92:	89a3      	ldrhlt	r3, [r4, #12]
 8012e94:	181b      	addge	r3, r3, r0
 8012e96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012e9a:	bfac      	ite	ge
 8012e9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8012e9e:	81a3      	strhlt	r3, [r4, #12]
 8012ea0:	bd10      	pop	{r4, pc}

08012ea2 <__swrite>:
 8012ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ea6:	461f      	mov	r7, r3
 8012ea8:	898b      	ldrh	r3, [r1, #12]
 8012eaa:	05db      	lsls	r3, r3, #23
 8012eac:	4605      	mov	r5, r0
 8012eae:	460c      	mov	r4, r1
 8012eb0:	4616      	mov	r6, r2
 8012eb2:	d505      	bpl.n	8012ec0 <__swrite+0x1e>
 8012eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012eb8:	2302      	movs	r3, #2
 8012eba:	2200      	movs	r2, #0
 8012ebc:	f000 f868 	bl	8012f90 <_lseek_r>
 8012ec0:	89a3      	ldrh	r3, [r4, #12]
 8012ec2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ec6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012eca:	81a3      	strh	r3, [r4, #12]
 8012ecc:	4632      	mov	r2, r6
 8012ece:	463b      	mov	r3, r7
 8012ed0:	4628      	mov	r0, r5
 8012ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ed6:	f000 b817 	b.w	8012f08 <_write_r>

08012eda <__sseek>:
 8012eda:	b510      	push	{r4, lr}
 8012edc:	460c      	mov	r4, r1
 8012ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ee2:	f000 f855 	bl	8012f90 <_lseek_r>
 8012ee6:	1c43      	adds	r3, r0, #1
 8012ee8:	89a3      	ldrh	r3, [r4, #12]
 8012eea:	bf15      	itete	ne
 8012eec:	6560      	strne	r0, [r4, #84]	; 0x54
 8012eee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012ef2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012ef6:	81a3      	strheq	r3, [r4, #12]
 8012ef8:	bf18      	it	ne
 8012efa:	81a3      	strhne	r3, [r4, #12]
 8012efc:	bd10      	pop	{r4, pc}

08012efe <__sclose>:
 8012efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f02:	f000 b813 	b.w	8012f2c <_close_r>
	...

08012f08 <_write_r>:
 8012f08:	b538      	push	{r3, r4, r5, lr}
 8012f0a:	4d07      	ldr	r5, [pc, #28]	; (8012f28 <_write_r+0x20>)
 8012f0c:	4604      	mov	r4, r0
 8012f0e:	4608      	mov	r0, r1
 8012f10:	4611      	mov	r1, r2
 8012f12:	2200      	movs	r2, #0
 8012f14:	602a      	str	r2, [r5, #0]
 8012f16:	461a      	mov	r2, r3
 8012f18:	f7f1 f9a6 	bl	8004268 <_write>
 8012f1c:	1c43      	adds	r3, r0, #1
 8012f1e:	d102      	bne.n	8012f26 <_write_r+0x1e>
 8012f20:	682b      	ldr	r3, [r5, #0]
 8012f22:	b103      	cbz	r3, 8012f26 <_write_r+0x1e>
 8012f24:	6023      	str	r3, [r4, #0]
 8012f26:	bd38      	pop	{r3, r4, r5, pc}
 8012f28:	20012f08 	.word	0x20012f08

08012f2c <_close_r>:
 8012f2c:	b538      	push	{r3, r4, r5, lr}
 8012f2e:	4d06      	ldr	r5, [pc, #24]	; (8012f48 <_close_r+0x1c>)
 8012f30:	2300      	movs	r3, #0
 8012f32:	4604      	mov	r4, r0
 8012f34:	4608      	mov	r0, r1
 8012f36:	602b      	str	r3, [r5, #0]
 8012f38:	f7f1 f9a4 	bl	8004284 <_close>
 8012f3c:	1c43      	adds	r3, r0, #1
 8012f3e:	d102      	bne.n	8012f46 <_close_r+0x1a>
 8012f40:	682b      	ldr	r3, [r5, #0]
 8012f42:	b103      	cbz	r3, 8012f46 <_close_r+0x1a>
 8012f44:	6023      	str	r3, [r4, #0]
 8012f46:	bd38      	pop	{r3, r4, r5, pc}
 8012f48:	20012f08 	.word	0x20012f08

08012f4c <_fstat_r>:
 8012f4c:	b538      	push	{r3, r4, r5, lr}
 8012f4e:	4d07      	ldr	r5, [pc, #28]	; (8012f6c <_fstat_r+0x20>)
 8012f50:	2300      	movs	r3, #0
 8012f52:	4604      	mov	r4, r0
 8012f54:	4608      	mov	r0, r1
 8012f56:	4611      	mov	r1, r2
 8012f58:	602b      	str	r3, [r5, #0]
 8012f5a:	f7f1 f996 	bl	800428a <_fstat>
 8012f5e:	1c43      	adds	r3, r0, #1
 8012f60:	d102      	bne.n	8012f68 <_fstat_r+0x1c>
 8012f62:	682b      	ldr	r3, [r5, #0]
 8012f64:	b103      	cbz	r3, 8012f68 <_fstat_r+0x1c>
 8012f66:	6023      	str	r3, [r4, #0]
 8012f68:	bd38      	pop	{r3, r4, r5, pc}
 8012f6a:	bf00      	nop
 8012f6c:	20012f08 	.word	0x20012f08

08012f70 <_isatty_r>:
 8012f70:	b538      	push	{r3, r4, r5, lr}
 8012f72:	4d06      	ldr	r5, [pc, #24]	; (8012f8c <_isatty_r+0x1c>)
 8012f74:	2300      	movs	r3, #0
 8012f76:	4604      	mov	r4, r0
 8012f78:	4608      	mov	r0, r1
 8012f7a:	602b      	str	r3, [r5, #0]
 8012f7c:	f7f1 f98a 	bl	8004294 <_isatty>
 8012f80:	1c43      	adds	r3, r0, #1
 8012f82:	d102      	bne.n	8012f8a <_isatty_r+0x1a>
 8012f84:	682b      	ldr	r3, [r5, #0]
 8012f86:	b103      	cbz	r3, 8012f8a <_isatty_r+0x1a>
 8012f88:	6023      	str	r3, [r4, #0]
 8012f8a:	bd38      	pop	{r3, r4, r5, pc}
 8012f8c:	20012f08 	.word	0x20012f08

08012f90 <_lseek_r>:
 8012f90:	b538      	push	{r3, r4, r5, lr}
 8012f92:	4d07      	ldr	r5, [pc, #28]	; (8012fb0 <_lseek_r+0x20>)
 8012f94:	4604      	mov	r4, r0
 8012f96:	4608      	mov	r0, r1
 8012f98:	4611      	mov	r1, r2
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	602a      	str	r2, [r5, #0]
 8012f9e:	461a      	mov	r2, r3
 8012fa0:	f7f1 f97a 	bl	8004298 <_lseek>
 8012fa4:	1c43      	adds	r3, r0, #1
 8012fa6:	d102      	bne.n	8012fae <_lseek_r+0x1e>
 8012fa8:	682b      	ldr	r3, [r5, #0]
 8012faa:	b103      	cbz	r3, 8012fae <_lseek_r+0x1e>
 8012fac:	6023      	str	r3, [r4, #0]
 8012fae:	bd38      	pop	{r3, r4, r5, pc}
 8012fb0:	20012f08 	.word	0x20012f08

08012fb4 <_malloc_usable_size_r>:
 8012fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012fb8:	1f18      	subs	r0, r3, #4
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	bfbc      	itt	lt
 8012fbe:	580b      	ldrlt	r3, [r1, r0]
 8012fc0:	18c0      	addlt	r0, r0, r3
 8012fc2:	4770      	bx	lr

08012fc4 <_read_r>:
 8012fc4:	b538      	push	{r3, r4, r5, lr}
 8012fc6:	4d07      	ldr	r5, [pc, #28]	; (8012fe4 <_read_r+0x20>)
 8012fc8:	4604      	mov	r4, r0
 8012fca:	4608      	mov	r0, r1
 8012fcc:	4611      	mov	r1, r2
 8012fce:	2200      	movs	r2, #0
 8012fd0:	602a      	str	r2, [r5, #0]
 8012fd2:	461a      	mov	r2, r3
 8012fd4:	f7f1 f938 	bl	8004248 <_read>
 8012fd8:	1c43      	adds	r3, r0, #1
 8012fda:	d102      	bne.n	8012fe2 <_read_r+0x1e>
 8012fdc:	682b      	ldr	r3, [r5, #0]
 8012fde:	b103      	cbz	r3, 8012fe2 <_read_r+0x1e>
 8012fe0:	6023      	str	r3, [r4, #0]
 8012fe2:	bd38      	pop	{r3, r4, r5, pc}
 8012fe4:	20012f08 	.word	0x20012f08

08012fe8 <_gettimeofday>:
 8012fe8:	4b02      	ldr	r3, [pc, #8]	; (8012ff4 <_gettimeofday+0xc>)
 8012fea:	2258      	movs	r2, #88	; 0x58
 8012fec:	601a      	str	r2, [r3, #0]
 8012fee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ff2:	4770      	bx	lr
 8012ff4:	20012f08 	.word	0x20012f08

08012ff8 <_init>:
 8012ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ffa:	bf00      	nop
 8012ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ffe:	bc08      	pop	{r3}
 8013000:	469e      	mov	lr, r3
 8013002:	4770      	bx	lr

08013004 <_fini>:
 8013004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013006:	bf00      	nop
 8013008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801300a:	bc08      	pop	{r3}
 801300c:	469e      	mov	lr, r3
 801300e:	4770      	bx	lr
=======
 800ce5e:	4770      	bx	lr

0800ce60 <SystemClockConfig_Resume>:
{
 800ce60:	b508      	push	{r3, lr}
  SystemClock_Config();
 800ce62:	f7f5 f891 	bl	8001f88 <SystemClock_Config>
}
 800ce66:	bd08      	pop	{r3, pc}

0800ce68 <HAL_PCD_MspInit>:
{
 800ce68:	b510      	push	{r4, lr}
 800ce6a:	b096      	sub	sp, #88	; 0x58
 800ce6c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ce6e:	2254      	movs	r2, #84	; 0x54
 800ce70:	2100      	movs	r1, #0
 800ce72:	a801      	add	r0, sp, #4
 800ce74:	f001 fae4 	bl	800e440 <memset>
  if(pcdHandle->Instance==USB)
 800ce78:	6822      	ldr	r2, [r4, #0]
 800ce7a:	4b11      	ldr	r3, [pc, #68]	; (800cec0 <HAL_PCD_MspInit+0x58>)
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d001      	beq.n	800ce84 <HAL_PCD_MspInit+0x1c>
}
 800ce80:	b016      	add	sp, #88	; 0x58
 800ce82:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ce84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ce88:	9301      	str	r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ce8a:	a801      	add	r0, sp, #4
 800ce8c:	f7fc f85c 	bl	8008f48 <HAL_RCCEx_PeriphCLKConfig>
 800ce90:	b990      	cbnz	r0, 800ceb8 <HAL_PCD_MspInit+0x50>
    __HAL_RCC_USB_CLK_ENABLE();
 800ce92:	4b0c      	ldr	r3, [pc, #48]	; (800cec4 <HAL_PCD_MspInit+0x5c>)
 800ce94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ce96:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800ce9a:	659a      	str	r2, [r3, #88]	; 0x58
 800ce9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cea2:	9300      	str	r3, [sp, #0]
 800cea4:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800cea6:	2200      	movs	r2, #0
 800cea8:	4611      	mov	r1, r2
 800ceaa:	2014      	movs	r0, #20
 800ceac:	f7f9 f918 	bl	80060e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ceb0:	2014      	movs	r0, #20
 800ceb2:	f7f9 f94d 	bl	8006150 <HAL_NVIC_EnableIRQ>
}
 800ceb6:	e7e3      	b.n	800ce80 <HAL_PCD_MspInit+0x18>
      Error_Handler();
 800ceb8:	f7f5 f85e 	bl	8001f78 <Error_Handler>
 800cebc:	e7e9      	b.n	800ce92 <HAL_PCD_MspInit+0x2a>
 800cebe:	bf00      	nop
 800cec0:	40005c00 	.word	0x40005c00
 800cec4:	40021000 	.word	0x40021000

0800cec8 <HAL_PCD_SetupStageCallback>:
{
 800cec8:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ceca:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 800cece:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800ced2:	f7ff fa09 	bl	800c2e8 <USBD_LL_SetupStage>
}
 800ced6:	bd08      	pop	{r3, pc}

0800ced8 <HAL_PCD_DataOutStageCallback>:
{
 800ced8:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ceda:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800cede:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800cee2:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800cee6:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800ceea:	f7ff fa29 	bl	800c340 <USBD_LL_DataOutStage>
}
 800ceee:	bd08      	pop	{r3, pc}

0800cef0 <HAL_PCD_DataInStageCallback>:
{
 800cef0:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cef2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800cef6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800cefa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cefc:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800cf00:	f7ff fa5a 	bl	800c3b8 <USBD_LL_DataInStage>
}
 800cf04:	bd08      	pop	{r3, pc}

0800cf06 <HAL_PCD_SOFCallback>:
{
 800cf06:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cf08:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800cf0c:	f7ff fafa 	bl	800c504 <USBD_LL_SOF>
}
 800cf10:	bd08      	pop	{r3, pc}

0800cf12 <HAL_PCD_ResetCallback>:
{
 800cf12:	b510      	push	{r4, lr}
 800cf14:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cf16:	6883      	ldr	r3, [r0, #8]
 800cf18:	2b02      	cmp	r3, #2
 800cf1a:	d109      	bne.n	800cf30 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cf1c:	2101      	movs	r1, #1
 800cf1e:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800cf22:	f7ff fad5 	bl	800c4d0 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cf26:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800cf2a:	f7ff faa4 	bl	800c476 <USBD_LL_Reset>
}
 800cf2e:	bd10      	pop	{r4, pc}
    Error_Handler();
 800cf30:	f7f5 f822 	bl	8001f78 <Error_Handler>
 800cf34:	e7f2      	b.n	800cf1c <HAL_PCD_ResetCallback+0xa>
	...

0800cf38 <HAL_PCD_SuspendCallback>:
{
 800cf38:	b510      	push	{r4, lr}
 800cf3a:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cf3c:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800cf40:	f7ff fac9 	bl	800c4d6 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800cf44:	69a3      	ldr	r3, [r4, #24]
 800cf46:	b123      	cbz	r3, 800cf52 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf48:	4a02      	ldr	r2, [pc, #8]	; (800cf54 <HAL_PCD_SuspendCallback+0x1c>)
 800cf4a:	6913      	ldr	r3, [r2, #16]
 800cf4c:	f043 0306 	orr.w	r3, r3, #6
 800cf50:	6113      	str	r3, [r2, #16]
}
 800cf52:	bd10      	pop	{r4, pc}
 800cf54:	e000ed00 	.word	0xe000ed00

0800cf58 <HAL_PCD_ResumeCallback>:
{
 800cf58:	b510      	push	{r4, lr}
 800cf5a:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 800cf5c:	6983      	ldr	r3, [r0, #24]
 800cf5e:	b923      	cbnz	r3, 800cf6a <HAL_PCD_ResumeCallback+0x12>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cf60:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800cf64:	f7ff fac1 	bl	800c4ea <USBD_LL_Resume>
}
 800cf68:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf6a:	4a04      	ldr	r2, [pc, #16]	; (800cf7c <HAL_PCD_ResumeCallback+0x24>)
 800cf6c:	6913      	ldr	r3, [r2, #16]
 800cf6e:	f023 0306 	bic.w	r3, r3, #6
 800cf72:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800cf74:	f7ff ff74 	bl	800ce60 <SystemClockConfig_Resume>
 800cf78:	e7f2      	b.n	800cf60 <HAL_PCD_ResumeCallback+0x8>
 800cf7a:	bf00      	nop
 800cf7c:	e000ed00 	.word	0xe000ed00

0800cf80 <USBD_LL_Init>:
{
 800cf80:	b510      	push	{r4, lr}
 800cf82:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800cf84:	481e      	ldr	r0, [pc, #120]	; (800d000 <USBD_LL_Init+0x80>)
 800cf86:	f8c0 42f0 	str.w	r4, [r0, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 800cf8a:	f8c4 02c4 	str.w	r0, [r4, #708]	; 0x2c4
  hpcd_USB_FS.Instance = USB;
 800cf8e:	4b1d      	ldr	r3, [pc, #116]	; (800d004 <USBD_LL_Init+0x84>)
 800cf90:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cf92:	2308      	movs	r3, #8
 800cf94:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cf96:	2302      	movs	r3, #2
 800cf98:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cf9a:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	6143      	str	r3, [r0, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cfa0:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cfa2:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cfa4:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cfa6:	f7fa fb46 	bl	8007636 <HAL_PCD_Init>
 800cfaa:	bb30      	cbnz	r0, 800cffa <USBD_LL_Init+0x7a>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cfac:	2318      	movs	r3, #24
 800cfae:	2200      	movs	r2, #0
 800cfb0:	4611      	mov	r1, r2
 800cfb2:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800cfb6:	f7fb fa78 	bl	80084aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cfba:	2358      	movs	r3, #88	; 0x58
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	2180      	movs	r1, #128	; 0x80
 800cfc0:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800cfc4:	f7fb fa71 	bl	80084aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cfc8:	23c0      	movs	r3, #192	; 0xc0
 800cfca:	2200      	movs	r2, #0
 800cfcc:	2181      	movs	r1, #129	; 0x81
 800cfce:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800cfd2:	f7fb fa6a 	bl	80084aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cfd6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800cfda:	2200      	movs	r2, #0
 800cfdc:	2101      	movs	r1, #1
 800cfde:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800cfe2:	f7fb fa62 	bl	80084aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cfe6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cfea:	2200      	movs	r2, #0
 800cfec:	2182      	movs	r1, #130	; 0x82
 800cfee:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800cff2:	f7fb fa5a 	bl	80084aa <HAL_PCDEx_PMAConfig>
}
 800cff6:	2000      	movs	r0, #0
 800cff8:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800cffa:	f7f4 ffbd 	bl	8001f78 <Error_Handler>
 800cffe:	e7d5      	b.n	800cfac <USBD_LL_Init+0x2c>
 800d000:	200139dc 	.word	0x200139dc
 800d004:	40005c00 	.word	0x40005c00

0800d008 <USBD_LL_Start>:
{
 800d008:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800d00a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d00e:	f7fa fb84 	bl	800771a <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d012:	f7ff ff1b 	bl	800ce4c <USBD_Get_USB_Status>
}
 800d016:	bd08      	pop	{r3, pc}

0800d018 <USBD_LL_OpenEP>:
{
 800d018:	b508      	push	{r3, lr}
 800d01a:	4694      	mov	ip, r2
 800d01c:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d01e:	4663      	mov	r3, ip
 800d020:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d024:	f7fb f90a 	bl	800823c <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d028:	f7ff ff10 	bl	800ce4c <USBD_Get_USB_Status>
}
 800d02c:	bd08      	pop	{r3, pc}

0800d02e <USBD_LL_CloseEP>:
{
 800d02e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d030:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d034:	f7fb f944 	bl	80082c0 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d038:	f7ff ff08 	bl	800ce4c <USBD_Get_USB_Status>
}
 800d03c:	bd08      	pop	{r3, pc}

0800d03e <USBD_LL_StallEP>:
{
 800d03e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d040:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d044:	f7fb f9c1 	bl	80083ca <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d048:	f7ff ff00 	bl	800ce4c <USBD_Get_USB_Status>
}
 800d04c:	bd08      	pop	{r3, pc}

0800d04e <USBD_LL_ClearStallEP>:
{
 800d04e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d050:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d054:	f7fb f9ee 	bl	8008434 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d058:	f7ff fef8 	bl	800ce4c <USBD_Get_USB_Status>
}
 800d05c:	bd08      	pop	{r3, pc}

0800d05e <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d05e:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 800d062:	f011 0f80 	tst.w	r1, #128	; 0x80
 800d066:	d108      	bne.n	800d07a <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d068:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800d06c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d070:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d074:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 800d078:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d07a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800d07e:	3101      	adds	r1, #1
 800d080:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d084:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d088:	7888      	ldrb	r0, [r1, #2]
 800d08a:	4770      	bx	lr

0800d08c <USBD_LL_SetUSBAddress>:
{
 800d08c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d08e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d092:	f7fa ffe6 	bl	8008062 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d096:	f7ff fed9 	bl	800ce4c <USBD_Get_USB_Status>
}
 800d09a:	bd08      	pop	{r3, pc}

0800d09c <USBD_LL_Transmit>:
{
 800d09c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d09e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d0a2:	f7fb f96a 	bl	800837a <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0a6:	f7ff fed1 	bl	800ce4c <USBD_Get_USB_Status>
}
 800d0aa:	bd08      	pop	{r3, pc}

0800d0ac <USBD_LL_PrepareReceive>:
{
 800d0ac:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d0ae:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d0b2:	f7fb f937 	bl	8008324 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0b6:	f7ff fec9 	bl	800ce4c <USBD_Get_USB_Status>
}
 800d0ba:	bd08      	pop	{r3, pc}

0800d0bc <USBD_LL_GetRxDataSize>:
{
 800d0bc:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d0be:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d0c2:	f7fb f951 	bl	8008368 <HAL_PCD_EP_GetRxCount>
}
 800d0c6:	bd08      	pop	{r3, pc}

0800d0c8 <HAL_PCDEx_LPM_Callback>:
{
 800d0c8:	b510      	push	{r4, lr}
 800d0ca:	4604      	mov	r4, r0
  switch (msg)
 800d0cc:	b111      	cbz	r1, 800d0d4 <HAL_PCDEx_LPM_Callback+0xc>
 800d0ce:	2901      	cmp	r1, #1
 800d0d0:	d00f      	beq.n	800d0f2 <HAL_PCDEx_LPM_Callback+0x2a>
}
 800d0d2:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 800d0d4:	6983      	ldr	r3, [r0, #24]
 800d0d6:	b923      	cbnz	r3, 800d0e2 <HAL_PCDEx_LPM_Callback+0x1a>
    USBD_LL_Resume(hpcd->pData);
 800d0d8:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800d0dc:	f7ff fa05 	bl	800c4ea <USBD_LL_Resume>
    break;
 800d0e0:	e7f7      	b.n	800d0d2 <HAL_PCDEx_LPM_Callback+0xa>
      SystemClockConfig_Resume();
 800d0e2:	f7ff febd 	bl	800ce60 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d0e6:	4a09      	ldr	r2, [pc, #36]	; (800d10c <HAL_PCDEx_LPM_Callback+0x44>)
 800d0e8:	6913      	ldr	r3, [r2, #16]
 800d0ea:	f023 0306 	bic.w	r3, r3, #6
 800d0ee:	6113      	str	r3, [r2, #16]
 800d0f0:	e7f2      	b.n	800d0d8 <HAL_PCDEx_LPM_Callback+0x10>
    USBD_LL_Suspend(hpcd->pData);
 800d0f2:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800d0f6:	f7ff f9ee 	bl	800c4d6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d0fa:	69a3      	ldr	r3, [r4, #24]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d0e8      	beq.n	800d0d2 <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d100:	4a02      	ldr	r2, [pc, #8]	; (800d10c <HAL_PCDEx_LPM_Callback+0x44>)
 800d102:	6913      	ldr	r3, [r2, #16]
 800d104:	f043 0306 	orr.w	r3, r3, #6
 800d108:	6113      	str	r3, [r2, #16]
}
 800d10a:	e7e2      	b.n	800d0d2 <HAL_PCDEx_LPM_Callback+0xa>
 800d10c:	e000ed00 	.word	0xe000ed00

0800d110 <USBD_static_malloc>:
}
 800d110:	4800      	ldr	r0, [pc, #0]	; (800d114 <USBD_static_malloc+0x4>)
 800d112:	4770      	bx	lr
 800d114:	20013cd0 	.word	0x20013cd0

0800d118 <USBD_static_free>:
}
 800d118:	4770      	bx	lr
	...

0800d11c <round>:
 800d11c:	ec51 0b10 	vmov	r0, r1, d0
 800d120:	b570      	push	{r4, r5, r6, lr}
 800d122:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800d126:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800d12a:	2c13      	cmp	r4, #19
 800d12c:	ee10 2a10 	vmov	r2, s0
 800d130:	460b      	mov	r3, r1
 800d132:	dc19      	bgt.n	800d168 <round+0x4c>
 800d134:	2c00      	cmp	r4, #0
 800d136:	da09      	bge.n	800d14c <round+0x30>
 800d138:	3401      	adds	r4, #1
 800d13a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800d13e:	d103      	bne.n	800d148 <round+0x2c>
 800d140:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d144:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d148:	2200      	movs	r2, #0
 800d14a:	e028      	b.n	800d19e <round+0x82>
 800d14c:	4d15      	ldr	r5, [pc, #84]	; (800d1a4 <round+0x88>)
 800d14e:	4125      	asrs	r5, r4
 800d150:	ea01 0605 	and.w	r6, r1, r5
 800d154:	4332      	orrs	r2, r6
 800d156:	d00e      	beq.n	800d176 <round+0x5a>
 800d158:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d15c:	fa42 f404 	asr.w	r4, r2, r4
 800d160:	4423      	add	r3, r4
 800d162:	ea23 0305 	bic.w	r3, r3, r5
 800d166:	e7ef      	b.n	800d148 <round+0x2c>
 800d168:	2c33      	cmp	r4, #51	; 0x33
 800d16a:	dd07      	ble.n	800d17c <round+0x60>
 800d16c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800d170:	d101      	bne.n	800d176 <round+0x5a>
 800d172:	f7f3 f8b3 	bl	80002dc <__adddf3>
 800d176:	ec41 0b10 	vmov	d0, r0, r1
 800d17a:	bd70      	pop	{r4, r5, r6, pc}
 800d17c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800d180:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d184:	40f5      	lsrs	r5, r6
 800d186:	4228      	tst	r0, r5
 800d188:	d0f5      	beq.n	800d176 <round+0x5a>
 800d18a:	2101      	movs	r1, #1
 800d18c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800d190:	fa01 f404 	lsl.w	r4, r1, r4
 800d194:	1912      	adds	r2, r2, r4
 800d196:	bf28      	it	cs
 800d198:	185b      	addcs	r3, r3, r1
 800d19a:	ea22 0205 	bic.w	r2, r2, r5
 800d19e:	4619      	mov	r1, r3
 800d1a0:	4610      	mov	r0, r2
 800d1a2:	e7e8      	b.n	800d176 <round+0x5a>
 800d1a4:	000fffff 	.word	0x000fffff

0800d1a8 <exp>:
 800d1a8:	b538      	push	{r3, r4, r5, lr}
 800d1aa:	ed2d 8b02 	vpush	{d8}
 800d1ae:	ec55 4b10 	vmov	r4, r5, d0
 800d1b2:	f000 f8dd 	bl	800d370 <__ieee754_exp>
 800d1b6:	eeb0 8a40 	vmov.f32	s16, s0
 800d1ba:	eef0 8a60 	vmov.f32	s17, s1
 800d1be:	ec45 4b10 	vmov	d0, r4, r5
 800d1c2:	f001 f872 	bl	800e2aa <finite>
 800d1c6:	b168      	cbz	r0, 800d1e4 <exp+0x3c>
 800d1c8:	a317      	add	r3, pc, #92	; (adr r3, 800d228 <exp+0x80>)
 800d1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	4629      	mov	r1, r5
 800d1d2:	f7f3 fcc9 	bl	8000b68 <__aeabi_dcmpgt>
 800d1d6:	b160      	cbz	r0, 800d1f2 <exp+0x4a>
 800d1d8:	f001 f8f8 	bl	800e3cc <__errno>
 800d1dc:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800d218 <exp+0x70>
 800d1e0:	2322      	movs	r3, #34	; 0x22
 800d1e2:	6003      	str	r3, [r0, #0]
 800d1e4:	eeb0 0a48 	vmov.f32	s0, s16
 800d1e8:	eef0 0a68 	vmov.f32	s1, s17
 800d1ec:	ecbd 8b02 	vpop	{d8}
 800d1f0:	bd38      	pop	{r3, r4, r5, pc}
 800d1f2:	a30f      	add	r3, pc, #60	; (adr r3, 800d230 <exp+0x88>)
 800d1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f8:	4620      	mov	r0, r4
 800d1fa:	4629      	mov	r1, r5
 800d1fc:	f7f3 fc96 	bl	8000b2c <__aeabi_dcmplt>
 800d200:	2800      	cmp	r0, #0
 800d202:	d0ef      	beq.n	800d1e4 <exp+0x3c>
 800d204:	f001 f8e2 	bl	800e3cc <__errno>
 800d208:	2322      	movs	r3, #34	; 0x22
 800d20a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800d220 <exp+0x78>
 800d20e:	6003      	str	r3, [r0, #0]
 800d210:	e7e8      	b.n	800d1e4 <exp+0x3c>
 800d212:	bf00      	nop
 800d214:	f3af 8000 	nop.w
 800d218:	00000000 	.word	0x00000000
 800d21c:	7ff00000 	.word	0x7ff00000
	...
 800d228:	fefa39ef 	.word	0xfefa39ef
 800d22c:	40862e42 	.word	0x40862e42
 800d230:	d52d3051 	.word	0xd52d3051
 800d234:	c0874910 	.word	0xc0874910

0800d238 <pow>:
 800d238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d23a:	ed2d 8b02 	vpush	{d8}
 800d23e:	eeb0 8a40 	vmov.f32	s16, s0
 800d242:	eef0 8a60 	vmov.f32	s17, s1
 800d246:	ec55 4b11 	vmov	r4, r5, d1
 800d24a:	f000 fa15 	bl	800d678 <__ieee754_pow>
 800d24e:	4622      	mov	r2, r4
 800d250:	462b      	mov	r3, r5
 800d252:	4620      	mov	r0, r4
 800d254:	4629      	mov	r1, r5
 800d256:	ec57 6b10 	vmov	r6, r7, d0
 800d25a:	f7f3 fc8f 	bl	8000b7c <__aeabi_dcmpun>
 800d25e:	2800      	cmp	r0, #0
 800d260:	d13b      	bne.n	800d2da <pow+0xa2>
 800d262:	ec51 0b18 	vmov	r0, r1, d8
 800d266:	2200      	movs	r2, #0
 800d268:	2300      	movs	r3, #0
 800d26a:	f7f3 fc55 	bl	8000b18 <__aeabi_dcmpeq>
 800d26e:	b1b8      	cbz	r0, 800d2a0 <pow+0x68>
 800d270:	2200      	movs	r2, #0
 800d272:	2300      	movs	r3, #0
 800d274:	4620      	mov	r0, r4
 800d276:	4629      	mov	r1, r5
 800d278:	f7f3 fc4e 	bl	8000b18 <__aeabi_dcmpeq>
 800d27c:	2800      	cmp	r0, #0
 800d27e:	d146      	bne.n	800d30e <pow+0xd6>
 800d280:	ec45 4b10 	vmov	d0, r4, r5
 800d284:	f001 f811 	bl	800e2aa <finite>
 800d288:	b338      	cbz	r0, 800d2da <pow+0xa2>
 800d28a:	2200      	movs	r2, #0
 800d28c:	2300      	movs	r3, #0
 800d28e:	4620      	mov	r0, r4
 800d290:	4629      	mov	r1, r5
 800d292:	f7f3 fc4b 	bl	8000b2c <__aeabi_dcmplt>
 800d296:	b300      	cbz	r0, 800d2da <pow+0xa2>
 800d298:	f001 f898 	bl	800e3cc <__errno>
 800d29c:	2322      	movs	r3, #34	; 0x22
 800d29e:	e01b      	b.n	800d2d8 <pow+0xa0>
 800d2a0:	ec47 6b10 	vmov	d0, r6, r7
 800d2a4:	f001 f801 	bl	800e2aa <finite>
 800d2a8:	b9e0      	cbnz	r0, 800d2e4 <pow+0xac>
 800d2aa:	eeb0 0a48 	vmov.f32	s0, s16
 800d2ae:	eef0 0a68 	vmov.f32	s1, s17
 800d2b2:	f000 fffa 	bl	800e2aa <finite>
 800d2b6:	b1a8      	cbz	r0, 800d2e4 <pow+0xac>
 800d2b8:	ec45 4b10 	vmov	d0, r4, r5
 800d2bc:	f000 fff5 	bl	800e2aa <finite>
 800d2c0:	b180      	cbz	r0, 800d2e4 <pow+0xac>
 800d2c2:	4632      	mov	r2, r6
 800d2c4:	463b      	mov	r3, r7
 800d2c6:	4630      	mov	r0, r6
 800d2c8:	4639      	mov	r1, r7
 800d2ca:	f7f3 fc57 	bl	8000b7c <__aeabi_dcmpun>
 800d2ce:	2800      	cmp	r0, #0
 800d2d0:	d0e2      	beq.n	800d298 <pow+0x60>
 800d2d2:	f001 f87b 	bl	800e3cc <__errno>
 800d2d6:	2321      	movs	r3, #33	; 0x21
 800d2d8:	6003      	str	r3, [r0, #0]
 800d2da:	ecbd 8b02 	vpop	{d8}
 800d2de:	ec47 6b10 	vmov	d0, r6, r7
 800d2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	4630      	mov	r0, r6
 800d2ea:	4639      	mov	r1, r7
 800d2ec:	f7f3 fc14 	bl	8000b18 <__aeabi_dcmpeq>
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	d0f2      	beq.n	800d2da <pow+0xa2>
 800d2f4:	eeb0 0a48 	vmov.f32	s0, s16
 800d2f8:	eef0 0a68 	vmov.f32	s1, s17
 800d2fc:	f000 ffd5 	bl	800e2aa <finite>
 800d300:	2800      	cmp	r0, #0
 800d302:	d0ea      	beq.n	800d2da <pow+0xa2>
 800d304:	ec45 4b10 	vmov	d0, r4, r5
 800d308:	f000 ffcf 	bl	800e2aa <finite>
 800d30c:	e7c3      	b.n	800d296 <pow+0x5e>
 800d30e:	4f01      	ldr	r7, [pc, #4]	; (800d314 <pow+0xdc>)
 800d310:	2600      	movs	r6, #0
 800d312:	e7e2      	b.n	800d2da <pow+0xa2>
 800d314:	3ff00000 	.word	0x3ff00000

0800d318 <sqrt>:
 800d318:	b538      	push	{r3, r4, r5, lr}
 800d31a:	ed2d 8b02 	vpush	{d8}
 800d31e:	ec55 4b10 	vmov	r4, r5, d0
 800d322:	f000 fed7 	bl	800e0d4 <__ieee754_sqrt>
 800d326:	4622      	mov	r2, r4
 800d328:	462b      	mov	r3, r5
 800d32a:	4620      	mov	r0, r4
 800d32c:	4629      	mov	r1, r5
 800d32e:	eeb0 8a40 	vmov.f32	s16, s0
 800d332:	eef0 8a60 	vmov.f32	s17, s1
 800d336:	f7f3 fc21 	bl	8000b7c <__aeabi_dcmpun>
 800d33a:	b990      	cbnz	r0, 800d362 <sqrt+0x4a>
 800d33c:	2200      	movs	r2, #0
 800d33e:	2300      	movs	r3, #0
 800d340:	4620      	mov	r0, r4
 800d342:	4629      	mov	r1, r5
 800d344:	f7f3 fbf2 	bl	8000b2c <__aeabi_dcmplt>
 800d348:	b158      	cbz	r0, 800d362 <sqrt+0x4a>
 800d34a:	f001 f83f 	bl	800e3cc <__errno>
 800d34e:	2321      	movs	r3, #33	; 0x21
 800d350:	6003      	str	r3, [r0, #0]
 800d352:	2200      	movs	r2, #0
 800d354:	2300      	movs	r3, #0
 800d356:	4610      	mov	r0, r2
 800d358:	4619      	mov	r1, r3
 800d35a:	f7f3 fa9f 	bl	800089c <__aeabi_ddiv>
 800d35e:	ec41 0b18 	vmov	d8, r0, r1
 800d362:	eeb0 0a48 	vmov.f32	s0, s16
 800d366:	eef0 0a68 	vmov.f32	s1, s17
 800d36a:	ecbd 8b02 	vpop	{d8}
 800d36e:	bd38      	pop	{r3, r4, r5, pc}

0800d370 <__ieee754_exp>:
 800d370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d374:	ec55 4b10 	vmov	r4, r5, d0
 800d378:	49b5      	ldr	r1, [pc, #724]	; (800d650 <__ieee754_exp+0x2e0>)
 800d37a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d37e:	428b      	cmp	r3, r1
 800d380:	ed2d 8b04 	vpush	{d8-d9}
 800d384:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800d388:	d93d      	bls.n	800d406 <__ieee754_exp+0x96>
 800d38a:	49b2      	ldr	r1, [pc, #712]	; (800d654 <__ieee754_exp+0x2e4>)
 800d38c:	428b      	cmp	r3, r1
 800d38e:	d918      	bls.n	800d3c2 <__ieee754_exp+0x52>
 800d390:	ee10 3a10 	vmov	r3, s0
 800d394:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800d398:	4313      	orrs	r3, r2
 800d39a:	d009      	beq.n	800d3b0 <__ieee754_exp+0x40>
 800d39c:	ee10 2a10 	vmov	r2, s0
 800d3a0:	462b      	mov	r3, r5
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	4629      	mov	r1, r5
 800d3a6:	f7f2 ff99 	bl	80002dc <__adddf3>
 800d3aa:	4604      	mov	r4, r0
 800d3ac:	460d      	mov	r5, r1
 800d3ae:	e002      	b.n	800d3b6 <__ieee754_exp+0x46>
 800d3b0:	b10e      	cbz	r6, 800d3b6 <__ieee754_exp+0x46>
 800d3b2:	2400      	movs	r4, #0
 800d3b4:	2500      	movs	r5, #0
 800d3b6:	ecbd 8b04 	vpop	{d8-d9}
 800d3ba:	ec45 4b10 	vmov	d0, r4, r5
 800d3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3c2:	a38d      	add	r3, pc, #564	; (adr r3, 800d5f8 <__ieee754_exp+0x288>)
 800d3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c8:	ee10 0a10 	vmov	r0, s0
 800d3cc:	4629      	mov	r1, r5
 800d3ce:	f7f3 fbcb 	bl	8000b68 <__aeabi_dcmpgt>
 800d3d2:	4607      	mov	r7, r0
 800d3d4:	b130      	cbz	r0, 800d3e4 <__ieee754_exp+0x74>
 800d3d6:	ecbd 8b04 	vpop	{d8-d9}
 800d3da:	2000      	movs	r0, #0
 800d3dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3e0:	f000 bf51 	b.w	800e286 <__math_oflow>
 800d3e4:	a386      	add	r3, pc, #536	; (adr r3, 800d600 <__ieee754_exp+0x290>)
 800d3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	4629      	mov	r1, r5
 800d3ee:	f7f3 fb9d 	bl	8000b2c <__aeabi_dcmplt>
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	f000 808b 	beq.w	800d50e <__ieee754_exp+0x19e>
 800d3f8:	ecbd 8b04 	vpop	{d8-d9}
 800d3fc:	4638      	mov	r0, r7
 800d3fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d402:	f000 bf37 	b.w	800e274 <__math_uflow>
 800d406:	4a94      	ldr	r2, [pc, #592]	; (800d658 <__ieee754_exp+0x2e8>)
 800d408:	4293      	cmp	r3, r2
 800d40a:	f240 80ac 	bls.w	800d566 <__ieee754_exp+0x1f6>
 800d40e:	4a93      	ldr	r2, [pc, #588]	; (800d65c <__ieee754_exp+0x2ec>)
 800d410:	4293      	cmp	r3, r2
 800d412:	d87c      	bhi.n	800d50e <__ieee754_exp+0x19e>
 800d414:	4b92      	ldr	r3, [pc, #584]	; (800d660 <__ieee754_exp+0x2f0>)
 800d416:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d41e:	ee10 0a10 	vmov	r0, s0
 800d422:	4629      	mov	r1, r5
 800d424:	f7f2 ff58 	bl	80002d8 <__aeabi_dsub>
 800d428:	4b8e      	ldr	r3, [pc, #568]	; (800d664 <__ieee754_exp+0x2f4>)
 800d42a:	00f7      	lsls	r7, r6, #3
 800d42c:	443b      	add	r3, r7
 800d42e:	ed93 7b00 	vldr	d7, [r3]
 800d432:	f1c6 0a01 	rsb	sl, r6, #1
 800d436:	4680      	mov	r8, r0
 800d438:	4689      	mov	r9, r1
 800d43a:	ebaa 0a06 	sub.w	sl, sl, r6
 800d43e:	eeb0 8a47 	vmov.f32	s16, s14
 800d442:	eef0 8a67 	vmov.f32	s17, s15
 800d446:	ec53 2b18 	vmov	r2, r3, d8
 800d44a:	4640      	mov	r0, r8
 800d44c:	4649      	mov	r1, r9
 800d44e:	f7f2 ff43 	bl	80002d8 <__aeabi_dsub>
 800d452:	4604      	mov	r4, r0
 800d454:	460d      	mov	r5, r1
 800d456:	4622      	mov	r2, r4
 800d458:	462b      	mov	r3, r5
 800d45a:	4620      	mov	r0, r4
 800d45c:	4629      	mov	r1, r5
 800d45e:	f7f3 f8f3 	bl	8000648 <__aeabi_dmul>
 800d462:	a369      	add	r3, pc, #420	; (adr r3, 800d608 <__ieee754_exp+0x298>)
 800d464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d468:	4606      	mov	r6, r0
 800d46a:	460f      	mov	r7, r1
 800d46c:	f7f3 f8ec 	bl	8000648 <__aeabi_dmul>
 800d470:	a367      	add	r3, pc, #412	; (adr r3, 800d610 <__ieee754_exp+0x2a0>)
 800d472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d476:	f7f2 ff2f 	bl	80002d8 <__aeabi_dsub>
 800d47a:	4632      	mov	r2, r6
 800d47c:	463b      	mov	r3, r7
 800d47e:	f7f3 f8e3 	bl	8000648 <__aeabi_dmul>
 800d482:	a365      	add	r3, pc, #404	; (adr r3, 800d618 <__ieee754_exp+0x2a8>)
 800d484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d488:	f7f2 ff28 	bl	80002dc <__adddf3>
 800d48c:	4632      	mov	r2, r6
 800d48e:	463b      	mov	r3, r7
 800d490:	f7f3 f8da 	bl	8000648 <__aeabi_dmul>
 800d494:	a362      	add	r3, pc, #392	; (adr r3, 800d620 <__ieee754_exp+0x2b0>)
 800d496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49a:	f7f2 ff1d 	bl	80002d8 <__aeabi_dsub>
 800d49e:	4632      	mov	r2, r6
 800d4a0:	463b      	mov	r3, r7
 800d4a2:	f7f3 f8d1 	bl	8000648 <__aeabi_dmul>
 800d4a6:	a360      	add	r3, pc, #384	; (adr r3, 800d628 <__ieee754_exp+0x2b8>)
 800d4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ac:	f7f2 ff16 	bl	80002dc <__adddf3>
 800d4b0:	4632      	mov	r2, r6
 800d4b2:	463b      	mov	r3, r7
 800d4b4:	f7f3 f8c8 	bl	8000648 <__aeabi_dmul>
 800d4b8:	4602      	mov	r2, r0
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	4620      	mov	r0, r4
 800d4be:	4629      	mov	r1, r5
 800d4c0:	f7f2 ff0a 	bl	80002d8 <__aeabi_dsub>
 800d4c4:	4602      	mov	r2, r0
 800d4c6:	460b      	mov	r3, r1
 800d4c8:	4606      	mov	r6, r0
 800d4ca:	460f      	mov	r7, r1
 800d4cc:	4620      	mov	r0, r4
 800d4ce:	4629      	mov	r1, r5
 800d4d0:	f7f3 f8ba 	bl	8000648 <__aeabi_dmul>
 800d4d4:	ec41 0b19 	vmov	d9, r0, r1
 800d4d8:	f1ba 0f00 	cmp.w	sl, #0
 800d4dc:	d15d      	bne.n	800d59a <__ieee754_exp+0x22a>
 800d4de:	2200      	movs	r2, #0
 800d4e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d4e4:	4630      	mov	r0, r6
 800d4e6:	4639      	mov	r1, r7
 800d4e8:	f7f2 fef6 	bl	80002d8 <__aeabi_dsub>
 800d4ec:	4602      	mov	r2, r0
 800d4ee:	460b      	mov	r3, r1
 800d4f0:	ec51 0b19 	vmov	r0, r1, d9
 800d4f4:	f7f3 f9d2 	bl	800089c <__aeabi_ddiv>
 800d4f8:	4622      	mov	r2, r4
 800d4fa:	462b      	mov	r3, r5
 800d4fc:	f7f2 feec 	bl	80002d8 <__aeabi_dsub>
 800d500:	4602      	mov	r2, r0
 800d502:	460b      	mov	r3, r1
 800d504:	2000      	movs	r0, #0
 800d506:	4958      	ldr	r1, [pc, #352]	; (800d668 <__ieee754_exp+0x2f8>)
 800d508:	f7f2 fee6 	bl	80002d8 <__aeabi_dsub>
 800d50c:	e74d      	b.n	800d3aa <__ieee754_exp+0x3a>
 800d50e:	4857      	ldr	r0, [pc, #348]	; (800d66c <__ieee754_exp+0x2fc>)
 800d510:	a347      	add	r3, pc, #284	; (adr r3, 800d630 <__ieee754_exp+0x2c0>)
 800d512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d516:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800d51a:	4629      	mov	r1, r5
 800d51c:	4620      	mov	r0, r4
 800d51e:	f7f3 f893 	bl	8000648 <__aeabi_dmul>
 800d522:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d526:	f7f2 fed9 	bl	80002dc <__adddf3>
 800d52a:	f7f3 fb3d 	bl	8000ba8 <__aeabi_d2iz>
 800d52e:	4682      	mov	sl, r0
 800d530:	f7f3 f820 	bl	8000574 <__aeabi_i2d>
 800d534:	a340      	add	r3, pc, #256	; (adr r3, 800d638 <__ieee754_exp+0x2c8>)
 800d536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53a:	4606      	mov	r6, r0
 800d53c:	460f      	mov	r7, r1
 800d53e:	f7f3 f883 	bl	8000648 <__aeabi_dmul>
 800d542:	4602      	mov	r2, r0
 800d544:	460b      	mov	r3, r1
 800d546:	4620      	mov	r0, r4
 800d548:	4629      	mov	r1, r5
 800d54a:	f7f2 fec5 	bl	80002d8 <__aeabi_dsub>
 800d54e:	a33c      	add	r3, pc, #240	; (adr r3, 800d640 <__ieee754_exp+0x2d0>)
 800d550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d554:	4680      	mov	r8, r0
 800d556:	4689      	mov	r9, r1
 800d558:	4630      	mov	r0, r6
 800d55a:	4639      	mov	r1, r7
 800d55c:	f7f3 f874 	bl	8000648 <__aeabi_dmul>
 800d560:	ec41 0b18 	vmov	d8, r0, r1
 800d564:	e76f      	b.n	800d446 <__ieee754_exp+0xd6>
 800d566:	4a42      	ldr	r2, [pc, #264]	; (800d670 <__ieee754_exp+0x300>)
 800d568:	4293      	cmp	r3, r2
 800d56a:	d811      	bhi.n	800d590 <__ieee754_exp+0x220>
 800d56c:	a336      	add	r3, pc, #216	; (adr r3, 800d648 <__ieee754_exp+0x2d8>)
 800d56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d572:	ee10 0a10 	vmov	r0, s0
 800d576:	4629      	mov	r1, r5
 800d578:	f7f2 feb0 	bl	80002dc <__adddf3>
 800d57c:	4b3a      	ldr	r3, [pc, #232]	; (800d668 <__ieee754_exp+0x2f8>)
 800d57e:	2200      	movs	r2, #0
 800d580:	f7f3 faf2 	bl	8000b68 <__aeabi_dcmpgt>
 800d584:	b138      	cbz	r0, 800d596 <__ieee754_exp+0x226>
 800d586:	4b38      	ldr	r3, [pc, #224]	; (800d668 <__ieee754_exp+0x2f8>)
 800d588:	2200      	movs	r2, #0
 800d58a:	4620      	mov	r0, r4
 800d58c:	4629      	mov	r1, r5
 800d58e:	e70a      	b.n	800d3a6 <__ieee754_exp+0x36>
 800d590:	f04f 0a00 	mov.w	sl, #0
 800d594:	e75f      	b.n	800d456 <__ieee754_exp+0xe6>
 800d596:	4682      	mov	sl, r0
 800d598:	e75d      	b.n	800d456 <__ieee754_exp+0xe6>
 800d59a:	4632      	mov	r2, r6
 800d59c:	463b      	mov	r3, r7
 800d59e:	2000      	movs	r0, #0
 800d5a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d5a4:	f7f2 fe98 	bl	80002d8 <__aeabi_dsub>
 800d5a8:	4602      	mov	r2, r0
 800d5aa:	460b      	mov	r3, r1
 800d5ac:	ec51 0b19 	vmov	r0, r1, d9
 800d5b0:	f7f3 f974 	bl	800089c <__aeabi_ddiv>
 800d5b4:	4602      	mov	r2, r0
 800d5b6:	460b      	mov	r3, r1
 800d5b8:	ec51 0b18 	vmov	r0, r1, d8
 800d5bc:	f7f2 fe8c 	bl	80002d8 <__aeabi_dsub>
 800d5c0:	4642      	mov	r2, r8
 800d5c2:	464b      	mov	r3, r9
 800d5c4:	f7f2 fe88 	bl	80002d8 <__aeabi_dsub>
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	460b      	mov	r3, r1
 800d5cc:	2000      	movs	r0, #0
 800d5ce:	4926      	ldr	r1, [pc, #152]	; (800d668 <__ieee754_exp+0x2f8>)
 800d5d0:	f7f2 fe82 	bl	80002d8 <__aeabi_dsub>
 800d5d4:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800d5d8:	4592      	cmp	sl, r2
 800d5da:	db02      	blt.n	800d5e2 <__ieee754_exp+0x272>
 800d5dc:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800d5e0:	e6e3      	b.n	800d3aa <__ieee754_exp+0x3a>
 800d5e2:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800d5e6:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800d5f0:	f7f3 f82a 	bl	8000648 <__aeabi_dmul>
 800d5f4:	e6d9      	b.n	800d3aa <__ieee754_exp+0x3a>
 800d5f6:	bf00      	nop
 800d5f8:	fefa39ef 	.word	0xfefa39ef
 800d5fc:	40862e42 	.word	0x40862e42
 800d600:	d52d3051 	.word	0xd52d3051
 800d604:	c0874910 	.word	0xc0874910
 800d608:	72bea4d0 	.word	0x72bea4d0
 800d60c:	3e663769 	.word	0x3e663769
 800d610:	c5d26bf1 	.word	0xc5d26bf1
 800d614:	3ebbbd41 	.word	0x3ebbbd41
 800d618:	af25de2c 	.word	0xaf25de2c
 800d61c:	3f11566a 	.word	0x3f11566a
 800d620:	16bebd93 	.word	0x16bebd93
 800d624:	3f66c16c 	.word	0x3f66c16c
 800d628:	5555553e 	.word	0x5555553e
 800d62c:	3fc55555 	.word	0x3fc55555
 800d630:	652b82fe 	.word	0x652b82fe
 800d634:	3ff71547 	.word	0x3ff71547
 800d638:	fee00000 	.word	0xfee00000
 800d63c:	3fe62e42 	.word	0x3fe62e42
 800d640:	35793c76 	.word	0x35793c76
 800d644:	3dea39ef 	.word	0x3dea39ef
 800d648:	8800759c 	.word	0x8800759c
 800d64c:	7e37e43c 	.word	0x7e37e43c
 800d650:	40862e41 	.word	0x40862e41
 800d654:	7fefffff 	.word	0x7fefffff
 800d658:	3fd62e42 	.word	0x3fd62e42
 800d65c:	3ff0a2b1 	.word	0x3ff0a2b1
 800d660:	08013b68 	.word	0x08013b68
 800d664:	08013b78 	.word	0x08013b78
 800d668:	3ff00000 	.word	0x3ff00000
 800d66c:	08013b58 	.word	0x08013b58
 800d670:	3defffff 	.word	0x3defffff
 800d674:	00000000 	.word	0x00000000

0800d678 <__ieee754_pow>:
 800d678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d67c:	ed2d 8b06 	vpush	{d8-d10}
 800d680:	b089      	sub	sp, #36	; 0x24
 800d682:	ed8d 1b00 	vstr	d1, [sp]
 800d686:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d68a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d68e:	ea58 0102 	orrs.w	r1, r8, r2
 800d692:	ec57 6b10 	vmov	r6, r7, d0
 800d696:	d115      	bne.n	800d6c4 <__ieee754_pow+0x4c>
 800d698:	19b3      	adds	r3, r6, r6
 800d69a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d69e:	4152      	adcs	r2, r2
 800d6a0:	4299      	cmp	r1, r3
 800d6a2:	4b89      	ldr	r3, [pc, #548]	; (800d8c8 <__ieee754_pow+0x250>)
 800d6a4:	4193      	sbcs	r3, r2
 800d6a6:	f080 84d2 	bcs.w	800e04e <__ieee754_pow+0x9d6>
 800d6aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6ae:	4630      	mov	r0, r6
 800d6b0:	4639      	mov	r1, r7
 800d6b2:	f7f2 fe13 	bl	80002dc <__adddf3>
 800d6b6:	ec41 0b10 	vmov	d0, r0, r1
 800d6ba:	b009      	add	sp, #36	; 0x24
 800d6bc:	ecbd 8b06 	vpop	{d8-d10}
 800d6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6c4:	4b81      	ldr	r3, [pc, #516]	; (800d8cc <__ieee754_pow+0x254>)
 800d6c6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d6ca:	429c      	cmp	r4, r3
 800d6cc:	ee10 aa10 	vmov	sl, s0
 800d6d0:	463d      	mov	r5, r7
 800d6d2:	dc06      	bgt.n	800d6e2 <__ieee754_pow+0x6a>
 800d6d4:	d101      	bne.n	800d6da <__ieee754_pow+0x62>
 800d6d6:	2e00      	cmp	r6, #0
 800d6d8:	d1e7      	bne.n	800d6aa <__ieee754_pow+0x32>
 800d6da:	4598      	cmp	r8, r3
 800d6dc:	dc01      	bgt.n	800d6e2 <__ieee754_pow+0x6a>
 800d6de:	d10f      	bne.n	800d700 <__ieee754_pow+0x88>
 800d6e0:	b172      	cbz	r2, 800d700 <__ieee754_pow+0x88>
 800d6e2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d6e6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d6ea:	ea55 050a 	orrs.w	r5, r5, sl
 800d6ee:	d1dc      	bne.n	800d6aa <__ieee754_pow+0x32>
 800d6f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d6f4:	18db      	adds	r3, r3, r3
 800d6f6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d6fa:	4152      	adcs	r2, r2
 800d6fc:	429d      	cmp	r5, r3
 800d6fe:	e7d0      	b.n	800d6a2 <__ieee754_pow+0x2a>
 800d700:	2d00      	cmp	r5, #0
 800d702:	da3b      	bge.n	800d77c <__ieee754_pow+0x104>
 800d704:	4b72      	ldr	r3, [pc, #456]	; (800d8d0 <__ieee754_pow+0x258>)
 800d706:	4598      	cmp	r8, r3
 800d708:	dc51      	bgt.n	800d7ae <__ieee754_pow+0x136>
 800d70a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d70e:	4598      	cmp	r8, r3
 800d710:	f340 84ac 	ble.w	800e06c <__ieee754_pow+0x9f4>
 800d714:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d718:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d71c:	2b14      	cmp	r3, #20
 800d71e:	dd0f      	ble.n	800d740 <__ieee754_pow+0xc8>
 800d720:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d724:	fa22 f103 	lsr.w	r1, r2, r3
 800d728:	fa01 f303 	lsl.w	r3, r1, r3
 800d72c:	4293      	cmp	r3, r2
 800d72e:	f040 849d 	bne.w	800e06c <__ieee754_pow+0x9f4>
 800d732:	f001 0101 	and.w	r1, r1, #1
 800d736:	f1c1 0302 	rsb	r3, r1, #2
 800d73a:	9304      	str	r3, [sp, #16]
 800d73c:	b182      	cbz	r2, 800d760 <__ieee754_pow+0xe8>
 800d73e:	e05f      	b.n	800d800 <__ieee754_pow+0x188>
 800d740:	2a00      	cmp	r2, #0
 800d742:	d15b      	bne.n	800d7fc <__ieee754_pow+0x184>
 800d744:	f1c3 0314 	rsb	r3, r3, #20
 800d748:	fa48 f103 	asr.w	r1, r8, r3
 800d74c:	fa01 f303 	lsl.w	r3, r1, r3
 800d750:	4543      	cmp	r3, r8
 800d752:	f040 8488 	bne.w	800e066 <__ieee754_pow+0x9ee>
 800d756:	f001 0101 	and.w	r1, r1, #1
 800d75a:	f1c1 0302 	rsb	r3, r1, #2
 800d75e:	9304      	str	r3, [sp, #16]
 800d760:	4b5c      	ldr	r3, [pc, #368]	; (800d8d4 <__ieee754_pow+0x25c>)
 800d762:	4598      	cmp	r8, r3
 800d764:	d132      	bne.n	800d7cc <__ieee754_pow+0x154>
 800d766:	f1b9 0f00 	cmp.w	r9, #0
 800d76a:	f280 8478 	bge.w	800e05e <__ieee754_pow+0x9e6>
 800d76e:	4959      	ldr	r1, [pc, #356]	; (800d8d4 <__ieee754_pow+0x25c>)
 800d770:	4632      	mov	r2, r6
 800d772:	463b      	mov	r3, r7
 800d774:	2000      	movs	r0, #0
 800d776:	f7f3 f891 	bl	800089c <__aeabi_ddiv>
 800d77a:	e79c      	b.n	800d6b6 <__ieee754_pow+0x3e>
 800d77c:	2300      	movs	r3, #0
 800d77e:	9304      	str	r3, [sp, #16]
 800d780:	2a00      	cmp	r2, #0
 800d782:	d13d      	bne.n	800d800 <__ieee754_pow+0x188>
 800d784:	4b51      	ldr	r3, [pc, #324]	; (800d8cc <__ieee754_pow+0x254>)
 800d786:	4598      	cmp	r8, r3
 800d788:	d1ea      	bne.n	800d760 <__ieee754_pow+0xe8>
 800d78a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d78e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d792:	ea53 030a 	orrs.w	r3, r3, sl
 800d796:	f000 845a 	beq.w	800e04e <__ieee754_pow+0x9d6>
 800d79a:	4b4f      	ldr	r3, [pc, #316]	; (800d8d8 <__ieee754_pow+0x260>)
 800d79c:	429c      	cmp	r4, r3
 800d79e:	dd08      	ble.n	800d7b2 <__ieee754_pow+0x13a>
 800d7a0:	f1b9 0f00 	cmp.w	r9, #0
 800d7a4:	f2c0 8457 	blt.w	800e056 <__ieee754_pow+0x9de>
 800d7a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d7ac:	e783      	b.n	800d6b6 <__ieee754_pow+0x3e>
 800d7ae:	2302      	movs	r3, #2
 800d7b0:	e7e5      	b.n	800d77e <__ieee754_pow+0x106>
 800d7b2:	f1b9 0f00 	cmp.w	r9, #0
 800d7b6:	f04f 0000 	mov.w	r0, #0
 800d7ba:	f04f 0100 	mov.w	r1, #0
 800d7be:	f6bf af7a 	bge.w	800d6b6 <__ieee754_pow+0x3e>
 800d7c2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d7c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d7ca:	e774      	b.n	800d6b6 <__ieee754_pow+0x3e>
 800d7cc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d7d0:	d106      	bne.n	800d7e0 <__ieee754_pow+0x168>
 800d7d2:	4632      	mov	r2, r6
 800d7d4:	463b      	mov	r3, r7
 800d7d6:	4630      	mov	r0, r6
 800d7d8:	4639      	mov	r1, r7
 800d7da:	f7f2 ff35 	bl	8000648 <__aeabi_dmul>
 800d7de:	e76a      	b.n	800d6b6 <__ieee754_pow+0x3e>
 800d7e0:	4b3e      	ldr	r3, [pc, #248]	; (800d8dc <__ieee754_pow+0x264>)
 800d7e2:	4599      	cmp	r9, r3
 800d7e4:	d10c      	bne.n	800d800 <__ieee754_pow+0x188>
 800d7e6:	2d00      	cmp	r5, #0
 800d7e8:	db0a      	blt.n	800d800 <__ieee754_pow+0x188>
 800d7ea:	ec47 6b10 	vmov	d0, r6, r7
 800d7ee:	b009      	add	sp, #36	; 0x24
 800d7f0:	ecbd 8b06 	vpop	{d8-d10}
 800d7f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7f8:	f000 bc6c 	b.w	800e0d4 <__ieee754_sqrt>
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	9304      	str	r3, [sp, #16]
 800d800:	ec47 6b10 	vmov	d0, r6, r7
 800d804:	f000 fd48 	bl	800e298 <fabs>
 800d808:	ec51 0b10 	vmov	r0, r1, d0
 800d80c:	f1ba 0f00 	cmp.w	sl, #0
 800d810:	d129      	bne.n	800d866 <__ieee754_pow+0x1ee>
 800d812:	b124      	cbz	r4, 800d81e <__ieee754_pow+0x1a6>
 800d814:	4b2f      	ldr	r3, [pc, #188]	; (800d8d4 <__ieee754_pow+0x25c>)
 800d816:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d123      	bne.n	800d866 <__ieee754_pow+0x1ee>
 800d81e:	f1b9 0f00 	cmp.w	r9, #0
 800d822:	da05      	bge.n	800d830 <__ieee754_pow+0x1b8>
 800d824:	4602      	mov	r2, r0
 800d826:	460b      	mov	r3, r1
 800d828:	2000      	movs	r0, #0
 800d82a:	492a      	ldr	r1, [pc, #168]	; (800d8d4 <__ieee754_pow+0x25c>)
 800d82c:	f7f3 f836 	bl	800089c <__aeabi_ddiv>
 800d830:	2d00      	cmp	r5, #0
 800d832:	f6bf af40 	bge.w	800d6b6 <__ieee754_pow+0x3e>
 800d836:	9b04      	ldr	r3, [sp, #16]
 800d838:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d83c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d840:	4323      	orrs	r3, r4
 800d842:	d108      	bne.n	800d856 <__ieee754_pow+0x1de>
 800d844:	4602      	mov	r2, r0
 800d846:	460b      	mov	r3, r1
 800d848:	4610      	mov	r0, r2
 800d84a:	4619      	mov	r1, r3
 800d84c:	f7f2 fd44 	bl	80002d8 <__aeabi_dsub>
 800d850:	4602      	mov	r2, r0
 800d852:	460b      	mov	r3, r1
 800d854:	e78f      	b.n	800d776 <__ieee754_pow+0xfe>
 800d856:	9b04      	ldr	r3, [sp, #16]
 800d858:	2b01      	cmp	r3, #1
 800d85a:	f47f af2c 	bne.w	800d6b6 <__ieee754_pow+0x3e>
 800d85e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d862:	4619      	mov	r1, r3
 800d864:	e727      	b.n	800d6b6 <__ieee754_pow+0x3e>
 800d866:	0feb      	lsrs	r3, r5, #31
 800d868:	3b01      	subs	r3, #1
 800d86a:	9306      	str	r3, [sp, #24]
 800d86c:	9a06      	ldr	r2, [sp, #24]
 800d86e:	9b04      	ldr	r3, [sp, #16]
 800d870:	4313      	orrs	r3, r2
 800d872:	d102      	bne.n	800d87a <__ieee754_pow+0x202>
 800d874:	4632      	mov	r2, r6
 800d876:	463b      	mov	r3, r7
 800d878:	e7e6      	b.n	800d848 <__ieee754_pow+0x1d0>
 800d87a:	4b19      	ldr	r3, [pc, #100]	; (800d8e0 <__ieee754_pow+0x268>)
 800d87c:	4598      	cmp	r8, r3
 800d87e:	f340 80fb 	ble.w	800da78 <__ieee754_pow+0x400>
 800d882:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d886:	4598      	cmp	r8, r3
 800d888:	4b13      	ldr	r3, [pc, #76]	; (800d8d8 <__ieee754_pow+0x260>)
 800d88a:	dd0c      	ble.n	800d8a6 <__ieee754_pow+0x22e>
 800d88c:	429c      	cmp	r4, r3
 800d88e:	dc0f      	bgt.n	800d8b0 <__ieee754_pow+0x238>
 800d890:	f1b9 0f00 	cmp.w	r9, #0
 800d894:	da0f      	bge.n	800d8b6 <__ieee754_pow+0x23e>
 800d896:	2000      	movs	r0, #0
 800d898:	b009      	add	sp, #36	; 0x24
 800d89a:	ecbd 8b06 	vpop	{d8-d10}
 800d89e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8a2:	f000 bcf0 	b.w	800e286 <__math_oflow>
 800d8a6:	429c      	cmp	r4, r3
 800d8a8:	dbf2      	blt.n	800d890 <__ieee754_pow+0x218>
 800d8aa:	4b0a      	ldr	r3, [pc, #40]	; (800d8d4 <__ieee754_pow+0x25c>)
 800d8ac:	429c      	cmp	r4, r3
 800d8ae:	dd19      	ble.n	800d8e4 <__ieee754_pow+0x26c>
 800d8b0:	f1b9 0f00 	cmp.w	r9, #0
 800d8b4:	dcef      	bgt.n	800d896 <__ieee754_pow+0x21e>
 800d8b6:	2000      	movs	r0, #0
 800d8b8:	b009      	add	sp, #36	; 0x24
 800d8ba:	ecbd 8b06 	vpop	{d8-d10}
 800d8be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8c2:	f000 bcd7 	b.w	800e274 <__math_uflow>
 800d8c6:	bf00      	nop
 800d8c8:	fff00000 	.word	0xfff00000
 800d8cc:	7ff00000 	.word	0x7ff00000
 800d8d0:	433fffff 	.word	0x433fffff
 800d8d4:	3ff00000 	.word	0x3ff00000
 800d8d8:	3fefffff 	.word	0x3fefffff
 800d8dc:	3fe00000 	.word	0x3fe00000
 800d8e0:	41e00000 	.word	0x41e00000
 800d8e4:	4b60      	ldr	r3, [pc, #384]	; (800da68 <__ieee754_pow+0x3f0>)
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	f7f2 fcf6 	bl	80002d8 <__aeabi_dsub>
 800d8ec:	a354      	add	r3, pc, #336	; (adr r3, 800da40 <__ieee754_pow+0x3c8>)
 800d8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f2:	4604      	mov	r4, r0
 800d8f4:	460d      	mov	r5, r1
 800d8f6:	f7f2 fea7 	bl	8000648 <__aeabi_dmul>
 800d8fa:	a353      	add	r3, pc, #332	; (adr r3, 800da48 <__ieee754_pow+0x3d0>)
 800d8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d900:	4606      	mov	r6, r0
 800d902:	460f      	mov	r7, r1
 800d904:	4620      	mov	r0, r4
 800d906:	4629      	mov	r1, r5
 800d908:	f7f2 fe9e 	bl	8000648 <__aeabi_dmul>
 800d90c:	4b57      	ldr	r3, [pc, #348]	; (800da6c <__ieee754_pow+0x3f4>)
 800d90e:	4682      	mov	sl, r0
 800d910:	468b      	mov	fp, r1
 800d912:	2200      	movs	r2, #0
 800d914:	4620      	mov	r0, r4
 800d916:	4629      	mov	r1, r5
 800d918:	f7f2 fe96 	bl	8000648 <__aeabi_dmul>
 800d91c:	4602      	mov	r2, r0
 800d91e:	460b      	mov	r3, r1
 800d920:	a14b      	add	r1, pc, #300	; (adr r1, 800da50 <__ieee754_pow+0x3d8>)
 800d922:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d926:	f7f2 fcd7 	bl	80002d8 <__aeabi_dsub>
 800d92a:	4622      	mov	r2, r4
 800d92c:	462b      	mov	r3, r5
 800d92e:	f7f2 fe8b 	bl	8000648 <__aeabi_dmul>
 800d932:	4602      	mov	r2, r0
 800d934:	460b      	mov	r3, r1
 800d936:	2000      	movs	r0, #0
 800d938:	494d      	ldr	r1, [pc, #308]	; (800da70 <__ieee754_pow+0x3f8>)
 800d93a:	f7f2 fccd 	bl	80002d8 <__aeabi_dsub>
 800d93e:	4622      	mov	r2, r4
 800d940:	4680      	mov	r8, r0
 800d942:	4689      	mov	r9, r1
 800d944:	462b      	mov	r3, r5
 800d946:	4620      	mov	r0, r4
 800d948:	4629      	mov	r1, r5
 800d94a:	f7f2 fe7d 	bl	8000648 <__aeabi_dmul>
 800d94e:	4602      	mov	r2, r0
 800d950:	460b      	mov	r3, r1
 800d952:	4640      	mov	r0, r8
 800d954:	4649      	mov	r1, r9
 800d956:	f7f2 fe77 	bl	8000648 <__aeabi_dmul>
 800d95a:	a33f      	add	r3, pc, #252	; (adr r3, 800da58 <__ieee754_pow+0x3e0>)
 800d95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d960:	f7f2 fe72 	bl	8000648 <__aeabi_dmul>
 800d964:	4602      	mov	r2, r0
 800d966:	460b      	mov	r3, r1
 800d968:	4650      	mov	r0, sl
 800d96a:	4659      	mov	r1, fp
 800d96c:	f7f2 fcb4 	bl	80002d8 <__aeabi_dsub>
 800d970:	4602      	mov	r2, r0
 800d972:	460b      	mov	r3, r1
 800d974:	4680      	mov	r8, r0
 800d976:	4689      	mov	r9, r1
 800d978:	4630      	mov	r0, r6
 800d97a:	4639      	mov	r1, r7
 800d97c:	f7f2 fcae 	bl	80002dc <__adddf3>
 800d980:	2000      	movs	r0, #0
 800d982:	4632      	mov	r2, r6
 800d984:	463b      	mov	r3, r7
 800d986:	4604      	mov	r4, r0
 800d988:	460d      	mov	r5, r1
 800d98a:	f7f2 fca5 	bl	80002d8 <__aeabi_dsub>
 800d98e:	4602      	mov	r2, r0
 800d990:	460b      	mov	r3, r1
 800d992:	4640      	mov	r0, r8
 800d994:	4649      	mov	r1, r9
 800d996:	f7f2 fc9f 	bl	80002d8 <__aeabi_dsub>
 800d99a:	9b04      	ldr	r3, [sp, #16]
 800d99c:	9a06      	ldr	r2, [sp, #24]
 800d99e:	3b01      	subs	r3, #1
 800d9a0:	4313      	orrs	r3, r2
 800d9a2:	4682      	mov	sl, r0
 800d9a4:	468b      	mov	fp, r1
 800d9a6:	f040 81e7 	bne.w	800dd78 <__ieee754_pow+0x700>
 800d9aa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800da60 <__ieee754_pow+0x3e8>
 800d9ae:	eeb0 8a47 	vmov.f32	s16, s14
 800d9b2:	eef0 8a67 	vmov.f32	s17, s15
 800d9b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d9ba:	2600      	movs	r6, #0
 800d9bc:	4632      	mov	r2, r6
 800d9be:	463b      	mov	r3, r7
 800d9c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d9c4:	f7f2 fc88 	bl	80002d8 <__aeabi_dsub>
 800d9c8:	4622      	mov	r2, r4
 800d9ca:	462b      	mov	r3, r5
 800d9cc:	f7f2 fe3c 	bl	8000648 <__aeabi_dmul>
 800d9d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9d4:	4680      	mov	r8, r0
 800d9d6:	4689      	mov	r9, r1
 800d9d8:	4650      	mov	r0, sl
 800d9da:	4659      	mov	r1, fp
 800d9dc:	f7f2 fe34 	bl	8000648 <__aeabi_dmul>
 800d9e0:	4602      	mov	r2, r0
 800d9e2:	460b      	mov	r3, r1
 800d9e4:	4640      	mov	r0, r8
 800d9e6:	4649      	mov	r1, r9
 800d9e8:	f7f2 fc78 	bl	80002dc <__adddf3>
 800d9ec:	4632      	mov	r2, r6
 800d9ee:	463b      	mov	r3, r7
 800d9f0:	4680      	mov	r8, r0
 800d9f2:	4689      	mov	r9, r1
 800d9f4:	4620      	mov	r0, r4
 800d9f6:	4629      	mov	r1, r5
 800d9f8:	f7f2 fe26 	bl	8000648 <__aeabi_dmul>
 800d9fc:	460b      	mov	r3, r1
 800d9fe:	4604      	mov	r4, r0
 800da00:	460d      	mov	r5, r1
 800da02:	4602      	mov	r2, r0
 800da04:	4649      	mov	r1, r9
 800da06:	4640      	mov	r0, r8
 800da08:	f7f2 fc68 	bl	80002dc <__adddf3>
 800da0c:	4b19      	ldr	r3, [pc, #100]	; (800da74 <__ieee754_pow+0x3fc>)
 800da0e:	4299      	cmp	r1, r3
 800da10:	ec45 4b19 	vmov	d9, r4, r5
 800da14:	4606      	mov	r6, r0
 800da16:	460f      	mov	r7, r1
 800da18:	468b      	mov	fp, r1
 800da1a:	f340 82f1 	ble.w	800e000 <__ieee754_pow+0x988>
 800da1e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800da22:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800da26:	4303      	orrs	r3, r0
 800da28:	f000 81e4 	beq.w	800ddf4 <__ieee754_pow+0x77c>
 800da2c:	ec51 0b18 	vmov	r0, r1, d8
 800da30:	2200      	movs	r2, #0
 800da32:	2300      	movs	r3, #0
 800da34:	f7f3 f87a 	bl	8000b2c <__aeabi_dcmplt>
 800da38:	3800      	subs	r0, #0
 800da3a:	bf18      	it	ne
 800da3c:	2001      	movne	r0, #1
 800da3e:	e72b      	b.n	800d898 <__ieee754_pow+0x220>
 800da40:	60000000 	.word	0x60000000
 800da44:	3ff71547 	.word	0x3ff71547
 800da48:	f85ddf44 	.word	0xf85ddf44
 800da4c:	3e54ae0b 	.word	0x3e54ae0b
 800da50:	55555555 	.word	0x55555555
 800da54:	3fd55555 	.word	0x3fd55555
 800da58:	652b82fe 	.word	0x652b82fe
 800da5c:	3ff71547 	.word	0x3ff71547
 800da60:	00000000 	.word	0x00000000
 800da64:	bff00000 	.word	0xbff00000
 800da68:	3ff00000 	.word	0x3ff00000
 800da6c:	3fd00000 	.word	0x3fd00000
 800da70:	3fe00000 	.word	0x3fe00000
 800da74:	408fffff 	.word	0x408fffff
 800da78:	4bd5      	ldr	r3, [pc, #852]	; (800ddd0 <__ieee754_pow+0x758>)
 800da7a:	402b      	ands	r3, r5
 800da7c:	2200      	movs	r2, #0
 800da7e:	b92b      	cbnz	r3, 800da8c <__ieee754_pow+0x414>
 800da80:	4bd4      	ldr	r3, [pc, #848]	; (800ddd4 <__ieee754_pow+0x75c>)
 800da82:	f7f2 fde1 	bl	8000648 <__aeabi_dmul>
 800da86:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800da8a:	460c      	mov	r4, r1
 800da8c:	1523      	asrs	r3, r4, #20
 800da8e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800da92:	4413      	add	r3, r2
 800da94:	9305      	str	r3, [sp, #20]
 800da96:	4bd0      	ldr	r3, [pc, #832]	; (800ddd8 <__ieee754_pow+0x760>)
 800da98:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800da9c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800daa0:	429c      	cmp	r4, r3
 800daa2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800daa6:	dd08      	ble.n	800daba <__ieee754_pow+0x442>
 800daa8:	4bcc      	ldr	r3, [pc, #816]	; (800dddc <__ieee754_pow+0x764>)
 800daaa:	429c      	cmp	r4, r3
 800daac:	f340 8162 	ble.w	800dd74 <__ieee754_pow+0x6fc>
 800dab0:	9b05      	ldr	r3, [sp, #20]
 800dab2:	3301      	adds	r3, #1
 800dab4:	9305      	str	r3, [sp, #20]
 800dab6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800daba:	2400      	movs	r4, #0
 800dabc:	00e3      	lsls	r3, r4, #3
 800dabe:	9307      	str	r3, [sp, #28]
 800dac0:	4bc7      	ldr	r3, [pc, #796]	; (800dde0 <__ieee754_pow+0x768>)
 800dac2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dac6:	ed93 7b00 	vldr	d7, [r3]
 800daca:	4629      	mov	r1, r5
 800dacc:	ec53 2b17 	vmov	r2, r3, d7
 800dad0:	eeb0 9a47 	vmov.f32	s18, s14
 800dad4:	eef0 9a67 	vmov.f32	s19, s15
 800dad8:	4682      	mov	sl, r0
 800dada:	f7f2 fbfd 	bl	80002d8 <__aeabi_dsub>
 800dade:	4652      	mov	r2, sl
 800dae0:	4606      	mov	r6, r0
 800dae2:	460f      	mov	r7, r1
 800dae4:	462b      	mov	r3, r5
 800dae6:	ec51 0b19 	vmov	r0, r1, d9
 800daea:	f7f2 fbf7 	bl	80002dc <__adddf3>
 800daee:	4602      	mov	r2, r0
 800daf0:	460b      	mov	r3, r1
 800daf2:	2000      	movs	r0, #0
 800daf4:	49bb      	ldr	r1, [pc, #748]	; (800dde4 <__ieee754_pow+0x76c>)
 800daf6:	f7f2 fed1 	bl	800089c <__aeabi_ddiv>
 800dafa:	ec41 0b1a 	vmov	d10, r0, r1
 800dafe:	4602      	mov	r2, r0
 800db00:	460b      	mov	r3, r1
 800db02:	4630      	mov	r0, r6
 800db04:	4639      	mov	r1, r7
 800db06:	f7f2 fd9f 	bl	8000648 <__aeabi_dmul>
 800db0a:	2300      	movs	r3, #0
 800db0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db10:	9302      	str	r3, [sp, #8]
 800db12:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800db16:	46ab      	mov	fp, r5
 800db18:	106d      	asrs	r5, r5, #1
 800db1a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800db1e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800db22:	ec41 0b18 	vmov	d8, r0, r1
 800db26:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800db2a:	2200      	movs	r2, #0
 800db2c:	4640      	mov	r0, r8
 800db2e:	4649      	mov	r1, r9
 800db30:	4614      	mov	r4, r2
 800db32:	461d      	mov	r5, r3
 800db34:	f7f2 fd88 	bl	8000648 <__aeabi_dmul>
 800db38:	4602      	mov	r2, r0
 800db3a:	460b      	mov	r3, r1
 800db3c:	4630      	mov	r0, r6
 800db3e:	4639      	mov	r1, r7
 800db40:	f7f2 fbca 	bl	80002d8 <__aeabi_dsub>
 800db44:	ec53 2b19 	vmov	r2, r3, d9
 800db48:	4606      	mov	r6, r0
 800db4a:	460f      	mov	r7, r1
 800db4c:	4620      	mov	r0, r4
 800db4e:	4629      	mov	r1, r5
 800db50:	f7f2 fbc2 	bl	80002d8 <__aeabi_dsub>
 800db54:	4602      	mov	r2, r0
 800db56:	460b      	mov	r3, r1
 800db58:	4650      	mov	r0, sl
 800db5a:	4659      	mov	r1, fp
 800db5c:	f7f2 fbbc 	bl	80002d8 <__aeabi_dsub>
 800db60:	4642      	mov	r2, r8
 800db62:	464b      	mov	r3, r9
 800db64:	f7f2 fd70 	bl	8000648 <__aeabi_dmul>
 800db68:	4602      	mov	r2, r0
 800db6a:	460b      	mov	r3, r1
 800db6c:	4630      	mov	r0, r6
 800db6e:	4639      	mov	r1, r7
 800db70:	f7f2 fbb2 	bl	80002d8 <__aeabi_dsub>
 800db74:	ec53 2b1a 	vmov	r2, r3, d10
 800db78:	f7f2 fd66 	bl	8000648 <__aeabi_dmul>
 800db7c:	ec53 2b18 	vmov	r2, r3, d8
 800db80:	ec41 0b19 	vmov	d9, r0, r1
 800db84:	ec51 0b18 	vmov	r0, r1, d8
 800db88:	f7f2 fd5e 	bl	8000648 <__aeabi_dmul>
 800db8c:	a37c      	add	r3, pc, #496	; (adr r3, 800dd80 <__ieee754_pow+0x708>)
 800db8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db92:	4604      	mov	r4, r0
 800db94:	460d      	mov	r5, r1
 800db96:	f7f2 fd57 	bl	8000648 <__aeabi_dmul>
 800db9a:	a37b      	add	r3, pc, #492	; (adr r3, 800dd88 <__ieee754_pow+0x710>)
 800db9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba0:	f7f2 fb9c 	bl	80002dc <__adddf3>
 800dba4:	4622      	mov	r2, r4
 800dba6:	462b      	mov	r3, r5
 800dba8:	f7f2 fd4e 	bl	8000648 <__aeabi_dmul>
 800dbac:	a378      	add	r3, pc, #480	; (adr r3, 800dd90 <__ieee754_pow+0x718>)
 800dbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb2:	f7f2 fb93 	bl	80002dc <__adddf3>
 800dbb6:	4622      	mov	r2, r4
 800dbb8:	462b      	mov	r3, r5
 800dbba:	f7f2 fd45 	bl	8000648 <__aeabi_dmul>
 800dbbe:	a376      	add	r3, pc, #472	; (adr r3, 800dd98 <__ieee754_pow+0x720>)
 800dbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc4:	f7f2 fb8a 	bl	80002dc <__adddf3>
 800dbc8:	4622      	mov	r2, r4
 800dbca:	462b      	mov	r3, r5
 800dbcc:	f7f2 fd3c 	bl	8000648 <__aeabi_dmul>
 800dbd0:	a373      	add	r3, pc, #460	; (adr r3, 800dda0 <__ieee754_pow+0x728>)
 800dbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd6:	f7f2 fb81 	bl	80002dc <__adddf3>
 800dbda:	4622      	mov	r2, r4
 800dbdc:	462b      	mov	r3, r5
 800dbde:	f7f2 fd33 	bl	8000648 <__aeabi_dmul>
 800dbe2:	a371      	add	r3, pc, #452	; (adr r3, 800dda8 <__ieee754_pow+0x730>)
 800dbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe8:	f7f2 fb78 	bl	80002dc <__adddf3>
 800dbec:	4622      	mov	r2, r4
 800dbee:	4606      	mov	r6, r0
 800dbf0:	460f      	mov	r7, r1
 800dbf2:	462b      	mov	r3, r5
 800dbf4:	4620      	mov	r0, r4
 800dbf6:	4629      	mov	r1, r5
 800dbf8:	f7f2 fd26 	bl	8000648 <__aeabi_dmul>
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	460b      	mov	r3, r1
 800dc00:	4630      	mov	r0, r6
 800dc02:	4639      	mov	r1, r7
 800dc04:	f7f2 fd20 	bl	8000648 <__aeabi_dmul>
 800dc08:	4642      	mov	r2, r8
 800dc0a:	4604      	mov	r4, r0
 800dc0c:	460d      	mov	r5, r1
 800dc0e:	464b      	mov	r3, r9
 800dc10:	ec51 0b18 	vmov	r0, r1, d8
 800dc14:	f7f2 fb62 	bl	80002dc <__adddf3>
 800dc18:	ec53 2b19 	vmov	r2, r3, d9
 800dc1c:	f7f2 fd14 	bl	8000648 <__aeabi_dmul>
 800dc20:	4622      	mov	r2, r4
 800dc22:	462b      	mov	r3, r5
 800dc24:	f7f2 fb5a 	bl	80002dc <__adddf3>
 800dc28:	4642      	mov	r2, r8
 800dc2a:	4682      	mov	sl, r0
 800dc2c:	468b      	mov	fp, r1
 800dc2e:	464b      	mov	r3, r9
 800dc30:	4640      	mov	r0, r8
 800dc32:	4649      	mov	r1, r9
 800dc34:	f7f2 fd08 	bl	8000648 <__aeabi_dmul>
 800dc38:	4b6b      	ldr	r3, [pc, #428]	; (800dde8 <__ieee754_pow+0x770>)
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	4606      	mov	r6, r0
 800dc3e:	460f      	mov	r7, r1
 800dc40:	f7f2 fb4c 	bl	80002dc <__adddf3>
 800dc44:	4652      	mov	r2, sl
 800dc46:	465b      	mov	r3, fp
 800dc48:	f7f2 fb48 	bl	80002dc <__adddf3>
 800dc4c:	2000      	movs	r0, #0
 800dc4e:	4604      	mov	r4, r0
 800dc50:	460d      	mov	r5, r1
 800dc52:	4602      	mov	r2, r0
 800dc54:	460b      	mov	r3, r1
 800dc56:	4640      	mov	r0, r8
 800dc58:	4649      	mov	r1, r9
 800dc5a:	f7f2 fcf5 	bl	8000648 <__aeabi_dmul>
 800dc5e:	4b62      	ldr	r3, [pc, #392]	; (800dde8 <__ieee754_pow+0x770>)
 800dc60:	4680      	mov	r8, r0
 800dc62:	4689      	mov	r9, r1
 800dc64:	2200      	movs	r2, #0
 800dc66:	4620      	mov	r0, r4
 800dc68:	4629      	mov	r1, r5
 800dc6a:	f7f2 fb35 	bl	80002d8 <__aeabi_dsub>
 800dc6e:	4632      	mov	r2, r6
 800dc70:	463b      	mov	r3, r7
 800dc72:	f7f2 fb31 	bl	80002d8 <__aeabi_dsub>
 800dc76:	4602      	mov	r2, r0
 800dc78:	460b      	mov	r3, r1
 800dc7a:	4650      	mov	r0, sl
 800dc7c:	4659      	mov	r1, fp
 800dc7e:	f7f2 fb2b 	bl	80002d8 <__aeabi_dsub>
 800dc82:	ec53 2b18 	vmov	r2, r3, d8
 800dc86:	f7f2 fcdf 	bl	8000648 <__aeabi_dmul>
 800dc8a:	4622      	mov	r2, r4
 800dc8c:	4606      	mov	r6, r0
 800dc8e:	460f      	mov	r7, r1
 800dc90:	462b      	mov	r3, r5
 800dc92:	ec51 0b19 	vmov	r0, r1, d9
 800dc96:	f7f2 fcd7 	bl	8000648 <__aeabi_dmul>
 800dc9a:	4602      	mov	r2, r0
 800dc9c:	460b      	mov	r3, r1
 800dc9e:	4630      	mov	r0, r6
 800dca0:	4639      	mov	r1, r7
 800dca2:	f7f2 fb1b 	bl	80002dc <__adddf3>
 800dca6:	4606      	mov	r6, r0
 800dca8:	460f      	mov	r7, r1
 800dcaa:	4602      	mov	r2, r0
 800dcac:	460b      	mov	r3, r1
 800dcae:	4640      	mov	r0, r8
 800dcb0:	4649      	mov	r1, r9
 800dcb2:	f7f2 fb13 	bl	80002dc <__adddf3>
 800dcb6:	a33e      	add	r3, pc, #248	; (adr r3, 800ddb0 <__ieee754_pow+0x738>)
 800dcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcbc:	2000      	movs	r0, #0
 800dcbe:	4604      	mov	r4, r0
 800dcc0:	460d      	mov	r5, r1
 800dcc2:	f7f2 fcc1 	bl	8000648 <__aeabi_dmul>
 800dcc6:	4642      	mov	r2, r8
 800dcc8:	ec41 0b18 	vmov	d8, r0, r1
 800dccc:	464b      	mov	r3, r9
 800dcce:	4620      	mov	r0, r4
 800dcd0:	4629      	mov	r1, r5
 800dcd2:	f7f2 fb01 	bl	80002d8 <__aeabi_dsub>
 800dcd6:	4602      	mov	r2, r0
 800dcd8:	460b      	mov	r3, r1
 800dcda:	4630      	mov	r0, r6
 800dcdc:	4639      	mov	r1, r7
 800dcde:	f7f2 fafb 	bl	80002d8 <__aeabi_dsub>
 800dce2:	a335      	add	r3, pc, #212	; (adr r3, 800ddb8 <__ieee754_pow+0x740>)
 800dce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce8:	f7f2 fcae 	bl	8000648 <__aeabi_dmul>
 800dcec:	a334      	add	r3, pc, #208	; (adr r3, 800ddc0 <__ieee754_pow+0x748>)
 800dcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf2:	4606      	mov	r6, r0
 800dcf4:	460f      	mov	r7, r1
 800dcf6:	4620      	mov	r0, r4
 800dcf8:	4629      	mov	r1, r5
 800dcfa:	f7f2 fca5 	bl	8000648 <__aeabi_dmul>
 800dcfe:	4602      	mov	r2, r0
 800dd00:	460b      	mov	r3, r1
 800dd02:	4630      	mov	r0, r6
 800dd04:	4639      	mov	r1, r7
 800dd06:	f7f2 fae9 	bl	80002dc <__adddf3>
 800dd0a:	9a07      	ldr	r2, [sp, #28]
 800dd0c:	4b37      	ldr	r3, [pc, #220]	; (800ddec <__ieee754_pow+0x774>)
 800dd0e:	4413      	add	r3, r2
 800dd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd14:	f7f2 fae2 	bl	80002dc <__adddf3>
 800dd18:	4682      	mov	sl, r0
 800dd1a:	9805      	ldr	r0, [sp, #20]
 800dd1c:	468b      	mov	fp, r1
 800dd1e:	f7f2 fc29 	bl	8000574 <__aeabi_i2d>
 800dd22:	9a07      	ldr	r2, [sp, #28]
 800dd24:	4b32      	ldr	r3, [pc, #200]	; (800ddf0 <__ieee754_pow+0x778>)
 800dd26:	4413      	add	r3, r2
 800dd28:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dd2c:	4606      	mov	r6, r0
 800dd2e:	460f      	mov	r7, r1
 800dd30:	4652      	mov	r2, sl
 800dd32:	465b      	mov	r3, fp
 800dd34:	ec51 0b18 	vmov	r0, r1, d8
 800dd38:	f7f2 fad0 	bl	80002dc <__adddf3>
 800dd3c:	4642      	mov	r2, r8
 800dd3e:	464b      	mov	r3, r9
 800dd40:	f7f2 facc 	bl	80002dc <__adddf3>
 800dd44:	4632      	mov	r2, r6
 800dd46:	463b      	mov	r3, r7
 800dd48:	f7f2 fac8 	bl	80002dc <__adddf3>
 800dd4c:	2000      	movs	r0, #0
 800dd4e:	4632      	mov	r2, r6
 800dd50:	463b      	mov	r3, r7
 800dd52:	4604      	mov	r4, r0
 800dd54:	460d      	mov	r5, r1
 800dd56:	f7f2 fabf 	bl	80002d8 <__aeabi_dsub>
 800dd5a:	4642      	mov	r2, r8
 800dd5c:	464b      	mov	r3, r9
 800dd5e:	f7f2 fabb 	bl	80002d8 <__aeabi_dsub>
 800dd62:	ec53 2b18 	vmov	r2, r3, d8
 800dd66:	f7f2 fab7 	bl	80002d8 <__aeabi_dsub>
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	4650      	mov	r0, sl
 800dd70:	4659      	mov	r1, fp
 800dd72:	e610      	b.n	800d996 <__ieee754_pow+0x31e>
 800dd74:	2401      	movs	r4, #1
 800dd76:	e6a1      	b.n	800dabc <__ieee754_pow+0x444>
 800dd78:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ddc8 <__ieee754_pow+0x750>
 800dd7c:	e617      	b.n	800d9ae <__ieee754_pow+0x336>
 800dd7e:	bf00      	nop
 800dd80:	4a454eef 	.word	0x4a454eef
 800dd84:	3fca7e28 	.word	0x3fca7e28
 800dd88:	93c9db65 	.word	0x93c9db65
 800dd8c:	3fcd864a 	.word	0x3fcd864a
 800dd90:	a91d4101 	.word	0xa91d4101
 800dd94:	3fd17460 	.word	0x3fd17460
 800dd98:	518f264d 	.word	0x518f264d
 800dd9c:	3fd55555 	.word	0x3fd55555
 800dda0:	db6fabff 	.word	0xdb6fabff
 800dda4:	3fdb6db6 	.word	0x3fdb6db6
 800dda8:	33333303 	.word	0x33333303
 800ddac:	3fe33333 	.word	0x3fe33333
 800ddb0:	e0000000 	.word	0xe0000000
 800ddb4:	3feec709 	.word	0x3feec709
 800ddb8:	dc3a03fd 	.word	0xdc3a03fd
 800ddbc:	3feec709 	.word	0x3feec709
 800ddc0:	145b01f5 	.word	0x145b01f5
 800ddc4:	be3e2fe0 	.word	0xbe3e2fe0
 800ddc8:	00000000 	.word	0x00000000
 800ddcc:	3ff00000 	.word	0x3ff00000
 800ddd0:	7ff00000 	.word	0x7ff00000
 800ddd4:	43400000 	.word	0x43400000
 800ddd8:	0003988e 	.word	0x0003988e
 800dddc:	000bb679 	.word	0x000bb679
 800dde0:	08013b88 	.word	0x08013b88
 800dde4:	3ff00000 	.word	0x3ff00000
 800dde8:	40080000 	.word	0x40080000
 800ddec:	08013ba8 	.word	0x08013ba8
 800ddf0:	08013b98 	.word	0x08013b98
 800ddf4:	a3b5      	add	r3, pc, #724	; (adr r3, 800e0cc <__ieee754_pow+0xa54>)
 800ddf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddfa:	4640      	mov	r0, r8
 800ddfc:	4649      	mov	r1, r9
 800ddfe:	f7f2 fa6d 	bl	80002dc <__adddf3>
 800de02:	4622      	mov	r2, r4
 800de04:	ec41 0b1a 	vmov	d10, r0, r1
 800de08:	462b      	mov	r3, r5
 800de0a:	4630      	mov	r0, r6
 800de0c:	4639      	mov	r1, r7
 800de0e:	f7f2 fa63 	bl	80002d8 <__aeabi_dsub>
 800de12:	4602      	mov	r2, r0
 800de14:	460b      	mov	r3, r1
 800de16:	ec51 0b1a 	vmov	r0, r1, d10
 800de1a:	f7f2 fea5 	bl	8000b68 <__aeabi_dcmpgt>
 800de1e:	2800      	cmp	r0, #0
 800de20:	f47f ae04 	bne.w	800da2c <__ieee754_pow+0x3b4>
 800de24:	4aa4      	ldr	r2, [pc, #656]	; (800e0b8 <__ieee754_pow+0xa40>)
 800de26:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800de2a:	4293      	cmp	r3, r2
 800de2c:	f340 8108 	ble.w	800e040 <__ieee754_pow+0x9c8>
 800de30:	151b      	asrs	r3, r3, #20
 800de32:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800de36:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800de3a:	fa4a f303 	asr.w	r3, sl, r3
 800de3e:	445b      	add	r3, fp
 800de40:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800de44:	4e9d      	ldr	r6, [pc, #628]	; (800e0bc <__ieee754_pow+0xa44>)
 800de46:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800de4a:	4116      	asrs	r6, r2
 800de4c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800de50:	2000      	movs	r0, #0
 800de52:	ea23 0106 	bic.w	r1, r3, r6
 800de56:	f1c2 0214 	rsb	r2, r2, #20
 800de5a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800de5e:	fa4a fa02 	asr.w	sl, sl, r2
 800de62:	f1bb 0f00 	cmp.w	fp, #0
 800de66:	4602      	mov	r2, r0
 800de68:	460b      	mov	r3, r1
 800de6a:	4620      	mov	r0, r4
 800de6c:	4629      	mov	r1, r5
 800de6e:	bfb8      	it	lt
 800de70:	f1ca 0a00 	rsblt	sl, sl, #0
 800de74:	f7f2 fa30 	bl	80002d8 <__aeabi_dsub>
 800de78:	ec41 0b19 	vmov	d9, r0, r1
 800de7c:	4642      	mov	r2, r8
 800de7e:	464b      	mov	r3, r9
 800de80:	ec51 0b19 	vmov	r0, r1, d9
 800de84:	f7f2 fa2a 	bl	80002dc <__adddf3>
 800de88:	a37b      	add	r3, pc, #492	; (adr r3, 800e078 <__ieee754_pow+0xa00>)
 800de8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8e:	2000      	movs	r0, #0
 800de90:	4604      	mov	r4, r0
 800de92:	460d      	mov	r5, r1
 800de94:	f7f2 fbd8 	bl	8000648 <__aeabi_dmul>
 800de98:	ec53 2b19 	vmov	r2, r3, d9
 800de9c:	4606      	mov	r6, r0
 800de9e:	460f      	mov	r7, r1
 800dea0:	4620      	mov	r0, r4
 800dea2:	4629      	mov	r1, r5
 800dea4:	f7f2 fa18 	bl	80002d8 <__aeabi_dsub>
 800dea8:	4602      	mov	r2, r0
 800deaa:	460b      	mov	r3, r1
 800deac:	4640      	mov	r0, r8
 800deae:	4649      	mov	r1, r9
 800deb0:	f7f2 fa12 	bl	80002d8 <__aeabi_dsub>
 800deb4:	a372      	add	r3, pc, #456	; (adr r3, 800e080 <__ieee754_pow+0xa08>)
 800deb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deba:	f7f2 fbc5 	bl	8000648 <__aeabi_dmul>
 800debe:	a372      	add	r3, pc, #456	; (adr r3, 800e088 <__ieee754_pow+0xa10>)
 800dec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec4:	4680      	mov	r8, r0
 800dec6:	4689      	mov	r9, r1
 800dec8:	4620      	mov	r0, r4
 800deca:	4629      	mov	r1, r5
 800decc:	f7f2 fbbc 	bl	8000648 <__aeabi_dmul>
 800ded0:	4602      	mov	r2, r0
 800ded2:	460b      	mov	r3, r1
 800ded4:	4640      	mov	r0, r8
 800ded6:	4649      	mov	r1, r9
 800ded8:	f7f2 fa00 	bl	80002dc <__adddf3>
 800dedc:	4604      	mov	r4, r0
 800dede:	460d      	mov	r5, r1
 800dee0:	4602      	mov	r2, r0
 800dee2:	460b      	mov	r3, r1
 800dee4:	4630      	mov	r0, r6
 800dee6:	4639      	mov	r1, r7
 800dee8:	f7f2 f9f8 	bl	80002dc <__adddf3>
 800deec:	4632      	mov	r2, r6
 800deee:	463b      	mov	r3, r7
 800def0:	4680      	mov	r8, r0
 800def2:	4689      	mov	r9, r1
 800def4:	f7f2 f9f0 	bl	80002d8 <__aeabi_dsub>
 800def8:	4602      	mov	r2, r0
 800defa:	460b      	mov	r3, r1
 800defc:	4620      	mov	r0, r4
 800defe:	4629      	mov	r1, r5
 800df00:	f7f2 f9ea 	bl	80002d8 <__aeabi_dsub>
 800df04:	4642      	mov	r2, r8
 800df06:	4606      	mov	r6, r0
 800df08:	460f      	mov	r7, r1
 800df0a:	464b      	mov	r3, r9
 800df0c:	4640      	mov	r0, r8
 800df0e:	4649      	mov	r1, r9
 800df10:	f7f2 fb9a 	bl	8000648 <__aeabi_dmul>
 800df14:	a35e      	add	r3, pc, #376	; (adr r3, 800e090 <__ieee754_pow+0xa18>)
 800df16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1a:	4604      	mov	r4, r0
 800df1c:	460d      	mov	r5, r1
 800df1e:	f7f2 fb93 	bl	8000648 <__aeabi_dmul>
 800df22:	a35d      	add	r3, pc, #372	; (adr r3, 800e098 <__ieee754_pow+0xa20>)
 800df24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df28:	f7f2 f9d6 	bl	80002d8 <__aeabi_dsub>
 800df2c:	4622      	mov	r2, r4
 800df2e:	462b      	mov	r3, r5
 800df30:	f7f2 fb8a 	bl	8000648 <__aeabi_dmul>
 800df34:	a35a      	add	r3, pc, #360	; (adr r3, 800e0a0 <__ieee754_pow+0xa28>)
 800df36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3a:	f7f2 f9cf 	bl	80002dc <__adddf3>
 800df3e:	4622      	mov	r2, r4
 800df40:	462b      	mov	r3, r5
 800df42:	f7f2 fb81 	bl	8000648 <__aeabi_dmul>
 800df46:	a358      	add	r3, pc, #352	; (adr r3, 800e0a8 <__ieee754_pow+0xa30>)
 800df48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df4c:	f7f2 f9c4 	bl	80002d8 <__aeabi_dsub>
 800df50:	4622      	mov	r2, r4
 800df52:	462b      	mov	r3, r5
 800df54:	f7f2 fb78 	bl	8000648 <__aeabi_dmul>
 800df58:	a355      	add	r3, pc, #340	; (adr r3, 800e0b0 <__ieee754_pow+0xa38>)
 800df5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5e:	f7f2 f9bd 	bl	80002dc <__adddf3>
 800df62:	4622      	mov	r2, r4
 800df64:	462b      	mov	r3, r5
 800df66:	f7f2 fb6f 	bl	8000648 <__aeabi_dmul>
 800df6a:	4602      	mov	r2, r0
 800df6c:	460b      	mov	r3, r1
 800df6e:	4640      	mov	r0, r8
 800df70:	4649      	mov	r1, r9
 800df72:	f7f2 f9b1 	bl	80002d8 <__aeabi_dsub>
 800df76:	4604      	mov	r4, r0
 800df78:	460d      	mov	r5, r1
 800df7a:	4602      	mov	r2, r0
 800df7c:	460b      	mov	r3, r1
 800df7e:	4640      	mov	r0, r8
 800df80:	4649      	mov	r1, r9
 800df82:	f7f2 fb61 	bl	8000648 <__aeabi_dmul>
 800df86:	2200      	movs	r2, #0
 800df88:	ec41 0b19 	vmov	d9, r0, r1
 800df8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800df90:	4620      	mov	r0, r4
 800df92:	4629      	mov	r1, r5
 800df94:	f7f2 f9a0 	bl	80002d8 <__aeabi_dsub>
 800df98:	4602      	mov	r2, r0
 800df9a:	460b      	mov	r3, r1
 800df9c:	ec51 0b19 	vmov	r0, r1, d9
 800dfa0:	f7f2 fc7c 	bl	800089c <__aeabi_ddiv>
 800dfa4:	4632      	mov	r2, r6
 800dfa6:	4604      	mov	r4, r0
 800dfa8:	460d      	mov	r5, r1
 800dfaa:	463b      	mov	r3, r7
 800dfac:	4640      	mov	r0, r8
 800dfae:	4649      	mov	r1, r9
 800dfb0:	f7f2 fb4a 	bl	8000648 <__aeabi_dmul>
 800dfb4:	4632      	mov	r2, r6
 800dfb6:	463b      	mov	r3, r7
 800dfb8:	f7f2 f990 	bl	80002dc <__adddf3>
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	4629      	mov	r1, r5
 800dfc4:	f7f2 f988 	bl	80002d8 <__aeabi_dsub>
 800dfc8:	4642      	mov	r2, r8
 800dfca:	464b      	mov	r3, r9
 800dfcc:	f7f2 f984 	bl	80002d8 <__aeabi_dsub>
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	4602      	mov	r2, r0
 800dfd4:	493a      	ldr	r1, [pc, #232]	; (800e0c0 <__ieee754_pow+0xa48>)
 800dfd6:	2000      	movs	r0, #0
 800dfd8:	f7f2 f97e 	bl	80002d8 <__aeabi_dsub>
 800dfdc:	ec41 0b10 	vmov	d0, r0, r1
 800dfe0:	ee10 3a90 	vmov	r3, s1
 800dfe4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800dfe8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dfec:	da2b      	bge.n	800e046 <__ieee754_pow+0x9ce>
 800dfee:	4650      	mov	r0, sl
 800dff0:	f000 f966 	bl	800e2c0 <scalbn>
 800dff4:	ec51 0b10 	vmov	r0, r1, d0
 800dff8:	ec53 2b18 	vmov	r2, r3, d8
 800dffc:	f7ff bbed 	b.w	800d7da <__ieee754_pow+0x162>
 800e000:	4b30      	ldr	r3, [pc, #192]	; (800e0c4 <__ieee754_pow+0xa4c>)
 800e002:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e006:	429e      	cmp	r6, r3
 800e008:	f77f af0c 	ble.w	800de24 <__ieee754_pow+0x7ac>
 800e00c:	4b2e      	ldr	r3, [pc, #184]	; (800e0c8 <__ieee754_pow+0xa50>)
 800e00e:	440b      	add	r3, r1
 800e010:	4303      	orrs	r3, r0
 800e012:	d009      	beq.n	800e028 <__ieee754_pow+0x9b0>
 800e014:	ec51 0b18 	vmov	r0, r1, d8
 800e018:	2200      	movs	r2, #0
 800e01a:	2300      	movs	r3, #0
 800e01c:	f7f2 fd86 	bl	8000b2c <__aeabi_dcmplt>
 800e020:	3800      	subs	r0, #0
 800e022:	bf18      	it	ne
 800e024:	2001      	movne	r0, #1
 800e026:	e447      	b.n	800d8b8 <__ieee754_pow+0x240>
 800e028:	4622      	mov	r2, r4
 800e02a:	462b      	mov	r3, r5
 800e02c:	f7f2 f954 	bl	80002d8 <__aeabi_dsub>
 800e030:	4642      	mov	r2, r8
 800e032:	464b      	mov	r3, r9
 800e034:	f7f2 fd8e 	bl	8000b54 <__aeabi_dcmpge>
 800e038:	2800      	cmp	r0, #0
 800e03a:	f43f aef3 	beq.w	800de24 <__ieee754_pow+0x7ac>
 800e03e:	e7e9      	b.n	800e014 <__ieee754_pow+0x99c>
 800e040:	f04f 0a00 	mov.w	sl, #0
 800e044:	e71a      	b.n	800de7c <__ieee754_pow+0x804>
 800e046:	ec51 0b10 	vmov	r0, r1, d0
 800e04a:	4619      	mov	r1, r3
 800e04c:	e7d4      	b.n	800dff8 <__ieee754_pow+0x980>
 800e04e:	491c      	ldr	r1, [pc, #112]	; (800e0c0 <__ieee754_pow+0xa48>)
 800e050:	2000      	movs	r0, #0
 800e052:	f7ff bb30 	b.w	800d6b6 <__ieee754_pow+0x3e>
 800e056:	2000      	movs	r0, #0
 800e058:	2100      	movs	r1, #0
 800e05a:	f7ff bb2c 	b.w	800d6b6 <__ieee754_pow+0x3e>
 800e05e:	4630      	mov	r0, r6
 800e060:	4639      	mov	r1, r7
 800e062:	f7ff bb28 	b.w	800d6b6 <__ieee754_pow+0x3e>
 800e066:	9204      	str	r2, [sp, #16]
 800e068:	f7ff bb7a 	b.w	800d760 <__ieee754_pow+0xe8>
 800e06c:	2300      	movs	r3, #0
 800e06e:	f7ff bb64 	b.w	800d73a <__ieee754_pow+0xc2>
 800e072:	bf00      	nop
 800e074:	f3af 8000 	nop.w
 800e078:	00000000 	.word	0x00000000
 800e07c:	3fe62e43 	.word	0x3fe62e43
 800e080:	fefa39ef 	.word	0xfefa39ef
 800e084:	3fe62e42 	.word	0x3fe62e42
 800e088:	0ca86c39 	.word	0x0ca86c39
 800e08c:	be205c61 	.word	0xbe205c61
 800e090:	72bea4d0 	.word	0x72bea4d0
 800e094:	3e663769 	.word	0x3e663769
 800e098:	c5d26bf1 	.word	0xc5d26bf1
 800e09c:	3ebbbd41 	.word	0x3ebbbd41
 800e0a0:	af25de2c 	.word	0xaf25de2c
 800e0a4:	3f11566a 	.word	0x3f11566a
 800e0a8:	16bebd93 	.word	0x16bebd93
 800e0ac:	3f66c16c 	.word	0x3f66c16c
 800e0b0:	5555553e 	.word	0x5555553e
 800e0b4:	3fc55555 	.word	0x3fc55555
 800e0b8:	3fe00000 	.word	0x3fe00000
 800e0bc:	000fffff 	.word	0x000fffff
 800e0c0:	3ff00000 	.word	0x3ff00000
 800e0c4:	4090cbff 	.word	0x4090cbff
 800e0c8:	3f6f3400 	.word	0x3f6f3400
 800e0cc:	652b82fe 	.word	0x652b82fe
 800e0d0:	3c971547 	.word	0x3c971547

0800e0d4 <__ieee754_sqrt>:
 800e0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0d8:	ec55 4b10 	vmov	r4, r5, d0
 800e0dc:	4e55      	ldr	r6, [pc, #340]	; (800e234 <__ieee754_sqrt+0x160>)
 800e0de:	43ae      	bics	r6, r5
 800e0e0:	ee10 0a10 	vmov	r0, s0
 800e0e4:	ee10 3a10 	vmov	r3, s0
 800e0e8:	462a      	mov	r2, r5
 800e0ea:	4629      	mov	r1, r5
 800e0ec:	d110      	bne.n	800e110 <__ieee754_sqrt+0x3c>
 800e0ee:	ee10 2a10 	vmov	r2, s0
 800e0f2:	462b      	mov	r3, r5
 800e0f4:	f7f2 faa8 	bl	8000648 <__aeabi_dmul>
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	460b      	mov	r3, r1
 800e0fc:	4620      	mov	r0, r4
 800e0fe:	4629      	mov	r1, r5
 800e100:	f7f2 f8ec 	bl	80002dc <__adddf3>
 800e104:	4604      	mov	r4, r0
 800e106:	460d      	mov	r5, r1
 800e108:	ec45 4b10 	vmov	d0, r4, r5
 800e10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e110:	2d00      	cmp	r5, #0
 800e112:	dc10      	bgt.n	800e136 <__ieee754_sqrt+0x62>
 800e114:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e118:	4330      	orrs	r0, r6
 800e11a:	d0f5      	beq.n	800e108 <__ieee754_sqrt+0x34>
 800e11c:	b15d      	cbz	r5, 800e136 <__ieee754_sqrt+0x62>
 800e11e:	ee10 2a10 	vmov	r2, s0
 800e122:	462b      	mov	r3, r5
 800e124:	ee10 0a10 	vmov	r0, s0
 800e128:	f7f2 f8d6 	bl	80002d8 <__aeabi_dsub>
 800e12c:	4602      	mov	r2, r0
 800e12e:	460b      	mov	r3, r1
 800e130:	f7f2 fbb4 	bl	800089c <__aeabi_ddiv>
 800e134:	e7e6      	b.n	800e104 <__ieee754_sqrt+0x30>
 800e136:	1512      	asrs	r2, r2, #20
 800e138:	d074      	beq.n	800e224 <__ieee754_sqrt+0x150>
 800e13a:	07d4      	lsls	r4, r2, #31
 800e13c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e140:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e144:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e148:	bf5e      	ittt	pl
 800e14a:	0fda      	lsrpl	r2, r3, #31
 800e14c:	005b      	lslpl	r3, r3, #1
 800e14e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e152:	2400      	movs	r4, #0
 800e154:	0fda      	lsrs	r2, r3, #31
 800e156:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e15a:	107f      	asrs	r7, r7, #1
 800e15c:	005b      	lsls	r3, r3, #1
 800e15e:	2516      	movs	r5, #22
 800e160:	4620      	mov	r0, r4
 800e162:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e166:	1886      	adds	r6, r0, r2
 800e168:	428e      	cmp	r6, r1
 800e16a:	bfde      	ittt	le
 800e16c:	1b89      	suble	r1, r1, r6
 800e16e:	18b0      	addle	r0, r6, r2
 800e170:	18a4      	addle	r4, r4, r2
 800e172:	0049      	lsls	r1, r1, #1
 800e174:	3d01      	subs	r5, #1
 800e176:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e17a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e17e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e182:	d1f0      	bne.n	800e166 <__ieee754_sqrt+0x92>
 800e184:	462a      	mov	r2, r5
 800e186:	f04f 0e20 	mov.w	lr, #32
 800e18a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e18e:	4281      	cmp	r1, r0
 800e190:	eb06 0c05 	add.w	ip, r6, r5
 800e194:	dc02      	bgt.n	800e19c <__ieee754_sqrt+0xc8>
 800e196:	d113      	bne.n	800e1c0 <__ieee754_sqrt+0xec>
 800e198:	459c      	cmp	ip, r3
 800e19a:	d811      	bhi.n	800e1c0 <__ieee754_sqrt+0xec>
 800e19c:	f1bc 0f00 	cmp.w	ip, #0
 800e1a0:	eb0c 0506 	add.w	r5, ip, r6
 800e1a4:	da43      	bge.n	800e22e <__ieee754_sqrt+0x15a>
 800e1a6:	2d00      	cmp	r5, #0
 800e1a8:	db41      	blt.n	800e22e <__ieee754_sqrt+0x15a>
 800e1aa:	f100 0801 	add.w	r8, r0, #1
 800e1ae:	1a09      	subs	r1, r1, r0
 800e1b0:	459c      	cmp	ip, r3
 800e1b2:	bf88      	it	hi
 800e1b4:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800e1b8:	eba3 030c 	sub.w	r3, r3, ip
 800e1bc:	4432      	add	r2, r6
 800e1be:	4640      	mov	r0, r8
 800e1c0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e1c4:	f1be 0e01 	subs.w	lr, lr, #1
 800e1c8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e1cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e1d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e1d4:	d1db      	bne.n	800e18e <__ieee754_sqrt+0xba>
 800e1d6:	430b      	orrs	r3, r1
 800e1d8:	d006      	beq.n	800e1e8 <__ieee754_sqrt+0x114>
 800e1da:	1c50      	adds	r0, r2, #1
 800e1dc:	bf13      	iteet	ne
 800e1de:	3201      	addne	r2, #1
 800e1e0:	3401      	addeq	r4, #1
 800e1e2:	4672      	moveq	r2, lr
 800e1e4:	f022 0201 	bicne.w	r2, r2, #1
 800e1e8:	1063      	asrs	r3, r4, #1
 800e1ea:	0852      	lsrs	r2, r2, #1
 800e1ec:	07e1      	lsls	r1, r4, #31
 800e1ee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e1f2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e1f6:	bf48      	it	mi
 800e1f8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e1fc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e200:	4614      	mov	r4, r2
 800e202:	e781      	b.n	800e108 <__ieee754_sqrt+0x34>
 800e204:	0ad9      	lsrs	r1, r3, #11
 800e206:	3815      	subs	r0, #21
 800e208:	055b      	lsls	r3, r3, #21
 800e20a:	2900      	cmp	r1, #0
 800e20c:	d0fa      	beq.n	800e204 <__ieee754_sqrt+0x130>
 800e20e:	02cd      	lsls	r5, r1, #11
 800e210:	d50a      	bpl.n	800e228 <__ieee754_sqrt+0x154>
 800e212:	f1c2 0420 	rsb	r4, r2, #32
 800e216:	fa23 f404 	lsr.w	r4, r3, r4
 800e21a:	1e55      	subs	r5, r2, #1
 800e21c:	4093      	lsls	r3, r2
 800e21e:	4321      	orrs	r1, r4
 800e220:	1b42      	subs	r2, r0, r5
 800e222:	e78a      	b.n	800e13a <__ieee754_sqrt+0x66>
 800e224:	4610      	mov	r0, r2
 800e226:	e7f0      	b.n	800e20a <__ieee754_sqrt+0x136>
 800e228:	0049      	lsls	r1, r1, #1
 800e22a:	3201      	adds	r2, #1
 800e22c:	e7ef      	b.n	800e20e <__ieee754_sqrt+0x13a>
 800e22e:	4680      	mov	r8, r0
 800e230:	e7bd      	b.n	800e1ae <__ieee754_sqrt+0xda>
 800e232:	bf00      	nop
 800e234:	7ff00000 	.word	0x7ff00000

0800e238 <with_errno>:
 800e238:	b570      	push	{r4, r5, r6, lr}
 800e23a:	4604      	mov	r4, r0
 800e23c:	460d      	mov	r5, r1
 800e23e:	4616      	mov	r6, r2
 800e240:	f000 f8c4 	bl	800e3cc <__errno>
 800e244:	4629      	mov	r1, r5
 800e246:	6006      	str	r6, [r0, #0]
 800e248:	4620      	mov	r0, r4
 800e24a:	bd70      	pop	{r4, r5, r6, pc}

0800e24c <xflow>:
 800e24c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e24e:	4614      	mov	r4, r2
 800e250:	461d      	mov	r5, r3
 800e252:	b108      	cbz	r0, 800e258 <xflow+0xc>
 800e254:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e258:	e9cd 2300 	strd	r2, r3, [sp]
 800e25c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e260:	4620      	mov	r0, r4
 800e262:	4629      	mov	r1, r5
 800e264:	f7f2 f9f0 	bl	8000648 <__aeabi_dmul>
 800e268:	2222      	movs	r2, #34	; 0x22
 800e26a:	b003      	add	sp, #12
 800e26c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e270:	f7ff bfe2 	b.w	800e238 <with_errno>

0800e274 <__math_uflow>:
 800e274:	b508      	push	{r3, lr}
 800e276:	2200      	movs	r2, #0
 800e278:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e27c:	f7ff ffe6 	bl	800e24c <xflow>
 800e280:	ec41 0b10 	vmov	d0, r0, r1
 800e284:	bd08      	pop	{r3, pc}

0800e286 <__math_oflow>:
 800e286:	b508      	push	{r3, lr}
 800e288:	2200      	movs	r2, #0
 800e28a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e28e:	f7ff ffdd 	bl	800e24c <xflow>
 800e292:	ec41 0b10 	vmov	d0, r0, r1
 800e296:	bd08      	pop	{r3, pc}

0800e298 <fabs>:
 800e298:	ec51 0b10 	vmov	r0, r1, d0
 800e29c:	ee10 2a10 	vmov	r2, s0
 800e2a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e2a4:	ec43 2b10 	vmov	d0, r2, r3
 800e2a8:	4770      	bx	lr

0800e2aa <finite>:
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	ed8d 0b00 	vstr	d0, [sp]
 800e2b0:	9801      	ldr	r0, [sp, #4]
 800e2b2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e2b6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e2ba:	0fc0      	lsrs	r0, r0, #31
 800e2bc:	b002      	add	sp, #8
 800e2be:	4770      	bx	lr

0800e2c0 <scalbn>:
 800e2c0:	b570      	push	{r4, r5, r6, lr}
 800e2c2:	ec55 4b10 	vmov	r4, r5, d0
 800e2c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e2ca:	4606      	mov	r6, r0
 800e2cc:	462b      	mov	r3, r5
 800e2ce:	b99a      	cbnz	r2, 800e2f8 <scalbn+0x38>
 800e2d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e2d4:	4323      	orrs	r3, r4
 800e2d6:	d036      	beq.n	800e346 <scalbn+0x86>
 800e2d8:	4b39      	ldr	r3, [pc, #228]	; (800e3c0 <scalbn+0x100>)
 800e2da:	4629      	mov	r1, r5
 800e2dc:	ee10 0a10 	vmov	r0, s0
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	f7f2 f9b1 	bl	8000648 <__aeabi_dmul>
 800e2e6:	4b37      	ldr	r3, [pc, #220]	; (800e3c4 <scalbn+0x104>)
 800e2e8:	429e      	cmp	r6, r3
 800e2ea:	4604      	mov	r4, r0
 800e2ec:	460d      	mov	r5, r1
 800e2ee:	da10      	bge.n	800e312 <scalbn+0x52>
 800e2f0:	a32b      	add	r3, pc, #172	; (adr r3, 800e3a0 <scalbn+0xe0>)
 800e2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f6:	e03a      	b.n	800e36e <scalbn+0xae>
 800e2f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e2fc:	428a      	cmp	r2, r1
 800e2fe:	d10c      	bne.n	800e31a <scalbn+0x5a>
 800e300:	ee10 2a10 	vmov	r2, s0
 800e304:	4620      	mov	r0, r4
 800e306:	4629      	mov	r1, r5
 800e308:	f7f1 ffe8 	bl	80002dc <__adddf3>
 800e30c:	4604      	mov	r4, r0
 800e30e:	460d      	mov	r5, r1
 800e310:	e019      	b.n	800e346 <scalbn+0x86>
 800e312:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e316:	460b      	mov	r3, r1
 800e318:	3a36      	subs	r2, #54	; 0x36
 800e31a:	4432      	add	r2, r6
 800e31c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e320:	428a      	cmp	r2, r1
 800e322:	dd08      	ble.n	800e336 <scalbn+0x76>
 800e324:	2d00      	cmp	r5, #0
 800e326:	a120      	add	r1, pc, #128	; (adr r1, 800e3a8 <scalbn+0xe8>)
 800e328:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e32c:	da1c      	bge.n	800e368 <scalbn+0xa8>
 800e32e:	a120      	add	r1, pc, #128	; (adr r1, 800e3b0 <scalbn+0xf0>)
 800e330:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e334:	e018      	b.n	800e368 <scalbn+0xa8>
 800e336:	2a00      	cmp	r2, #0
 800e338:	dd08      	ble.n	800e34c <scalbn+0x8c>
 800e33a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e33e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e342:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e346:	ec45 4b10 	vmov	d0, r4, r5
 800e34a:	bd70      	pop	{r4, r5, r6, pc}
 800e34c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e350:	da19      	bge.n	800e386 <scalbn+0xc6>
 800e352:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e356:	429e      	cmp	r6, r3
 800e358:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e35c:	dd0a      	ble.n	800e374 <scalbn+0xb4>
 800e35e:	a112      	add	r1, pc, #72	; (adr r1, 800e3a8 <scalbn+0xe8>)
 800e360:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d1e2      	bne.n	800e32e <scalbn+0x6e>
 800e368:	a30f      	add	r3, pc, #60	; (adr r3, 800e3a8 <scalbn+0xe8>)
 800e36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36e:	f7f2 f96b 	bl	8000648 <__aeabi_dmul>
 800e372:	e7cb      	b.n	800e30c <scalbn+0x4c>
 800e374:	a10a      	add	r1, pc, #40	; (adr r1, 800e3a0 <scalbn+0xe0>)
 800e376:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d0b8      	beq.n	800e2f0 <scalbn+0x30>
 800e37e:	a10e      	add	r1, pc, #56	; (adr r1, 800e3b8 <scalbn+0xf8>)
 800e380:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e384:	e7b4      	b.n	800e2f0 <scalbn+0x30>
 800e386:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e38a:	3236      	adds	r2, #54	; 0x36
 800e38c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e390:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e394:	4620      	mov	r0, r4
 800e396:	4b0c      	ldr	r3, [pc, #48]	; (800e3c8 <scalbn+0x108>)
 800e398:	2200      	movs	r2, #0
 800e39a:	e7e8      	b.n	800e36e <scalbn+0xae>
 800e39c:	f3af 8000 	nop.w
 800e3a0:	c2f8f359 	.word	0xc2f8f359
 800e3a4:	01a56e1f 	.word	0x01a56e1f
 800e3a8:	8800759c 	.word	0x8800759c
 800e3ac:	7e37e43c 	.word	0x7e37e43c
 800e3b0:	8800759c 	.word	0x8800759c
 800e3b4:	fe37e43c 	.word	0xfe37e43c
 800e3b8:	c2f8f359 	.word	0xc2f8f359
 800e3bc:	81a56e1f 	.word	0x81a56e1f
 800e3c0:	43500000 	.word	0x43500000
 800e3c4:	ffff3cb0 	.word	0xffff3cb0
 800e3c8:	3c900000 	.word	0x3c900000

0800e3cc <__errno>:
 800e3cc:	4b01      	ldr	r3, [pc, #4]	; (800e3d4 <__errno+0x8>)
 800e3ce:	6818      	ldr	r0, [r3, #0]
 800e3d0:	4770      	bx	lr
 800e3d2:	bf00      	nop
 800e3d4:	20001278 	.word	0x20001278

0800e3d8 <__libc_init_array>:
 800e3d8:	b570      	push	{r4, r5, r6, lr}
 800e3da:	4d0d      	ldr	r5, [pc, #52]	; (800e410 <__libc_init_array+0x38>)
 800e3dc:	4c0d      	ldr	r4, [pc, #52]	; (800e414 <__libc_init_array+0x3c>)
 800e3de:	1b64      	subs	r4, r4, r5
 800e3e0:	10a4      	asrs	r4, r4, #2
 800e3e2:	2600      	movs	r6, #0
 800e3e4:	42a6      	cmp	r6, r4
 800e3e6:	d109      	bne.n	800e3fc <__libc_init_array+0x24>
 800e3e8:	4d0b      	ldr	r5, [pc, #44]	; (800e418 <__libc_init_array+0x40>)
 800e3ea:	4c0c      	ldr	r4, [pc, #48]	; (800e41c <__libc_init_array+0x44>)
 800e3ec:	f004 fd38 	bl	8012e60 <_init>
 800e3f0:	1b64      	subs	r4, r4, r5
 800e3f2:	10a4      	asrs	r4, r4, #2
 800e3f4:	2600      	movs	r6, #0
 800e3f6:	42a6      	cmp	r6, r4
 800e3f8:	d105      	bne.n	800e406 <__libc_init_array+0x2e>
 800e3fa:	bd70      	pop	{r4, r5, r6, pc}
 800e3fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e400:	4798      	blx	r3
 800e402:	3601      	adds	r6, #1
 800e404:	e7ee      	b.n	800e3e4 <__libc_init_array+0xc>
 800e406:	f855 3b04 	ldr.w	r3, [r5], #4
 800e40a:	4798      	blx	r3
 800e40c:	3601      	adds	r6, #1
 800e40e:	e7f2      	b.n	800e3f6 <__libc_init_array+0x1e>
 800e410:	080140c0 	.word	0x080140c0
 800e414:	080140c0 	.word	0x080140c0
 800e418:	080140c0 	.word	0x080140c0
 800e41c:	080140c4 	.word	0x080140c4

0800e420 <malloc>:
 800e420:	4b02      	ldr	r3, [pc, #8]	; (800e42c <malloc+0xc>)
 800e422:	4601      	mov	r1, r0
 800e424:	6818      	ldr	r0, [r3, #0]
 800e426:	f000 b87f 	b.w	800e528 <_malloc_r>
 800e42a:	bf00      	nop
 800e42c:	20001278 	.word	0x20001278

0800e430 <free>:
 800e430:	4b02      	ldr	r3, [pc, #8]	; (800e43c <free+0xc>)
 800e432:	4601      	mov	r1, r0
 800e434:	6818      	ldr	r0, [r3, #0]
 800e436:	f000 b80b 	b.w	800e450 <_free_r>
 800e43a:	bf00      	nop
 800e43c:	20001278 	.word	0x20001278

0800e440 <memset>:
 800e440:	4402      	add	r2, r0
 800e442:	4603      	mov	r3, r0
 800e444:	4293      	cmp	r3, r2
 800e446:	d100      	bne.n	800e44a <memset+0xa>
 800e448:	4770      	bx	lr
 800e44a:	f803 1b01 	strb.w	r1, [r3], #1
 800e44e:	e7f9      	b.n	800e444 <memset+0x4>

0800e450 <_free_r>:
 800e450:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e452:	2900      	cmp	r1, #0
 800e454:	d044      	beq.n	800e4e0 <_free_r+0x90>
 800e456:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e45a:	9001      	str	r0, [sp, #4]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	f1a1 0404 	sub.w	r4, r1, #4
 800e462:	bfb8      	it	lt
 800e464:	18e4      	addlt	r4, r4, r3
 800e466:	f003 f905 	bl	8011674 <__malloc_lock>
 800e46a:	4a1e      	ldr	r2, [pc, #120]	; (800e4e4 <_free_r+0x94>)
 800e46c:	9801      	ldr	r0, [sp, #4]
 800e46e:	6813      	ldr	r3, [r2, #0]
 800e470:	b933      	cbnz	r3, 800e480 <_free_r+0x30>
 800e472:	6063      	str	r3, [r4, #4]
 800e474:	6014      	str	r4, [r2, #0]
 800e476:	b003      	add	sp, #12
 800e478:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e47c:	f003 b900 	b.w	8011680 <__malloc_unlock>
 800e480:	42a3      	cmp	r3, r4
 800e482:	d908      	bls.n	800e496 <_free_r+0x46>
 800e484:	6825      	ldr	r5, [r4, #0]
 800e486:	1961      	adds	r1, r4, r5
 800e488:	428b      	cmp	r3, r1
 800e48a:	bf01      	itttt	eq
 800e48c:	6819      	ldreq	r1, [r3, #0]
 800e48e:	685b      	ldreq	r3, [r3, #4]
 800e490:	1949      	addeq	r1, r1, r5
 800e492:	6021      	streq	r1, [r4, #0]
 800e494:	e7ed      	b.n	800e472 <_free_r+0x22>
 800e496:	461a      	mov	r2, r3
 800e498:	685b      	ldr	r3, [r3, #4]
 800e49a:	b10b      	cbz	r3, 800e4a0 <_free_r+0x50>
 800e49c:	42a3      	cmp	r3, r4
 800e49e:	d9fa      	bls.n	800e496 <_free_r+0x46>
 800e4a0:	6811      	ldr	r1, [r2, #0]
 800e4a2:	1855      	adds	r5, r2, r1
 800e4a4:	42a5      	cmp	r5, r4
 800e4a6:	d10b      	bne.n	800e4c0 <_free_r+0x70>
 800e4a8:	6824      	ldr	r4, [r4, #0]
 800e4aa:	4421      	add	r1, r4
 800e4ac:	1854      	adds	r4, r2, r1
 800e4ae:	42a3      	cmp	r3, r4
 800e4b0:	6011      	str	r1, [r2, #0]
 800e4b2:	d1e0      	bne.n	800e476 <_free_r+0x26>
 800e4b4:	681c      	ldr	r4, [r3, #0]
 800e4b6:	685b      	ldr	r3, [r3, #4]
 800e4b8:	6053      	str	r3, [r2, #4]
 800e4ba:	4421      	add	r1, r4
 800e4bc:	6011      	str	r1, [r2, #0]
 800e4be:	e7da      	b.n	800e476 <_free_r+0x26>
 800e4c0:	d902      	bls.n	800e4c8 <_free_r+0x78>
 800e4c2:	230c      	movs	r3, #12
 800e4c4:	6003      	str	r3, [r0, #0]
 800e4c6:	e7d6      	b.n	800e476 <_free_r+0x26>
 800e4c8:	6825      	ldr	r5, [r4, #0]
 800e4ca:	1961      	adds	r1, r4, r5
 800e4cc:	428b      	cmp	r3, r1
 800e4ce:	bf04      	itt	eq
 800e4d0:	6819      	ldreq	r1, [r3, #0]
 800e4d2:	685b      	ldreq	r3, [r3, #4]
 800e4d4:	6063      	str	r3, [r4, #4]
 800e4d6:	bf04      	itt	eq
 800e4d8:	1949      	addeq	r1, r1, r5
 800e4da:	6021      	streq	r1, [r4, #0]
 800e4dc:	6054      	str	r4, [r2, #4]
 800e4de:	e7ca      	b.n	800e476 <_free_r+0x26>
 800e4e0:	b003      	add	sp, #12
 800e4e2:	bd30      	pop	{r4, r5, pc}
 800e4e4:	20013ef0 	.word	0x20013ef0

0800e4e8 <sbrk_aligned>:
 800e4e8:	b570      	push	{r4, r5, r6, lr}
 800e4ea:	4e0e      	ldr	r6, [pc, #56]	; (800e524 <sbrk_aligned+0x3c>)
 800e4ec:	460c      	mov	r4, r1
 800e4ee:	6831      	ldr	r1, [r6, #0]
 800e4f0:	4605      	mov	r5, r0
 800e4f2:	b911      	cbnz	r1, 800e4fa <sbrk_aligned+0x12>
 800e4f4:	f000 ff72 	bl	800f3dc <_sbrk_r>
 800e4f8:	6030      	str	r0, [r6, #0]
 800e4fa:	4621      	mov	r1, r4
 800e4fc:	4628      	mov	r0, r5
 800e4fe:	f000 ff6d 	bl	800f3dc <_sbrk_r>
 800e502:	1c43      	adds	r3, r0, #1
 800e504:	d00a      	beq.n	800e51c <sbrk_aligned+0x34>
 800e506:	1cc4      	adds	r4, r0, #3
 800e508:	f024 0403 	bic.w	r4, r4, #3
 800e50c:	42a0      	cmp	r0, r4
 800e50e:	d007      	beq.n	800e520 <sbrk_aligned+0x38>
 800e510:	1a21      	subs	r1, r4, r0
 800e512:	4628      	mov	r0, r5
 800e514:	f000 ff62 	bl	800f3dc <_sbrk_r>
 800e518:	3001      	adds	r0, #1
 800e51a:	d101      	bne.n	800e520 <sbrk_aligned+0x38>
 800e51c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e520:	4620      	mov	r0, r4
 800e522:	bd70      	pop	{r4, r5, r6, pc}
 800e524:	20013ef4 	.word	0x20013ef4

0800e528 <_malloc_r>:
 800e528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e52c:	1ccd      	adds	r5, r1, #3
 800e52e:	f025 0503 	bic.w	r5, r5, #3
 800e532:	3508      	adds	r5, #8
 800e534:	2d0c      	cmp	r5, #12
 800e536:	bf38      	it	cc
 800e538:	250c      	movcc	r5, #12
 800e53a:	2d00      	cmp	r5, #0
 800e53c:	4607      	mov	r7, r0
 800e53e:	db01      	blt.n	800e544 <_malloc_r+0x1c>
 800e540:	42a9      	cmp	r1, r5
 800e542:	d905      	bls.n	800e550 <_malloc_r+0x28>
 800e544:	230c      	movs	r3, #12
 800e546:	603b      	str	r3, [r7, #0]
 800e548:	2600      	movs	r6, #0
 800e54a:	4630      	mov	r0, r6
 800e54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e550:	4e2e      	ldr	r6, [pc, #184]	; (800e60c <_malloc_r+0xe4>)
 800e552:	f003 f88f 	bl	8011674 <__malloc_lock>
 800e556:	6833      	ldr	r3, [r6, #0]
 800e558:	461c      	mov	r4, r3
 800e55a:	bb34      	cbnz	r4, 800e5aa <_malloc_r+0x82>
 800e55c:	4629      	mov	r1, r5
 800e55e:	4638      	mov	r0, r7
 800e560:	f7ff ffc2 	bl	800e4e8 <sbrk_aligned>
 800e564:	1c43      	adds	r3, r0, #1
 800e566:	4604      	mov	r4, r0
 800e568:	d14d      	bne.n	800e606 <_malloc_r+0xde>
 800e56a:	6834      	ldr	r4, [r6, #0]
 800e56c:	4626      	mov	r6, r4
 800e56e:	2e00      	cmp	r6, #0
 800e570:	d140      	bne.n	800e5f4 <_malloc_r+0xcc>
 800e572:	6823      	ldr	r3, [r4, #0]
 800e574:	4631      	mov	r1, r6
 800e576:	4638      	mov	r0, r7
 800e578:	eb04 0803 	add.w	r8, r4, r3
 800e57c:	f000 ff2e 	bl	800f3dc <_sbrk_r>
 800e580:	4580      	cmp	r8, r0
 800e582:	d13a      	bne.n	800e5fa <_malloc_r+0xd2>
 800e584:	6821      	ldr	r1, [r4, #0]
 800e586:	3503      	adds	r5, #3
 800e588:	1a6d      	subs	r5, r5, r1
 800e58a:	f025 0503 	bic.w	r5, r5, #3
 800e58e:	3508      	adds	r5, #8
 800e590:	2d0c      	cmp	r5, #12
 800e592:	bf38      	it	cc
 800e594:	250c      	movcc	r5, #12
 800e596:	4629      	mov	r1, r5
 800e598:	4638      	mov	r0, r7
 800e59a:	f7ff ffa5 	bl	800e4e8 <sbrk_aligned>
 800e59e:	3001      	adds	r0, #1
 800e5a0:	d02b      	beq.n	800e5fa <_malloc_r+0xd2>
 800e5a2:	6823      	ldr	r3, [r4, #0]
 800e5a4:	442b      	add	r3, r5
 800e5a6:	6023      	str	r3, [r4, #0]
 800e5a8:	e00e      	b.n	800e5c8 <_malloc_r+0xa0>
 800e5aa:	6822      	ldr	r2, [r4, #0]
 800e5ac:	1b52      	subs	r2, r2, r5
 800e5ae:	d41e      	bmi.n	800e5ee <_malloc_r+0xc6>
 800e5b0:	2a0b      	cmp	r2, #11
 800e5b2:	d916      	bls.n	800e5e2 <_malloc_r+0xba>
 800e5b4:	1961      	adds	r1, r4, r5
 800e5b6:	42a3      	cmp	r3, r4
 800e5b8:	6025      	str	r5, [r4, #0]
 800e5ba:	bf18      	it	ne
 800e5bc:	6059      	strne	r1, [r3, #4]
 800e5be:	6863      	ldr	r3, [r4, #4]
 800e5c0:	bf08      	it	eq
 800e5c2:	6031      	streq	r1, [r6, #0]
 800e5c4:	5162      	str	r2, [r4, r5]
 800e5c6:	604b      	str	r3, [r1, #4]
 800e5c8:	4638      	mov	r0, r7
 800e5ca:	f104 060b 	add.w	r6, r4, #11
 800e5ce:	f003 f857 	bl	8011680 <__malloc_unlock>
 800e5d2:	f026 0607 	bic.w	r6, r6, #7
 800e5d6:	1d23      	adds	r3, r4, #4
 800e5d8:	1af2      	subs	r2, r6, r3
 800e5da:	d0b6      	beq.n	800e54a <_malloc_r+0x22>
 800e5dc:	1b9b      	subs	r3, r3, r6
 800e5de:	50a3      	str	r3, [r4, r2]
 800e5e0:	e7b3      	b.n	800e54a <_malloc_r+0x22>
 800e5e2:	6862      	ldr	r2, [r4, #4]
 800e5e4:	42a3      	cmp	r3, r4
 800e5e6:	bf0c      	ite	eq
 800e5e8:	6032      	streq	r2, [r6, #0]
 800e5ea:	605a      	strne	r2, [r3, #4]
 800e5ec:	e7ec      	b.n	800e5c8 <_malloc_r+0xa0>
 800e5ee:	4623      	mov	r3, r4
 800e5f0:	6864      	ldr	r4, [r4, #4]
 800e5f2:	e7b2      	b.n	800e55a <_malloc_r+0x32>
 800e5f4:	4634      	mov	r4, r6
 800e5f6:	6876      	ldr	r6, [r6, #4]
 800e5f8:	e7b9      	b.n	800e56e <_malloc_r+0x46>
 800e5fa:	230c      	movs	r3, #12
 800e5fc:	603b      	str	r3, [r7, #0]
 800e5fe:	4638      	mov	r0, r7
 800e600:	f003 f83e 	bl	8011680 <__malloc_unlock>
 800e604:	e7a1      	b.n	800e54a <_malloc_r+0x22>
 800e606:	6025      	str	r5, [r4, #0]
 800e608:	e7de      	b.n	800e5c8 <_malloc_r+0xa0>
 800e60a:	bf00      	nop
 800e60c:	20013ef0 	.word	0x20013ef0

0800e610 <__cvt>:
 800e610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e614:	ec55 4b10 	vmov	r4, r5, d0
 800e618:	2d00      	cmp	r5, #0
 800e61a:	460e      	mov	r6, r1
 800e61c:	4619      	mov	r1, r3
 800e61e:	462b      	mov	r3, r5
 800e620:	bfbb      	ittet	lt
 800e622:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e626:	461d      	movlt	r5, r3
 800e628:	2300      	movge	r3, #0
 800e62a:	232d      	movlt	r3, #45	; 0x2d
 800e62c:	700b      	strb	r3, [r1, #0]
 800e62e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e630:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e634:	4691      	mov	r9, r2
 800e636:	f023 0820 	bic.w	r8, r3, #32
 800e63a:	bfbc      	itt	lt
 800e63c:	4622      	movlt	r2, r4
 800e63e:	4614      	movlt	r4, r2
 800e640:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e644:	d005      	beq.n	800e652 <__cvt+0x42>
 800e646:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e64a:	d100      	bne.n	800e64e <__cvt+0x3e>
 800e64c:	3601      	adds	r6, #1
 800e64e:	2102      	movs	r1, #2
 800e650:	e000      	b.n	800e654 <__cvt+0x44>
 800e652:	2103      	movs	r1, #3
 800e654:	ab03      	add	r3, sp, #12
 800e656:	9301      	str	r3, [sp, #4]
 800e658:	ab02      	add	r3, sp, #8
 800e65a:	9300      	str	r3, [sp, #0]
 800e65c:	ec45 4b10 	vmov	d0, r4, r5
 800e660:	4653      	mov	r3, sl
 800e662:	4632      	mov	r2, r6
 800e664:	f001 fe60 	bl	8010328 <_dtoa_r>
 800e668:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e66c:	4607      	mov	r7, r0
 800e66e:	d102      	bne.n	800e676 <__cvt+0x66>
 800e670:	f019 0f01 	tst.w	r9, #1
 800e674:	d022      	beq.n	800e6bc <__cvt+0xac>
 800e676:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e67a:	eb07 0906 	add.w	r9, r7, r6
 800e67e:	d110      	bne.n	800e6a2 <__cvt+0x92>
 800e680:	783b      	ldrb	r3, [r7, #0]
 800e682:	2b30      	cmp	r3, #48	; 0x30
 800e684:	d10a      	bne.n	800e69c <__cvt+0x8c>
 800e686:	2200      	movs	r2, #0
 800e688:	2300      	movs	r3, #0
 800e68a:	4620      	mov	r0, r4
 800e68c:	4629      	mov	r1, r5
 800e68e:	f7f2 fa43 	bl	8000b18 <__aeabi_dcmpeq>
 800e692:	b918      	cbnz	r0, 800e69c <__cvt+0x8c>
 800e694:	f1c6 0601 	rsb	r6, r6, #1
 800e698:	f8ca 6000 	str.w	r6, [sl]
 800e69c:	f8da 3000 	ldr.w	r3, [sl]
 800e6a0:	4499      	add	r9, r3
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	4620      	mov	r0, r4
 800e6a8:	4629      	mov	r1, r5
 800e6aa:	f7f2 fa35 	bl	8000b18 <__aeabi_dcmpeq>
 800e6ae:	b108      	cbz	r0, 800e6b4 <__cvt+0xa4>
 800e6b0:	f8cd 900c 	str.w	r9, [sp, #12]
 800e6b4:	2230      	movs	r2, #48	; 0x30
 800e6b6:	9b03      	ldr	r3, [sp, #12]
 800e6b8:	454b      	cmp	r3, r9
 800e6ba:	d307      	bcc.n	800e6cc <__cvt+0xbc>
 800e6bc:	9b03      	ldr	r3, [sp, #12]
 800e6be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e6c0:	1bdb      	subs	r3, r3, r7
 800e6c2:	4638      	mov	r0, r7
 800e6c4:	6013      	str	r3, [r2, #0]
 800e6c6:	b004      	add	sp, #16
 800e6c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6cc:	1c59      	adds	r1, r3, #1
 800e6ce:	9103      	str	r1, [sp, #12]
 800e6d0:	701a      	strb	r2, [r3, #0]
 800e6d2:	e7f0      	b.n	800e6b6 <__cvt+0xa6>

0800e6d4 <__exponent>:
 800e6d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	2900      	cmp	r1, #0
 800e6da:	bfb8      	it	lt
 800e6dc:	4249      	neglt	r1, r1
 800e6de:	f803 2b02 	strb.w	r2, [r3], #2
 800e6e2:	bfb4      	ite	lt
 800e6e4:	222d      	movlt	r2, #45	; 0x2d
 800e6e6:	222b      	movge	r2, #43	; 0x2b
 800e6e8:	2909      	cmp	r1, #9
 800e6ea:	7042      	strb	r2, [r0, #1]
 800e6ec:	dd2a      	ble.n	800e744 <__exponent+0x70>
 800e6ee:	f10d 0407 	add.w	r4, sp, #7
 800e6f2:	46a4      	mov	ip, r4
 800e6f4:	270a      	movs	r7, #10
 800e6f6:	46a6      	mov	lr, r4
 800e6f8:	460a      	mov	r2, r1
 800e6fa:	fb91 f6f7 	sdiv	r6, r1, r7
 800e6fe:	fb07 1516 	mls	r5, r7, r6, r1
 800e702:	3530      	adds	r5, #48	; 0x30
 800e704:	2a63      	cmp	r2, #99	; 0x63
 800e706:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800e70a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e70e:	4631      	mov	r1, r6
 800e710:	dcf1      	bgt.n	800e6f6 <__exponent+0x22>
 800e712:	3130      	adds	r1, #48	; 0x30
 800e714:	f1ae 0502 	sub.w	r5, lr, #2
 800e718:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e71c:	1c44      	adds	r4, r0, #1
 800e71e:	4629      	mov	r1, r5
 800e720:	4561      	cmp	r1, ip
 800e722:	d30a      	bcc.n	800e73a <__exponent+0x66>
 800e724:	f10d 0209 	add.w	r2, sp, #9
 800e728:	eba2 020e 	sub.w	r2, r2, lr
 800e72c:	4565      	cmp	r5, ip
 800e72e:	bf88      	it	hi
 800e730:	2200      	movhi	r2, #0
 800e732:	4413      	add	r3, r2
 800e734:	1a18      	subs	r0, r3, r0
 800e736:	b003      	add	sp, #12
 800e738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e73a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e73e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e742:	e7ed      	b.n	800e720 <__exponent+0x4c>
 800e744:	2330      	movs	r3, #48	; 0x30
 800e746:	3130      	adds	r1, #48	; 0x30
 800e748:	7083      	strb	r3, [r0, #2]
 800e74a:	70c1      	strb	r1, [r0, #3]
 800e74c:	1d03      	adds	r3, r0, #4
 800e74e:	e7f1      	b.n	800e734 <__exponent+0x60>

0800e750 <_printf_float>:
 800e750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e754:	ed2d 8b02 	vpush	{d8}
 800e758:	b08d      	sub	sp, #52	; 0x34
 800e75a:	460c      	mov	r4, r1
 800e75c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e760:	4616      	mov	r6, r2
 800e762:	461f      	mov	r7, r3
 800e764:	4605      	mov	r5, r0
 800e766:	f002 ff61 	bl	801162c <_localeconv_r>
 800e76a:	f8d0 a000 	ldr.w	sl, [r0]
 800e76e:	4650      	mov	r0, sl
 800e770:	f7f1 fd56 	bl	8000220 <strlen>
 800e774:	2300      	movs	r3, #0
 800e776:	930a      	str	r3, [sp, #40]	; 0x28
 800e778:	6823      	ldr	r3, [r4, #0]
 800e77a:	9305      	str	r3, [sp, #20]
 800e77c:	f8d8 3000 	ldr.w	r3, [r8]
 800e780:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e784:	3307      	adds	r3, #7
 800e786:	f023 0307 	bic.w	r3, r3, #7
 800e78a:	f103 0208 	add.w	r2, r3, #8
 800e78e:	f8c8 2000 	str.w	r2, [r8]
 800e792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e796:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e79a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e79e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e7a2:	9307      	str	r3, [sp, #28]
 800e7a4:	f8cd 8018 	str.w	r8, [sp, #24]
 800e7a8:	ee08 0a10 	vmov	s16, r0
 800e7ac:	4b9f      	ldr	r3, [pc, #636]	; (800ea2c <_printf_float+0x2dc>)
 800e7ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e7b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e7b6:	f7f2 f9e1 	bl	8000b7c <__aeabi_dcmpun>
 800e7ba:	bb88      	cbnz	r0, 800e820 <_printf_float+0xd0>
 800e7bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e7c0:	4b9a      	ldr	r3, [pc, #616]	; (800ea2c <_printf_float+0x2dc>)
 800e7c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e7c6:	f7f2 f9bb 	bl	8000b40 <__aeabi_dcmple>
 800e7ca:	bb48      	cbnz	r0, 800e820 <_printf_float+0xd0>
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	4640      	mov	r0, r8
 800e7d2:	4649      	mov	r1, r9
 800e7d4:	f7f2 f9aa 	bl	8000b2c <__aeabi_dcmplt>
 800e7d8:	b110      	cbz	r0, 800e7e0 <_printf_float+0x90>
 800e7da:	232d      	movs	r3, #45	; 0x2d
 800e7dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7e0:	4b93      	ldr	r3, [pc, #588]	; (800ea30 <_printf_float+0x2e0>)
 800e7e2:	4894      	ldr	r0, [pc, #592]	; (800ea34 <_printf_float+0x2e4>)
 800e7e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e7e8:	bf94      	ite	ls
 800e7ea:	4698      	movls	r8, r3
 800e7ec:	4680      	movhi	r8, r0
 800e7ee:	2303      	movs	r3, #3
 800e7f0:	6123      	str	r3, [r4, #16]
 800e7f2:	9b05      	ldr	r3, [sp, #20]
 800e7f4:	f023 0204 	bic.w	r2, r3, #4
 800e7f8:	6022      	str	r2, [r4, #0]
 800e7fa:	f04f 0900 	mov.w	r9, #0
 800e7fe:	9700      	str	r7, [sp, #0]
 800e800:	4633      	mov	r3, r6
 800e802:	aa0b      	add	r2, sp, #44	; 0x2c
 800e804:	4621      	mov	r1, r4
 800e806:	4628      	mov	r0, r5
 800e808:	f000 f9d8 	bl	800ebbc <_printf_common>
 800e80c:	3001      	adds	r0, #1
 800e80e:	f040 8090 	bne.w	800e932 <_printf_float+0x1e2>
 800e812:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e816:	b00d      	add	sp, #52	; 0x34
 800e818:	ecbd 8b02 	vpop	{d8}
 800e81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e820:	4642      	mov	r2, r8
 800e822:	464b      	mov	r3, r9
 800e824:	4640      	mov	r0, r8
 800e826:	4649      	mov	r1, r9
 800e828:	f7f2 f9a8 	bl	8000b7c <__aeabi_dcmpun>
 800e82c:	b140      	cbz	r0, 800e840 <_printf_float+0xf0>
 800e82e:	464b      	mov	r3, r9
 800e830:	2b00      	cmp	r3, #0
 800e832:	bfbc      	itt	lt
 800e834:	232d      	movlt	r3, #45	; 0x2d
 800e836:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e83a:	487f      	ldr	r0, [pc, #508]	; (800ea38 <_printf_float+0x2e8>)
 800e83c:	4b7f      	ldr	r3, [pc, #508]	; (800ea3c <_printf_float+0x2ec>)
 800e83e:	e7d1      	b.n	800e7e4 <_printf_float+0x94>
 800e840:	6863      	ldr	r3, [r4, #4]
 800e842:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e846:	9206      	str	r2, [sp, #24]
 800e848:	1c5a      	adds	r2, r3, #1
 800e84a:	d13f      	bne.n	800e8cc <_printf_float+0x17c>
 800e84c:	2306      	movs	r3, #6
 800e84e:	6063      	str	r3, [r4, #4]
 800e850:	9b05      	ldr	r3, [sp, #20]
 800e852:	6861      	ldr	r1, [r4, #4]
 800e854:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e858:	2300      	movs	r3, #0
 800e85a:	9303      	str	r3, [sp, #12]
 800e85c:	ab0a      	add	r3, sp, #40	; 0x28
 800e85e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e862:	ab09      	add	r3, sp, #36	; 0x24
 800e864:	ec49 8b10 	vmov	d0, r8, r9
 800e868:	9300      	str	r3, [sp, #0]
 800e86a:	6022      	str	r2, [r4, #0]
 800e86c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e870:	4628      	mov	r0, r5
 800e872:	f7ff fecd 	bl	800e610 <__cvt>
 800e876:	9b06      	ldr	r3, [sp, #24]
 800e878:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e87a:	2b47      	cmp	r3, #71	; 0x47
 800e87c:	4680      	mov	r8, r0
 800e87e:	d108      	bne.n	800e892 <_printf_float+0x142>
 800e880:	1cc8      	adds	r0, r1, #3
 800e882:	db02      	blt.n	800e88a <_printf_float+0x13a>
 800e884:	6863      	ldr	r3, [r4, #4]
 800e886:	4299      	cmp	r1, r3
 800e888:	dd41      	ble.n	800e90e <_printf_float+0x1be>
 800e88a:	f1ab 0b02 	sub.w	fp, fp, #2
 800e88e:	fa5f fb8b 	uxtb.w	fp, fp
 800e892:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e896:	d820      	bhi.n	800e8da <_printf_float+0x18a>
 800e898:	3901      	subs	r1, #1
 800e89a:	465a      	mov	r2, fp
 800e89c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e8a0:	9109      	str	r1, [sp, #36]	; 0x24
 800e8a2:	f7ff ff17 	bl	800e6d4 <__exponent>
 800e8a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e8a8:	1813      	adds	r3, r2, r0
 800e8aa:	2a01      	cmp	r2, #1
 800e8ac:	4681      	mov	r9, r0
 800e8ae:	6123      	str	r3, [r4, #16]
 800e8b0:	dc02      	bgt.n	800e8b8 <_printf_float+0x168>
 800e8b2:	6822      	ldr	r2, [r4, #0]
 800e8b4:	07d2      	lsls	r2, r2, #31
 800e8b6:	d501      	bpl.n	800e8bc <_printf_float+0x16c>
 800e8b8:	3301      	adds	r3, #1
 800e8ba:	6123      	str	r3, [r4, #16]
 800e8bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d09c      	beq.n	800e7fe <_printf_float+0xae>
 800e8c4:	232d      	movs	r3, #45	; 0x2d
 800e8c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8ca:	e798      	b.n	800e7fe <_printf_float+0xae>
 800e8cc:	9a06      	ldr	r2, [sp, #24]
 800e8ce:	2a47      	cmp	r2, #71	; 0x47
 800e8d0:	d1be      	bne.n	800e850 <_printf_float+0x100>
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d1bc      	bne.n	800e850 <_printf_float+0x100>
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	e7b9      	b.n	800e84e <_printf_float+0xfe>
 800e8da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e8de:	d118      	bne.n	800e912 <_printf_float+0x1c2>
 800e8e0:	2900      	cmp	r1, #0
 800e8e2:	6863      	ldr	r3, [r4, #4]
 800e8e4:	dd0b      	ble.n	800e8fe <_printf_float+0x1ae>
 800e8e6:	6121      	str	r1, [r4, #16]
 800e8e8:	b913      	cbnz	r3, 800e8f0 <_printf_float+0x1a0>
 800e8ea:	6822      	ldr	r2, [r4, #0]
 800e8ec:	07d0      	lsls	r0, r2, #31
 800e8ee:	d502      	bpl.n	800e8f6 <_printf_float+0x1a6>
 800e8f0:	3301      	adds	r3, #1
 800e8f2:	440b      	add	r3, r1
 800e8f4:	6123      	str	r3, [r4, #16]
 800e8f6:	65a1      	str	r1, [r4, #88]	; 0x58
 800e8f8:	f04f 0900 	mov.w	r9, #0
 800e8fc:	e7de      	b.n	800e8bc <_printf_float+0x16c>
 800e8fe:	b913      	cbnz	r3, 800e906 <_printf_float+0x1b6>
 800e900:	6822      	ldr	r2, [r4, #0]
 800e902:	07d2      	lsls	r2, r2, #31
 800e904:	d501      	bpl.n	800e90a <_printf_float+0x1ba>
 800e906:	3302      	adds	r3, #2
 800e908:	e7f4      	b.n	800e8f4 <_printf_float+0x1a4>
 800e90a:	2301      	movs	r3, #1
 800e90c:	e7f2      	b.n	800e8f4 <_printf_float+0x1a4>
 800e90e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e914:	4299      	cmp	r1, r3
 800e916:	db05      	blt.n	800e924 <_printf_float+0x1d4>
 800e918:	6823      	ldr	r3, [r4, #0]
 800e91a:	6121      	str	r1, [r4, #16]
 800e91c:	07d8      	lsls	r0, r3, #31
 800e91e:	d5ea      	bpl.n	800e8f6 <_printf_float+0x1a6>
 800e920:	1c4b      	adds	r3, r1, #1
 800e922:	e7e7      	b.n	800e8f4 <_printf_float+0x1a4>
 800e924:	2900      	cmp	r1, #0
 800e926:	bfd4      	ite	le
 800e928:	f1c1 0202 	rsble	r2, r1, #2
 800e92c:	2201      	movgt	r2, #1
 800e92e:	4413      	add	r3, r2
 800e930:	e7e0      	b.n	800e8f4 <_printf_float+0x1a4>
 800e932:	6823      	ldr	r3, [r4, #0]
 800e934:	055a      	lsls	r2, r3, #21
 800e936:	d407      	bmi.n	800e948 <_printf_float+0x1f8>
 800e938:	6923      	ldr	r3, [r4, #16]
 800e93a:	4642      	mov	r2, r8
 800e93c:	4631      	mov	r1, r6
 800e93e:	4628      	mov	r0, r5
 800e940:	47b8      	blx	r7
 800e942:	3001      	adds	r0, #1
 800e944:	d12c      	bne.n	800e9a0 <_printf_float+0x250>
 800e946:	e764      	b.n	800e812 <_printf_float+0xc2>
 800e948:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e94c:	f240 80e0 	bls.w	800eb10 <_printf_float+0x3c0>
 800e950:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e954:	2200      	movs	r2, #0
 800e956:	2300      	movs	r3, #0
 800e958:	f7f2 f8de 	bl	8000b18 <__aeabi_dcmpeq>
 800e95c:	2800      	cmp	r0, #0
 800e95e:	d034      	beq.n	800e9ca <_printf_float+0x27a>
 800e960:	4a37      	ldr	r2, [pc, #220]	; (800ea40 <_printf_float+0x2f0>)
 800e962:	2301      	movs	r3, #1
 800e964:	4631      	mov	r1, r6
 800e966:	4628      	mov	r0, r5
 800e968:	47b8      	blx	r7
 800e96a:	3001      	adds	r0, #1
 800e96c:	f43f af51 	beq.w	800e812 <_printf_float+0xc2>
 800e970:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e974:	429a      	cmp	r2, r3
 800e976:	db02      	blt.n	800e97e <_printf_float+0x22e>
 800e978:	6823      	ldr	r3, [r4, #0]
 800e97a:	07d8      	lsls	r0, r3, #31
 800e97c:	d510      	bpl.n	800e9a0 <_printf_float+0x250>
 800e97e:	ee18 3a10 	vmov	r3, s16
 800e982:	4652      	mov	r2, sl
 800e984:	4631      	mov	r1, r6
 800e986:	4628      	mov	r0, r5
 800e988:	47b8      	blx	r7
 800e98a:	3001      	adds	r0, #1
 800e98c:	f43f af41 	beq.w	800e812 <_printf_float+0xc2>
 800e990:	f04f 0800 	mov.w	r8, #0
 800e994:	f104 091a 	add.w	r9, r4, #26
 800e998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e99a:	3b01      	subs	r3, #1
 800e99c:	4543      	cmp	r3, r8
 800e99e:	dc09      	bgt.n	800e9b4 <_printf_float+0x264>
 800e9a0:	6823      	ldr	r3, [r4, #0]
 800e9a2:	079b      	lsls	r3, r3, #30
 800e9a4:	f100 8105 	bmi.w	800ebb2 <_printf_float+0x462>
 800e9a8:	68e0      	ldr	r0, [r4, #12]
 800e9aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9ac:	4298      	cmp	r0, r3
 800e9ae:	bfb8      	it	lt
 800e9b0:	4618      	movlt	r0, r3
 800e9b2:	e730      	b.n	800e816 <_printf_float+0xc6>
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	464a      	mov	r2, r9
 800e9b8:	4631      	mov	r1, r6
 800e9ba:	4628      	mov	r0, r5
 800e9bc:	47b8      	blx	r7
 800e9be:	3001      	adds	r0, #1
 800e9c0:	f43f af27 	beq.w	800e812 <_printf_float+0xc2>
 800e9c4:	f108 0801 	add.w	r8, r8, #1
 800e9c8:	e7e6      	b.n	800e998 <_printf_float+0x248>
 800e9ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	dc39      	bgt.n	800ea44 <_printf_float+0x2f4>
 800e9d0:	4a1b      	ldr	r2, [pc, #108]	; (800ea40 <_printf_float+0x2f0>)
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	4631      	mov	r1, r6
 800e9d6:	4628      	mov	r0, r5
 800e9d8:	47b8      	blx	r7
 800e9da:	3001      	adds	r0, #1
 800e9dc:	f43f af19 	beq.w	800e812 <_printf_float+0xc2>
 800e9e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e9e4:	4313      	orrs	r3, r2
 800e9e6:	d102      	bne.n	800e9ee <_printf_float+0x29e>
 800e9e8:	6823      	ldr	r3, [r4, #0]
 800e9ea:	07d9      	lsls	r1, r3, #31
 800e9ec:	d5d8      	bpl.n	800e9a0 <_printf_float+0x250>
 800e9ee:	ee18 3a10 	vmov	r3, s16
 800e9f2:	4652      	mov	r2, sl
 800e9f4:	4631      	mov	r1, r6
 800e9f6:	4628      	mov	r0, r5
 800e9f8:	47b8      	blx	r7
 800e9fa:	3001      	adds	r0, #1
 800e9fc:	f43f af09 	beq.w	800e812 <_printf_float+0xc2>
 800ea00:	f04f 0900 	mov.w	r9, #0
 800ea04:	f104 0a1a 	add.w	sl, r4, #26
 800ea08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea0a:	425b      	negs	r3, r3
 800ea0c:	454b      	cmp	r3, r9
 800ea0e:	dc01      	bgt.n	800ea14 <_printf_float+0x2c4>
 800ea10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea12:	e792      	b.n	800e93a <_printf_float+0x1ea>
 800ea14:	2301      	movs	r3, #1
 800ea16:	4652      	mov	r2, sl
 800ea18:	4631      	mov	r1, r6
 800ea1a:	4628      	mov	r0, r5
 800ea1c:	47b8      	blx	r7
 800ea1e:	3001      	adds	r0, #1
 800ea20:	f43f aef7 	beq.w	800e812 <_printf_float+0xc2>
 800ea24:	f109 0901 	add.w	r9, r9, #1
 800ea28:	e7ee      	b.n	800ea08 <_printf_float+0x2b8>
 800ea2a:	bf00      	nop
 800ea2c:	7fefffff 	.word	0x7fefffff
 800ea30:	08013bbc 	.word	0x08013bbc
 800ea34:	08013bc0 	.word	0x08013bc0
 800ea38:	08013bc8 	.word	0x08013bc8
 800ea3c:	08013bc4 	.word	0x08013bc4
 800ea40:	08013bcc 	.word	0x08013bcc
 800ea44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	bfa8      	it	ge
 800ea4c:	461a      	movge	r2, r3
 800ea4e:	2a00      	cmp	r2, #0
 800ea50:	4691      	mov	r9, r2
 800ea52:	dc37      	bgt.n	800eac4 <_printf_float+0x374>
 800ea54:	f04f 0b00 	mov.w	fp, #0
 800ea58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea5c:	f104 021a 	add.w	r2, r4, #26
 800ea60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ea62:	9305      	str	r3, [sp, #20]
 800ea64:	eba3 0309 	sub.w	r3, r3, r9
 800ea68:	455b      	cmp	r3, fp
 800ea6a:	dc33      	bgt.n	800ead4 <_printf_float+0x384>
 800ea6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea70:	429a      	cmp	r2, r3
 800ea72:	db3b      	blt.n	800eaec <_printf_float+0x39c>
 800ea74:	6823      	ldr	r3, [r4, #0]
 800ea76:	07da      	lsls	r2, r3, #31
 800ea78:	d438      	bmi.n	800eaec <_printf_float+0x39c>
 800ea7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea7c:	9a05      	ldr	r2, [sp, #20]
 800ea7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea80:	1a9a      	subs	r2, r3, r2
 800ea82:	eba3 0901 	sub.w	r9, r3, r1
 800ea86:	4591      	cmp	r9, r2
 800ea88:	bfa8      	it	ge
 800ea8a:	4691      	movge	r9, r2
 800ea8c:	f1b9 0f00 	cmp.w	r9, #0
 800ea90:	dc35      	bgt.n	800eafe <_printf_float+0x3ae>
 800ea92:	f04f 0800 	mov.w	r8, #0
 800ea96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea9a:	f104 0a1a 	add.w	sl, r4, #26
 800ea9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eaa2:	1a9b      	subs	r3, r3, r2
 800eaa4:	eba3 0309 	sub.w	r3, r3, r9
 800eaa8:	4543      	cmp	r3, r8
 800eaaa:	f77f af79 	ble.w	800e9a0 <_printf_float+0x250>
 800eaae:	2301      	movs	r3, #1
 800eab0:	4652      	mov	r2, sl
 800eab2:	4631      	mov	r1, r6
 800eab4:	4628      	mov	r0, r5
 800eab6:	47b8      	blx	r7
 800eab8:	3001      	adds	r0, #1
 800eaba:	f43f aeaa 	beq.w	800e812 <_printf_float+0xc2>
 800eabe:	f108 0801 	add.w	r8, r8, #1
 800eac2:	e7ec      	b.n	800ea9e <_printf_float+0x34e>
 800eac4:	4613      	mov	r3, r2
 800eac6:	4631      	mov	r1, r6
 800eac8:	4642      	mov	r2, r8
 800eaca:	4628      	mov	r0, r5
 800eacc:	47b8      	blx	r7
 800eace:	3001      	adds	r0, #1
 800ead0:	d1c0      	bne.n	800ea54 <_printf_float+0x304>
 800ead2:	e69e      	b.n	800e812 <_printf_float+0xc2>
 800ead4:	2301      	movs	r3, #1
 800ead6:	4631      	mov	r1, r6
 800ead8:	4628      	mov	r0, r5
 800eada:	9205      	str	r2, [sp, #20]
 800eadc:	47b8      	blx	r7
 800eade:	3001      	adds	r0, #1
 800eae0:	f43f ae97 	beq.w	800e812 <_printf_float+0xc2>
 800eae4:	9a05      	ldr	r2, [sp, #20]
 800eae6:	f10b 0b01 	add.w	fp, fp, #1
 800eaea:	e7b9      	b.n	800ea60 <_printf_float+0x310>
 800eaec:	ee18 3a10 	vmov	r3, s16
 800eaf0:	4652      	mov	r2, sl
 800eaf2:	4631      	mov	r1, r6
 800eaf4:	4628      	mov	r0, r5
 800eaf6:	47b8      	blx	r7
 800eaf8:	3001      	adds	r0, #1
 800eafa:	d1be      	bne.n	800ea7a <_printf_float+0x32a>
 800eafc:	e689      	b.n	800e812 <_printf_float+0xc2>
 800eafe:	9a05      	ldr	r2, [sp, #20]
 800eb00:	464b      	mov	r3, r9
 800eb02:	4442      	add	r2, r8
 800eb04:	4631      	mov	r1, r6
 800eb06:	4628      	mov	r0, r5
 800eb08:	47b8      	blx	r7
 800eb0a:	3001      	adds	r0, #1
 800eb0c:	d1c1      	bne.n	800ea92 <_printf_float+0x342>
 800eb0e:	e680      	b.n	800e812 <_printf_float+0xc2>
 800eb10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb12:	2a01      	cmp	r2, #1
 800eb14:	dc01      	bgt.n	800eb1a <_printf_float+0x3ca>
 800eb16:	07db      	lsls	r3, r3, #31
 800eb18:	d538      	bpl.n	800eb8c <_printf_float+0x43c>
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	4642      	mov	r2, r8
 800eb1e:	4631      	mov	r1, r6
 800eb20:	4628      	mov	r0, r5
 800eb22:	47b8      	blx	r7
 800eb24:	3001      	adds	r0, #1
 800eb26:	f43f ae74 	beq.w	800e812 <_printf_float+0xc2>
 800eb2a:	ee18 3a10 	vmov	r3, s16
 800eb2e:	4652      	mov	r2, sl
 800eb30:	4631      	mov	r1, r6
 800eb32:	4628      	mov	r0, r5
 800eb34:	47b8      	blx	r7
 800eb36:	3001      	adds	r0, #1
 800eb38:	f43f ae6b 	beq.w	800e812 <_printf_float+0xc2>
 800eb3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eb40:	2200      	movs	r2, #0
 800eb42:	2300      	movs	r3, #0
 800eb44:	f7f1 ffe8 	bl	8000b18 <__aeabi_dcmpeq>
 800eb48:	b9d8      	cbnz	r0, 800eb82 <_printf_float+0x432>
 800eb4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb4c:	f108 0201 	add.w	r2, r8, #1
 800eb50:	3b01      	subs	r3, #1
 800eb52:	4631      	mov	r1, r6
 800eb54:	4628      	mov	r0, r5
 800eb56:	47b8      	blx	r7
 800eb58:	3001      	adds	r0, #1
 800eb5a:	d10e      	bne.n	800eb7a <_printf_float+0x42a>
 800eb5c:	e659      	b.n	800e812 <_printf_float+0xc2>
 800eb5e:	2301      	movs	r3, #1
 800eb60:	4652      	mov	r2, sl
 800eb62:	4631      	mov	r1, r6
 800eb64:	4628      	mov	r0, r5
 800eb66:	47b8      	blx	r7
 800eb68:	3001      	adds	r0, #1
 800eb6a:	f43f ae52 	beq.w	800e812 <_printf_float+0xc2>
 800eb6e:	f108 0801 	add.w	r8, r8, #1
 800eb72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb74:	3b01      	subs	r3, #1
 800eb76:	4543      	cmp	r3, r8
 800eb78:	dcf1      	bgt.n	800eb5e <_printf_float+0x40e>
 800eb7a:	464b      	mov	r3, r9
 800eb7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eb80:	e6dc      	b.n	800e93c <_printf_float+0x1ec>
 800eb82:	f04f 0800 	mov.w	r8, #0
 800eb86:	f104 0a1a 	add.w	sl, r4, #26
 800eb8a:	e7f2      	b.n	800eb72 <_printf_float+0x422>
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	4642      	mov	r2, r8
 800eb90:	e7df      	b.n	800eb52 <_printf_float+0x402>
 800eb92:	2301      	movs	r3, #1
 800eb94:	464a      	mov	r2, r9
 800eb96:	4631      	mov	r1, r6
 800eb98:	4628      	mov	r0, r5
 800eb9a:	47b8      	blx	r7
 800eb9c:	3001      	adds	r0, #1
 800eb9e:	f43f ae38 	beq.w	800e812 <_printf_float+0xc2>
 800eba2:	f108 0801 	add.w	r8, r8, #1
 800eba6:	68e3      	ldr	r3, [r4, #12]
 800eba8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ebaa:	1a5b      	subs	r3, r3, r1
 800ebac:	4543      	cmp	r3, r8
 800ebae:	dcf0      	bgt.n	800eb92 <_printf_float+0x442>
 800ebb0:	e6fa      	b.n	800e9a8 <_printf_float+0x258>
 800ebb2:	f04f 0800 	mov.w	r8, #0
 800ebb6:	f104 0919 	add.w	r9, r4, #25
 800ebba:	e7f4      	b.n	800eba6 <_printf_float+0x456>

0800ebbc <_printf_common>:
 800ebbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebc0:	4616      	mov	r6, r2
 800ebc2:	4699      	mov	r9, r3
 800ebc4:	688a      	ldr	r2, [r1, #8]
 800ebc6:	690b      	ldr	r3, [r1, #16]
 800ebc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ebcc:	4293      	cmp	r3, r2
 800ebce:	bfb8      	it	lt
 800ebd0:	4613      	movlt	r3, r2
 800ebd2:	6033      	str	r3, [r6, #0]
 800ebd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ebd8:	4607      	mov	r7, r0
 800ebda:	460c      	mov	r4, r1
 800ebdc:	b10a      	cbz	r2, 800ebe2 <_printf_common+0x26>
 800ebde:	3301      	adds	r3, #1
 800ebe0:	6033      	str	r3, [r6, #0]
 800ebe2:	6823      	ldr	r3, [r4, #0]
 800ebe4:	0699      	lsls	r1, r3, #26
 800ebe6:	bf42      	ittt	mi
 800ebe8:	6833      	ldrmi	r3, [r6, #0]
 800ebea:	3302      	addmi	r3, #2
 800ebec:	6033      	strmi	r3, [r6, #0]
 800ebee:	6825      	ldr	r5, [r4, #0]
 800ebf0:	f015 0506 	ands.w	r5, r5, #6
 800ebf4:	d106      	bne.n	800ec04 <_printf_common+0x48>
 800ebf6:	f104 0a19 	add.w	sl, r4, #25
 800ebfa:	68e3      	ldr	r3, [r4, #12]
 800ebfc:	6832      	ldr	r2, [r6, #0]
 800ebfe:	1a9b      	subs	r3, r3, r2
 800ec00:	42ab      	cmp	r3, r5
 800ec02:	dc26      	bgt.n	800ec52 <_printf_common+0x96>
 800ec04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ec08:	1e13      	subs	r3, r2, #0
 800ec0a:	6822      	ldr	r2, [r4, #0]
 800ec0c:	bf18      	it	ne
 800ec0e:	2301      	movne	r3, #1
 800ec10:	0692      	lsls	r2, r2, #26
 800ec12:	d42b      	bmi.n	800ec6c <_printf_common+0xb0>
 800ec14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ec18:	4649      	mov	r1, r9
 800ec1a:	4638      	mov	r0, r7
 800ec1c:	47c0      	blx	r8
 800ec1e:	3001      	adds	r0, #1
 800ec20:	d01e      	beq.n	800ec60 <_printf_common+0xa4>
 800ec22:	6823      	ldr	r3, [r4, #0]
 800ec24:	68e5      	ldr	r5, [r4, #12]
 800ec26:	6832      	ldr	r2, [r6, #0]
 800ec28:	f003 0306 	and.w	r3, r3, #6
 800ec2c:	2b04      	cmp	r3, #4
 800ec2e:	bf08      	it	eq
 800ec30:	1aad      	subeq	r5, r5, r2
 800ec32:	68a3      	ldr	r3, [r4, #8]
 800ec34:	6922      	ldr	r2, [r4, #16]
 800ec36:	bf0c      	ite	eq
 800ec38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec3c:	2500      	movne	r5, #0
 800ec3e:	4293      	cmp	r3, r2
 800ec40:	bfc4      	itt	gt
 800ec42:	1a9b      	subgt	r3, r3, r2
 800ec44:	18ed      	addgt	r5, r5, r3
 800ec46:	2600      	movs	r6, #0
 800ec48:	341a      	adds	r4, #26
 800ec4a:	42b5      	cmp	r5, r6
 800ec4c:	d11a      	bne.n	800ec84 <_printf_common+0xc8>
 800ec4e:	2000      	movs	r0, #0
 800ec50:	e008      	b.n	800ec64 <_printf_common+0xa8>
 800ec52:	2301      	movs	r3, #1
 800ec54:	4652      	mov	r2, sl
 800ec56:	4649      	mov	r1, r9
 800ec58:	4638      	mov	r0, r7
 800ec5a:	47c0      	blx	r8
 800ec5c:	3001      	adds	r0, #1
 800ec5e:	d103      	bne.n	800ec68 <_printf_common+0xac>
 800ec60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec68:	3501      	adds	r5, #1
 800ec6a:	e7c6      	b.n	800ebfa <_printf_common+0x3e>
 800ec6c:	18e1      	adds	r1, r4, r3
 800ec6e:	1c5a      	adds	r2, r3, #1
 800ec70:	2030      	movs	r0, #48	; 0x30
 800ec72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ec76:	4422      	add	r2, r4
 800ec78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ec7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ec80:	3302      	adds	r3, #2
 800ec82:	e7c7      	b.n	800ec14 <_printf_common+0x58>
 800ec84:	2301      	movs	r3, #1
 800ec86:	4622      	mov	r2, r4
 800ec88:	4649      	mov	r1, r9
 800ec8a:	4638      	mov	r0, r7
 800ec8c:	47c0      	blx	r8
 800ec8e:	3001      	adds	r0, #1
 800ec90:	d0e6      	beq.n	800ec60 <_printf_common+0xa4>
 800ec92:	3601      	adds	r6, #1
 800ec94:	e7d9      	b.n	800ec4a <_printf_common+0x8e>
	...

0800ec98 <_printf_i>:
 800ec98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec9c:	7e0f      	ldrb	r7, [r1, #24]
 800ec9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eca0:	2f78      	cmp	r7, #120	; 0x78
 800eca2:	4691      	mov	r9, r2
 800eca4:	4680      	mov	r8, r0
 800eca6:	460c      	mov	r4, r1
 800eca8:	469a      	mov	sl, r3
 800ecaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ecae:	d807      	bhi.n	800ecc0 <_printf_i+0x28>
 800ecb0:	2f62      	cmp	r7, #98	; 0x62
 800ecb2:	d80a      	bhi.n	800ecca <_printf_i+0x32>
 800ecb4:	2f00      	cmp	r7, #0
 800ecb6:	f000 80d8 	beq.w	800ee6a <_printf_i+0x1d2>
 800ecba:	2f58      	cmp	r7, #88	; 0x58
 800ecbc:	f000 80a3 	beq.w	800ee06 <_printf_i+0x16e>
 800ecc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ecc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ecc8:	e03a      	b.n	800ed40 <_printf_i+0xa8>
 800ecca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ecce:	2b15      	cmp	r3, #21
 800ecd0:	d8f6      	bhi.n	800ecc0 <_printf_i+0x28>
 800ecd2:	a101      	add	r1, pc, #4	; (adr r1, 800ecd8 <_printf_i+0x40>)
 800ecd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ecd8:	0800ed31 	.word	0x0800ed31
 800ecdc:	0800ed45 	.word	0x0800ed45
 800ece0:	0800ecc1 	.word	0x0800ecc1
 800ece4:	0800ecc1 	.word	0x0800ecc1
 800ece8:	0800ecc1 	.word	0x0800ecc1
 800ecec:	0800ecc1 	.word	0x0800ecc1
 800ecf0:	0800ed45 	.word	0x0800ed45
 800ecf4:	0800ecc1 	.word	0x0800ecc1
 800ecf8:	0800ecc1 	.word	0x0800ecc1
 800ecfc:	0800ecc1 	.word	0x0800ecc1
 800ed00:	0800ecc1 	.word	0x0800ecc1
 800ed04:	0800ee51 	.word	0x0800ee51
 800ed08:	0800ed75 	.word	0x0800ed75
 800ed0c:	0800ee33 	.word	0x0800ee33
 800ed10:	0800ecc1 	.word	0x0800ecc1
 800ed14:	0800ecc1 	.word	0x0800ecc1
 800ed18:	0800ee73 	.word	0x0800ee73
 800ed1c:	0800ecc1 	.word	0x0800ecc1
 800ed20:	0800ed75 	.word	0x0800ed75
 800ed24:	0800ecc1 	.word	0x0800ecc1
 800ed28:	0800ecc1 	.word	0x0800ecc1
 800ed2c:	0800ee3b 	.word	0x0800ee3b
 800ed30:	682b      	ldr	r3, [r5, #0]
 800ed32:	1d1a      	adds	r2, r3, #4
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	602a      	str	r2, [r5, #0]
 800ed38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ed40:	2301      	movs	r3, #1
 800ed42:	e0a3      	b.n	800ee8c <_printf_i+0x1f4>
 800ed44:	6820      	ldr	r0, [r4, #0]
 800ed46:	6829      	ldr	r1, [r5, #0]
 800ed48:	0606      	lsls	r6, r0, #24
 800ed4a:	f101 0304 	add.w	r3, r1, #4
 800ed4e:	d50a      	bpl.n	800ed66 <_printf_i+0xce>
 800ed50:	680e      	ldr	r6, [r1, #0]
 800ed52:	602b      	str	r3, [r5, #0]
 800ed54:	2e00      	cmp	r6, #0
 800ed56:	da03      	bge.n	800ed60 <_printf_i+0xc8>
 800ed58:	232d      	movs	r3, #45	; 0x2d
 800ed5a:	4276      	negs	r6, r6
 800ed5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed60:	485e      	ldr	r0, [pc, #376]	; (800eedc <_printf_i+0x244>)
 800ed62:	230a      	movs	r3, #10
 800ed64:	e019      	b.n	800ed9a <_printf_i+0x102>
 800ed66:	680e      	ldr	r6, [r1, #0]
 800ed68:	602b      	str	r3, [r5, #0]
 800ed6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ed6e:	bf18      	it	ne
 800ed70:	b236      	sxthne	r6, r6
 800ed72:	e7ef      	b.n	800ed54 <_printf_i+0xbc>
 800ed74:	682b      	ldr	r3, [r5, #0]
 800ed76:	6820      	ldr	r0, [r4, #0]
 800ed78:	1d19      	adds	r1, r3, #4
 800ed7a:	6029      	str	r1, [r5, #0]
 800ed7c:	0601      	lsls	r1, r0, #24
 800ed7e:	d501      	bpl.n	800ed84 <_printf_i+0xec>
 800ed80:	681e      	ldr	r6, [r3, #0]
 800ed82:	e002      	b.n	800ed8a <_printf_i+0xf2>
 800ed84:	0646      	lsls	r6, r0, #25
 800ed86:	d5fb      	bpl.n	800ed80 <_printf_i+0xe8>
 800ed88:	881e      	ldrh	r6, [r3, #0]
 800ed8a:	4854      	ldr	r0, [pc, #336]	; (800eedc <_printf_i+0x244>)
 800ed8c:	2f6f      	cmp	r7, #111	; 0x6f
 800ed8e:	bf0c      	ite	eq
 800ed90:	2308      	moveq	r3, #8
 800ed92:	230a      	movne	r3, #10
 800ed94:	2100      	movs	r1, #0
 800ed96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ed9a:	6865      	ldr	r5, [r4, #4]
 800ed9c:	60a5      	str	r5, [r4, #8]
 800ed9e:	2d00      	cmp	r5, #0
 800eda0:	bfa2      	ittt	ge
 800eda2:	6821      	ldrge	r1, [r4, #0]
 800eda4:	f021 0104 	bicge.w	r1, r1, #4
 800eda8:	6021      	strge	r1, [r4, #0]
 800edaa:	b90e      	cbnz	r6, 800edb0 <_printf_i+0x118>
 800edac:	2d00      	cmp	r5, #0
 800edae:	d04d      	beq.n	800ee4c <_printf_i+0x1b4>
 800edb0:	4615      	mov	r5, r2
 800edb2:	fbb6 f1f3 	udiv	r1, r6, r3
 800edb6:	fb03 6711 	mls	r7, r3, r1, r6
 800edba:	5dc7      	ldrb	r7, [r0, r7]
 800edbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800edc0:	4637      	mov	r7, r6
 800edc2:	42bb      	cmp	r3, r7
 800edc4:	460e      	mov	r6, r1
 800edc6:	d9f4      	bls.n	800edb2 <_printf_i+0x11a>
 800edc8:	2b08      	cmp	r3, #8
 800edca:	d10b      	bne.n	800ede4 <_printf_i+0x14c>
 800edcc:	6823      	ldr	r3, [r4, #0]
 800edce:	07de      	lsls	r6, r3, #31
 800edd0:	d508      	bpl.n	800ede4 <_printf_i+0x14c>
 800edd2:	6923      	ldr	r3, [r4, #16]
 800edd4:	6861      	ldr	r1, [r4, #4]
 800edd6:	4299      	cmp	r1, r3
 800edd8:	bfde      	ittt	le
 800edda:	2330      	movle	r3, #48	; 0x30
 800eddc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ede0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ede4:	1b52      	subs	r2, r2, r5
 800ede6:	6122      	str	r2, [r4, #16]
 800ede8:	f8cd a000 	str.w	sl, [sp]
 800edec:	464b      	mov	r3, r9
 800edee:	aa03      	add	r2, sp, #12
 800edf0:	4621      	mov	r1, r4
 800edf2:	4640      	mov	r0, r8
 800edf4:	f7ff fee2 	bl	800ebbc <_printf_common>
 800edf8:	3001      	adds	r0, #1
 800edfa:	d14c      	bne.n	800ee96 <_printf_i+0x1fe>
 800edfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee00:	b004      	add	sp, #16
 800ee02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee06:	4835      	ldr	r0, [pc, #212]	; (800eedc <_printf_i+0x244>)
 800ee08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ee0c:	6829      	ldr	r1, [r5, #0]
 800ee0e:	6823      	ldr	r3, [r4, #0]
 800ee10:	f851 6b04 	ldr.w	r6, [r1], #4
 800ee14:	6029      	str	r1, [r5, #0]
 800ee16:	061d      	lsls	r5, r3, #24
 800ee18:	d514      	bpl.n	800ee44 <_printf_i+0x1ac>
 800ee1a:	07df      	lsls	r7, r3, #31
 800ee1c:	bf44      	itt	mi
 800ee1e:	f043 0320 	orrmi.w	r3, r3, #32
 800ee22:	6023      	strmi	r3, [r4, #0]
 800ee24:	b91e      	cbnz	r6, 800ee2e <_printf_i+0x196>
 800ee26:	6823      	ldr	r3, [r4, #0]
 800ee28:	f023 0320 	bic.w	r3, r3, #32
 800ee2c:	6023      	str	r3, [r4, #0]
 800ee2e:	2310      	movs	r3, #16
 800ee30:	e7b0      	b.n	800ed94 <_printf_i+0xfc>
 800ee32:	6823      	ldr	r3, [r4, #0]
 800ee34:	f043 0320 	orr.w	r3, r3, #32
 800ee38:	6023      	str	r3, [r4, #0]
 800ee3a:	2378      	movs	r3, #120	; 0x78
 800ee3c:	4828      	ldr	r0, [pc, #160]	; (800eee0 <_printf_i+0x248>)
 800ee3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ee42:	e7e3      	b.n	800ee0c <_printf_i+0x174>
 800ee44:	0659      	lsls	r1, r3, #25
 800ee46:	bf48      	it	mi
 800ee48:	b2b6      	uxthmi	r6, r6
 800ee4a:	e7e6      	b.n	800ee1a <_printf_i+0x182>
 800ee4c:	4615      	mov	r5, r2
 800ee4e:	e7bb      	b.n	800edc8 <_printf_i+0x130>
 800ee50:	682b      	ldr	r3, [r5, #0]
 800ee52:	6826      	ldr	r6, [r4, #0]
 800ee54:	6961      	ldr	r1, [r4, #20]
 800ee56:	1d18      	adds	r0, r3, #4
 800ee58:	6028      	str	r0, [r5, #0]
 800ee5a:	0635      	lsls	r5, r6, #24
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	d501      	bpl.n	800ee64 <_printf_i+0x1cc>
 800ee60:	6019      	str	r1, [r3, #0]
 800ee62:	e002      	b.n	800ee6a <_printf_i+0x1d2>
 800ee64:	0670      	lsls	r0, r6, #25
 800ee66:	d5fb      	bpl.n	800ee60 <_printf_i+0x1c8>
 800ee68:	8019      	strh	r1, [r3, #0]
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	6123      	str	r3, [r4, #16]
 800ee6e:	4615      	mov	r5, r2
 800ee70:	e7ba      	b.n	800ede8 <_printf_i+0x150>
 800ee72:	682b      	ldr	r3, [r5, #0]
 800ee74:	1d1a      	adds	r2, r3, #4
 800ee76:	602a      	str	r2, [r5, #0]
 800ee78:	681d      	ldr	r5, [r3, #0]
 800ee7a:	6862      	ldr	r2, [r4, #4]
 800ee7c:	2100      	movs	r1, #0
 800ee7e:	4628      	mov	r0, r5
 800ee80:	f7f1 f9d6 	bl	8000230 <memchr>
 800ee84:	b108      	cbz	r0, 800ee8a <_printf_i+0x1f2>
 800ee86:	1b40      	subs	r0, r0, r5
 800ee88:	6060      	str	r0, [r4, #4]
 800ee8a:	6863      	ldr	r3, [r4, #4]
 800ee8c:	6123      	str	r3, [r4, #16]
 800ee8e:	2300      	movs	r3, #0
 800ee90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee94:	e7a8      	b.n	800ede8 <_printf_i+0x150>
 800ee96:	6923      	ldr	r3, [r4, #16]
 800ee98:	462a      	mov	r2, r5
 800ee9a:	4649      	mov	r1, r9
 800ee9c:	4640      	mov	r0, r8
 800ee9e:	47d0      	blx	sl
 800eea0:	3001      	adds	r0, #1
 800eea2:	d0ab      	beq.n	800edfc <_printf_i+0x164>
 800eea4:	6823      	ldr	r3, [r4, #0]
 800eea6:	079b      	lsls	r3, r3, #30
 800eea8:	d413      	bmi.n	800eed2 <_printf_i+0x23a>
 800eeaa:	68e0      	ldr	r0, [r4, #12]
 800eeac:	9b03      	ldr	r3, [sp, #12]
 800eeae:	4298      	cmp	r0, r3
 800eeb0:	bfb8      	it	lt
 800eeb2:	4618      	movlt	r0, r3
 800eeb4:	e7a4      	b.n	800ee00 <_printf_i+0x168>
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	4632      	mov	r2, r6
 800eeba:	4649      	mov	r1, r9
 800eebc:	4640      	mov	r0, r8
 800eebe:	47d0      	blx	sl
 800eec0:	3001      	adds	r0, #1
 800eec2:	d09b      	beq.n	800edfc <_printf_i+0x164>
 800eec4:	3501      	adds	r5, #1
 800eec6:	68e3      	ldr	r3, [r4, #12]
 800eec8:	9903      	ldr	r1, [sp, #12]
 800eeca:	1a5b      	subs	r3, r3, r1
 800eecc:	42ab      	cmp	r3, r5
 800eece:	dcf2      	bgt.n	800eeb6 <_printf_i+0x21e>
 800eed0:	e7eb      	b.n	800eeaa <_printf_i+0x212>
 800eed2:	2500      	movs	r5, #0
 800eed4:	f104 0619 	add.w	r6, r4, #25
 800eed8:	e7f5      	b.n	800eec6 <_printf_i+0x22e>
 800eeda:	bf00      	nop
 800eedc:	08013bce 	.word	0x08013bce
 800eee0:	08013bdf 	.word	0x08013bdf

0800eee4 <_scanf_float>:
 800eee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eee8:	b087      	sub	sp, #28
 800eeea:	4617      	mov	r7, r2
 800eeec:	9303      	str	r3, [sp, #12]
 800eeee:	688b      	ldr	r3, [r1, #8]
 800eef0:	1e5a      	subs	r2, r3, #1
 800eef2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800eef6:	bf83      	ittte	hi
 800eef8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800eefc:	195b      	addhi	r3, r3, r5
 800eefe:	9302      	strhi	r3, [sp, #8]
 800ef00:	2300      	movls	r3, #0
 800ef02:	bf86      	itte	hi
 800ef04:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ef08:	608b      	strhi	r3, [r1, #8]
 800ef0a:	9302      	strls	r3, [sp, #8]
 800ef0c:	680b      	ldr	r3, [r1, #0]
 800ef0e:	468b      	mov	fp, r1
 800ef10:	2500      	movs	r5, #0
 800ef12:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ef16:	f84b 3b1c 	str.w	r3, [fp], #28
 800ef1a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ef1e:	4680      	mov	r8, r0
 800ef20:	460c      	mov	r4, r1
 800ef22:	465e      	mov	r6, fp
 800ef24:	46aa      	mov	sl, r5
 800ef26:	46a9      	mov	r9, r5
 800ef28:	9501      	str	r5, [sp, #4]
 800ef2a:	68a2      	ldr	r2, [r4, #8]
 800ef2c:	b152      	cbz	r2, 800ef44 <_scanf_float+0x60>
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	781b      	ldrb	r3, [r3, #0]
 800ef32:	2b4e      	cmp	r3, #78	; 0x4e
 800ef34:	d864      	bhi.n	800f000 <_scanf_float+0x11c>
 800ef36:	2b40      	cmp	r3, #64	; 0x40
 800ef38:	d83c      	bhi.n	800efb4 <_scanf_float+0xd0>
 800ef3a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ef3e:	b2c8      	uxtb	r0, r1
 800ef40:	280e      	cmp	r0, #14
 800ef42:	d93a      	bls.n	800efba <_scanf_float+0xd6>
 800ef44:	f1b9 0f00 	cmp.w	r9, #0
 800ef48:	d003      	beq.n	800ef52 <_scanf_float+0x6e>
 800ef4a:	6823      	ldr	r3, [r4, #0]
 800ef4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ef50:	6023      	str	r3, [r4, #0]
 800ef52:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ef56:	f1ba 0f01 	cmp.w	sl, #1
 800ef5a:	f200 8113 	bhi.w	800f184 <_scanf_float+0x2a0>
 800ef5e:	455e      	cmp	r6, fp
 800ef60:	f200 8105 	bhi.w	800f16e <_scanf_float+0x28a>
 800ef64:	2501      	movs	r5, #1
 800ef66:	4628      	mov	r0, r5
 800ef68:	b007      	add	sp, #28
 800ef6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef6e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ef72:	2a0d      	cmp	r2, #13
 800ef74:	d8e6      	bhi.n	800ef44 <_scanf_float+0x60>
 800ef76:	a101      	add	r1, pc, #4	; (adr r1, 800ef7c <_scanf_float+0x98>)
 800ef78:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ef7c:	0800f0bb 	.word	0x0800f0bb
 800ef80:	0800ef45 	.word	0x0800ef45
 800ef84:	0800ef45 	.word	0x0800ef45
 800ef88:	0800ef45 	.word	0x0800ef45
 800ef8c:	0800f11b 	.word	0x0800f11b
 800ef90:	0800f0f3 	.word	0x0800f0f3
 800ef94:	0800ef45 	.word	0x0800ef45
 800ef98:	0800ef45 	.word	0x0800ef45
 800ef9c:	0800f0c9 	.word	0x0800f0c9
 800efa0:	0800ef45 	.word	0x0800ef45
 800efa4:	0800ef45 	.word	0x0800ef45
 800efa8:	0800ef45 	.word	0x0800ef45
 800efac:	0800ef45 	.word	0x0800ef45
 800efb0:	0800f081 	.word	0x0800f081
 800efb4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800efb8:	e7db      	b.n	800ef72 <_scanf_float+0x8e>
 800efba:	290e      	cmp	r1, #14
 800efbc:	d8c2      	bhi.n	800ef44 <_scanf_float+0x60>
 800efbe:	a001      	add	r0, pc, #4	; (adr r0, 800efc4 <_scanf_float+0xe0>)
 800efc0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800efc4:	0800f073 	.word	0x0800f073
 800efc8:	0800ef45 	.word	0x0800ef45
 800efcc:	0800f073 	.word	0x0800f073
 800efd0:	0800f107 	.word	0x0800f107
 800efd4:	0800ef45 	.word	0x0800ef45
 800efd8:	0800f021 	.word	0x0800f021
 800efdc:	0800f05d 	.word	0x0800f05d
 800efe0:	0800f05d 	.word	0x0800f05d
 800efe4:	0800f05d 	.word	0x0800f05d
 800efe8:	0800f05d 	.word	0x0800f05d
 800efec:	0800f05d 	.word	0x0800f05d
 800eff0:	0800f05d 	.word	0x0800f05d
 800eff4:	0800f05d 	.word	0x0800f05d
 800eff8:	0800f05d 	.word	0x0800f05d
 800effc:	0800f05d 	.word	0x0800f05d
 800f000:	2b6e      	cmp	r3, #110	; 0x6e
 800f002:	d809      	bhi.n	800f018 <_scanf_float+0x134>
 800f004:	2b60      	cmp	r3, #96	; 0x60
 800f006:	d8b2      	bhi.n	800ef6e <_scanf_float+0x8a>
 800f008:	2b54      	cmp	r3, #84	; 0x54
 800f00a:	d077      	beq.n	800f0fc <_scanf_float+0x218>
 800f00c:	2b59      	cmp	r3, #89	; 0x59
 800f00e:	d199      	bne.n	800ef44 <_scanf_float+0x60>
 800f010:	2d07      	cmp	r5, #7
 800f012:	d197      	bne.n	800ef44 <_scanf_float+0x60>
 800f014:	2508      	movs	r5, #8
 800f016:	e029      	b.n	800f06c <_scanf_float+0x188>
 800f018:	2b74      	cmp	r3, #116	; 0x74
 800f01a:	d06f      	beq.n	800f0fc <_scanf_float+0x218>
 800f01c:	2b79      	cmp	r3, #121	; 0x79
 800f01e:	e7f6      	b.n	800f00e <_scanf_float+0x12a>
 800f020:	6821      	ldr	r1, [r4, #0]
 800f022:	05c8      	lsls	r0, r1, #23
 800f024:	d51a      	bpl.n	800f05c <_scanf_float+0x178>
 800f026:	9b02      	ldr	r3, [sp, #8]
 800f028:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f02c:	6021      	str	r1, [r4, #0]
 800f02e:	f109 0901 	add.w	r9, r9, #1
 800f032:	b11b      	cbz	r3, 800f03c <_scanf_float+0x158>
 800f034:	3b01      	subs	r3, #1
 800f036:	3201      	adds	r2, #1
 800f038:	9302      	str	r3, [sp, #8]
 800f03a:	60a2      	str	r2, [r4, #8]
 800f03c:	68a3      	ldr	r3, [r4, #8]
 800f03e:	3b01      	subs	r3, #1
 800f040:	60a3      	str	r3, [r4, #8]
 800f042:	6923      	ldr	r3, [r4, #16]
 800f044:	3301      	adds	r3, #1
 800f046:	6123      	str	r3, [r4, #16]
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	3b01      	subs	r3, #1
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	607b      	str	r3, [r7, #4]
 800f050:	f340 8084 	ble.w	800f15c <_scanf_float+0x278>
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	3301      	adds	r3, #1
 800f058:	603b      	str	r3, [r7, #0]
 800f05a:	e766      	b.n	800ef2a <_scanf_float+0x46>
 800f05c:	eb1a 0f05 	cmn.w	sl, r5
 800f060:	f47f af70 	bne.w	800ef44 <_scanf_float+0x60>
 800f064:	6822      	ldr	r2, [r4, #0]
 800f066:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f06a:	6022      	str	r2, [r4, #0]
 800f06c:	f806 3b01 	strb.w	r3, [r6], #1
 800f070:	e7e4      	b.n	800f03c <_scanf_float+0x158>
 800f072:	6822      	ldr	r2, [r4, #0]
 800f074:	0610      	lsls	r0, r2, #24
 800f076:	f57f af65 	bpl.w	800ef44 <_scanf_float+0x60>
 800f07a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f07e:	e7f4      	b.n	800f06a <_scanf_float+0x186>
 800f080:	f1ba 0f00 	cmp.w	sl, #0
 800f084:	d10e      	bne.n	800f0a4 <_scanf_float+0x1c0>
 800f086:	f1b9 0f00 	cmp.w	r9, #0
 800f08a:	d10e      	bne.n	800f0aa <_scanf_float+0x1c6>
 800f08c:	6822      	ldr	r2, [r4, #0]
 800f08e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f092:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f096:	d108      	bne.n	800f0aa <_scanf_float+0x1c6>
 800f098:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f09c:	6022      	str	r2, [r4, #0]
 800f09e:	f04f 0a01 	mov.w	sl, #1
 800f0a2:	e7e3      	b.n	800f06c <_scanf_float+0x188>
 800f0a4:	f1ba 0f02 	cmp.w	sl, #2
 800f0a8:	d055      	beq.n	800f156 <_scanf_float+0x272>
 800f0aa:	2d01      	cmp	r5, #1
 800f0ac:	d002      	beq.n	800f0b4 <_scanf_float+0x1d0>
 800f0ae:	2d04      	cmp	r5, #4
 800f0b0:	f47f af48 	bne.w	800ef44 <_scanf_float+0x60>
 800f0b4:	3501      	adds	r5, #1
 800f0b6:	b2ed      	uxtb	r5, r5
 800f0b8:	e7d8      	b.n	800f06c <_scanf_float+0x188>
 800f0ba:	f1ba 0f01 	cmp.w	sl, #1
 800f0be:	f47f af41 	bne.w	800ef44 <_scanf_float+0x60>
 800f0c2:	f04f 0a02 	mov.w	sl, #2
 800f0c6:	e7d1      	b.n	800f06c <_scanf_float+0x188>
 800f0c8:	b97d      	cbnz	r5, 800f0ea <_scanf_float+0x206>
 800f0ca:	f1b9 0f00 	cmp.w	r9, #0
 800f0ce:	f47f af3c 	bne.w	800ef4a <_scanf_float+0x66>
 800f0d2:	6822      	ldr	r2, [r4, #0]
 800f0d4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f0d8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f0dc:	f47f af39 	bne.w	800ef52 <_scanf_float+0x6e>
 800f0e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f0e4:	6022      	str	r2, [r4, #0]
 800f0e6:	2501      	movs	r5, #1
 800f0e8:	e7c0      	b.n	800f06c <_scanf_float+0x188>
 800f0ea:	2d03      	cmp	r5, #3
 800f0ec:	d0e2      	beq.n	800f0b4 <_scanf_float+0x1d0>
 800f0ee:	2d05      	cmp	r5, #5
 800f0f0:	e7de      	b.n	800f0b0 <_scanf_float+0x1cc>
 800f0f2:	2d02      	cmp	r5, #2
 800f0f4:	f47f af26 	bne.w	800ef44 <_scanf_float+0x60>
 800f0f8:	2503      	movs	r5, #3
 800f0fa:	e7b7      	b.n	800f06c <_scanf_float+0x188>
 800f0fc:	2d06      	cmp	r5, #6
 800f0fe:	f47f af21 	bne.w	800ef44 <_scanf_float+0x60>
 800f102:	2507      	movs	r5, #7
 800f104:	e7b2      	b.n	800f06c <_scanf_float+0x188>
 800f106:	6822      	ldr	r2, [r4, #0]
 800f108:	0591      	lsls	r1, r2, #22
 800f10a:	f57f af1b 	bpl.w	800ef44 <_scanf_float+0x60>
 800f10e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f112:	6022      	str	r2, [r4, #0]
 800f114:	f8cd 9004 	str.w	r9, [sp, #4]
 800f118:	e7a8      	b.n	800f06c <_scanf_float+0x188>
 800f11a:	6822      	ldr	r2, [r4, #0]
 800f11c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f120:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f124:	d006      	beq.n	800f134 <_scanf_float+0x250>
 800f126:	0550      	lsls	r0, r2, #21
 800f128:	f57f af0c 	bpl.w	800ef44 <_scanf_float+0x60>
 800f12c:	f1b9 0f00 	cmp.w	r9, #0
 800f130:	f43f af0f 	beq.w	800ef52 <_scanf_float+0x6e>
 800f134:	0591      	lsls	r1, r2, #22
 800f136:	bf58      	it	pl
 800f138:	9901      	ldrpl	r1, [sp, #4]
 800f13a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f13e:	bf58      	it	pl
 800f140:	eba9 0101 	subpl.w	r1, r9, r1
 800f144:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f148:	bf58      	it	pl
 800f14a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f14e:	6022      	str	r2, [r4, #0]
 800f150:	f04f 0900 	mov.w	r9, #0
 800f154:	e78a      	b.n	800f06c <_scanf_float+0x188>
 800f156:	f04f 0a03 	mov.w	sl, #3
 800f15a:	e787      	b.n	800f06c <_scanf_float+0x188>
 800f15c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f160:	4639      	mov	r1, r7
 800f162:	4640      	mov	r0, r8
 800f164:	4798      	blx	r3
 800f166:	2800      	cmp	r0, #0
 800f168:	f43f aedf 	beq.w	800ef2a <_scanf_float+0x46>
 800f16c:	e6ea      	b.n	800ef44 <_scanf_float+0x60>
 800f16e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f172:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f176:	463a      	mov	r2, r7
 800f178:	4640      	mov	r0, r8
 800f17a:	4798      	blx	r3
 800f17c:	6923      	ldr	r3, [r4, #16]
 800f17e:	3b01      	subs	r3, #1
 800f180:	6123      	str	r3, [r4, #16]
 800f182:	e6ec      	b.n	800ef5e <_scanf_float+0x7a>
 800f184:	1e6b      	subs	r3, r5, #1
 800f186:	2b06      	cmp	r3, #6
 800f188:	d825      	bhi.n	800f1d6 <_scanf_float+0x2f2>
 800f18a:	2d02      	cmp	r5, #2
 800f18c:	d836      	bhi.n	800f1fc <_scanf_float+0x318>
 800f18e:	455e      	cmp	r6, fp
 800f190:	f67f aee8 	bls.w	800ef64 <_scanf_float+0x80>
 800f194:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f198:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f19c:	463a      	mov	r2, r7
 800f19e:	4640      	mov	r0, r8
 800f1a0:	4798      	blx	r3
 800f1a2:	6923      	ldr	r3, [r4, #16]
 800f1a4:	3b01      	subs	r3, #1
 800f1a6:	6123      	str	r3, [r4, #16]
 800f1a8:	e7f1      	b.n	800f18e <_scanf_float+0x2aa>
 800f1aa:	9802      	ldr	r0, [sp, #8]
 800f1ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f1b0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f1b4:	9002      	str	r0, [sp, #8]
 800f1b6:	463a      	mov	r2, r7
 800f1b8:	4640      	mov	r0, r8
 800f1ba:	4798      	blx	r3
 800f1bc:	6923      	ldr	r3, [r4, #16]
 800f1be:	3b01      	subs	r3, #1
 800f1c0:	6123      	str	r3, [r4, #16]
 800f1c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f1c6:	fa5f fa8a 	uxtb.w	sl, sl
 800f1ca:	f1ba 0f02 	cmp.w	sl, #2
 800f1ce:	d1ec      	bne.n	800f1aa <_scanf_float+0x2c6>
 800f1d0:	3d03      	subs	r5, #3
 800f1d2:	b2ed      	uxtb	r5, r5
 800f1d4:	1b76      	subs	r6, r6, r5
 800f1d6:	6823      	ldr	r3, [r4, #0]
 800f1d8:	05da      	lsls	r2, r3, #23
 800f1da:	d52f      	bpl.n	800f23c <_scanf_float+0x358>
 800f1dc:	055b      	lsls	r3, r3, #21
 800f1de:	d510      	bpl.n	800f202 <_scanf_float+0x31e>
 800f1e0:	455e      	cmp	r6, fp
 800f1e2:	f67f aebf 	bls.w	800ef64 <_scanf_float+0x80>
 800f1e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f1ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f1ee:	463a      	mov	r2, r7
 800f1f0:	4640      	mov	r0, r8
 800f1f2:	4798      	blx	r3
 800f1f4:	6923      	ldr	r3, [r4, #16]
 800f1f6:	3b01      	subs	r3, #1
 800f1f8:	6123      	str	r3, [r4, #16]
 800f1fa:	e7f1      	b.n	800f1e0 <_scanf_float+0x2fc>
 800f1fc:	46aa      	mov	sl, r5
 800f1fe:	9602      	str	r6, [sp, #8]
 800f200:	e7df      	b.n	800f1c2 <_scanf_float+0x2de>
 800f202:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f206:	6923      	ldr	r3, [r4, #16]
 800f208:	2965      	cmp	r1, #101	; 0x65
 800f20a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800f20e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800f212:	6123      	str	r3, [r4, #16]
 800f214:	d00c      	beq.n	800f230 <_scanf_float+0x34c>
 800f216:	2945      	cmp	r1, #69	; 0x45
 800f218:	d00a      	beq.n	800f230 <_scanf_float+0x34c>
 800f21a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f21e:	463a      	mov	r2, r7
 800f220:	4640      	mov	r0, r8
 800f222:	4798      	blx	r3
 800f224:	6923      	ldr	r3, [r4, #16]
 800f226:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f22a:	3b01      	subs	r3, #1
 800f22c:	1eb5      	subs	r5, r6, #2
 800f22e:	6123      	str	r3, [r4, #16]
 800f230:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f234:	463a      	mov	r2, r7
 800f236:	4640      	mov	r0, r8
 800f238:	4798      	blx	r3
 800f23a:	462e      	mov	r6, r5
 800f23c:	6825      	ldr	r5, [r4, #0]
 800f23e:	f015 0510 	ands.w	r5, r5, #16
 800f242:	d159      	bne.n	800f2f8 <_scanf_float+0x414>
 800f244:	7035      	strb	r5, [r6, #0]
 800f246:	6823      	ldr	r3, [r4, #0]
 800f248:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f24c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f250:	d11b      	bne.n	800f28a <_scanf_float+0x3a6>
 800f252:	9b01      	ldr	r3, [sp, #4]
 800f254:	454b      	cmp	r3, r9
 800f256:	eba3 0209 	sub.w	r2, r3, r9
 800f25a:	d123      	bne.n	800f2a4 <_scanf_float+0x3c0>
 800f25c:	2200      	movs	r2, #0
 800f25e:	4659      	mov	r1, fp
 800f260:	4640      	mov	r0, r8
 800f262:	f000 ff13 	bl	801008c <_strtod_r>
 800f266:	6822      	ldr	r2, [r4, #0]
 800f268:	9b03      	ldr	r3, [sp, #12]
 800f26a:	f012 0f02 	tst.w	r2, #2
 800f26e:	ec57 6b10 	vmov	r6, r7, d0
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	d021      	beq.n	800f2ba <_scanf_float+0x3d6>
 800f276:	9903      	ldr	r1, [sp, #12]
 800f278:	1d1a      	adds	r2, r3, #4
 800f27a:	600a      	str	r2, [r1, #0]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	e9c3 6700 	strd	r6, r7, [r3]
 800f282:	68e3      	ldr	r3, [r4, #12]
 800f284:	3301      	adds	r3, #1
 800f286:	60e3      	str	r3, [r4, #12]
 800f288:	e66d      	b.n	800ef66 <_scanf_float+0x82>
 800f28a:	9b04      	ldr	r3, [sp, #16]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d0e5      	beq.n	800f25c <_scanf_float+0x378>
 800f290:	9905      	ldr	r1, [sp, #20]
 800f292:	230a      	movs	r3, #10
 800f294:	462a      	mov	r2, r5
 800f296:	3101      	adds	r1, #1
 800f298:	4640      	mov	r0, r8
 800f29a:	f000 ff7f 	bl	801019c <_strtol_r>
 800f29e:	9b04      	ldr	r3, [sp, #16]
 800f2a0:	9e05      	ldr	r6, [sp, #20]
 800f2a2:	1ac2      	subs	r2, r0, r3
 800f2a4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f2a8:	429e      	cmp	r6, r3
 800f2aa:	bf28      	it	cs
 800f2ac:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f2b0:	4912      	ldr	r1, [pc, #72]	; (800f2fc <_scanf_float+0x418>)
 800f2b2:	4630      	mov	r0, r6
 800f2b4:	f000 f8a8 	bl	800f408 <siprintf>
 800f2b8:	e7d0      	b.n	800f25c <_scanf_float+0x378>
 800f2ba:	9903      	ldr	r1, [sp, #12]
 800f2bc:	f012 0f04 	tst.w	r2, #4
 800f2c0:	f103 0204 	add.w	r2, r3, #4
 800f2c4:	600a      	str	r2, [r1, #0]
 800f2c6:	d1d9      	bne.n	800f27c <_scanf_float+0x398>
 800f2c8:	f8d3 8000 	ldr.w	r8, [r3]
 800f2cc:	ee10 2a10 	vmov	r2, s0
 800f2d0:	ee10 0a10 	vmov	r0, s0
 800f2d4:	463b      	mov	r3, r7
 800f2d6:	4639      	mov	r1, r7
 800f2d8:	f7f1 fc50 	bl	8000b7c <__aeabi_dcmpun>
 800f2dc:	b128      	cbz	r0, 800f2ea <_scanf_float+0x406>
 800f2de:	4808      	ldr	r0, [pc, #32]	; (800f300 <_scanf_float+0x41c>)
 800f2e0:	f000 f88c 	bl	800f3fc <nanf>
 800f2e4:	ed88 0a00 	vstr	s0, [r8]
 800f2e8:	e7cb      	b.n	800f282 <_scanf_float+0x39e>
 800f2ea:	4630      	mov	r0, r6
 800f2ec:	4639      	mov	r1, r7
 800f2ee:	f7f1 fca3 	bl	8000c38 <__aeabi_d2f>
 800f2f2:	f8c8 0000 	str.w	r0, [r8]
 800f2f6:	e7c4      	b.n	800f282 <_scanf_float+0x39e>
 800f2f8:	2500      	movs	r5, #0
 800f2fa:	e634      	b.n	800ef66 <_scanf_float+0x82>
 800f2fc:	08013bf0 	.word	0x08013bf0
 800f300:	08013cf3 	.word	0x08013cf3

0800f304 <srand>:
 800f304:	b538      	push	{r3, r4, r5, lr}
 800f306:	4b10      	ldr	r3, [pc, #64]	; (800f348 <srand+0x44>)
 800f308:	681d      	ldr	r5, [r3, #0]
 800f30a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800f30c:	4604      	mov	r4, r0
 800f30e:	b9b3      	cbnz	r3, 800f33e <srand+0x3a>
 800f310:	2018      	movs	r0, #24
 800f312:	f7ff f885 	bl	800e420 <malloc>
 800f316:	4602      	mov	r2, r0
 800f318:	63a8      	str	r0, [r5, #56]	; 0x38
 800f31a:	b920      	cbnz	r0, 800f326 <srand+0x22>
 800f31c:	4b0b      	ldr	r3, [pc, #44]	; (800f34c <srand+0x48>)
 800f31e:	480c      	ldr	r0, [pc, #48]	; (800f350 <srand+0x4c>)
 800f320:	2142      	movs	r1, #66	; 0x42
 800f322:	f000 ff57 	bl	80101d4 <__assert_func>
 800f326:	490b      	ldr	r1, [pc, #44]	; (800f354 <srand+0x50>)
 800f328:	4b0b      	ldr	r3, [pc, #44]	; (800f358 <srand+0x54>)
 800f32a:	e9c0 1300 	strd	r1, r3, [r0]
 800f32e:	4b0b      	ldr	r3, [pc, #44]	; (800f35c <srand+0x58>)
 800f330:	6083      	str	r3, [r0, #8]
 800f332:	230b      	movs	r3, #11
 800f334:	8183      	strh	r3, [r0, #12]
 800f336:	2100      	movs	r1, #0
 800f338:	2001      	movs	r0, #1
 800f33a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f33e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800f340:	2200      	movs	r2, #0
 800f342:	611c      	str	r4, [r3, #16]
 800f344:	615a      	str	r2, [r3, #20]
 800f346:	bd38      	pop	{r3, r4, r5, pc}
 800f348:	20001278 	.word	0x20001278
 800f34c:	08013bf5 	.word	0x08013bf5
 800f350:	08013c0c 	.word	0x08013c0c
 800f354:	abcd330e 	.word	0xabcd330e
 800f358:	e66d1234 	.word	0xe66d1234
 800f35c:	0005deec 	.word	0x0005deec

0800f360 <rand>:
 800f360:	4b16      	ldr	r3, [pc, #88]	; (800f3bc <rand+0x5c>)
 800f362:	b510      	push	{r4, lr}
 800f364:	681c      	ldr	r4, [r3, #0]
 800f366:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f368:	b9b3      	cbnz	r3, 800f398 <rand+0x38>
 800f36a:	2018      	movs	r0, #24
 800f36c:	f7ff f858 	bl	800e420 <malloc>
 800f370:	63a0      	str	r0, [r4, #56]	; 0x38
 800f372:	b928      	cbnz	r0, 800f380 <rand+0x20>
 800f374:	4602      	mov	r2, r0
 800f376:	4b12      	ldr	r3, [pc, #72]	; (800f3c0 <rand+0x60>)
 800f378:	4812      	ldr	r0, [pc, #72]	; (800f3c4 <rand+0x64>)
 800f37a:	214e      	movs	r1, #78	; 0x4e
 800f37c:	f000 ff2a 	bl	80101d4 <__assert_func>
 800f380:	4a11      	ldr	r2, [pc, #68]	; (800f3c8 <rand+0x68>)
 800f382:	4b12      	ldr	r3, [pc, #72]	; (800f3cc <rand+0x6c>)
 800f384:	e9c0 2300 	strd	r2, r3, [r0]
 800f388:	4b11      	ldr	r3, [pc, #68]	; (800f3d0 <rand+0x70>)
 800f38a:	6083      	str	r3, [r0, #8]
 800f38c:	230b      	movs	r3, #11
 800f38e:	8183      	strh	r3, [r0, #12]
 800f390:	2201      	movs	r2, #1
 800f392:	2300      	movs	r3, #0
 800f394:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f398:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800f39a:	4a0e      	ldr	r2, [pc, #56]	; (800f3d4 <rand+0x74>)
 800f39c:	6920      	ldr	r0, [r4, #16]
 800f39e:	6963      	ldr	r3, [r4, #20]
 800f3a0:	490d      	ldr	r1, [pc, #52]	; (800f3d8 <rand+0x78>)
 800f3a2:	4342      	muls	r2, r0
 800f3a4:	fb01 2203 	mla	r2, r1, r3, r2
 800f3a8:	fba0 0101 	umull	r0, r1, r0, r1
 800f3ac:	1c43      	adds	r3, r0, #1
 800f3ae:	eb42 0001 	adc.w	r0, r2, r1
 800f3b2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800f3b6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f3ba:	bd10      	pop	{r4, pc}
 800f3bc:	20001278 	.word	0x20001278
 800f3c0:	08013bf5 	.word	0x08013bf5
 800f3c4:	08013c0c 	.word	0x08013c0c
 800f3c8:	abcd330e 	.word	0xabcd330e
 800f3cc:	e66d1234 	.word	0xe66d1234
 800f3d0:	0005deec 	.word	0x0005deec
 800f3d4:	5851f42d 	.word	0x5851f42d
 800f3d8:	4c957f2d 	.word	0x4c957f2d

0800f3dc <_sbrk_r>:
 800f3dc:	b538      	push	{r3, r4, r5, lr}
 800f3de:	4d06      	ldr	r5, [pc, #24]	; (800f3f8 <_sbrk_r+0x1c>)
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	4604      	mov	r4, r0
 800f3e4:	4608      	mov	r0, r1
 800f3e6:	602b      	str	r3, [r5, #0]
 800f3e8:	f7f4 ff74 	bl	80042d4 <_sbrk>
 800f3ec:	1c43      	adds	r3, r0, #1
 800f3ee:	d102      	bne.n	800f3f6 <_sbrk_r+0x1a>
 800f3f0:	682b      	ldr	r3, [r5, #0]
 800f3f2:	b103      	cbz	r3, 800f3f6 <_sbrk_r+0x1a>
 800f3f4:	6023      	str	r3, [r4, #0]
 800f3f6:	bd38      	pop	{r3, r4, r5, pc}
 800f3f8:	20013ef8 	.word	0x20013ef8

0800f3fc <nanf>:
 800f3fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f404 <nanf+0x8>
 800f400:	4770      	bx	lr
 800f402:	bf00      	nop
 800f404:	7fc00000 	.word	0x7fc00000

0800f408 <siprintf>:
 800f408:	b40e      	push	{r1, r2, r3}
 800f40a:	b500      	push	{lr}
 800f40c:	b09c      	sub	sp, #112	; 0x70
 800f40e:	ab1d      	add	r3, sp, #116	; 0x74
 800f410:	9002      	str	r0, [sp, #8]
 800f412:	9006      	str	r0, [sp, #24]
 800f414:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f418:	4809      	ldr	r0, [pc, #36]	; (800f440 <siprintf+0x38>)
 800f41a:	9107      	str	r1, [sp, #28]
 800f41c:	9104      	str	r1, [sp, #16]
 800f41e:	4909      	ldr	r1, [pc, #36]	; (800f444 <siprintf+0x3c>)
 800f420:	f853 2b04 	ldr.w	r2, [r3], #4
 800f424:	9105      	str	r1, [sp, #20]
 800f426:	6800      	ldr	r0, [r0, #0]
 800f428:	9301      	str	r3, [sp, #4]
 800f42a:	a902      	add	r1, sp, #8
 800f42c:	f002 fe60 	bl	80120f0 <_svfiprintf_r>
 800f430:	9b02      	ldr	r3, [sp, #8]
 800f432:	2200      	movs	r2, #0
 800f434:	701a      	strb	r2, [r3, #0]
 800f436:	b01c      	add	sp, #112	; 0x70
 800f438:	f85d eb04 	ldr.w	lr, [sp], #4
 800f43c:	b003      	add	sp, #12
 800f43e:	4770      	bx	lr
 800f440:	20001278 	.word	0x20001278
 800f444:	ffff0208 	.word	0xffff0208

0800f448 <sulp>:
 800f448:	b570      	push	{r4, r5, r6, lr}
 800f44a:	4604      	mov	r4, r0
 800f44c:	460d      	mov	r5, r1
 800f44e:	ec45 4b10 	vmov	d0, r4, r5
 800f452:	4616      	mov	r6, r2
 800f454:	f002 fc8c 	bl	8011d70 <__ulp>
 800f458:	ec51 0b10 	vmov	r0, r1, d0
 800f45c:	b17e      	cbz	r6, 800f47e <sulp+0x36>
 800f45e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f462:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f466:	2b00      	cmp	r3, #0
 800f468:	dd09      	ble.n	800f47e <sulp+0x36>
 800f46a:	051b      	lsls	r3, r3, #20
 800f46c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f470:	2400      	movs	r4, #0
 800f472:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f476:	4622      	mov	r2, r4
 800f478:	462b      	mov	r3, r5
 800f47a:	f7f1 f8e5 	bl	8000648 <__aeabi_dmul>
 800f47e:	bd70      	pop	{r4, r5, r6, pc}

0800f480 <_strtod_l>:
 800f480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f484:	ed2d 8b02 	vpush	{d8}
 800f488:	b09d      	sub	sp, #116	; 0x74
 800f48a:	461f      	mov	r7, r3
 800f48c:	2300      	movs	r3, #0
 800f48e:	9318      	str	r3, [sp, #96]	; 0x60
 800f490:	4ba2      	ldr	r3, [pc, #648]	; (800f71c <_strtod_l+0x29c>)
 800f492:	9213      	str	r2, [sp, #76]	; 0x4c
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	9305      	str	r3, [sp, #20]
 800f498:	4604      	mov	r4, r0
 800f49a:	4618      	mov	r0, r3
 800f49c:	4688      	mov	r8, r1
 800f49e:	f7f0 febf 	bl	8000220 <strlen>
 800f4a2:	f04f 0a00 	mov.w	sl, #0
 800f4a6:	4605      	mov	r5, r0
 800f4a8:	f04f 0b00 	mov.w	fp, #0
 800f4ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f4b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f4b2:	781a      	ldrb	r2, [r3, #0]
 800f4b4:	2a2b      	cmp	r2, #43	; 0x2b
 800f4b6:	d04e      	beq.n	800f556 <_strtod_l+0xd6>
 800f4b8:	d83b      	bhi.n	800f532 <_strtod_l+0xb2>
 800f4ba:	2a0d      	cmp	r2, #13
 800f4bc:	d834      	bhi.n	800f528 <_strtod_l+0xa8>
 800f4be:	2a08      	cmp	r2, #8
 800f4c0:	d834      	bhi.n	800f52c <_strtod_l+0xac>
 800f4c2:	2a00      	cmp	r2, #0
 800f4c4:	d03e      	beq.n	800f544 <_strtod_l+0xc4>
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	930a      	str	r3, [sp, #40]	; 0x28
 800f4ca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f4cc:	7833      	ldrb	r3, [r6, #0]
 800f4ce:	2b30      	cmp	r3, #48	; 0x30
 800f4d0:	f040 80b0 	bne.w	800f634 <_strtod_l+0x1b4>
 800f4d4:	7873      	ldrb	r3, [r6, #1]
 800f4d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f4da:	2b58      	cmp	r3, #88	; 0x58
 800f4dc:	d168      	bne.n	800f5b0 <_strtod_l+0x130>
 800f4de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4e0:	9301      	str	r3, [sp, #4]
 800f4e2:	ab18      	add	r3, sp, #96	; 0x60
 800f4e4:	9702      	str	r7, [sp, #8]
 800f4e6:	9300      	str	r3, [sp, #0]
 800f4e8:	4a8d      	ldr	r2, [pc, #564]	; (800f720 <_strtod_l+0x2a0>)
 800f4ea:	ab19      	add	r3, sp, #100	; 0x64
 800f4ec:	a917      	add	r1, sp, #92	; 0x5c
 800f4ee:	4620      	mov	r0, r4
 800f4f0:	f001 fd82 	bl	8010ff8 <__gethex>
 800f4f4:	f010 0707 	ands.w	r7, r0, #7
 800f4f8:	4605      	mov	r5, r0
 800f4fa:	d005      	beq.n	800f508 <_strtod_l+0x88>
 800f4fc:	2f06      	cmp	r7, #6
 800f4fe:	d12c      	bne.n	800f55a <_strtod_l+0xda>
 800f500:	3601      	adds	r6, #1
 800f502:	2300      	movs	r3, #0
 800f504:	9617      	str	r6, [sp, #92]	; 0x5c
 800f506:	930a      	str	r3, [sp, #40]	; 0x28
 800f508:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	f040 8590 	bne.w	8010030 <_strtod_l+0xbb0>
 800f510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f512:	b1eb      	cbz	r3, 800f550 <_strtod_l+0xd0>
 800f514:	4652      	mov	r2, sl
 800f516:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f51a:	ec43 2b10 	vmov	d0, r2, r3
 800f51e:	b01d      	add	sp, #116	; 0x74
 800f520:	ecbd 8b02 	vpop	{d8}
 800f524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f528:	2a20      	cmp	r2, #32
 800f52a:	d1cc      	bne.n	800f4c6 <_strtod_l+0x46>
 800f52c:	3301      	adds	r3, #1
 800f52e:	9317      	str	r3, [sp, #92]	; 0x5c
 800f530:	e7be      	b.n	800f4b0 <_strtod_l+0x30>
 800f532:	2a2d      	cmp	r2, #45	; 0x2d
 800f534:	d1c7      	bne.n	800f4c6 <_strtod_l+0x46>
 800f536:	2201      	movs	r2, #1
 800f538:	920a      	str	r2, [sp, #40]	; 0x28
 800f53a:	1c5a      	adds	r2, r3, #1
 800f53c:	9217      	str	r2, [sp, #92]	; 0x5c
 800f53e:	785b      	ldrb	r3, [r3, #1]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d1c2      	bne.n	800f4ca <_strtod_l+0x4a>
 800f544:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f546:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	f040 856e 	bne.w	801002c <_strtod_l+0xbac>
 800f550:	4652      	mov	r2, sl
 800f552:	465b      	mov	r3, fp
 800f554:	e7e1      	b.n	800f51a <_strtod_l+0x9a>
 800f556:	2200      	movs	r2, #0
 800f558:	e7ee      	b.n	800f538 <_strtod_l+0xb8>
 800f55a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f55c:	b13a      	cbz	r2, 800f56e <_strtod_l+0xee>
 800f55e:	2135      	movs	r1, #53	; 0x35
 800f560:	a81a      	add	r0, sp, #104	; 0x68
 800f562:	f002 fd10 	bl	8011f86 <__copybits>
 800f566:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f568:	4620      	mov	r0, r4
 800f56a:	f002 f8cf 	bl	801170c <_Bfree>
 800f56e:	3f01      	subs	r7, #1
 800f570:	2f04      	cmp	r7, #4
 800f572:	d806      	bhi.n	800f582 <_strtod_l+0x102>
 800f574:	e8df f007 	tbb	[pc, r7]
 800f578:	1714030a 	.word	0x1714030a
 800f57c:	0a          	.byte	0x0a
 800f57d:	00          	.byte	0x00
 800f57e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800f582:	0728      	lsls	r0, r5, #28
 800f584:	d5c0      	bpl.n	800f508 <_strtod_l+0x88>
 800f586:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f58a:	e7bd      	b.n	800f508 <_strtod_l+0x88>
 800f58c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800f590:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f592:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f596:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f59a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f59e:	e7f0      	b.n	800f582 <_strtod_l+0x102>
 800f5a0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800f724 <_strtod_l+0x2a4>
 800f5a4:	e7ed      	b.n	800f582 <_strtod_l+0x102>
 800f5a6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f5aa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800f5ae:	e7e8      	b.n	800f582 <_strtod_l+0x102>
 800f5b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f5b2:	1c5a      	adds	r2, r3, #1
 800f5b4:	9217      	str	r2, [sp, #92]	; 0x5c
 800f5b6:	785b      	ldrb	r3, [r3, #1]
 800f5b8:	2b30      	cmp	r3, #48	; 0x30
 800f5ba:	d0f9      	beq.n	800f5b0 <_strtod_l+0x130>
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d0a3      	beq.n	800f508 <_strtod_l+0x88>
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	f04f 0900 	mov.w	r9, #0
 800f5c6:	9304      	str	r3, [sp, #16]
 800f5c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f5ca:	9308      	str	r3, [sp, #32]
 800f5cc:	f8cd 901c 	str.w	r9, [sp, #28]
 800f5d0:	464f      	mov	r7, r9
 800f5d2:	220a      	movs	r2, #10
 800f5d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f5d6:	7806      	ldrb	r6, [r0, #0]
 800f5d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f5dc:	b2d9      	uxtb	r1, r3
 800f5de:	2909      	cmp	r1, #9
 800f5e0:	d92a      	bls.n	800f638 <_strtod_l+0x1b8>
 800f5e2:	9905      	ldr	r1, [sp, #20]
 800f5e4:	462a      	mov	r2, r5
 800f5e6:	f002 ffe7 	bl	80125b8 <strncmp>
 800f5ea:	b398      	cbz	r0, 800f654 <_strtod_l+0x1d4>
 800f5ec:	2000      	movs	r0, #0
 800f5ee:	4632      	mov	r2, r6
 800f5f0:	463d      	mov	r5, r7
 800f5f2:	9005      	str	r0, [sp, #20]
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	2a65      	cmp	r2, #101	; 0x65
 800f5f8:	d001      	beq.n	800f5fe <_strtod_l+0x17e>
 800f5fa:	2a45      	cmp	r2, #69	; 0x45
 800f5fc:	d118      	bne.n	800f630 <_strtod_l+0x1b0>
 800f5fe:	b91d      	cbnz	r5, 800f608 <_strtod_l+0x188>
 800f600:	9a04      	ldr	r2, [sp, #16]
 800f602:	4302      	orrs	r2, r0
 800f604:	d09e      	beq.n	800f544 <_strtod_l+0xc4>
 800f606:	2500      	movs	r5, #0
 800f608:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800f60c:	f108 0201 	add.w	r2, r8, #1
 800f610:	9217      	str	r2, [sp, #92]	; 0x5c
 800f612:	f898 2001 	ldrb.w	r2, [r8, #1]
 800f616:	2a2b      	cmp	r2, #43	; 0x2b
 800f618:	d075      	beq.n	800f706 <_strtod_l+0x286>
 800f61a:	2a2d      	cmp	r2, #45	; 0x2d
 800f61c:	d07b      	beq.n	800f716 <_strtod_l+0x296>
 800f61e:	f04f 0c00 	mov.w	ip, #0
 800f622:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f626:	2909      	cmp	r1, #9
 800f628:	f240 8082 	bls.w	800f730 <_strtod_l+0x2b0>
 800f62c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f630:	2600      	movs	r6, #0
 800f632:	e09d      	b.n	800f770 <_strtod_l+0x2f0>
 800f634:	2300      	movs	r3, #0
 800f636:	e7c4      	b.n	800f5c2 <_strtod_l+0x142>
 800f638:	2f08      	cmp	r7, #8
 800f63a:	bfd8      	it	le
 800f63c:	9907      	ldrle	r1, [sp, #28]
 800f63e:	f100 0001 	add.w	r0, r0, #1
 800f642:	bfda      	itte	le
 800f644:	fb02 3301 	mlale	r3, r2, r1, r3
 800f648:	9307      	strle	r3, [sp, #28]
 800f64a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f64e:	3701      	adds	r7, #1
 800f650:	9017      	str	r0, [sp, #92]	; 0x5c
 800f652:	e7bf      	b.n	800f5d4 <_strtod_l+0x154>
 800f654:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f656:	195a      	adds	r2, r3, r5
 800f658:	9217      	str	r2, [sp, #92]	; 0x5c
 800f65a:	5d5a      	ldrb	r2, [r3, r5]
 800f65c:	2f00      	cmp	r7, #0
 800f65e:	d037      	beq.n	800f6d0 <_strtod_l+0x250>
 800f660:	9005      	str	r0, [sp, #20]
 800f662:	463d      	mov	r5, r7
 800f664:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f668:	2b09      	cmp	r3, #9
 800f66a:	d912      	bls.n	800f692 <_strtod_l+0x212>
 800f66c:	2301      	movs	r3, #1
 800f66e:	e7c2      	b.n	800f5f6 <_strtod_l+0x176>
 800f670:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f672:	1c5a      	adds	r2, r3, #1
 800f674:	9217      	str	r2, [sp, #92]	; 0x5c
 800f676:	785a      	ldrb	r2, [r3, #1]
 800f678:	3001      	adds	r0, #1
 800f67a:	2a30      	cmp	r2, #48	; 0x30
 800f67c:	d0f8      	beq.n	800f670 <_strtod_l+0x1f0>
 800f67e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f682:	2b08      	cmp	r3, #8
 800f684:	f200 84d9 	bhi.w	801003a <_strtod_l+0xbba>
 800f688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f68a:	9005      	str	r0, [sp, #20]
 800f68c:	2000      	movs	r0, #0
 800f68e:	9308      	str	r3, [sp, #32]
 800f690:	4605      	mov	r5, r0
 800f692:	3a30      	subs	r2, #48	; 0x30
 800f694:	f100 0301 	add.w	r3, r0, #1
 800f698:	d014      	beq.n	800f6c4 <_strtod_l+0x244>
 800f69a:	9905      	ldr	r1, [sp, #20]
 800f69c:	4419      	add	r1, r3
 800f69e:	9105      	str	r1, [sp, #20]
 800f6a0:	462b      	mov	r3, r5
 800f6a2:	eb00 0e05 	add.w	lr, r0, r5
 800f6a6:	210a      	movs	r1, #10
 800f6a8:	4573      	cmp	r3, lr
 800f6aa:	d113      	bne.n	800f6d4 <_strtod_l+0x254>
 800f6ac:	182b      	adds	r3, r5, r0
 800f6ae:	2b08      	cmp	r3, #8
 800f6b0:	f105 0501 	add.w	r5, r5, #1
 800f6b4:	4405      	add	r5, r0
 800f6b6:	dc1c      	bgt.n	800f6f2 <_strtod_l+0x272>
 800f6b8:	9907      	ldr	r1, [sp, #28]
 800f6ba:	230a      	movs	r3, #10
 800f6bc:	fb03 2301 	mla	r3, r3, r1, r2
 800f6c0:	9307      	str	r3, [sp, #28]
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f6c6:	1c51      	adds	r1, r2, #1
 800f6c8:	9117      	str	r1, [sp, #92]	; 0x5c
 800f6ca:	7852      	ldrb	r2, [r2, #1]
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	e7c9      	b.n	800f664 <_strtod_l+0x1e4>
 800f6d0:	4638      	mov	r0, r7
 800f6d2:	e7d2      	b.n	800f67a <_strtod_l+0x1fa>
 800f6d4:	2b08      	cmp	r3, #8
 800f6d6:	dc04      	bgt.n	800f6e2 <_strtod_l+0x262>
 800f6d8:	9e07      	ldr	r6, [sp, #28]
 800f6da:	434e      	muls	r6, r1
 800f6dc:	9607      	str	r6, [sp, #28]
 800f6de:	3301      	adds	r3, #1
 800f6e0:	e7e2      	b.n	800f6a8 <_strtod_l+0x228>
 800f6e2:	f103 0c01 	add.w	ip, r3, #1
 800f6e6:	f1bc 0f10 	cmp.w	ip, #16
 800f6ea:	bfd8      	it	le
 800f6ec:	fb01 f909 	mulle.w	r9, r1, r9
 800f6f0:	e7f5      	b.n	800f6de <_strtod_l+0x25e>
 800f6f2:	2d10      	cmp	r5, #16
 800f6f4:	bfdc      	itt	le
 800f6f6:	230a      	movle	r3, #10
 800f6f8:	fb03 2909 	mlale	r9, r3, r9, r2
 800f6fc:	e7e1      	b.n	800f6c2 <_strtod_l+0x242>
 800f6fe:	2300      	movs	r3, #0
 800f700:	9305      	str	r3, [sp, #20]
 800f702:	2301      	movs	r3, #1
 800f704:	e77c      	b.n	800f600 <_strtod_l+0x180>
 800f706:	f04f 0c00 	mov.w	ip, #0
 800f70a:	f108 0202 	add.w	r2, r8, #2
 800f70e:	9217      	str	r2, [sp, #92]	; 0x5c
 800f710:	f898 2002 	ldrb.w	r2, [r8, #2]
 800f714:	e785      	b.n	800f622 <_strtod_l+0x1a2>
 800f716:	f04f 0c01 	mov.w	ip, #1
 800f71a:	e7f6      	b.n	800f70a <_strtod_l+0x28a>
 800f71c:	08013ed4 	.word	0x08013ed4
 800f720:	08013c68 	.word	0x08013c68
 800f724:	7ff00000 	.word	0x7ff00000
 800f728:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f72a:	1c51      	adds	r1, r2, #1
 800f72c:	9117      	str	r1, [sp, #92]	; 0x5c
 800f72e:	7852      	ldrb	r2, [r2, #1]
 800f730:	2a30      	cmp	r2, #48	; 0x30
 800f732:	d0f9      	beq.n	800f728 <_strtod_l+0x2a8>
 800f734:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f738:	2908      	cmp	r1, #8
 800f73a:	f63f af79 	bhi.w	800f630 <_strtod_l+0x1b0>
 800f73e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f742:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f744:	9206      	str	r2, [sp, #24]
 800f746:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f748:	1c51      	adds	r1, r2, #1
 800f74a:	9117      	str	r1, [sp, #92]	; 0x5c
 800f74c:	7852      	ldrb	r2, [r2, #1]
 800f74e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f752:	2e09      	cmp	r6, #9
 800f754:	d937      	bls.n	800f7c6 <_strtod_l+0x346>
 800f756:	9e06      	ldr	r6, [sp, #24]
 800f758:	1b89      	subs	r1, r1, r6
 800f75a:	2908      	cmp	r1, #8
 800f75c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f760:	dc02      	bgt.n	800f768 <_strtod_l+0x2e8>
 800f762:	4576      	cmp	r6, lr
 800f764:	bfa8      	it	ge
 800f766:	4676      	movge	r6, lr
 800f768:	f1bc 0f00 	cmp.w	ip, #0
 800f76c:	d000      	beq.n	800f770 <_strtod_l+0x2f0>
 800f76e:	4276      	negs	r6, r6
 800f770:	2d00      	cmp	r5, #0
 800f772:	d14d      	bne.n	800f810 <_strtod_l+0x390>
 800f774:	9904      	ldr	r1, [sp, #16]
 800f776:	4301      	orrs	r1, r0
 800f778:	f47f aec6 	bne.w	800f508 <_strtod_l+0x88>
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	f47f aee1 	bne.w	800f544 <_strtod_l+0xc4>
 800f782:	2a69      	cmp	r2, #105	; 0x69
 800f784:	d027      	beq.n	800f7d6 <_strtod_l+0x356>
 800f786:	dc24      	bgt.n	800f7d2 <_strtod_l+0x352>
 800f788:	2a49      	cmp	r2, #73	; 0x49
 800f78a:	d024      	beq.n	800f7d6 <_strtod_l+0x356>
 800f78c:	2a4e      	cmp	r2, #78	; 0x4e
 800f78e:	f47f aed9 	bne.w	800f544 <_strtod_l+0xc4>
 800f792:	499f      	ldr	r1, [pc, #636]	; (800fa10 <_strtod_l+0x590>)
 800f794:	a817      	add	r0, sp, #92	; 0x5c
 800f796:	f001 fe87 	bl	80114a8 <__match>
 800f79a:	2800      	cmp	r0, #0
 800f79c:	f43f aed2 	beq.w	800f544 <_strtod_l+0xc4>
 800f7a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	2b28      	cmp	r3, #40	; 0x28
 800f7a6:	d12d      	bne.n	800f804 <_strtod_l+0x384>
 800f7a8:	499a      	ldr	r1, [pc, #616]	; (800fa14 <_strtod_l+0x594>)
 800f7aa:	aa1a      	add	r2, sp, #104	; 0x68
 800f7ac:	a817      	add	r0, sp, #92	; 0x5c
 800f7ae:	f001 fe8f 	bl	80114d0 <__hexnan>
 800f7b2:	2805      	cmp	r0, #5
 800f7b4:	d126      	bne.n	800f804 <_strtod_l+0x384>
 800f7b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f7b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800f7bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f7c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f7c4:	e6a0      	b.n	800f508 <_strtod_l+0x88>
 800f7c6:	210a      	movs	r1, #10
 800f7c8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800f7cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f7d0:	e7b9      	b.n	800f746 <_strtod_l+0x2c6>
 800f7d2:	2a6e      	cmp	r2, #110	; 0x6e
 800f7d4:	e7db      	b.n	800f78e <_strtod_l+0x30e>
 800f7d6:	4990      	ldr	r1, [pc, #576]	; (800fa18 <_strtod_l+0x598>)
 800f7d8:	a817      	add	r0, sp, #92	; 0x5c
 800f7da:	f001 fe65 	bl	80114a8 <__match>
 800f7de:	2800      	cmp	r0, #0
 800f7e0:	f43f aeb0 	beq.w	800f544 <_strtod_l+0xc4>
 800f7e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f7e6:	498d      	ldr	r1, [pc, #564]	; (800fa1c <_strtod_l+0x59c>)
 800f7e8:	3b01      	subs	r3, #1
 800f7ea:	a817      	add	r0, sp, #92	; 0x5c
 800f7ec:	9317      	str	r3, [sp, #92]	; 0x5c
 800f7ee:	f001 fe5b 	bl	80114a8 <__match>
 800f7f2:	b910      	cbnz	r0, 800f7fa <_strtod_l+0x37a>
 800f7f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f7f6:	3301      	adds	r3, #1
 800f7f8:	9317      	str	r3, [sp, #92]	; 0x5c
 800f7fa:	f8df b230 	ldr.w	fp, [pc, #560]	; 800fa2c <_strtod_l+0x5ac>
 800f7fe:	f04f 0a00 	mov.w	sl, #0
 800f802:	e681      	b.n	800f508 <_strtod_l+0x88>
 800f804:	4886      	ldr	r0, [pc, #536]	; (800fa20 <_strtod_l+0x5a0>)
 800f806:	f002 fecf 	bl	80125a8 <nan>
 800f80a:	ec5b ab10 	vmov	sl, fp, d0
 800f80e:	e67b      	b.n	800f508 <_strtod_l+0x88>
 800f810:	9b05      	ldr	r3, [sp, #20]
 800f812:	9807      	ldr	r0, [sp, #28]
 800f814:	1af3      	subs	r3, r6, r3
 800f816:	2f00      	cmp	r7, #0
 800f818:	bf08      	it	eq
 800f81a:	462f      	moveq	r7, r5
 800f81c:	2d10      	cmp	r5, #16
 800f81e:	9306      	str	r3, [sp, #24]
 800f820:	46a8      	mov	r8, r5
 800f822:	bfa8      	it	ge
 800f824:	f04f 0810 	movge.w	r8, #16
 800f828:	f7f0 fe94 	bl	8000554 <__aeabi_ui2d>
 800f82c:	2d09      	cmp	r5, #9
 800f82e:	4682      	mov	sl, r0
 800f830:	468b      	mov	fp, r1
 800f832:	dd13      	ble.n	800f85c <_strtod_l+0x3dc>
 800f834:	4b7b      	ldr	r3, [pc, #492]	; (800fa24 <_strtod_l+0x5a4>)
 800f836:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f83a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f83e:	f7f0 ff03 	bl	8000648 <__aeabi_dmul>
 800f842:	4682      	mov	sl, r0
 800f844:	4648      	mov	r0, r9
 800f846:	468b      	mov	fp, r1
 800f848:	f7f0 fe84 	bl	8000554 <__aeabi_ui2d>
 800f84c:	4602      	mov	r2, r0
 800f84e:	460b      	mov	r3, r1
 800f850:	4650      	mov	r0, sl
 800f852:	4659      	mov	r1, fp
 800f854:	f7f0 fd42 	bl	80002dc <__adddf3>
 800f858:	4682      	mov	sl, r0
 800f85a:	468b      	mov	fp, r1
 800f85c:	2d0f      	cmp	r5, #15
 800f85e:	dc38      	bgt.n	800f8d2 <_strtod_l+0x452>
 800f860:	9b06      	ldr	r3, [sp, #24]
 800f862:	2b00      	cmp	r3, #0
 800f864:	f43f ae50 	beq.w	800f508 <_strtod_l+0x88>
 800f868:	dd24      	ble.n	800f8b4 <_strtod_l+0x434>
 800f86a:	2b16      	cmp	r3, #22
 800f86c:	dc0b      	bgt.n	800f886 <_strtod_l+0x406>
 800f86e:	496d      	ldr	r1, [pc, #436]	; (800fa24 <_strtod_l+0x5a4>)
 800f870:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f874:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f878:	4652      	mov	r2, sl
 800f87a:	465b      	mov	r3, fp
 800f87c:	f7f0 fee4 	bl	8000648 <__aeabi_dmul>
 800f880:	4682      	mov	sl, r0
 800f882:	468b      	mov	fp, r1
 800f884:	e640      	b.n	800f508 <_strtod_l+0x88>
 800f886:	9a06      	ldr	r2, [sp, #24]
 800f888:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f88c:	4293      	cmp	r3, r2
 800f88e:	db20      	blt.n	800f8d2 <_strtod_l+0x452>
 800f890:	4c64      	ldr	r4, [pc, #400]	; (800fa24 <_strtod_l+0x5a4>)
 800f892:	f1c5 050f 	rsb	r5, r5, #15
 800f896:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f89a:	4652      	mov	r2, sl
 800f89c:	465b      	mov	r3, fp
 800f89e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8a2:	f7f0 fed1 	bl	8000648 <__aeabi_dmul>
 800f8a6:	9b06      	ldr	r3, [sp, #24]
 800f8a8:	1b5d      	subs	r5, r3, r5
 800f8aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f8ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f8b2:	e7e3      	b.n	800f87c <_strtod_l+0x3fc>
 800f8b4:	9b06      	ldr	r3, [sp, #24]
 800f8b6:	3316      	adds	r3, #22
 800f8b8:	db0b      	blt.n	800f8d2 <_strtod_l+0x452>
 800f8ba:	9b05      	ldr	r3, [sp, #20]
 800f8bc:	1b9e      	subs	r6, r3, r6
 800f8be:	4b59      	ldr	r3, [pc, #356]	; (800fa24 <_strtod_l+0x5a4>)
 800f8c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f8c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f8c8:	4650      	mov	r0, sl
 800f8ca:	4659      	mov	r1, fp
 800f8cc:	f7f0 ffe6 	bl	800089c <__aeabi_ddiv>
 800f8d0:	e7d6      	b.n	800f880 <_strtod_l+0x400>
 800f8d2:	9b06      	ldr	r3, [sp, #24]
 800f8d4:	eba5 0808 	sub.w	r8, r5, r8
 800f8d8:	4498      	add	r8, r3
 800f8da:	f1b8 0f00 	cmp.w	r8, #0
 800f8de:	dd74      	ble.n	800f9ca <_strtod_l+0x54a>
 800f8e0:	f018 030f 	ands.w	r3, r8, #15
 800f8e4:	d00a      	beq.n	800f8fc <_strtod_l+0x47c>
 800f8e6:	494f      	ldr	r1, [pc, #316]	; (800fa24 <_strtod_l+0x5a4>)
 800f8e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f8ec:	4652      	mov	r2, sl
 800f8ee:	465b      	mov	r3, fp
 800f8f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8f4:	f7f0 fea8 	bl	8000648 <__aeabi_dmul>
 800f8f8:	4682      	mov	sl, r0
 800f8fa:	468b      	mov	fp, r1
 800f8fc:	f038 080f 	bics.w	r8, r8, #15
 800f900:	d04f      	beq.n	800f9a2 <_strtod_l+0x522>
 800f902:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f906:	dd22      	ble.n	800f94e <_strtod_l+0x4ce>
 800f908:	2500      	movs	r5, #0
 800f90a:	462e      	mov	r6, r5
 800f90c:	9507      	str	r5, [sp, #28]
 800f90e:	9505      	str	r5, [sp, #20]
 800f910:	2322      	movs	r3, #34	; 0x22
 800f912:	f8df b118 	ldr.w	fp, [pc, #280]	; 800fa2c <_strtod_l+0x5ac>
 800f916:	6023      	str	r3, [r4, #0]
 800f918:	f04f 0a00 	mov.w	sl, #0
 800f91c:	9b07      	ldr	r3, [sp, #28]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	f43f adf2 	beq.w	800f508 <_strtod_l+0x88>
 800f924:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f926:	4620      	mov	r0, r4
 800f928:	f001 fef0 	bl	801170c <_Bfree>
 800f92c:	9905      	ldr	r1, [sp, #20]
 800f92e:	4620      	mov	r0, r4
 800f930:	f001 feec 	bl	801170c <_Bfree>
 800f934:	4631      	mov	r1, r6
 800f936:	4620      	mov	r0, r4
 800f938:	f001 fee8 	bl	801170c <_Bfree>
 800f93c:	9907      	ldr	r1, [sp, #28]
 800f93e:	4620      	mov	r0, r4
 800f940:	f001 fee4 	bl	801170c <_Bfree>
 800f944:	4629      	mov	r1, r5
 800f946:	4620      	mov	r0, r4
 800f948:	f001 fee0 	bl	801170c <_Bfree>
 800f94c:	e5dc      	b.n	800f508 <_strtod_l+0x88>
 800f94e:	4b36      	ldr	r3, [pc, #216]	; (800fa28 <_strtod_l+0x5a8>)
 800f950:	9304      	str	r3, [sp, #16]
 800f952:	2300      	movs	r3, #0
 800f954:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f958:	4650      	mov	r0, sl
 800f95a:	4659      	mov	r1, fp
 800f95c:	4699      	mov	r9, r3
 800f95e:	f1b8 0f01 	cmp.w	r8, #1
 800f962:	dc21      	bgt.n	800f9a8 <_strtod_l+0x528>
 800f964:	b10b      	cbz	r3, 800f96a <_strtod_l+0x4ea>
 800f966:	4682      	mov	sl, r0
 800f968:	468b      	mov	fp, r1
 800f96a:	4b2f      	ldr	r3, [pc, #188]	; (800fa28 <_strtod_l+0x5a8>)
 800f96c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f970:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f974:	4652      	mov	r2, sl
 800f976:	465b      	mov	r3, fp
 800f978:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f97c:	f7f0 fe64 	bl	8000648 <__aeabi_dmul>
 800f980:	4b2a      	ldr	r3, [pc, #168]	; (800fa2c <_strtod_l+0x5ac>)
 800f982:	460a      	mov	r2, r1
 800f984:	400b      	ands	r3, r1
 800f986:	492a      	ldr	r1, [pc, #168]	; (800fa30 <_strtod_l+0x5b0>)
 800f988:	428b      	cmp	r3, r1
 800f98a:	4682      	mov	sl, r0
 800f98c:	d8bc      	bhi.n	800f908 <_strtod_l+0x488>
 800f98e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f992:	428b      	cmp	r3, r1
 800f994:	bf86      	itte	hi
 800f996:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800fa34 <_strtod_l+0x5b4>
 800f99a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800f99e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	9304      	str	r3, [sp, #16]
 800f9a6:	e084      	b.n	800fab2 <_strtod_l+0x632>
 800f9a8:	f018 0f01 	tst.w	r8, #1
 800f9ac:	d005      	beq.n	800f9ba <_strtod_l+0x53a>
 800f9ae:	9b04      	ldr	r3, [sp, #16]
 800f9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b4:	f7f0 fe48 	bl	8000648 <__aeabi_dmul>
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	9a04      	ldr	r2, [sp, #16]
 800f9bc:	3208      	adds	r2, #8
 800f9be:	f109 0901 	add.w	r9, r9, #1
 800f9c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f9c6:	9204      	str	r2, [sp, #16]
 800f9c8:	e7c9      	b.n	800f95e <_strtod_l+0x4de>
 800f9ca:	d0ea      	beq.n	800f9a2 <_strtod_l+0x522>
 800f9cc:	f1c8 0800 	rsb	r8, r8, #0
 800f9d0:	f018 020f 	ands.w	r2, r8, #15
 800f9d4:	d00a      	beq.n	800f9ec <_strtod_l+0x56c>
 800f9d6:	4b13      	ldr	r3, [pc, #76]	; (800fa24 <_strtod_l+0x5a4>)
 800f9d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f9dc:	4650      	mov	r0, sl
 800f9de:	4659      	mov	r1, fp
 800f9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9e4:	f7f0 ff5a 	bl	800089c <__aeabi_ddiv>
 800f9e8:	4682      	mov	sl, r0
 800f9ea:	468b      	mov	fp, r1
 800f9ec:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f9f0:	d0d7      	beq.n	800f9a2 <_strtod_l+0x522>
 800f9f2:	f1b8 0f1f 	cmp.w	r8, #31
 800f9f6:	dd1f      	ble.n	800fa38 <_strtod_l+0x5b8>
 800f9f8:	2500      	movs	r5, #0
 800f9fa:	462e      	mov	r6, r5
 800f9fc:	9507      	str	r5, [sp, #28]
 800f9fe:	9505      	str	r5, [sp, #20]
 800fa00:	2322      	movs	r3, #34	; 0x22
 800fa02:	f04f 0a00 	mov.w	sl, #0
 800fa06:	f04f 0b00 	mov.w	fp, #0
 800fa0a:	6023      	str	r3, [r4, #0]
 800fa0c:	e786      	b.n	800f91c <_strtod_l+0x49c>
 800fa0e:	bf00      	nop
 800fa10:	08013bc9 	.word	0x08013bc9
 800fa14:	08013c7c 	.word	0x08013c7c
 800fa18:	08013bc1 	.word	0x08013bc1
 800fa1c:	08013df8 	.word	0x08013df8
 800fa20:	08013cf3 	.word	0x08013cf3
 800fa24:	08013f70 	.word	0x08013f70
 800fa28:	08013f48 	.word	0x08013f48
 800fa2c:	7ff00000 	.word	0x7ff00000
 800fa30:	7ca00000 	.word	0x7ca00000
 800fa34:	7fefffff 	.word	0x7fefffff
 800fa38:	f018 0310 	ands.w	r3, r8, #16
 800fa3c:	bf18      	it	ne
 800fa3e:	236a      	movne	r3, #106	; 0x6a
 800fa40:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800fdf0 <_strtod_l+0x970>
 800fa44:	9304      	str	r3, [sp, #16]
 800fa46:	4650      	mov	r0, sl
 800fa48:	4659      	mov	r1, fp
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	f018 0f01 	tst.w	r8, #1
 800fa50:	d004      	beq.n	800fa5c <_strtod_l+0x5dc>
 800fa52:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fa56:	f7f0 fdf7 	bl	8000648 <__aeabi_dmul>
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800fa60:	f109 0908 	add.w	r9, r9, #8
 800fa64:	d1f2      	bne.n	800fa4c <_strtod_l+0x5cc>
 800fa66:	b10b      	cbz	r3, 800fa6c <_strtod_l+0x5ec>
 800fa68:	4682      	mov	sl, r0
 800fa6a:	468b      	mov	fp, r1
 800fa6c:	9b04      	ldr	r3, [sp, #16]
 800fa6e:	b1c3      	cbz	r3, 800faa2 <_strtod_l+0x622>
 800fa70:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800fa74:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	4659      	mov	r1, fp
 800fa7c:	dd11      	ble.n	800faa2 <_strtod_l+0x622>
 800fa7e:	2b1f      	cmp	r3, #31
 800fa80:	f340 8124 	ble.w	800fccc <_strtod_l+0x84c>
 800fa84:	2b34      	cmp	r3, #52	; 0x34
 800fa86:	bfde      	ittt	le
 800fa88:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800fa8c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800fa90:	fa03 f202 	lslle.w	r2, r3, r2
 800fa94:	f04f 0a00 	mov.w	sl, #0
 800fa98:	bfcc      	ite	gt
 800fa9a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800fa9e:	ea02 0b01 	andle.w	fp, r2, r1
 800faa2:	2200      	movs	r2, #0
 800faa4:	2300      	movs	r3, #0
 800faa6:	4650      	mov	r0, sl
 800faa8:	4659      	mov	r1, fp
 800faaa:	f7f1 f835 	bl	8000b18 <__aeabi_dcmpeq>
 800faae:	2800      	cmp	r0, #0
 800fab0:	d1a2      	bne.n	800f9f8 <_strtod_l+0x578>
 800fab2:	9b07      	ldr	r3, [sp, #28]
 800fab4:	9300      	str	r3, [sp, #0]
 800fab6:	9908      	ldr	r1, [sp, #32]
 800fab8:	462b      	mov	r3, r5
 800faba:	463a      	mov	r2, r7
 800fabc:	4620      	mov	r0, r4
 800fabe:	f001 fe8d 	bl	80117dc <__s2b>
 800fac2:	9007      	str	r0, [sp, #28]
 800fac4:	2800      	cmp	r0, #0
 800fac6:	f43f af1f 	beq.w	800f908 <_strtod_l+0x488>
 800faca:	9b05      	ldr	r3, [sp, #20]
 800facc:	1b9e      	subs	r6, r3, r6
 800face:	9b06      	ldr	r3, [sp, #24]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	bfb4      	ite	lt
 800fad4:	4633      	movlt	r3, r6
 800fad6:	2300      	movge	r3, #0
 800fad8:	930c      	str	r3, [sp, #48]	; 0x30
 800fada:	9b06      	ldr	r3, [sp, #24]
 800fadc:	2500      	movs	r5, #0
 800fade:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fae2:	9312      	str	r3, [sp, #72]	; 0x48
 800fae4:	462e      	mov	r6, r5
 800fae6:	9b07      	ldr	r3, [sp, #28]
 800fae8:	4620      	mov	r0, r4
 800faea:	6859      	ldr	r1, [r3, #4]
 800faec:	f001 fdce 	bl	801168c <_Balloc>
 800faf0:	9005      	str	r0, [sp, #20]
 800faf2:	2800      	cmp	r0, #0
 800faf4:	f43f af0c 	beq.w	800f910 <_strtod_l+0x490>
 800faf8:	9b07      	ldr	r3, [sp, #28]
 800fafa:	691a      	ldr	r2, [r3, #16]
 800fafc:	3202      	adds	r2, #2
 800fafe:	f103 010c 	add.w	r1, r3, #12
 800fb02:	0092      	lsls	r2, r2, #2
 800fb04:	300c      	adds	r0, #12
 800fb06:	f001 fda7 	bl	8011658 <memcpy>
 800fb0a:	ec4b ab10 	vmov	d0, sl, fp
 800fb0e:	aa1a      	add	r2, sp, #104	; 0x68
 800fb10:	a919      	add	r1, sp, #100	; 0x64
 800fb12:	4620      	mov	r0, r4
 800fb14:	f002 f9a8 	bl	8011e68 <__d2b>
 800fb18:	ec4b ab18 	vmov	d8, sl, fp
 800fb1c:	9018      	str	r0, [sp, #96]	; 0x60
 800fb1e:	2800      	cmp	r0, #0
 800fb20:	f43f aef6 	beq.w	800f910 <_strtod_l+0x490>
 800fb24:	2101      	movs	r1, #1
 800fb26:	4620      	mov	r0, r4
 800fb28:	f001 fef2 	bl	8011910 <__i2b>
 800fb2c:	4606      	mov	r6, r0
 800fb2e:	2800      	cmp	r0, #0
 800fb30:	f43f aeee 	beq.w	800f910 <_strtod_l+0x490>
 800fb34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fb36:	9904      	ldr	r1, [sp, #16]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	bfab      	itete	ge
 800fb3c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800fb3e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800fb40:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800fb42:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800fb46:	bfac      	ite	ge
 800fb48:	eb03 0902 	addge.w	r9, r3, r2
 800fb4c:	1ad7      	sublt	r7, r2, r3
 800fb4e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fb50:	eba3 0801 	sub.w	r8, r3, r1
 800fb54:	4490      	add	r8, r2
 800fb56:	4ba1      	ldr	r3, [pc, #644]	; (800fddc <_strtod_l+0x95c>)
 800fb58:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800fb5c:	4598      	cmp	r8, r3
 800fb5e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fb62:	f280 80c7 	bge.w	800fcf4 <_strtod_l+0x874>
 800fb66:	eba3 0308 	sub.w	r3, r3, r8
 800fb6a:	2b1f      	cmp	r3, #31
 800fb6c:	eba2 0203 	sub.w	r2, r2, r3
 800fb70:	f04f 0101 	mov.w	r1, #1
 800fb74:	f300 80b1 	bgt.w	800fcda <_strtod_l+0x85a>
 800fb78:	fa01 f303 	lsl.w	r3, r1, r3
 800fb7c:	930d      	str	r3, [sp, #52]	; 0x34
 800fb7e:	2300      	movs	r3, #0
 800fb80:	9308      	str	r3, [sp, #32]
 800fb82:	eb09 0802 	add.w	r8, r9, r2
 800fb86:	9b04      	ldr	r3, [sp, #16]
 800fb88:	45c1      	cmp	r9, r8
 800fb8a:	4417      	add	r7, r2
 800fb8c:	441f      	add	r7, r3
 800fb8e:	464b      	mov	r3, r9
 800fb90:	bfa8      	it	ge
 800fb92:	4643      	movge	r3, r8
 800fb94:	42bb      	cmp	r3, r7
 800fb96:	bfa8      	it	ge
 800fb98:	463b      	movge	r3, r7
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	bfc2      	ittt	gt
 800fb9e:	eba8 0803 	subgt.w	r8, r8, r3
 800fba2:	1aff      	subgt	r7, r7, r3
 800fba4:	eba9 0903 	subgt.w	r9, r9, r3
 800fba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	dd17      	ble.n	800fbde <_strtod_l+0x75e>
 800fbae:	4631      	mov	r1, r6
 800fbb0:	461a      	mov	r2, r3
 800fbb2:	4620      	mov	r0, r4
 800fbb4:	f001 ff6c 	bl	8011a90 <__pow5mult>
 800fbb8:	4606      	mov	r6, r0
 800fbba:	2800      	cmp	r0, #0
 800fbbc:	f43f aea8 	beq.w	800f910 <_strtod_l+0x490>
 800fbc0:	4601      	mov	r1, r0
 800fbc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fbc4:	4620      	mov	r0, r4
 800fbc6:	f001 feb9 	bl	801193c <__multiply>
 800fbca:	900b      	str	r0, [sp, #44]	; 0x2c
 800fbcc:	2800      	cmp	r0, #0
 800fbce:	f43f ae9f 	beq.w	800f910 <_strtod_l+0x490>
 800fbd2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fbd4:	4620      	mov	r0, r4
 800fbd6:	f001 fd99 	bl	801170c <_Bfree>
 800fbda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fbdc:	9318      	str	r3, [sp, #96]	; 0x60
 800fbde:	f1b8 0f00 	cmp.w	r8, #0
 800fbe2:	f300 808c 	bgt.w	800fcfe <_strtod_l+0x87e>
 800fbe6:	9b06      	ldr	r3, [sp, #24]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	dd08      	ble.n	800fbfe <_strtod_l+0x77e>
 800fbec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fbee:	9905      	ldr	r1, [sp, #20]
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	f001 ff4d 	bl	8011a90 <__pow5mult>
 800fbf6:	9005      	str	r0, [sp, #20]
 800fbf8:	2800      	cmp	r0, #0
 800fbfa:	f43f ae89 	beq.w	800f910 <_strtod_l+0x490>
 800fbfe:	2f00      	cmp	r7, #0
 800fc00:	dd08      	ble.n	800fc14 <_strtod_l+0x794>
 800fc02:	9905      	ldr	r1, [sp, #20]
 800fc04:	463a      	mov	r2, r7
 800fc06:	4620      	mov	r0, r4
 800fc08:	f001 ff9c 	bl	8011b44 <__lshift>
 800fc0c:	9005      	str	r0, [sp, #20]
 800fc0e:	2800      	cmp	r0, #0
 800fc10:	f43f ae7e 	beq.w	800f910 <_strtod_l+0x490>
 800fc14:	f1b9 0f00 	cmp.w	r9, #0
 800fc18:	dd08      	ble.n	800fc2c <_strtod_l+0x7ac>
 800fc1a:	4631      	mov	r1, r6
 800fc1c:	464a      	mov	r2, r9
 800fc1e:	4620      	mov	r0, r4
 800fc20:	f001 ff90 	bl	8011b44 <__lshift>
 800fc24:	4606      	mov	r6, r0
 800fc26:	2800      	cmp	r0, #0
 800fc28:	f43f ae72 	beq.w	800f910 <_strtod_l+0x490>
 800fc2c:	9a05      	ldr	r2, [sp, #20]
 800fc2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fc30:	4620      	mov	r0, r4
 800fc32:	f002 f813 	bl	8011c5c <__mdiff>
 800fc36:	4605      	mov	r5, r0
 800fc38:	2800      	cmp	r0, #0
 800fc3a:	f43f ae69 	beq.w	800f910 <_strtod_l+0x490>
 800fc3e:	68c3      	ldr	r3, [r0, #12]
 800fc40:	930b      	str	r3, [sp, #44]	; 0x2c
 800fc42:	2300      	movs	r3, #0
 800fc44:	60c3      	str	r3, [r0, #12]
 800fc46:	4631      	mov	r1, r6
 800fc48:	f001 ffec 	bl	8011c24 <__mcmp>
 800fc4c:	2800      	cmp	r0, #0
 800fc4e:	da60      	bge.n	800fd12 <_strtod_l+0x892>
 800fc50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc52:	ea53 030a 	orrs.w	r3, r3, sl
 800fc56:	f040 8082 	bne.w	800fd5e <_strtod_l+0x8de>
 800fc5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d17d      	bne.n	800fd5e <_strtod_l+0x8de>
 800fc62:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fc66:	0d1b      	lsrs	r3, r3, #20
 800fc68:	051b      	lsls	r3, r3, #20
 800fc6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800fc6e:	d976      	bls.n	800fd5e <_strtod_l+0x8de>
 800fc70:	696b      	ldr	r3, [r5, #20]
 800fc72:	b913      	cbnz	r3, 800fc7a <_strtod_l+0x7fa>
 800fc74:	692b      	ldr	r3, [r5, #16]
 800fc76:	2b01      	cmp	r3, #1
 800fc78:	dd71      	ble.n	800fd5e <_strtod_l+0x8de>
 800fc7a:	4629      	mov	r1, r5
 800fc7c:	2201      	movs	r2, #1
 800fc7e:	4620      	mov	r0, r4
 800fc80:	f001 ff60 	bl	8011b44 <__lshift>
 800fc84:	4631      	mov	r1, r6
 800fc86:	4605      	mov	r5, r0
 800fc88:	f001 ffcc 	bl	8011c24 <__mcmp>
 800fc8c:	2800      	cmp	r0, #0
 800fc8e:	dd66      	ble.n	800fd5e <_strtod_l+0x8de>
 800fc90:	9904      	ldr	r1, [sp, #16]
 800fc92:	4a53      	ldr	r2, [pc, #332]	; (800fde0 <_strtod_l+0x960>)
 800fc94:	465b      	mov	r3, fp
 800fc96:	2900      	cmp	r1, #0
 800fc98:	f000 8081 	beq.w	800fd9e <_strtod_l+0x91e>
 800fc9c:	ea02 010b 	and.w	r1, r2, fp
 800fca0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fca4:	dc7b      	bgt.n	800fd9e <_strtod_l+0x91e>
 800fca6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fcaa:	f77f aea9 	ble.w	800fa00 <_strtod_l+0x580>
 800fcae:	4b4d      	ldr	r3, [pc, #308]	; (800fde4 <_strtod_l+0x964>)
 800fcb0:	4650      	mov	r0, sl
 800fcb2:	4659      	mov	r1, fp
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	f7f0 fcc7 	bl	8000648 <__aeabi_dmul>
 800fcba:	460b      	mov	r3, r1
 800fcbc:	4303      	orrs	r3, r0
 800fcbe:	bf08      	it	eq
 800fcc0:	2322      	moveq	r3, #34	; 0x22
 800fcc2:	4682      	mov	sl, r0
 800fcc4:	468b      	mov	fp, r1
 800fcc6:	bf08      	it	eq
 800fcc8:	6023      	streq	r3, [r4, #0]
 800fcca:	e62b      	b.n	800f924 <_strtod_l+0x4a4>
 800fccc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fcd0:	fa02 f303 	lsl.w	r3, r2, r3
 800fcd4:	ea03 0a0a 	and.w	sl, r3, sl
 800fcd8:	e6e3      	b.n	800faa2 <_strtod_l+0x622>
 800fcda:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800fcde:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800fce2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800fce6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800fcea:	fa01 f308 	lsl.w	r3, r1, r8
 800fcee:	9308      	str	r3, [sp, #32]
 800fcf0:	910d      	str	r1, [sp, #52]	; 0x34
 800fcf2:	e746      	b.n	800fb82 <_strtod_l+0x702>
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	9308      	str	r3, [sp, #32]
 800fcf8:	2301      	movs	r3, #1
 800fcfa:	930d      	str	r3, [sp, #52]	; 0x34
 800fcfc:	e741      	b.n	800fb82 <_strtod_l+0x702>
 800fcfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fd00:	4642      	mov	r2, r8
 800fd02:	4620      	mov	r0, r4
 800fd04:	f001 ff1e 	bl	8011b44 <__lshift>
 800fd08:	9018      	str	r0, [sp, #96]	; 0x60
 800fd0a:	2800      	cmp	r0, #0
 800fd0c:	f47f af6b 	bne.w	800fbe6 <_strtod_l+0x766>
 800fd10:	e5fe      	b.n	800f910 <_strtod_l+0x490>
 800fd12:	465f      	mov	r7, fp
 800fd14:	d16e      	bne.n	800fdf4 <_strtod_l+0x974>
 800fd16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fd18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fd1c:	b342      	cbz	r2, 800fd70 <_strtod_l+0x8f0>
 800fd1e:	4a32      	ldr	r2, [pc, #200]	; (800fde8 <_strtod_l+0x968>)
 800fd20:	4293      	cmp	r3, r2
 800fd22:	d128      	bne.n	800fd76 <_strtod_l+0x8f6>
 800fd24:	9b04      	ldr	r3, [sp, #16]
 800fd26:	4651      	mov	r1, sl
 800fd28:	b1eb      	cbz	r3, 800fd66 <_strtod_l+0x8e6>
 800fd2a:	4b2d      	ldr	r3, [pc, #180]	; (800fde0 <_strtod_l+0x960>)
 800fd2c:	403b      	ands	r3, r7
 800fd2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fd32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd36:	d819      	bhi.n	800fd6c <_strtod_l+0x8ec>
 800fd38:	0d1b      	lsrs	r3, r3, #20
 800fd3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fd3e:	fa02 f303 	lsl.w	r3, r2, r3
 800fd42:	4299      	cmp	r1, r3
 800fd44:	d117      	bne.n	800fd76 <_strtod_l+0x8f6>
 800fd46:	4b29      	ldr	r3, [pc, #164]	; (800fdec <_strtod_l+0x96c>)
 800fd48:	429f      	cmp	r7, r3
 800fd4a:	d102      	bne.n	800fd52 <_strtod_l+0x8d2>
 800fd4c:	3101      	adds	r1, #1
 800fd4e:	f43f addf 	beq.w	800f910 <_strtod_l+0x490>
 800fd52:	4b23      	ldr	r3, [pc, #140]	; (800fde0 <_strtod_l+0x960>)
 800fd54:	403b      	ands	r3, r7
 800fd56:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800fd5a:	f04f 0a00 	mov.w	sl, #0
 800fd5e:	9b04      	ldr	r3, [sp, #16]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d1a4      	bne.n	800fcae <_strtod_l+0x82e>
 800fd64:	e5de      	b.n	800f924 <_strtod_l+0x4a4>
 800fd66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd6a:	e7ea      	b.n	800fd42 <_strtod_l+0x8c2>
 800fd6c:	4613      	mov	r3, r2
 800fd6e:	e7e8      	b.n	800fd42 <_strtod_l+0x8c2>
 800fd70:	ea53 030a 	orrs.w	r3, r3, sl
 800fd74:	d08c      	beq.n	800fc90 <_strtod_l+0x810>
 800fd76:	9b08      	ldr	r3, [sp, #32]
 800fd78:	b1db      	cbz	r3, 800fdb2 <_strtod_l+0x932>
 800fd7a:	423b      	tst	r3, r7
 800fd7c:	d0ef      	beq.n	800fd5e <_strtod_l+0x8de>
 800fd7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd80:	9a04      	ldr	r2, [sp, #16]
 800fd82:	4650      	mov	r0, sl
 800fd84:	4659      	mov	r1, fp
 800fd86:	b1c3      	cbz	r3, 800fdba <_strtod_l+0x93a>
 800fd88:	f7ff fb5e 	bl	800f448 <sulp>
 800fd8c:	4602      	mov	r2, r0
 800fd8e:	460b      	mov	r3, r1
 800fd90:	ec51 0b18 	vmov	r0, r1, d8
 800fd94:	f7f0 faa2 	bl	80002dc <__adddf3>
 800fd98:	4682      	mov	sl, r0
 800fd9a:	468b      	mov	fp, r1
 800fd9c:	e7df      	b.n	800fd5e <_strtod_l+0x8de>
 800fd9e:	4013      	ands	r3, r2
 800fda0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fda4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fda8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fdac:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800fdb0:	e7d5      	b.n	800fd5e <_strtod_l+0x8de>
 800fdb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fdb4:	ea13 0f0a 	tst.w	r3, sl
 800fdb8:	e7e0      	b.n	800fd7c <_strtod_l+0x8fc>
 800fdba:	f7ff fb45 	bl	800f448 <sulp>
 800fdbe:	4602      	mov	r2, r0
 800fdc0:	460b      	mov	r3, r1
 800fdc2:	ec51 0b18 	vmov	r0, r1, d8
 800fdc6:	f7f0 fa87 	bl	80002d8 <__aeabi_dsub>
 800fdca:	2200      	movs	r2, #0
 800fdcc:	2300      	movs	r3, #0
 800fdce:	4682      	mov	sl, r0
 800fdd0:	468b      	mov	fp, r1
 800fdd2:	f7f0 fea1 	bl	8000b18 <__aeabi_dcmpeq>
 800fdd6:	2800      	cmp	r0, #0
 800fdd8:	d0c1      	beq.n	800fd5e <_strtod_l+0x8de>
 800fdda:	e611      	b.n	800fa00 <_strtod_l+0x580>
 800fddc:	fffffc02 	.word	0xfffffc02
 800fde0:	7ff00000 	.word	0x7ff00000
 800fde4:	39500000 	.word	0x39500000
 800fde8:	000fffff 	.word	0x000fffff
 800fdec:	7fefffff 	.word	0x7fefffff
 800fdf0:	08013c90 	.word	0x08013c90
 800fdf4:	4631      	mov	r1, r6
 800fdf6:	4628      	mov	r0, r5
 800fdf8:	f002 f892 	bl	8011f20 <__ratio>
 800fdfc:	ec59 8b10 	vmov	r8, r9, d0
 800fe00:	ee10 0a10 	vmov	r0, s0
 800fe04:	2200      	movs	r2, #0
 800fe06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fe0a:	4649      	mov	r1, r9
 800fe0c:	f7f0 fe98 	bl	8000b40 <__aeabi_dcmple>
 800fe10:	2800      	cmp	r0, #0
 800fe12:	d07a      	beq.n	800ff0a <_strtod_l+0xa8a>
 800fe14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d04a      	beq.n	800feb0 <_strtod_l+0xa30>
 800fe1a:	4b95      	ldr	r3, [pc, #596]	; (8010070 <_strtod_l+0xbf0>)
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fe22:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010070 <_strtod_l+0xbf0>
 800fe26:	f04f 0800 	mov.w	r8, #0
 800fe2a:	4b92      	ldr	r3, [pc, #584]	; (8010074 <_strtod_l+0xbf4>)
 800fe2c:	403b      	ands	r3, r7
 800fe2e:	930d      	str	r3, [sp, #52]	; 0x34
 800fe30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fe32:	4b91      	ldr	r3, [pc, #580]	; (8010078 <_strtod_l+0xbf8>)
 800fe34:	429a      	cmp	r2, r3
 800fe36:	f040 80b0 	bne.w	800ff9a <_strtod_l+0xb1a>
 800fe3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fe3e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800fe42:	ec4b ab10 	vmov	d0, sl, fp
 800fe46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fe4a:	f001 ff91 	bl	8011d70 <__ulp>
 800fe4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fe52:	ec53 2b10 	vmov	r2, r3, d0
 800fe56:	f7f0 fbf7 	bl	8000648 <__aeabi_dmul>
 800fe5a:	4652      	mov	r2, sl
 800fe5c:	465b      	mov	r3, fp
 800fe5e:	f7f0 fa3d 	bl	80002dc <__adddf3>
 800fe62:	460b      	mov	r3, r1
 800fe64:	4983      	ldr	r1, [pc, #524]	; (8010074 <_strtod_l+0xbf4>)
 800fe66:	4a85      	ldr	r2, [pc, #532]	; (801007c <_strtod_l+0xbfc>)
 800fe68:	4019      	ands	r1, r3
 800fe6a:	4291      	cmp	r1, r2
 800fe6c:	4682      	mov	sl, r0
 800fe6e:	d960      	bls.n	800ff32 <_strtod_l+0xab2>
 800fe70:	ee18 3a90 	vmov	r3, s17
 800fe74:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800fe78:	4293      	cmp	r3, r2
 800fe7a:	d104      	bne.n	800fe86 <_strtod_l+0xa06>
 800fe7c:	ee18 3a10 	vmov	r3, s16
 800fe80:	3301      	adds	r3, #1
 800fe82:	f43f ad45 	beq.w	800f910 <_strtod_l+0x490>
 800fe86:	f8df b200 	ldr.w	fp, [pc, #512]	; 8010088 <_strtod_l+0xc08>
 800fe8a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800fe8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fe90:	4620      	mov	r0, r4
 800fe92:	f001 fc3b 	bl	801170c <_Bfree>
 800fe96:	9905      	ldr	r1, [sp, #20]
 800fe98:	4620      	mov	r0, r4
 800fe9a:	f001 fc37 	bl	801170c <_Bfree>
 800fe9e:	4631      	mov	r1, r6
 800fea0:	4620      	mov	r0, r4
 800fea2:	f001 fc33 	bl	801170c <_Bfree>
 800fea6:	4629      	mov	r1, r5
 800fea8:	4620      	mov	r0, r4
 800feaa:	f001 fc2f 	bl	801170c <_Bfree>
 800feae:	e61a      	b.n	800fae6 <_strtod_l+0x666>
 800feb0:	f1ba 0f00 	cmp.w	sl, #0
 800feb4:	d11b      	bne.n	800feee <_strtod_l+0xa6e>
 800feb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800feba:	b9f3      	cbnz	r3, 800fefa <_strtod_l+0xa7a>
 800febc:	4b6c      	ldr	r3, [pc, #432]	; (8010070 <_strtod_l+0xbf0>)
 800febe:	2200      	movs	r2, #0
 800fec0:	4640      	mov	r0, r8
 800fec2:	4649      	mov	r1, r9
 800fec4:	f7f0 fe32 	bl	8000b2c <__aeabi_dcmplt>
 800fec8:	b9d0      	cbnz	r0, 800ff00 <_strtod_l+0xa80>
 800feca:	4640      	mov	r0, r8
 800fecc:	4649      	mov	r1, r9
 800fece:	4b6c      	ldr	r3, [pc, #432]	; (8010080 <_strtod_l+0xc00>)
 800fed0:	2200      	movs	r2, #0
 800fed2:	f7f0 fbb9 	bl	8000648 <__aeabi_dmul>
 800fed6:	4680      	mov	r8, r0
 800fed8:	4689      	mov	r9, r1
 800feda:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fede:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800fee2:	9315      	str	r3, [sp, #84]	; 0x54
 800fee4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800fee8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800feec:	e79d      	b.n	800fe2a <_strtod_l+0x9aa>
 800feee:	f1ba 0f01 	cmp.w	sl, #1
 800fef2:	d102      	bne.n	800fefa <_strtod_l+0xa7a>
 800fef4:	2f00      	cmp	r7, #0
 800fef6:	f43f ad83 	beq.w	800fa00 <_strtod_l+0x580>
 800fefa:	4b62      	ldr	r3, [pc, #392]	; (8010084 <_strtod_l+0xc04>)
 800fefc:	2200      	movs	r2, #0
 800fefe:	e78e      	b.n	800fe1e <_strtod_l+0x99e>
 800ff00:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8010080 <_strtod_l+0xc00>
 800ff04:	f04f 0800 	mov.w	r8, #0
 800ff08:	e7e7      	b.n	800feda <_strtod_l+0xa5a>
 800ff0a:	4b5d      	ldr	r3, [pc, #372]	; (8010080 <_strtod_l+0xc00>)
 800ff0c:	4640      	mov	r0, r8
 800ff0e:	4649      	mov	r1, r9
 800ff10:	2200      	movs	r2, #0
 800ff12:	f7f0 fb99 	bl	8000648 <__aeabi_dmul>
 800ff16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff18:	4680      	mov	r8, r0
 800ff1a:	4689      	mov	r9, r1
 800ff1c:	b933      	cbnz	r3, 800ff2c <_strtod_l+0xaac>
 800ff1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ff22:	900e      	str	r0, [sp, #56]	; 0x38
 800ff24:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ff2a:	e7dd      	b.n	800fee8 <_strtod_l+0xa68>
 800ff2c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800ff30:	e7f9      	b.n	800ff26 <_strtod_l+0xaa6>
 800ff32:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ff36:	9b04      	ldr	r3, [sp, #16]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d1a8      	bne.n	800fe8e <_strtod_l+0xa0e>
 800ff3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ff40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ff42:	0d1b      	lsrs	r3, r3, #20
 800ff44:	051b      	lsls	r3, r3, #20
 800ff46:	429a      	cmp	r2, r3
 800ff48:	d1a1      	bne.n	800fe8e <_strtod_l+0xa0e>
 800ff4a:	4640      	mov	r0, r8
 800ff4c:	4649      	mov	r1, r9
 800ff4e:	f7f0 fedb 	bl	8000d08 <__aeabi_d2lz>
 800ff52:	f7f0 fb4b 	bl	80005ec <__aeabi_l2d>
 800ff56:	4602      	mov	r2, r0
 800ff58:	460b      	mov	r3, r1
 800ff5a:	4640      	mov	r0, r8
 800ff5c:	4649      	mov	r1, r9
 800ff5e:	f7f0 f9bb 	bl	80002d8 <__aeabi_dsub>
 800ff62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ff64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ff68:	ea43 030a 	orr.w	r3, r3, sl
 800ff6c:	4313      	orrs	r3, r2
 800ff6e:	4680      	mov	r8, r0
 800ff70:	4689      	mov	r9, r1
 800ff72:	d055      	beq.n	8010020 <_strtod_l+0xba0>
 800ff74:	a336      	add	r3, pc, #216	; (adr r3, 8010050 <_strtod_l+0xbd0>)
 800ff76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff7a:	f7f0 fdd7 	bl	8000b2c <__aeabi_dcmplt>
 800ff7e:	2800      	cmp	r0, #0
 800ff80:	f47f acd0 	bne.w	800f924 <_strtod_l+0x4a4>
 800ff84:	a334      	add	r3, pc, #208	; (adr r3, 8010058 <_strtod_l+0xbd8>)
 800ff86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff8a:	4640      	mov	r0, r8
 800ff8c:	4649      	mov	r1, r9
 800ff8e:	f7f0 fdeb 	bl	8000b68 <__aeabi_dcmpgt>
 800ff92:	2800      	cmp	r0, #0
 800ff94:	f43f af7b 	beq.w	800fe8e <_strtod_l+0xa0e>
 800ff98:	e4c4      	b.n	800f924 <_strtod_l+0x4a4>
 800ff9a:	9b04      	ldr	r3, [sp, #16]
 800ff9c:	b333      	cbz	r3, 800ffec <_strtod_l+0xb6c>
 800ff9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ffa0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ffa4:	d822      	bhi.n	800ffec <_strtod_l+0xb6c>
 800ffa6:	a32e      	add	r3, pc, #184	; (adr r3, 8010060 <_strtod_l+0xbe0>)
 800ffa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffac:	4640      	mov	r0, r8
 800ffae:	4649      	mov	r1, r9
 800ffb0:	f7f0 fdc6 	bl	8000b40 <__aeabi_dcmple>
 800ffb4:	b1a0      	cbz	r0, 800ffe0 <_strtod_l+0xb60>
 800ffb6:	4649      	mov	r1, r9
 800ffb8:	4640      	mov	r0, r8
 800ffba:	f7f0 fe1d 	bl	8000bf8 <__aeabi_d2uiz>
 800ffbe:	2801      	cmp	r0, #1
 800ffc0:	bf38      	it	cc
 800ffc2:	2001      	movcc	r0, #1
 800ffc4:	f7f0 fac6 	bl	8000554 <__aeabi_ui2d>
 800ffc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ffca:	4680      	mov	r8, r0
 800ffcc:	4689      	mov	r9, r1
 800ffce:	bb23      	cbnz	r3, 801001a <_strtod_l+0xb9a>
 800ffd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ffd4:	9010      	str	r0, [sp, #64]	; 0x40
 800ffd6:	9311      	str	r3, [sp, #68]	; 0x44
 800ffd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ffdc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ffe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffe2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ffe4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ffe8:	1a9b      	subs	r3, r3, r2
 800ffea:	9309      	str	r3, [sp, #36]	; 0x24
 800ffec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fff0:	eeb0 0a48 	vmov.f32	s0, s16
 800fff4:	eef0 0a68 	vmov.f32	s1, s17
 800fff8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fffc:	f001 feb8 	bl	8011d70 <__ulp>
 8010000:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010004:	ec53 2b10 	vmov	r2, r3, d0
 8010008:	f7f0 fb1e 	bl	8000648 <__aeabi_dmul>
 801000c:	ec53 2b18 	vmov	r2, r3, d8
 8010010:	f7f0 f964 	bl	80002dc <__adddf3>
 8010014:	4682      	mov	sl, r0
 8010016:	468b      	mov	fp, r1
 8010018:	e78d      	b.n	800ff36 <_strtod_l+0xab6>
 801001a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801001e:	e7db      	b.n	800ffd8 <_strtod_l+0xb58>
 8010020:	a311      	add	r3, pc, #68	; (adr r3, 8010068 <_strtod_l+0xbe8>)
 8010022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010026:	f7f0 fd81 	bl	8000b2c <__aeabi_dcmplt>
 801002a:	e7b2      	b.n	800ff92 <_strtod_l+0xb12>
 801002c:	2300      	movs	r3, #0
 801002e:	930a      	str	r3, [sp, #40]	; 0x28
 8010030:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010032:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010034:	6013      	str	r3, [r2, #0]
 8010036:	f7ff ba6b 	b.w	800f510 <_strtod_l+0x90>
 801003a:	2a65      	cmp	r2, #101	; 0x65
 801003c:	f43f ab5f 	beq.w	800f6fe <_strtod_l+0x27e>
 8010040:	2a45      	cmp	r2, #69	; 0x45
 8010042:	f43f ab5c 	beq.w	800f6fe <_strtod_l+0x27e>
 8010046:	2301      	movs	r3, #1
 8010048:	f7ff bb94 	b.w	800f774 <_strtod_l+0x2f4>
 801004c:	f3af 8000 	nop.w
 8010050:	94a03595 	.word	0x94a03595
 8010054:	3fdfffff 	.word	0x3fdfffff
 8010058:	35afe535 	.word	0x35afe535
 801005c:	3fe00000 	.word	0x3fe00000
 8010060:	ffc00000 	.word	0xffc00000
 8010064:	41dfffff 	.word	0x41dfffff
 8010068:	94a03595 	.word	0x94a03595
 801006c:	3fcfffff 	.word	0x3fcfffff
 8010070:	3ff00000 	.word	0x3ff00000
 8010074:	7ff00000 	.word	0x7ff00000
 8010078:	7fe00000 	.word	0x7fe00000
 801007c:	7c9fffff 	.word	0x7c9fffff
 8010080:	3fe00000 	.word	0x3fe00000
 8010084:	bff00000 	.word	0xbff00000
 8010088:	7fefffff 	.word	0x7fefffff

0801008c <_strtod_r>:
 801008c:	4b01      	ldr	r3, [pc, #4]	; (8010094 <_strtod_r+0x8>)
 801008e:	f7ff b9f7 	b.w	800f480 <_strtod_l>
 8010092:	bf00      	nop
 8010094:	200012e0 	.word	0x200012e0

08010098 <_strtol_l.constprop.0>:
 8010098:	2b01      	cmp	r3, #1
 801009a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801009e:	d001      	beq.n	80100a4 <_strtol_l.constprop.0+0xc>
 80100a0:	2b24      	cmp	r3, #36	; 0x24
 80100a2:	d906      	bls.n	80100b2 <_strtol_l.constprop.0+0x1a>
 80100a4:	f7fe f992 	bl	800e3cc <__errno>
 80100a8:	2316      	movs	r3, #22
 80100aa:	6003      	str	r3, [r0, #0]
 80100ac:	2000      	movs	r0, #0
 80100ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010198 <_strtol_l.constprop.0+0x100>
 80100b6:	460d      	mov	r5, r1
 80100b8:	462e      	mov	r6, r5
 80100ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80100be:	f814 700c 	ldrb.w	r7, [r4, ip]
 80100c2:	f017 0708 	ands.w	r7, r7, #8
 80100c6:	d1f7      	bne.n	80100b8 <_strtol_l.constprop.0+0x20>
 80100c8:	2c2d      	cmp	r4, #45	; 0x2d
 80100ca:	d132      	bne.n	8010132 <_strtol_l.constprop.0+0x9a>
 80100cc:	782c      	ldrb	r4, [r5, #0]
 80100ce:	2701      	movs	r7, #1
 80100d0:	1cb5      	adds	r5, r6, #2
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d05b      	beq.n	801018e <_strtol_l.constprop.0+0xf6>
 80100d6:	2b10      	cmp	r3, #16
 80100d8:	d109      	bne.n	80100ee <_strtol_l.constprop.0+0x56>
 80100da:	2c30      	cmp	r4, #48	; 0x30
 80100dc:	d107      	bne.n	80100ee <_strtol_l.constprop.0+0x56>
 80100de:	782c      	ldrb	r4, [r5, #0]
 80100e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80100e4:	2c58      	cmp	r4, #88	; 0x58
 80100e6:	d14d      	bne.n	8010184 <_strtol_l.constprop.0+0xec>
 80100e8:	786c      	ldrb	r4, [r5, #1]
 80100ea:	2310      	movs	r3, #16
 80100ec:	3502      	adds	r5, #2
 80100ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80100f2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80100f6:	f04f 0c00 	mov.w	ip, #0
 80100fa:	fbb8 f9f3 	udiv	r9, r8, r3
 80100fe:	4666      	mov	r6, ip
 8010100:	fb03 8a19 	mls	sl, r3, r9, r8
 8010104:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010108:	f1be 0f09 	cmp.w	lr, #9
 801010c:	d816      	bhi.n	801013c <_strtol_l.constprop.0+0xa4>
 801010e:	4674      	mov	r4, lr
 8010110:	42a3      	cmp	r3, r4
 8010112:	dd24      	ble.n	801015e <_strtol_l.constprop.0+0xc6>
 8010114:	f1bc 0f00 	cmp.w	ip, #0
 8010118:	db1e      	blt.n	8010158 <_strtol_l.constprop.0+0xc0>
 801011a:	45b1      	cmp	r9, r6
 801011c:	d31c      	bcc.n	8010158 <_strtol_l.constprop.0+0xc0>
 801011e:	d101      	bne.n	8010124 <_strtol_l.constprop.0+0x8c>
 8010120:	45a2      	cmp	sl, r4
 8010122:	db19      	blt.n	8010158 <_strtol_l.constprop.0+0xc0>
 8010124:	fb06 4603 	mla	r6, r6, r3, r4
 8010128:	f04f 0c01 	mov.w	ip, #1
 801012c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010130:	e7e8      	b.n	8010104 <_strtol_l.constprop.0+0x6c>
 8010132:	2c2b      	cmp	r4, #43	; 0x2b
 8010134:	bf04      	itt	eq
 8010136:	782c      	ldrbeq	r4, [r5, #0]
 8010138:	1cb5      	addeq	r5, r6, #2
 801013a:	e7ca      	b.n	80100d2 <_strtol_l.constprop.0+0x3a>
 801013c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010140:	f1be 0f19 	cmp.w	lr, #25
 8010144:	d801      	bhi.n	801014a <_strtol_l.constprop.0+0xb2>
 8010146:	3c37      	subs	r4, #55	; 0x37
 8010148:	e7e2      	b.n	8010110 <_strtol_l.constprop.0+0x78>
 801014a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801014e:	f1be 0f19 	cmp.w	lr, #25
 8010152:	d804      	bhi.n	801015e <_strtol_l.constprop.0+0xc6>
 8010154:	3c57      	subs	r4, #87	; 0x57
 8010156:	e7db      	b.n	8010110 <_strtol_l.constprop.0+0x78>
 8010158:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801015c:	e7e6      	b.n	801012c <_strtol_l.constprop.0+0x94>
 801015e:	f1bc 0f00 	cmp.w	ip, #0
 8010162:	da05      	bge.n	8010170 <_strtol_l.constprop.0+0xd8>
 8010164:	2322      	movs	r3, #34	; 0x22
 8010166:	6003      	str	r3, [r0, #0]
 8010168:	4646      	mov	r6, r8
 801016a:	b942      	cbnz	r2, 801017e <_strtol_l.constprop.0+0xe6>
 801016c:	4630      	mov	r0, r6
 801016e:	e79e      	b.n	80100ae <_strtol_l.constprop.0+0x16>
 8010170:	b107      	cbz	r7, 8010174 <_strtol_l.constprop.0+0xdc>
 8010172:	4276      	negs	r6, r6
 8010174:	2a00      	cmp	r2, #0
 8010176:	d0f9      	beq.n	801016c <_strtol_l.constprop.0+0xd4>
 8010178:	f1bc 0f00 	cmp.w	ip, #0
 801017c:	d000      	beq.n	8010180 <_strtol_l.constprop.0+0xe8>
 801017e:	1e69      	subs	r1, r5, #1
 8010180:	6011      	str	r1, [r2, #0]
 8010182:	e7f3      	b.n	801016c <_strtol_l.constprop.0+0xd4>
 8010184:	2430      	movs	r4, #48	; 0x30
 8010186:	2b00      	cmp	r3, #0
 8010188:	d1b1      	bne.n	80100ee <_strtol_l.constprop.0+0x56>
 801018a:	2308      	movs	r3, #8
 801018c:	e7af      	b.n	80100ee <_strtol_l.constprop.0+0x56>
 801018e:	2c30      	cmp	r4, #48	; 0x30
 8010190:	d0a5      	beq.n	80100de <_strtol_l.constprop.0+0x46>
 8010192:	230a      	movs	r3, #10
 8010194:	e7ab      	b.n	80100ee <_strtol_l.constprop.0+0x56>
 8010196:	bf00      	nop
 8010198:	08013cf5 	.word	0x08013cf5

0801019c <_strtol_r>:
 801019c:	f7ff bf7c 	b.w	8010098 <_strtol_l.constprop.0>

080101a0 <time>:
 80101a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80101a2:	4b0b      	ldr	r3, [pc, #44]	; (80101d0 <time+0x30>)
 80101a4:	2200      	movs	r2, #0
 80101a6:	4669      	mov	r1, sp
 80101a8:	4604      	mov	r4, r0
 80101aa:	6818      	ldr	r0, [r3, #0]
 80101ac:	f001 fa2c 	bl	8011608 <_gettimeofday_r>
 80101b0:	2800      	cmp	r0, #0
 80101b2:	bfbe      	ittt	lt
 80101b4:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 80101b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80101bc:	e9cd 2300 	strdlt	r2, r3, [sp]
 80101c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80101c4:	b10c      	cbz	r4, 80101ca <time+0x2a>
 80101c6:	e9c4 0100 	strd	r0, r1, [r4]
 80101ca:	b004      	add	sp, #16
 80101cc:	bd10      	pop	{r4, pc}
 80101ce:	bf00      	nop
 80101d0:	20001278 	.word	0x20001278

080101d4 <__assert_func>:
 80101d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80101d6:	4614      	mov	r4, r2
 80101d8:	461a      	mov	r2, r3
 80101da:	4b09      	ldr	r3, [pc, #36]	; (8010200 <__assert_func+0x2c>)
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	4605      	mov	r5, r0
 80101e0:	68d8      	ldr	r0, [r3, #12]
 80101e2:	b14c      	cbz	r4, 80101f8 <__assert_func+0x24>
 80101e4:	4b07      	ldr	r3, [pc, #28]	; (8010204 <__assert_func+0x30>)
 80101e6:	9100      	str	r1, [sp, #0]
 80101e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80101ec:	4906      	ldr	r1, [pc, #24]	; (8010208 <__assert_func+0x34>)
 80101ee:	462b      	mov	r3, r5
 80101f0:	f000 fe88 	bl	8010f04 <fiprintf>
 80101f4:	f002 fac2 	bl	801277c <abort>
 80101f8:	4b04      	ldr	r3, [pc, #16]	; (801020c <__assert_func+0x38>)
 80101fa:	461c      	mov	r4, r3
 80101fc:	e7f3      	b.n	80101e6 <__assert_func+0x12>
 80101fe:	bf00      	nop
 8010200:	20001278 	.word	0x20001278
 8010204:	08013cb8 	.word	0x08013cb8
 8010208:	08013cc5 	.word	0x08013cc5
 801020c:	08013cf3 	.word	0x08013cf3

08010210 <quorem>:
 8010210:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010214:	6903      	ldr	r3, [r0, #16]
 8010216:	690c      	ldr	r4, [r1, #16]
 8010218:	42a3      	cmp	r3, r4
 801021a:	4607      	mov	r7, r0
 801021c:	f2c0 8081 	blt.w	8010322 <quorem+0x112>
 8010220:	3c01      	subs	r4, #1
 8010222:	f101 0814 	add.w	r8, r1, #20
 8010226:	f100 0514 	add.w	r5, r0, #20
 801022a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801022e:	9301      	str	r3, [sp, #4]
 8010230:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010234:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010238:	3301      	adds	r3, #1
 801023a:	429a      	cmp	r2, r3
 801023c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010240:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010244:	fbb2 f6f3 	udiv	r6, r2, r3
 8010248:	d331      	bcc.n	80102ae <quorem+0x9e>
 801024a:	f04f 0e00 	mov.w	lr, #0
 801024e:	4640      	mov	r0, r8
 8010250:	46ac      	mov	ip, r5
 8010252:	46f2      	mov	sl, lr
 8010254:	f850 2b04 	ldr.w	r2, [r0], #4
 8010258:	b293      	uxth	r3, r2
 801025a:	fb06 e303 	mla	r3, r6, r3, lr
 801025e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010262:	b29b      	uxth	r3, r3
 8010264:	ebaa 0303 	sub.w	r3, sl, r3
 8010268:	f8dc a000 	ldr.w	sl, [ip]
 801026c:	0c12      	lsrs	r2, r2, #16
 801026e:	fa13 f38a 	uxtah	r3, r3, sl
 8010272:	fb06 e202 	mla	r2, r6, r2, lr
 8010276:	9300      	str	r3, [sp, #0]
 8010278:	9b00      	ldr	r3, [sp, #0]
 801027a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801027e:	b292      	uxth	r2, r2
 8010280:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010284:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010288:	f8bd 3000 	ldrh.w	r3, [sp]
 801028c:	4581      	cmp	r9, r0
 801028e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010292:	f84c 3b04 	str.w	r3, [ip], #4
 8010296:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801029a:	d2db      	bcs.n	8010254 <quorem+0x44>
 801029c:	f855 300b 	ldr.w	r3, [r5, fp]
 80102a0:	b92b      	cbnz	r3, 80102ae <quorem+0x9e>
 80102a2:	9b01      	ldr	r3, [sp, #4]
 80102a4:	3b04      	subs	r3, #4
 80102a6:	429d      	cmp	r5, r3
 80102a8:	461a      	mov	r2, r3
 80102aa:	d32e      	bcc.n	801030a <quorem+0xfa>
 80102ac:	613c      	str	r4, [r7, #16]
 80102ae:	4638      	mov	r0, r7
 80102b0:	f001 fcb8 	bl	8011c24 <__mcmp>
 80102b4:	2800      	cmp	r0, #0
 80102b6:	db24      	blt.n	8010302 <quorem+0xf2>
 80102b8:	3601      	adds	r6, #1
 80102ba:	4628      	mov	r0, r5
 80102bc:	f04f 0c00 	mov.w	ip, #0
 80102c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80102c4:	f8d0 e000 	ldr.w	lr, [r0]
 80102c8:	b293      	uxth	r3, r2
 80102ca:	ebac 0303 	sub.w	r3, ip, r3
 80102ce:	0c12      	lsrs	r2, r2, #16
 80102d0:	fa13 f38e 	uxtah	r3, r3, lr
 80102d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80102d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80102dc:	b29b      	uxth	r3, r3
 80102de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102e2:	45c1      	cmp	r9, r8
 80102e4:	f840 3b04 	str.w	r3, [r0], #4
 80102e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80102ec:	d2e8      	bcs.n	80102c0 <quorem+0xb0>
 80102ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80102f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80102f6:	b922      	cbnz	r2, 8010302 <quorem+0xf2>
 80102f8:	3b04      	subs	r3, #4
 80102fa:	429d      	cmp	r5, r3
 80102fc:	461a      	mov	r2, r3
 80102fe:	d30a      	bcc.n	8010316 <quorem+0x106>
 8010300:	613c      	str	r4, [r7, #16]
 8010302:	4630      	mov	r0, r6
 8010304:	b003      	add	sp, #12
 8010306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801030a:	6812      	ldr	r2, [r2, #0]
 801030c:	3b04      	subs	r3, #4
 801030e:	2a00      	cmp	r2, #0
 8010310:	d1cc      	bne.n	80102ac <quorem+0x9c>
 8010312:	3c01      	subs	r4, #1
 8010314:	e7c7      	b.n	80102a6 <quorem+0x96>
 8010316:	6812      	ldr	r2, [r2, #0]
 8010318:	3b04      	subs	r3, #4
 801031a:	2a00      	cmp	r2, #0
 801031c:	d1f0      	bne.n	8010300 <quorem+0xf0>
 801031e:	3c01      	subs	r4, #1
 8010320:	e7eb      	b.n	80102fa <quorem+0xea>
 8010322:	2000      	movs	r0, #0
 8010324:	e7ee      	b.n	8010304 <quorem+0xf4>
	...

08010328 <_dtoa_r>:
 8010328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801032c:	ed2d 8b04 	vpush	{d8-d9}
 8010330:	ec57 6b10 	vmov	r6, r7, d0
 8010334:	b093      	sub	sp, #76	; 0x4c
 8010336:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010338:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801033c:	9106      	str	r1, [sp, #24]
 801033e:	ee10 aa10 	vmov	sl, s0
 8010342:	4604      	mov	r4, r0
 8010344:	9209      	str	r2, [sp, #36]	; 0x24
 8010346:	930c      	str	r3, [sp, #48]	; 0x30
 8010348:	46bb      	mov	fp, r7
 801034a:	b975      	cbnz	r5, 801036a <_dtoa_r+0x42>
 801034c:	2010      	movs	r0, #16
 801034e:	f7fe f867 	bl	800e420 <malloc>
 8010352:	4602      	mov	r2, r0
 8010354:	6260      	str	r0, [r4, #36]	; 0x24
 8010356:	b920      	cbnz	r0, 8010362 <_dtoa_r+0x3a>
 8010358:	4ba7      	ldr	r3, [pc, #668]	; (80105f8 <_dtoa_r+0x2d0>)
 801035a:	21ea      	movs	r1, #234	; 0xea
 801035c:	48a7      	ldr	r0, [pc, #668]	; (80105fc <_dtoa_r+0x2d4>)
 801035e:	f7ff ff39 	bl	80101d4 <__assert_func>
 8010362:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010366:	6005      	str	r5, [r0, #0]
 8010368:	60c5      	str	r5, [r0, #12]
 801036a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801036c:	6819      	ldr	r1, [r3, #0]
 801036e:	b151      	cbz	r1, 8010386 <_dtoa_r+0x5e>
 8010370:	685a      	ldr	r2, [r3, #4]
 8010372:	604a      	str	r2, [r1, #4]
 8010374:	2301      	movs	r3, #1
 8010376:	4093      	lsls	r3, r2
 8010378:	608b      	str	r3, [r1, #8]
 801037a:	4620      	mov	r0, r4
 801037c:	f001 f9c6 	bl	801170c <_Bfree>
 8010380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010382:	2200      	movs	r2, #0
 8010384:	601a      	str	r2, [r3, #0]
 8010386:	1e3b      	subs	r3, r7, #0
 8010388:	bfaa      	itet	ge
 801038a:	2300      	movge	r3, #0
 801038c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010390:	f8c8 3000 	strge.w	r3, [r8]
 8010394:	4b9a      	ldr	r3, [pc, #616]	; (8010600 <_dtoa_r+0x2d8>)
 8010396:	bfbc      	itt	lt
 8010398:	2201      	movlt	r2, #1
 801039a:	f8c8 2000 	strlt.w	r2, [r8]
 801039e:	ea33 030b 	bics.w	r3, r3, fp
 80103a2:	d11b      	bne.n	80103dc <_dtoa_r+0xb4>
 80103a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80103a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80103aa:	6013      	str	r3, [r2, #0]
 80103ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80103b0:	4333      	orrs	r3, r6
 80103b2:	f000 8592 	beq.w	8010eda <_dtoa_r+0xbb2>
 80103b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80103b8:	b963      	cbnz	r3, 80103d4 <_dtoa_r+0xac>
 80103ba:	4b92      	ldr	r3, [pc, #584]	; (8010604 <_dtoa_r+0x2dc>)
 80103bc:	e022      	b.n	8010404 <_dtoa_r+0xdc>
 80103be:	4b92      	ldr	r3, [pc, #584]	; (8010608 <_dtoa_r+0x2e0>)
 80103c0:	9301      	str	r3, [sp, #4]
 80103c2:	3308      	adds	r3, #8
 80103c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80103c6:	6013      	str	r3, [r2, #0]
 80103c8:	9801      	ldr	r0, [sp, #4]
 80103ca:	b013      	add	sp, #76	; 0x4c
 80103cc:	ecbd 8b04 	vpop	{d8-d9}
 80103d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103d4:	4b8b      	ldr	r3, [pc, #556]	; (8010604 <_dtoa_r+0x2dc>)
 80103d6:	9301      	str	r3, [sp, #4]
 80103d8:	3303      	adds	r3, #3
 80103da:	e7f3      	b.n	80103c4 <_dtoa_r+0x9c>
 80103dc:	2200      	movs	r2, #0
 80103de:	2300      	movs	r3, #0
 80103e0:	4650      	mov	r0, sl
 80103e2:	4659      	mov	r1, fp
 80103e4:	f7f0 fb98 	bl	8000b18 <__aeabi_dcmpeq>
 80103e8:	ec4b ab19 	vmov	d9, sl, fp
 80103ec:	4680      	mov	r8, r0
 80103ee:	b158      	cbz	r0, 8010408 <_dtoa_r+0xe0>
 80103f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80103f2:	2301      	movs	r3, #1
 80103f4:	6013      	str	r3, [r2, #0]
 80103f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	f000 856b 	beq.w	8010ed4 <_dtoa_r+0xbac>
 80103fe:	4883      	ldr	r0, [pc, #524]	; (801060c <_dtoa_r+0x2e4>)
 8010400:	6018      	str	r0, [r3, #0]
 8010402:	1e43      	subs	r3, r0, #1
 8010404:	9301      	str	r3, [sp, #4]
 8010406:	e7df      	b.n	80103c8 <_dtoa_r+0xa0>
 8010408:	ec4b ab10 	vmov	d0, sl, fp
 801040c:	aa10      	add	r2, sp, #64	; 0x40
 801040e:	a911      	add	r1, sp, #68	; 0x44
 8010410:	4620      	mov	r0, r4
 8010412:	f001 fd29 	bl	8011e68 <__d2b>
 8010416:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801041a:	ee08 0a10 	vmov	s16, r0
 801041e:	2d00      	cmp	r5, #0
 8010420:	f000 8084 	beq.w	801052c <_dtoa_r+0x204>
 8010424:	ee19 3a90 	vmov	r3, s19
 8010428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801042c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010430:	4656      	mov	r6, sl
 8010432:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010436:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801043a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801043e:	4b74      	ldr	r3, [pc, #464]	; (8010610 <_dtoa_r+0x2e8>)
 8010440:	2200      	movs	r2, #0
 8010442:	4630      	mov	r0, r6
 8010444:	4639      	mov	r1, r7
 8010446:	f7ef ff47 	bl	80002d8 <__aeabi_dsub>
 801044a:	a365      	add	r3, pc, #404	; (adr r3, 80105e0 <_dtoa_r+0x2b8>)
 801044c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010450:	f7f0 f8fa 	bl	8000648 <__aeabi_dmul>
 8010454:	a364      	add	r3, pc, #400	; (adr r3, 80105e8 <_dtoa_r+0x2c0>)
 8010456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801045a:	f7ef ff3f 	bl	80002dc <__adddf3>
 801045e:	4606      	mov	r6, r0
 8010460:	4628      	mov	r0, r5
 8010462:	460f      	mov	r7, r1
 8010464:	f7f0 f886 	bl	8000574 <__aeabi_i2d>
 8010468:	a361      	add	r3, pc, #388	; (adr r3, 80105f0 <_dtoa_r+0x2c8>)
 801046a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801046e:	f7f0 f8eb 	bl	8000648 <__aeabi_dmul>
 8010472:	4602      	mov	r2, r0
 8010474:	460b      	mov	r3, r1
 8010476:	4630      	mov	r0, r6
 8010478:	4639      	mov	r1, r7
 801047a:	f7ef ff2f 	bl	80002dc <__adddf3>
 801047e:	4606      	mov	r6, r0
 8010480:	460f      	mov	r7, r1
 8010482:	f7f0 fb91 	bl	8000ba8 <__aeabi_d2iz>
 8010486:	2200      	movs	r2, #0
 8010488:	9000      	str	r0, [sp, #0]
 801048a:	2300      	movs	r3, #0
 801048c:	4630      	mov	r0, r6
 801048e:	4639      	mov	r1, r7
 8010490:	f7f0 fb4c 	bl	8000b2c <__aeabi_dcmplt>
 8010494:	b150      	cbz	r0, 80104ac <_dtoa_r+0x184>
 8010496:	9800      	ldr	r0, [sp, #0]
 8010498:	f7f0 f86c 	bl	8000574 <__aeabi_i2d>
 801049c:	4632      	mov	r2, r6
 801049e:	463b      	mov	r3, r7
 80104a0:	f7f0 fb3a 	bl	8000b18 <__aeabi_dcmpeq>
 80104a4:	b910      	cbnz	r0, 80104ac <_dtoa_r+0x184>
 80104a6:	9b00      	ldr	r3, [sp, #0]
 80104a8:	3b01      	subs	r3, #1
 80104aa:	9300      	str	r3, [sp, #0]
 80104ac:	9b00      	ldr	r3, [sp, #0]
 80104ae:	2b16      	cmp	r3, #22
 80104b0:	d85a      	bhi.n	8010568 <_dtoa_r+0x240>
 80104b2:	9a00      	ldr	r2, [sp, #0]
 80104b4:	4b57      	ldr	r3, [pc, #348]	; (8010614 <_dtoa_r+0x2ec>)
 80104b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80104ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104be:	ec51 0b19 	vmov	r0, r1, d9
 80104c2:	f7f0 fb33 	bl	8000b2c <__aeabi_dcmplt>
 80104c6:	2800      	cmp	r0, #0
 80104c8:	d050      	beq.n	801056c <_dtoa_r+0x244>
 80104ca:	9b00      	ldr	r3, [sp, #0]
 80104cc:	3b01      	subs	r3, #1
 80104ce:	9300      	str	r3, [sp, #0]
 80104d0:	2300      	movs	r3, #0
 80104d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80104d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80104d6:	1b5d      	subs	r5, r3, r5
 80104d8:	1e6b      	subs	r3, r5, #1
 80104da:	9305      	str	r3, [sp, #20]
 80104dc:	bf45      	ittet	mi
 80104de:	f1c5 0301 	rsbmi	r3, r5, #1
 80104e2:	9304      	strmi	r3, [sp, #16]
 80104e4:	2300      	movpl	r3, #0
 80104e6:	2300      	movmi	r3, #0
 80104e8:	bf4c      	ite	mi
 80104ea:	9305      	strmi	r3, [sp, #20]
 80104ec:	9304      	strpl	r3, [sp, #16]
 80104ee:	9b00      	ldr	r3, [sp, #0]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	db3d      	blt.n	8010570 <_dtoa_r+0x248>
 80104f4:	9b05      	ldr	r3, [sp, #20]
 80104f6:	9a00      	ldr	r2, [sp, #0]
 80104f8:	920a      	str	r2, [sp, #40]	; 0x28
 80104fa:	4413      	add	r3, r2
 80104fc:	9305      	str	r3, [sp, #20]
 80104fe:	2300      	movs	r3, #0
 8010500:	9307      	str	r3, [sp, #28]
 8010502:	9b06      	ldr	r3, [sp, #24]
 8010504:	2b09      	cmp	r3, #9
 8010506:	f200 8089 	bhi.w	801061c <_dtoa_r+0x2f4>
 801050a:	2b05      	cmp	r3, #5
 801050c:	bfc4      	itt	gt
 801050e:	3b04      	subgt	r3, #4
 8010510:	9306      	strgt	r3, [sp, #24]
 8010512:	9b06      	ldr	r3, [sp, #24]
 8010514:	f1a3 0302 	sub.w	r3, r3, #2
 8010518:	bfcc      	ite	gt
 801051a:	2500      	movgt	r5, #0
 801051c:	2501      	movle	r5, #1
 801051e:	2b03      	cmp	r3, #3
 8010520:	f200 8087 	bhi.w	8010632 <_dtoa_r+0x30a>
 8010524:	e8df f003 	tbb	[pc, r3]
 8010528:	59383a2d 	.word	0x59383a2d
 801052c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010530:	441d      	add	r5, r3
 8010532:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010536:	2b20      	cmp	r3, #32
 8010538:	bfc1      	itttt	gt
 801053a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801053e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010542:	fa0b f303 	lslgt.w	r3, fp, r3
 8010546:	fa26 f000 	lsrgt.w	r0, r6, r0
 801054a:	bfda      	itte	le
 801054c:	f1c3 0320 	rsble	r3, r3, #32
 8010550:	fa06 f003 	lslle.w	r0, r6, r3
 8010554:	4318      	orrgt	r0, r3
 8010556:	f7ef fffd 	bl	8000554 <__aeabi_ui2d>
 801055a:	2301      	movs	r3, #1
 801055c:	4606      	mov	r6, r0
 801055e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010562:	3d01      	subs	r5, #1
 8010564:	930e      	str	r3, [sp, #56]	; 0x38
 8010566:	e76a      	b.n	801043e <_dtoa_r+0x116>
 8010568:	2301      	movs	r3, #1
 801056a:	e7b2      	b.n	80104d2 <_dtoa_r+0x1aa>
 801056c:	900b      	str	r0, [sp, #44]	; 0x2c
 801056e:	e7b1      	b.n	80104d4 <_dtoa_r+0x1ac>
 8010570:	9b04      	ldr	r3, [sp, #16]
 8010572:	9a00      	ldr	r2, [sp, #0]
 8010574:	1a9b      	subs	r3, r3, r2
 8010576:	9304      	str	r3, [sp, #16]
 8010578:	4253      	negs	r3, r2
 801057a:	9307      	str	r3, [sp, #28]
 801057c:	2300      	movs	r3, #0
 801057e:	930a      	str	r3, [sp, #40]	; 0x28
 8010580:	e7bf      	b.n	8010502 <_dtoa_r+0x1da>
 8010582:	2300      	movs	r3, #0
 8010584:	9308      	str	r3, [sp, #32]
 8010586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010588:	2b00      	cmp	r3, #0
 801058a:	dc55      	bgt.n	8010638 <_dtoa_r+0x310>
 801058c:	2301      	movs	r3, #1
 801058e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010592:	461a      	mov	r2, r3
 8010594:	9209      	str	r2, [sp, #36]	; 0x24
 8010596:	e00c      	b.n	80105b2 <_dtoa_r+0x28a>
 8010598:	2301      	movs	r3, #1
 801059a:	e7f3      	b.n	8010584 <_dtoa_r+0x25c>
 801059c:	2300      	movs	r3, #0
 801059e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80105a0:	9308      	str	r3, [sp, #32]
 80105a2:	9b00      	ldr	r3, [sp, #0]
 80105a4:	4413      	add	r3, r2
 80105a6:	9302      	str	r3, [sp, #8]
 80105a8:	3301      	adds	r3, #1
 80105aa:	2b01      	cmp	r3, #1
 80105ac:	9303      	str	r3, [sp, #12]
 80105ae:	bfb8      	it	lt
 80105b0:	2301      	movlt	r3, #1
 80105b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80105b4:	2200      	movs	r2, #0
 80105b6:	6042      	str	r2, [r0, #4]
 80105b8:	2204      	movs	r2, #4
 80105ba:	f102 0614 	add.w	r6, r2, #20
 80105be:	429e      	cmp	r6, r3
 80105c0:	6841      	ldr	r1, [r0, #4]
 80105c2:	d93d      	bls.n	8010640 <_dtoa_r+0x318>
 80105c4:	4620      	mov	r0, r4
 80105c6:	f001 f861 	bl	801168c <_Balloc>
 80105ca:	9001      	str	r0, [sp, #4]
 80105cc:	2800      	cmp	r0, #0
 80105ce:	d13b      	bne.n	8010648 <_dtoa_r+0x320>
 80105d0:	4b11      	ldr	r3, [pc, #68]	; (8010618 <_dtoa_r+0x2f0>)
 80105d2:	4602      	mov	r2, r0
 80105d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80105d8:	e6c0      	b.n	801035c <_dtoa_r+0x34>
 80105da:	2301      	movs	r3, #1
 80105dc:	e7df      	b.n	801059e <_dtoa_r+0x276>
 80105de:	bf00      	nop
 80105e0:	636f4361 	.word	0x636f4361
 80105e4:	3fd287a7 	.word	0x3fd287a7
 80105e8:	8b60c8b3 	.word	0x8b60c8b3
 80105ec:	3fc68a28 	.word	0x3fc68a28
 80105f0:	509f79fb 	.word	0x509f79fb
 80105f4:	3fd34413 	.word	0x3fd34413
 80105f8:	08013bf5 	.word	0x08013bf5
 80105fc:	08013e02 	.word	0x08013e02
 8010600:	7ff00000 	.word	0x7ff00000
 8010604:	08013dfe 	.word	0x08013dfe
 8010608:	08013df5 	.word	0x08013df5
 801060c:	08013bcd 	.word	0x08013bcd
 8010610:	3ff80000 	.word	0x3ff80000
 8010614:	08013f70 	.word	0x08013f70
 8010618:	08013e5d 	.word	0x08013e5d
 801061c:	2501      	movs	r5, #1
 801061e:	2300      	movs	r3, #0
 8010620:	9306      	str	r3, [sp, #24]
 8010622:	9508      	str	r5, [sp, #32]
 8010624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010628:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801062c:	2200      	movs	r2, #0
 801062e:	2312      	movs	r3, #18
 8010630:	e7b0      	b.n	8010594 <_dtoa_r+0x26c>
 8010632:	2301      	movs	r3, #1
 8010634:	9308      	str	r3, [sp, #32]
 8010636:	e7f5      	b.n	8010624 <_dtoa_r+0x2fc>
 8010638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801063a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801063e:	e7b8      	b.n	80105b2 <_dtoa_r+0x28a>
 8010640:	3101      	adds	r1, #1
 8010642:	6041      	str	r1, [r0, #4]
 8010644:	0052      	lsls	r2, r2, #1
 8010646:	e7b8      	b.n	80105ba <_dtoa_r+0x292>
 8010648:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801064a:	9a01      	ldr	r2, [sp, #4]
 801064c:	601a      	str	r2, [r3, #0]
 801064e:	9b03      	ldr	r3, [sp, #12]
 8010650:	2b0e      	cmp	r3, #14
 8010652:	f200 809d 	bhi.w	8010790 <_dtoa_r+0x468>
 8010656:	2d00      	cmp	r5, #0
 8010658:	f000 809a 	beq.w	8010790 <_dtoa_r+0x468>
 801065c:	9b00      	ldr	r3, [sp, #0]
 801065e:	2b00      	cmp	r3, #0
 8010660:	dd32      	ble.n	80106c8 <_dtoa_r+0x3a0>
 8010662:	4ab7      	ldr	r2, [pc, #732]	; (8010940 <_dtoa_r+0x618>)
 8010664:	f003 030f 	and.w	r3, r3, #15
 8010668:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801066c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010670:	9b00      	ldr	r3, [sp, #0]
 8010672:	05d8      	lsls	r0, r3, #23
 8010674:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010678:	d516      	bpl.n	80106a8 <_dtoa_r+0x380>
 801067a:	4bb2      	ldr	r3, [pc, #712]	; (8010944 <_dtoa_r+0x61c>)
 801067c:	ec51 0b19 	vmov	r0, r1, d9
 8010680:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010684:	f7f0 f90a 	bl	800089c <__aeabi_ddiv>
 8010688:	f007 070f 	and.w	r7, r7, #15
 801068c:	4682      	mov	sl, r0
 801068e:	468b      	mov	fp, r1
 8010690:	2503      	movs	r5, #3
 8010692:	4eac      	ldr	r6, [pc, #688]	; (8010944 <_dtoa_r+0x61c>)
 8010694:	b957      	cbnz	r7, 80106ac <_dtoa_r+0x384>
 8010696:	4642      	mov	r2, r8
 8010698:	464b      	mov	r3, r9
 801069a:	4650      	mov	r0, sl
 801069c:	4659      	mov	r1, fp
 801069e:	f7f0 f8fd 	bl	800089c <__aeabi_ddiv>
 80106a2:	4682      	mov	sl, r0
 80106a4:	468b      	mov	fp, r1
 80106a6:	e028      	b.n	80106fa <_dtoa_r+0x3d2>
 80106a8:	2502      	movs	r5, #2
 80106aa:	e7f2      	b.n	8010692 <_dtoa_r+0x36a>
 80106ac:	07f9      	lsls	r1, r7, #31
 80106ae:	d508      	bpl.n	80106c2 <_dtoa_r+0x39a>
 80106b0:	4640      	mov	r0, r8
 80106b2:	4649      	mov	r1, r9
 80106b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80106b8:	f7ef ffc6 	bl	8000648 <__aeabi_dmul>
 80106bc:	3501      	adds	r5, #1
 80106be:	4680      	mov	r8, r0
 80106c0:	4689      	mov	r9, r1
 80106c2:	107f      	asrs	r7, r7, #1
 80106c4:	3608      	adds	r6, #8
 80106c6:	e7e5      	b.n	8010694 <_dtoa_r+0x36c>
 80106c8:	f000 809b 	beq.w	8010802 <_dtoa_r+0x4da>
 80106cc:	9b00      	ldr	r3, [sp, #0]
 80106ce:	4f9d      	ldr	r7, [pc, #628]	; (8010944 <_dtoa_r+0x61c>)
 80106d0:	425e      	negs	r6, r3
 80106d2:	4b9b      	ldr	r3, [pc, #620]	; (8010940 <_dtoa_r+0x618>)
 80106d4:	f006 020f 	and.w	r2, r6, #15
 80106d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80106dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e0:	ec51 0b19 	vmov	r0, r1, d9
 80106e4:	f7ef ffb0 	bl	8000648 <__aeabi_dmul>
 80106e8:	1136      	asrs	r6, r6, #4
 80106ea:	4682      	mov	sl, r0
 80106ec:	468b      	mov	fp, r1
 80106ee:	2300      	movs	r3, #0
 80106f0:	2502      	movs	r5, #2
 80106f2:	2e00      	cmp	r6, #0
 80106f4:	d17a      	bne.n	80107ec <_dtoa_r+0x4c4>
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d1d3      	bne.n	80106a2 <_dtoa_r+0x37a>
 80106fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	f000 8082 	beq.w	8010806 <_dtoa_r+0x4de>
 8010702:	4b91      	ldr	r3, [pc, #580]	; (8010948 <_dtoa_r+0x620>)
 8010704:	2200      	movs	r2, #0
 8010706:	4650      	mov	r0, sl
 8010708:	4659      	mov	r1, fp
 801070a:	f7f0 fa0f 	bl	8000b2c <__aeabi_dcmplt>
 801070e:	2800      	cmp	r0, #0
 8010710:	d079      	beq.n	8010806 <_dtoa_r+0x4de>
 8010712:	9b03      	ldr	r3, [sp, #12]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d076      	beq.n	8010806 <_dtoa_r+0x4de>
 8010718:	9b02      	ldr	r3, [sp, #8]
 801071a:	2b00      	cmp	r3, #0
 801071c:	dd36      	ble.n	801078c <_dtoa_r+0x464>
 801071e:	9b00      	ldr	r3, [sp, #0]
 8010720:	4650      	mov	r0, sl
 8010722:	4659      	mov	r1, fp
 8010724:	1e5f      	subs	r7, r3, #1
 8010726:	2200      	movs	r2, #0
 8010728:	4b88      	ldr	r3, [pc, #544]	; (801094c <_dtoa_r+0x624>)
 801072a:	f7ef ff8d 	bl	8000648 <__aeabi_dmul>
 801072e:	9e02      	ldr	r6, [sp, #8]
 8010730:	4682      	mov	sl, r0
 8010732:	468b      	mov	fp, r1
 8010734:	3501      	adds	r5, #1
 8010736:	4628      	mov	r0, r5
 8010738:	f7ef ff1c 	bl	8000574 <__aeabi_i2d>
 801073c:	4652      	mov	r2, sl
 801073e:	465b      	mov	r3, fp
 8010740:	f7ef ff82 	bl	8000648 <__aeabi_dmul>
 8010744:	4b82      	ldr	r3, [pc, #520]	; (8010950 <_dtoa_r+0x628>)
 8010746:	2200      	movs	r2, #0
 8010748:	f7ef fdc8 	bl	80002dc <__adddf3>
 801074c:	46d0      	mov	r8, sl
 801074e:	46d9      	mov	r9, fp
 8010750:	4682      	mov	sl, r0
 8010752:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010756:	2e00      	cmp	r6, #0
 8010758:	d158      	bne.n	801080c <_dtoa_r+0x4e4>
 801075a:	4b7e      	ldr	r3, [pc, #504]	; (8010954 <_dtoa_r+0x62c>)
 801075c:	2200      	movs	r2, #0
 801075e:	4640      	mov	r0, r8
 8010760:	4649      	mov	r1, r9
 8010762:	f7ef fdb9 	bl	80002d8 <__aeabi_dsub>
 8010766:	4652      	mov	r2, sl
 8010768:	465b      	mov	r3, fp
 801076a:	4680      	mov	r8, r0
 801076c:	4689      	mov	r9, r1
 801076e:	f7f0 f9fb 	bl	8000b68 <__aeabi_dcmpgt>
 8010772:	2800      	cmp	r0, #0
 8010774:	f040 8295 	bne.w	8010ca2 <_dtoa_r+0x97a>
 8010778:	4652      	mov	r2, sl
 801077a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801077e:	4640      	mov	r0, r8
 8010780:	4649      	mov	r1, r9
 8010782:	f7f0 f9d3 	bl	8000b2c <__aeabi_dcmplt>
 8010786:	2800      	cmp	r0, #0
 8010788:	f040 8289 	bne.w	8010c9e <_dtoa_r+0x976>
 801078c:	ec5b ab19 	vmov	sl, fp, d9
 8010790:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010792:	2b00      	cmp	r3, #0
 8010794:	f2c0 8148 	blt.w	8010a28 <_dtoa_r+0x700>
 8010798:	9a00      	ldr	r2, [sp, #0]
 801079a:	2a0e      	cmp	r2, #14
 801079c:	f300 8144 	bgt.w	8010a28 <_dtoa_r+0x700>
 80107a0:	4b67      	ldr	r3, [pc, #412]	; (8010940 <_dtoa_r+0x618>)
 80107a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80107a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80107aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	f280 80d5 	bge.w	801095c <_dtoa_r+0x634>
 80107b2:	9b03      	ldr	r3, [sp, #12]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	f300 80d1 	bgt.w	801095c <_dtoa_r+0x634>
 80107ba:	f040 826f 	bne.w	8010c9c <_dtoa_r+0x974>
 80107be:	4b65      	ldr	r3, [pc, #404]	; (8010954 <_dtoa_r+0x62c>)
 80107c0:	2200      	movs	r2, #0
 80107c2:	4640      	mov	r0, r8
 80107c4:	4649      	mov	r1, r9
 80107c6:	f7ef ff3f 	bl	8000648 <__aeabi_dmul>
 80107ca:	4652      	mov	r2, sl
 80107cc:	465b      	mov	r3, fp
 80107ce:	f7f0 f9c1 	bl	8000b54 <__aeabi_dcmpge>
 80107d2:	9e03      	ldr	r6, [sp, #12]
 80107d4:	4637      	mov	r7, r6
 80107d6:	2800      	cmp	r0, #0
 80107d8:	f040 8245 	bne.w	8010c66 <_dtoa_r+0x93e>
 80107dc:	9d01      	ldr	r5, [sp, #4]
 80107de:	2331      	movs	r3, #49	; 0x31
 80107e0:	f805 3b01 	strb.w	r3, [r5], #1
 80107e4:	9b00      	ldr	r3, [sp, #0]
 80107e6:	3301      	adds	r3, #1
 80107e8:	9300      	str	r3, [sp, #0]
 80107ea:	e240      	b.n	8010c6e <_dtoa_r+0x946>
 80107ec:	07f2      	lsls	r2, r6, #31
 80107ee:	d505      	bpl.n	80107fc <_dtoa_r+0x4d4>
 80107f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80107f4:	f7ef ff28 	bl	8000648 <__aeabi_dmul>
 80107f8:	3501      	adds	r5, #1
 80107fa:	2301      	movs	r3, #1
 80107fc:	1076      	asrs	r6, r6, #1
 80107fe:	3708      	adds	r7, #8
 8010800:	e777      	b.n	80106f2 <_dtoa_r+0x3ca>
 8010802:	2502      	movs	r5, #2
 8010804:	e779      	b.n	80106fa <_dtoa_r+0x3d2>
 8010806:	9f00      	ldr	r7, [sp, #0]
 8010808:	9e03      	ldr	r6, [sp, #12]
 801080a:	e794      	b.n	8010736 <_dtoa_r+0x40e>
 801080c:	9901      	ldr	r1, [sp, #4]
 801080e:	4b4c      	ldr	r3, [pc, #304]	; (8010940 <_dtoa_r+0x618>)
 8010810:	4431      	add	r1, r6
 8010812:	910d      	str	r1, [sp, #52]	; 0x34
 8010814:	9908      	ldr	r1, [sp, #32]
 8010816:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801081a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801081e:	2900      	cmp	r1, #0
 8010820:	d043      	beq.n	80108aa <_dtoa_r+0x582>
 8010822:	494d      	ldr	r1, [pc, #308]	; (8010958 <_dtoa_r+0x630>)
 8010824:	2000      	movs	r0, #0
 8010826:	f7f0 f839 	bl	800089c <__aeabi_ddiv>
 801082a:	4652      	mov	r2, sl
 801082c:	465b      	mov	r3, fp
 801082e:	f7ef fd53 	bl	80002d8 <__aeabi_dsub>
 8010832:	9d01      	ldr	r5, [sp, #4]
 8010834:	4682      	mov	sl, r0
 8010836:	468b      	mov	fp, r1
 8010838:	4649      	mov	r1, r9
 801083a:	4640      	mov	r0, r8
 801083c:	f7f0 f9b4 	bl	8000ba8 <__aeabi_d2iz>
 8010840:	4606      	mov	r6, r0
 8010842:	f7ef fe97 	bl	8000574 <__aeabi_i2d>
 8010846:	4602      	mov	r2, r0
 8010848:	460b      	mov	r3, r1
 801084a:	4640      	mov	r0, r8
 801084c:	4649      	mov	r1, r9
 801084e:	f7ef fd43 	bl	80002d8 <__aeabi_dsub>
 8010852:	3630      	adds	r6, #48	; 0x30
 8010854:	f805 6b01 	strb.w	r6, [r5], #1
 8010858:	4652      	mov	r2, sl
 801085a:	465b      	mov	r3, fp
 801085c:	4680      	mov	r8, r0
 801085e:	4689      	mov	r9, r1
 8010860:	f7f0 f964 	bl	8000b2c <__aeabi_dcmplt>
 8010864:	2800      	cmp	r0, #0
 8010866:	d163      	bne.n	8010930 <_dtoa_r+0x608>
 8010868:	4642      	mov	r2, r8
 801086a:	464b      	mov	r3, r9
 801086c:	4936      	ldr	r1, [pc, #216]	; (8010948 <_dtoa_r+0x620>)
 801086e:	2000      	movs	r0, #0
 8010870:	f7ef fd32 	bl	80002d8 <__aeabi_dsub>
 8010874:	4652      	mov	r2, sl
 8010876:	465b      	mov	r3, fp
 8010878:	f7f0 f958 	bl	8000b2c <__aeabi_dcmplt>
 801087c:	2800      	cmp	r0, #0
 801087e:	f040 80b5 	bne.w	80109ec <_dtoa_r+0x6c4>
 8010882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010884:	429d      	cmp	r5, r3
 8010886:	d081      	beq.n	801078c <_dtoa_r+0x464>
 8010888:	4b30      	ldr	r3, [pc, #192]	; (801094c <_dtoa_r+0x624>)
 801088a:	2200      	movs	r2, #0
 801088c:	4650      	mov	r0, sl
 801088e:	4659      	mov	r1, fp
 8010890:	f7ef feda 	bl	8000648 <__aeabi_dmul>
 8010894:	4b2d      	ldr	r3, [pc, #180]	; (801094c <_dtoa_r+0x624>)
 8010896:	4682      	mov	sl, r0
 8010898:	468b      	mov	fp, r1
 801089a:	4640      	mov	r0, r8
 801089c:	4649      	mov	r1, r9
 801089e:	2200      	movs	r2, #0
 80108a0:	f7ef fed2 	bl	8000648 <__aeabi_dmul>
 80108a4:	4680      	mov	r8, r0
 80108a6:	4689      	mov	r9, r1
 80108a8:	e7c6      	b.n	8010838 <_dtoa_r+0x510>
 80108aa:	4650      	mov	r0, sl
 80108ac:	4659      	mov	r1, fp
 80108ae:	f7ef fecb 	bl	8000648 <__aeabi_dmul>
 80108b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80108b4:	9d01      	ldr	r5, [sp, #4]
 80108b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80108b8:	4682      	mov	sl, r0
 80108ba:	468b      	mov	fp, r1
 80108bc:	4649      	mov	r1, r9
 80108be:	4640      	mov	r0, r8
 80108c0:	f7f0 f972 	bl	8000ba8 <__aeabi_d2iz>
 80108c4:	4606      	mov	r6, r0
 80108c6:	f7ef fe55 	bl	8000574 <__aeabi_i2d>
 80108ca:	3630      	adds	r6, #48	; 0x30
 80108cc:	4602      	mov	r2, r0
 80108ce:	460b      	mov	r3, r1
 80108d0:	4640      	mov	r0, r8
 80108d2:	4649      	mov	r1, r9
 80108d4:	f7ef fd00 	bl	80002d8 <__aeabi_dsub>
 80108d8:	f805 6b01 	strb.w	r6, [r5], #1
 80108dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80108de:	429d      	cmp	r5, r3
 80108e0:	4680      	mov	r8, r0
 80108e2:	4689      	mov	r9, r1
 80108e4:	f04f 0200 	mov.w	r2, #0
 80108e8:	d124      	bne.n	8010934 <_dtoa_r+0x60c>
 80108ea:	4b1b      	ldr	r3, [pc, #108]	; (8010958 <_dtoa_r+0x630>)
 80108ec:	4650      	mov	r0, sl
 80108ee:	4659      	mov	r1, fp
 80108f0:	f7ef fcf4 	bl	80002dc <__adddf3>
 80108f4:	4602      	mov	r2, r0
 80108f6:	460b      	mov	r3, r1
 80108f8:	4640      	mov	r0, r8
 80108fa:	4649      	mov	r1, r9
 80108fc:	f7f0 f934 	bl	8000b68 <__aeabi_dcmpgt>
 8010900:	2800      	cmp	r0, #0
 8010902:	d173      	bne.n	80109ec <_dtoa_r+0x6c4>
 8010904:	4652      	mov	r2, sl
 8010906:	465b      	mov	r3, fp
 8010908:	4913      	ldr	r1, [pc, #76]	; (8010958 <_dtoa_r+0x630>)
 801090a:	2000      	movs	r0, #0
 801090c:	f7ef fce4 	bl	80002d8 <__aeabi_dsub>
 8010910:	4602      	mov	r2, r0
 8010912:	460b      	mov	r3, r1
 8010914:	4640      	mov	r0, r8
 8010916:	4649      	mov	r1, r9
 8010918:	f7f0 f908 	bl	8000b2c <__aeabi_dcmplt>
 801091c:	2800      	cmp	r0, #0
 801091e:	f43f af35 	beq.w	801078c <_dtoa_r+0x464>
 8010922:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010924:	1e6b      	subs	r3, r5, #1
 8010926:	930f      	str	r3, [sp, #60]	; 0x3c
 8010928:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801092c:	2b30      	cmp	r3, #48	; 0x30
 801092e:	d0f8      	beq.n	8010922 <_dtoa_r+0x5fa>
 8010930:	9700      	str	r7, [sp, #0]
 8010932:	e049      	b.n	80109c8 <_dtoa_r+0x6a0>
 8010934:	4b05      	ldr	r3, [pc, #20]	; (801094c <_dtoa_r+0x624>)
 8010936:	f7ef fe87 	bl	8000648 <__aeabi_dmul>
 801093a:	4680      	mov	r8, r0
 801093c:	4689      	mov	r9, r1
 801093e:	e7bd      	b.n	80108bc <_dtoa_r+0x594>
 8010940:	08013f70 	.word	0x08013f70
 8010944:	08013f48 	.word	0x08013f48
 8010948:	3ff00000 	.word	0x3ff00000
 801094c:	40240000 	.word	0x40240000
 8010950:	401c0000 	.word	0x401c0000
 8010954:	40140000 	.word	0x40140000
 8010958:	3fe00000 	.word	0x3fe00000
 801095c:	9d01      	ldr	r5, [sp, #4]
 801095e:	4656      	mov	r6, sl
 8010960:	465f      	mov	r7, fp
 8010962:	4642      	mov	r2, r8
 8010964:	464b      	mov	r3, r9
 8010966:	4630      	mov	r0, r6
 8010968:	4639      	mov	r1, r7
 801096a:	f7ef ff97 	bl	800089c <__aeabi_ddiv>
 801096e:	f7f0 f91b 	bl	8000ba8 <__aeabi_d2iz>
 8010972:	4682      	mov	sl, r0
 8010974:	f7ef fdfe 	bl	8000574 <__aeabi_i2d>
 8010978:	4642      	mov	r2, r8
 801097a:	464b      	mov	r3, r9
 801097c:	f7ef fe64 	bl	8000648 <__aeabi_dmul>
 8010980:	4602      	mov	r2, r0
 8010982:	460b      	mov	r3, r1
 8010984:	4630      	mov	r0, r6
 8010986:	4639      	mov	r1, r7
 8010988:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801098c:	f7ef fca4 	bl	80002d8 <__aeabi_dsub>
 8010990:	f805 6b01 	strb.w	r6, [r5], #1
 8010994:	9e01      	ldr	r6, [sp, #4]
 8010996:	9f03      	ldr	r7, [sp, #12]
 8010998:	1bae      	subs	r6, r5, r6
 801099a:	42b7      	cmp	r7, r6
 801099c:	4602      	mov	r2, r0
 801099e:	460b      	mov	r3, r1
 80109a0:	d135      	bne.n	8010a0e <_dtoa_r+0x6e6>
 80109a2:	f7ef fc9b 	bl	80002dc <__adddf3>
 80109a6:	4642      	mov	r2, r8
 80109a8:	464b      	mov	r3, r9
 80109aa:	4606      	mov	r6, r0
 80109ac:	460f      	mov	r7, r1
 80109ae:	f7f0 f8db 	bl	8000b68 <__aeabi_dcmpgt>
 80109b2:	b9d0      	cbnz	r0, 80109ea <_dtoa_r+0x6c2>
 80109b4:	4642      	mov	r2, r8
 80109b6:	464b      	mov	r3, r9
 80109b8:	4630      	mov	r0, r6
 80109ba:	4639      	mov	r1, r7
 80109bc:	f7f0 f8ac 	bl	8000b18 <__aeabi_dcmpeq>
 80109c0:	b110      	cbz	r0, 80109c8 <_dtoa_r+0x6a0>
 80109c2:	f01a 0f01 	tst.w	sl, #1
 80109c6:	d110      	bne.n	80109ea <_dtoa_r+0x6c2>
 80109c8:	4620      	mov	r0, r4
 80109ca:	ee18 1a10 	vmov	r1, s16
 80109ce:	f000 fe9d 	bl	801170c <_Bfree>
 80109d2:	2300      	movs	r3, #0
 80109d4:	9800      	ldr	r0, [sp, #0]
 80109d6:	702b      	strb	r3, [r5, #0]
 80109d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80109da:	3001      	adds	r0, #1
 80109dc:	6018      	str	r0, [r3, #0]
 80109de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	f43f acf1 	beq.w	80103c8 <_dtoa_r+0xa0>
 80109e6:	601d      	str	r5, [r3, #0]
 80109e8:	e4ee      	b.n	80103c8 <_dtoa_r+0xa0>
 80109ea:	9f00      	ldr	r7, [sp, #0]
 80109ec:	462b      	mov	r3, r5
 80109ee:	461d      	mov	r5, r3
 80109f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80109f4:	2a39      	cmp	r2, #57	; 0x39
 80109f6:	d106      	bne.n	8010a06 <_dtoa_r+0x6de>
 80109f8:	9a01      	ldr	r2, [sp, #4]
 80109fa:	429a      	cmp	r2, r3
 80109fc:	d1f7      	bne.n	80109ee <_dtoa_r+0x6c6>
 80109fe:	9901      	ldr	r1, [sp, #4]
 8010a00:	2230      	movs	r2, #48	; 0x30
 8010a02:	3701      	adds	r7, #1
 8010a04:	700a      	strb	r2, [r1, #0]
 8010a06:	781a      	ldrb	r2, [r3, #0]
 8010a08:	3201      	adds	r2, #1
 8010a0a:	701a      	strb	r2, [r3, #0]
 8010a0c:	e790      	b.n	8010930 <_dtoa_r+0x608>
 8010a0e:	4ba6      	ldr	r3, [pc, #664]	; (8010ca8 <_dtoa_r+0x980>)
 8010a10:	2200      	movs	r2, #0
 8010a12:	f7ef fe19 	bl	8000648 <__aeabi_dmul>
 8010a16:	2200      	movs	r2, #0
 8010a18:	2300      	movs	r3, #0
 8010a1a:	4606      	mov	r6, r0
 8010a1c:	460f      	mov	r7, r1
 8010a1e:	f7f0 f87b 	bl	8000b18 <__aeabi_dcmpeq>
 8010a22:	2800      	cmp	r0, #0
 8010a24:	d09d      	beq.n	8010962 <_dtoa_r+0x63a>
 8010a26:	e7cf      	b.n	80109c8 <_dtoa_r+0x6a0>
 8010a28:	9a08      	ldr	r2, [sp, #32]
 8010a2a:	2a00      	cmp	r2, #0
 8010a2c:	f000 80d7 	beq.w	8010bde <_dtoa_r+0x8b6>
 8010a30:	9a06      	ldr	r2, [sp, #24]
 8010a32:	2a01      	cmp	r2, #1
 8010a34:	f300 80ba 	bgt.w	8010bac <_dtoa_r+0x884>
 8010a38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010a3a:	2a00      	cmp	r2, #0
 8010a3c:	f000 80b2 	beq.w	8010ba4 <_dtoa_r+0x87c>
 8010a40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010a44:	9e07      	ldr	r6, [sp, #28]
 8010a46:	9d04      	ldr	r5, [sp, #16]
 8010a48:	9a04      	ldr	r2, [sp, #16]
 8010a4a:	441a      	add	r2, r3
 8010a4c:	9204      	str	r2, [sp, #16]
 8010a4e:	9a05      	ldr	r2, [sp, #20]
 8010a50:	2101      	movs	r1, #1
 8010a52:	441a      	add	r2, r3
 8010a54:	4620      	mov	r0, r4
 8010a56:	9205      	str	r2, [sp, #20]
 8010a58:	f000 ff5a 	bl	8011910 <__i2b>
 8010a5c:	4607      	mov	r7, r0
 8010a5e:	2d00      	cmp	r5, #0
 8010a60:	dd0c      	ble.n	8010a7c <_dtoa_r+0x754>
 8010a62:	9b05      	ldr	r3, [sp, #20]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	dd09      	ble.n	8010a7c <_dtoa_r+0x754>
 8010a68:	42ab      	cmp	r3, r5
 8010a6a:	9a04      	ldr	r2, [sp, #16]
 8010a6c:	bfa8      	it	ge
 8010a6e:	462b      	movge	r3, r5
 8010a70:	1ad2      	subs	r2, r2, r3
 8010a72:	9204      	str	r2, [sp, #16]
 8010a74:	9a05      	ldr	r2, [sp, #20]
 8010a76:	1aed      	subs	r5, r5, r3
 8010a78:	1ad3      	subs	r3, r2, r3
 8010a7a:	9305      	str	r3, [sp, #20]
 8010a7c:	9b07      	ldr	r3, [sp, #28]
 8010a7e:	b31b      	cbz	r3, 8010ac8 <_dtoa_r+0x7a0>
 8010a80:	9b08      	ldr	r3, [sp, #32]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	f000 80af 	beq.w	8010be6 <_dtoa_r+0x8be>
 8010a88:	2e00      	cmp	r6, #0
 8010a8a:	dd13      	ble.n	8010ab4 <_dtoa_r+0x78c>
 8010a8c:	4639      	mov	r1, r7
 8010a8e:	4632      	mov	r2, r6
 8010a90:	4620      	mov	r0, r4
 8010a92:	f000 fffd 	bl	8011a90 <__pow5mult>
 8010a96:	ee18 2a10 	vmov	r2, s16
 8010a9a:	4601      	mov	r1, r0
 8010a9c:	4607      	mov	r7, r0
 8010a9e:	4620      	mov	r0, r4
 8010aa0:	f000 ff4c 	bl	801193c <__multiply>
 8010aa4:	ee18 1a10 	vmov	r1, s16
 8010aa8:	4680      	mov	r8, r0
 8010aaa:	4620      	mov	r0, r4
 8010aac:	f000 fe2e 	bl	801170c <_Bfree>
 8010ab0:	ee08 8a10 	vmov	s16, r8
 8010ab4:	9b07      	ldr	r3, [sp, #28]
 8010ab6:	1b9a      	subs	r2, r3, r6
 8010ab8:	d006      	beq.n	8010ac8 <_dtoa_r+0x7a0>
 8010aba:	ee18 1a10 	vmov	r1, s16
 8010abe:	4620      	mov	r0, r4
 8010ac0:	f000 ffe6 	bl	8011a90 <__pow5mult>
 8010ac4:	ee08 0a10 	vmov	s16, r0
 8010ac8:	2101      	movs	r1, #1
 8010aca:	4620      	mov	r0, r4
 8010acc:	f000 ff20 	bl	8011910 <__i2b>
 8010ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	4606      	mov	r6, r0
 8010ad6:	f340 8088 	ble.w	8010bea <_dtoa_r+0x8c2>
 8010ada:	461a      	mov	r2, r3
 8010adc:	4601      	mov	r1, r0
 8010ade:	4620      	mov	r0, r4
 8010ae0:	f000 ffd6 	bl	8011a90 <__pow5mult>
 8010ae4:	9b06      	ldr	r3, [sp, #24]
 8010ae6:	2b01      	cmp	r3, #1
 8010ae8:	4606      	mov	r6, r0
 8010aea:	f340 8081 	ble.w	8010bf0 <_dtoa_r+0x8c8>
 8010aee:	f04f 0800 	mov.w	r8, #0
 8010af2:	6933      	ldr	r3, [r6, #16]
 8010af4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010af8:	6918      	ldr	r0, [r3, #16]
 8010afa:	f000 feb9 	bl	8011870 <__hi0bits>
 8010afe:	f1c0 0020 	rsb	r0, r0, #32
 8010b02:	9b05      	ldr	r3, [sp, #20]
 8010b04:	4418      	add	r0, r3
 8010b06:	f010 001f 	ands.w	r0, r0, #31
 8010b0a:	f000 8092 	beq.w	8010c32 <_dtoa_r+0x90a>
 8010b0e:	f1c0 0320 	rsb	r3, r0, #32
 8010b12:	2b04      	cmp	r3, #4
 8010b14:	f340 808a 	ble.w	8010c2c <_dtoa_r+0x904>
 8010b18:	f1c0 001c 	rsb	r0, r0, #28
 8010b1c:	9b04      	ldr	r3, [sp, #16]
 8010b1e:	4403      	add	r3, r0
 8010b20:	9304      	str	r3, [sp, #16]
 8010b22:	9b05      	ldr	r3, [sp, #20]
 8010b24:	4403      	add	r3, r0
 8010b26:	4405      	add	r5, r0
 8010b28:	9305      	str	r3, [sp, #20]
 8010b2a:	9b04      	ldr	r3, [sp, #16]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	dd07      	ble.n	8010b40 <_dtoa_r+0x818>
 8010b30:	ee18 1a10 	vmov	r1, s16
 8010b34:	461a      	mov	r2, r3
 8010b36:	4620      	mov	r0, r4
 8010b38:	f001 f804 	bl	8011b44 <__lshift>
 8010b3c:	ee08 0a10 	vmov	s16, r0
 8010b40:	9b05      	ldr	r3, [sp, #20]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	dd05      	ble.n	8010b52 <_dtoa_r+0x82a>
 8010b46:	4631      	mov	r1, r6
 8010b48:	461a      	mov	r2, r3
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	f000 fffa 	bl	8011b44 <__lshift>
 8010b50:	4606      	mov	r6, r0
 8010b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d06e      	beq.n	8010c36 <_dtoa_r+0x90e>
 8010b58:	ee18 0a10 	vmov	r0, s16
 8010b5c:	4631      	mov	r1, r6
 8010b5e:	f001 f861 	bl	8011c24 <__mcmp>
 8010b62:	2800      	cmp	r0, #0
 8010b64:	da67      	bge.n	8010c36 <_dtoa_r+0x90e>
 8010b66:	9b00      	ldr	r3, [sp, #0]
 8010b68:	3b01      	subs	r3, #1
 8010b6a:	ee18 1a10 	vmov	r1, s16
 8010b6e:	9300      	str	r3, [sp, #0]
 8010b70:	220a      	movs	r2, #10
 8010b72:	2300      	movs	r3, #0
 8010b74:	4620      	mov	r0, r4
 8010b76:	f000 fdeb 	bl	8011750 <__multadd>
 8010b7a:	9b08      	ldr	r3, [sp, #32]
 8010b7c:	ee08 0a10 	vmov	s16, r0
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	f000 81b1 	beq.w	8010ee8 <_dtoa_r+0xbc0>
 8010b86:	2300      	movs	r3, #0
 8010b88:	4639      	mov	r1, r7
 8010b8a:	220a      	movs	r2, #10
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	f000 fddf 	bl	8011750 <__multadd>
 8010b92:	9b02      	ldr	r3, [sp, #8]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	4607      	mov	r7, r0
 8010b98:	f300 808e 	bgt.w	8010cb8 <_dtoa_r+0x990>
 8010b9c:	9b06      	ldr	r3, [sp, #24]
 8010b9e:	2b02      	cmp	r3, #2
 8010ba0:	dc51      	bgt.n	8010c46 <_dtoa_r+0x91e>
 8010ba2:	e089      	b.n	8010cb8 <_dtoa_r+0x990>
 8010ba4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010ba6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010baa:	e74b      	b.n	8010a44 <_dtoa_r+0x71c>
 8010bac:	9b03      	ldr	r3, [sp, #12]
 8010bae:	1e5e      	subs	r6, r3, #1
 8010bb0:	9b07      	ldr	r3, [sp, #28]
 8010bb2:	42b3      	cmp	r3, r6
 8010bb4:	bfbf      	itttt	lt
 8010bb6:	9b07      	ldrlt	r3, [sp, #28]
 8010bb8:	9607      	strlt	r6, [sp, #28]
 8010bba:	1af2      	sublt	r2, r6, r3
 8010bbc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010bbe:	bfb6      	itet	lt
 8010bc0:	189b      	addlt	r3, r3, r2
 8010bc2:	1b9e      	subge	r6, r3, r6
 8010bc4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010bc6:	9b03      	ldr	r3, [sp, #12]
 8010bc8:	bfb8      	it	lt
 8010bca:	2600      	movlt	r6, #0
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	bfb7      	itett	lt
 8010bd0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010bd4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010bd8:	1a9d      	sublt	r5, r3, r2
 8010bda:	2300      	movlt	r3, #0
 8010bdc:	e734      	b.n	8010a48 <_dtoa_r+0x720>
 8010bde:	9e07      	ldr	r6, [sp, #28]
 8010be0:	9d04      	ldr	r5, [sp, #16]
 8010be2:	9f08      	ldr	r7, [sp, #32]
 8010be4:	e73b      	b.n	8010a5e <_dtoa_r+0x736>
 8010be6:	9a07      	ldr	r2, [sp, #28]
 8010be8:	e767      	b.n	8010aba <_dtoa_r+0x792>
 8010bea:	9b06      	ldr	r3, [sp, #24]
 8010bec:	2b01      	cmp	r3, #1
 8010bee:	dc18      	bgt.n	8010c22 <_dtoa_r+0x8fa>
 8010bf0:	f1ba 0f00 	cmp.w	sl, #0
 8010bf4:	d115      	bne.n	8010c22 <_dtoa_r+0x8fa>
 8010bf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010bfa:	b993      	cbnz	r3, 8010c22 <_dtoa_r+0x8fa>
 8010bfc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010c00:	0d1b      	lsrs	r3, r3, #20
 8010c02:	051b      	lsls	r3, r3, #20
 8010c04:	b183      	cbz	r3, 8010c28 <_dtoa_r+0x900>
 8010c06:	9b04      	ldr	r3, [sp, #16]
 8010c08:	3301      	adds	r3, #1
 8010c0a:	9304      	str	r3, [sp, #16]
 8010c0c:	9b05      	ldr	r3, [sp, #20]
 8010c0e:	3301      	adds	r3, #1
 8010c10:	9305      	str	r3, [sp, #20]
 8010c12:	f04f 0801 	mov.w	r8, #1
 8010c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	f47f af6a 	bne.w	8010af2 <_dtoa_r+0x7ca>
 8010c1e:	2001      	movs	r0, #1
 8010c20:	e76f      	b.n	8010b02 <_dtoa_r+0x7da>
 8010c22:	f04f 0800 	mov.w	r8, #0
 8010c26:	e7f6      	b.n	8010c16 <_dtoa_r+0x8ee>
 8010c28:	4698      	mov	r8, r3
 8010c2a:	e7f4      	b.n	8010c16 <_dtoa_r+0x8ee>
 8010c2c:	f43f af7d 	beq.w	8010b2a <_dtoa_r+0x802>
 8010c30:	4618      	mov	r0, r3
 8010c32:	301c      	adds	r0, #28
 8010c34:	e772      	b.n	8010b1c <_dtoa_r+0x7f4>
 8010c36:	9b03      	ldr	r3, [sp, #12]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	dc37      	bgt.n	8010cac <_dtoa_r+0x984>
 8010c3c:	9b06      	ldr	r3, [sp, #24]
 8010c3e:	2b02      	cmp	r3, #2
 8010c40:	dd34      	ble.n	8010cac <_dtoa_r+0x984>
 8010c42:	9b03      	ldr	r3, [sp, #12]
 8010c44:	9302      	str	r3, [sp, #8]
 8010c46:	9b02      	ldr	r3, [sp, #8]
 8010c48:	b96b      	cbnz	r3, 8010c66 <_dtoa_r+0x93e>
 8010c4a:	4631      	mov	r1, r6
 8010c4c:	2205      	movs	r2, #5
 8010c4e:	4620      	mov	r0, r4
 8010c50:	f000 fd7e 	bl	8011750 <__multadd>
 8010c54:	4601      	mov	r1, r0
 8010c56:	4606      	mov	r6, r0
 8010c58:	ee18 0a10 	vmov	r0, s16
 8010c5c:	f000 ffe2 	bl	8011c24 <__mcmp>
 8010c60:	2800      	cmp	r0, #0
 8010c62:	f73f adbb 	bgt.w	80107dc <_dtoa_r+0x4b4>
 8010c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c68:	9d01      	ldr	r5, [sp, #4]
 8010c6a:	43db      	mvns	r3, r3
 8010c6c:	9300      	str	r3, [sp, #0]
 8010c6e:	f04f 0800 	mov.w	r8, #0
 8010c72:	4631      	mov	r1, r6
 8010c74:	4620      	mov	r0, r4
 8010c76:	f000 fd49 	bl	801170c <_Bfree>
 8010c7a:	2f00      	cmp	r7, #0
 8010c7c:	f43f aea4 	beq.w	80109c8 <_dtoa_r+0x6a0>
 8010c80:	f1b8 0f00 	cmp.w	r8, #0
 8010c84:	d005      	beq.n	8010c92 <_dtoa_r+0x96a>
 8010c86:	45b8      	cmp	r8, r7
 8010c88:	d003      	beq.n	8010c92 <_dtoa_r+0x96a>
 8010c8a:	4641      	mov	r1, r8
 8010c8c:	4620      	mov	r0, r4
 8010c8e:	f000 fd3d 	bl	801170c <_Bfree>
 8010c92:	4639      	mov	r1, r7
 8010c94:	4620      	mov	r0, r4
 8010c96:	f000 fd39 	bl	801170c <_Bfree>
 8010c9a:	e695      	b.n	80109c8 <_dtoa_r+0x6a0>
 8010c9c:	2600      	movs	r6, #0
 8010c9e:	4637      	mov	r7, r6
 8010ca0:	e7e1      	b.n	8010c66 <_dtoa_r+0x93e>
 8010ca2:	9700      	str	r7, [sp, #0]
 8010ca4:	4637      	mov	r7, r6
 8010ca6:	e599      	b.n	80107dc <_dtoa_r+0x4b4>
 8010ca8:	40240000 	.word	0x40240000
 8010cac:	9b08      	ldr	r3, [sp, #32]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	f000 80ca 	beq.w	8010e48 <_dtoa_r+0xb20>
 8010cb4:	9b03      	ldr	r3, [sp, #12]
 8010cb6:	9302      	str	r3, [sp, #8]
 8010cb8:	2d00      	cmp	r5, #0
 8010cba:	dd05      	ble.n	8010cc8 <_dtoa_r+0x9a0>
 8010cbc:	4639      	mov	r1, r7
 8010cbe:	462a      	mov	r2, r5
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	f000 ff3f 	bl	8011b44 <__lshift>
 8010cc6:	4607      	mov	r7, r0
 8010cc8:	f1b8 0f00 	cmp.w	r8, #0
 8010ccc:	d05b      	beq.n	8010d86 <_dtoa_r+0xa5e>
 8010cce:	6879      	ldr	r1, [r7, #4]
 8010cd0:	4620      	mov	r0, r4
 8010cd2:	f000 fcdb 	bl	801168c <_Balloc>
 8010cd6:	4605      	mov	r5, r0
 8010cd8:	b928      	cbnz	r0, 8010ce6 <_dtoa_r+0x9be>
 8010cda:	4b87      	ldr	r3, [pc, #540]	; (8010ef8 <_dtoa_r+0xbd0>)
 8010cdc:	4602      	mov	r2, r0
 8010cde:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010ce2:	f7ff bb3b 	b.w	801035c <_dtoa_r+0x34>
 8010ce6:	693a      	ldr	r2, [r7, #16]
 8010ce8:	3202      	adds	r2, #2
 8010cea:	0092      	lsls	r2, r2, #2
 8010cec:	f107 010c 	add.w	r1, r7, #12
 8010cf0:	300c      	adds	r0, #12
 8010cf2:	f000 fcb1 	bl	8011658 <memcpy>
 8010cf6:	2201      	movs	r2, #1
 8010cf8:	4629      	mov	r1, r5
 8010cfa:	4620      	mov	r0, r4
 8010cfc:	f000 ff22 	bl	8011b44 <__lshift>
 8010d00:	9b01      	ldr	r3, [sp, #4]
 8010d02:	f103 0901 	add.w	r9, r3, #1
 8010d06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010d0a:	4413      	add	r3, r2
 8010d0c:	9305      	str	r3, [sp, #20]
 8010d0e:	f00a 0301 	and.w	r3, sl, #1
 8010d12:	46b8      	mov	r8, r7
 8010d14:	9304      	str	r3, [sp, #16]
 8010d16:	4607      	mov	r7, r0
 8010d18:	4631      	mov	r1, r6
 8010d1a:	ee18 0a10 	vmov	r0, s16
 8010d1e:	f7ff fa77 	bl	8010210 <quorem>
 8010d22:	4641      	mov	r1, r8
 8010d24:	9002      	str	r0, [sp, #8]
 8010d26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010d2a:	ee18 0a10 	vmov	r0, s16
 8010d2e:	f000 ff79 	bl	8011c24 <__mcmp>
 8010d32:	463a      	mov	r2, r7
 8010d34:	9003      	str	r0, [sp, #12]
 8010d36:	4631      	mov	r1, r6
 8010d38:	4620      	mov	r0, r4
 8010d3a:	f000 ff8f 	bl	8011c5c <__mdiff>
 8010d3e:	68c2      	ldr	r2, [r0, #12]
 8010d40:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8010d44:	4605      	mov	r5, r0
 8010d46:	bb02      	cbnz	r2, 8010d8a <_dtoa_r+0xa62>
 8010d48:	4601      	mov	r1, r0
 8010d4a:	ee18 0a10 	vmov	r0, s16
 8010d4e:	f000 ff69 	bl	8011c24 <__mcmp>
 8010d52:	4602      	mov	r2, r0
 8010d54:	4629      	mov	r1, r5
 8010d56:	4620      	mov	r0, r4
 8010d58:	9207      	str	r2, [sp, #28]
 8010d5a:	f000 fcd7 	bl	801170c <_Bfree>
 8010d5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010d62:	ea43 0102 	orr.w	r1, r3, r2
 8010d66:	9b04      	ldr	r3, [sp, #16]
 8010d68:	430b      	orrs	r3, r1
 8010d6a:	464d      	mov	r5, r9
 8010d6c:	d10f      	bne.n	8010d8e <_dtoa_r+0xa66>
 8010d6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010d72:	d02a      	beq.n	8010dca <_dtoa_r+0xaa2>
 8010d74:	9b03      	ldr	r3, [sp, #12]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	dd02      	ble.n	8010d80 <_dtoa_r+0xa58>
 8010d7a:	9b02      	ldr	r3, [sp, #8]
 8010d7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010d80:	f88b a000 	strb.w	sl, [fp]
 8010d84:	e775      	b.n	8010c72 <_dtoa_r+0x94a>
 8010d86:	4638      	mov	r0, r7
 8010d88:	e7ba      	b.n	8010d00 <_dtoa_r+0x9d8>
 8010d8a:	2201      	movs	r2, #1
 8010d8c:	e7e2      	b.n	8010d54 <_dtoa_r+0xa2c>
 8010d8e:	9b03      	ldr	r3, [sp, #12]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	db04      	blt.n	8010d9e <_dtoa_r+0xa76>
 8010d94:	9906      	ldr	r1, [sp, #24]
 8010d96:	430b      	orrs	r3, r1
 8010d98:	9904      	ldr	r1, [sp, #16]
 8010d9a:	430b      	orrs	r3, r1
 8010d9c:	d122      	bne.n	8010de4 <_dtoa_r+0xabc>
 8010d9e:	2a00      	cmp	r2, #0
 8010da0:	ddee      	ble.n	8010d80 <_dtoa_r+0xa58>
 8010da2:	ee18 1a10 	vmov	r1, s16
 8010da6:	2201      	movs	r2, #1
 8010da8:	4620      	mov	r0, r4
 8010daa:	f000 fecb 	bl	8011b44 <__lshift>
 8010dae:	4631      	mov	r1, r6
 8010db0:	ee08 0a10 	vmov	s16, r0
 8010db4:	f000 ff36 	bl	8011c24 <__mcmp>
 8010db8:	2800      	cmp	r0, #0
 8010dba:	dc03      	bgt.n	8010dc4 <_dtoa_r+0xa9c>
 8010dbc:	d1e0      	bne.n	8010d80 <_dtoa_r+0xa58>
 8010dbe:	f01a 0f01 	tst.w	sl, #1
 8010dc2:	d0dd      	beq.n	8010d80 <_dtoa_r+0xa58>
 8010dc4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010dc8:	d1d7      	bne.n	8010d7a <_dtoa_r+0xa52>
 8010dca:	2339      	movs	r3, #57	; 0x39
 8010dcc:	f88b 3000 	strb.w	r3, [fp]
 8010dd0:	462b      	mov	r3, r5
 8010dd2:	461d      	mov	r5, r3
 8010dd4:	3b01      	subs	r3, #1
 8010dd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010dda:	2a39      	cmp	r2, #57	; 0x39
 8010ddc:	d071      	beq.n	8010ec2 <_dtoa_r+0xb9a>
 8010dde:	3201      	adds	r2, #1
 8010de0:	701a      	strb	r2, [r3, #0]
 8010de2:	e746      	b.n	8010c72 <_dtoa_r+0x94a>
 8010de4:	2a00      	cmp	r2, #0
 8010de6:	dd07      	ble.n	8010df8 <_dtoa_r+0xad0>
 8010de8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010dec:	d0ed      	beq.n	8010dca <_dtoa_r+0xaa2>
 8010dee:	f10a 0301 	add.w	r3, sl, #1
 8010df2:	f88b 3000 	strb.w	r3, [fp]
 8010df6:	e73c      	b.n	8010c72 <_dtoa_r+0x94a>
 8010df8:	9b05      	ldr	r3, [sp, #20]
 8010dfa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010dfe:	4599      	cmp	r9, r3
 8010e00:	d047      	beq.n	8010e92 <_dtoa_r+0xb6a>
 8010e02:	ee18 1a10 	vmov	r1, s16
 8010e06:	2300      	movs	r3, #0
 8010e08:	220a      	movs	r2, #10
 8010e0a:	4620      	mov	r0, r4
 8010e0c:	f000 fca0 	bl	8011750 <__multadd>
 8010e10:	45b8      	cmp	r8, r7
 8010e12:	ee08 0a10 	vmov	s16, r0
 8010e16:	f04f 0300 	mov.w	r3, #0
 8010e1a:	f04f 020a 	mov.w	r2, #10
 8010e1e:	4641      	mov	r1, r8
 8010e20:	4620      	mov	r0, r4
 8010e22:	d106      	bne.n	8010e32 <_dtoa_r+0xb0a>
 8010e24:	f000 fc94 	bl	8011750 <__multadd>
 8010e28:	4680      	mov	r8, r0
 8010e2a:	4607      	mov	r7, r0
 8010e2c:	f109 0901 	add.w	r9, r9, #1
 8010e30:	e772      	b.n	8010d18 <_dtoa_r+0x9f0>
 8010e32:	f000 fc8d 	bl	8011750 <__multadd>
 8010e36:	4639      	mov	r1, r7
 8010e38:	4680      	mov	r8, r0
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	220a      	movs	r2, #10
 8010e3e:	4620      	mov	r0, r4
 8010e40:	f000 fc86 	bl	8011750 <__multadd>
 8010e44:	4607      	mov	r7, r0
 8010e46:	e7f1      	b.n	8010e2c <_dtoa_r+0xb04>
 8010e48:	9b03      	ldr	r3, [sp, #12]
 8010e4a:	9302      	str	r3, [sp, #8]
 8010e4c:	9d01      	ldr	r5, [sp, #4]
 8010e4e:	ee18 0a10 	vmov	r0, s16
 8010e52:	4631      	mov	r1, r6
 8010e54:	f7ff f9dc 	bl	8010210 <quorem>
 8010e58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010e5c:	9b01      	ldr	r3, [sp, #4]
 8010e5e:	f805 ab01 	strb.w	sl, [r5], #1
 8010e62:	1aea      	subs	r2, r5, r3
 8010e64:	9b02      	ldr	r3, [sp, #8]
 8010e66:	4293      	cmp	r3, r2
 8010e68:	dd09      	ble.n	8010e7e <_dtoa_r+0xb56>
 8010e6a:	ee18 1a10 	vmov	r1, s16
 8010e6e:	2300      	movs	r3, #0
 8010e70:	220a      	movs	r2, #10
 8010e72:	4620      	mov	r0, r4
 8010e74:	f000 fc6c 	bl	8011750 <__multadd>
 8010e78:	ee08 0a10 	vmov	s16, r0
 8010e7c:	e7e7      	b.n	8010e4e <_dtoa_r+0xb26>
 8010e7e:	9b02      	ldr	r3, [sp, #8]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	bfc8      	it	gt
 8010e84:	461d      	movgt	r5, r3
 8010e86:	9b01      	ldr	r3, [sp, #4]
 8010e88:	bfd8      	it	le
 8010e8a:	2501      	movle	r5, #1
 8010e8c:	441d      	add	r5, r3
 8010e8e:	f04f 0800 	mov.w	r8, #0
 8010e92:	ee18 1a10 	vmov	r1, s16
 8010e96:	2201      	movs	r2, #1
 8010e98:	4620      	mov	r0, r4
 8010e9a:	f000 fe53 	bl	8011b44 <__lshift>
 8010e9e:	4631      	mov	r1, r6
 8010ea0:	ee08 0a10 	vmov	s16, r0
 8010ea4:	f000 febe 	bl	8011c24 <__mcmp>
 8010ea8:	2800      	cmp	r0, #0
 8010eaa:	dc91      	bgt.n	8010dd0 <_dtoa_r+0xaa8>
 8010eac:	d102      	bne.n	8010eb4 <_dtoa_r+0xb8c>
 8010eae:	f01a 0f01 	tst.w	sl, #1
 8010eb2:	d18d      	bne.n	8010dd0 <_dtoa_r+0xaa8>
 8010eb4:	462b      	mov	r3, r5
 8010eb6:	461d      	mov	r5, r3
 8010eb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010ebc:	2a30      	cmp	r2, #48	; 0x30
 8010ebe:	d0fa      	beq.n	8010eb6 <_dtoa_r+0xb8e>
 8010ec0:	e6d7      	b.n	8010c72 <_dtoa_r+0x94a>
 8010ec2:	9a01      	ldr	r2, [sp, #4]
 8010ec4:	429a      	cmp	r2, r3
 8010ec6:	d184      	bne.n	8010dd2 <_dtoa_r+0xaaa>
 8010ec8:	9b00      	ldr	r3, [sp, #0]
 8010eca:	3301      	adds	r3, #1
 8010ecc:	9300      	str	r3, [sp, #0]
 8010ece:	2331      	movs	r3, #49	; 0x31
 8010ed0:	7013      	strb	r3, [r2, #0]
 8010ed2:	e6ce      	b.n	8010c72 <_dtoa_r+0x94a>
 8010ed4:	4b09      	ldr	r3, [pc, #36]	; (8010efc <_dtoa_r+0xbd4>)
 8010ed6:	f7ff ba95 	b.w	8010404 <_dtoa_r+0xdc>
 8010eda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	f47f aa6e 	bne.w	80103be <_dtoa_r+0x96>
 8010ee2:	4b07      	ldr	r3, [pc, #28]	; (8010f00 <_dtoa_r+0xbd8>)
 8010ee4:	f7ff ba8e 	b.w	8010404 <_dtoa_r+0xdc>
 8010ee8:	9b02      	ldr	r3, [sp, #8]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	dcae      	bgt.n	8010e4c <_dtoa_r+0xb24>
 8010eee:	9b06      	ldr	r3, [sp, #24]
 8010ef0:	2b02      	cmp	r3, #2
 8010ef2:	f73f aea8 	bgt.w	8010c46 <_dtoa_r+0x91e>
 8010ef6:	e7a9      	b.n	8010e4c <_dtoa_r+0xb24>
 8010ef8:	08013e5d 	.word	0x08013e5d
 8010efc:	08013bcc 	.word	0x08013bcc
 8010f00:	08013df5 	.word	0x08013df5

08010f04 <fiprintf>:
 8010f04:	b40e      	push	{r1, r2, r3}
 8010f06:	b503      	push	{r0, r1, lr}
 8010f08:	4601      	mov	r1, r0
 8010f0a:	ab03      	add	r3, sp, #12
 8010f0c:	4805      	ldr	r0, [pc, #20]	; (8010f24 <fiprintf+0x20>)
 8010f0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f12:	6800      	ldr	r0, [r0, #0]
 8010f14:	9301      	str	r3, [sp, #4]
 8010f16:	f001 fa15 	bl	8012344 <_vfiprintf_r>
 8010f1a:	b002      	add	sp, #8
 8010f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f20:	b003      	add	sp, #12
 8010f22:	4770      	bx	lr
 8010f24:	20001278 	.word	0x20001278

08010f28 <rshift>:
 8010f28:	6903      	ldr	r3, [r0, #16]
 8010f2a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010f2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010f32:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010f36:	f100 0414 	add.w	r4, r0, #20
 8010f3a:	dd45      	ble.n	8010fc8 <rshift+0xa0>
 8010f3c:	f011 011f 	ands.w	r1, r1, #31
 8010f40:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010f44:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010f48:	d10c      	bne.n	8010f64 <rshift+0x3c>
 8010f4a:	f100 0710 	add.w	r7, r0, #16
 8010f4e:	4629      	mov	r1, r5
 8010f50:	42b1      	cmp	r1, r6
 8010f52:	d334      	bcc.n	8010fbe <rshift+0x96>
 8010f54:	1a9b      	subs	r3, r3, r2
 8010f56:	009b      	lsls	r3, r3, #2
 8010f58:	1eea      	subs	r2, r5, #3
 8010f5a:	4296      	cmp	r6, r2
 8010f5c:	bf38      	it	cc
 8010f5e:	2300      	movcc	r3, #0
 8010f60:	4423      	add	r3, r4
 8010f62:	e015      	b.n	8010f90 <rshift+0x68>
 8010f64:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010f68:	f1c1 0820 	rsb	r8, r1, #32
 8010f6c:	40cf      	lsrs	r7, r1
 8010f6e:	f105 0e04 	add.w	lr, r5, #4
 8010f72:	46a1      	mov	r9, r4
 8010f74:	4576      	cmp	r6, lr
 8010f76:	46f4      	mov	ip, lr
 8010f78:	d815      	bhi.n	8010fa6 <rshift+0x7e>
 8010f7a:	1a9a      	subs	r2, r3, r2
 8010f7c:	0092      	lsls	r2, r2, #2
 8010f7e:	3a04      	subs	r2, #4
 8010f80:	3501      	adds	r5, #1
 8010f82:	42ae      	cmp	r6, r5
 8010f84:	bf38      	it	cc
 8010f86:	2200      	movcc	r2, #0
 8010f88:	18a3      	adds	r3, r4, r2
 8010f8a:	50a7      	str	r7, [r4, r2]
 8010f8c:	b107      	cbz	r7, 8010f90 <rshift+0x68>
 8010f8e:	3304      	adds	r3, #4
 8010f90:	1b1a      	subs	r2, r3, r4
 8010f92:	42a3      	cmp	r3, r4
 8010f94:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010f98:	bf08      	it	eq
 8010f9a:	2300      	moveq	r3, #0
 8010f9c:	6102      	str	r2, [r0, #16]
 8010f9e:	bf08      	it	eq
 8010fa0:	6143      	streq	r3, [r0, #20]
 8010fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fa6:	f8dc c000 	ldr.w	ip, [ip]
 8010faa:	fa0c fc08 	lsl.w	ip, ip, r8
 8010fae:	ea4c 0707 	orr.w	r7, ip, r7
 8010fb2:	f849 7b04 	str.w	r7, [r9], #4
 8010fb6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010fba:	40cf      	lsrs	r7, r1
 8010fbc:	e7da      	b.n	8010f74 <rshift+0x4c>
 8010fbe:	f851 cb04 	ldr.w	ip, [r1], #4
 8010fc2:	f847 cf04 	str.w	ip, [r7, #4]!
 8010fc6:	e7c3      	b.n	8010f50 <rshift+0x28>
 8010fc8:	4623      	mov	r3, r4
 8010fca:	e7e1      	b.n	8010f90 <rshift+0x68>

08010fcc <__hexdig_fun>:
 8010fcc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010fd0:	2b09      	cmp	r3, #9
 8010fd2:	d802      	bhi.n	8010fda <__hexdig_fun+0xe>
 8010fd4:	3820      	subs	r0, #32
 8010fd6:	b2c0      	uxtb	r0, r0
 8010fd8:	4770      	bx	lr
 8010fda:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010fde:	2b05      	cmp	r3, #5
 8010fe0:	d801      	bhi.n	8010fe6 <__hexdig_fun+0x1a>
 8010fe2:	3847      	subs	r0, #71	; 0x47
 8010fe4:	e7f7      	b.n	8010fd6 <__hexdig_fun+0xa>
 8010fe6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010fea:	2b05      	cmp	r3, #5
 8010fec:	d801      	bhi.n	8010ff2 <__hexdig_fun+0x26>
 8010fee:	3827      	subs	r0, #39	; 0x27
 8010ff0:	e7f1      	b.n	8010fd6 <__hexdig_fun+0xa>
 8010ff2:	2000      	movs	r0, #0
 8010ff4:	4770      	bx	lr
	...

08010ff8 <__gethex>:
 8010ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ffc:	ed2d 8b02 	vpush	{d8}
 8011000:	b089      	sub	sp, #36	; 0x24
 8011002:	ee08 0a10 	vmov	s16, r0
 8011006:	9304      	str	r3, [sp, #16]
 8011008:	4bb4      	ldr	r3, [pc, #720]	; (80112dc <__gethex+0x2e4>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	9301      	str	r3, [sp, #4]
 801100e:	4618      	mov	r0, r3
 8011010:	468b      	mov	fp, r1
 8011012:	4690      	mov	r8, r2
 8011014:	f7ef f904 	bl	8000220 <strlen>
 8011018:	9b01      	ldr	r3, [sp, #4]
 801101a:	f8db 2000 	ldr.w	r2, [fp]
 801101e:	4403      	add	r3, r0
 8011020:	4682      	mov	sl, r0
 8011022:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011026:	9305      	str	r3, [sp, #20]
 8011028:	1c93      	adds	r3, r2, #2
 801102a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801102e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011032:	32fe      	adds	r2, #254	; 0xfe
 8011034:	18d1      	adds	r1, r2, r3
 8011036:	461f      	mov	r7, r3
 8011038:	f813 0b01 	ldrb.w	r0, [r3], #1
 801103c:	9100      	str	r1, [sp, #0]
 801103e:	2830      	cmp	r0, #48	; 0x30
 8011040:	d0f8      	beq.n	8011034 <__gethex+0x3c>
 8011042:	f7ff ffc3 	bl	8010fcc <__hexdig_fun>
 8011046:	4604      	mov	r4, r0
 8011048:	2800      	cmp	r0, #0
 801104a:	d13a      	bne.n	80110c2 <__gethex+0xca>
 801104c:	9901      	ldr	r1, [sp, #4]
 801104e:	4652      	mov	r2, sl
 8011050:	4638      	mov	r0, r7
 8011052:	f001 fab1 	bl	80125b8 <strncmp>
 8011056:	4605      	mov	r5, r0
 8011058:	2800      	cmp	r0, #0
 801105a:	d168      	bne.n	801112e <__gethex+0x136>
 801105c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011060:	eb07 060a 	add.w	r6, r7, sl
 8011064:	f7ff ffb2 	bl	8010fcc <__hexdig_fun>
 8011068:	2800      	cmp	r0, #0
 801106a:	d062      	beq.n	8011132 <__gethex+0x13a>
 801106c:	4633      	mov	r3, r6
 801106e:	7818      	ldrb	r0, [r3, #0]
 8011070:	2830      	cmp	r0, #48	; 0x30
 8011072:	461f      	mov	r7, r3
 8011074:	f103 0301 	add.w	r3, r3, #1
 8011078:	d0f9      	beq.n	801106e <__gethex+0x76>
 801107a:	f7ff ffa7 	bl	8010fcc <__hexdig_fun>
 801107e:	2301      	movs	r3, #1
 8011080:	fab0 f480 	clz	r4, r0
 8011084:	0964      	lsrs	r4, r4, #5
 8011086:	4635      	mov	r5, r6
 8011088:	9300      	str	r3, [sp, #0]
 801108a:	463a      	mov	r2, r7
 801108c:	4616      	mov	r6, r2
 801108e:	3201      	adds	r2, #1
 8011090:	7830      	ldrb	r0, [r6, #0]
 8011092:	f7ff ff9b 	bl	8010fcc <__hexdig_fun>
 8011096:	2800      	cmp	r0, #0
 8011098:	d1f8      	bne.n	801108c <__gethex+0x94>
 801109a:	9901      	ldr	r1, [sp, #4]
 801109c:	4652      	mov	r2, sl
 801109e:	4630      	mov	r0, r6
 80110a0:	f001 fa8a 	bl	80125b8 <strncmp>
 80110a4:	b980      	cbnz	r0, 80110c8 <__gethex+0xd0>
 80110a6:	b94d      	cbnz	r5, 80110bc <__gethex+0xc4>
 80110a8:	eb06 050a 	add.w	r5, r6, sl
 80110ac:	462a      	mov	r2, r5
 80110ae:	4616      	mov	r6, r2
 80110b0:	3201      	adds	r2, #1
 80110b2:	7830      	ldrb	r0, [r6, #0]
 80110b4:	f7ff ff8a 	bl	8010fcc <__hexdig_fun>
 80110b8:	2800      	cmp	r0, #0
 80110ba:	d1f8      	bne.n	80110ae <__gethex+0xb6>
 80110bc:	1bad      	subs	r5, r5, r6
 80110be:	00ad      	lsls	r5, r5, #2
 80110c0:	e004      	b.n	80110cc <__gethex+0xd4>
 80110c2:	2400      	movs	r4, #0
 80110c4:	4625      	mov	r5, r4
 80110c6:	e7e0      	b.n	801108a <__gethex+0x92>
 80110c8:	2d00      	cmp	r5, #0
 80110ca:	d1f7      	bne.n	80110bc <__gethex+0xc4>
 80110cc:	7833      	ldrb	r3, [r6, #0]
 80110ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80110d2:	2b50      	cmp	r3, #80	; 0x50
 80110d4:	d13b      	bne.n	801114e <__gethex+0x156>
 80110d6:	7873      	ldrb	r3, [r6, #1]
 80110d8:	2b2b      	cmp	r3, #43	; 0x2b
 80110da:	d02c      	beq.n	8011136 <__gethex+0x13e>
 80110dc:	2b2d      	cmp	r3, #45	; 0x2d
 80110de:	d02e      	beq.n	801113e <__gethex+0x146>
 80110e0:	1c71      	adds	r1, r6, #1
 80110e2:	f04f 0900 	mov.w	r9, #0
 80110e6:	7808      	ldrb	r0, [r1, #0]
 80110e8:	f7ff ff70 	bl	8010fcc <__hexdig_fun>
 80110ec:	1e43      	subs	r3, r0, #1
 80110ee:	b2db      	uxtb	r3, r3
 80110f0:	2b18      	cmp	r3, #24
 80110f2:	d82c      	bhi.n	801114e <__gethex+0x156>
 80110f4:	f1a0 0210 	sub.w	r2, r0, #16
 80110f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80110fc:	f7ff ff66 	bl	8010fcc <__hexdig_fun>
 8011100:	1e43      	subs	r3, r0, #1
 8011102:	b2db      	uxtb	r3, r3
 8011104:	2b18      	cmp	r3, #24
 8011106:	d91d      	bls.n	8011144 <__gethex+0x14c>
 8011108:	f1b9 0f00 	cmp.w	r9, #0
 801110c:	d000      	beq.n	8011110 <__gethex+0x118>
 801110e:	4252      	negs	r2, r2
 8011110:	4415      	add	r5, r2
 8011112:	f8cb 1000 	str.w	r1, [fp]
 8011116:	b1e4      	cbz	r4, 8011152 <__gethex+0x15a>
 8011118:	9b00      	ldr	r3, [sp, #0]
 801111a:	2b00      	cmp	r3, #0
 801111c:	bf14      	ite	ne
 801111e:	2700      	movne	r7, #0
 8011120:	2706      	moveq	r7, #6
 8011122:	4638      	mov	r0, r7
 8011124:	b009      	add	sp, #36	; 0x24
 8011126:	ecbd 8b02 	vpop	{d8}
 801112a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801112e:	463e      	mov	r6, r7
 8011130:	4625      	mov	r5, r4
 8011132:	2401      	movs	r4, #1
 8011134:	e7ca      	b.n	80110cc <__gethex+0xd4>
 8011136:	f04f 0900 	mov.w	r9, #0
 801113a:	1cb1      	adds	r1, r6, #2
 801113c:	e7d3      	b.n	80110e6 <__gethex+0xee>
 801113e:	f04f 0901 	mov.w	r9, #1
 8011142:	e7fa      	b.n	801113a <__gethex+0x142>
 8011144:	230a      	movs	r3, #10
 8011146:	fb03 0202 	mla	r2, r3, r2, r0
 801114a:	3a10      	subs	r2, #16
 801114c:	e7d4      	b.n	80110f8 <__gethex+0x100>
 801114e:	4631      	mov	r1, r6
 8011150:	e7df      	b.n	8011112 <__gethex+0x11a>
 8011152:	1bf3      	subs	r3, r6, r7
 8011154:	3b01      	subs	r3, #1
 8011156:	4621      	mov	r1, r4
 8011158:	2b07      	cmp	r3, #7
 801115a:	dc0b      	bgt.n	8011174 <__gethex+0x17c>
 801115c:	ee18 0a10 	vmov	r0, s16
 8011160:	f000 fa94 	bl	801168c <_Balloc>
 8011164:	4604      	mov	r4, r0
 8011166:	b940      	cbnz	r0, 801117a <__gethex+0x182>
 8011168:	4b5d      	ldr	r3, [pc, #372]	; (80112e0 <__gethex+0x2e8>)
 801116a:	4602      	mov	r2, r0
 801116c:	21de      	movs	r1, #222	; 0xde
 801116e:	485d      	ldr	r0, [pc, #372]	; (80112e4 <__gethex+0x2ec>)
 8011170:	f7ff f830 	bl	80101d4 <__assert_func>
 8011174:	3101      	adds	r1, #1
 8011176:	105b      	asrs	r3, r3, #1
 8011178:	e7ee      	b.n	8011158 <__gethex+0x160>
 801117a:	f100 0914 	add.w	r9, r0, #20
 801117e:	f04f 0b00 	mov.w	fp, #0
 8011182:	f1ca 0301 	rsb	r3, sl, #1
 8011186:	f8cd 9008 	str.w	r9, [sp, #8]
 801118a:	f8cd b000 	str.w	fp, [sp]
 801118e:	9306      	str	r3, [sp, #24]
 8011190:	42b7      	cmp	r7, r6
 8011192:	d340      	bcc.n	8011216 <__gethex+0x21e>
 8011194:	9802      	ldr	r0, [sp, #8]
 8011196:	9b00      	ldr	r3, [sp, #0]
 8011198:	f840 3b04 	str.w	r3, [r0], #4
 801119c:	eba0 0009 	sub.w	r0, r0, r9
 80111a0:	1080      	asrs	r0, r0, #2
 80111a2:	0146      	lsls	r6, r0, #5
 80111a4:	6120      	str	r0, [r4, #16]
 80111a6:	4618      	mov	r0, r3
 80111a8:	f000 fb62 	bl	8011870 <__hi0bits>
 80111ac:	1a30      	subs	r0, r6, r0
 80111ae:	f8d8 6000 	ldr.w	r6, [r8]
 80111b2:	42b0      	cmp	r0, r6
 80111b4:	dd63      	ble.n	801127e <__gethex+0x286>
 80111b6:	1b87      	subs	r7, r0, r6
 80111b8:	4639      	mov	r1, r7
 80111ba:	4620      	mov	r0, r4
 80111bc:	f000 ff06 	bl	8011fcc <__any_on>
 80111c0:	4682      	mov	sl, r0
 80111c2:	b1a8      	cbz	r0, 80111f0 <__gethex+0x1f8>
 80111c4:	1e7b      	subs	r3, r7, #1
 80111c6:	1159      	asrs	r1, r3, #5
 80111c8:	f003 021f 	and.w	r2, r3, #31
 80111cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80111d0:	f04f 0a01 	mov.w	sl, #1
 80111d4:	fa0a f202 	lsl.w	r2, sl, r2
 80111d8:	420a      	tst	r2, r1
 80111da:	d009      	beq.n	80111f0 <__gethex+0x1f8>
 80111dc:	4553      	cmp	r3, sl
 80111de:	dd05      	ble.n	80111ec <__gethex+0x1f4>
 80111e0:	1eb9      	subs	r1, r7, #2
 80111e2:	4620      	mov	r0, r4
 80111e4:	f000 fef2 	bl	8011fcc <__any_on>
 80111e8:	2800      	cmp	r0, #0
 80111ea:	d145      	bne.n	8011278 <__gethex+0x280>
 80111ec:	f04f 0a02 	mov.w	sl, #2
 80111f0:	4639      	mov	r1, r7
 80111f2:	4620      	mov	r0, r4
 80111f4:	f7ff fe98 	bl	8010f28 <rshift>
 80111f8:	443d      	add	r5, r7
 80111fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80111fe:	42ab      	cmp	r3, r5
 8011200:	da4c      	bge.n	801129c <__gethex+0x2a4>
 8011202:	ee18 0a10 	vmov	r0, s16
 8011206:	4621      	mov	r1, r4
 8011208:	f000 fa80 	bl	801170c <_Bfree>
 801120c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801120e:	2300      	movs	r3, #0
 8011210:	6013      	str	r3, [r2, #0]
 8011212:	27a3      	movs	r7, #163	; 0xa3
 8011214:	e785      	b.n	8011122 <__gethex+0x12a>
 8011216:	1e73      	subs	r3, r6, #1
 8011218:	9a05      	ldr	r2, [sp, #20]
 801121a:	9303      	str	r3, [sp, #12]
 801121c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011220:	4293      	cmp	r3, r2
 8011222:	d019      	beq.n	8011258 <__gethex+0x260>
 8011224:	f1bb 0f20 	cmp.w	fp, #32
 8011228:	d107      	bne.n	801123a <__gethex+0x242>
 801122a:	9b02      	ldr	r3, [sp, #8]
 801122c:	9a00      	ldr	r2, [sp, #0]
 801122e:	f843 2b04 	str.w	r2, [r3], #4
 8011232:	9302      	str	r3, [sp, #8]
 8011234:	2300      	movs	r3, #0
 8011236:	9300      	str	r3, [sp, #0]
 8011238:	469b      	mov	fp, r3
 801123a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801123e:	f7ff fec5 	bl	8010fcc <__hexdig_fun>
 8011242:	9b00      	ldr	r3, [sp, #0]
 8011244:	f000 000f 	and.w	r0, r0, #15
 8011248:	fa00 f00b 	lsl.w	r0, r0, fp
 801124c:	4303      	orrs	r3, r0
 801124e:	9300      	str	r3, [sp, #0]
 8011250:	f10b 0b04 	add.w	fp, fp, #4
 8011254:	9b03      	ldr	r3, [sp, #12]
 8011256:	e00d      	b.n	8011274 <__gethex+0x27c>
 8011258:	9b03      	ldr	r3, [sp, #12]
 801125a:	9a06      	ldr	r2, [sp, #24]
 801125c:	4413      	add	r3, r2
 801125e:	42bb      	cmp	r3, r7
 8011260:	d3e0      	bcc.n	8011224 <__gethex+0x22c>
 8011262:	4618      	mov	r0, r3
 8011264:	9901      	ldr	r1, [sp, #4]
 8011266:	9307      	str	r3, [sp, #28]
 8011268:	4652      	mov	r2, sl
 801126a:	f001 f9a5 	bl	80125b8 <strncmp>
 801126e:	9b07      	ldr	r3, [sp, #28]
 8011270:	2800      	cmp	r0, #0
 8011272:	d1d7      	bne.n	8011224 <__gethex+0x22c>
 8011274:	461e      	mov	r6, r3
 8011276:	e78b      	b.n	8011190 <__gethex+0x198>
 8011278:	f04f 0a03 	mov.w	sl, #3
 801127c:	e7b8      	b.n	80111f0 <__gethex+0x1f8>
 801127e:	da0a      	bge.n	8011296 <__gethex+0x29e>
 8011280:	1a37      	subs	r7, r6, r0
 8011282:	4621      	mov	r1, r4
 8011284:	ee18 0a10 	vmov	r0, s16
 8011288:	463a      	mov	r2, r7
 801128a:	f000 fc5b 	bl	8011b44 <__lshift>
 801128e:	1bed      	subs	r5, r5, r7
 8011290:	4604      	mov	r4, r0
 8011292:	f100 0914 	add.w	r9, r0, #20
 8011296:	f04f 0a00 	mov.w	sl, #0
 801129a:	e7ae      	b.n	80111fa <__gethex+0x202>
 801129c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80112a0:	42a8      	cmp	r0, r5
 80112a2:	dd72      	ble.n	801138a <__gethex+0x392>
 80112a4:	1b45      	subs	r5, r0, r5
 80112a6:	42ae      	cmp	r6, r5
 80112a8:	dc36      	bgt.n	8011318 <__gethex+0x320>
 80112aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80112ae:	2b02      	cmp	r3, #2
 80112b0:	d02a      	beq.n	8011308 <__gethex+0x310>
 80112b2:	2b03      	cmp	r3, #3
 80112b4:	d02c      	beq.n	8011310 <__gethex+0x318>
 80112b6:	2b01      	cmp	r3, #1
 80112b8:	d11c      	bne.n	80112f4 <__gethex+0x2fc>
 80112ba:	42ae      	cmp	r6, r5
 80112bc:	d11a      	bne.n	80112f4 <__gethex+0x2fc>
 80112be:	2e01      	cmp	r6, #1
 80112c0:	d112      	bne.n	80112e8 <__gethex+0x2f0>
 80112c2:	9a04      	ldr	r2, [sp, #16]
 80112c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80112c8:	6013      	str	r3, [r2, #0]
 80112ca:	2301      	movs	r3, #1
 80112cc:	6123      	str	r3, [r4, #16]
 80112ce:	f8c9 3000 	str.w	r3, [r9]
 80112d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80112d4:	2762      	movs	r7, #98	; 0x62
 80112d6:	601c      	str	r4, [r3, #0]
 80112d8:	e723      	b.n	8011122 <__gethex+0x12a>
 80112da:	bf00      	nop
 80112dc:	08013ed4 	.word	0x08013ed4
 80112e0:	08013e5d 	.word	0x08013e5d
 80112e4:	08013e6e 	.word	0x08013e6e
 80112e8:	1e71      	subs	r1, r6, #1
 80112ea:	4620      	mov	r0, r4
 80112ec:	f000 fe6e 	bl	8011fcc <__any_on>
 80112f0:	2800      	cmp	r0, #0
 80112f2:	d1e6      	bne.n	80112c2 <__gethex+0x2ca>
 80112f4:	ee18 0a10 	vmov	r0, s16
 80112f8:	4621      	mov	r1, r4
 80112fa:	f000 fa07 	bl	801170c <_Bfree>
 80112fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011300:	2300      	movs	r3, #0
 8011302:	6013      	str	r3, [r2, #0]
 8011304:	2750      	movs	r7, #80	; 0x50
 8011306:	e70c      	b.n	8011122 <__gethex+0x12a>
 8011308:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801130a:	2b00      	cmp	r3, #0
 801130c:	d1f2      	bne.n	80112f4 <__gethex+0x2fc>
 801130e:	e7d8      	b.n	80112c2 <__gethex+0x2ca>
 8011310:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011312:	2b00      	cmp	r3, #0
 8011314:	d1d5      	bne.n	80112c2 <__gethex+0x2ca>
 8011316:	e7ed      	b.n	80112f4 <__gethex+0x2fc>
 8011318:	1e6f      	subs	r7, r5, #1
 801131a:	f1ba 0f00 	cmp.w	sl, #0
 801131e:	d131      	bne.n	8011384 <__gethex+0x38c>
 8011320:	b127      	cbz	r7, 801132c <__gethex+0x334>
 8011322:	4639      	mov	r1, r7
 8011324:	4620      	mov	r0, r4
 8011326:	f000 fe51 	bl	8011fcc <__any_on>
 801132a:	4682      	mov	sl, r0
 801132c:	117b      	asrs	r3, r7, #5
 801132e:	2101      	movs	r1, #1
 8011330:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011334:	f007 071f 	and.w	r7, r7, #31
 8011338:	fa01 f707 	lsl.w	r7, r1, r7
 801133c:	421f      	tst	r7, r3
 801133e:	4629      	mov	r1, r5
 8011340:	4620      	mov	r0, r4
 8011342:	bf18      	it	ne
 8011344:	f04a 0a02 	orrne.w	sl, sl, #2
 8011348:	1b76      	subs	r6, r6, r5
 801134a:	f7ff fded 	bl	8010f28 <rshift>
 801134e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011352:	2702      	movs	r7, #2
 8011354:	f1ba 0f00 	cmp.w	sl, #0
 8011358:	d048      	beq.n	80113ec <__gethex+0x3f4>
 801135a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801135e:	2b02      	cmp	r3, #2
 8011360:	d015      	beq.n	801138e <__gethex+0x396>
 8011362:	2b03      	cmp	r3, #3
 8011364:	d017      	beq.n	8011396 <__gethex+0x39e>
 8011366:	2b01      	cmp	r3, #1
 8011368:	d109      	bne.n	801137e <__gethex+0x386>
 801136a:	f01a 0f02 	tst.w	sl, #2
 801136e:	d006      	beq.n	801137e <__gethex+0x386>
 8011370:	f8d9 0000 	ldr.w	r0, [r9]
 8011374:	ea4a 0a00 	orr.w	sl, sl, r0
 8011378:	f01a 0f01 	tst.w	sl, #1
 801137c:	d10e      	bne.n	801139c <__gethex+0x3a4>
 801137e:	f047 0710 	orr.w	r7, r7, #16
 8011382:	e033      	b.n	80113ec <__gethex+0x3f4>
 8011384:	f04f 0a01 	mov.w	sl, #1
 8011388:	e7d0      	b.n	801132c <__gethex+0x334>
 801138a:	2701      	movs	r7, #1
 801138c:	e7e2      	b.n	8011354 <__gethex+0x35c>
 801138e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011390:	f1c3 0301 	rsb	r3, r3, #1
 8011394:	9315      	str	r3, [sp, #84]	; 0x54
 8011396:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011398:	2b00      	cmp	r3, #0
 801139a:	d0f0      	beq.n	801137e <__gethex+0x386>
 801139c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80113a0:	f104 0314 	add.w	r3, r4, #20
 80113a4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80113a8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80113ac:	f04f 0c00 	mov.w	ip, #0
 80113b0:	4618      	mov	r0, r3
 80113b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80113b6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80113ba:	d01c      	beq.n	80113f6 <__gethex+0x3fe>
 80113bc:	3201      	adds	r2, #1
 80113be:	6002      	str	r2, [r0, #0]
 80113c0:	2f02      	cmp	r7, #2
 80113c2:	f104 0314 	add.w	r3, r4, #20
 80113c6:	d13f      	bne.n	8011448 <__gethex+0x450>
 80113c8:	f8d8 2000 	ldr.w	r2, [r8]
 80113cc:	3a01      	subs	r2, #1
 80113ce:	42b2      	cmp	r2, r6
 80113d0:	d10a      	bne.n	80113e8 <__gethex+0x3f0>
 80113d2:	1171      	asrs	r1, r6, #5
 80113d4:	2201      	movs	r2, #1
 80113d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80113da:	f006 061f 	and.w	r6, r6, #31
 80113de:	fa02 f606 	lsl.w	r6, r2, r6
 80113e2:	421e      	tst	r6, r3
 80113e4:	bf18      	it	ne
 80113e6:	4617      	movne	r7, r2
 80113e8:	f047 0720 	orr.w	r7, r7, #32
 80113ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80113ee:	601c      	str	r4, [r3, #0]
 80113f0:	9b04      	ldr	r3, [sp, #16]
 80113f2:	601d      	str	r5, [r3, #0]
 80113f4:	e695      	b.n	8011122 <__gethex+0x12a>
 80113f6:	4299      	cmp	r1, r3
 80113f8:	f843 cc04 	str.w	ip, [r3, #-4]
 80113fc:	d8d8      	bhi.n	80113b0 <__gethex+0x3b8>
 80113fe:	68a3      	ldr	r3, [r4, #8]
 8011400:	459b      	cmp	fp, r3
 8011402:	db19      	blt.n	8011438 <__gethex+0x440>
 8011404:	6861      	ldr	r1, [r4, #4]
 8011406:	ee18 0a10 	vmov	r0, s16
 801140a:	3101      	adds	r1, #1
 801140c:	f000 f93e 	bl	801168c <_Balloc>
 8011410:	4681      	mov	r9, r0
 8011412:	b918      	cbnz	r0, 801141c <__gethex+0x424>
 8011414:	4b1a      	ldr	r3, [pc, #104]	; (8011480 <__gethex+0x488>)
 8011416:	4602      	mov	r2, r0
 8011418:	2184      	movs	r1, #132	; 0x84
 801141a:	e6a8      	b.n	801116e <__gethex+0x176>
 801141c:	6922      	ldr	r2, [r4, #16]
 801141e:	3202      	adds	r2, #2
 8011420:	f104 010c 	add.w	r1, r4, #12
 8011424:	0092      	lsls	r2, r2, #2
 8011426:	300c      	adds	r0, #12
 8011428:	f000 f916 	bl	8011658 <memcpy>
 801142c:	4621      	mov	r1, r4
 801142e:	ee18 0a10 	vmov	r0, s16
 8011432:	f000 f96b 	bl	801170c <_Bfree>
 8011436:	464c      	mov	r4, r9
 8011438:	6923      	ldr	r3, [r4, #16]
 801143a:	1c5a      	adds	r2, r3, #1
 801143c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011440:	6122      	str	r2, [r4, #16]
 8011442:	2201      	movs	r2, #1
 8011444:	615a      	str	r2, [r3, #20]
 8011446:	e7bb      	b.n	80113c0 <__gethex+0x3c8>
 8011448:	6922      	ldr	r2, [r4, #16]
 801144a:	455a      	cmp	r2, fp
 801144c:	dd0b      	ble.n	8011466 <__gethex+0x46e>
 801144e:	2101      	movs	r1, #1
 8011450:	4620      	mov	r0, r4
 8011452:	f7ff fd69 	bl	8010f28 <rshift>
 8011456:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801145a:	3501      	adds	r5, #1
 801145c:	42ab      	cmp	r3, r5
 801145e:	f6ff aed0 	blt.w	8011202 <__gethex+0x20a>
 8011462:	2701      	movs	r7, #1
 8011464:	e7c0      	b.n	80113e8 <__gethex+0x3f0>
 8011466:	f016 061f 	ands.w	r6, r6, #31
 801146a:	d0fa      	beq.n	8011462 <__gethex+0x46a>
 801146c:	4453      	add	r3, sl
 801146e:	f1c6 0620 	rsb	r6, r6, #32
 8011472:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011476:	f000 f9fb 	bl	8011870 <__hi0bits>
 801147a:	42b0      	cmp	r0, r6
 801147c:	dbe7      	blt.n	801144e <__gethex+0x456>
 801147e:	e7f0      	b.n	8011462 <__gethex+0x46a>
 8011480:	08013e5d 	.word	0x08013e5d

08011484 <L_shift>:
 8011484:	f1c2 0208 	rsb	r2, r2, #8
 8011488:	0092      	lsls	r2, r2, #2
 801148a:	b570      	push	{r4, r5, r6, lr}
 801148c:	f1c2 0620 	rsb	r6, r2, #32
 8011490:	6843      	ldr	r3, [r0, #4]
 8011492:	6804      	ldr	r4, [r0, #0]
 8011494:	fa03 f506 	lsl.w	r5, r3, r6
 8011498:	432c      	orrs	r4, r5
 801149a:	40d3      	lsrs	r3, r2
 801149c:	6004      	str	r4, [r0, #0]
 801149e:	f840 3f04 	str.w	r3, [r0, #4]!
 80114a2:	4288      	cmp	r0, r1
 80114a4:	d3f4      	bcc.n	8011490 <L_shift+0xc>
 80114a6:	bd70      	pop	{r4, r5, r6, pc}

080114a8 <__match>:
 80114a8:	b530      	push	{r4, r5, lr}
 80114aa:	6803      	ldr	r3, [r0, #0]
 80114ac:	3301      	adds	r3, #1
 80114ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80114b2:	b914      	cbnz	r4, 80114ba <__match+0x12>
 80114b4:	6003      	str	r3, [r0, #0]
 80114b6:	2001      	movs	r0, #1
 80114b8:	bd30      	pop	{r4, r5, pc}
 80114ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80114be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80114c2:	2d19      	cmp	r5, #25
 80114c4:	bf98      	it	ls
 80114c6:	3220      	addls	r2, #32
 80114c8:	42a2      	cmp	r2, r4
 80114ca:	d0f0      	beq.n	80114ae <__match+0x6>
 80114cc:	2000      	movs	r0, #0
 80114ce:	e7f3      	b.n	80114b8 <__match+0x10>

080114d0 <__hexnan>:
 80114d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114d4:	680b      	ldr	r3, [r1, #0]
 80114d6:	115e      	asrs	r6, r3, #5
 80114d8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80114dc:	f013 031f 	ands.w	r3, r3, #31
 80114e0:	b087      	sub	sp, #28
 80114e2:	bf18      	it	ne
 80114e4:	3604      	addne	r6, #4
 80114e6:	2500      	movs	r5, #0
 80114e8:	1f37      	subs	r7, r6, #4
 80114ea:	4690      	mov	r8, r2
 80114ec:	6802      	ldr	r2, [r0, #0]
 80114ee:	9301      	str	r3, [sp, #4]
 80114f0:	4682      	mov	sl, r0
 80114f2:	f846 5c04 	str.w	r5, [r6, #-4]
 80114f6:	46b9      	mov	r9, r7
 80114f8:	463c      	mov	r4, r7
 80114fa:	9502      	str	r5, [sp, #8]
 80114fc:	46ab      	mov	fp, r5
 80114fe:	7851      	ldrb	r1, [r2, #1]
 8011500:	1c53      	adds	r3, r2, #1
 8011502:	9303      	str	r3, [sp, #12]
 8011504:	b341      	cbz	r1, 8011558 <__hexnan+0x88>
 8011506:	4608      	mov	r0, r1
 8011508:	9205      	str	r2, [sp, #20]
 801150a:	9104      	str	r1, [sp, #16]
 801150c:	f7ff fd5e 	bl	8010fcc <__hexdig_fun>
 8011510:	2800      	cmp	r0, #0
 8011512:	d14f      	bne.n	80115b4 <__hexnan+0xe4>
 8011514:	9904      	ldr	r1, [sp, #16]
 8011516:	9a05      	ldr	r2, [sp, #20]
 8011518:	2920      	cmp	r1, #32
 801151a:	d818      	bhi.n	801154e <__hexnan+0x7e>
 801151c:	9b02      	ldr	r3, [sp, #8]
 801151e:	459b      	cmp	fp, r3
 8011520:	dd13      	ble.n	801154a <__hexnan+0x7a>
 8011522:	454c      	cmp	r4, r9
 8011524:	d206      	bcs.n	8011534 <__hexnan+0x64>
 8011526:	2d07      	cmp	r5, #7
 8011528:	dc04      	bgt.n	8011534 <__hexnan+0x64>
 801152a:	462a      	mov	r2, r5
 801152c:	4649      	mov	r1, r9
 801152e:	4620      	mov	r0, r4
 8011530:	f7ff ffa8 	bl	8011484 <L_shift>
 8011534:	4544      	cmp	r4, r8
 8011536:	d950      	bls.n	80115da <__hexnan+0x10a>
 8011538:	2300      	movs	r3, #0
 801153a:	f1a4 0904 	sub.w	r9, r4, #4
 801153e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011542:	f8cd b008 	str.w	fp, [sp, #8]
 8011546:	464c      	mov	r4, r9
 8011548:	461d      	mov	r5, r3
 801154a:	9a03      	ldr	r2, [sp, #12]
 801154c:	e7d7      	b.n	80114fe <__hexnan+0x2e>
 801154e:	2929      	cmp	r1, #41	; 0x29
 8011550:	d156      	bne.n	8011600 <__hexnan+0x130>
 8011552:	3202      	adds	r2, #2
 8011554:	f8ca 2000 	str.w	r2, [sl]
 8011558:	f1bb 0f00 	cmp.w	fp, #0
 801155c:	d050      	beq.n	8011600 <__hexnan+0x130>
 801155e:	454c      	cmp	r4, r9
 8011560:	d206      	bcs.n	8011570 <__hexnan+0xa0>
 8011562:	2d07      	cmp	r5, #7
 8011564:	dc04      	bgt.n	8011570 <__hexnan+0xa0>
 8011566:	462a      	mov	r2, r5
 8011568:	4649      	mov	r1, r9
 801156a:	4620      	mov	r0, r4
 801156c:	f7ff ff8a 	bl	8011484 <L_shift>
 8011570:	4544      	cmp	r4, r8
 8011572:	d934      	bls.n	80115de <__hexnan+0x10e>
 8011574:	f1a8 0204 	sub.w	r2, r8, #4
 8011578:	4623      	mov	r3, r4
 801157a:	f853 1b04 	ldr.w	r1, [r3], #4
 801157e:	f842 1f04 	str.w	r1, [r2, #4]!
 8011582:	429f      	cmp	r7, r3
 8011584:	d2f9      	bcs.n	801157a <__hexnan+0xaa>
 8011586:	1b3b      	subs	r3, r7, r4
 8011588:	f023 0303 	bic.w	r3, r3, #3
 801158c:	3304      	adds	r3, #4
 801158e:	3401      	adds	r4, #1
 8011590:	3e03      	subs	r6, #3
 8011592:	42b4      	cmp	r4, r6
 8011594:	bf88      	it	hi
 8011596:	2304      	movhi	r3, #4
 8011598:	4443      	add	r3, r8
 801159a:	2200      	movs	r2, #0
 801159c:	f843 2b04 	str.w	r2, [r3], #4
 80115a0:	429f      	cmp	r7, r3
 80115a2:	d2fb      	bcs.n	801159c <__hexnan+0xcc>
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	b91b      	cbnz	r3, 80115b0 <__hexnan+0xe0>
 80115a8:	4547      	cmp	r7, r8
 80115aa:	d127      	bne.n	80115fc <__hexnan+0x12c>
 80115ac:	2301      	movs	r3, #1
 80115ae:	603b      	str	r3, [r7, #0]
 80115b0:	2005      	movs	r0, #5
 80115b2:	e026      	b.n	8011602 <__hexnan+0x132>
 80115b4:	3501      	adds	r5, #1
 80115b6:	2d08      	cmp	r5, #8
 80115b8:	f10b 0b01 	add.w	fp, fp, #1
 80115bc:	dd06      	ble.n	80115cc <__hexnan+0xfc>
 80115be:	4544      	cmp	r4, r8
 80115c0:	d9c3      	bls.n	801154a <__hexnan+0x7a>
 80115c2:	2300      	movs	r3, #0
 80115c4:	f844 3c04 	str.w	r3, [r4, #-4]
 80115c8:	2501      	movs	r5, #1
 80115ca:	3c04      	subs	r4, #4
 80115cc:	6822      	ldr	r2, [r4, #0]
 80115ce:	f000 000f 	and.w	r0, r0, #15
 80115d2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80115d6:	6022      	str	r2, [r4, #0]
 80115d8:	e7b7      	b.n	801154a <__hexnan+0x7a>
 80115da:	2508      	movs	r5, #8
 80115dc:	e7b5      	b.n	801154a <__hexnan+0x7a>
 80115de:	9b01      	ldr	r3, [sp, #4]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d0df      	beq.n	80115a4 <__hexnan+0xd4>
 80115e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80115e8:	f1c3 0320 	rsb	r3, r3, #32
 80115ec:	fa22 f303 	lsr.w	r3, r2, r3
 80115f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80115f4:	401a      	ands	r2, r3
 80115f6:	f846 2c04 	str.w	r2, [r6, #-4]
 80115fa:	e7d3      	b.n	80115a4 <__hexnan+0xd4>
 80115fc:	3f04      	subs	r7, #4
 80115fe:	e7d1      	b.n	80115a4 <__hexnan+0xd4>
 8011600:	2004      	movs	r0, #4
 8011602:	b007      	add	sp, #28
 8011604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011608 <_gettimeofday_r>:
 8011608:	b538      	push	{r3, r4, r5, lr}
 801160a:	4d07      	ldr	r5, [pc, #28]	; (8011628 <_gettimeofday_r+0x20>)
 801160c:	2300      	movs	r3, #0
 801160e:	4604      	mov	r4, r0
 8011610:	4608      	mov	r0, r1
 8011612:	4611      	mov	r1, r2
 8011614:	602b      	str	r3, [r5, #0]
 8011616:	f001 fc1b 	bl	8012e50 <_gettimeofday>
 801161a:	1c43      	adds	r3, r0, #1
 801161c:	d102      	bne.n	8011624 <_gettimeofday_r+0x1c>
 801161e:	682b      	ldr	r3, [r5, #0]
 8011620:	b103      	cbz	r3, 8011624 <_gettimeofday_r+0x1c>
 8011622:	6023      	str	r3, [r4, #0]
 8011624:	bd38      	pop	{r3, r4, r5, pc}
 8011626:	bf00      	nop
 8011628:	20013ef8 	.word	0x20013ef8

0801162c <_localeconv_r>:
 801162c:	4800      	ldr	r0, [pc, #0]	; (8011630 <_localeconv_r+0x4>)
 801162e:	4770      	bx	lr
 8011630:	200013d0 	.word	0x200013d0

08011634 <__ascii_mbtowc>:
 8011634:	b082      	sub	sp, #8
 8011636:	b901      	cbnz	r1, 801163a <__ascii_mbtowc+0x6>
 8011638:	a901      	add	r1, sp, #4
 801163a:	b142      	cbz	r2, 801164e <__ascii_mbtowc+0x1a>
 801163c:	b14b      	cbz	r3, 8011652 <__ascii_mbtowc+0x1e>
 801163e:	7813      	ldrb	r3, [r2, #0]
 8011640:	600b      	str	r3, [r1, #0]
 8011642:	7812      	ldrb	r2, [r2, #0]
 8011644:	1e10      	subs	r0, r2, #0
 8011646:	bf18      	it	ne
 8011648:	2001      	movne	r0, #1
 801164a:	b002      	add	sp, #8
 801164c:	4770      	bx	lr
 801164e:	4610      	mov	r0, r2
 8011650:	e7fb      	b.n	801164a <__ascii_mbtowc+0x16>
 8011652:	f06f 0001 	mvn.w	r0, #1
 8011656:	e7f8      	b.n	801164a <__ascii_mbtowc+0x16>

08011658 <memcpy>:
 8011658:	440a      	add	r2, r1
 801165a:	4291      	cmp	r1, r2
 801165c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011660:	d100      	bne.n	8011664 <memcpy+0xc>
 8011662:	4770      	bx	lr
 8011664:	b510      	push	{r4, lr}
 8011666:	f811 4b01 	ldrb.w	r4, [r1], #1
 801166a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801166e:	4291      	cmp	r1, r2
 8011670:	d1f9      	bne.n	8011666 <memcpy+0xe>
 8011672:	bd10      	pop	{r4, pc}

08011674 <__malloc_lock>:
 8011674:	4801      	ldr	r0, [pc, #4]	; (801167c <__malloc_lock+0x8>)
 8011676:	f001 ba41 	b.w	8012afc <__retarget_lock_acquire_recursive>
 801167a:	bf00      	nop
 801167c:	20013efc 	.word	0x20013efc

08011680 <__malloc_unlock>:
 8011680:	4801      	ldr	r0, [pc, #4]	; (8011688 <__malloc_unlock+0x8>)
 8011682:	f001 ba3c 	b.w	8012afe <__retarget_lock_release_recursive>
 8011686:	bf00      	nop
 8011688:	20013efc 	.word	0x20013efc

0801168c <_Balloc>:
 801168c:	b570      	push	{r4, r5, r6, lr}
 801168e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011690:	4604      	mov	r4, r0
 8011692:	460d      	mov	r5, r1
 8011694:	b976      	cbnz	r6, 80116b4 <_Balloc+0x28>
 8011696:	2010      	movs	r0, #16
 8011698:	f7fc fec2 	bl	800e420 <malloc>
 801169c:	4602      	mov	r2, r0
 801169e:	6260      	str	r0, [r4, #36]	; 0x24
 80116a0:	b920      	cbnz	r0, 80116ac <_Balloc+0x20>
 80116a2:	4b18      	ldr	r3, [pc, #96]	; (8011704 <_Balloc+0x78>)
 80116a4:	4818      	ldr	r0, [pc, #96]	; (8011708 <_Balloc+0x7c>)
 80116a6:	2166      	movs	r1, #102	; 0x66
 80116a8:	f7fe fd94 	bl	80101d4 <__assert_func>
 80116ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80116b0:	6006      	str	r6, [r0, #0]
 80116b2:	60c6      	str	r6, [r0, #12]
 80116b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80116b6:	68f3      	ldr	r3, [r6, #12]
 80116b8:	b183      	cbz	r3, 80116dc <_Balloc+0x50>
 80116ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80116bc:	68db      	ldr	r3, [r3, #12]
 80116be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80116c2:	b9b8      	cbnz	r0, 80116f4 <_Balloc+0x68>
 80116c4:	2101      	movs	r1, #1
 80116c6:	fa01 f605 	lsl.w	r6, r1, r5
 80116ca:	1d72      	adds	r2, r6, #5
 80116cc:	0092      	lsls	r2, r2, #2
 80116ce:	4620      	mov	r0, r4
 80116d0:	f000 fc9d 	bl	801200e <_calloc_r>
 80116d4:	b160      	cbz	r0, 80116f0 <_Balloc+0x64>
 80116d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80116da:	e00e      	b.n	80116fa <_Balloc+0x6e>
 80116dc:	2221      	movs	r2, #33	; 0x21
 80116de:	2104      	movs	r1, #4
 80116e0:	4620      	mov	r0, r4
 80116e2:	f000 fc94 	bl	801200e <_calloc_r>
 80116e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80116e8:	60f0      	str	r0, [r6, #12]
 80116ea:	68db      	ldr	r3, [r3, #12]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d1e4      	bne.n	80116ba <_Balloc+0x2e>
 80116f0:	2000      	movs	r0, #0
 80116f2:	bd70      	pop	{r4, r5, r6, pc}
 80116f4:	6802      	ldr	r2, [r0, #0]
 80116f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80116fa:	2300      	movs	r3, #0
 80116fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011700:	e7f7      	b.n	80116f2 <_Balloc+0x66>
 8011702:	bf00      	nop
 8011704:	08013bf5 	.word	0x08013bf5
 8011708:	08013ee8 	.word	0x08013ee8

0801170c <_Bfree>:
 801170c:	b570      	push	{r4, r5, r6, lr}
 801170e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011710:	4605      	mov	r5, r0
 8011712:	460c      	mov	r4, r1
 8011714:	b976      	cbnz	r6, 8011734 <_Bfree+0x28>
 8011716:	2010      	movs	r0, #16
 8011718:	f7fc fe82 	bl	800e420 <malloc>
 801171c:	4602      	mov	r2, r0
 801171e:	6268      	str	r0, [r5, #36]	; 0x24
 8011720:	b920      	cbnz	r0, 801172c <_Bfree+0x20>
 8011722:	4b09      	ldr	r3, [pc, #36]	; (8011748 <_Bfree+0x3c>)
 8011724:	4809      	ldr	r0, [pc, #36]	; (801174c <_Bfree+0x40>)
 8011726:	218a      	movs	r1, #138	; 0x8a
 8011728:	f7fe fd54 	bl	80101d4 <__assert_func>
 801172c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011730:	6006      	str	r6, [r0, #0]
 8011732:	60c6      	str	r6, [r0, #12]
 8011734:	b13c      	cbz	r4, 8011746 <_Bfree+0x3a>
 8011736:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011738:	6862      	ldr	r2, [r4, #4]
 801173a:	68db      	ldr	r3, [r3, #12]
 801173c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011740:	6021      	str	r1, [r4, #0]
 8011742:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011746:	bd70      	pop	{r4, r5, r6, pc}
 8011748:	08013bf5 	.word	0x08013bf5
 801174c:	08013ee8 	.word	0x08013ee8

08011750 <__multadd>:
 8011750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011754:	690d      	ldr	r5, [r1, #16]
 8011756:	4607      	mov	r7, r0
 8011758:	460c      	mov	r4, r1
 801175a:	461e      	mov	r6, r3
 801175c:	f101 0c14 	add.w	ip, r1, #20
 8011760:	2000      	movs	r0, #0
 8011762:	f8dc 3000 	ldr.w	r3, [ip]
 8011766:	b299      	uxth	r1, r3
 8011768:	fb02 6101 	mla	r1, r2, r1, r6
 801176c:	0c1e      	lsrs	r6, r3, #16
 801176e:	0c0b      	lsrs	r3, r1, #16
 8011770:	fb02 3306 	mla	r3, r2, r6, r3
 8011774:	b289      	uxth	r1, r1
 8011776:	3001      	adds	r0, #1
 8011778:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801177c:	4285      	cmp	r5, r0
 801177e:	f84c 1b04 	str.w	r1, [ip], #4
 8011782:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011786:	dcec      	bgt.n	8011762 <__multadd+0x12>
 8011788:	b30e      	cbz	r6, 80117ce <__multadd+0x7e>
 801178a:	68a3      	ldr	r3, [r4, #8]
 801178c:	42ab      	cmp	r3, r5
 801178e:	dc19      	bgt.n	80117c4 <__multadd+0x74>
 8011790:	6861      	ldr	r1, [r4, #4]
 8011792:	4638      	mov	r0, r7
 8011794:	3101      	adds	r1, #1
 8011796:	f7ff ff79 	bl	801168c <_Balloc>
 801179a:	4680      	mov	r8, r0
 801179c:	b928      	cbnz	r0, 80117aa <__multadd+0x5a>
 801179e:	4602      	mov	r2, r0
 80117a0:	4b0c      	ldr	r3, [pc, #48]	; (80117d4 <__multadd+0x84>)
 80117a2:	480d      	ldr	r0, [pc, #52]	; (80117d8 <__multadd+0x88>)
 80117a4:	21b5      	movs	r1, #181	; 0xb5
 80117a6:	f7fe fd15 	bl	80101d4 <__assert_func>
 80117aa:	6922      	ldr	r2, [r4, #16]
 80117ac:	3202      	adds	r2, #2
 80117ae:	f104 010c 	add.w	r1, r4, #12
 80117b2:	0092      	lsls	r2, r2, #2
 80117b4:	300c      	adds	r0, #12
 80117b6:	f7ff ff4f 	bl	8011658 <memcpy>
 80117ba:	4621      	mov	r1, r4
 80117bc:	4638      	mov	r0, r7
 80117be:	f7ff ffa5 	bl	801170c <_Bfree>
 80117c2:	4644      	mov	r4, r8
 80117c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80117c8:	3501      	adds	r5, #1
 80117ca:	615e      	str	r6, [r3, #20]
 80117cc:	6125      	str	r5, [r4, #16]
 80117ce:	4620      	mov	r0, r4
 80117d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117d4:	08013e5d 	.word	0x08013e5d
 80117d8:	08013ee8 	.word	0x08013ee8

080117dc <__s2b>:
 80117dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117e0:	460c      	mov	r4, r1
 80117e2:	4615      	mov	r5, r2
 80117e4:	461f      	mov	r7, r3
 80117e6:	2209      	movs	r2, #9
 80117e8:	3308      	adds	r3, #8
 80117ea:	4606      	mov	r6, r0
 80117ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80117f0:	2100      	movs	r1, #0
 80117f2:	2201      	movs	r2, #1
 80117f4:	429a      	cmp	r2, r3
 80117f6:	db09      	blt.n	801180c <__s2b+0x30>
 80117f8:	4630      	mov	r0, r6
 80117fa:	f7ff ff47 	bl	801168c <_Balloc>
 80117fe:	b940      	cbnz	r0, 8011812 <__s2b+0x36>
 8011800:	4602      	mov	r2, r0
 8011802:	4b19      	ldr	r3, [pc, #100]	; (8011868 <__s2b+0x8c>)
 8011804:	4819      	ldr	r0, [pc, #100]	; (801186c <__s2b+0x90>)
 8011806:	21ce      	movs	r1, #206	; 0xce
 8011808:	f7fe fce4 	bl	80101d4 <__assert_func>
 801180c:	0052      	lsls	r2, r2, #1
 801180e:	3101      	adds	r1, #1
 8011810:	e7f0      	b.n	80117f4 <__s2b+0x18>
 8011812:	9b08      	ldr	r3, [sp, #32]
 8011814:	6143      	str	r3, [r0, #20]
 8011816:	2d09      	cmp	r5, #9
 8011818:	f04f 0301 	mov.w	r3, #1
 801181c:	6103      	str	r3, [r0, #16]
 801181e:	dd16      	ble.n	801184e <__s2b+0x72>
 8011820:	f104 0909 	add.w	r9, r4, #9
 8011824:	46c8      	mov	r8, r9
 8011826:	442c      	add	r4, r5
 8011828:	f818 3b01 	ldrb.w	r3, [r8], #1
 801182c:	4601      	mov	r1, r0
 801182e:	3b30      	subs	r3, #48	; 0x30
 8011830:	220a      	movs	r2, #10
 8011832:	4630      	mov	r0, r6
 8011834:	f7ff ff8c 	bl	8011750 <__multadd>
 8011838:	45a0      	cmp	r8, r4
 801183a:	d1f5      	bne.n	8011828 <__s2b+0x4c>
 801183c:	f1a5 0408 	sub.w	r4, r5, #8
 8011840:	444c      	add	r4, r9
 8011842:	1b2d      	subs	r5, r5, r4
 8011844:	1963      	adds	r3, r4, r5
 8011846:	42bb      	cmp	r3, r7
 8011848:	db04      	blt.n	8011854 <__s2b+0x78>
 801184a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801184e:	340a      	adds	r4, #10
 8011850:	2509      	movs	r5, #9
 8011852:	e7f6      	b.n	8011842 <__s2b+0x66>
 8011854:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011858:	4601      	mov	r1, r0
 801185a:	3b30      	subs	r3, #48	; 0x30
 801185c:	220a      	movs	r2, #10
 801185e:	4630      	mov	r0, r6
 8011860:	f7ff ff76 	bl	8011750 <__multadd>
 8011864:	e7ee      	b.n	8011844 <__s2b+0x68>
 8011866:	bf00      	nop
 8011868:	08013e5d 	.word	0x08013e5d
 801186c:	08013ee8 	.word	0x08013ee8

08011870 <__hi0bits>:
 8011870:	0c03      	lsrs	r3, r0, #16
 8011872:	041b      	lsls	r3, r3, #16
 8011874:	b9d3      	cbnz	r3, 80118ac <__hi0bits+0x3c>
 8011876:	0400      	lsls	r0, r0, #16
 8011878:	2310      	movs	r3, #16
 801187a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801187e:	bf04      	itt	eq
 8011880:	0200      	lsleq	r0, r0, #8
 8011882:	3308      	addeq	r3, #8
 8011884:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011888:	bf04      	itt	eq
 801188a:	0100      	lsleq	r0, r0, #4
 801188c:	3304      	addeq	r3, #4
 801188e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011892:	bf04      	itt	eq
 8011894:	0080      	lsleq	r0, r0, #2
 8011896:	3302      	addeq	r3, #2
 8011898:	2800      	cmp	r0, #0
 801189a:	db05      	blt.n	80118a8 <__hi0bits+0x38>
 801189c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80118a0:	f103 0301 	add.w	r3, r3, #1
 80118a4:	bf08      	it	eq
 80118a6:	2320      	moveq	r3, #32
 80118a8:	4618      	mov	r0, r3
 80118aa:	4770      	bx	lr
 80118ac:	2300      	movs	r3, #0
 80118ae:	e7e4      	b.n	801187a <__hi0bits+0xa>

080118b0 <__lo0bits>:
 80118b0:	6803      	ldr	r3, [r0, #0]
 80118b2:	f013 0207 	ands.w	r2, r3, #7
 80118b6:	4601      	mov	r1, r0
 80118b8:	d00b      	beq.n	80118d2 <__lo0bits+0x22>
 80118ba:	07da      	lsls	r2, r3, #31
 80118bc:	d423      	bmi.n	8011906 <__lo0bits+0x56>
 80118be:	0798      	lsls	r0, r3, #30
 80118c0:	bf49      	itett	mi
 80118c2:	085b      	lsrmi	r3, r3, #1
 80118c4:	089b      	lsrpl	r3, r3, #2
 80118c6:	2001      	movmi	r0, #1
 80118c8:	600b      	strmi	r3, [r1, #0]
 80118ca:	bf5c      	itt	pl
 80118cc:	600b      	strpl	r3, [r1, #0]
 80118ce:	2002      	movpl	r0, #2
 80118d0:	4770      	bx	lr
 80118d2:	b298      	uxth	r0, r3
 80118d4:	b9a8      	cbnz	r0, 8011902 <__lo0bits+0x52>
 80118d6:	0c1b      	lsrs	r3, r3, #16
 80118d8:	2010      	movs	r0, #16
 80118da:	b2da      	uxtb	r2, r3
 80118dc:	b90a      	cbnz	r2, 80118e2 <__lo0bits+0x32>
 80118de:	3008      	adds	r0, #8
 80118e0:	0a1b      	lsrs	r3, r3, #8
 80118e2:	071a      	lsls	r2, r3, #28
 80118e4:	bf04      	itt	eq
 80118e6:	091b      	lsreq	r3, r3, #4
 80118e8:	3004      	addeq	r0, #4
 80118ea:	079a      	lsls	r2, r3, #30
 80118ec:	bf04      	itt	eq
 80118ee:	089b      	lsreq	r3, r3, #2
 80118f0:	3002      	addeq	r0, #2
 80118f2:	07da      	lsls	r2, r3, #31
 80118f4:	d403      	bmi.n	80118fe <__lo0bits+0x4e>
 80118f6:	085b      	lsrs	r3, r3, #1
 80118f8:	f100 0001 	add.w	r0, r0, #1
 80118fc:	d005      	beq.n	801190a <__lo0bits+0x5a>
 80118fe:	600b      	str	r3, [r1, #0]
 8011900:	4770      	bx	lr
 8011902:	4610      	mov	r0, r2
 8011904:	e7e9      	b.n	80118da <__lo0bits+0x2a>
 8011906:	2000      	movs	r0, #0
 8011908:	4770      	bx	lr
 801190a:	2020      	movs	r0, #32
 801190c:	4770      	bx	lr
	...

08011910 <__i2b>:
 8011910:	b510      	push	{r4, lr}
 8011912:	460c      	mov	r4, r1
 8011914:	2101      	movs	r1, #1
 8011916:	f7ff feb9 	bl	801168c <_Balloc>
 801191a:	4602      	mov	r2, r0
 801191c:	b928      	cbnz	r0, 801192a <__i2b+0x1a>
 801191e:	4b05      	ldr	r3, [pc, #20]	; (8011934 <__i2b+0x24>)
 8011920:	4805      	ldr	r0, [pc, #20]	; (8011938 <__i2b+0x28>)
 8011922:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011926:	f7fe fc55 	bl	80101d4 <__assert_func>
 801192a:	2301      	movs	r3, #1
 801192c:	6144      	str	r4, [r0, #20]
 801192e:	6103      	str	r3, [r0, #16]
 8011930:	bd10      	pop	{r4, pc}
 8011932:	bf00      	nop
 8011934:	08013e5d 	.word	0x08013e5d
 8011938:	08013ee8 	.word	0x08013ee8

0801193c <__multiply>:
 801193c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011940:	4691      	mov	r9, r2
 8011942:	690a      	ldr	r2, [r1, #16]
 8011944:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011948:	429a      	cmp	r2, r3
 801194a:	bfb8      	it	lt
 801194c:	460b      	movlt	r3, r1
 801194e:	460c      	mov	r4, r1
 8011950:	bfbc      	itt	lt
 8011952:	464c      	movlt	r4, r9
 8011954:	4699      	movlt	r9, r3
 8011956:	6927      	ldr	r7, [r4, #16]
 8011958:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801195c:	68a3      	ldr	r3, [r4, #8]
 801195e:	6861      	ldr	r1, [r4, #4]
 8011960:	eb07 060a 	add.w	r6, r7, sl
 8011964:	42b3      	cmp	r3, r6
 8011966:	b085      	sub	sp, #20
 8011968:	bfb8      	it	lt
 801196a:	3101      	addlt	r1, #1
 801196c:	f7ff fe8e 	bl	801168c <_Balloc>
 8011970:	b930      	cbnz	r0, 8011980 <__multiply+0x44>
 8011972:	4602      	mov	r2, r0
 8011974:	4b44      	ldr	r3, [pc, #272]	; (8011a88 <__multiply+0x14c>)
 8011976:	4845      	ldr	r0, [pc, #276]	; (8011a8c <__multiply+0x150>)
 8011978:	f240 115d 	movw	r1, #349	; 0x15d
 801197c:	f7fe fc2a 	bl	80101d4 <__assert_func>
 8011980:	f100 0514 	add.w	r5, r0, #20
 8011984:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011988:	462b      	mov	r3, r5
 801198a:	2200      	movs	r2, #0
 801198c:	4543      	cmp	r3, r8
 801198e:	d321      	bcc.n	80119d4 <__multiply+0x98>
 8011990:	f104 0314 	add.w	r3, r4, #20
 8011994:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011998:	f109 0314 	add.w	r3, r9, #20
 801199c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80119a0:	9202      	str	r2, [sp, #8]
 80119a2:	1b3a      	subs	r2, r7, r4
 80119a4:	3a15      	subs	r2, #21
 80119a6:	f022 0203 	bic.w	r2, r2, #3
 80119aa:	3204      	adds	r2, #4
 80119ac:	f104 0115 	add.w	r1, r4, #21
 80119b0:	428f      	cmp	r7, r1
 80119b2:	bf38      	it	cc
 80119b4:	2204      	movcc	r2, #4
 80119b6:	9201      	str	r2, [sp, #4]
 80119b8:	9a02      	ldr	r2, [sp, #8]
 80119ba:	9303      	str	r3, [sp, #12]
 80119bc:	429a      	cmp	r2, r3
 80119be:	d80c      	bhi.n	80119da <__multiply+0x9e>
 80119c0:	2e00      	cmp	r6, #0
 80119c2:	dd03      	ble.n	80119cc <__multiply+0x90>
 80119c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d05a      	beq.n	8011a82 <__multiply+0x146>
 80119cc:	6106      	str	r6, [r0, #16]
 80119ce:	b005      	add	sp, #20
 80119d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119d4:	f843 2b04 	str.w	r2, [r3], #4
 80119d8:	e7d8      	b.n	801198c <__multiply+0x50>
 80119da:	f8b3 a000 	ldrh.w	sl, [r3]
 80119de:	f1ba 0f00 	cmp.w	sl, #0
 80119e2:	d024      	beq.n	8011a2e <__multiply+0xf2>
 80119e4:	f104 0e14 	add.w	lr, r4, #20
 80119e8:	46a9      	mov	r9, r5
 80119ea:	f04f 0c00 	mov.w	ip, #0
 80119ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80119f2:	f8d9 1000 	ldr.w	r1, [r9]
 80119f6:	fa1f fb82 	uxth.w	fp, r2
 80119fa:	b289      	uxth	r1, r1
 80119fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8011a00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011a04:	f8d9 2000 	ldr.w	r2, [r9]
 8011a08:	4461      	add	r1, ip
 8011a0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011a0e:	fb0a c20b 	mla	r2, sl, fp, ip
 8011a12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011a16:	b289      	uxth	r1, r1
 8011a18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011a1c:	4577      	cmp	r7, lr
 8011a1e:	f849 1b04 	str.w	r1, [r9], #4
 8011a22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011a26:	d8e2      	bhi.n	80119ee <__multiply+0xb2>
 8011a28:	9a01      	ldr	r2, [sp, #4]
 8011a2a:	f845 c002 	str.w	ip, [r5, r2]
 8011a2e:	9a03      	ldr	r2, [sp, #12]
 8011a30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011a34:	3304      	adds	r3, #4
 8011a36:	f1b9 0f00 	cmp.w	r9, #0
 8011a3a:	d020      	beq.n	8011a7e <__multiply+0x142>
 8011a3c:	6829      	ldr	r1, [r5, #0]
 8011a3e:	f104 0c14 	add.w	ip, r4, #20
 8011a42:	46ae      	mov	lr, r5
 8011a44:	f04f 0a00 	mov.w	sl, #0
 8011a48:	f8bc b000 	ldrh.w	fp, [ip]
 8011a4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011a50:	fb09 220b 	mla	r2, r9, fp, r2
 8011a54:	4492      	add	sl, r2
 8011a56:	b289      	uxth	r1, r1
 8011a58:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011a5c:	f84e 1b04 	str.w	r1, [lr], #4
 8011a60:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011a64:	f8be 1000 	ldrh.w	r1, [lr]
 8011a68:	0c12      	lsrs	r2, r2, #16
 8011a6a:	fb09 1102 	mla	r1, r9, r2, r1
 8011a6e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011a72:	4567      	cmp	r7, ip
 8011a74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011a78:	d8e6      	bhi.n	8011a48 <__multiply+0x10c>
 8011a7a:	9a01      	ldr	r2, [sp, #4]
 8011a7c:	50a9      	str	r1, [r5, r2]
 8011a7e:	3504      	adds	r5, #4
 8011a80:	e79a      	b.n	80119b8 <__multiply+0x7c>
 8011a82:	3e01      	subs	r6, #1
 8011a84:	e79c      	b.n	80119c0 <__multiply+0x84>
 8011a86:	bf00      	nop
 8011a88:	08013e5d 	.word	0x08013e5d
 8011a8c:	08013ee8 	.word	0x08013ee8

08011a90 <__pow5mult>:
 8011a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a94:	4615      	mov	r5, r2
 8011a96:	f012 0203 	ands.w	r2, r2, #3
 8011a9a:	4606      	mov	r6, r0
 8011a9c:	460f      	mov	r7, r1
 8011a9e:	d007      	beq.n	8011ab0 <__pow5mult+0x20>
 8011aa0:	4c25      	ldr	r4, [pc, #148]	; (8011b38 <__pow5mult+0xa8>)
 8011aa2:	3a01      	subs	r2, #1
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011aaa:	f7ff fe51 	bl	8011750 <__multadd>
 8011aae:	4607      	mov	r7, r0
 8011ab0:	10ad      	asrs	r5, r5, #2
 8011ab2:	d03d      	beq.n	8011b30 <__pow5mult+0xa0>
 8011ab4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011ab6:	b97c      	cbnz	r4, 8011ad8 <__pow5mult+0x48>
 8011ab8:	2010      	movs	r0, #16
 8011aba:	f7fc fcb1 	bl	800e420 <malloc>
 8011abe:	4602      	mov	r2, r0
 8011ac0:	6270      	str	r0, [r6, #36]	; 0x24
 8011ac2:	b928      	cbnz	r0, 8011ad0 <__pow5mult+0x40>
 8011ac4:	4b1d      	ldr	r3, [pc, #116]	; (8011b3c <__pow5mult+0xac>)
 8011ac6:	481e      	ldr	r0, [pc, #120]	; (8011b40 <__pow5mult+0xb0>)
 8011ac8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011acc:	f7fe fb82 	bl	80101d4 <__assert_func>
 8011ad0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011ad4:	6004      	str	r4, [r0, #0]
 8011ad6:	60c4      	str	r4, [r0, #12]
 8011ad8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011adc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011ae0:	b94c      	cbnz	r4, 8011af6 <__pow5mult+0x66>
 8011ae2:	f240 2171 	movw	r1, #625	; 0x271
 8011ae6:	4630      	mov	r0, r6
 8011ae8:	f7ff ff12 	bl	8011910 <__i2b>
 8011aec:	2300      	movs	r3, #0
 8011aee:	f8c8 0008 	str.w	r0, [r8, #8]
 8011af2:	4604      	mov	r4, r0
 8011af4:	6003      	str	r3, [r0, #0]
 8011af6:	f04f 0900 	mov.w	r9, #0
 8011afa:	07eb      	lsls	r3, r5, #31
 8011afc:	d50a      	bpl.n	8011b14 <__pow5mult+0x84>
 8011afe:	4639      	mov	r1, r7
 8011b00:	4622      	mov	r2, r4
 8011b02:	4630      	mov	r0, r6
 8011b04:	f7ff ff1a 	bl	801193c <__multiply>
 8011b08:	4639      	mov	r1, r7
 8011b0a:	4680      	mov	r8, r0
 8011b0c:	4630      	mov	r0, r6
 8011b0e:	f7ff fdfd 	bl	801170c <_Bfree>
 8011b12:	4647      	mov	r7, r8
 8011b14:	106d      	asrs	r5, r5, #1
 8011b16:	d00b      	beq.n	8011b30 <__pow5mult+0xa0>
 8011b18:	6820      	ldr	r0, [r4, #0]
 8011b1a:	b938      	cbnz	r0, 8011b2c <__pow5mult+0x9c>
 8011b1c:	4622      	mov	r2, r4
 8011b1e:	4621      	mov	r1, r4
 8011b20:	4630      	mov	r0, r6
 8011b22:	f7ff ff0b 	bl	801193c <__multiply>
 8011b26:	6020      	str	r0, [r4, #0]
 8011b28:	f8c0 9000 	str.w	r9, [r0]
 8011b2c:	4604      	mov	r4, r0
 8011b2e:	e7e4      	b.n	8011afa <__pow5mult+0x6a>
 8011b30:	4638      	mov	r0, r7
 8011b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b36:	bf00      	nop
 8011b38:	08014038 	.word	0x08014038
 8011b3c:	08013bf5 	.word	0x08013bf5
 8011b40:	08013ee8 	.word	0x08013ee8

08011b44 <__lshift>:
 8011b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b48:	460c      	mov	r4, r1
 8011b4a:	6849      	ldr	r1, [r1, #4]
 8011b4c:	6923      	ldr	r3, [r4, #16]
 8011b4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011b52:	68a3      	ldr	r3, [r4, #8]
 8011b54:	4607      	mov	r7, r0
 8011b56:	4691      	mov	r9, r2
 8011b58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011b5c:	f108 0601 	add.w	r6, r8, #1
 8011b60:	42b3      	cmp	r3, r6
 8011b62:	db0b      	blt.n	8011b7c <__lshift+0x38>
 8011b64:	4638      	mov	r0, r7
 8011b66:	f7ff fd91 	bl	801168c <_Balloc>
 8011b6a:	4605      	mov	r5, r0
 8011b6c:	b948      	cbnz	r0, 8011b82 <__lshift+0x3e>
 8011b6e:	4602      	mov	r2, r0
 8011b70:	4b2a      	ldr	r3, [pc, #168]	; (8011c1c <__lshift+0xd8>)
 8011b72:	482b      	ldr	r0, [pc, #172]	; (8011c20 <__lshift+0xdc>)
 8011b74:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011b78:	f7fe fb2c 	bl	80101d4 <__assert_func>
 8011b7c:	3101      	adds	r1, #1
 8011b7e:	005b      	lsls	r3, r3, #1
 8011b80:	e7ee      	b.n	8011b60 <__lshift+0x1c>
 8011b82:	2300      	movs	r3, #0
 8011b84:	f100 0114 	add.w	r1, r0, #20
 8011b88:	f100 0210 	add.w	r2, r0, #16
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	4553      	cmp	r3, sl
 8011b90:	db37      	blt.n	8011c02 <__lshift+0xbe>
 8011b92:	6920      	ldr	r0, [r4, #16]
 8011b94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011b98:	f104 0314 	add.w	r3, r4, #20
 8011b9c:	f019 091f 	ands.w	r9, r9, #31
 8011ba0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011ba4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011ba8:	d02f      	beq.n	8011c0a <__lshift+0xc6>
 8011baa:	f1c9 0e20 	rsb	lr, r9, #32
 8011bae:	468a      	mov	sl, r1
 8011bb0:	f04f 0c00 	mov.w	ip, #0
 8011bb4:	681a      	ldr	r2, [r3, #0]
 8011bb6:	fa02 f209 	lsl.w	r2, r2, r9
 8011bba:	ea42 020c 	orr.w	r2, r2, ip
 8011bbe:	f84a 2b04 	str.w	r2, [sl], #4
 8011bc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bc6:	4298      	cmp	r0, r3
 8011bc8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011bcc:	d8f2      	bhi.n	8011bb4 <__lshift+0x70>
 8011bce:	1b03      	subs	r3, r0, r4
 8011bd0:	3b15      	subs	r3, #21
 8011bd2:	f023 0303 	bic.w	r3, r3, #3
 8011bd6:	3304      	adds	r3, #4
 8011bd8:	f104 0215 	add.w	r2, r4, #21
 8011bdc:	4290      	cmp	r0, r2
 8011bde:	bf38      	it	cc
 8011be0:	2304      	movcc	r3, #4
 8011be2:	f841 c003 	str.w	ip, [r1, r3]
 8011be6:	f1bc 0f00 	cmp.w	ip, #0
 8011bea:	d001      	beq.n	8011bf0 <__lshift+0xac>
 8011bec:	f108 0602 	add.w	r6, r8, #2
 8011bf0:	3e01      	subs	r6, #1
 8011bf2:	4638      	mov	r0, r7
 8011bf4:	612e      	str	r6, [r5, #16]
 8011bf6:	4621      	mov	r1, r4
 8011bf8:	f7ff fd88 	bl	801170c <_Bfree>
 8011bfc:	4628      	mov	r0, r5
 8011bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c02:	f842 0f04 	str.w	r0, [r2, #4]!
 8011c06:	3301      	adds	r3, #1
 8011c08:	e7c1      	b.n	8011b8e <__lshift+0x4a>
 8011c0a:	3904      	subs	r1, #4
 8011c0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c10:	f841 2f04 	str.w	r2, [r1, #4]!
 8011c14:	4298      	cmp	r0, r3
 8011c16:	d8f9      	bhi.n	8011c0c <__lshift+0xc8>
 8011c18:	e7ea      	b.n	8011bf0 <__lshift+0xac>
 8011c1a:	bf00      	nop
 8011c1c:	08013e5d 	.word	0x08013e5d
 8011c20:	08013ee8 	.word	0x08013ee8

08011c24 <__mcmp>:
 8011c24:	b530      	push	{r4, r5, lr}
 8011c26:	6902      	ldr	r2, [r0, #16]
 8011c28:	690c      	ldr	r4, [r1, #16]
 8011c2a:	1b12      	subs	r2, r2, r4
 8011c2c:	d10e      	bne.n	8011c4c <__mcmp+0x28>
 8011c2e:	f100 0314 	add.w	r3, r0, #20
 8011c32:	3114      	adds	r1, #20
 8011c34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011c38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011c3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011c40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011c44:	42a5      	cmp	r5, r4
 8011c46:	d003      	beq.n	8011c50 <__mcmp+0x2c>
 8011c48:	d305      	bcc.n	8011c56 <__mcmp+0x32>
 8011c4a:	2201      	movs	r2, #1
 8011c4c:	4610      	mov	r0, r2
 8011c4e:	bd30      	pop	{r4, r5, pc}
 8011c50:	4283      	cmp	r3, r0
 8011c52:	d3f3      	bcc.n	8011c3c <__mcmp+0x18>
 8011c54:	e7fa      	b.n	8011c4c <__mcmp+0x28>
 8011c56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c5a:	e7f7      	b.n	8011c4c <__mcmp+0x28>

08011c5c <__mdiff>:
 8011c5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c60:	460c      	mov	r4, r1
 8011c62:	4606      	mov	r6, r0
 8011c64:	4611      	mov	r1, r2
 8011c66:	4620      	mov	r0, r4
 8011c68:	4690      	mov	r8, r2
 8011c6a:	f7ff ffdb 	bl	8011c24 <__mcmp>
 8011c6e:	1e05      	subs	r5, r0, #0
 8011c70:	d110      	bne.n	8011c94 <__mdiff+0x38>
 8011c72:	4629      	mov	r1, r5
 8011c74:	4630      	mov	r0, r6
 8011c76:	f7ff fd09 	bl	801168c <_Balloc>
 8011c7a:	b930      	cbnz	r0, 8011c8a <__mdiff+0x2e>
 8011c7c:	4b3a      	ldr	r3, [pc, #232]	; (8011d68 <__mdiff+0x10c>)
 8011c7e:	4602      	mov	r2, r0
 8011c80:	f240 2132 	movw	r1, #562	; 0x232
 8011c84:	4839      	ldr	r0, [pc, #228]	; (8011d6c <__mdiff+0x110>)
 8011c86:	f7fe faa5 	bl	80101d4 <__assert_func>
 8011c8a:	2301      	movs	r3, #1
 8011c8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011c90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c94:	bfa4      	itt	ge
 8011c96:	4643      	movge	r3, r8
 8011c98:	46a0      	movge	r8, r4
 8011c9a:	4630      	mov	r0, r6
 8011c9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011ca0:	bfa6      	itte	ge
 8011ca2:	461c      	movge	r4, r3
 8011ca4:	2500      	movge	r5, #0
 8011ca6:	2501      	movlt	r5, #1
 8011ca8:	f7ff fcf0 	bl	801168c <_Balloc>
 8011cac:	b920      	cbnz	r0, 8011cb8 <__mdiff+0x5c>
 8011cae:	4b2e      	ldr	r3, [pc, #184]	; (8011d68 <__mdiff+0x10c>)
 8011cb0:	4602      	mov	r2, r0
 8011cb2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011cb6:	e7e5      	b.n	8011c84 <__mdiff+0x28>
 8011cb8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011cbc:	6926      	ldr	r6, [r4, #16]
 8011cbe:	60c5      	str	r5, [r0, #12]
 8011cc0:	f104 0914 	add.w	r9, r4, #20
 8011cc4:	f108 0514 	add.w	r5, r8, #20
 8011cc8:	f100 0e14 	add.w	lr, r0, #20
 8011ccc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011cd0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011cd4:	f108 0210 	add.w	r2, r8, #16
 8011cd8:	46f2      	mov	sl, lr
 8011cda:	2100      	movs	r1, #0
 8011cdc:	f859 3b04 	ldr.w	r3, [r9], #4
 8011ce0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011ce4:	fa1f f883 	uxth.w	r8, r3
 8011ce8:	fa11 f18b 	uxtah	r1, r1, fp
 8011cec:	0c1b      	lsrs	r3, r3, #16
 8011cee:	eba1 0808 	sub.w	r8, r1, r8
 8011cf2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011cf6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011cfa:	fa1f f888 	uxth.w	r8, r8
 8011cfe:	1419      	asrs	r1, r3, #16
 8011d00:	454e      	cmp	r6, r9
 8011d02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011d06:	f84a 3b04 	str.w	r3, [sl], #4
 8011d0a:	d8e7      	bhi.n	8011cdc <__mdiff+0x80>
 8011d0c:	1b33      	subs	r3, r6, r4
 8011d0e:	3b15      	subs	r3, #21
 8011d10:	f023 0303 	bic.w	r3, r3, #3
 8011d14:	3304      	adds	r3, #4
 8011d16:	3415      	adds	r4, #21
 8011d18:	42a6      	cmp	r6, r4
 8011d1a:	bf38      	it	cc
 8011d1c:	2304      	movcc	r3, #4
 8011d1e:	441d      	add	r5, r3
 8011d20:	4473      	add	r3, lr
 8011d22:	469e      	mov	lr, r3
 8011d24:	462e      	mov	r6, r5
 8011d26:	4566      	cmp	r6, ip
 8011d28:	d30e      	bcc.n	8011d48 <__mdiff+0xec>
 8011d2a:	f10c 0203 	add.w	r2, ip, #3
 8011d2e:	1b52      	subs	r2, r2, r5
 8011d30:	f022 0203 	bic.w	r2, r2, #3
 8011d34:	3d03      	subs	r5, #3
 8011d36:	45ac      	cmp	ip, r5
 8011d38:	bf38      	it	cc
 8011d3a:	2200      	movcc	r2, #0
 8011d3c:	441a      	add	r2, r3
 8011d3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011d42:	b17b      	cbz	r3, 8011d64 <__mdiff+0x108>
 8011d44:	6107      	str	r7, [r0, #16]
 8011d46:	e7a3      	b.n	8011c90 <__mdiff+0x34>
 8011d48:	f856 8b04 	ldr.w	r8, [r6], #4
 8011d4c:	fa11 f288 	uxtah	r2, r1, r8
 8011d50:	1414      	asrs	r4, r2, #16
 8011d52:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011d56:	b292      	uxth	r2, r2
 8011d58:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011d5c:	f84e 2b04 	str.w	r2, [lr], #4
 8011d60:	1421      	asrs	r1, r4, #16
 8011d62:	e7e0      	b.n	8011d26 <__mdiff+0xca>
 8011d64:	3f01      	subs	r7, #1
 8011d66:	e7ea      	b.n	8011d3e <__mdiff+0xe2>
 8011d68:	08013e5d 	.word	0x08013e5d
 8011d6c:	08013ee8 	.word	0x08013ee8

08011d70 <__ulp>:
 8011d70:	b082      	sub	sp, #8
 8011d72:	ed8d 0b00 	vstr	d0, [sp]
 8011d76:	9b01      	ldr	r3, [sp, #4]
 8011d78:	4912      	ldr	r1, [pc, #72]	; (8011dc4 <__ulp+0x54>)
 8011d7a:	4019      	ands	r1, r3
 8011d7c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011d80:	2900      	cmp	r1, #0
 8011d82:	dd05      	ble.n	8011d90 <__ulp+0x20>
 8011d84:	2200      	movs	r2, #0
 8011d86:	460b      	mov	r3, r1
 8011d88:	ec43 2b10 	vmov	d0, r2, r3
 8011d8c:	b002      	add	sp, #8
 8011d8e:	4770      	bx	lr
 8011d90:	4249      	negs	r1, r1
 8011d92:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011d96:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011d9a:	f04f 0200 	mov.w	r2, #0
 8011d9e:	f04f 0300 	mov.w	r3, #0
 8011da2:	da04      	bge.n	8011dae <__ulp+0x3e>
 8011da4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011da8:	fa41 f300 	asr.w	r3, r1, r0
 8011dac:	e7ec      	b.n	8011d88 <__ulp+0x18>
 8011dae:	f1a0 0114 	sub.w	r1, r0, #20
 8011db2:	291e      	cmp	r1, #30
 8011db4:	bfda      	itte	le
 8011db6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8011dba:	fa20 f101 	lsrle.w	r1, r0, r1
 8011dbe:	2101      	movgt	r1, #1
 8011dc0:	460a      	mov	r2, r1
 8011dc2:	e7e1      	b.n	8011d88 <__ulp+0x18>
 8011dc4:	7ff00000 	.word	0x7ff00000

08011dc8 <__b2d>:
 8011dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dca:	6905      	ldr	r5, [r0, #16]
 8011dcc:	f100 0714 	add.w	r7, r0, #20
 8011dd0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011dd4:	1f2e      	subs	r6, r5, #4
 8011dd6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011dda:	4620      	mov	r0, r4
 8011ddc:	f7ff fd48 	bl	8011870 <__hi0bits>
 8011de0:	f1c0 0320 	rsb	r3, r0, #32
 8011de4:	280a      	cmp	r0, #10
 8011de6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011e64 <__b2d+0x9c>
 8011dea:	600b      	str	r3, [r1, #0]
 8011dec:	dc14      	bgt.n	8011e18 <__b2d+0x50>
 8011dee:	f1c0 0e0b 	rsb	lr, r0, #11
 8011df2:	fa24 f10e 	lsr.w	r1, r4, lr
 8011df6:	42b7      	cmp	r7, r6
 8011df8:	ea41 030c 	orr.w	r3, r1, ip
 8011dfc:	bf34      	ite	cc
 8011dfe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011e02:	2100      	movcs	r1, #0
 8011e04:	3015      	adds	r0, #21
 8011e06:	fa04 f000 	lsl.w	r0, r4, r0
 8011e0a:	fa21 f10e 	lsr.w	r1, r1, lr
 8011e0e:	ea40 0201 	orr.w	r2, r0, r1
 8011e12:	ec43 2b10 	vmov	d0, r2, r3
 8011e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e18:	42b7      	cmp	r7, r6
 8011e1a:	bf3a      	itte	cc
 8011e1c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011e20:	f1a5 0608 	subcc.w	r6, r5, #8
 8011e24:	2100      	movcs	r1, #0
 8011e26:	380b      	subs	r0, #11
 8011e28:	d017      	beq.n	8011e5a <__b2d+0x92>
 8011e2a:	f1c0 0c20 	rsb	ip, r0, #32
 8011e2e:	fa04 f500 	lsl.w	r5, r4, r0
 8011e32:	42be      	cmp	r6, r7
 8011e34:	fa21 f40c 	lsr.w	r4, r1, ip
 8011e38:	ea45 0504 	orr.w	r5, r5, r4
 8011e3c:	bf8c      	ite	hi
 8011e3e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011e42:	2400      	movls	r4, #0
 8011e44:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011e48:	fa01 f000 	lsl.w	r0, r1, r0
 8011e4c:	fa24 f40c 	lsr.w	r4, r4, ip
 8011e50:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011e54:	ea40 0204 	orr.w	r2, r0, r4
 8011e58:	e7db      	b.n	8011e12 <__b2d+0x4a>
 8011e5a:	ea44 030c 	orr.w	r3, r4, ip
 8011e5e:	460a      	mov	r2, r1
 8011e60:	e7d7      	b.n	8011e12 <__b2d+0x4a>
 8011e62:	bf00      	nop
 8011e64:	3ff00000 	.word	0x3ff00000

08011e68 <__d2b>:
 8011e68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011e6c:	4689      	mov	r9, r1
 8011e6e:	2101      	movs	r1, #1
 8011e70:	ec57 6b10 	vmov	r6, r7, d0
 8011e74:	4690      	mov	r8, r2
 8011e76:	f7ff fc09 	bl	801168c <_Balloc>
 8011e7a:	4604      	mov	r4, r0
 8011e7c:	b930      	cbnz	r0, 8011e8c <__d2b+0x24>
 8011e7e:	4602      	mov	r2, r0
 8011e80:	4b25      	ldr	r3, [pc, #148]	; (8011f18 <__d2b+0xb0>)
 8011e82:	4826      	ldr	r0, [pc, #152]	; (8011f1c <__d2b+0xb4>)
 8011e84:	f240 310a 	movw	r1, #778	; 0x30a
 8011e88:	f7fe f9a4 	bl	80101d4 <__assert_func>
 8011e8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011e90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011e94:	bb35      	cbnz	r5, 8011ee4 <__d2b+0x7c>
 8011e96:	2e00      	cmp	r6, #0
 8011e98:	9301      	str	r3, [sp, #4]
 8011e9a:	d028      	beq.n	8011eee <__d2b+0x86>
 8011e9c:	4668      	mov	r0, sp
 8011e9e:	9600      	str	r6, [sp, #0]
 8011ea0:	f7ff fd06 	bl	80118b0 <__lo0bits>
 8011ea4:	9900      	ldr	r1, [sp, #0]
 8011ea6:	b300      	cbz	r0, 8011eea <__d2b+0x82>
 8011ea8:	9a01      	ldr	r2, [sp, #4]
 8011eaa:	f1c0 0320 	rsb	r3, r0, #32
 8011eae:	fa02 f303 	lsl.w	r3, r2, r3
 8011eb2:	430b      	orrs	r3, r1
 8011eb4:	40c2      	lsrs	r2, r0
 8011eb6:	6163      	str	r3, [r4, #20]
 8011eb8:	9201      	str	r2, [sp, #4]
 8011eba:	9b01      	ldr	r3, [sp, #4]
 8011ebc:	61a3      	str	r3, [r4, #24]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	bf14      	ite	ne
 8011ec2:	2202      	movne	r2, #2
 8011ec4:	2201      	moveq	r2, #1
 8011ec6:	6122      	str	r2, [r4, #16]
 8011ec8:	b1d5      	cbz	r5, 8011f00 <__d2b+0x98>
 8011eca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011ece:	4405      	add	r5, r0
 8011ed0:	f8c9 5000 	str.w	r5, [r9]
 8011ed4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011ed8:	f8c8 0000 	str.w	r0, [r8]
 8011edc:	4620      	mov	r0, r4
 8011ede:	b003      	add	sp, #12
 8011ee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ee4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011ee8:	e7d5      	b.n	8011e96 <__d2b+0x2e>
 8011eea:	6161      	str	r1, [r4, #20]
 8011eec:	e7e5      	b.n	8011eba <__d2b+0x52>
 8011eee:	a801      	add	r0, sp, #4
 8011ef0:	f7ff fcde 	bl	80118b0 <__lo0bits>
 8011ef4:	9b01      	ldr	r3, [sp, #4]
 8011ef6:	6163      	str	r3, [r4, #20]
 8011ef8:	2201      	movs	r2, #1
 8011efa:	6122      	str	r2, [r4, #16]
 8011efc:	3020      	adds	r0, #32
 8011efe:	e7e3      	b.n	8011ec8 <__d2b+0x60>
 8011f00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011f04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011f08:	f8c9 0000 	str.w	r0, [r9]
 8011f0c:	6918      	ldr	r0, [r3, #16]
 8011f0e:	f7ff fcaf 	bl	8011870 <__hi0bits>
 8011f12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011f16:	e7df      	b.n	8011ed8 <__d2b+0x70>
 8011f18:	08013e5d 	.word	0x08013e5d
 8011f1c:	08013ee8 	.word	0x08013ee8

08011f20 <__ratio>:
 8011f20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f24:	4688      	mov	r8, r1
 8011f26:	4669      	mov	r1, sp
 8011f28:	4681      	mov	r9, r0
 8011f2a:	f7ff ff4d 	bl	8011dc8 <__b2d>
 8011f2e:	a901      	add	r1, sp, #4
 8011f30:	4640      	mov	r0, r8
 8011f32:	ec55 4b10 	vmov	r4, r5, d0
 8011f36:	f7ff ff47 	bl	8011dc8 <__b2d>
 8011f3a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011f3e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011f42:	eba3 0c02 	sub.w	ip, r3, r2
 8011f46:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011f4a:	1a9b      	subs	r3, r3, r2
 8011f4c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011f50:	ec51 0b10 	vmov	r0, r1, d0
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	bfd6      	itet	le
 8011f58:	460a      	movle	r2, r1
 8011f5a:	462a      	movgt	r2, r5
 8011f5c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011f60:	468b      	mov	fp, r1
 8011f62:	462f      	mov	r7, r5
 8011f64:	bfd4      	ite	le
 8011f66:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011f6a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011f6e:	4620      	mov	r0, r4
 8011f70:	ee10 2a10 	vmov	r2, s0
 8011f74:	465b      	mov	r3, fp
 8011f76:	4639      	mov	r1, r7
 8011f78:	f7ee fc90 	bl	800089c <__aeabi_ddiv>
 8011f7c:	ec41 0b10 	vmov	d0, r0, r1
 8011f80:	b003      	add	sp, #12
 8011f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011f86 <__copybits>:
 8011f86:	3901      	subs	r1, #1
 8011f88:	b570      	push	{r4, r5, r6, lr}
 8011f8a:	1149      	asrs	r1, r1, #5
 8011f8c:	6914      	ldr	r4, [r2, #16]
 8011f8e:	3101      	adds	r1, #1
 8011f90:	f102 0314 	add.w	r3, r2, #20
 8011f94:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011f98:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011f9c:	1f05      	subs	r5, r0, #4
 8011f9e:	42a3      	cmp	r3, r4
 8011fa0:	d30c      	bcc.n	8011fbc <__copybits+0x36>
 8011fa2:	1aa3      	subs	r3, r4, r2
 8011fa4:	3b11      	subs	r3, #17
 8011fa6:	f023 0303 	bic.w	r3, r3, #3
 8011faa:	3211      	adds	r2, #17
 8011fac:	42a2      	cmp	r2, r4
 8011fae:	bf88      	it	hi
 8011fb0:	2300      	movhi	r3, #0
 8011fb2:	4418      	add	r0, r3
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	4288      	cmp	r0, r1
 8011fb8:	d305      	bcc.n	8011fc6 <__copybits+0x40>
 8011fba:	bd70      	pop	{r4, r5, r6, pc}
 8011fbc:	f853 6b04 	ldr.w	r6, [r3], #4
 8011fc0:	f845 6f04 	str.w	r6, [r5, #4]!
 8011fc4:	e7eb      	b.n	8011f9e <__copybits+0x18>
 8011fc6:	f840 3b04 	str.w	r3, [r0], #4
 8011fca:	e7f4      	b.n	8011fb6 <__copybits+0x30>

08011fcc <__any_on>:
 8011fcc:	f100 0214 	add.w	r2, r0, #20
 8011fd0:	6900      	ldr	r0, [r0, #16]
 8011fd2:	114b      	asrs	r3, r1, #5
 8011fd4:	4298      	cmp	r0, r3
 8011fd6:	b510      	push	{r4, lr}
 8011fd8:	db11      	blt.n	8011ffe <__any_on+0x32>
 8011fda:	dd0a      	ble.n	8011ff2 <__any_on+0x26>
 8011fdc:	f011 011f 	ands.w	r1, r1, #31
 8011fe0:	d007      	beq.n	8011ff2 <__any_on+0x26>
 8011fe2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011fe6:	fa24 f001 	lsr.w	r0, r4, r1
 8011fea:	fa00 f101 	lsl.w	r1, r0, r1
 8011fee:	428c      	cmp	r4, r1
 8011ff0:	d10b      	bne.n	801200a <__any_on+0x3e>
 8011ff2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011ff6:	4293      	cmp	r3, r2
 8011ff8:	d803      	bhi.n	8012002 <__any_on+0x36>
 8011ffa:	2000      	movs	r0, #0
 8011ffc:	bd10      	pop	{r4, pc}
 8011ffe:	4603      	mov	r3, r0
 8012000:	e7f7      	b.n	8011ff2 <__any_on+0x26>
 8012002:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012006:	2900      	cmp	r1, #0
 8012008:	d0f5      	beq.n	8011ff6 <__any_on+0x2a>
 801200a:	2001      	movs	r0, #1
 801200c:	e7f6      	b.n	8011ffc <__any_on+0x30>

0801200e <_calloc_r>:
 801200e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012010:	fba1 2402 	umull	r2, r4, r1, r2
 8012014:	b94c      	cbnz	r4, 801202a <_calloc_r+0x1c>
 8012016:	4611      	mov	r1, r2
 8012018:	9201      	str	r2, [sp, #4]
 801201a:	f7fc fa85 	bl	800e528 <_malloc_r>
 801201e:	9a01      	ldr	r2, [sp, #4]
 8012020:	4605      	mov	r5, r0
 8012022:	b930      	cbnz	r0, 8012032 <_calloc_r+0x24>
 8012024:	4628      	mov	r0, r5
 8012026:	b003      	add	sp, #12
 8012028:	bd30      	pop	{r4, r5, pc}
 801202a:	220c      	movs	r2, #12
 801202c:	6002      	str	r2, [r0, #0]
 801202e:	2500      	movs	r5, #0
 8012030:	e7f8      	b.n	8012024 <_calloc_r+0x16>
 8012032:	4621      	mov	r1, r4
 8012034:	f7fc fa04 	bl	800e440 <memset>
 8012038:	e7f4      	b.n	8012024 <_calloc_r+0x16>

0801203a <__ssputs_r>:
 801203a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801203e:	688e      	ldr	r6, [r1, #8]
 8012040:	429e      	cmp	r6, r3
 8012042:	4682      	mov	sl, r0
 8012044:	460c      	mov	r4, r1
 8012046:	4690      	mov	r8, r2
 8012048:	461f      	mov	r7, r3
 801204a:	d838      	bhi.n	80120be <__ssputs_r+0x84>
 801204c:	898a      	ldrh	r2, [r1, #12]
 801204e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012052:	d032      	beq.n	80120ba <__ssputs_r+0x80>
 8012054:	6825      	ldr	r5, [r4, #0]
 8012056:	6909      	ldr	r1, [r1, #16]
 8012058:	eba5 0901 	sub.w	r9, r5, r1
 801205c:	6965      	ldr	r5, [r4, #20]
 801205e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012062:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012066:	3301      	adds	r3, #1
 8012068:	444b      	add	r3, r9
 801206a:	106d      	asrs	r5, r5, #1
 801206c:	429d      	cmp	r5, r3
 801206e:	bf38      	it	cc
 8012070:	461d      	movcc	r5, r3
 8012072:	0553      	lsls	r3, r2, #21
 8012074:	d531      	bpl.n	80120da <__ssputs_r+0xa0>
 8012076:	4629      	mov	r1, r5
 8012078:	f7fc fa56 	bl	800e528 <_malloc_r>
 801207c:	4606      	mov	r6, r0
 801207e:	b950      	cbnz	r0, 8012096 <__ssputs_r+0x5c>
 8012080:	230c      	movs	r3, #12
 8012082:	f8ca 3000 	str.w	r3, [sl]
 8012086:	89a3      	ldrh	r3, [r4, #12]
 8012088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801208c:	81a3      	strh	r3, [r4, #12]
 801208e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012096:	6921      	ldr	r1, [r4, #16]
 8012098:	464a      	mov	r2, r9
 801209a:	f7ff fadd 	bl	8011658 <memcpy>
 801209e:	89a3      	ldrh	r3, [r4, #12]
 80120a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80120a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120a8:	81a3      	strh	r3, [r4, #12]
 80120aa:	6126      	str	r6, [r4, #16]
 80120ac:	6165      	str	r5, [r4, #20]
 80120ae:	444e      	add	r6, r9
 80120b0:	eba5 0509 	sub.w	r5, r5, r9
 80120b4:	6026      	str	r6, [r4, #0]
 80120b6:	60a5      	str	r5, [r4, #8]
 80120b8:	463e      	mov	r6, r7
 80120ba:	42be      	cmp	r6, r7
 80120bc:	d900      	bls.n	80120c0 <__ssputs_r+0x86>
 80120be:	463e      	mov	r6, r7
 80120c0:	6820      	ldr	r0, [r4, #0]
 80120c2:	4632      	mov	r2, r6
 80120c4:	4641      	mov	r1, r8
 80120c6:	f000 fd81 	bl	8012bcc <memmove>
 80120ca:	68a3      	ldr	r3, [r4, #8]
 80120cc:	1b9b      	subs	r3, r3, r6
 80120ce:	60a3      	str	r3, [r4, #8]
 80120d0:	6823      	ldr	r3, [r4, #0]
 80120d2:	4433      	add	r3, r6
 80120d4:	6023      	str	r3, [r4, #0]
 80120d6:	2000      	movs	r0, #0
 80120d8:	e7db      	b.n	8012092 <__ssputs_r+0x58>
 80120da:	462a      	mov	r2, r5
 80120dc:	f000 fd90 	bl	8012c00 <_realloc_r>
 80120e0:	4606      	mov	r6, r0
 80120e2:	2800      	cmp	r0, #0
 80120e4:	d1e1      	bne.n	80120aa <__ssputs_r+0x70>
 80120e6:	6921      	ldr	r1, [r4, #16]
 80120e8:	4650      	mov	r0, sl
 80120ea:	f7fc f9b1 	bl	800e450 <_free_r>
 80120ee:	e7c7      	b.n	8012080 <__ssputs_r+0x46>

080120f0 <_svfiprintf_r>:
 80120f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120f4:	4698      	mov	r8, r3
 80120f6:	898b      	ldrh	r3, [r1, #12]
 80120f8:	061b      	lsls	r3, r3, #24
 80120fa:	b09d      	sub	sp, #116	; 0x74
 80120fc:	4607      	mov	r7, r0
 80120fe:	460d      	mov	r5, r1
 8012100:	4614      	mov	r4, r2
 8012102:	d50e      	bpl.n	8012122 <_svfiprintf_r+0x32>
 8012104:	690b      	ldr	r3, [r1, #16]
 8012106:	b963      	cbnz	r3, 8012122 <_svfiprintf_r+0x32>
 8012108:	2140      	movs	r1, #64	; 0x40
 801210a:	f7fc fa0d 	bl	800e528 <_malloc_r>
 801210e:	6028      	str	r0, [r5, #0]
 8012110:	6128      	str	r0, [r5, #16]
 8012112:	b920      	cbnz	r0, 801211e <_svfiprintf_r+0x2e>
 8012114:	230c      	movs	r3, #12
 8012116:	603b      	str	r3, [r7, #0]
 8012118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801211c:	e0d1      	b.n	80122c2 <_svfiprintf_r+0x1d2>
 801211e:	2340      	movs	r3, #64	; 0x40
 8012120:	616b      	str	r3, [r5, #20]
 8012122:	2300      	movs	r3, #0
 8012124:	9309      	str	r3, [sp, #36]	; 0x24
 8012126:	2320      	movs	r3, #32
 8012128:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801212c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012130:	2330      	movs	r3, #48	; 0x30
 8012132:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80122dc <_svfiprintf_r+0x1ec>
 8012136:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801213a:	f04f 0901 	mov.w	r9, #1
 801213e:	4623      	mov	r3, r4
 8012140:	469a      	mov	sl, r3
 8012142:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012146:	b10a      	cbz	r2, 801214c <_svfiprintf_r+0x5c>
 8012148:	2a25      	cmp	r2, #37	; 0x25
 801214a:	d1f9      	bne.n	8012140 <_svfiprintf_r+0x50>
 801214c:	ebba 0b04 	subs.w	fp, sl, r4
 8012150:	d00b      	beq.n	801216a <_svfiprintf_r+0x7a>
 8012152:	465b      	mov	r3, fp
 8012154:	4622      	mov	r2, r4
 8012156:	4629      	mov	r1, r5
 8012158:	4638      	mov	r0, r7
 801215a:	f7ff ff6e 	bl	801203a <__ssputs_r>
 801215e:	3001      	adds	r0, #1
 8012160:	f000 80aa 	beq.w	80122b8 <_svfiprintf_r+0x1c8>
 8012164:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012166:	445a      	add	r2, fp
 8012168:	9209      	str	r2, [sp, #36]	; 0x24
 801216a:	f89a 3000 	ldrb.w	r3, [sl]
 801216e:	2b00      	cmp	r3, #0
 8012170:	f000 80a2 	beq.w	80122b8 <_svfiprintf_r+0x1c8>
 8012174:	2300      	movs	r3, #0
 8012176:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801217a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801217e:	f10a 0a01 	add.w	sl, sl, #1
 8012182:	9304      	str	r3, [sp, #16]
 8012184:	9307      	str	r3, [sp, #28]
 8012186:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801218a:	931a      	str	r3, [sp, #104]	; 0x68
 801218c:	4654      	mov	r4, sl
 801218e:	2205      	movs	r2, #5
 8012190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012194:	4851      	ldr	r0, [pc, #324]	; (80122dc <_svfiprintf_r+0x1ec>)
 8012196:	f7ee f84b 	bl	8000230 <memchr>
 801219a:	9a04      	ldr	r2, [sp, #16]
 801219c:	b9d8      	cbnz	r0, 80121d6 <_svfiprintf_r+0xe6>
 801219e:	06d0      	lsls	r0, r2, #27
 80121a0:	bf44      	itt	mi
 80121a2:	2320      	movmi	r3, #32
 80121a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80121a8:	0711      	lsls	r1, r2, #28
 80121aa:	bf44      	itt	mi
 80121ac:	232b      	movmi	r3, #43	; 0x2b
 80121ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80121b2:	f89a 3000 	ldrb.w	r3, [sl]
 80121b6:	2b2a      	cmp	r3, #42	; 0x2a
 80121b8:	d015      	beq.n	80121e6 <_svfiprintf_r+0xf6>
 80121ba:	9a07      	ldr	r2, [sp, #28]
 80121bc:	4654      	mov	r4, sl
 80121be:	2000      	movs	r0, #0
 80121c0:	f04f 0c0a 	mov.w	ip, #10
 80121c4:	4621      	mov	r1, r4
 80121c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80121ca:	3b30      	subs	r3, #48	; 0x30
 80121cc:	2b09      	cmp	r3, #9
 80121ce:	d94e      	bls.n	801226e <_svfiprintf_r+0x17e>
 80121d0:	b1b0      	cbz	r0, 8012200 <_svfiprintf_r+0x110>
 80121d2:	9207      	str	r2, [sp, #28]
 80121d4:	e014      	b.n	8012200 <_svfiprintf_r+0x110>
 80121d6:	eba0 0308 	sub.w	r3, r0, r8
 80121da:	fa09 f303 	lsl.w	r3, r9, r3
 80121de:	4313      	orrs	r3, r2
 80121e0:	9304      	str	r3, [sp, #16]
 80121e2:	46a2      	mov	sl, r4
 80121e4:	e7d2      	b.n	801218c <_svfiprintf_r+0x9c>
 80121e6:	9b03      	ldr	r3, [sp, #12]
 80121e8:	1d19      	adds	r1, r3, #4
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	9103      	str	r1, [sp, #12]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	bfbb      	ittet	lt
 80121f2:	425b      	neglt	r3, r3
 80121f4:	f042 0202 	orrlt.w	r2, r2, #2
 80121f8:	9307      	strge	r3, [sp, #28]
 80121fa:	9307      	strlt	r3, [sp, #28]
 80121fc:	bfb8      	it	lt
 80121fe:	9204      	strlt	r2, [sp, #16]
 8012200:	7823      	ldrb	r3, [r4, #0]
 8012202:	2b2e      	cmp	r3, #46	; 0x2e
 8012204:	d10c      	bne.n	8012220 <_svfiprintf_r+0x130>
 8012206:	7863      	ldrb	r3, [r4, #1]
 8012208:	2b2a      	cmp	r3, #42	; 0x2a
 801220a:	d135      	bne.n	8012278 <_svfiprintf_r+0x188>
 801220c:	9b03      	ldr	r3, [sp, #12]
 801220e:	1d1a      	adds	r2, r3, #4
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	9203      	str	r2, [sp, #12]
 8012214:	2b00      	cmp	r3, #0
 8012216:	bfb8      	it	lt
 8012218:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801221c:	3402      	adds	r4, #2
 801221e:	9305      	str	r3, [sp, #20]
 8012220:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80122ec <_svfiprintf_r+0x1fc>
 8012224:	7821      	ldrb	r1, [r4, #0]
 8012226:	2203      	movs	r2, #3
 8012228:	4650      	mov	r0, sl
 801222a:	f7ee f801 	bl	8000230 <memchr>
 801222e:	b140      	cbz	r0, 8012242 <_svfiprintf_r+0x152>
 8012230:	2340      	movs	r3, #64	; 0x40
 8012232:	eba0 000a 	sub.w	r0, r0, sl
 8012236:	fa03 f000 	lsl.w	r0, r3, r0
 801223a:	9b04      	ldr	r3, [sp, #16]
 801223c:	4303      	orrs	r3, r0
 801223e:	3401      	adds	r4, #1
 8012240:	9304      	str	r3, [sp, #16]
 8012242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012246:	4826      	ldr	r0, [pc, #152]	; (80122e0 <_svfiprintf_r+0x1f0>)
 8012248:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801224c:	2206      	movs	r2, #6
 801224e:	f7ed ffef 	bl	8000230 <memchr>
 8012252:	2800      	cmp	r0, #0
 8012254:	d038      	beq.n	80122c8 <_svfiprintf_r+0x1d8>
 8012256:	4b23      	ldr	r3, [pc, #140]	; (80122e4 <_svfiprintf_r+0x1f4>)
 8012258:	bb1b      	cbnz	r3, 80122a2 <_svfiprintf_r+0x1b2>
 801225a:	9b03      	ldr	r3, [sp, #12]
 801225c:	3307      	adds	r3, #7
 801225e:	f023 0307 	bic.w	r3, r3, #7
 8012262:	3308      	adds	r3, #8
 8012264:	9303      	str	r3, [sp, #12]
 8012266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012268:	4433      	add	r3, r6
 801226a:	9309      	str	r3, [sp, #36]	; 0x24
 801226c:	e767      	b.n	801213e <_svfiprintf_r+0x4e>
 801226e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012272:	460c      	mov	r4, r1
 8012274:	2001      	movs	r0, #1
 8012276:	e7a5      	b.n	80121c4 <_svfiprintf_r+0xd4>
 8012278:	2300      	movs	r3, #0
 801227a:	3401      	adds	r4, #1
 801227c:	9305      	str	r3, [sp, #20]
 801227e:	4619      	mov	r1, r3
 8012280:	f04f 0c0a 	mov.w	ip, #10
 8012284:	4620      	mov	r0, r4
 8012286:	f810 2b01 	ldrb.w	r2, [r0], #1
 801228a:	3a30      	subs	r2, #48	; 0x30
 801228c:	2a09      	cmp	r2, #9
 801228e:	d903      	bls.n	8012298 <_svfiprintf_r+0x1a8>
 8012290:	2b00      	cmp	r3, #0
 8012292:	d0c5      	beq.n	8012220 <_svfiprintf_r+0x130>
 8012294:	9105      	str	r1, [sp, #20]
 8012296:	e7c3      	b.n	8012220 <_svfiprintf_r+0x130>
 8012298:	fb0c 2101 	mla	r1, ip, r1, r2
 801229c:	4604      	mov	r4, r0
 801229e:	2301      	movs	r3, #1
 80122a0:	e7f0      	b.n	8012284 <_svfiprintf_r+0x194>
 80122a2:	ab03      	add	r3, sp, #12
 80122a4:	9300      	str	r3, [sp, #0]
 80122a6:	462a      	mov	r2, r5
 80122a8:	4b0f      	ldr	r3, [pc, #60]	; (80122e8 <_svfiprintf_r+0x1f8>)
 80122aa:	a904      	add	r1, sp, #16
 80122ac:	4638      	mov	r0, r7
 80122ae:	f7fc fa4f 	bl	800e750 <_printf_float>
 80122b2:	1c42      	adds	r2, r0, #1
 80122b4:	4606      	mov	r6, r0
 80122b6:	d1d6      	bne.n	8012266 <_svfiprintf_r+0x176>
 80122b8:	89ab      	ldrh	r3, [r5, #12]
 80122ba:	065b      	lsls	r3, r3, #25
 80122bc:	f53f af2c 	bmi.w	8012118 <_svfiprintf_r+0x28>
 80122c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80122c2:	b01d      	add	sp, #116	; 0x74
 80122c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122c8:	ab03      	add	r3, sp, #12
 80122ca:	9300      	str	r3, [sp, #0]
 80122cc:	462a      	mov	r2, r5
 80122ce:	4b06      	ldr	r3, [pc, #24]	; (80122e8 <_svfiprintf_r+0x1f8>)
 80122d0:	a904      	add	r1, sp, #16
 80122d2:	4638      	mov	r0, r7
 80122d4:	f7fc fce0 	bl	800ec98 <_printf_i>
 80122d8:	e7eb      	b.n	80122b2 <_svfiprintf_r+0x1c2>
 80122da:	bf00      	nop
 80122dc:	08014044 	.word	0x08014044
 80122e0:	0801404e 	.word	0x0801404e
 80122e4:	0800e751 	.word	0x0800e751
 80122e8:	0801203b 	.word	0x0801203b
 80122ec:	0801404a 	.word	0x0801404a

080122f0 <__sfputc_r>:
 80122f0:	6893      	ldr	r3, [r2, #8]
 80122f2:	3b01      	subs	r3, #1
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	b410      	push	{r4}
 80122f8:	6093      	str	r3, [r2, #8]
 80122fa:	da08      	bge.n	801230e <__sfputc_r+0x1e>
 80122fc:	6994      	ldr	r4, [r2, #24]
 80122fe:	42a3      	cmp	r3, r4
 8012300:	db01      	blt.n	8012306 <__sfputc_r+0x16>
 8012302:	290a      	cmp	r1, #10
 8012304:	d103      	bne.n	801230e <__sfputc_r+0x1e>
 8012306:	f85d 4b04 	ldr.w	r4, [sp], #4
 801230a:	f000 b969 	b.w	80125e0 <__swbuf_r>
 801230e:	6813      	ldr	r3, [r2, #0]
 8012310:	1c58      	adds	r0, r3, #1
 8012312:	6010      	str	r0, [r2, #0]
 8012314:	7019      	strb	r1, [r3, #0]
 8012316:	4608      	mov	r0, r1
 8012318:	f85d 4b04 	ldr.w	r4, [sp], #4
 801231c:	4770      	bx	lr

0801231e <__sfputs_r>:
 801231e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012320:	4606      	mov	r6, r0
 8012322:	460f      	mov	r7, r1
 8012324:	4614      	mov	r4, r2
 8012326:	18d5      	adds	r5, r2, r3
 8012328:	42ac      	cmp	r4, r5
 801232a:	d101      	bne.n	8012330 <__sfputs_r+0x12>
 801232c:	2000      	movs	r0, #0
 801232e:	e007      	b.n	8012340 <__sfputs_r+0x22>
 8012330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012334:	463a      	mov	r2, r7
 8012336:	4630      	mov	r0, r6
 8012338:	f7ff ffda 	bl	80122f0 <__sfputc_r>
 801233c:	1c43      	adds	r3, r0, #1
 801233e:	d1f3      	bne.n	8012328 <__sfputs_r+0xa>
 8012340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012344 <_vfiprintf_r>:
 8012344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012348:	460d      	mov	r5, r1
 801234a:	b09d      	sub	sp, #116	; 0x74
 801234c:	4614      	mov	r4, r2
 801234e:	4698      	mov	r8, r3
 8012350:	4606      	mov	r6, r0
 8012352:	b118      	cbz	r0, 801235c <_vfiprintf_r+0x18>
 8012354:	6983      	ldr	r3, [r0, #24]
 8012356:	b90b      	cbnz	r3, 801235c <_vfiprintf_r+0x18>
 8012358:	f000 fb32 	bl	80129c0 <__sinit>
 801235c:	4b89      	ldr	r3, [pc, #548]	; (8012584 <_vfiprintf_r+0x240>)
 801235e:	429d      	cmp	r5, r3
 8012360:	d11b      	bne.n	801239a <_vfiprintf_r+0x56>
 8012362:	6875      	ldr	r5, [r6, #4]
 8012364:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012366:	07d9      	lsls	r1, r3, #31
 8012368:	d405      	bmi.n	8012376 <_vfiprintf_r+0x32>
 801236a:	89ab      	ldrh	r3, [r5, #12]
 801236c:	059a      	lsls	r2, r3, #22
 801236e:	d402      	bmi.n	8012376 <_vfiprintf_r+0x32>
 8012370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012372:	f000 fbc3 	bl	8012afc <__retarget_lock_acquire_recursive>
 8012376:	89ab      	ldrh	r3, [r5, #12]
 8012378:	071b      	lsls	r3, r3, #28
 801237a:	d501      	bpl.n	8012380 <_vfiprintf_r+0x3c>
 801237c:	692b      	ldr	r3, [r5, #16]
 801237e:	b9eb      	cbnz	r3, 80123bc <_vfiprintf_r+0x78>
 8012380:	4629      	mov	r1, r5
 8012382:	4630      	mov	r0, r6
 8012384:	f000 f98c 	bl	80126a0 <__swsetup_r>
 8012388:	b1c0      	cbz	r0, 80123bc <_vfiprintf_r+0x78>
 801238a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801238c:	07dc      	lsls	r4, r3, #31
 801238e:	d50e      	bpl.n	80123ae <_vfiprintf_r+0x6a>
 8012390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012394:	b01d      	add	sp, #116	; 0x74
 8012396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801239a:	4b7b      	ldr	r3, [pc, #492]	; (8012588 <_vfiprintf_r+0x244>)
 801239c:	429d      	cmp	r5, r3
 801239e:	d101      	bne.n	80123a4 <_vfiprintf_r+0x60>
 80123a0:	68b5      	ldr	r5, [r6, #8]
 80123a2:	e7df      	b.n	8012364 <_vfiprintf_r+0x20>
 80123a4:	4b79      	ldr	r3, [pc, #484]	; (801258c <_vfiprintf_r+0x248>)
 80123a6:	429d      	cmp	r5, r3
 80123a8:	bf08      	it	eq
 80123aa:	68f5      	ldreq	r5, [r6, #12]
 80123ac:	e7da      	b.n	8012364 <_vfiprintf_r+0x20>
 80123ae:	89ab      	ldrh	r3, [r5, #12]
 80123b0:	0598      	lsls	r0, r3, #22
 80123b2:	d4ed      	bmi.n	8012390 <_vfiprintf_r+0x4c>
 80123b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80123b6:	f000 fba2 	bl	8012afe <__retarget_lock_release_recursive>
 80123ba:	e7e9      	b.n	8012390 <_vfiprintf_r+0x4c>
 80123bc:	2300      	movs	r3, #0
 80123be:	9309      	str	r3, [sp, #36]	; 0x24
 80123c0:	2320      	movs	r3, #32
 80123c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80123c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80123ca:	2330      	movs	r3, #48	; 0x30
 80123cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012590 <_vfiprintf_r+0x24c>
 80123d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80123d4:	f04f 0901 	mov.w	r9, #1
 80123d8:	4623      	mov	r3, r4
 80123da:	469a      	mov	sl, r3
 80123dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123e0:	b10a      	cbz	r2, 80123e6 <_vfiprintf_r+0xa2>
 80123e2:	2a25      	cmp	r2, #37	; 0x25
 80123e4:	d1f9      	bne.n	80123da <_vfiprintf_r+0x96>
 80123e6:	ebba 0b04 	subs.w	fp, sl, r4
 80123ea:	d00b      	beq.n	8012404 <_vfiprintf_r+0xc0>
 80123ec:	465b      	mov	r3, fp
 80123ee:	4622      	mov	r2, r4
 80123f0:	4629      	mov	r1, r5
 80123f2:	4630      	mov	r0, r6
 80123f4:	f7ff ff93 	bl	801231e <__sfputs_r>
 80123f8:	3001      	adds	r0, #1
 80123fa:	f000 80aa 	beq.w	8012552 <_vfiprintf_r+0x20e>
 80123fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012400:	445a      	add	r2, fp
 8012402:	9209      	str	r2, [sp, #36]	; 0x24
 8012404:	f89a 3000 	ldrb.w	r3, [sl]
 8012408:	2b00      	cmp	r3, #0
 801240a:	f000 80a2 	beq.w	8012552 <_vfiprintf_r+0x20e>
 801240e:	2300      	movs	r3, #0
 8012410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012414:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012418:	f10a 0a01 	add.w	sl, sl, #1
 801241c:	9304      	str	r3, [sp, #16]
 801241e:	9307      	str	r3, [sp, #28]
 8012420:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012424:	931a      	str	r3, [sp, #104]	; 0x68
 8012426:	4654      	mov	r4, sl
 8012428:	2205      	movs	r2, #5
 801242a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801242e:	4858      	ldr	r0, [pc, #352]	; (8012590 <_vfiprintf_r+0x24c>)
 8012430:	f7ed fefe 	bl	8000230 <memchr>
 8012434:	9a04      	ldr	r2, [sp, #16]
 8012436:	b9d8      	cbnz	r0, 8012470 <_vfiprintf_r+0x12c>
 8012438:	06d1      	lsls	r1, r2, #27
 801243a:	bf44      	itt	mi
 801243c:	2320      	movmi	r3, #32
 801243e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012442:	0713      	lsls	r3, r2, #28
 8012444:	bf44      	itt	mi
 8012446:	232b      	movmi	r3, #43	; 0x2b
 8012448:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801244c:	f89a 3000 	ldrb.w	r3, [sl]
 8012450:	2b2a      	cmp	r3, #42	; 0x2a
 8012452:	d015      	beq.n	8012480 <_vfiprintf_r+0x13c>
 8012454:	9a07      	ldr	r2, [sp, #28]
 8012456:	4654      	mov	r4, sl
 8012458:	2000      	movs	r0, #0
 801245a:	f04f 0c0a 	mov.w	ip, #10
 801245e:	4621      	mov	r1, r4
 8012460:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012464:	3b30      	subs	r3, #48	; 0x30
 8012466:	2b09      	cmp	r3, #9
 8012468:	d94e      	bls.n	8012508 <_vfiprintf_r+0x1c4>
 801246a:	b1b0      	cbz	r0, 801249a <_vfiprintf_r+0x156>
 801246c:	9207      	str	r2, [sp, #28]
 801246e:	e014      	b.n	801249a <_vfiprintf_r+0x156>
 8012470:	eba0 0308 	sub.w	r3, r0, r8
 8012474:	fa09 f303 	lsl.w	r3, r9, r3
 8012478:	4313      	orrs	r3, r2
 801247a:	9304      	str	r3, [sp, #16]
 801247c:	46a2      	mov	sl, r4
 801247e:	e7d2      	b.n	8012426 <_vfiprintf_r+0xe2>
 8012480:	9b03      	ldr	r3, [sp, #12]
 8012482:	1d19      	adds	r1, r3, #4
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	9103      	str	r1, [sp, #12]
 8012488:	2b00      	cmp	r3, #0
 801248a:	bfbb      	ittet	lt
 801248c:	425b      	neglt	r3, r3
 801248e:	f042 0202 	orrlt.w	r2, r2, #2
 8012492:	9307      	strge	r3, [sp, #28]
 8012494:	9307      	strlt	r3, [sp, #28]
 8012496:	bfb8      	it	lt
 8012498:	9204      	strlt	r2, [sp, #16]
 801249a:	7823      	ldrb	r3, [r4, #0]
 801249c:	2b2e      	cmp	r3, #46	; 0x2e
 801249e:	d10c      	bne.n	80124ba <_vfiprintf_r+0x176>
 80124a0:	7863      	ldrb	r3, [r4, #1]
 80124a2:	2b2a      	cmp	r3, #42	; 0x2a
 80124a4:	d135      	bne.n	8012512 <_vfiprintf_r+0x1ce>
 80124a6:	9b03      	ldr	r3, [sp, #12]
 80124a8:	1d1a      	adds	r2, r3, #4
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	9203      	str	r2, [sp, #12]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	bfb8      	it	lt
 80124b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80124b6:	3402      	adds	r4, #2
 80124b8:	9305      	str	r3, [sp, #20]
 80124ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80125a0 <_vfiprintf_r+0x25c>
 80124be:	7821      	ldrb	r1, [r4, #0]
 80124c0:	2203      	movs	r2, #3
 80124c2:	4650      	mov	r0, sl
 80124c4:	f7ed feb4 	bl	8000230 <memchr>
 80124c8:	b140      	cbz	r0, 80124dc <_vfiprintf_r+0x198>
 80124ca:	2340      	movs	r3, #64	; 0x40
 80124cc:	eba0 000a 	sub.w	r0, r0, sl
 80124d0:	fa03 f000 	lsl.w	r0, r3, r0
 80124d4:	9b04      	ldr	r3, [sp, #16]
 80124d6:	4303      	orrs	r3, r0
 80124d8:	3401      	adds	r4, #1
 80124da:	9304      	str	r3, [sp, #16]
 80124dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124e0:	482c      	ldr	r0, [pc, #176]	; (8012594 <_vfiprintf_r+0x250>)
 80124e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80124e6:	2206      	movs	r2, #6
 80124e8:	f7ed fea2 	bl	8000230 <memchr>
 80124ec:	2800      	cmp	r0, #0
 80124ee:	d03f      	beq.n	8012570 <_vfiprintf_r+0x22c>
 80124f0:	4b29      	ldr	r3, [pc, #164]	; (8012598 <_vfiprintf_r+0x254>)
 80124f2:	bb1b      	cbnz	r3, 801253c <_vfiprintf_r+0x1f8>
 80124f4:	9b03      	ldr	r3, [sp, #12]
 80124f6:	3307      	adds	r3, #7
 80124f8:	f023 0307 	bic.w	r3, r3, #7
 80124fc:	3308      	adds	r3, #8
 80124fe:	9303      	str	r3, [sp, #12]
 8012500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012502:	443b      	add	r3, r7
 8012504:	9309      	str	r3, [sp, #36]	; 0x24
 8012506:	e767      	b.n	80123d8 <_vfiprintf_r+0x94>
 8012508:	fb0c 3202 	mla	r2, ip, r2, r3
 801250c:	460c      	mov	r4, r1
 801250e:	2001      	movs	r0, #1
 8012510:	e7a5      	b.n	801245e <_vfiprintf_r+0x11a>
 8012512:	2300      	movs	r3, #0
 8012514:	3401      	adds	r4, #1
 8012516:	9305      	str	r3, [sp, #20]
 8012518:	4619      	mov	r1, r3
 801251a:	f04f 0c0a 	mov.w	ip, #10
 801251e:	4620      	mov	r0, r4
 8012520:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012524:	3a30      	subs	r2, #48	; 0x30
 8012526:	2a09      	cmp	r2, #9
 8012528:	d903      	bls.n	8012532 <_vfiprintf_r+0x1ee>
 801252a:	2b00      	cmp	r3, #0
 801252c:	d0c5      	beq.n	80124ba <_vfiprintf_r+0x176>
 801252e:	9105      	str	r1, [sp, #20]
 8012530:	e7c3      	b.n	80124ba <_vfiprintf_r+0x176>
 8012532:	fb0c 2101 	mla	r1, ip, r1, r2
 8012536:	4604      	mov	r4, r0
 8012538:	2301      	movs	r3, #1
 801253a:	e7f0      	b.n	801251e <_vfiprintf_r+0x1da>
 801253c:	ab03      	add	r3, sp, #12
 801253e:	9300      	str	r3, [sp, #0]
 8012540:	462a      	mov	r2, r5
 8012542:	4b16      	ldr	r3, [pc, #88]	; (801259c <_vfiprintf_r+0x258>)
 8012544:	a904      	add	r1, sp, #16
 8012546:	4630      	mov	r0, r6
 8012548:	f7fc f902 	bl	800e750 <_printf_float>
 801254c:	4607      	mov	r7, r0
 801254e:	1c78      	adds	r0, r7, #1
 8012550:	d1d6      	bne.n	8012500 <_vfiprintf_r+0x1bc>
 8012552:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012554:	07d9      	lsls	r1, r3, #31
 8012556:	d405      	bmi.n	8012564 <_vfiprintf_r+0x220>
 8012558:	89ab      	ldrh	r3, [r5, #12]
 801255a:	059a      	lsls	r2, r3, #22
 801255c:	d402      	bmi.n	8012564 <_vfiprintf_r+0x220>
 801255e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012560:	f000 facd 	bl	8012afe <__retarget_lock_release_recursive>
 8012564:	89ab      	ldrh	r3, [r5, #12]
 8012566:	065b      	lsls	r3, r3, #25
 8012568:	f53f af12 	bmi.w	8012390 <_vfiprintf_r+0x4c>
 801256c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801256e:	e711      	b.n	8012394 <_vfiprintf_r+0x50>
 8012570:	ab03      	add	r3, sp, #12
 8012572:	9300      	str	r3, [sp, #0]
 8012574:	462a      	mov	r2, r5
 8012576:	4b09      	ldr	r3, [pc, #36]	; (801259c <_vfiprintf_r+0x258>)
 8012578:	a904      	add	r1, sp, #16
 801257a:	4630      	mov	r0, r6
 801257c:	f7fc fb8c 	bl	800ec98 <_printf_i>
 8012580:	e7e4      	b.n	801254c <_vfiprintf_r+0x208>
 8012582:	bf00      	nop
 8012584:	08014078 	.word	0x08014078
 8012588:	08014098 	.word	0x08014098
 801258c:	08014058 	.word	0x08014058
 8012590:	08014044 	.word	0x08014044
 8012594:	0801404e 	.word	0x0801404e
 8012598:	0800e751 	.word	0x0800e751
 801259c:	0801231f 	.word	0x0801231f
 80125a0:	0801404a 	.word	0x0801404a
 80125a4:	00000000 	.word	0x00000000

080125a8 <nan>:
 80125a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80125b0 <nan+0x8>
 80125ac:	4770      	bx	lr
 80125ae:	bf00      	nop
 80125b0:	00000000 	.word	0x00000000
 80125b4:	7ff80000 	.word	0x7ff80000

080125b8 <strncmp>:
 80125b8:	b510      	push	{r4, lr}
 80125ba:	b17a      	cbz	r2, 80125dc <strncmp+0x24>
 80125bc:	4603      	mov	r3, r0
 80125be:	3901      	subs	r1, #1
 80125c0:	1884      	adds	r4, r0, r2
 80125c2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80125c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80125ca:	4290      	cmp	r0, r2
 80125cc:	d101      	bne.n	80125d2 <strncmp+0x1a>
 80125ce:	42a3      	cmp	r3, r4
 80125d0:	d101      	bne.n	80125d6 <strncmp+0x1e>
 80125d2:	1a80      	subs	r0, r0, r2
 80125d4:	bd10      	pop	{r4, pc}
 80125d6:	2800      	cmp	r0, #0
 80125d8:	d1f3      	bne.n	80125c2 <strncmp+0xa>
 80125da:	e7fa      	b.n	80125d2 <strncmp+0x1a>
 80125dc:	4610      	mov	r0, r2
 80125de:	e7f9      	b.n	80125d4 <strncmp+0x1c>

080125e0 <__swbuf_r>:
 80125e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125e2:	460e      	mov	r6, r1
 80125e4:	4614      	mov	r4, r2
 80125e6:	4605      	mov	r5, r0
 80125e8:	b118      	cbz	r0, 80125f2 <__swbuf_r+0x12>
 80125ea:	6983      	ldr	r3, [r0, #24]
 80125ec:	b90b      	cbnz	r3, 80125f2 <__swbuf_r+0x12>
 80125ee:	f000 f9e7 	bl	80129c0 <__sinit>
 80125f2:	4b21      	ldr	r3, [pc, #132]	; (8012678 <__swbuf_r+0x98>)
 80125f4:	429c      	cmp	r4, r3
 80125f6:	d12b      	bne.n	8012650 <__swbuf_r+0x70>
 80125f8:	686c      	ldr	r4, [r5, #4]
 80125fa:	69a3      	ldr	r3, [r4, #24]
 80125fc:	60a3      	str	r3, [r4, #8]
 80125fe:	89a3      	ldrh	r3, [r4, #12]
 8012600:	071a      	lsls	r2, r3, #28
 8012602:	d52f      	bpl.n	8012664 <__swbuf_r+0x84>
 8012604:	6923      	ldr	r3, [r4, #16]
 8012606:	b36b      	cbz	r3, 8012664 <__swbuf_r+0x84>
 8012608:	6923      	ldr	r3, [r4, #16]
 801260a:	6820      	ldr	r0, [r4, #0]
 801260c:	1ac0      	subs	r0, r0, r3
 801260e:	6963      	ldr	r3, [r4, #20]
 8012610:	b2f6      	uxtb	r6, r6
 8012612:	4283      	cmp	r3, r0
 8012614:	4637      	mov	r7, r6
 8012616:	dc04      	bgt.n	8012622 <__swbuf_r+0x42>
 8012618:	4621      	mov	r1, r4
 801261a:	4628      	mov	r0, r5
 801261c:	f000 f93c 	bl	8012898 <_fflush_r>
 8012620:	bb30      	cbnz	r0, 8012670 <__swbuf_r+0x90>
 8012622:	68a3      	ldr	r3, [r4, #8]
 8012624:	3b01      	subs	r3, #1
 8012626:	60a3      	str	r3, [r4, #8]
 8012628:	6823      	ldr	r3, [r4, #0]
 801262a:	1c5a      	adds	r2, r3, #1
 801262c:	6022      	str	r2, [r4, #0]
 801262e:	701e      	strb	r6, [r3, #0]
 8012630:	6963      	ldr	r3, [r4, #20]
 8012632:	3001      	adds	r0, #1
 8012634:	4283      	cmp	r3, r0
 8012636:	d004      	beq.n	8012642 <__swbuf_r+0x62>
 8012638:	89a3      	ldrh	r3, [r4, #12]
 801263a:	07db      	lsls	r3, r3, #31
 801263c:	d506      	bpl.n	801264c <__swbuf_r+0x6c>
 801263e:	2e0a      	cmp	r6, #10
 8012640:	d104      	bne.n	801264c <__swbuf_r+0x6c>
 8012642:	4621      	mov	r1, r4
 8012644:	4628      	mov	r0, r5
 8012646:	f000 f927 	bl	8012898 <_fflush_r>
 801264a:	b988      	cbnz	r0, 8012670 <__swbuf_r+0x90>
 801264c:	4638      	mov	r0, r7
 801264e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012650:	4b0a      	ldr	r3, [pc, #40]	; (801267c <__swbuf_r+0x9c>)
 8012652:	429c      	cmp	r4, r3
 8012654:	d101      	bne.n	801265a <__swbuf_r+0x7a>
 8012656:	68ac      	ldr	r4, [r5, #8]
 8012658:	e7cf      	b.n	80125fa <__swbuf_r+0x1a>
 801265a:	4b09      	ldr	r3, [pc, #36]	; (8012680 <__swbuf_r+0xa0>)
 801265c:	429c      	cmp	r4, r3
 801265e:	bf08      	it	eq
 8012660:	68ec      	ldreq	r4, [r5, #12]
 8012662:	e7ca      	b.n	80125fa <__swbuf_r+0x1a>
 8012664:	4621      	mov	r1, r4
 8012666:	4628      	mov	r0, r5
 8012668:	f000 f81a 	bl	80126a0 <__swsetup_r>
 801266c:	2800      	cmp	r0, #0
 801266e:	d0cb      	beq.n	8012608 <__swbuf_r+0x28>
 8012670:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012674:	e7ea      	b.n	801264c <__swbuf_r+0x6c>
 8012676:	bf00      	nop
 8012678:	08014078 	.word	0x08014078
 801267c:	08014098 	.word	0x08014098
 8012680:	08014058 	.word	0x08014058

08012684 <__ascii_wctomb>:
 8012684:	b149      	cbz	r1, 801269a <__ascii_wctomb+0x16>
 8012686:	2aff      	cmp	r2, #255	; 0xff
 8012688:	bf85      	ittet	hi
 801268a:	238a      	movhi	r3, #138	; 0x8a
 801268c:	6003      	strhi	r3, [r0, #0]
 801268e:	700a      	strbls	r2, [r1, #0]
 8012690:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8012694:	bf98      	it	ls
 8012696:	2001      	movls	r0, #1
 8012698:	4770      	bx	lr
 801269a:	4608      	mov	r0, r1
 801269c:	4770      	bx	lr
	...

080126a0 <__swsetup_r>:
 80126a0:	4b32      	ldr	r3, [pc, #200]	; (801276c <__swsetup_r+0xcc>)
 80126a2:	b570      	push	{r4, r5, r6, lr}
 80126a4:	681d      	ldr	r5, [r3, #0]
 80126a6:	4606      	mov	r6, r0
 80126a8:	460c      	mov	r4, r1
 80126aa:	b125      	cbz	r5, 80126b6 <__swsetup_r+0x16>
 80126ac:	69ab      	ldr	r3, [r5, #24]
 80126ae:	b913      	cbnz	r3, 80126b6 <__swsetup_r+0x16>
 80126b0:	4628      	mov	r0, r5
 80126b2:	f000 f985 	bl	80129c0 <__sinit>
 80126b6:	4b2e      	ldr	r3, [pc, #184]	; (8012770 <__swsetup_r+0xd0>)
 80126b8:	429c      	cmp	r4, r3
 80126ba:	d10f      	bne.n	80126dc <__swsetup_r+0x3c>
 80126bc:	686c      	ldr	r4, [r5, #4]
 80126be:	89a3      	ldrh	r3, [r4, #12]
 80126c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80126c4:	0719      	lsls	r1, r3, #28
 80126c6:	d42c      	bmi.n	8012722 <__swsetup_r+0x82>
 80126c8:	06dd      	lsls	r5, r3, #27
 80126ca:	d411      	bmi.n	80126f0 <__swsetup_r+0x50>
 80126cc:	2309      	movs	r3, #9
 80126ce:	6033      	str	r3, [r6, #0]
 80126d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80126d4:	81a3      	strh	r3, [r4, #12]
 80126d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80126da:	e03e      	b.n	801275a <__swsetup_r+0xba>
 80126dc:	4b25      	ldr	r3, [pc, #148]	; (8012774 <__swsetup_r+0xd4>)
 80126de:	429c      	cmp	r4, r3
 80126e0:	d101      	bne.n	80126e6 <__swsetup_r+0x46>
 80126e2:	68ac      	ldr	r4, [r5, #8]
 80126e4:	e7eb      	b.n	80126be <__swsetup_r+0x1e>
 80126e6:	4b24      	ldr	r3, [pc, #144]	; (8012778 <__swsetup_r+0xd8>)
 80126e8:	429c      	cmp	r4, r3
 80126ea:	bf08      	it	eq
 80126ec:	68ec      	ldreq	r4, [r5, #12]
 80126ee:	e7e6      	b.n	80126be <__swsetup_r+0x1e>
 80126f0:	0758      	lsls	r0, r3, #29
 80126f2:	d512      	bpl.n	801271a <__swsetup_r+0x7a>
 80126f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80126f6:	b141      	cbz	r1, 801270a <__swsetup_r+0x6a>
 80126f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80126fc:	4299      	cmp	r1, r3
 80126fe:	d002      	beq.n	8012706 <__swsetup_r+0x66>
 8012700:	4630      	mov	r0, r6
 8012702:	f7fb fea5 	bl	800e450 <_free_r>
 8012706:	2300      	movs	r3, #0
 8012708:	6363      	str	r3, [r4, #52]	; 0x34
 801270a:	89a3      	ldrh	r3, [r4, #12]
 801270c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012710:	81a3      	strh	r3, [r4, #12]
 8012712:	2300      	movs	r3, #0
 8012714:	6063      	str	r3, [r4, #4]
 8012716:	6923      	ldr	r3, [r4, #16]
 8012718:	6023      	str	r3, [r4, #0]
 801271a:	89a3      	ldrh	r3, [r4, #12]
 801271c:	f043 0308 	orr.w	r3, r3, #8
 8012720:	81a3      	strh	r3, [r4, #12]
 8012722:	6923      	ldr	r3, [r4, #16]
 8012724:	b94b      	cbnz	r3, 801273a <__swsetup_r+0x9a>
 8012726:	89a3      	ldrh	r3, [r4, #12]
 8012728:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801272c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012730:	d003      	beq.n	801273a <__swsetup_r+0x9a>
 8012732:	4621      	mov	r1, r4
 8012734:	4630      	mov	r0, r6
 8012736:	f000 fa09 	bl	8012b4c <__smakebuf_r>
 801273a:	89a0      	ldrh	r0, [r4, #12]
 801273c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012740:	f010 0301 	ands.w	r3, r0, #1
 8012744:	d00a      	beq.n	801275c <__swsetup_r+0xbc>
 8012746:	2300      	movs	r3, #0
 8012748:	60a3      	str	r3, [r4, #8]
 801274a:	6963      	ldr	r3, [r4, #20]
 801274c:	425b      	negs	r3, r3
 801274e:	61a3      	str	r3, [r4, #24]
 8012750:	6923      	ldr	r3, [r4, #16]
 8012752:	b943      	cbnz	r3, 8012766 <__swsetup_r+0xc6>
 8012754:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012758:	d1ba      	bne.n	80126d0 <__swsetup_r+0x30>
 801275a:	bd70      	pop	{r4, r5, r6, pc}
 801275c:	0781      	lsls	r1, r0, #30
 801275e:	bf58      	it	pl
 8012760:	6963      	ldrpl	r3, [r4, #20]
 8012762:	60a3      	str	r3, [r4, #8]
 8012764:	e7f4      	b.n	8012750 <__swsetup_r+0xb0>
 8012766:	2000      	movs	r0, #0
 8012768:	e7f7      	b.n	801275a <__swsetup_r+0xba>
 801276a:	bf00      	nop
 801276c:	20001278 	.word	0x20001278
 8012770:	08014078 	.word	0x08014078
 8012774:	08014098 	.word	0x08014098
 8012778:	08014058 	.word	0x08014058

0801277c <abort>:
 801277c:	b508      	push	{r3, lr}
 801277e:	2006      	movs	r0, #6
 8012780:	f000 fa96 	bl	8012cb0 <raise>
 8012784:	2001      	movs	r0, #1
 8012786:	f7f1 fd75 	bl	8004274 <_exit>
	...

0801278c <__sflush_r>:
 801278c:	898a      	ldrh	r2, [r1, #12]
 801278e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012792:	4605      	mov	r5, r0
 8012794:	0710      	lsls	r0, r2, #28
 8012796:	460c      	mov	r4, r1
 8012798:	d458      	bmi.n	801284c <__sflush_r+0xc0>
 801279a:	684b      	ldr	r3, [r1, #4]
 801279c:	2b00      	cmp	r3, #0
 801279e:	dc05      	bgt.n	80127ac <__sflush_r+0x20>
 80127a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	dc02      	bgt.n	80127ac <__sflush_r+0x20>
 80127a6:	2000      	movs	r0, #0
 80127a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80127ae:	2e00      	cmp	r6, #0
 80127b0:	d0f9      	beq.n	80127a6 <__sflush_r+0x1a>
 80127b2:	2300      	movs	r3, #0
 80127b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80127b8:	682f      	ldr	r7, [r5, #0]
 80127ba:	602b      	str	r3, [r5, #0]
 80127bc:	d032      	beq.n	8012824 <__sflush_r+0x98>
 80127be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80127c0:	89a3      	ldrh	r3, [r4, #12]
 80127c2:	075a      	lsls	r2, r3, #29
 80127c4:	d505      	bpl.n	80127d2 <__sflush_r+0x46>
 80127c6:	6863      	ldr	r3, [r4, #4]
 80127c8:	1ac0      	subs	r0, r0, r3
 80127ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80127cc:	b10b      	cbz	r3, 80127d2 <__sflush_r+0x46>
 80127ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80127d0:	1ac0      	subs	r0, r0, r3
 80127d2:	2300      	movs	r3, #0
 80127d4:	4602      	mov	r2, r0
 80127d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80127d8:	6a21      	ldr	r1, [r4, #32]
 80127da:	4628      	mov	r0, r5
 80127dc:	47b0      	blx	r6
 80127de:	1c43      	adds	r3, r0, #1
 80127e0:	89a3      	ldrh	r3, [r4, #12]
 80127e2:	d106      	bne.n	80127f2 <__sflush_r+0x66>
 80127e4:	6829      	ldr	r1, [r5, #0]
 80127e6:	291d      	cmp	r1, #29
 80127e8:	d82c      	bhi.n	8012844 <__sflush_r+0xb8>
 80127ea:	4a2a      	ldr	r2, [pc, #168]	; (8012894 <__sflush_r+0x108>)
 80127ec:	40ca      	lsrs	r2, r1
 80127ee:	07d6      	lsls	r6, r2, #31
 80127f0:	d528      	bpl.n	8012844 <__sflush_r+0xb8>
 80127f2:	2200      	movs	r2, #0
 80127f4:	6062      	str	r2, [r4, #4]
 80127f6:	04d9      	lsls	r1, r3, #19
 80127f8:	6922      	ldr	r2, [r4, #16]
 80127fa:	6022      	str	r2, [r4, #0]
 80127fc:	d504      	bpl.n	8012808 <__sflush_r+0x7c>
 80127fe:	1c42      	adds	r2, r0, #1
 8012800:	d101      	bne.n	8012806 <__sflush_r+0x7a>
 8012802:	682b      	ldr	r3, [r5, #0]
 8012804:	b903      	cbnz	r3, 8012808 <__sflush_r+0x7c>
 8012806:	6560      	str	r0, [r4, #84]	; 0x54
 8012808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801280a:	602f      	str	r7, [r5, #0]
 801280c:	2900      	cmp	r1, #0
 801280e:	d0ca      	beq.n	80127a6 <__sflush_r+0x1a>
 8012810:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012814:	4299      	cmp	r1, r3
 8012816:	d002      	beq.n	801281e <__sflush_r+0x92>
 8012818:	4628      	mov	r0, r5
 801281a:	f7fb fe19 	bl	800e450 <_free_r>
 801281e:	2000      	movs	r0, #0
 8012820:	6360      	str	r0, [r4, #52]	; 0x34
 8012822:	e7c1      	b.n	80127a8 <__sflush_r+0x1c>
 8012824:	6a21      	ldr	r1, [r4, #32]
 8012826:	2301      	movs	r3, #1
 8012828:	4628      	mov	r0, r5
 801282a:	47b0      	blx	r6
 801282c:	1c41      	adds	r1, r0, #1
 801282e:	d1c7      	bne.n	80127c0 <__sflush_r+0x34>
 8012830:	682b      	ldr	r3, [r5, #0]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d0c4      	beq.n	80127c0 <__sflush_r+0x34>
 8012836:	2b1d      	cmp	r3, #29
 8012838:	d001      	beq.n	801283e <__sflush_r+0xb2>
 801283a:	2b16      	cmp	r3, #22
 801283c:	d101      	bne.n	8012842 <__sflush_r+0xb6>
 801283e:	602f      	str	r7, [r5, #0]
 8012840:	e7b1      	b.n	80127a6 <__sflush_r+0x1a>
 8012842:	89a3      	ldrh	r3, [r4, #12]
 8012844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012848:	81a3      	strh	r3, [r4, #12]
 801284a:	e7ad      	b.n	80127a8 <__sflush_r+0x1c>
 801284c:	690f      	ldr	r7, [r1, #16]
 801284e:	2f00      	cmp	r7, #0
 8012850:	d0a9      	beq.n	80127a6 <__sflush_r+0x1a>
 8012852:	0793      	lsls	r3, r2, #30
 8012854:	680e      	ldr	r6, [r1, #0]
 8012856:	bf08      	it	eq
 8012858:	694b      	ldreq	r3, [r1, #20]
 801285a:	600f      	str	r7, [r1, #0]
 801285c:	bf18      	it	ne
 801285e:	2300      	movne	r3, #0
 8012860:	eba6 0807 	sub.w	r8, r6, r7
 8012864:	608b      	str	r3, [r1, #8]
 8012866:	f1b8 0f00 	cmp.w	r8, #0
 801286a:	dd9c      	ble.n	80127a6 <__sflush_r+0x1a>
 801286c:	6a21      	ldr	r1, [r4, #32]
 801286e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012870:	4643      	mov	r3, r8
 8012872:	463a      	mov	r2, r7
 8012874:	4628      	mov	r0, r5
 8012876:	47b0      	blx	r6
 8012878:	2800      	cmp	r0, #0
 801287a:	dc06      	bgt.n	801288a <__sflush_r+0xfe>
 801287c:	89a3      	ldrh	r3, [r4, #12]
 801287e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012882:	81a3      	strh	r3, [r4, #12]
 8012884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012888:	e78e      	b.n	80127a8 <__sflush_r+0x1c>
 801288a:	4407      	add	r7, r0
 801288c:	eba8 0800 	sub.w	r8, r8, r0
 8012890:	e7e9      	b.n	8012866 <__sflush_r+0xda>
 8012892:	bf00      	nop
 8012894:	20400001 	.word	0x20400001

08012898 <_fflush_r>:
 8012898:	b538      	push	{r3, r4, r5, lr}
 801289a:	690b      	ldr	r3, [r1, #16]
 801289c:	4605      	mov	r5, r0
 801289e:	460c      	mov	r4, r1
 80128a0:	b913      	cbnz	r3, 80128a8 <_fflush_r+0x10>
 80128a2:	2500      	movs	r5, #0
 80128a4:	4628      	mov	r0, r5
 80128a6:	bd38      	pop	{r3, r4, r5, pc}
 80128a8:	b118      	cbz	r0, 80128b2 <_fflush_r+0x1a>
 80128aa:	6983      	ldr	r3, [r0, #24]
 80128ac:	b90b      	cbnz	r3, 80128b2 <_fflush_r+0x1a>
 80128ae:	f000 f887 	bl	80129c0 <__sinit>
 80128b2:	4b14      	ldr	r3, [pc, #80]	; (8012904 <_fflush_r+0x6c>)
 80128b4:	429c      	cmp	r4, r3
 80128b6:	d11b      	bne.n	80128f0 <_fflush_r+0x58>
 80128b8:	686c      	ldr	r4, [r5, #4]
 80128ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d0ef      	beq.n	80128a2 <_fflush_r+0xa>
 80128c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80128c4:	07d0      	lsls	r0, r2, #31
 80128c6:	d404      	bmi.n	80128d2 <_fflush_r+0x3a>
 80128c8:	0599      	lsls	r1, r3, #22
 80128ca:	d402      	bmi.n	80128d2 <_fflush_r+0x3a>
 80128cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80128ce:	f000 f915 	bl	8012afc <__retarget_lock_acquire_recursive>
 80128d2:	4628      	mov	r0, r5
 80128d4:	4621      	mov	r1, r4
 80128d6:	f7ff ff59 	bl	801278c <__sflush_r>
 80128da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80128dc:	07da      	lsls	r2, r3, #31
 80128de:	4605      	mov	r5, r0
 80128e0:	d4e0      	bmi.n	80128a4 <_fflush_r+0xc>
 80128e2:	89a3      	ldrh	r3, [r4, #12]
 80128e4:	059b      	lsls	r3, r3, #22
 80128e6:	d4dd      	bmi.n	80128a4 <_fflush_r+0xc>
 80128e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80128ea:	f000 f908 	bl	8012afe <__retarget_lock_release_recursive>
 80128ee:	e7d9      	b.n	80128a4 <_fflush_r+0xc>
 80128f0:	4b05      	ldr	r3, [pc, #20]	; (8012908 <_fflush_r+0x70>)
 80128f2:	429c      	cmp	r4, r3
 80128f4:	d101      	bne.n	80128fa <_fflush_r+0x62>
 80128f6:	68ac      	ldr	r4, [r5, #8]
 80128f8:	e7df      	b.n	80128ba <_fflush_r+0x22>
 80128fa:	4b04      	ldr	r3, [pc, #16]	; (801290c <_fflush_r+0x74>)
 80128fc:	429c      	cmp	r4, r3
 80128fe:	bf08      	it	eq
 8012900:	68ec      	ldreq	r4, [r5, #12]
 8012902:	e7da      	b.n	80128ba <_fflush_r+0x22>
 8012904:	08014078 	.word	0x08014078
 8012908:	08014098 	.word	0x08014098
 801290c:	08014058 	.word	0x08014058

08012910 <std>:
 8012910:	2300      	movs	r3, #0
 8012912:	b510      	push	{r4, lr}
 8012914:	4604      	mov	r4, r0
 8012916:	e9c0 3300 	strd	r3, r3, [r0]
 801291a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801291e:	6083      	str	r3, [r0, #8]
 8012920:	8181      	strh	r1, [r0, #12]
 8012922:	6643      	str	r3, [r0, #100]	; 0x64
 8012924:	81c2      	strh	r2, [r0, #14]
 8012926:	6183      	str	r3, [r0, #24]
 8012928:	4619      	mov	r1, r3
 801292a:	2208      	movs	r2, #8
 801292c:	305c      	adds	r0, #92	; 0x5c
 801292e:	f7fb fd87 	bl	800e440 <memset>
 8012932:	4b05      	ldr	r3, [pc, #20]	; (8012948 <std+0x38>)
 8012934:	6263      	str	r3, [r4, #36]	; 0x24
 8012936:	4b05      	ldr	r3, [pc, #20]	; (801294c <std+0x3c>)
 8012938:	62a3      	str	r3, [r4, #40]	; 0x28
 801293a:	4b05      	ldr	r3, [pc, #20]	; (8012950 <std+0x40>)
 801293c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801293e:	4b05      	ldr	r3, [pc, #20]	; (8012954 <std+0x44>)
 8012940:	6224      	str	r4, [r4, #32]
 8012942:	6323      	str	r3, [r4, #48]	; 0x30
 8012944:	bd10      	pop	{r4, pc}
 8012946:	bf00      	nop
 8012948:	08012ce9 	.word	0x08012ce9
 801294c:	08012d0b 	.word	0x08012d0b
 8012950:	08012d43 	.word	0x08012d43
 8012954:	08012d67 	.word	0x08012d67

08012958 <_cleanup_r>:
 8012958:	4901      	ldr	r1, [pc, #4]	; (8012960 <_cleanup_r+0x8>)
 801295a:	f000 b8af 	b.w	8012abc <_fwalk_reent>
 801295e:	bf00      	nop
 8012960:	08012899 	.word	0x08012899

08012964 <__sfmoreglue>:
 8012964:	b570      	push	{r4, r5, r6, lr}
 8012966:	2268      	movs	r2, #104	; 0x68
 8012968:	1e4d      	subs	r5, r1, #1
 801296a:	4355      	muls	r5, r2
 801296c:	460e      	mov	r6, r1
 801296e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012972:	f7fb fdd9 	bl	800e528 <_malloc_r>
 8012976:	4604      	mov	r4, r0
 8012978:	b140      	cbz	r0, 801298c <__sfmoreglue+0x28>
 801297a:	2100      	movs	r1, #0
 801297c:	e9c0 1600 	strd	r1, r6, [r0]
 8012980:	300c      	adds	r0, #12
 8012982:	60a0      	str	r0, [r4, #8]
 8012984:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012988:	f7fb fd5a 	bl	800e440 <memset>
 801298c:	4620      	mov	r0, r4
 801298e:	bd70      	pop	{r4, r5, r6, pc}

08012990 <__sfp_lock_acquire>:
 8012990:	4801      	ldr	r0, [pc, #4]	; (8012998 <__sfp_lock_acquire+0x8>)
 8012992:	f000 b8b3 	b.w	8012afc <__retarget_lock_acquire_recursive>
 8012996:	bf00      	nop
 8012998:	20013efd 	.word	0x20013efd

0801299c <__sfp_lock_release>:
 801299c:	4801      	ldr	r0, [pc, #4]	; (80129a4 <__sfp_lock_release+0x8>)
 801299e:	f000 b8ae 	b.w	8012afe <__retarget_lock_release_recursive>
 80129a2:	bf00      	nop
 80129a4:	20013efd 	.word	0x20013efd

080129a8 <__sinit_lock_acquire>:
 80129a8:	4801      	ldr	r0, [pc, #4]	; (80129b0 <__sinit_lock_acquire+0x8>)
 80129aa:	f000 b8a7 	b.w	8012afc <__retarget_lock_acquire_recursive>
 80129ae:	bf00      	nop
 80129b0:	20013efe 	.word	0x20013efe

080129b4 <__sinit_lock_release>:
 80129b4:	4801      	ldr	r0, [pc, #4]	; (80129bc <__sinit_lock_release+0x8>)
 80129b6:	f000 b8a2 	b.w	8012afe <__retarget_lock_release_recursive>
 80129ba:	bf00      	nop
 80129bc:	20013efe 	.word	0x20013efe

080129c0 <__sinit>:
 80129c0:	b510      	push	{r4, lr}
 80129c2:	4604      	mov	r4, r0
 80129c4:	f7ff fff0 	bl	80129a8 <__sinit_lock_acquire>
 80129c8:	69a3      	ldr	r3, [r4, #24]
 80129ca:	b11b      	cbz	r3, 80129d4 <__sinit+0x14>
 80129cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129d0:	f7ff bff0 	b.w	80129b4 <__sinit_lock_release>
 80129d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80129d8:	6523      	str	r3, [r4, #80]	; 0x50
 80129da:	4b13      	ldr	r3, [pc, #76]	; (8012a28 <__sinit+0x68>)
 80129dc:	4a13      	ldr	r2, [pc, #76]	; (8012a2c <__sinit+0x6c>)
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80129e2:	42a3      	cmp	r3, r4
 80129e4:	bf04      	itt	eq
 80129e6:	2301      	moveq	r3, #1
 80129e8:	61a3      	streq	r3, [r4, #24]
 80129ea:	4620      	mov	r0, r4
 80129ec:	f000 f820 	bl	8012a30 <__sfp>
 80129f0:	6060      	str	r0, [r4, #4]
 80129f2:	4620      	mov	r0, r4
 80129f4:	f000 f81c 	bl	8012a30 <__sfp>
 80129f8:	60a0      	str	r0, [r4, #8]
 80129fa:	4620      	mov	r0, r4
 80129fc:	f000 f818 	bl	8012a30 <__sfp>
 8012a00:	2200      	movs	r2, #0
 8012a02:	60e0      	str	r0, [r4, #12]
 8012a04:	2104      	movs	r1, #4
 8012a06:	6860      	ldr	r0, [r4, #4]
 8012a08:	f7ff ff82 	bl	8012910 <std>
 8012a0c:	68a0      	ldr	r0, [r4, #8]
 8012a0e:	2201      	movs	r2, #1
 8012a10:	2109      	movs	r1, #9
 8012a12:	f7ff ff7d 	bl	8012910 <std>
 8012a16:	68e0      	ldr	r0, [r4, #12]
 8012a18:	2202      	movs	r2, #2
 8012a1a:	2112      	movs	r1, #18
 8012a1c:	f7ff ff78 	bl	8012910 <std>
 8012a20:	2301      	movs	r3, #1
 8012a22:	61a3      	str	r3, [r4, #24]
 8012a24:	e7d2      	b.n	80129cc <__sinit+0xc>
 8012a26:	bf00      	nop
 8012a28:	08013bb8 	.word	0x08013bb8
 8012a2c:	08012959 	.word	0x08012959

08012a30 <__sfp>:
 8012a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a32:	4607      	mov	r7, r0
 8012a34:	f7ff ffac 	bl	8012990 <__sfp_lock_acquire>
 8012a38:	4b1e      	ldr	r3, [pc, #120]	; (8012ab4 <__sfp+0x84>)
 8012a3a:	681e      	ldr	r6, [r3, #0]
 8012a3c:	69b3      	ldr	r3, [r6, #24]
 8012a3e:	b913      	cbnz	r3, 8012a46 <__sfp+0x16>
 8012a40:	4630      	mov	r0, r6
 8012a42:	f7ff ffbd 	bl	80129c0 <__sinit>
 8012a46:	3648      	adds	r6, #72	; 0x48
 8012a48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012a4c:	3b01      	subs	r3, #1
 8012a4e:	d503      	bpl.n	8012a58 <__sfp+0x28>
 8012a50:	6833      	ldr	r3, [r6, #0]
 8012a52:	b30b      	cbz	r3, 8012a98 <__sfp+0x68>
 8012a54:	6836      	ldr	r6, [r6, #0]
 8012a56:	e7f7      	b.n	8012a48 <__sfp+0x18>
 8012a58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012a5c:	b9d5      	cbnz	r5, 8012a94 <__sfp+0x64>
 8012a5e:	4b16      	ldr	r3, [pc, #88]	; (8012ab8 <__sfp+0x88>)
 8012a60:	60e3      	str	r3, [r4, #12]
 8012a62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012a66:	6665      	str	r5, [r4, #100]	; 0x64
 8012a68:	f000 f847 	bl	8012afa <__retarget_lock_init_recursive>
 8012a6c:	f7ff ff96 	bl	801299c <__sfp_lock_release>
 8012a70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012a74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012a78:	6025      	str	r5, [r4, #0]
 8012a7a:	61a5      	str	r5, [r4, #24]
 8012a7c:	2208      	movs	r2, #8
 8012a7e:	4629      	mov	r1, r5
 8012a80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012a84:	f7fb fcdc 	bl	800e440 <memset>
 8012a88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012a8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012a90:	4620      	mov	r0, r4
 8012a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a94:	3468      	adds	r4, #104	; 0x68
 8012a96:	e7d9      	b.n	8012a4c <__sfp+0x1c>
 8012a98:	2104      	movs	r1, #4
 8012a9a:	4638      	mov	r0, r7
 8012a9c:	f7ff ff62 	bl	8012964 <__sfmoreglue>
 8012aa0:	4604      	mov	r4, r0
 8012aa2:	6030      	str	r0, [r6, #0]
 8012aa4:	2800      	cmp	r0, #0
 8012aa6:	d1d5      	bne.n	8012a54 <__sfp+0x24>
 8012aa8:	f7ff ff78 	bl	801299c <__sfp_lock_release>
 8012aac:	230c      	movs	r3, #12
 8012aae:	603b      	str	r3, [r7, #0]
 8012ab0:	e7ee      	b.n	8012a90 <__sfp+0x60>
 8012ab2:	bf00      	nop
 8012ab4:	08013bb8 	.word	0x08013bb8
 8012ab8:	ffff0001 	.word	0xffff0001

08012abc <_fwalk_reent>:
 8012abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ac0:	4606      	mov	r6, r0
 8012ac2:	4688      	mov	r8, r1
 8012ac4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012ac8:	2700      	movs	r7, #0
 8012aca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012ace:	f1b9 0901 	subs.w	r9, r9, #1
 8012ad2:	d505      	bpl.n	8012ae0 <_fwalk_reent+0x24>
 8012ad4:	6824      	ldr	r4, [r4, #0]
 8012ad6:	2c00      	cmp	r4, #0
 8012ad8:	d1f7      	bne.n	8012aca <_fwalk_reent+0xe>
 8012ada:	4638      	mov	r0, r7
 8012adc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ae0:	89ab      	ldrh	r3, [r5, #12]
 8012ae2:	2b01      	cmp	r3, #1
 8012ae4:	d907      	bls.n	8012af6 <_fwalk_reent+0x3a>
 8012ae6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012aea:	3301      	adds	r3, #1
 8012aec:	d003      	beq.n	8012af6 <_fwalk_reent+0x3a>
 8012aee:	4629      	mov	r1, r5
 8012af0:	4630      	mov	r0, r6
 8012af2:	47c0      	blx	r8
 8012af4:	4307      	orrs	r7, r0
 8012af6:	3568      	adds	r5, #104	; 0x68
 8012af8:	e7e9      	b.n	8012ace <_fwalk_reent+0x12>

08012afa <__retarget_lock_init_recursive>:
 8012afa:	4770      	bx	lr

08012afc <__retarget_lock_acquire_recursive>:
 8012afc:	4770      	bx	lr

08012afe <__retarget_lock_release_recursive>:
 8012afe:	4770      	bx	lr

08012b00 <__swhatbuf_r>:
 8012b00:	b570      	push	{r4, r5, r6, lr}
 8012b02:	460e      	mov	r6, r1
 8012b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b08:	2900      	cmp	r1, #0
 8012b0a:	b096      	sub	sp, #88	; 0x58
 8012b0c:	4614      	mov	r4, r2
 8012b0e:	461d      	mov	r5, r3
 8012b10:	da08      	bge.n	8012b24 <__swhatbuf_r+0x24>
 8012b12:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012b16:	2200      	movs	r2, #0
 8012b18:	602a      	str	r2, [r5, #0]
 8012b1a:	061a      	lsls	r2, r3, #24
 8012b1c:	d410      	bmi.n	8012b40 <__swhatbuf_r+0x40>
 8012b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012b22:	e00e      	b.n	8012b42 <__swhatbuf_r+0x42>
 8012b24:	466a      	mov	r2, sp
 8012b26:	f000 f945 	bl	8012db4 <_fstat_r>
 8012b2a:	2800      	cmp	r0, #0
 8012b2c:	dbf1      	blt.n	8012b12 <__swhatbuf_r+0x12>
 8012b2e:	9a01      	ldr	r2, [sp, #4]
 8012b30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012b34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012b38:	425a      	negs	r2, r3
 8012b3a:	415a      	adcs	r2, r3
 8012b3c:	602a      	str	r2, [r5, #0]
 8012b3e:	e7ee      	b.n	8012b1e <__swhatbuf_r+0x1e>
 8012b40:	2340      	movs	r3, #64	; 0x40
 8012b42:	2000      	movs	r0, #0
 8012b44:	6023      	str	r3, [r4, #0]
 8012b46:	b016      	add	sp, #88	; 0x58
 8012b48:	bd70      	pop	{r4, r5, r6, pc}
	...

08012b4c <__smakebuf_r>:
 8012b4c:	898b      	ldrh	r3, [r1, #12]
 8012b4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012b50:	079d      	lsls	r5, r3, #30
 8012b52:	4606      	mov	r6, r0
 8012b54:	460c      	mov	r4, r1
 8012b56:	d507      	bpl.n	8012b68 <__smakebuf_r+0x1c>
 8012b58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012b5c:	6023      	str	r3, [r4, #0]
 8012b5e:	6123      	str	r3, [r4, #16]
 8012b60:	2301      	movs	r3, #1
 8012b62:	6163      	str	r3, [r4, #20]
 8012b64:	b002      	add	sp, #8
 8012b66:	bd70      	pop	{r4, r5, r6, pc}
 8012b68:	ab01      	add	r3, sp, #4
 8012b6a:	466a      	mov	r2, sp
 8012b6c:	f7ff ffc8 	bl	8012b00 <__swhatbuf_r>
 8012b70:	9900      	ldr	r1, [sp, #0]
 8012b72:	4605      	mov	r5, r0
 8012b74:	4630      	mov	r0, r6
 8012b76:	f7fb fcd7 	bl	800e528 <_malloc_r>
 8012b7a:	b948      	cbnz	r0, 8012b90 <__smakebuf_r+0x44>
 8012b7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b80:	059a      	lsls	r2, r3, #22
 8012b82:	d4ef      	bmi.n	8012b64 <__smakebuf_r+0x18>
 8012b84:	f023 0303 	bic.w	r3, r3, #3
 8012b88:	f043 0302 	orr.w	r3, r3, #2
 8012b8c:	81a3      	strh	r3, [r4, #12]
 8012b8e:	e7e3      	b.n	8012b58 <__smakebuf_r+0xc>
 8012b90:	4b0d      	ldr	r3, [pc, #52]	; (8012bc8 <__smakebuf_r+0x7c>)
 8012b92:	62b3      	str	r3, [r6, #40]	; 0x28
 8012b94:	89a3      	ldrh	r3, [r4, #12]
 8012b96:	6020      	str	r0, [r4, #0]
 8012b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b9c:	81a3      	strh	r3, [r4, #12]
 8012b9e:	9b00      	ldr	r3, [sp, #0]
 8012ba0:	6163      	str	r3, [r4, #20]
 8012ba2:	9b01      	ldr	r3, [sp, #4]
 8012ba4:	6120      	str	r0, [r4, #16]
 8012ba6:	b15b      	cbz	r3, 8012bc0 <__smakebuf_r+0x74>
 8012ba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012bac:	4630      	mov	r0, r6
 8012bae:	f000 f913 	bl	8012dd8 <_isatty_r>
 8012bb2:	b128      	cbz	r0, 8012bc0 <__smakebuf_r+0x74>
 8012bb4:	89a3      	ldrh	r3, [r4, #12]
 8012bb6:	f023 0303 	bic.w	r3, r3, #3
 8012bba:	f043 0301 	orr.w	r3, r3, #1
 8012bbe:	81a3      	strh	r3, [r4, #12]
 8012bc0:	89a0      	ldrh	r0, [r4, #12]
 8012bc2:	4305      	orrs	r5, r0
 8012bc4:	81a5      	strh	r5, [r4, #12]
 8012bc6:	e7cd      	b.n	8012b64 <__smakebuf_r+0x18>
 8012bc8:	08012959 	.word	0x08012959

08012bcc <memmove>:
 8012bcc:	4288      	cmp	r0, r1
 8012bce:	b510      	push	{r4, lr}
 8012bd0:	eb01 0402 	add.w	r4, r1, r2
 8012bd4:	d902      	bls.n	8012bdc <memmove+0x10>
 8012bd6:	4284      	cmp	r4, r0
 8012bd8:	4623      	mov	r3, r4
 8012bda:	d807      	bhi.n	8012bec <memmove+0x20>
 8012bdc:	1e43      	subs	r3, r0, #1
 8012bde:	42a1      	cmp	r1, r4
 8012be0:	d008      	beq.n	8012bf4 <memmove+0x28>
 8012be2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012be6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012bea:	e7f8      	b.n	8012bde <memmove+0x12>
 8012bec:	4402      	add	r2, r0
 8012bee:	4601      	mov	r1, r0
 8012bf0:	428a      	cmp	r2, r1
 8012bf2:	d100      	bne.n	8012bf6 <memmove+0x2a>
 8012bf4:	bd10      	pop	{r4, pc}
 8012bf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012bfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012bfe:	e7f7      	b.n	8012bf0 <memmove+0x24>

08012c00 <_realloc_r>:
 8012c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c04:	4680      	mov	r8, r0
 8012c06:	4614      	mov	r4, r2
 8012c08:	460e      	mov	r6, r1
 8012c0a:	b921      	cbnz	r1, 8012c16 <_realloc_r+0x16>
 8012c0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c10:	4611      	mov	r1, r2
 8012c12:	f7fb bc89 	b.w	800e528 <_malloc_r>
 8012c16:	b92a      	cbnz	r2, 8012c24 <_realloc_r+0x24>
 8012c18:	f7fb fc1a 	bl	800e450 <_free_r>
 8012c1c:	4625      	mov	r5, r4
 8012c1e:	4628      	mov	r0, r5
 8012c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c24:	f000 f8fa 	bl	8012e1c <_malloc_usable_size_r>
 8012c28:	4284      	cmp	r4, r0
 8012c2a:	4607      	mov	r7, r0
 8012c2c:	d802      	bhi.n	8012c34 <_realloc_r+0x34>
 8012c2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012c32:	d812      	bhi.n	8012c5a <_realloc_r+0x5a>
 8012c34:	4621      	mov	r1, r4
 8012c36:	4640      	mov	r0, r8
 8012c38:	f7fb fc76 	bl	800e528 <_malloc_r>
 8012c3c:	4605      	mov	r5, r0
 8012c3e:	2800      	cmp	r0, #0
 8012c40:	d0ed      	beq.n	8012c1e <_realloc_r+0x1e>
 8012c42:	42bc      	cmp	r4, r7
 8012c44:	4622      	mov	r2, r4
 8012c46:	4631      	mov	r1, r6
 8012c48:	bf28      	it	cs
 8012c4a:	463a      	movcs	r2, r7
 8012c4c:	f7fe fd04 	bl	8011658 <memcpy>
 8012c50:	4631      	mov	r1, r6
 8012c52:	4640      	mov	r0, r8
 8012c54:	f7fb fbfc 	bl	800e450 <_free_r>
 8012c58:	e7e1      	b.n	8012c1e <_realloc_r+0x1e>
 8012c5a:	4635      	mov	r5, r6
 8012c5c:	e7df      	b.n	8012c1e <_realloc_r+0x1e>

08012c5e <_raise_r>:
 8012c5e:	291f      	cmp	r1, #31
 8012c60:	b538      	push	{r3, r4, r5, lr}
 8012c62:	4604      	mov	r4, r0
 8012c64:	460d      	mov	r5, r1
 8012c66:	d904      	bls.n	8012c72 <_raise_r+0x14>
 8012c68:	2316      	movs	r3, #22
 8012c6a:	6003      	str	r3, [r0, #0]
 8012c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012c70:	bd38      	pop	{r3, r4, r5, pc}
 8012c72:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012c74:	b112      	cbz	r2, 8012c7c <_raise_r+0x1e>
 8012c76:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012c7a:	b94b      	cbnz	r3, 8012c90 <_raise_r+0x32>
 8012c7c:	4620      	mov	r0, r4
 8012c7e:	f000 f831 	bl	8012ce4 <_getpid_r>
 8012c82:	462a      	mov	r2, r5
 8012c84:	4601      	mov	r1, r0
 8012c86:	4620      	mov	r0, r4
 8012c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c8c:	f000 b818 	b.w	8012cc0 <_kill_r>
 8012c90:	2b01      	cmp	r3, #1
 8012c92:	d00a      	beq.n	8012caa <_raise_r+0x4c>
 8012c94:	1c59      	adds	r1, r3, #1
 8012c96:	d103      	bne.n	8012ca0 <_raise_r+0x42>
 8012c98:	2316      	movs	r3, #22
 8012c9a:	6003      	str	r3, [r0, #0]
 8012c9c:	2001      	movs	r0, #1
 8012c9e:	e7e7      	b.n	8012c70 <_raise_r+0x12>
 8012ca0:	2400      	movs	r4, #0
 8012ca2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012ca6:	4628      	mov	r0, r5
 8012ca8:	4798      	blx	r3
 8012caa:	2000      	movs	r0, #0
 8012cac:	e7e0      	b.n	8012c70 <_raise_r+0x12>
	...

08012cb0 <raise>:
 8012cb0:	4b02      	ldr	r3, [pc, #8]	; (8012cbc <raise+0xc>)
 8012cb2:	4601      	mov	r1, r0
 8012cb4:	6818      	ldr	r0, [r3, #0]
 8012cb6:	f7ff bfd2 	b.w	8012c5e <_raise_r>
 8012cba:	bf00      	nop
 8012cbc:	20001278 	.word	0x20001278

08012cc0 <_kill_r>:
 8012cc0:	b538      	push	{r3, r4, r5, lr}
 8012cc2:	4d07      	ldr	r5, [pc, #28]	; (8012ce0 <_kill_r+0x20>)
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	4604      	mov	r4, r0
 8012cc8:	4608      	mov	r0, r1
 8012cca:	4611      	mov	r1, r2
 8012ccc:	602b      	str	r3, [r5, #0]
 8012cce:	f7f1 fac9 	bl	8004264 <_kill>
 8012cd2:	1c43      	adds	r3, r0, #1
 8012cd4:	d102      	bne.n	8012cdc <_kill_r+0x1c>
 8012cd6:	682b      	ldr	r3, [r5, #0]
 8012cd8:	b103      	cbz	r3, 8012cdc <_kill_r+0x1c>
 8012cda:	6023      	str	r3, [r4, #0]
 8012cdc:	bd38      	pop	{r3, r4, r5, pc}
 8012cde:	bf00      	nop
 8012ce0:	20013ef8 	.word	0x20013ef8

08012ce4 <_getpid_r>:
 8012ce4:	f7f1 babc 	b.w	8004260 <_getpid>

08012ce8 <__sread>:
 8012ce8:	b510      	push	{r4, lr}
 8012cea:	460c      	mov	r4, r1
 8012cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cf0:	f000 f89c 	bl	8012e2c <_read_r>
 8012cf4:	2800      	cmp	r0, #0
 8012cf6:	bfab      	itete	ge
 8012cf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012cfa:	89a3      	ldrhlt	r3, [r4, #12]
 8012cfc:	181b      	addge	r3, r3, r0
 8012cfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012d02:	bfac      	ite	ge
 8012d04:	6563      	strge	r3, [r4, #84]	; 0x54
 8012d06:	81a3      	strhlt	r3, [r4, #12]
 8012d08:	bd10      	pop	{r4, pc}

08012d0a <__swrite>:
 8012d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d0e:	461f      	mov	r7, r3
 8012d10:	898b      	ldrh	r3, [r1, #12]
 8012d12:	05db      	lsls	r3, r3, #23
 8012d14:	4605      	mov	r5, r0
 8012d16:	460c      	mov	r4, r1
 8012d18:	4616      	mov	r6, r2
 8012d1a:	d505      	bpl.n	8012d28 <__swrite+0x1e>
 8012d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d20:	2302      	movs	r3, #2
 8012d22:	2200      	movs	r2, #0
 8012d24:	f000 f868 	bl	8012df8 <_lseek_r>
 8012d28:	89a3      	ldrh	r3, [r4, #12]
 8012d2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012d32:	81a3      	strh	r3, [r4, #12]
 8012d34:	4632      	mov	r2, r6
 8012d36:	463b      	mov	r3, r7
 8012d38:	4628      	mov	r0, r5
 8012d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d3e:	f000 b817 	b.w	8012d70 <_write_r>

08012d42 <__sseek>:
 8012d42:	b510      	push	{r4, lr}
 8012d44:	460c      	mov	r4, r1
 8012d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d4a:	f000 f855 	bl	8012df8 <_lseek_r>
 8012d4e:	1c43      	adds	r3, r0, #1
 8012d50:	89a3      	ldrh	r3, [r4, #12]
 8012d52:	bf15      	itete	ne
 8012d54:	6560      	strne	r0, [r4, #84]	; 0x54
 8012d56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012d5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012d5e:	81a3      	strheq	r3, [r4, #12]
 8012d60:	bf18      	it	ne
 8012d62:	81a3      	strhne	r3, [r4, #12]
 8012d64:	bd10      	pop	{r4, pc}

08012d66 <__sclose>:
 8012d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d6a:	f000 b813 	b.w	8012d94 <_close_r>
	...

08012d70 <_write_r>:
 8012d70:	b538      	push	{r3, r4, r5, lr}
 8012d72:	4d07      	ldr	r5, [pc, #28]	; (8012d90 <_write_r+0x20>)
 8012d74:	4604      	mov	r4, r0
 8012d76:	4608      	mov	r0, r1
 8012d78:	4611      	mov	r1, r2
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	602a      	str	r2, [r5, #0]
 8012d7e:	461a      	mov	r2, r3
 8012d80:	f7f1 fa8e 	bl	80042a0 <_write>
 8012d84:	1c43      	adds	r3, r0, #1
 8012d86:	d102      	bne.n	8012d8e <_write_r+0x1e>
 8012d88:	682b      	ldr	r3, [r5, #0]
 8012d8a:	b103      	cbz	r3, 8012d8e <_write_r+0x1e>
 8012d8c:	6023      	str	r3, [r4, #0]
 8012d8e:	bd38      	pop	{r3, r4, r5, pc}
 8012d90:	20013ef8 	.word	0x20013ef8

08012d94 <_close_r>:
 8012d94:	b538      	push	{r3, r4, r5, lr}
 8012d96:	4d06      	ldr	r5, [pc, #24]	; (8012db0 <_close_r+0x1c>)
 8012d98:	2300      	movs	r3, #0
 8012d9a:	4604      	mov	r4, r0
 8012d9c:	4608      	mov	r0, r1
 8012d9e:	602b      	str	r3, [r5, #0]
 8012da0:	f7f1 fa8c 	bl	80042bc <_close>
 8012da4:	1c43      	adds	r3, r0, #1
 8012da6:	d102      	bne.n	8012dae <_close_r+0x1a>
 8012da8:	682b      	ldr	r3, [r5, #0]
 8012daa:	b103      	cbz	r3, 8012dae <_close_r+0x1a>
 8012dac:	6023      	str	r3, [r4, #0]
 8012dae:	bd38      	pop	{r3, r4, r5, pc}
 8012db0:	20013ef8 	.word	0x20013ef8

08012db4 <_fstat_r>:
 8012db4:	b538      	push	{r3, r4, r5, lr}
 8012db6:	4d07      	ldr	r5, [pc, #28]	; (8012dd4 <_fstat_r+0x20>)
 8012db8:	2300      	movs	r3, #0
 8012dba:	4604      	mov	r4, r0
 8012dbc:	4608      	mov	r0, r1
 8012dbe:	4611      	mov	r1, r2
 8012dc0:	602b      	str	r3, [r5, #0]
 8012dc2:	f7f1 fa7e 	bl	80042c2 <_fstat>
 8012dc6:	1c43      	adds	r3, r0, #1
 8012dc8:	d102      	bne.n	8012dd0 <_fstat_r+0x1c>
 8012dca:	682b      	ldr	r3, [r5, #0]
 8012dcc:	b103      	cbz	r3, 8012dd0 <_fstat_r+0x1c>
 8012dce:	6023      	str	r3, [r4, #0]
 8012dd0:	bd38      	pop	{r3, r4, r5, pc}
 8012dd2:	bf00      	nop
 8012dd4:	20013ef8 	.word	0x20013ef8

08012dd8 <_isatty_r>:
 8012dd8:	b538      	push	{r3, r4, r5, lr}
 8012dda:	4d06      	ldr	r5, [pc, #24]	; (8012df4 <_isatty_r+0x1c>)
 8012ddc:	2300      	movs	r3, #0
 8012dde:	4604      	mov	r4, r0
 8012de0:	4608      	mov	r0, r1
 8012de2:	602b      	str	r3, [r5, #0]
 8012de4:	f7f1 fa72 	bl	80042cc <_isatty>
 8012de8:	1c43      	adds	r3, r0, #1
 8012dea:	d102      	bne.n	8012df2 <_isatty_r+0x1a>
 8012dec:	682b      	ldr	r3, [r5, #0]
 8012dee:	b103      	cbz	r3, 8012df2 <_isatty_r+0x1a>
 8012df0:	6023      	str	r3, [r4, #0]
 8012df2:	bd38      	pop	{r3, r4, r5, pc}
 8012df4:	20013ef8 	.word	0x20013ef8

08012df8 <_lseek_r>:
 8012df8:	b538      	push	{r3, r4, r5, lr}
 8012dfa:	4d07      	ldr	r5, [pc, #28]	; (8012e18 <_lseek_r+0x20>)
 8012dfc:	4604      	mov	r4, r0
 8012dfe:	4608      	mov	r0, r1
 8012e00:	4611      	mov	r1, r2
 8012e02:	2200      	movs	r2, #0
 8012e04:	602a      	str	r2, [r5, #0]
 8012e06:	461a      	mov	r2, r3
 8012e08:	f7f1 fa62 	bl	80042d0 <_lseek>
 8012e0c:	1c43      	adds	r3, r0, #1
 8012e0e:	d102      	bne.n	8012e16 <_lseek_r+0x1e>
 8012e10:	682b      	ldr	r3, [r5, #0]
 8012e12:	b103      	cbz	r3, 8012e16 <_lseek_r+0x1e>
 8012e14:	6023      	str	r3, [r4, #0]
 8012e16:	bd38      	pop	{r3, r4, r5, pc}
 8012e18:	20013ef8 	.word	0x20013ef8

08012e1c <_malloc_usable_size_r>:
 8012e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e20:	1f18      	subs	r0, r3, #4
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	bfbc      	itt	lt
 8012e26:	580b      	ldrlt	r3, [r1, r0]
 8012e28:	18c0      	addlt	r0, r0, r3
 8012e2a:	4770      	bx	lr

08012e2c <_read_r>:
 8012e2c:	b538      	push	{r3, r4, r5, lr}
 8012e2e:	4d07      	ldr	r5, [pc, #28]	; (8012e4c <_read_r+0x20>)
 8012e30:	4604      	mov	r4, r0
 8012e32:	4608      	mov	r0, r1
 8012e34:	4611      	mov	r1, r2
 8012e36:	2200      	movs	r2, #0
 8012e38:	602a      	str	r2, [r5, #0]
 8012e3a:	461a      	mov	r2, r3
 8012e3c:	f7f1 fa20 	bl	8004280 <_read>
 8012e40:	1c43      	adds	r3, r0, #1
 8012e42:	d102      	bne.n	8012e4a <_read_r+0x1e>
 8012e44:	682b      	ldr	r3, [r5, #0]
 8012e46:	b103      	cbz	r3, 8012e4a <_read_r+0x1e>
 8012e48:	6023      	str	r3, [r4, #0]
 8012e4a:	bd38      	pop	{r3, r4, r5, pc}
 8012e4c:	20013ef8 	.word	0x20013ef8

08012e50 <_gettimeofday>:
 8012e50:	4b02      	ldr	r3, [pc, #8]	; (8012e5c <_gettimeofday+0xc>)
 8012e52:	2258      	movs	r2, #88	; 0x58
 8012e54:	601a      	str	r2, [r3, #0]
 8012e56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e5a:	4770      	bx	lr
 8012e5c:	20013ef8 	.word	0x20013ef8

08012e60 <_init>:
 8012e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e62:	bf00      	nop
 8012e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e66:	bc08      	pop	{r3}
 8012e68:	469e      	mov	lr, r3
 8012e6a:	4770      	bx	lr

08012e6c <_fini>:
 8012e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e6e:	bf00      	nop
 8012e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e72:	bc08      	pop	{r3}
 8012e74:	469e      	mov	lr, r3
 8012e76:	4770      	bx	lr
>>>>>>> render
