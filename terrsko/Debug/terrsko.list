
terrsko.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f748  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e0  0800f928  0800f928  0001f928  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b08  08010b08  0003039c  2**0
                  CONTENTS
  4 .ARM          00000008  08010b08  08010b08  00020b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b10  08010b10  0003039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010b10  08010b10  00020b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010b14  08010b14  00020b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000039c  20000000  08010b18  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005270  2000039c  08010eb4  0003039c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000560c  08010eb4  0003560c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003039c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004e9b5  00000000  00000000  000303cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008fc9  00000000  00000000  0007ed81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00035fa8  00000000  00000000  00087d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002e30  00000000  00000000  000bdcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000033e8  00000000  00000000  000c0b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00039310  00000000  00000000  000c3f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00054105  00000000  00000000  000fd220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001401e1  00000000  00000000  00151325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00291506  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009210  00000000  00000000  00291558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  0029a768  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  0029a78c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000039c 	.word	0x2000039c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f910 	.word	0x0800f910

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200003a0 	.word	0x200003a0
 800021c:	0800f910 	.word	0x0800f910

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc4;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001048:	b510      	push	{r4, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800104c:	2400      	movs	r4, #0
 800104e:	9409      	str	r4, [sp, #36]	; 0x24
 8001050:	940a      	str	r4, [sp, #40]	; 0x28
 8001052:	940b      	str	r4, [sp, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 8001054:	2220      	movs	r2, #32
 8001056:	4621      	mov	r1, r4
 8001058:	a801      	add	r0, sp, #4
 800105a:	f009 ff47 	bl	800aeec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800105e:	4820      	ldr	r0, [pc, #128]	; (80010e0 <MX_ADC1_Init+0x98>)
 8001060:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001064:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001066:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800106a:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800106c:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800106e:	60c4      	str	r4, [r0, #12]
  hadc1.Init.GainCompensation = 0;
 8001070:	6104      	str	r4, [r0, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001072:	6144      	str	r4, [r0, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001074:	2304      	movs	r3, #4
 8001076:	6183      	str	r3, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001078:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800107a:	7744      	strb	r4, [r0, #29]
  hadc1.Init.NbrOfConversion = 1;
 800107c:	2301      	movs	r3, #1
 800107e:	6203      	str	r3, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001080:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001084:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001086:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001088:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800108c:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800108e:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001092:	f002 f9b7 	bl	8003404 <HAL_ADC_Init>
 8001096:	b9c8      	cbnz	r0, 80010cc <MX_ADC1_Init+0x84>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001098:	2300      	movs	r3, #0
 800109a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800109c:	a909      	add	r1, sp, #36	; 0x24
 800109e:	4810      	ldr	r0, [pc, #64]	; (80010e0 <MX_ADC1_Init+0x98>)
 80010a0:	f002 fda0 	bl	8003be4 <HAL_ADCEx_MultiModeConfigChannel>
 80010a4:	b9a8      	cbnz	r0, 80010d2 <MX_ADC1_Init+0x8a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <MX_ADC1_Init+0x9c>)
 80010a8:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010aa:	2306      	movs	r3, #6
 80010ac:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ae:	2300      	movs	r3, #0
 80010b0:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010b2:	227f      	movs	r2, #127	; 0x7f
 80010b4:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010b6:	2204      	movs	r2, #4
 80010b8:	9205      	str	r2, [sp, #20]
  sConfig.Offset = 0;
 80010ba:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010bc:	eb0d 0102 	add.w	r1, sp, r2
 80010c0:	4807      	ldr	r0, [pc, #28]	; (80010e0 <MX_ADC1_Init+0x98>)
 80010c2:	f002 faf3 	bl	80036ac <HAL_ADC_ConfigChannel>
 80010c6:	b938      	cbnz	r0, 80010d8 <MX_ADC1_Init+0x90>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c8:	b00c      	add	sp, #48	; 0x30
 80010ca:	bd10      	pop	{r4, pc}
    Error_Handler();
 80010cc:	f000 feb0 	bl	8001e30 <Error_Handler>
 80010d0:	e7e2      	b.n	8001098 <MX_ADC1_Init+0x50>
    Error_Handler();
 80010d2:	f000 fead 	bl	8001e30 <Error_Handler>
 80010d6:	e7e6      	b.n	80010a6 <MX_ADC1_Init+0x5e>
    Error_Handler();
 80010d8:	f000 feaa 	bl	8001e30 <Error_Handler>
}
 80010dc:	e7f4      	b.n	80010c8 <MX_ADC1_Init+0x80>
 80010de:	bf00      	nop
 80010e0:	200003c0 	.word	0x200003c0
 80010e4:	08600004 	.word	0x08600004

080010e8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80010e8:	b500      	push	{lr}
 80010ea:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ec:	2220      	movs	r2, #32
 80010ee:	2100      	movs	r1, #0
 80010f0:	4668      	mov	r0, sp
 80010f2:	f009 fefb 	bl	800aeec <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010f6:	481b      	ldr	r0, [pc, #108]	; (8001164 <MX_ADC2_Init+0x7c>)
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <MX_ADC2_Init+0x80>)
 80010fa:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010fc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001100:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001102:	2300      	movs	r3, #0
 8001104:	6083      	str	r3, [r0, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001106:	60c3      	str	r3, [r0, #12]
  hadc2.Init.GainCompensation = 0;
 8001108:	6103      	str	r3, [r0, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800110a:	6143      	str	r3, [r0, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800110c:	2204      	movs	r2, #4
 800110e:	6182      	str	r2, [r0, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001110:	7703      	strb	r3, [r0, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001112:	7743      	strb	r3, [r0, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001114:	2201      	movs	r2, #1
 8001116:	6202      	str	r2, [r0, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001118:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800111c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800111e:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001120:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001124:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001126:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800112a:	f002 f96b 	bl	8003404 <HAL_ADC_Init>
 800112e:	b990      	cbnz	r0, 8001156 <MX_ADC2_Init+0x6e>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_ADC2_Init+0x84>)
 8001132:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001134:	2306      	movs	r3, #6
 8001136:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001138:	2300      	movs	r3, #0
 800113a:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800113c:	227f      	movs	r2, #127	; 0x7f
 800113e:	9203      	str	r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001140:	2204      	movs	r2, #4
 8001142:	9204      	str	r2, [sp, #16]
  sConfig.Offset = 0;
 8001144:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001146:	4669      	mov	r1, sp
 8001148:	4806      	ldr	r0, [pc, #24]	; (8001164 <MX_ADC2_Init+0x7c>)
 800114a:	f002 faaf 	bl	80036ac <HAL_ADC_ConfigChannel>
 800114e:	b928      	cbnz	r0, 800115c <MX_ADC2_Init+0x74>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001150:	b009      	add	sp, #36	; 0x24
 8001152:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001156:	f000 fe6b 	bl	8001e30 <Error_Handler>
 800115a:	e7e9      	b.n	8001130 <MX_ADC2_Init+0x48>
    Error_Handler();
 800115c:	f000 fe68 	bl	8001e30 <Error_Handler>
}
 8001160:	e7f6      	b.n	8001150 <MX_ADC2_Init+0x68>
 8001162:	bf00      	nop
 8001164:	2000042c 	.word	0x2000042c
 8001168:	50000100 	.word	0x50000100
 800116c:	14f00020 	.word	0x14f00020

08001170 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001170:	b510      	push	{r4, lr}
 8001172:	b08c      	sub	sp, #48	; 0x30

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001174:	2400      	movs	r4, #0
 8001176:	9409      	str	r4, [sp, #36]	; 0x24
 8001178:	940a      	str	r4, [sp, #40]	; 0x28
 800117a:	940b      	str	r4, [sp, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 800117c:	2220      	movs	r2, #32
 800117e:	4621      	mov	r1, r4
 8001180:	a801      	add	r0, sp, #4
 8001182:	f009 feb3 	bl	800aeec <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001186:	481f      	ldr	r0, [pc, #124]	; (8001204 <MX_ADC3_Init+0x94>)
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <MX_ADC3_Init+0x98>)
 800118a:	6003      	str	r3, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800118c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001190:	6043      	str	r3, [r0, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001192:	6084      	str	r4, [r0, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001194:	60c4      	str	r4, [r0, #12]
  hadc3.Init.GainCompensation = 0;
 8001196:	6104      	str	r4, [r0, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001198:	6144      	str	r4, [r0, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800119a:	2304      	movs	r3, #4
 800119c:	6183      	str	r3, [r0, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800119e:	7704      	strb	r4, [r0, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011a0:	7744      	strb	r4, [r0, #29]
  hadc3.Init.NbrOfConversion = 1;
 80011a2:	2301      	movs	r3, #1
 80011a4:	6203      	str	r3, [r0, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011a6:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011aa:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ac:	6304      	str	r4, [r0, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011ae:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011b2:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80011b4:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011b8:	f002 f924 	bl	8003404 <HAL_ADC_Init>
 80011bc:	b9c8      	cbnz	r0, 80011f2 <MX_ADC3_Init+0x82>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011be:	2300      	movs	r3, #0
 80011c0:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011c2:	a909      	add	r1, sp, #36	; 0x24
 80011c4:	480f      	ldr	r0, [pc, #60]	; (8001204 <MX_ADC3_Init+0x94>)
 80011c6:	f002 fd0d 	bl	8003be4 <HAL_ADCEx_MultiModeConfigChannel>
 80011ca:	b9a8      	cbnz	r0, 80011f8 <MX_ADC3_Init+0x88>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <MX_ADC3_Init+0x9c>)
 80011ce:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d0:	2306      	movs	r3, #6
 80011d2:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011d4:	2300      	movs	r3, #0
 80011d6:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011d8:	227f      	movs	r2, #127	; 0x7f
 80011da:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011dc:	2204      	movs	r2, #4
 80011de:	9205      	str	r2, [sp, #20]
  sConfig.Offset = 0;
 80011e0:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011e2:	eb0d 0102 	add.w	r1, sp, r2
 80011e6:	4807      	ldr	r0, [pc, #28]	; (8001204 <MX_ADC3_Init+0x94>)
 80011e8:	f002 fa60 	bl	80036ac <HAL_ADC_ConfigChannel>
 80011ec:	b938      	cbnz	r0, 80011fe <MX_ADC3_Init+0x8e>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011ee:	b00c      	add	sp, #48	; 0x30
 80011f0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80011f2:	f000 fe1d 	bl	8001e30 <Error_Handler>
 80011f6:	e7e2      	b.n	80011be <MX_ADC3_Init+0x4e>
    Error_Handler();
 80011f8:	f000 fe1a 	bl	8001e30 <Error_Handler>
 80011fc:	e7e6      	b.n	80011cc <MX_ADC3_Init+0x5c>
    Error_Handler();
 80011fe:	f000 fe17 	bl	8001e30 <Error_Handler>
}
 8001202:	e7f4      	b.n	80011ee <MX_ADC3_Init+0x7e>
 8001204:	20000498 	.word	0x20000498
 8001208:	50000400 	.word	0x50000400
 800120c:	21800100 	.word	0x21800100

08001210 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8001210:	b500      	push	{lr}
 8001212:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001214:	2220      	movs	r2, #32
 8001216:	2100      	movs	r1, #0
 8001218:	4668      	mov	r0, sp
 800121a:	f009 fe67 	bl	800aeec <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800121e:	4822      	ldr	r0, [pc, #136]	; (80012a8 <MX_ADC4_Init+0x98>)
 8001220:	4b22      	ldr	r3, [pc, #136]	; (80012ac <MX_ADC4_Init+0x9c>)
 8001222:	6003      	str	r3, [r0, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001224:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001228:	6043      	str	r3, [r0, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800122a:	2300      	movs	r3, #0
 800122c:	6083      	str	r3, [r0, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800122e:	60c3      	str	r3, [r0, #12]
  hadc4.Init.GainCompensation = 0;
 8001230:	6103      	str	r3, [r0, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001232:	2201      	movs	r2, #1
 8001234:	6142      	str	r2, [r0, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001236:	2104      	movs	r1, #4
 8001238:	6181      	str	r1, [r0, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800123a:	7703      	strb	r3, [r0, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 800123c:	7742      	strb	r2, [r0, #29]
  hadc4.Init.NbrOfConversion = 2;
 800123e:	2102      	movs	r1, #2
 8001240:	6201      	str	r1, [r0, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001242:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001246:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001248:	6303      	str	r3, [r0, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800124a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800124e:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8001250:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001254:	f002 f8d6 	bl	8003404 <HAL_ADC_Init>
 8001258:	b9e0      	cbnz	r0, 8001294 <MX_ADC4_Init+0x84>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <MX_ADC4_Init+0xa0>)
 800125c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800125e:	2306      	movs	r3, #6
 8001260:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001262:	2307      	movs	r3, #7
 8001264:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001266:	237f      	movs	r3, #127	; 0x7f
 8001268:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800126a:	2304      	movs	r3, #4
 800126c:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001272:	4669      	mov	r1, sp
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <MX_ADC4_Init+0x98>)
 8001276:	f002 fa19 	bl	80036ac <HAL_ADC_ConfigChannel>
 800127a:	b970      	cbnz	r0, 800129a <MX_ADC4_Init+0x8a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800127c:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <MX_ADC4_Init+0xa4>)
 800127e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001280:	230c      	movs	r3, #12
 8001282:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001284:	4669      	mov	r1, sp
 8001286:	4808      	ldr	r0, [pc, #32]	; (80012a8 <MX_ADC4_Init+0x98>)
 8001288:	f002 fa10 	bl	80036ac <HAL_ADC_ConfigChannel>
 800128c:	b940      	cbnz	r0, 80012a0 <MX_ADC4_Init+0x90>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800128e:	b009      	add	sp, #36	; 0x24
 8001290:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001294:	f000 fdcc 	bl	8001e30 <Error_Handler>
 8001298:	e7df      	b.n	800125a <MX_ADC4_Init+0x4a>
    Error_Handler();
 800129a:	f000 fdc9 	bl	8001e30 <Error_Handler>
 800129e:	e7ed      	b.n	800127c <MX_ADC4_Init+0x6c>
    Error_Handler();
 80012a0:	f000 fdc6 	bl	8001e30 <Error_Handler>
}
 80012a4:	e7f3      	b.n	800128e <MX_ADC4_Init+0x7e>
 80012a6:	bf00      	nop
 80012a8:	20000504 	.word	0x20000504
 80012ac:	50000500 	.word	0x50000500
 80012b0:	10c00010 	.word	0x10c00010
 80012b4:	14f00020 	.word	0x14f00020

080012b8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012b8:	b530      	push	{r4, r5, lr}
 80012ba:	b0a7      	sub	sp, #156	; 0x9c
 80012bc:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	2100      	movs	r1, #0
 80012c0:	9121      	str	r1, [sp, #132]	; 0x84
 80012c2:	9122      	str	r1, [sp, #136]	; 0x88
 80012c4:	9123      	str	r1, [sp, #140]	; 0x8c
 80012c6:	9124      	str	r1, [sp, #144]	; 0x90
 80012c8:	9125      	str	r1, [sp, #148]	; 0x94
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012ca:	2254      	movs	r2, #84	; 0x54
 80012cc:	a80c      	add	r0, sp, #48	; 0x30
 80012ce:	f009 fe0d 	bl	800aeec <memset>
  if(adcHandle->Instance==ADC1)
 80012d2:	6823      	ldr	r3, [r4, #0]
 80012d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d8:	d00c      	beq.n	80012f4 <HAL_ADC_MspInit+0x3c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 80012da:	4a96      	ldr	r2, [pc, #600]	; (8001534 <HAL_ADC_MspInit+0x27c>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d03d      	beq.n	800135c <HAL_ADC_MspInit+0xa4>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 80012e0:	4a95      	ldr	r2, [pc, #596]	; (8001538 <HAL_ADC_MspInit+0x280>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	f000 80a2 	beq.w	800142c <HAL_ADC_MspInit+0x174>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC4)
 80012e8:	4a94      	ldr	r2, [pc, #592]	; (800153c <HAL_ADC_MspInit+0x284>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	f000 80d2 	beq.w	8001494 <HAL_ADC_MspInit+0x1dc>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 80012f0:	b027      	add	sp, #156	; 0x9c
 80012f2:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012f8:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012fa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80012fe:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001300:	a80c      	add	r0, sp, #48	; 0x30
 8001302:	f005 fc9f 	bl	8006c44 <HAL_RCCEx_PeriphCLKConfig>
 8001306:	b9d8      	cbnz	r0, 8001340 <HAL_ADC_MspInit+0x88>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001308:	4a8d      	ldr	r2, [pc, #564]	; (8001540 <HAL_ADC_MspInit+0x288>)
 800130a:	6813      	ldr	r3, [r2, #0]
 800130c:	3301      	adds	r3, #1
 800130e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001310:	2b01      	cmp	r3, #1
 8001312:	d018      	beq.n	8001346 <HAL_ADC_MspInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001314:	4b8b      	ldr	r3, [pc, #556]	; (8001544 <HAL_ADC_MspInit+0x28c>)
 8001316:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001318:	f042 0201 	orr.w	r2, r2, #1
 800131c:	64da      	str	r2, [r3, #76]	; 0x4c
 800131e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	9302      	str	r3, [sp, #8]
 8001326:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AD0_Pin|AD1_Pin|AD2_Pin|AD3_Pin;
 8001328:	230f      	movs	r3, #15
 800132a:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800132c:	2303      	movs	r3, #3
 800132e:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	a921      	add	r1, sp, #132	; 0x84
 8001336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133a:	f003 fa71 	bl	8004820 <HAL_GPIO_Init>
 800133e:	e7d7      	b.n	80012f0 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 8001340:	f000 fd76 	bl	8001e30 <Error_Handler>
 8001344:	e7e0      	b.n	8001308 <HAL_ADC_MspInit+0x50>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001346:	4b7f      	ldr	r3, [pc, #508]	; (8001544 <HAL_ADC_MspInit+0x28c>)
 8001348:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800134a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800134e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	9b01      	ldr	r3, [sp, #4]
 800135a:	e7db      	b.n	8001314 <HAL_ADC_MspInit+0x5c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800135c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001360:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001362:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001366:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001368:	a80c      	add	r0, sp, #48	; 0x30
 800136a:	f005 fc6b 	bl	8006c44 <HAL_RCCEx_PeriphCLKConfig>
 800136e:	2800      	cmp	r0, #0
 8001370:	d14e      	bne.n	8001410 <HAL_ADC_MspInit+0x158>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001372:	4a73      	ldr	r2, [pc, #460]	; (8001540 <HAL_ADC_MspInit+0x288>)
 8001374:	6813      	ldr	r3, [r2, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800137a:	2b01      	cmp	r3, #1
 800137c:	d04b      	beq.n	8001416 <HAL_ADC_MspInit+0x15e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800137e:	4b71      	ldr	r3, [pc, #452]	; (8001544 <HAL_ADC_MspInit+0x28c>)
 8001380:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001382:	f042 0220 	orr.w	r2, r2, #32
 8001386:	64da      	str	r2, [r3, #76]	; 0x4c
 8001388:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800138a:	f002 0220 	and.w	r2, r2, #32
 800138e:	9204      	str	r2, [sp, #16]
 8001390:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001394:	f042 0201 	orr.w	r2, r2, #1
 8001398:	64da      	str	r2, [r3, #76]	; 0x4c
 800139a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800139c:	f002 0201 	and.w	r2, r2, #1
 80013a0:	9205      	str	r2, [sp, #20]
 80013a2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013a6:	f042 0204 	orr.w	r2, r2, #4
 80013aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80013ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013ae:	f002 0204 	and.w	r2, r2, #4
 80013b2:	9206      	str	r2, [sp, #24]
 80013b4:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013b8:	f042 0202 	orr.w	r2, r2, #2
 80013bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80013be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	9307      	str	r3, [sp, #28]
 80013c6:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = AD5_Pin;
 80013c8:	2302      	movs	r3, #2
 80013ca:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013cc:	2503      	movs	r5, #3
 80013ce:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2400      	movs	r4, #0
 80013d2:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(AD5_GPIO_Port, &GPIO_InitStruct);
 80013d4:	a921      	add	r1, sp, #132	; 0x84
 80013d6:	485c      	ldr	r0, [pc, #368]	; (8001548 <HAL_ADC_MspInit+0x290>)
 80013d8:	f003 fa22 	bl	8004820 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AD8_Pin;
 80013dc:	2320      	movs	r3, #32
 80013de:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e0:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(AD8_GPIO_Port, &GPIO_InitStruct);
 80013e4:	a921      	add	r1, sp, #132	; 0x84
 80013e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ea:	f003 fa19 	bl	8004820 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AD4_Pin|AD6_Pin;
 80013ee:	2330      	movs	r3, #48	; 0x30
 80013f0:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f2:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f6:	a921      	add	r1, sp, #132	; 0x84
 80013f8:	4854      	ldr	r0, [pc, #336]	; (800154c <HAL_ADC_MspInit+0x294>)
 80013fa:	f003 fa11 	bl	8004820 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AD7_Pin;
 80013fe:	2304      	movs	r3, #4
 8001400:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001402:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	9423      	str	r4, [sp, #140]	; 0x8c
    HAL_GPIO_Init(AD7_GPIO_Port, &GPIO_InitStruct);
 8001406:	a921      	add	r1, sp, #132	; 0x84
 8001408:	4851      	ldr	r0, [pc, #324]	; (8001550 <HAL_ADC_MspInit+0x298>)
 800140a:	f003 fa09 	bl	8004820 <HAL_GPIO_Init>
 800140e:	e76f      	b.n	80012f0 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 8001410:	f000 fd0e 	bl	8001e30 <Error_Handler>
 8001414:	e7ad      	b.n	8001372 <HAL_ADC_MspInit+0xba>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001416:	4b4b      	ldr	r3, [pc, #300]	; (8001544 <HAL_ADC_MspInit+0x28c>)
 8001418:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800141a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800141e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001426:	9303      	str	r3, [sp, #12]
 8001428:	9b03      	ldr	r3, [sp, #12]
 800142a:	e7a8      	b.n	800137e <HAL_ADC_MspInit+0xc6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800142c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001430:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001432:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001436:	931e      	str	r3, [sp, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001438:	a80c      	add	r0, sp, #48	; 0x30
 800143a:	f005 fc03 	bl	8006c44 <HAL_RCCEx_PeriphCLKConfig>
 800143e:	b9d8      	cbnz	r0, 8001478 <HAL_ADC_MspInit+0x1c0>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001440:	4a44      	ldr	r2, [pc, #272]	; (8001554 <HAL_ADC_MspInit+0x29c>)
 8001442:	6813      	ldr	r3, [r2, #0]
 8001444:	3301      	adds	r3, #1
 8001446:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001448:	2b01      	cmp	r3, #1
 800144a:	d018      	beq.n	800147e <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800144c:	4b3d      	ldr	r3, [pc, #244]	; (8001544 <HAL_ADC_MspInit+0x28c>)
 800144e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001450:	f042 0208 	orr.w	r2, r2, #8
 8001454:	64da      	str	r2, [r3, #76]	; 0x4c
 8001456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	9309      	str	r3, [sp, #36]	; 0x24
 800145e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = AD9_Pin|AD10_Pin|AD11_Pin;
 8001460:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001464:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001466:	2303      	movs	r3, #3
 8001468:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146e:	a921      	add	r1, sp, #132	; 0x84
 8001470:	4839      	ldr	r0, [pc, #228]	; (8001558 <HAL_ADC_MspInit+0x2a0>)
 8001472:	f003 f9d5 	bl	8004820 <HAL_GPIO_Init>
 8001476:	e73b      	b.n	80012f0 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 8001478:	f000 fcda 	bl	8001e30 <Error_Handler>
 800147c:	e7e0      	b.n	8001440 <HAL_ADC_MspInit+0x188>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800147e:	4b31      	ldr	r3, [pc, #196]	; (8001544 <HAL_ADC_MspInit+0x28c>)
 8001480:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001482:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001486:	64da      	str	r2, [r3, #76]	; 0x4c
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148e:	9308      	str	r3, [sp, #32]
 8001490:	9b08      	ldr	r3, [sp, #32]
 8001492:	e7db      	b.n	800144c <HAL_ADC_MspInit+0x194>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001498:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800149a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800149e:	931e      	str	r3, [sp, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a0:	a80c      	add	r0, sp, #48	; 0x30
 80014a2:	f005 fbcf 	bl	8006c44 <HAL_RCCEx_PeriphCLKConfig>
 80014a6:	2800      	cmp	r0, #0
 80014a8:	d133      	bne.n	8001512 <HAL_ADC_MspInit+0x25a>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80014aa:	4a2a      	ldr	r2, [pc, #168]	; (8001554 <HAL_ADC_MspInit+0x29c>)
 80014ac:	6813      	ldr	r3, [r2, #0]
 80014ae:	3301      	adds	r3, #1
 80014b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d030      	beq.n	8001518 <HAL_ADC_MspInit+0x260>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	4b23      	ldr	r3, [pc, #140]	; (8001544 <HAL_ADC_MspInit+0x28c>)
 80014b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014ba:	f042 0202 	orr.w	r2, r2, #2
 80014be:	64da      	str	r2, [r3, #76]	; 0x4c
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80014c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80014ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80014ce:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d0:	2303      	movs	r3, #3
 80014d2:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2500      	movs	r5, #0
 80014d6:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d8:	a921      	add	r1, sp, #132	; 0x84
 80014da:	481d      	ldr	r0, [pc, #116]	; (8001550 <HAL_ADC_MspInit+0x298>)
 80014dc:	f003 f9a0 	bl	8004820 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel5;
 80014e0:	481e      	ldr	r0, [pc, #120]	; (800155c <HAL_ADC_MspInit+0x2a4>)
 80014e2:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <HAL_ADC_MspInit+0x2a8>)
 80014e4:	6003      	str	r3, [r0, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 80014e6:	2326      	movs	r3, #38	; 0x26
 80014e8:	6043      	str	r3, [r0, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ea:	6085      	str	r5, [r0, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ec:	60c5      	str	r5, [r0, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	6103      	str	r3, [r0, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014f6:	6143      	str	r3, [r0, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014fc:	6183      	str	r3, [r0, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 80014fe:	2320      	movs	r3, #32
 8001500:	61c3      	str	r3, [r0, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8001502:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8001504:	f002 fea6 	bl	8004254 <HAL_DMA_Init>
 8001508:	b988      	cbnz	r0, 800152e <HAL_ADC_MspInit+0x276>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <HAL_ADC_MspInit+0x2a4>)
 800150c:	6563      	str	r3, [r4, #84]	; 0x54
 800150e:	629c      	str	r4, [r3, #40]	; 0x28
}
 8001510:	e6ee      	b.n	80012f0 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 8001512:	f000 fc8d 	bl	8001e30 <Error_Handler>
 8001516:	e7c8      	b.n	80014aa <HAL_ADC_MspInit+0x1f2>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001518:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_ADC_MspInit+0x28c>)
 800151a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800151c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001520:	64da      	str	r2, [r3, #76]	; 0x4c
 8001522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001528:	930a      	str	r3, [sp, #40]	; 0x28
 800152a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800152c:	e7c3      	b.n	80014b6 <HAL_ADC_MspInit+0x1fe>
      Error_Handler();
 800152e:	f000 fc7f 	bl	8001e30 <Error_Handler>
 8001532:	e7ea      	b.n	800150a <HAL_ADC_MspInit+0x252>
 8001534:	50000100 	.word	0x50000100
 8001538:	50000400 	.word	0x50000400
 800153c:	50000500 	.word	0x50000500
 8001540:	200003b8 	.word	0x200003b8
 8001544:	40021000 	.word	0x40021000
 8001548:	48001400 	.word	0x48001400
 800154c:	48000800 	.word	0x48000800
 8001550:	48000400 	.word	0x48000400
 8001554:	200003bc 	.word	0x200003bc
 8001558:	48000c00 	.word	0x48000c00
 800155c:	20000570 	.word	0x20000570
 8001560:	40020058 	.word	0x40020058

08001564 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001564:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001566:	4808      	ldr	r0, [pc, #32]	; (8001588 <MX_CRC_Init+0x24>)
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <MX_CRC_Init+0x28>)
 800156a:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001570:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001572:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001574:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001576:	2301      	movs	r3, #1
 8001578:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800157a:	f002 fc89 	bl	8003e90 <HAL_CRC_Init>
 800157e:	b900      	cbnz	r0, 8001582 <MX_CRC_Init+0x1e>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001580:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001582:	f000 fc55 	bl	8001e30 <Error_Handler>
}
 8001586:	e7fb      	b.n	8001580 <MX_CRC_Init+0x1c>
 8001588:	200005d0 	.word	0x200005d0
 800158c:	40023000 	.word	0x40023000

08001590 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8001590:	6802      	ldr	r2, [r0, #0]
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <HAL_CRC_MspInit+0x28>)
 8001594:	429a      	cmp	r2, r3
 8001596:	d000      	beq.n	800159a <HAL_CRC_MspInit+0xa>
 8001598:	4770      	bx	lr
{
 800159a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800159c:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80015a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015a6:	649a      	str	r2, [r3, #72]	; 0x48
 80015a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80015b2:	b002      	add	sp, #8
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023000 	.word	0x40023000

080015bc <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DAC_HandleTypeDef hdac2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80015bc:	b500      	push	{lr}
 80015be:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015c0:	2230      	movs	r2, #48	; 0x30
 80015c2:	2100      	movs	r1, #0
 80015c4:	4668      	mov	r0, sp
 80015c6:	f009 fc91 	bl	800aeec <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015ca:	4811      	ldr	r0, [pc, #68]	; (8001610 <MX_DAC1_Init+0x54>)
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_DAC1_Init+0x58>)
 80015ce:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015d0:	f002 fcd5 	bl	8003f7e <HAL_DAC_Init>
 80015d4:	b9a8      	cbnz	r0, 8001602 <MX_DAC1_Init+0x46>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80015d6:	2302      	movs	r3, #2
 80015d8:	9300      	str	r3, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80015da:	2200      	movs	r2, #0
 80015dc:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80015e0:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015e4:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015e6:	9203      	str	r2, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80015e8:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015ea:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80015ec:	2301      	movs	r3, #1
 80015ee:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015f0:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015f2:	4669      	mov	r1, sp
 80015f4:	4806      	ldr	r0, [pc, #24]	; (8001610 <MX_DAC1_Init+0x54>)
 80015f6:	f002 fcd5 	bl	8003fa4 <HAL_DAC_ConfigChannel>
 80015fa:	b928      	cbnz	r0, 8001608 <MX_DAC1_Init+0x4c>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80015fc:	b00d      	add	sp, #52	; 0x34
 80015fe:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001602:	f000 fc15 	bl	8001e30 <Error_Handler>
 8001606:	e7e6      	b.n	80015d6 <MX_DAC1_Init+0x1a>
    Error_Handler();
 8001608:	f000 fc12 	bl	8001e30 <Error_Handler>
}
 800160c:	e7f6      	b.n	80015fc <MX_DAC1_Init+0x40>
 800160e:	bf00      	nop
 8001610:	200005f4 	.word	0x200005f4
 8001614:	50000800 	.word	0x50000800

08001618 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8001618:	b500      	push	{lr}
 800161a:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800161c:	2230      	movs	r2, #48	; 0x30
 800161e:	2100      	movs	r1, #0
 8001620:	4668      	mov	r0, sp
 8001622:	f009 fc63 	bl	800aeec <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001626:	4811      	ldr	r0, [pc, #68]	; (800166c <MX_DAC2_Init+0x54>)
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <MX_DAC2_Init+0x58>)
 800162a:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 800162c:	f002 fca7 	bl	8003f7e <HAL_DAC_Init>
 8001630:	b9a8      	cbnz	r0, 800165e <MX_DAC2_Init+0x46>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001632:	2302      	movs	r3, #2
 8001634:	9300      	str	r3, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001636:	2200      	movs	r2, #0
 8001638:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800163c:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001640:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001642:	9203      	str	r2, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001644:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001646:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001648:	2301      	movs	r3, #1
 800164a:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800164c:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800164e:	4669      	mov	r1, sp
 8001650:	4806      	ldr	r0, [pc, #24]	; (800166c <MX_DAC2_Init+0x54>)
 8001652:	f002 fca7 	bl	8003fa4 <HAL_DAC_ConfigChannel>
 8001656:	b928      	cbnz	r0, 8001664 <MX_DAC2_Init+0x4c>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8001658:	b00d      	add	sp, #52	; 0x34
 800165a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800165e:	f000 fbe7 	bl	8001e30 <Error_Handler>
 8001662:	e7e6      	b.n	8001632 <MX_DAC2_Init+0x1a>
    Error_Handler();
 8001664:	f000 fbe4 	bl	8001e30 <Error_Handler>
}
 8001668:	e7f6      	b.n	8001658 <MX_DAC2_Init+0x40>
 800166a:	bf00      	nop
 800166c:	20000608 	.word	0x20000608
 8001670:	50000c00 	.word	0x50000c00

08001674 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001674:	b500      	push	{lr}
 8001676:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	2300      	movs	r3, #0
 800167a:	9305      	str	r3, [sp, #20]
 800167c:	9306      	str	r3, [sp, #24]
 800167e:	9307      	str	r3, [sp, #28]
 8001680:	9308      	str	r3, [sp, #32]
 8001682:	9309      	str	r3, [sp, #36]	; 0x24
  if(dacHandle->Instance==DAC1)
 8001684:	6803      	ldr	r3, [r0, #0]
 8001686:	4a21      	ldr	r2, [pc, #132]	; (800170c <HAL_DAC_MspInit+0x98>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d005      	beq.n	8001698 <HAL_DAC_MspInit+0x24>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
  else if(dacHandle->Instance==DAC2)
 800168c:	4a20      	ldr	r2, [pc, #128]	; (8001710 <HAL_DAC_MspInit+0x9c>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d01f      	beq.n	80016d2 <HAL_DAC_MspInit+0x5e>

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8001692:	b00b      	add	sp, #44	; 0x2c
 8001694:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001698:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <HAL_DAC_MspInit+0xa0>)
 800169a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800169c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80016a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016a4:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80016a8:	9201      	str	r2, [sp, #4]
 80016aa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016ae:	f042 0201 	orr.w	r2, r2, #1
 80016b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80016b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	9302      	str	r3, [sp, #8]
 80016bc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DAC1_Pin;
 80016be:	2310      	movs	r3, #16
 80016c0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c2:	2303      	movs	r3, #3
 80016c4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(DAC1_GPIO_Port, &GPIO_InitStruct);
 80016c6:	a905      	add	r1, sp, #20
 80016c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016cc:	f003 f8a8 	bl	8004820 <HAL_GPIO_Init>
 80016d0:	e7df      	b.n	8001692 <HAL_DAC_MspInit+0x1e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <HAL_DAC_MspInit+0xa0>)
 80016d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016d6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80016da:	64da      	str	r2, [r3, #76]	; 0x4c
 80016dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016de:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80016e2:	9203      	str	r2, [sp, #12]
 80016e4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016e8:	f042 0201 	orr.w	r2, r2, #1
 80016ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80016ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	9304      	str	r3, [sp, #16]
 80016f6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = DAC2_Pin;
 80016f8:	2340      	movs	r3, #64	; 0x40
 80016fa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fc:	2303      	movs	r3, #3
 80016fe:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(DAC2_GPIO_Port, &GPIO_InitStruct);
 8001700:	a905      	add	r1, sp, #20
 8001702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001706:	f003 f88b 	bl	8004820 <HAL_GPIO_Init>
}
 800170a:	e7c2      	b.n	8001692 <HAL_DAC_MspInit+0x1e>
 800170c:	50000800 	.word	0x50000800
 8001710:	50000c00 	.word	0x50000c00
 8001714:	40021000 	.word	0x40021000

08001718 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
void MX_DMA_Init(void)
{
 8001718:	b500      	push	{lr}
 800171a:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800171c:	4b2f      	ldr	r3, [pc, #188]	; (80017dc <MX_DMA_Init+0xc4>)
 800171e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001720:	f042 0204 	orr.w	r2, r2, #4
 8001724:	649a      	str	r2, [r3, #72]	; 0x48
 8001726:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001728:	f002 0204 	and.w	r2, r2, #4
 800172c:	9200      	str	r2, [sp, #0]
 800172e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001730:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001732:	f042 0201 	orr.w	r2, r2, #1
 8001736:	649a      	str	r2, [r3, #72]	; 0x48
 8001738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	9b01      	ldr	r3, [sp, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8001742:	4827      	ldr	r0, [pc, #156]	; (80017e0 <MX_DMA_Init+0xc8>)
 8001744:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <MX_DMA_Init+0xcc>)
 8001746:	6003      	str	r3, [r0, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_MEM2MEM;
 8001748:	2300      	movs	r3, #0
 800174a:	6043      	str	r3, [r0, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800174c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001750:	6082      	str	r2, [r0, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8001752:	2240      	movs	r2, #64	; 0x40
 8001754:	60c2      	str	r2, [r0, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_DISABLE;
 8001756:	6103      	str	r3, [r0, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800175c:	6142      	str	r2, [r0, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800175e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001762:	6182      	str	r2, [r0, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8001764:	61c3      	str	r3, [r0, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_HIGH;
 8001766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176a:	6203      	str	r3, [r0, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 800176c:	f002 fd72 	bl	8004254 <HAL_DMA_Init>
 8001770:	bb88      	cbnz	r0, 80017d6 <MX_DMA_Init+0xbe>
    Error_Handler();
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	4611      	mov	r1, r2
 8001776:	200b      	movs	r0, #11
 8001778:	f002 fb30 	bl	8003ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800177c:	200b      	movs	r0, #11
 800177e:	f002 fb65 	bl	8003e4c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	4611      	mov	r1, r2
 8001786:	200d      	movs	r0, #13
 8001788:	f002 fb28 	bl	8003ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800178c:	200d      	movs	r0, #13
 800178e:	f002 fb5d 	bl	8003e4c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	4611      	mov	r1, r2
 8001796:	200e      	movs	r0, #14
 8001798:	f002 fb20 	bl	8003ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800179c:	200e      	movs	r0, #14
 800179e:	f002 fb55 	bl	8003e4c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	4611      	mov	r1, r2
 80017a6:	200f      	movs	r0, #15
 80017a8:	f002 fb18 	bl	8003ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80017ac:	200f      	movs	r0, #15
 80017ae:	f002 fb4d 	bl	8003e4c <HAL_NVIC_EnableIRQ>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b2:	490d      	ldr	r1, [pc, #52]	; (80017e8 <MX_DMA_Init+0xd0>)
 80017b4:	68cb      	ldr	r3, [r1, #12]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <MX_DMA_Init+0xd4>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017be:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80017c2:	6018      	str	r0, [r3, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	68c9      	ldr	r1, [r1, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c6:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017ce:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);

}
 80017d0:	b003      	add	sp, #12
 80017d2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80017d6:	f000 fb2b 	bl	8001e30 <Error_Handler>
 80017da:	e7ca      	b.n	8001772 <MX_DMA_Init+0x5a>
 80017dc:	40021000 	.word	0x40021000
 80017e0:	2000061c 	.word	0x2000061c
 80017e4:	40020008 	.word	0x40020008
 80017e8:	e000ed00 	.word	0xe000ed00
 80017ec:	e000e100 	.word	0xe000e100

080017f0 <MX_FDCAN2_Init>:

FDCAN_HandleTypeDef hfdcan2;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 80017f0:	b508      	push	{r3, lr}
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80017f2:	480f      	ldr	r0, [pc, #60]	; (8001830 <MX_FDCAN2_Init+0x40>)
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <MX_FDCAN2_Init+0x44>)
 80017f6:	6003      	str	r3, [r0, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	6043      	str	r3, [r0, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80017fc:	6083      	str	r3, [r0, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80017fe:	60c3      	str	r3, [r0, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001800:	7403      	strb	r3, [r0, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001802:	7443      	strb	r3, [r0, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001804:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8001806:	2210      	movs	r2, #16
 8001808:	6142      	str	r2, [r0, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800180a:	2201      	movs	r2, #1
 800180c:	6182      	str	r2, [r0, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800180e:	2102      	movs	r1, #2
 8001810:	61c1      	str	r1, [r0, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001812:	6201      	str	r1, [r0, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001814:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001816:	6282      	str	r2, [r0, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001818:	62c2      	str	r2, [r0, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800181a:	6302      	str	r2, [r0, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 800181c:	6343      	str	r3, [r0, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 800181e:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001820:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001822:	f002 ff13 	bl	800464c <HAL_FDCAN_Init>
 8001826:	b900      	cbnz	r0, 800182a <MX_FDCAN2_Init+0x3a>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001828:	bd08      	pop	{r3, pc}
    Error_Handler();
 800182a:	f000 fb01 	bl	8001e30 <Error_Handler>
}
 800182e:	e7fb      	b.n	8001828 <MX_FDCAN2_Init+0x38>
 8001830:	2000067c 	.word	0x2000067c
 8001834:	40006800 	.word	0x40006800

08001838 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001838:	b510      	push	{r4, lr}
 800183a:	b09c      	sub	sp, #112	; 0x70
 800183c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183e:	2100      	movs	r1, #0
 8001840:	9117      	str	r1, [sp, #92]	; 0x5c
 8001842:	9118      	str	r1, [sp, #96]	; 0x60
 8001844:	9119      	str	r1, [sp, #100]	; 0x64
 8001846:	911a      	str	r1, [sp, #104]	; 0x68
 8001848:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800184a:	2254      	movs	r2, #84	; 0x54
 800184c:	a802      	add	r0, sp, #8
 800184e:	f009 fb4d 	bl	800aeec <memset>
  if(fdcanHandle->Instance==FDCAN2)
 8001852:	6822      	ldr	r2, [r4, #0]
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_FDCAN_MspInit+0x84>)
 8001856:	429a      	cmp	r2, r3
 8001858:	d001      	beq.n	800185e <HAL_FDCAN_MspInit+0x26>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 800185a:	b01c      	add	sp, #112	; 0x70
 800185c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800185e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001862:	9302      	str	r3, [sp, #8]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001864:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001868:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800186a:	a802      	add	r0, sp, #8
 800186c:	f005 f9ea 	bl	8006c44 <HAL_RCCEx_PeriphCLKConfig>
 8001870:	bb08      	cbnz	r0, 80018b6 <HAL_FDCAN_MspInit+0x7e>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001872:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <HAL_FDCAN_MspInit+0x88>)
 8001874:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001876:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800187a:	659a      	str	r2, [r3, #88]	; 0x58
 800187c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800187e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001882:	9200      	str	r2, [sp, #0]
 8001884:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001888:	f042 0202 	orr.w	r2, r2, #2
 800188c:	64da      	str	r2, [r3, #76]	; 0x4c
 800188e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	9301      	str	r3, [sp, #4]
 8001896:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 8001898:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800189c:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80018a8:	2309      	movs	r3, #9
 80018aa:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ac:	a917      	add	r1, sp, #92	; 0x5c
 80018ae:	4805      	ldr	r0, [pc, #20]	; (80018c4 <HAL_FDCAN_MspInit+0x8c>)
 80018b0:	f002 ffb6 	bl	8004820 <HAL_GPIO_Init>
}
 80018b4:	e7d1      	b.n	800185a <HAL_FDCAN_MspInit+0x22>
      Error_Handler();
 80018b6:	f000 fabb 	bl	8001e30 <Error_Handler>
 80018ba:	e7da      	b.n	8001872 <HAL_FDCAN_MspInit+0x3a>
 80018bc:	40006800 	.word	0x40006800
 80018c0:	40021000 	.word	0x40021000
 80018c4:	48000400 	.word	0x48000400

080018c8 <HAL_FMC_MspInit>:
  /* USER CODE END FMC_Init 2 */
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80018c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ca:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	2300      	movs	r3, #0
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	9302      	str	r3, [sp, #8]
 80018d2:	9303      	str	r3, [sp, #12]
 80018d4:	9304      	str	r3, [sp, #16]
 80018d6:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 80018d8:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <HAL_FMC_MspInit+0x7c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	b10b      	cbz	r3, 80018e2 <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80018de:	b007      	add	sp, #28
 80018e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 80018e2:	4b18      	ldr	r3, [pc, #96]	; (8001944 <HAL_FMC_MspInit+0x7c>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 80018e8:	4b17      	ldr	r3, [pc, #92]	; (8001948 <HAL_FMC_MspInit+0x80>)
 80018ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018ec:	f042 0201 	orr.w	r2, r2, #1
 80018f0:	651a      	str	r2, [r3, #80]	; 0x50
 80018f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80018fc:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001900:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2602      	movs	r6, #2
 8001904:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001906:	2503      	movs	r5, #3
 8001908:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800190a:	240c      	movs	r4, #12
 800190c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800190e:	a901      	add	r1, sp, #4
 8001910:	480e      	ldr	r0, [pc, #56]	; (800194c <HAL_FMC_MspInit+0x84>)
 8001912:	f002 ff85 	bl	8004820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001916:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800191a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2700      	movs	r7, #0
 8001920:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001922:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001924:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001926:	a901      	add	r1, sp, #4
 8001928:	4809      	ldr	r0, [pc, #36]	; (8001950 <HAL_FMC_MspInit+0x88>)
 800192a:	f002 ff79 	bl	8004820 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 800192e:	2320      	movs	r3, #32
 8001930:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001938:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 800193a:	a901      	add	r1, sp, #4
 800193c:	4805      	ldr	r0, [pc, #20]	; (8001954 <HAL_FMC_MspInit+0x8c>)
 800193e:	f002 ff6f 	bl	8004820 <HAL_GPIO_Init>
 8001942:	e7cc      	b.n	80018de <HAL_FMC_MspInit+0x16>
 8001944:	200006e0 	.word	0x200006e0
 8001948:	40021000 	.word	0x40021000
 800194c:	48001000 	.word	0x48001000
 8001950:	48000c00 	.word	0x48000c00
 8001954:	48001800 	.word	0x48001800

08001958 <MX_FMC_Init>:
{
 8001958:	b510      	push	{r4, lr}
 800195a:	b088      	sub	sp, #32
  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800195c:	2220      	movs	r2, #32
 800195e:	2100      	movs	r1, #0
 8001960:	4668      	mov	r0, sp
 8001962:	f009 fac3 	bl	800aeec <memset>
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001966:	4818      	ldr	r0, [pc, #96]	; (80019c8 <MX_FMC_Init+0x70>)
 8001968:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800196c:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800196e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001972:	6043      	str	r3, [r0, #4]
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001974:	2200      	movs	r2, #0
 8001976:	6082      	str	r2, [r0, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001978:	60c2      	str	r2, [r0, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800197a:	6102      	str	r2, [r0, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800197c:	2110      	movs	r1, #16
 800197e:	6141      	str	r1, [r0, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001980:	6182      	str	r2, [r0, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001982:	61c2      	str	r2, [r0, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001984:	6202      	str	r2, [r0, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198a:	6243      	str	r3, [r0, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800198c:	6282      	str	r2, [r0, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800198e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001990:	6302      	str	r2, [r0, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001992:	6342      	str	r2, [r0, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001994:	6382      	str	r2, [r0, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001996:	63c2      	str	r2, [r0, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8001998:	6442      	str	r2, [r0, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800199a:	6402      	str	r2, [r0, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 800199c:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
  Timing.AddressSetupTime = 1;
 80019a0:	2301      	movs	r3, #1
 80019a2:	9300      	str	r3, [sp, #0]
  Timing.AddressHoldTime = 15;
 80019a4:	240f      	movs	r4, #15
 80019a6:	9401      	str	r4, [sp, #4]
  Timing.DataSetupTime = 1;
 80019a8:	9302      	str	r3, [sp, #8]
  Timing.DataHoldTime = 1;
 80019aa:	9303      	str	r3, [sp, #12]
  Timing.BusTurnAroundDuration = 1;
 80019ac:	9304      	str	r3, [sp, #16]
  Timing.CLKDivision = 16;
 80019ae:	9105      	str	r1, [sp, #20]
  Timing.DataLatency = 17;
 80019b0:	2311      	movs	r3, #17
 80019b2:	9306      	str	r3, [sp, #24]
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80019b4:	4669      	mov	r1, sp
 80019b6:	f005 fb75 	bl	80070a4 <HAL_SRAM_Init>
 80019ba:	b908      	cbnz	r0, 80019c0 <MX_FMC_Init+0x68>
}
 80019bc:	b008      	add	sp, #32
 80019be:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80019c0:	f000 fa36 	bl	8001e30 <Error_Handler>
}
 80019c4:	e7fa      	b.n	80019bc <MX_FMC_Init+0x64>
 80019c6:	bf00      	nop
 80019c8:	200006e4 	.word	0x200006e4

080019cc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80019cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80019ce:	f7ff ff7b 	bl	80018c8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80019d2:	bd08      	pop	{r3, pc}

080019d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019d8:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019da:	2400      	movs	r4, #0
 80019dc:	9407      	str	r4, [sp, #28]
 80019de:	9408      	str	r4, [sp, #32]
 80019e0:	9409      	str	r4, [sp, #36]	; 0x24
 80019e2:	940a      	str	r4, [sp, #40]	; 0x28
 80019e4:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019e6:	4b70      	ldr	r3, [pc, #448]	; (8001ba8 <MX_GPIO_Init+0x1d4>)
 80019e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019ea:	f042 0210 	orr.w	r2, r2, #16
 80019ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80019f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019f2:	f002 0210 	and.w	r2, r2, #16
 80019f6:	9200      	str	r2, [sp, #0]
 80019f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019fc:	f042 0204 	orr.w	r2, r2, #4
 8001a00:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a04:	f002 0204 	and.w	r2, r2, #4
 8001a08:	9201      	str	r2, [sp, #4]
 8001a0a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a0e:	f042 0220 	orr.w	r2, r2, #32
 8001a12:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a16:	f002 0220 	and.w	r2, r2, #32
 8001a1a:	9202      	str	r2, [sp, #8]
 8001a1c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a20:	f042 0201 	orr.w	r2, r2, #1
 8001a24:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a28:	f002 0201 	and.w	r2, r2, #1
 8001a2c:	9203      	str	r2, [sp, #12]
 8001a2e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a32:	f042 0202 	orr.w	r2, r2, #2
 8001a36:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a3a:	f002 0202 	and.w	r2, r2, #2
 8001a3e:	9204      	str	r2, [sp, #16]
 8001a40:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a44:	f042 0208 	orr.w	r2, r2, #8
 8001a48:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a4c:	f002 0208 	and.w	r2, r2, #8
 8001a50:	9205      	str	r2, [sp, #20]
 8001a52:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a5a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a62:	9306      	str	r3, [sp, #24]
 8001a64:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED1_Pin|LED2_Pin|LED3_Pin|LED0_Pin
 8001a66:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8001bb4 <MX_GPIO_Init+0x1e0>
 8001a6a:	4622      	mov	r2, r4
 8001a6c:	f640 013c 	movw	r1, #2108	; 0x83c
 8001a70:	4650      	mov	r0, sl
 8001a72:	f002 ffbf 	bl	80049f4 <HAL_GPIO_WritePin>
                          |ARDUINO_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);
 8001a76:	4f4d      	ldr	r7, [pc, #308]	; (8001bac <MX_GPIO_Init+0x1d8>)
 8001a78:	4622      	mov	r2, r4
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	4638      	mov	r0, r7
 8001a7e:	f002 ffb9 	bl	80049f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 8001a82:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8001bb8 <MX_GPIO_Init+0x1e4>
 8001a86:	4622      	mov	r2, r4
 8001a88:	2180      	movs	r1, #128	; 0x80
 8001a8a:	4648      	mov	r0, r9
 8001a8c:	f002 ffb2 	bl	80049f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001a90:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8001bbc <MX_GPIO_Init+0x1e8>
 8001a94:	4622      	mov	r2, r4
 8001a96:	2108      	movs	r1, #8
 8001a98:	4640      	mov	r0, r8
 8001a9a:	f002 ffab 	bl	80049f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LIN_SLP_Pin|LCD_BKLT_Pin, GPIO_PIN_RESET);
 8001a9e:	f8df b120 	ldr.w	fp, [pc, #288]	; 8001bc0 <MX_GPIO_Init+0x1ec>
 8001aa2:	4622      	mov	r2, r4
 8001aa4:	2160      	movs	r1, #96	; 0x60
 8001aa6:	4658      	mov	r0, fp
 8001aa8:	f002 ffa4 	bl	80049f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001aac:	4e40      	ldr	r6, [pc, #256]	; (8001bb0 <MX_GPIO_Init+0x1dc>)
 8001aae:	4622      	mov	r2, r4
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	4630      	mov	r0, r6
 8001ab4:	f002 ff9e 	bl	80049f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	2102      	movs	r1, #2
 8001abc:	4630      	mov	r0, r6
 8001abe:	f002 ff99 	bl	80049f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = JOY_BTN_Pin|BTN_OK_Pin;
 8001ac2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001ac6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aca:	2501      	movs	r5, #1
 8001acc:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ace:	a907      	add	r1, sp, #28
 8001ad0:	4638      	mov	r0, r7
 8001ad2:	f002 fea5 	bl	8004820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_ESC_Pin;
 8001ad6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ada:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001adc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ae0:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae2:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(BTN_ESC_GPIO_Port, &GPIO_InitStruct);
 8001ae4:	a907      	add	r1, sp, #28
 8001ae6:	4638      	mov	r0, r7
 8001ae8:	f002 fe9a 	bl	8004820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|ARDUINO_CS_Pin;
 8001aec:	f640 0338 	movw	r3, #2104	; 0x838
 8001af0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af2:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001af8:	a907      	add	r1, sp, #28
 8001afa:	4650      	mov	r0, sl
 8001afc:	f002 fe90 	bl	8004820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin;
 8001b00:	230f      	movs	r3, #15
 8001b02:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b04:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b0a:	a907      	add	r1, sp, #28
 8001b0c:	4638      	mov	r0, r7
 8001b0e:	f002 fe87 	bl	8004820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8001b12:	2304      	movs	r3, #4
 8001b14:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b16:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001b1e:	a907      	add	r1, sp, #28
 8001b20:	4650      	mov	r0, sl
 8001b22:	f002 fe7d 	bl	8004820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_DOWN_Pin|BTN_LEFT_Pin|BTN_RIGHT_Pin;
 8001b26:	f240 1343 	movw	r3, #323	; 0x143
 8001b2a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b2e:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b30:	a907      	add	r1, sp, #28
 8001b32:	4648      	mov	r0, r9
 8001b34:	f002 fe74 	bl	8004820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 8001b42:	a907      	add	r1, sp, #28
 8001b44:	4648      	mov	r0, r9
 8001b46:	f002 fe6b 	bl	8004820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001b4a:	2308      	movs	r3, #8
 8001b4c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001b54:	a907      	add	r1, sp, #28
 8001b56:	4640      	mov	r0, r8
 8001b58:	f002 fe62 	bl	8004820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_PENIRQ_Pin;
 8001b5c:	2340      	movs	r3, #64	; 0x40
 8001b5e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b60:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_PENIRQ_GPIO_Port, &GPIO_InitStruct);
 8001b64:	a907      	add	r1, sp, #28
 8001b66:	4640      	mov	r0, r8
 8001b68:	f002 fe5a 	bl	8004820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LIN_SLP_Pin|LCD_BKLT_Pin;
 8001b6c:	2360      	movs	r3, #96	; 0x60
 8001b6e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b70:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b76:	a907      	add	r1, sp, #28
 8001b78:	4658      	mov	r0, fp
 8001b7a:	f002 fe51 	bl	8004820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8001b7e:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b80:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8001b86:	a907      	add	r1, sp, #28
 8001b88:	4630      	mov	r0, r6
 8001b8a:	f002 fe49 	bl	8004820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b92:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b94:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b96:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8001b98:	a907      	add	r1, sp, #28
 8001b9a:	4630      	mov	r0, r6
 8001b9c:	f002 fe40 	bl	8004820 <HAL_GPIO_Init>

}
 8001ba0:	b00d      	add	sp, #52	; 0x34
 8001ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	48000800 	.word	0x48000800
 8001bb0:	48001000 	.word	0x48001000
 8001bb4:	48001400 	.word	0x48001400
 8001bb8:	48001800 	.word	0x48001800
 8001bbc:	48000c00 	.word	0x48000c00
 8001bc0:	48000400 	.word	0x48000400

08001bc4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001bc4:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bc6:	4812      	ldr	r0, [pc, #72]	; (8001c10 <MX_I2C1_Init+0x4c>)
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <MX_I2C1_Init+0x50>)
 8001bca:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x10902A95;
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <MX_I2C1_Init+0x54>)
 8001bce:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bd8:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001bda:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bdc:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bde:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001be0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001be2:	f002 ff55 	bl	8004a90 <HAL_I2C_Init>
 8001be6:	b950      	cbnz	r0, 8001bfe <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001be8:	2100      	movs	r1, #0
 8001bea:	4809      	ldr	r0, [pc, #36]	; (8001c10 <MX_I2C1_Init+0x4c>)
 8001bec:	f003 fabb 	bl	8005166 <HAL_I2CEx_ConfigAnalogFilter>
 8001bf0:	b940      	cbnz	r0, 8001c04 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 5) != HAL_OK)
 8001bf2:	2105      	movs	r1, #5
 8001bf4:	4806      	ldr	r0, [pc, #24]	; (8001c10 <MX_I2C1_Init+0x4c>)
 8001bf6:	f003 fae4 	bl	80051c2 <HAL_I2CEx_ConfigDigitalFilter>
 8001bfa:	b930      	cbnz	r0, 8001c0a <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bfc:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001bfe:	f000 f917 	bl	8001e30 <Error_Handler>
 8001c02:	e7f1      	b.n	8001be8 <MX_I2C1_Init+0x24>
    Error_Handler();
 8001c04:	f000 f914 	bl	8001e30 <Error_Handler>
 8001c08:	e7f3      	b.n	8001bf2 <MX_I2C1_Init+0x2e>
    Error_Handler();
 8001c0a:	f000 f911 	bl	8001e30 <Error_Handler>
}
 8001c0e:	e7f5      	b.n	8001bfc <MX_I2C1_Init+0x38>
 8001c10:	200007fc 	.word	0x200007fc
 8001c14:	40005400 	.word	0x40005400
 8001c18:	10902a95 	.word	0x10902a95

08001c1c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001c1c:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c1e:	4815      	ldr	r0, [pc, #84]	; (8001c74 <MX_I2C2_Init+0x58>)
 8001c20:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <MX_I2C2_Init+0x5c>)
 8001c22:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x60505F8C;
 8001c24:	f103 5301 	add.w	r3, r3, #541065216	; 0x20400000
 8001c28:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8001c2c:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 8001c30:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c36:	2201      	movs	r2, #1
 8001c38:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c3a:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001c3c:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c3e:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c40:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c42:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c44:	f002 ff24 	bl	8004a90 <HAL_I2C_Init>
 8001c48:	b950      	cbnz	r0, 8001c60 <MX_I2C2_Init+0x44>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4809      	ldr	r0, [pc, #36]	; (8001c74 <MX_I2C2_Init+0x58>)
 8001c4e:	f003 fa8a 	bl	8005166 <HAL_I2CEx_ConfigAnalogFilter>
 8001c52:	b940      	cbnz	r0, 8001c66 <MX_I2C2_Init+0x4a>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c54:	2100      	movs	r1, #0
 8001c56:	4807      	ldr	r0, [pc, #28]	; (8001c74 <MX_I2C2_Init+0x58>)
 8001c58:	f003 fab3 	bl	80051c2 <HAL_I2CEx_ConfigDigitalFilter>
 8001c5c:	b930      	cbnz	r0, 8001c6c <MX_I2C2_Init+0x50>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c5e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001c60:	f000 f8e6 	bl	8001e30 <Error_Handler>
 8001c64:	e7f1      	b.n	8001c4a <MX_I2C2_Init+0x2e>
    Error_Handler();
 8001c66:	f000 f8e3 	bl	8001e30 <Error_Handler>
 8001c6a:	e7f3      	b.n	8001c54 <MX_I2C2_Init+0x38>
    Error_Handler();
 8001c6c:	f000 f8e0 	bl	8001e30 <Error_Handler>
}
 8001c70:	e7f5      	b.n	8001c5e <MX_I2C2_Init+0x42>
 8001c72:	bf00      	nop
 8001c74:	20000848 	.word	0x20000848
 8001c78:	40005800 	.word	0x40005800

08001c7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c80:	b0a1      	sub	sp, #132	; 0x84
 8001c82:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	2100      	movs	r1, #0
 8001c86:	911b      	str	r1, [sp, #108]	; 0x6c
 8001c88:	911c      	str	r1, [sp, #112]	; 0x70
 8001c8a:	911d      	str	r1, [sp, #116]	; 0x74
 8001c8c:	911e      	str	r1, [sp, #120]	; 0x78
 8001c8e:	911f      	str	r1, [sp, #124]	; 0x7c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c90:	2254      	movs	r2, #84	; 0x54
 8001c92:	a806      	add	r0, sp, #24
 8001c94:	f009 f92a 	bl	800aeec <memset>
  if(i2cHandle->Instance==I2C1)
 8001c98:	6823      	ldr	r3, [r4, #0]
 8001c9a:	4a5d      	ldr	r2, [pc, #372]	; (8001e10 <HAL_I2C_MspInit+0x194>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d006      	beq.n	8001cae <HAL_I2C_MspInit+0x32>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 8001ca0:	4a5c      	ldr	r2, [pc, #368]	; (8001e14 <HAL_I2C_MspInit+0x198>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	f000 8086 	beq.w	8001db4 <HAL_I2C_MspInit+0x138>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001ca8:	b021      	add	sp, #132	; 0x84
 8001caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cae:	2340      	movs	r3, #64	; 0x40
 8001cb0:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cb2:	a806      	add	r0, sp, #24
 8001cb4:	f004 ffc6 	bl	8006c44 <HAL_RCCEx_PeriphCLKConfig>
 8001cb8:	2800      	cmp	r0, #0
 8001cba:	d172      	bne.n	8001da2 <HAL_I2C_MspInit+0x126>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbc:	4e56      	ldr	r6, [pc, #344]	; (8001e18 <HAL_I2C_MspInit+0x19c>)
 8001cbe:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	64f3      	str	r3, [r6, #76]	; 0x4c
 8001cc6:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd0:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001cd2:	f043 0302 	orr.w	r3, r3, #2
 8001cd6:	64f3      	str	r3, [r6, #76]	; 0x4c
 8001cd8:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	9302      	str	r3, [sp, #8]
 8001ce0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ce6:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce8:	f04f 0912 	mov.w	r9, #18
 8001cec:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2500      	movs	r5, #0
 8001cf2:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf4:	951e      	str	r5, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cf6:	f04f 0804 	mov.w	r8, #4
 8001cfa:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfe:	a91b      	add	r1, sp, #108	; 0x6c
 8001d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d04:	f002 fd8c 	bl	8004820 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d08:	2780      	movs	r7, #128	; 0x80
 8001d0a:	971b      	str	r7, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d0c:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d12:	951e      	str	r5, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d14:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d18:	a91b      	add	r1, sp, #108	; 0x6c
 8001d1a:	4840      	ldr	r0, [pc, #256]	; (8001e1c <HAL_I2C_MspInit+0x1a0>)
 8001d1c:	f002 fd80 	bl	8004820 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d20:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001d22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d26:	65b3      	str	r3, [r6, #88]	; 0x58
 8001d28:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001d2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d2e:	9303      	str	r3, [sp, #12]
 8001d30:	9b03      	ldr	r3, [sp, #12]
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8001d32:	483b      	ldr	r0, [pc, #236]	; (8001e20 <HAL_I2C_MspInit+0x1a4>)
 8001d34:	4b3b      	ldr	r3, [pc, #236]	; (8001e24 <HAL_I2C_MspInit+0x1a8>)
 8001d36:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001d38:	2310      	movs	r3, #16
 8001d3a:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d3c:	6085      	str	r5, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d3e:	60c5      	str	r5, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d40:	6107      	str	r7, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d42:	6145      	str	r5, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d44:	6185      	str	r5, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001d46:	61c5      	str	r5, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d48:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001d4a:	f002 fa83 	bl	8004254 <HAL_DMA_Init>
 8001d4e:	bb58      	cbnz	r0, 8001da8 <HAL_I2C_MspInit+0x12c>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001d50:	4b33      	ldr	r3, [pc, #204]	; (8001e20 <HAL_I2C_MspInit+0x1a4>)
 8001d52:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001d54:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 8001d56:	4834      	ldr	r0, [pc, #208]	; (8001e28 <HAL_I2C_MspInit+0x1ac>)
 8001d58:	4b34      	ldr	r3, [pc, #208]	; (8001e2c <HAL_I2C_MspInit+0x1b0>)
 8001d5a:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001d5c:	2311      	movs	r3, #17
 8001d5e:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d60:	2310      	movs	r3, #16
 8001d62:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d68:	2280      	movs	r2, #128	; 0x80
 8001d6a:	6102      	str	r2, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d6c:	6143      	str	r3, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d6e:	6183      	str	r3, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001d70:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d72:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001d74:	f002 fa6e 	bl	8004254 <HAL_DMA_Init>
 8001d78:	b9c8      	cbnz	r0, 8001dae <HAL_I2C_MspInit+0x132>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001d7a:	4b2b      	ldr	r3, [pc, #172]	; (8001e28 <HAL_I2C_MspInit+0x1ac>)
 8001d7c:	63a3      	str	r3, [r4, #56]	; 0x38
 8001d7e:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	4611      	mov	r1, r2
 8001d84:	201f      	movs	r0, #31
 8001d86:	f002 f829 	bl	8003ddc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001d8a:	201f      	movs	r0, #31
 8001d8c:	f002 f85e 	bl	8003e4c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001d90:	2200      	movs	r2, #0
 8001d92:	4611      	mov	r1, r2
 8001d94:	2020      	movs	r0, #32
 8001d96:	f002 f821 	bl	8003ddc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001d9a:	2020      	movs	r0, #32
 8001d9c:	f002 f856 	bl	8003e4c <HAL_NVIC_EnableIRQ>
 8001da0:	e782      	b.n	8001ca8 <HAL_I2C_MspInit+0x2c>
      Error_Handler();
 8001da2:	f000 f845 	bl	8001e30 <Error_Handler>
 8001da6:	e789      	b.n	8001cbc <HAL_I2C_MspInit+0x40>
      Error_Handler();
 8001da8:	f000 f842 	bl	8001e30 <Error_Handler>
 8001dac:	e7d0      	b.n	8001d50 <HAL_I2C_MspInit+0xd4>
      Error_Handler();
 8001dae:	f000 f83f 	bl	8001e30 <Error_Handler>
 8001db2:	e7e2      	b.n	8001d7a <HAL_I2C_MspInit+0xfe>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001db8:	a806      	add	r0, sp, #24
 8001dba:	f004 ff43 	bl	8006c44 <HAL_RCCEx_PeriphCLKConfig>
 8001dbe:	bb18      	cbnz	r0, 8001e08 <HAL_I2C_MspInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc0:	4c15      	ldr	r4, [pc, #84]	; (8001e18 <HAL_I2C_MspInit+0x19c>)
 8001dc2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001dca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	9304      	str	r3, [sp, #16]
 8001dd2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dd4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dd8:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dda:	2312      	movs	r3, #18
 8001ddc:	931c      	str	r3, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dde:	2301      	movs	r3, #1
 8001de0:	931d      	str	r3, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de2:	2300      	movs	r3, #0
 8001de4:	931e      	str	r3, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001de6:	2304      	movs	r3, #4
 8001de8:	931f      	str	r3, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dea:	a91b      	add	r1, sp, #108	; 0x6c
 8001dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df0:	f002 fd16 	bl	8004820 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001df4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001df6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dfa:	65a3      	str	r3, [r4, #88]	; 0x58
 8001dfc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e02:	9305      	str	r3, [sp, #20]
 8001e04:	9b05      	ldr	r3, [sp, #20]
}
 8001e06:	e74f      	b.n	8001ca8 <HAL_I2C_MspInit+0x2c>
      Error_Handler();
 8001e08:	f000 f812 	bl	8001e30 <Error_Handler>
 8001e0c:	e7d8      	b.n	8001dc0 <HAL_I2C_MspInit+0x144>
 8001e0e:	bf00      	nop
 8001e10:	40005400 	.word	0x40005400
 8001e14:	40005800 	.word	0x40005800
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	48000400 	.word	0x48000400
 8001e20:	2000073c 	.word	0x2000073c
 8001e24:	40020030 	.word	0x40020030
 8001e28:	2000079c 	.word	0x2000079c
 8001e2c:	40020044 	.word	0x40020044

08001e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e30:	b082      	sub	sp, #8
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e32:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  volatile int  a = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	9301      	str	r3, [sp, #4]
  while (1)
  {
	  a++;
 8001e38:	9b01      	ldr	r3, [sp, #4]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	9301      	str	r3, [sp, #4]
  while (1)
 8001e3e:	e7fb      	b.n	8001e38 <Error_Handler+0x8>

08001e40 <SystemClock_Config>:
{
 8001e40:	b500      	push	{lr}
 8001e42:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e44:	2238      	movs	r2, #56	; 0x38
 8001e46:	2100      	movs	r1, #0
 8001e48:	a806      	add	r0, sp, #24
 8001e4a:	f009 f84f 	bl	800aeec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e4e:	2000      	movs	r0, #0
 8001e50:	9001      	str	r0, [sp, #4]
 8001e52:	9002      	str	r0, [sp, #8]
 8001e54:	9003      	str	r0, [sp, #12]
 8001e56:	9004      	str	r0, [sp, #16]
 8001e58:	9005      	str	r0, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001e5a:	f004 f9d7 	bl	800620c <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001e5e:	2321      	movs	r3, #33	; 0x21
 8001e60:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001e62:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001e66:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001e68:	2201      	movs	r2, #1
 8001e6a:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e70:	2103      	movs	r1, #3
 8001e72:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001e74:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8001e76:	222a      	movs	r2, #42	; 0x2a
 8001e78:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e7a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8001e7c:	2206      	movs	r2, #6
 8001e7e:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e80:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e82:	a806      	add	r0, sp, #24
 8001e84:	f004 fb00 	bl	8006488 <HAL_RCC_OscConfig>
 8001e88:	b980      	cbnz	r0, 8001eac <SystemClock_Config+0x6c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e8a:	230f      	movs	r3, #15
 8001e8c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e92:	2300      	movs	r3, #0
 8001e94:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e96:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e98:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e9a:	2104      	movs	r1, #4
 8001e9c:	eb0d 0001 	add.w	r0, sp, r1
 8001ea0:	f004 fdaa 	bl	80069f8 <HAL_RCC_ClockConfig>
 8001ea4:	b920      	cbnz	r0, 8001eb0 <SystemClock_Config+0x70>
}
 8001ea6:	b015      	add	sp, #84	; 0x54
 8001ea8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001eac:	f7ff ffc0 	bl	8001e30 <Error_Handler>
    Error_Handler();
 8001eb0:	f7ff ffbe 	bl	8001e30 <Error_Handler>

08001eb4 <main>:
{
 8001eb4:	b508      	push	{r3, lr}
  HAL_Init();
 8001eb6:	f001 fa6f 	bl	8003398 <HAL_Init>
  SystemClock_Config();
 8001eba:	f7ff ffc1 	bl	8001e40 <SystemClock_Config>
  MX_GPIO_Init();
 8001ebe:	f7ff fd89 	bl	80019d4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001ec2:	f7ff f8c1 	bl	8001048 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001ec6:	f7ff f90f 	bl	80010e8 <MX_ADC2_Init>
  MX_FMC_Init();
 8001eca:	f7ff fd45 	bl	8001958 <MX_FMC_Init>
  MX_I2C2_Init();
 8001ece:	f7ff fea5 	bl	8001c1c <MX_I2C2_Init>
  MX_UART4_Init();
 8001ed2:	f000 ff59 	bl	8002d88 <MX_UART4_Init>
  MX_UART5_Init();
 8001ed6:	f000 ff8b 	bl	8002df0 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8001eda:	f000 ffbd 	bl	8002e58 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001ede:	f001 f8b5 	bl	800304c <MX_USART2_UART_Init>
  MX_QUADSPI1_Init();
 8001ee2:	f000 f9dd 	bl	80022a0 <MX_QUADSPI1_Init>
  MX_SPI1_Init();
 8001ee6:	f000 fb2b 	bl	8002540 <MX_SPI1_Init>
  MX_TIM5_Init();
 8001eea:	f000 fd0f 	bl	800290c <MX_TIM5_Init>
  MX_TIM8_Init();
 8001eee:	f000 fd83 	bl	80029f8 <MX_TIM8_Init>
  MX_TIM20_Init();
 8001ef2:	f000 fea1 	bl	8002c38 <MX_TIM20_Init>
  MX_ADC3_Init();
 8001ef6:	f7ff f93b 	bl	8001170 <MX_ADC3_Init>
  MX_DAC1_Init();
 8001efa:	f7ff fb5f 	bl	80015bc <MX_DAC1_Init>
  MX_DAC2_Init();
 8001efe:	f7ff fb8b 	bl	8001618 <MX_DAC2_Init>
  MX_FDCAN2_Init();
 8001f02:	f7ff fc75 	bl	80017f0 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8001f06:	f7ff fe5d 	bl	8001bc4 <MX_I2C1_Init>
  MX_TIM15_Init();
 8001f0a:	f000 fe1d 	bl	8002b48 <MX_TIM15_Init>
  MX_USART3_UART_Init();
 8001f0e:	f001 f8d1 	bl	80030b4 <MX_USART3_UART_Init>
  MX_USB_Device_Init();
 8001f12:	f008 fd5d 	bl	800a9d0 <MX_USB_Device_Init>
  MX_DMA_Init();
 8001f16:	f7ff fbff 	bl	8001718 <MX_DMA_Init>
  MX_CRC_Init();
 8001f1a:	f7ff fb23 	bl	8001564 <MX_CRC_Init>
  MX_ADC4_Init();	//bug workaround: https://community.st.com/s/question/0D50X0000BVnBhASQV/bug-report-dma-and-adc-initialization-order-changed-in-stm32f4-hal-v1241-causing-incorrect-adc-operation
 8001f1e:	f7ff f977 	bl	8001210 <MX_ADC4_Init>
  LCD_Init();
 8001f22:	f007 fc3f 	bl	80097a4 <LCD_Init>
  LCD_UG_init();
 8001f26:	f007 fdb1 	bl	8009a8c <LCD_UG_init>
	  init_world();
 8001f2a:	f000 fafb 	bl	8002524 <init_world>
	  draw_scene();
 8001f2e:	f000 f86f 	bl	8002010 <draw_scene>
	 HAL_Delay(20);
 8001f32:	2014      	movs	r0, #20
 8001f34:	f001 fa52 	bl	80033dc <HAL_Delay>
  while (1)
 8001f38:	e7f7      	b.n	8001f2a <main+0x76>

08001f3a <create_block>:
#include "models.h"

// 320x240 px

/* Creates block with given coordinates and width */
block* create_block(uint16_t x, uint8_t y, uint16_t colors[4]) {
 8001f3a:	b570      	push	{r4, r5, r6, lr}
 8001f3c:	4606      	mov	r6, r0
 8001f3e:	460d      	mov	r5, r1
 8001f40:	4614      	mov	r4, r2
	 block* block = (struct _block*) malloc(sizeof(struct _block));
 8001f42:	200c      	movs	r0, #12
 8001f44:	f008 ffc2 	bl	800aecc <malloc>
	 block->pos.x = x;
 8001f48:	8006      	strh	r6, [r0, #0]
	 block->pos.y = y;
 8001f4a:	7085      	strb	r5, [r0, #2]

	 for (uint8_t i = 0; i < 4; i++) {
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e007      	b.n	8001f60 <create_block+0x26>
		 block->colors[i] = colors[i];
 8001f50:	f834 c013 	ldrh.w	ip, [r4, r3, lsl #1]
 8001f54:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8001f58:	f8a1 c004 	strh.w	ip, [r1, #4]
	 for (uint8_t i = 0; i < 4; i++) {
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d9f5      	bls.n	8001f50 <create_block+0x16>
	 }

	 return block;
}
 8001f64:	bd70      	pop	{r4, r5, r6, pc}

08001f66 <create_destroyable>:

// Create wrapper for block - destroyables
destroyable* create_destroyable(uint16_t x, uint8_t y, uint16_t colors[4]) {
 8001f66:	b510      	push	{r4, lr}
	block* block = create_block(x, y, colors);
 8001f68:	f7ff ffe7 	bl	8001f3a <create_block>
 8001f6c:	4604      	mov	r4, r0

	destroyable* destroyable = (struct _destroyable*) malloc(sizeof(struct _destroyable));
 8001f6e:	2004      	movs	r0, #4
 8001f70:	f008 ffac 	bl	800aecc <malloc>
	destroyable->block = block;
 8001f74:	6004      	str	r4, [r0, #0]
	return destroyable;
}
 8001f76:	bd10      	pop	{r4, pc}

08001f78 <create_bg_material>:

bg_material* create_bg_material(uint16_t x, uint8_t y, uint16_t colors[4]) {
 8001f78:	b510      	push	{r4, lr}
	block* block = create_block(x, y, colors);
 8001f7a:	f7ff ffde 	bl	8001f3a <create_block>
 8001f7e:	4604      	mov	r4, r0

	bg_material* bg_material = (struct _bg_material*) malloc(sizeof(struct _bg_material));
 8001f80:	2004      	movs	r0, #4
 8001f82:	f008 ffa3 	bl	800aecc <malloc>
	bg_material->block = block;
 8001f86:	6004      	str	r4, [r0, #0]
	return bg_material;
}
 8001f88:	bd10      	pop	{r4, pc}

08001f8a <draw_block>:

// TODO consider adding another struct for each type of block rather than only having destroyables of different types


/* Draws a block with its colors */
void draw_block(block* block) {
 8001f8a:	b510      	push	{r4, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	4604      	mov	r4, r0

	UG_FillFrame(block->pos.x - 4, block->pos.y - 4, block->pos.x-2, block->pos.y-2, block->colors[0]);
 8001f90:	8802      	ldrh	r2, [r0, #0]
 8001f92:	1f10      	subs	r0, r2, #4
 8001f94:	78a1      	ldrb	r1, [r4, #2]
 8001f96:	3a02      	subs	r2, #2
 8001f98:	88a3      	ldrh	r3, [r4, #4]
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	1e8b      	subs	r3, r1, #2
 8001f9e:	b212      	sxth	r2, r2
 8001fa0:	3904      	subs	r1, #4
 8001fa2:	b200      	sxth	r0, r0
 8001fa4:	f007 fdee 	bl	8009b84 <UG_FillFrame>
	UG_FillFrame(block->pos.x-2, block->pos.y-4, block->pos.x, block->pos.y-2, block->colors[1]);
 8001fa8:	8822      	ldrh	r2, [r4, #0]
 8001faa:	1e90      	subs	r0, r2, #2
 8001fac:	78a1      	ldrb	r1, [r4, #2]
 8001fae:	88e3      	ldrh	r3, [r4, #6]
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	1e8b      	subs	r3, r1, #2
 8001fb4:	b212      	sxth	r2, r2
 8001fb6:	3904      	subs	r1, #4
 8001fb8:	b200      	sxth	r0, r0
 8001fba:	f007 fde3 	bl	8009b84 <UG_FillFrame>
	UG_FillFrame(block->pos.x-4, block->pos.y-2, block->pos.x-2, block->pos.y, block->colors[2]);
 8001fbe:	8822      	ldrh	r2, [r4, #0]
 8001fc0:	1f10      	subs	r0, r2, #4
 8001fc2:	78a3      	ldrb	r3, [r4, #2]
 8001fc4:	3a02      	subs	r2, #2
 8001fc6:	8921      	ldrh	r1, [r4, #8]
 8001fc8:	9100      	str	r1, [sp, #0]
 8001fca:	b212      	sxth	r2, r2
 8001fcc:	1e99      	subs	r1, r3, #2
 8001fce:	b200      	sxth	r0, r0
 8001fd0:	f007 fdd8 	bl	8009b84 <UG_FillFrame>
	UG_FillFrame(block->pos.x-2, block->pos.y-2, block->pos.x, block->pos.y, block->colors[3]);
 8001fd4:	8822      	ldrh	r2, [r4, #0]
 8001fd6:	1e90      	subs	r0, r2, #2
 8001fd8:	78a3      	ldrb	r3, [r4, #2]
 8001fda:	8961      	ldrh	r1, [r4, #10]
 8001fdc:	9100      	str	r1, [sp, #0]
 8001fde:	b212      	sxth	r2, r2
 8001fe0:	1e99      	subs	r1, r3, #2
 8001fe2:	b200      	sxth	r0, r0
 8001fe4:	f007 fdce 	bl	8009b84 <UG_FillFrame>
}
 8001fe8:	b002      	add	sp, #8
 8001fea:	bd10      	pop	{r4, pc}

08001fec <free_destroyable>:
		pos_x1 += 8;
		pos_x2 += 8;
	}
}

void free_destroyable(destroyable* destroyable) {
 8001fec:	b510      	push	{r4, lr}
 8001fee:	4604      	mov	r4, r0
	free(destroyable->block);
 8001ff0:	6800      	ldr	r0, [r0, #0]
 8001ff2:	f008 ff73 	bl	800aedc <free>
	free(destroyable);
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	f008 ff70 	bl	800aedc <free>
}
 8001ffc:	bd10      	pop	{r4, pc}

08001ffe <free_bg_material>:


void free_bg_material(bg_material* mat) {
 8001ffe:	b510      	push	{r4, lr}
 8002000:	4604      	mov	r4, r0
	free(mat->block);
 8002002:	6800      	ldr	r0, [r0, #0]
 8002004:	f008 ff6a 	bl	800aedc <free>
	free(mat);
 8002008:	4620      	mov	r0, r4
 800200a:	f008 ff67 	bl	800aedc <free>
}
 800200e:	bd10      	pop	{r4, pc}

08002010 <draw_scene>:
void draw_scene() {
 8002010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	get_scene();
 8002014:	f000 f9ce 	bl	80023b4 <get_scene>
	srand(time(NULL));
 8002018:	2000      	movs	r0, #0
 800201a:	f00a fe19 	bl	800cc50 <time>
 800201e:	f009 fec7 	bl	800bdb0 <srand>
	bool night = is_night();
 8002022:	f000 fa0d 	bl	8002440 <is_night>
 8002026:	4681      	mov	r9, r0
	for (uint8_t i = 0; i < SCENE_BLOCKS_X; i++) {
 8002028:	2600      	movs	r6, #0
	uint16_t pos_x2 = 8;
 800202a:	f04f 0808 	mov.w	r8, #8
	uint16_t pos_x1 = 4;
 800202e:	2704      	movs	r7, #4
	for (uint8_t i = 0; i < SCENE_BLOCKS_X; i++) {
 8002030:	e117      	b.n	8002262 <draw_scene+0x252>
				destroyable* dirt = create_destroyable(pos_x1, 4*(j+1), C_DIRT);
 8002032:	1c61      	adds	r1, r4, #1
 8002034:	0089      	lsls	r1, r1, #2
 8002036:	4a8e      	ldr	r2, [pc, #568]	; (8002270 <draw_scene+0x260>)
 8002038:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 800203c:	4638      	mov	r0, r7
 800203e:	f7ff ff92 	bl	8001f66 <create_destroyable>
 8002042:	4682      	mov	sl, r0
				draw_block(dirt->block);
 8002044:	6800      	ldr	r0, [r0, #0]
 8002046:	f7ff ffa0 	bl	8001f8a <draw_block>
				free_destroyable(dirt);
 800204a:	4650      	mov	r0, sl
 800204c:	f7ff ffce 	bl	8001fec <free_destroyable>
 8002050:	e041      	b.n	80020d6 <draw_scene+0xc6>
				destroyable* grass = create_destroyable(pos_x1, 4*(j+1), C_GRASS);
 8002052:	1c61      	adds	r1, r4, #1
 8002054:	0089      	lsls	r1, r1, #2
 8002056:	4a87      	ldr	r2, [pc, #540]	; (8002274 <draw_scene+0x264>)
 8002058:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 800205c:	4638      	mov	r0, r7
 800205e:	f7ff ff82 	bl	8001f66 <create_destroyable>
 8002062:	4682      	mov	sl, r0
				draw_block(grass->block);
 8002064:	6800      	ldr	r0, [r0, #0]
 8002066:	f7ff ff90 	bl	8001f8a <draw_block>
				free_destroyable(grass);
 800206a:	4650      	mov	r0, sl
 800206c:	f7ff ffbe 	bl	8001fec <free_destroyable>
 8002070:	e031      	b.n	80020d6 <draw_scene+0xc6>
				destroyable* wood = create_destroyable(pos_x1, 4*(j+1), C_WOOD);
 8002072:	1c61      	adds	r1, r4, #1
 8002074:	0089      	lsls	r1, r1, #2
 8002076:	4a80      	ldr	r2, [pc, #512]	; (8002278 <draw_scene+0x268>)
 8002078:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 800207c:	4638      	mov	r0, r7
 800207e:	f7ff ff72 	bl	8001f66 <create_destroyable>
 8002082:	4682      	mov	sl, r0
				draw_block(wood->block);
 8002084:	6800      	ldr	r0, [r0, #0]
 8002086:	f7ff ff80 	bl	8001f8a <draw_block>
				free_destroyable(wood);
 800208a:	4650      	mov	r0, sl
 800208c:	f7ff ffae 	bl	8001fec <free_destroyable>
 8002090:	e021      	b.n	80020d6 <draw_scene+0xc6>
				destroyable* rock = create_destroyable(pos_x1, 4*(j+1), C_ROCK);
 8002092:	1c61      	adds	r1, r4, #1
 8002094:	0089      	lsls	r1, r1, #2
 8002096:	4a79      	ldr	r2, [pc, #484]	; (800227c <draw_scene+0x26c>)
 8002098:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 800209c:	4638      	mov	r0, r7
 800209e:	f7ff ff62 	bl	8001f66 <create_destroyable>
 80020a2:	4682      	mov	sl, r0
				draw_block(rock->block);
 80020a4:	6800      	ldr	r0, [r0, #0]
 80020a6:	f7ff ff70 	bl	8001f8a <draw_block>
				free_destroyable(rock);
 80020aa:	4650      	mov	r0, sl
 80020ac:	f7ff ff9e 	bl	8001fec <free_destroyable>
 80020b0:	e011      	b.n	80020d6 <draw_scene+0xc6>
					} else if (night) {
 80020b2:	f1b9 0f00 	cmp.w	r9, #0
 80020b6:	d168      	bne.n	800218a <draw_scene+0x17a>
					uint16_t* color = C_SKY;
 80020b8:	4a71      	ldr	r2, [pc, #452]	; (8002280 <draw_scene+0x270>)
					bg_material* sky = create_bg_material(pos_x1, 4*(j+1), color);
 80020ba:	1c61      	adds	r1, r4, #1
 80020bc:	0089      	lsls	r1, r1, #2
 80020be:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80020c2:	4638      	mov	r0, r7
 80020c4:	f7ff ff58 	bl	8001f78 <create_bg_material>
 80020c8:	4682      	mov	sl, r0
					draw_block(sky->block);
 80020ca:	6800      	ldr	r0, [r0, #0]
 80020cc:	f7ff ff5d 	bl	8001f8a <draw_block>
					free_bg_material(sky);
 80020d0:	4650      	mov	r0, sl
 80020d2:	f7ff ff94 	bl	8001ffe <free_bg_material>
			if (r_cell == (uint8_t) _dirt) {
 80020d6:	2d01      	cmp	r5, #1
 80020d8:	d069      	beq.n	80021ae <draw_scene+0x19e>
			} else if (r_cell == (uint8_t) _grass) {
 80020da:	2d02      	cmp	r5, #2
 80020dc:	d077      	beq.n	80021ce <draw_scene+0x1be>
			} else if (r_cell == (uint8_t) _wood) {
 80020de:	2d03      	cmp	r5, #3
 80020e0:	f000 8085 	beq.w	80021ee <draw_scene+0x1de>
			} else if (r_cell == (uint8_t) _rock) {
 80020e4:	2d07      	cmp	r5, #7
 80020e6:	f000 8092 	beq.w	800220e <draw_scene+0x1fe>
				if (j < camera_y) {
 80020ea:	b2a3      	uxth	r3, r4
 80020ec:	4a65      	ldr	r2, [pc, #404]	; (8002284 <draw_scene+0x274>)
 80020ee:	8812      	ldrh	r2, [r2, #0]
 80020f0:	4293      	cmp	r3, r2
 80020f2:	f080 809e 	bcs.w	8002232 <draw_scene+0x222>
					bg_material* sky = create_bg_material(pos_x2, 4*(j+1), night ? C_NIGHT_SKY : C_SKY);
 80020f6:	1c61      	adds	r1, r4, #1
 80020f8:	0089      	lsls	r1, r1, #2
 80020fa:	b2c9      	uxtb	r1, r1
 80020fc:	f1b9 0f00 	cmp.w	r9, #0
 8002100:	f000 8095 	beq.w	800222e <draw_scene+0x21e>
 8002104:	4a60      	ldr	r2, [pc, #384]	; (8002288 <draw_scene+0x278>)
 8002106:	4640      	mov	r0, r8
 8002108:	f7ff ff36 	bl	8001f78 <create_bg_material>
 800210c:	4605      	mov	r5, r0
					draw_block(sky->block);
 800210e:	6800      	ldr	r0, [r0, #0]
 8002110:	f7ff ff3b 	bl	8001f8a <draw_block>
					free_bg_material(sky);
 8002114:	4628      	mov	r0, r5
 8002116:	f7ff ff72 	bl	8001ffe <free_bg_material>
		for (uint8_t j = 0; j < SCENE_BLOCKS_Y; j++) {
 800211a:	3401      	adds	r4, #1
 800211c:	b2e4      	uxtb	r4, r4
 800211e:	2c3b      	cmp	r4, #59	; 0x3b
 8002120:	f200 8097 	bhi.w	8002252 <draw_scene+0x242>
			uint8_t value = SCENE[j][i]; // SCENE[y][x]
 8002124:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002128:	4a58      	ldr	r2, [pc, #352]	; (800228c <draw_scene+0x27c>)
 800212a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800212e:	5d9d      	ldrb	r5, [r3, r6]
			uint8_t l_cell = (value & 0xF0) >> 4;
 8002130:	ea4f 1a15 	mov.w	sl, r5, lsr #4
			uint8_t r_cell = (value & 0x0F);
 8002134:	f005 050f 	and.w	r5, r5, #15
			float random = (float) rand() / RAND_MAX;
 8002138:	f009 fe68 	bl	800be0c <rand>
 800213c:	ee07 0a90 	vmov	s15, r0
 8002140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002144:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8002290 <draw_scene+0x280>
 8002148:	ee67 7a87 	vmul.f32	s15, s15, s14
			if (l_cell == (uint8_t) _dirt) {
 800214c:	f1ba 0f01 	cmp.w	sl, #1
 8002150:	f43f af6f 	beq.w	8002032 <draw_scene+0x22>
			} else if (l_cell == (uint8_t) _grass) {
 8002154:	f1ba 0f02 	cmp.w	sl, #2
 8002158:	f43f af7b 	beq.w	8002052 <draw_scene+0x42>
			} else if (l_cell == (uint8_t) _wood) {
 800215c:	f1ba 0f03 	cmp.w	sl, #3
 8002160:	d087      	beq.n	8002072 <draw_scene+0x62>
			} else if (l_cell == (uint8_t) _rock) {
 8002162:	f1ba 0f07 	cmp.w	sl, #7
 8002166:	d094      	beq.n	8002092 <draw_scene+0x82>
				if (j < camera_y) {
 8002168:	b2a3      	uxth	r3, r4
 800216a:	4a46      	ldr	r2, [pc, #280]	; (8002284 <draw_scene+0x274>)
 800216c:	8812      	ldrh	r2, [r2, #0]
 800216e:	4293      	cmp	r3, r2
 8002170:	d20d      	bcs.n	800218e <draw_scene+0x17e>
					if (random < probability_star && night) {
 8002172:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002294 <draw_scene+0x284>
 8002176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217e:	d598      	bpl.n	80020b2 <draw_scene+0xa2>
 8002180:	f1b9 0f00 	cmp.w	r9, #0
 8002184:	d095      	beq.n	80020b2 <draw_scene+0xa2>
						color = C_STAR;
 8002186:	4a44      	ldr	r2, [pc, #272]	; (8002298 <draw_scene+0x288>)
 8002188:	e797      	b.n	80020ba <draw_scene+0xaa>
						color = C_NIGHT_SKY;
 800218a:	4a3f      	ldr	r2, [pc, #252]	; (8002288 <draw_scene+0x278>)
 800218c:	e795      	b.n	80020ba <draw_scene+0xaa>
					bg_material* dirt = create_bg_material(pos_x1, 4*(j+1), C_BG_DIRT);
 800218e:	1c61      	adds	r1, r4, #1
 8002190:	0089      	lsls	r1, r1, #2
 8002192:	4a42      	ldr	r2, [pc, #264]	; (800229c <draw_scene+0x28c>)
 8002194:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8002198:	4638      	mov	r0, r7
 800219a:	f7ff feed 	bl	8001f78 <create_bg_material>
 800219e:	4682      	mov	sl, r0
					draw_block(dirt->block);
 80021a0:	6800      	ldr	r0, [r0, #0]
 80021a2:	f7ff fef2 	bl	8001f8a <draw_block>
					free_bg_material(dirt);
 80021a6:	4650      	mov	r0, sl
 80021a8:	f7ff ff29 	bl	8001ffe <free_bg_material>
 80021ac:	e793      	b.n	80020d6 <draw_scene+0xc6>
				destroyable* dirt = create_destroyable(pos_x2, 4*(j+1), C_DIRT);
 80021ae:	1c61      	adds	r1, r4, #1
 80021b0:	0089      	lsls	r1, r1, #2
 80021b2:	4a2f      	ldr	r2, [pc, #188]	; (8002270 <draw_scene+0x260>)
 80021b4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80021b8:	4640      	mov	r0, r8
 80021ba:	f7ff fed4 	bl	8001f66 <create_destroyable>
 80021be:	4605      	mov	r5, r0
				draw_block(dirt->block);
 80021c0:	6800      	ldr	r0, [r0, #0]
 80021c2:	f7ff fee2 	bl	8001f8a <draw_block>
				free_destroyable(dirt);
 80021c6:	4628      	mov	r0, r5
 80021c8:	f7ff ff10 	bl	8001fec <free_destroyable>
 80021cc:	e7a5      	b.n	800211a <draw_scene+0x10a>
				destroyable* grass = create_destroyable(pos_x2, 4*(j+1), C_GRASS);
 80021ce:	1c61      	adds	r1, r4, #1
 80021d0:	0089      	lsls	r1, r1, #2
 80021d2:	4a28      	ldr	r2, [pc, #160]	; (8002274 <draw_scene+0x264>)
 80021d4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80021d8:	4640      	mov	r0, r8
 80021da:	f7ff fec4 	bl	8001f66 <create_destroyable>
 80021de:	4605      	mov	r5, r0
				draw_block(grass->block);
 80021e0:	6800      	ldr	r0, [r0, #0]
 80021e2:	f7ff fed2 	bl	8001f8a <draw_block>
				free_destroyable(grass);
 80021e6:	4628      	mov	r0, r5
 80021e8:	f7ff ff00 	bl	8001fec <free_destroyable>
 80021ec:	e795      	b.n	800211a <draw_scene+0x10a>
				destroyable* wood = create_destroyable(pos_x2, 4*(j+1), C_WOOD);
 80021ee:	1c61      	adds	r1, r4, #1
 80021f0:	0089      	lsls	r1, r1, #2
 80021f2:	4a21      	ldr	r2, [pc, #132]	; (8002278 <draw_scene+0x268>)
 80021f4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80021f8:	4640      	mov	r0, r8
 80021fa:	f7ff feb4 	bl	8001f66 <create_destroyable>
 80021fe:	4605      	mov	r5, r0
				draw_block(wood->block);
 8002200:	6800      	ldr	r0, [r0, #0]
 8002202:	f7ff fec2 	bl	8001f8a <draw_block>
				free_destroyable(wood);
 8002206:	4628      	mov	r0, r5
 8002208:	f7ff fef0 	bl	8001fec <free_destroyable>
 800220c:	e785      	b.n	800211a <draw_scene+0x10a>
				destroyable* rock = create_destroyable(pos_x2, 4*(j+1), C_ROCK);
 800220e:	1c61      	adds	r1, r4, #1
 8002210:	0089      	lsls	r1, r1, #2
 8002212:	4a1a      	ldr	r2, [pc, #104]	; (800227c <draw_scene+0x26c>)
 8002214:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8002218:	4640      	mov	r0, r8
 800221a:	f7ff fea4 	bl	8001f66 <create_destroyable>
 800221e:	4605      	mov	r5, r0
				draw_block(rock->block);
 8002220:	6800      	ldr	r0, [r0, #0]
 8002222:	f7ff feb2 	bl	8001f8a <draw_block>
				free_destroyable(rock);
 8002226:	4628      	mov	r0, r5
 8002228:	f7ff fee0 	bl	8001fec <free_destroyable>
 800222c:	e775      	b.n	800211a <draw_scene+0x10a>
					bg_material* sky = create_bg_material(pos_x2, 4*(j+1), night ? C_NIGHT_SKY : C_SKY);
 800222e:	4a14      	ldr	r2, [pc, #80]	; (8002280 <draw_scene+0x270>)
 8002230:	e769      	b.n	8002106 <draw_scene+0xf6>
					bg_material* dirt = create_bg_material(pos_x2, 4*(j+1), C_BG_DIRT);
 8002232:	1c61      	adds	r1, r4, #1
 8002234:	0089      	lsls	r1, r1, #2
 8002236:	4a19      	ldr	r2, [pc, #100]	; (800229c <draw_scene+0x28c>)
 8002238:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 800223c:	4640      	mov	r0, r8
 800223e:	f7ff fe9b 	bl	8001f78 <create_bg_material>
 8002242:	4605      	mov	r5, r0
					draw_block(dirt->block);
 8002244:	6800      	ldr	r0, [r0, #0]
 8002246:	f7ff fea0 	bl	8001f8a <draw_block>
					free_bg_material(dirt);
 800224a:	4628      	mov	r0, r5
 800224c:	f7ff fed7 	bl	8001ffe <free_bg_material>
 8002250:	e763      	b.n	800211a <draw_scene+0x10a>
		pos_x1 += 8;
 8002252:	3708      	adds	r7, #8
 8002254:	b2bf      	uxth	r7, r7
		pos_x2 += 8;
 8002256:	f108 0808 	add.w	r8, r8, #8
 800225a:	fa1f f888 	uxth.w	r8, r8
	for (uint8_t i = 0; i < SCENE_BLOCKS_X; i++) {
 800225e:	3601      	adds	r6, #1
 8002260:	b2f6      	uxtb	r6, r6
 8002262:	2e27      	cmp	r6, #39	; 0x27
 8002264:	d801      	bhi.n	800226a <draw_scene+0x25a>
		for (uint8_t j = 0; j < SCENE_BLOCKS_Y; j++) {
 8002266:	2400      	movs	r4, #0
 8002268:	e759      	b.n	800211e <draw_scene+0x10e>
}
 800226a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800226e:	bf00      	nop
 8002270:	20000008 	.word	0x20000008
 8002274:	20000010 	.word	0x20000010
 8002278:	20000038 	.word	0x20000038
 800227c:	20000020 	.word	0x20000020
 8002280:	20000028 	.word	0x20000028
 8002284:	200037c2 	.word	0x200037c2
 8002288:	20000018 	.word	0x20000018
 800228c:	200008e0 	.word	0x200008e0
 8002290:	30000000 	.word	0x30000000
 8002294:	3ca3d70a 	.word	0x3ca3d70a
 8002298:	20000030 	.word	0x20000030
 800229c:	20000000 	.word	0x20000000

080022a0 <MX_QUADSPI1_Init>:

QSPI_HandleTypeDef hqspi1;

/* QUADSPI1 init function */
void MX_QUADSPI1_Init(void)
{
 80022a0:	b508      	push	{r3, lr}
  /* USER CODE END QUADSPI1_Init 0 */

  /* USER CODE BEGIN QUADSPI1_Init 1 */

  /* USER CODE END QUADSPI1_Init 1 */
  hqspi1.Instance = QUADSPI;
 80022a2:	480a      	ldr	r0, [pc, #40]	; (80022cc <MX_QUADSPI1_Init+0x2c>)
 80022a4:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <MX_QUADSPI1_Init+0x30>)
 80022a6:	6003      	str	r3, [r0, #0]
  hqspi1.Init.ClockPrescaler = 255;
 80022a8:	23ff      	movs	r3, #255	; 0xff
 80022aa:	6043      	str	r3, [r0, #4]
  hqspi1.Init.FifoThreshold = 1;
 80022ac:	2201      	movs	r2, #1
 80022ae:	6082      	str	r2, [r0, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60c3      	str	r3, [r0, #12]
  hqspi1.Init.FlashSize = 1;
 80022b4:	6102      	str	r2, [r0, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80022b6:	6143      	str	r3, [r0, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80022b8:	6183      	str	r3, [r0, #24]
  hqspi1.Init.FlashID = QSPI_FLASH_ID_1;
 80022ba:	61c3      	str	r3, [r0, #28]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80022bc:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
 80022be:	f004 f85f 	bl	8006380 <HAL_QSPI_Init>
 80022c2:	b900      	cbnz	r0, 80022c6 <MX_QUADSPI1_Init+0x26>
  }
  /* USER CODE BEGIN QUADSPI1_Init 2 */

  /* USER CODE END QUADSPI1_Init 2 */

}
 80022c4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80022c6:	f7ff fdb3 	bl	8001e30 <Error_Handler>
}
 80022ca:	e7fb      	b.n	80022c4 <MX_QUADSPI1_Init+0x24>
 80022cc:	20000894 	.word	0x20000894
 80022d0:	a0001000 	.word	0xa0001000

080022d4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80022d4:	b570      	push	{r4, r5, r6, lr}
 80022d6:	b09e      	sub	sp, #120	; 0x78
 80022d8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022da:	2100      	movs	r1, #0
 80022dc:	9119      	str	r1, [sp, #100]	; 0x64
 80022de:	911a      	str	r1, [sp, #104]	; 0x68
 80022e0:	911b      	str	r1, [sp, #108]	; 0x6c
 80022e2:	911c      	str	r1, [sp, #112]	; 0x70
 80022e4:	911d      	str	r1, [sp, #116]	; 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022e6:	2254      	movs	r2, #84	; 0x54
 80022e8:	a804      	add	r0, sp, #16
 80022ea:	f008 fdff 	bl	800aeec <memset>
  if(qspiHandle->Instance==QUADSPI)
 80022ee:	6822      	ldr	r2, [r4, #0]
 80022f0:	4b2c      	ldr	r3, [pc, #176]	; (80023a4 <HAL_QSPI_MspInit+0xd0>)
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d001      	beq.n	80022fa <HAL_QSPI_MspInit+0x26>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80022f6:	b01e      	add	sp, #120	; 0x78
 80022f8:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80022fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022fe:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002300:	a804      	add	r0, sp, #16
 8002302:	f004 fc9f 	bl	8006c44 <HAL_RCCEx_PeriphCLKConfig>
 8002306:	2800      	cmp	r0, #0
 8002308:	d148      	bne.n	800239c <HAL_QSPI_MspInit+0xc8>
    __HAL_RCC_QSPI_CLK_ENABLE();
 800230a:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <HAL_QSPI_MspInit+0xd4>)
 800230c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800230e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002312:	651a      	str	r2, [r3, #80]	; 0x50
 8002314:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002316:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800231a:	9200      	str	r2, [sp, #0]
 800231c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002320:	f042 0201 	orr.w	r2, r2, #1
 8002324:	64da      	str	r2, [r3, #76]	; 0x4c
 8002326:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002328:	f002 0201 	and.w	r2, r2, #1
 800232c:	9201      	str	r2, [sp, #4]
 800232e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002330:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002332:	f042 0202 	orr.w	r2, r2, #2
 8002336:	64da      	str	r2, [r3, #76]	; 0x4c
 8002338:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800233a:	f002 0202 	and.w	r2, r2, #2
 800233e:	9202      	str	r2, [sp, #8]
 8002340:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002342:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002344:	f042 0220 	orr.w	r2, r2, #32
 8002348:	64da      	str	r2, [r3, #76]	; 0x4c
 800234a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	9303      	str	r3, [sp, #12]
 8002352:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = QSPI_IO2_Pin;
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2602      	movs	r6, #2
 800235a:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2400      	movs	r4, #0
 800235e:	941b      	str	r4, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002360:	941c      	str	r4, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002362:	250a      	movs	r5, #10
 8002364:	951d      	str	r5, [sp, #116]	; 0x74
    HAL_GPIO_Init(QSPI_IO2_GPIO_Port, &GPIO_InitStruct);
 8002366:	a919      	add	r1, sp, #100	; 0x64
 8002368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800236c:	f002 fa58 	bl	8004820 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_IO1_Pin|QSPI_IO0_Pin|QSPI_CLK_Pin|QSPI_NCS_Pin;
 8002370:	f640 4303 	movw	r3, #3075	; 0xc03
 8002374:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	941b      	str	r4, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237a:	941c      	str	r4, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800237c:	951d      	str	r5, [sp, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237e:	a919      	add	r1, sp, #100	; 0x64
 8002380:	480a      	ldr	r0, [pc, #40]	; (80023ac <HAL_QSPI_MspInit+0xd8>)
 8002382:	f002 fa4d 	bl	8004820 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_IO3_Pin;
 8002386:	2340      	movs	r3, #64	; 0x40
 8002388:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238a:	961a      	str	r6, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	941b      	str	r4, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	941c      	str	r4, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002390:	951d      	str	r5, [sp, #116]	; 0x74
    HAL_GPIO_Init(QSPI_IO3_GPIO_Port, &GPIO_InitStruct);
 8002392:	a919      	add	r1, sp, #100	; 0x64
 8002394:	4806      	ldr	r0, [pc, #24]	; (80023b0 <HAL_QSPI_MspInit+0xdc>)
 8002396:	f002 fa43 	bl	8004820 <HAL_GPIO_Init>
}
 800239a:	e7ac      	b.n	80022f6 <HAL_QSPI_MspInit+0x22>
      Error_Handler();
 800239c:	f7ff fd48 	bl	8001e30 <Error_Handler>
 80023a0:	e7b3      	b.n	800230a <HAL_QSPI_MspInit+0x36>
 80023a2:	bf00      	nop
 80023a4:	a0001000 	.word	0xa0001000
 80023a8:	40021000 	.word	0x40021000
 80023ac:	48000400 	.word	0x48000400
 80023b0:	48001400 	.word	0x48001400

080023b4 <get_scene>:
	// Generate level with destroyables


}

void get_scene() {
 80023b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t left = camera_x - (SCENE_WIDTH / 4);
 80023b6:	4b19      	ldr	r3, [pc, #100]	; (800241c <get_scene+0x68>)
 80023b8:	881a      	ldrh	r2, [r3, #0]
 80023ba:	f1a2 0614 	sub.w	r6, r2, #20
 80023be:	b2b6      	uxth	r6, r6
	uint8_t top = camera_y - (SCENE_HEIGHT / 2);
 80023c0:	4b17      	ldr	r3, [pc, #92]	; (8002420 <get_scene+0x6c>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	f1a3 0c1e 	sub.w	ip, r3, #30
 80023c8:	fa5f fc8c 	uxtb.w	ip, ip
	uint16_t right = camera_x + (SCENE_WIDTH / 4);
 80023cc:	3214      	adds	r2, #20
 80023ce:	b294      	uxth	r4, r2
	uint8_t bottom = camera_y + (SCENE_HEIGHT / 2);
 80023d0:	331e      	adds	r3, #30
 80023d2:	b2dd      	uxtb	r5, r3


	uint16_t x = 0;
	uint8_t y = 0;
 80023d4:	f04f 0e00 	mov.w	lr, #0
	for (uint8_t i = top; i < bottom; i++) {
 80023d8:	e019      	b.n	800240e <get_scene+0x5a>
		for (uint16_t j = left; j < right; j++) {
			SCENE[y][x] = WORLD[i][j];
 80023da:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 80023de:	0108      	lsls	r0, r1, #4
 80023e0:	4910      	ldr	r1, [pc, #64]	; (8002424 <get_scene+0x70>)
 80023e2:	4401      	add	r1, r0
 80023e4:	5ccf      	ldrb	r7, [r1, r3]
 80023e6:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
 80023ea:	00c8      	lsls	r0, r1, #3
 80023ec:	490e      	ldr	r1, [pc, #56]	; (8002428 <get_scene+0x74>)
 80023ee:	4401      	add	r1, r0
 80023f0:	548f      	strb	r7, [r1, r2]
			x++;
 80023f2:	3201      	adds	r2, #1
 80023f4:	b292      	uxth	r2, r2
		for (uint16_t j = left; j < right; j++) {
 80023f6:	3301      	adds	r3, #1
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	42a3      	cmp	r3, r4
 80023fc:	d3ed      	bcc.n	80023da <get_scene+0x26>
		}
		x = 0;
		y++;
 80023fe:	f10e 0e01 	add.w	lr, lr, #1
 8002402:	fa5f fe8e 	uxtb.w	lr, lr
	for (uint8_t i = top; i < bottom; i++) {
 8002406:	f10c 0c01 	add.w	ip, ip, #1
 800240a:	fa5f fc8c 	uxtb.w	ip, ip
 800240e:	45ac      	cmp	ip, r5
 8002410:	d202      	bcs.n	8002418 <get_scene+0x64>
		for (uint16_t j = left; j < right; j++) {
 8002412:	4633      	mov	r3, r6
 8002414:	2200      	movs	r2, #0
 8002416:	e7f0      	b.n	80023fa <get_scene+0x46>
	}
}
 8002418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800241a:	bf00      	nop
 800241c:	200037c0 	.word	0x200037c0
 8002420:	200037c2 	.word	0x200037c2
 8002424:	20001240 	.word	0x20001240
 8002428:	200008e0 	.word	0x200008e0

0800242c <update_camera_center>:

void update_camera_center(uint16_t x, uint8_t y) {
	camera_x = x;
 800242c:	4b02      	ldr	r3, [pc, #8]	; (8002438 <update_camera_center+0xc>)
 800242e:	8018      	strh	r0, [r3, #0]
	camera_y = y;
 8002430:	4b02      	ldr	r3, [pc, #8]	; (800243c <update_camera_center+0x10>)
 8002432:	8019      	strh	r1, [r3, #0]
}
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	200037c0 	.word	0x200037c0
 800243c:	200037c2 	.word	0x200037c2

08002440 <is_night>:
int get_time_of_day() {

}
*/

bool is_night() {
 8002440:	b508      	push	{r3, lr}
	srand(time(NULL));
 8002442:	2000      	movs	r0, #0
 8002444:	f00a fc04 	bl	800cc50 <time>
 8002448:	f009 fcb2 	bl	800bdb0 <srand>
	float random = (float)rand() / RAND_MAX;
 800244c:	f009 fcde 	bl	800be0c <rand>
 8002450:	ee07 0a90 	vmov	s15, r0
 8002454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002458:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002478 <is_night+0x38>
 800245c:	ee67 7a87 	vmul.f32	s15, s15, s14

	if (random < 0.5) {
 8002460:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002464:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246c:	d401      	bmi.n	8002472 <is_night+0x32>
		return true;
	}
	return false;
 800246e:	2000      	movs	r0, #0
}
 8002470:	bd08      	pop	{r3, pc}
		return true;
 8002472:	2001      	movs	r0, #1
 8002474:	e7fc      	b.n	8002470 <is_night+0x30>
 8002476:	bf00      	nop
 8002478:	30000000 	.word	0x30000000

0800247c <init_bg>:


// Initialize background materials
void init_bg(uint16_t z_height) {
 800247c:	b570      	push	{r4, r5, r6, lr}
 800247e:	4606      	mov	r6, r0
	srand(time(NULL));
 8002480:	2000      	movs	r0, #0
 8002482:	f00a fbe5 	bl	800cc50 <time>
 8002486:	f009 fc93 	bl	800bdb0 <srand>

	float probability_rock = 0.03;

	for (uint16_t i = 0; i < WORLD_HEIGHT; i++) {
 800248a:	2500      	movs	r5, #0
 800248c:	e03f      	b.n	800250e <init_bg+0x92>
		for (uint16_t j = 0; j < WORLD_WIDTH/2; j++) {
			if (i > z_height) {
				float random = (float)rand() / RAND_MAX;
 800248e:	f009 fcbd 	bl	800be0c <rand>
 8002492:	ee07 0a90 	vmov	s15, r0
 8002496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800249a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002518 <init_bg+0x9c>
 800249e:	ee67 7a87 	vmul.f32	s15, s15, s14

				if (random < probability_rock && abs(z_height - i) > 2) {
 80024a2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800251c <init_bg+0xa0>
 80024a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ae:	d50d      	bpl.n	80024cc <init_bg+0x50>
 80024b0:	1b73      	subs	r3, r6, r5
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	bfb8      	it	lt
 80024b6:	425b      	neglt	r3, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	dd07      	ble.n	80024cc <init_bg+0x50>
					WORLD[i][j] = (_rock << 4) | _dirt;
 80024bc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80024c0:	4a17      	ldr	r2, [pc, #92]	; (8002520 <init_bg+0xa4>)
 80024c2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80024c6:	2271      	movs	r2, #113	; 0x71
 80024c8:	551a      	strb	r2, [r3, r4]
 80024ca:	e00e      	b.n	80024ea <init_bg+0x6e>
				} else {
					WORLD[i][j] = (_dirt << 4) | _dirt;		// Set 2 cells at once
 80024cc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80024d0:	4a13      	ldr	r2, [pc, #76]	; (8002520 <init_bg+0xa4>)
 80024d2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80024d6:	2211      	movs	r2, #17
 80024d8:	551a      	strb	r2, [r3, r4]
 80024da:	e006      	b.n	80024ea <init_bg+0x6e>
				}

			} else if (i == z_height) {
				WORLD[i][j] = (_grass << 4) | _grass;
			} else {
				WORLD[i][j] = 0x00;
 80024dc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80024e0:	4a0f      	ldr	r2, [pc, #60]	; (8002520 <init_bg+0xa4>)
 80024e2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80024e6:	2200      	movs	r2, #0
 80024e8:	551a      	strb	r2, [r3, r4]
		for (uint16_t j = 0; j < WORLD_WIDTH/2; j++) {
 80024ea:	3401      	adds	r4, #1
 80024ec:	b2a4      	uxth	r4, r4
 80024ee:	2c4f      	cmp	r4, #79	; 0x4f
 80024f0:	d80b      	bhi.n	800250a <init_bg+0x8e>
			if (i > z_height) {
 80024f2:	42b5      	cmp	r5, r6
 80024f4:	d8cb      	bhi.n	800248e <init_bg+0x12>
			} else if (i == z_height) {
 80024f6:	42b5      	cmp	r5, r6
 80024f8:	d1f0      	bne.n	80024dc <init_bg+0x60>
				WORLD[i][j] = (_grass << 4) | _grass;
 80024fa:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80024fe:	4a08      	ldr	r2, [pc, #32]	; (8002520 <init_bg+0xa4>)
 8002500:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8002504:	2222      	movs	r2, #34	; 0x22
 8002506:	551a      	strb	r2, [r3, r4]
 8002508:	e7ef      	b.n	80024ea <init_bg+0x6e>
	for (uint16_t i = 0; i < WORLD_HEIGHT; i++) {
 800250a:	3501      	adds	r5, #1
 800250c:	b2ad      	uxth	r5, r5
 800250e:	2d77      	cmp	r5, #119	; 0x77
 8002510:	d801      	bhi.n	8002516 <init_bg+0x9a>
		for (uint16_t j = 0; j < WORLD_WIDTH/2; j++) {
 8002512:	2400      	movs	r4, #0
 8002514:	e7eb      	b.n	80024ee <init_bg+0x72>
			}
		}
	}
}
 8002516:	bd70      	pop	{r4, r5, r6, pc}
 8002518:	30000000 	.word	0x30000000
 800251c:	3cf5c28f 	.word	0x3cf5c28f
 8002520:	20001240 	.word	0x20001240

08002524 <init_world>:
void init_world() {
 8002524:	b508      	push	{r3, lr}
	update_camera_center((uint16_t) floor(WORLD_WIDTH/4), zero_height-15);	// zero level height should be at 1/3 of the screen
 8002526:	212d      	movs	r1, #45	; 0x2d
 8002528:	2028      	movs	r0, #40	; 0x28
 800252a:	f7ff ff7f 	bl	800242c <update_camera_center>
	GROUND_ZERO = zero_height + 15;
 800252e:	4b03      	ldr	r3, [pc, #12]	; (800253c <init_world+0x18>)
 8002530:	224b      	movs	r2, #75	; 0x4b
 8002532:	801a      	strh	r2, [r3, #0]
	init_bg(zero_height);
 8002534:	203c      	movs	r0, #60	; 0x3c
 8002536:	f7ff ffa1 	bl	800247c <init_bg>
}
 800253a:	bd08      	pop	{r3, pc}
 800253c:	20000040 	.word	0x20000040

08002540 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002540:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002542:	4810      	ldr	r0, [pc, #64]	; (8002584 <MX_SPI1_Init+0x44>)
 8002544:	4b10      	ldr	r3, [pc, #64]	; (8002588 <MX_SPI1_Init+0x48>)
 8002546:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002548:	f44f 7382 	mov.w	r3, #260	; 0x104
 800254c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800254e:	2300      	movs	r3, #0
 8002550:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002552:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002556:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002558:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800255a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800255c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002560:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002562:	2228      	movs	r2, #40	; 0x28
 8002564:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002566:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002568:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800256a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800256c:	2207      	movs	r2, #7
 800256e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002570:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002572:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002574:	f004 fd22 	bl	8006fbc <HAL_SPI_Init>
 8002578:	b900      	cbnz	r0, 800257c <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800257a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800257c:	f7ff fc58 	bl	8001e30 <Error_Handler>
}
 8002580:	e7fb      	b.n	800257a <MX_SPI1_Init+0x3a>
 8002582:	bf00      	nop
 8002584:	200037c4 	.word	0x200037c4
 8002588:	40013000 	.word	0x40013000

0800258c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800258c:	b500      	push	{lr}
 800258e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	2300      	movs	r3, #0
 8002592:	9303      	str	r3, [sp, #12]
 8002594:	9304      	str	r3, [sp, #16]
 8002596:	9305      	str	r3, [sp, #20]
 8002598:	9306      	str	r3, [sp, #24]
 800259a:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 800259c:	6802      	ldr	r2, [r0, #0]
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_SPI_MspInit+0x5c>)
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d002      	beq.n	80025aa <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80025a4:	b009      	add	sp, #36	; 0x24
 80025a6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025aa:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80025ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025b4:	661a      	str	r2, [r3, #96]	; 0x60
 80025b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025b8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025bc:	9201      	str	r2, [sp, #4]
 80025be:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80025c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80025c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ce:	9302      	str	r3, [sp, #8]
 80025d0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80025d2:	231c      	movs	r3, #28
 80025d4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d6:	2302      	movs	r3, #2
 80025d8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025da:	2305      	movs	r3, #5
 80025dc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025de:	a903      	add	r1, sp, #12
 80025e0:	4802      	ldr	r0, [pc, #8]	; (80025ec <HAL_SPI_MspInit+0x60>)
 80025e2:	f002 f91d 	bl	8004820 <HAL_GPIO_Init>
}
 80025e6:	e7dd      	b.n	80025a4 <HAL_SPI_MspInit+0x18>
 80025e8:	40013000 	.word	0x40013000
 80025ec:	48001800 	.word	0x48001800

080025f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f0:	b500      	push	{lr}
 80025f2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f4:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <HAL_MspInit+0x34>)
 80025f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025f8:	f042 0201 	orr.w	r2, r2, #1
 80025fc:	661a      	str	r2, [r3, #96]	; 0x60
 80025fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002600:	f002 0201 	and.w	r2, r2, #1
 8002604:	9200      	str	r2, [sp, #0]
 8002606:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002608:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800260a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800260e:	659a      	str	r2, [r3, #88]	; 0x58
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002616:	9301      	str	r3, [sp, #4]
 8002618:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800261a:	f003 fe7d 	bl	8006318 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800261e:	b003      	add	sp, #12
 8002620:	f85d fb04 	ldr.w	pc, [sp], #4
 8002624:	40021000 	.word	0x40021000

08002628 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002628:	e7fe      	b.n	8002628 <NMI_Handler>

0800262a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800262a:	e7fe      	b.n	800262a <HardFault_Handler>

0800262c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800262c:	e7fe      	b.n	800262c <MemManage_Handler>

0800262e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800262e:	e7fe      	b.n	800262e <BusFault_Handler>

08002630 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002630:	e7fe      	b.n	8002630 <UsageFault_Handler>

08002632 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002632:	4770      	bx	lr

08002634 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002634:	4770      	bx	lr

08002636 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002636:	4770      	bx	lr

08002638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002638:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800263a:	f000 febd 	bl	80033b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800263e:	bd08      	pop	{r3, pc}

08002640 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002640:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 8002642:	4802      	ldr	r0, [pc, #8]	; (800264c <DMA1_Channel1_IRQHandler+0xc>)
 8002644:	f001 ff57 	bl	80044f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002648:	bd08      	pop	{r3, pc}
 800264a:	bf00      	nop
 800264c:	2000061c 	.word	0x2000061c

08002650 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002650:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002652:	4802      	ldr	r0, [pc, #8]	; (800265c <DMA1_Channel3_IRQHandler+0xc>)
 8002654:	f001 ff4f 	bl	80044f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002658:	bd08      	pop	{r3, pc}
 800265a:	bf00      	nop
 800265c:	2000073c 	.word	0x2000073c

08002660 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002660:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002662:	4802      	ldr	r0, [pc, #8]	; (800266c <DMA1_Channel4_IRQHandler+0xc>)
 8002664:	f001 ff47 	bl	80044f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002668:	bd08      	pop	{r3, pc}
 800266a:	bf00      	nop
 800266c:	2000079c 	.word	0x2000079c

08002670 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002670:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8002672:	4802      	ldr	r0, [pc, #8]	; (800267c <DMA1_Channel5_IRQHandler+0xc>)
 8002674:	f001 ff3f 	bl	80044f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002678:	bd08      	pop	{r3, pc}
 800267a:	bf00      	nop
 800267c:	20000570 	.word	0x20000570

08002680 <DMA1_Channel6_IRQHandler>:
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002680:	4770      	bx	lr

08002682 <DMA1_Channel7_IRQHandler>:
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002682:	4770      	bx	lr

08002684 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002684:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002686:	4802      	ldr	r0, [pc, #8]	; (8002690 <USB_LP_IRQHandler+0xc>)
 8002688:	f003 fb7d 	bl	8005d86 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800268c:	bd08      	pop	{r3, pc}
 800268e:	bf00      	nop
 8002690:	200050e8 	.word	0x200050e8

08002694 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8002694:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002696:	4802      	ldr	r0, [pc, #8]	; (80026a0 <I2C1_EV_IRQHandler+0xc>)
 8002698:	f002 fa58 	bl	8004b4c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800269c:	bd08      	pop	{r3, pc}
 800269e:	bf00      	nop
 80026a0:	200007fc 	.word	0x200007fc

080026a4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80026a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80026a6:	4802      	ldr	r0, [pc, #8]	; (80026b0 <I2C1_ER_IRQHandler+0xc>)
 80026a8:	f002 fd1b 	bl	80050e2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80026ac:	bd08      	pop	{r3, pc}
 80026ae:	bf00      	nop
 80026b0:	200007fc 	.word	0x200007fc

080026b4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80026b4:	2001      	movs	r0, #1
 80026b6:	4770      	bx	lr

080026b8 <_kill>:

int _kill(int pid, int sig)
{
 80026b8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80026ba:	f008 fbdd 	bl	800ae78 <__errno>
 80026be:	2316      	movs	r3, #22
 80026c0:	6003      	str	r3, [r0, #0]
	return -1;
}
 80026c2:	f04f 30ff 	mov.w	r0, #4294967295
 80026c6:	bd08      	pop	{r3, pc}

080026c8 <_exit>:

void _exit (int status)
{
 80026c8:	b508      	push	{r3, lr}
	_kill(status, -1);
 80026ca:	f04f 31ff 	mov.w	r1, #4294967295
 80026ce:	f7ff fff3 	bl	80026b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80026d2:	e7fe      	b.n	80026d2 <_exit+0xa>

080026d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026d4:	b570      	push	{r4, r5, r6, lr}
 80026d6:	460c      	mov	r4, r1
 80026d8:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026da:	2500      	movs	r5, #0
 80026dc:	e006      	b.n	80026ec <_read+0x18>
	{
		*ptr++ = __io_getchar();
 80026de:	f3af 8000 	nop.w
 80026e2:	4621      	mov	r1, r4
 80026e4:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e8:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 80026ea:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ec:	42b5      	cmp	r5, r6
 80026ee:	dbf6      	blt.n	80026de <_read+0xa>
	}

return len;
}
 80026f0:	4630      	mov	r0, r6
 80026f2:	bd70      	pop	{r4, r5, r6, pc}

080026f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026f4:	b570      	push	{r4, r5, r6, lr}
 80026f6:	460c      	mov	r4, r1
 80026f8:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fa:	2500      	movs	r5, #0
 80026fc:	e004      	b.n	8002708 <_write+0x14>
	{
		__io_putchar(*ptr++);
 80026fe:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002702:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002706:	3501      	adds	r5, #1
 8002708:	42b5      	cmp	r5, r6
 800270a:	dbf8      	blt.n	80026fe <_write+0xa>
	}
	return len;
}
 800270c:	4630      	mov	r0, r6
 800270e:	bd70      	pop	{r4, r5, r6, pc}

08002710 <_close>:

int _close(int file)
{
	return -1;
}
 8002710:	f04f 30ff 	mov.w	r0, #4294967295
 8002714:	4770      	bx	lr

08002716 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002716:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800271a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800271c:	2000      	movs	r0, #0
 800271e:	4770      	bx	lr

08002720 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002720:	2001      	movs	r0, #1
 8002722:	4770      	bx	lr

08002724 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002724:	2000      	movs	r0, #0
 8002726:	4770      	bx	lr

08002728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002728:	b510      	push	{r4, lr}
 800272a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800272c:	4a0c      	ldr	r2, [pc, #48]	; (8002760 <_sbrk+0x38>)
 800272e:	490d      	ldr	r1, [pc, #52]	; (8002764 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002730:	480d      	ldr	r0, [pc, #52]	; (8002768 <_sbrk+0x40>)
 8002732:	6800      	ldr	r0, [r0, #0]
 8002734:	b140      	cbz	r0, 8002748 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002736:	480c      	ldr	r0, [pc, #48]	; (8002768 <_sbrk+0x40>)
 8002738:	6800      	ldr	r0, [r0, #0]
 800273a:	4403      	add	r3, r0
 800273c:	1a52      	subs	r2, r2, r1
 800273e:	4293      	cmp	r3, r2
 8002740:	d806      	bhi.n	8002750 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002742:	4a09      	ldr	r2, [pc, #36]	; (8002768 <_sbrk+0x40>)
 8002744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002746:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002748:	4807      	ldr	r0, [pc, #28]	; (8002768 <_sbrk+0x40>)
 800274a:	4c08      	ldr	r4, [pc, #32]	; (800276c <_sbrk+0x44>)
 800274c:	6004      	str	r4, [r0, #0]
 800274e:	e7f2      	b.n	8002736 <_sbrk+0xe>
    errno = ENOMEM;
 8002750:	f008 fb92 	bl	800ae78 <__errno>
 8002754:	230c      	movs	r3, #12
 8002756:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002758:	f04f 30ff 	mov.w	r0, #4294967295
 800275c:	e7f3      	b.n	8002746 <_sbrk+0x1e>
 800275e:	bf00      	nop
 8002760:	20020000 	.word	0x20020000
 8002764:	00000400 	.word	0x00000400
 8002768:	20003828 	.word	0x20003828
 800276c:	20005610 	.word	0x20005610

08002770 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002770:	4a03      	ldr	r2, [pc, #12]	; (8002780 <SystemInit+0x10>)
 8002772:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002776:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800277a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800277e:	4770      	bx	lr
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim20);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002784:	b084      	sub	sp, #16

  if(tim_baseHandle->Instance==TIM5)
 8002786:	6803      	ldr	r3, [r0, #0]
 8002788:	4a1c      	ldr	r2, [pc, #112]	; (80027fc <HAL_TIM_Base_MspInit+0x78>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d013      	beq.n	80027b6 <HAL_TIM_Base_MspInit+0x32>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM8)
 800278e:	4a1c      	ldr	r2, [pc, #112]	; (8002800 <HAL_TIM_Base_MspInit+0x7c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d01c      	beq.n	80027ce <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM15)
 8002794:	4a1b      	ldr	r2, [pc, #108]	; (8002804 <HAL_TIM_Base_MspInit+0x80>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d024      	beq.n	80027e4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM20)
 800279a:	4a1b      	ldr	r2, [pc, #108]	; (8002808 <HAL_TIM_Base_MspInit+0x84>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d114      	bne.n	80027ca <HAL_TIM_Base_MspInit+0x46>
  {
  /* USER CODE BEGIN TIM20_MspInit 0 */

  /* USER CODE END TIM20_MspInit 0 */
    /* TIM20 clock enable */
    __HAL_RCC_TIM20_CLK_ENABLE();
 80027a0:	4b1a      	ldr	r3, [pc, #104]	; (800280c <HAL_TIM_Base_MspInit+0x88>)
 80027a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027a4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80027a8:	661a      	str	r2, [r3, #96]	; 0x60
 80027aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027b0:	9303      	str	r3, [sp, #12]
 80027b2:	9b03      	ldr	r3, [sp, #12]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 80027b4:	e009      	b.n	80027ca <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <HAL_TIM_Base_MspInit+0x88>)
 80027b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027ba:	f042 0208 	orr.w	r2, r2, #8
 80027be:	659a      	str	r2, [r3, #88]	; 0x58
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	9b00      	ldr	r3, [sp, #0]
}
 80027ca:	b004      	add	sp, #16
 80027cc:	4770      	bx	lr
    __HAL_RCC_TIM8_CLK_ENABLE();
 80027ce:	4b0f      	ldr	r3, [pc, #60]	; (800280c <HAL_TIM_Base_MspInit+0x88>)
 80027d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027d6:	661a      	str	r2, [r3, #96]	; 0x60
 80027d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	9b01      	ldr	r3, [sp, #4]
 80027e2:	e7f2      	b.n	80027ca <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <HAL_TIM_Base_MspInit+0x88>)
 80027e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027ec:	661a      	str	r2, [r3, #96]	; 0x60
 80027ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f4:	9302      	str	r3, [sp, #8]
 80027f6:	9b02      	ldr	r3, [sp, #8]
 80027f8:	e7e7      	b.n	80027ca <HAL_TIM_Base_MspInit+0x46>
 80027fa:	bf00      	nop
 80027fc:	40000c00 	.word	0x40000c00
 8002800:	40013400 	.word	0x40013400
 8002804:	40014000 	.word	0x40014000
 8002808:	40015000 	.word	0x40015000
 800280c:	40021000 	.word	0x40021000

08002810 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002810:	b500      	push	{lr}
 8002812:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002814:	2300      	movs	r3, #0
 8002816:	9305      	str	r3, [sp, #20]
 8002818:	9306      	str	r3, [sp, #24]
 800281a:	9307      	str	r3, [sp, #28]
 800281c:	9308      	str	r3, [sp, #32]
 800281e:	9309      	str	r3, [sp, #36]	; 0x24
  if(timHandle->Instance==TIM5)
 8002820:	6803      	ldr	r3, [r0, #0]
 8002822:	4a33      	ldr	r2, [pc, #204]	; (80028f0 <HAL_TIM_MspPostInit+0xe0>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d00b      	beq.n	8002840 <HAL_TIM_MspPostInit+0x30>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM8)
 8002828:	4a32      	ldr	r2, [pc, #200]	; (80028f4 <HAL_TIM_MspPostInit+0xe4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d01e      	beq.n	800286c <HAL_TIM_MspPostInit+0x5c>

  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM15)
 800282e:	4a32      	ldr	r2, [pc, #200]	; (80028f8 <HAL_TIM_MspPostInit+0xe8>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d031      	beq.n	8002898 <HAL_TIM_MspPostInit+0x88>

  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM20)
 8002834:	4a31      	ldr	r2, [pc, #196]	; (80028fc <HAL_TIM_MspPostInit+0xec>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d044      	beq.n	80028c4 <HAL_TIM_MspPostInit+0xb4>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 800283a:	b00b      	add	sp, #44	; 0x2c
 800283c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002840:	4b2f      	ldr	r3, [pc, #188]	; (8002900 <HAL_TIM_MspPostInit+0xf0>)
 8002842:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002844:	f042 0220 	orr.w	r2, r2, #32
 8002848:	64da      	str	r2, [r3, #76]	; 0x4c
 800284a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284c:	f003 0320 	and.w	r3, r3, #32
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM2_Pin|PWM3_Pin|PWM4_Pin;
 8002854:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002858:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285a:	2302      	movs	r3, #2
 800285c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM5;
 800285e:	2306      	movs	r3, #6
 8002860:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002862:	a905      	add	r1, sp, #20
 8002864:	4827      	ldr	r0, [pc, #156]	; (8002904 <HAL_TIM_MspPostInit+0xf4>)
 8002866:	f001 ffdb 	bl	8004820 <HAL_GPIO_Init>
 800286a:	e7e6      	b.n	800283a <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800286c:	4b24      	ldr	r3, [pc, #144]	; (8002900 <HAL_TIM_MspPostInit+0xf0>)
 800286e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002870:	f042 0204 	orr.w	r2, r2, #4
 8002874:	64da      	str	r2, [r3, #76]	; 0x4c
 8002876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	9302      	str	r3, [sp, #8]
 800287e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = PWM10_Pin|PWM11_Pin|PWM12_Pin|PWM13_Pin;
 8002880:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002884:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002886:	2302      	movs	r3, #2
 8002888:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800288a:	2304      	movs	r3, #4
 800288c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800288e:	a905      	add	r1, sp, #20
 8002890:	481d      	ldr	r0, [pc, #116]	; (8002908 <HAL_TIM_MspPostInit+0xf8>)
 8002892:	f001 ffc5 	bl	8004820 <HAL_GPIO_Init>
 8002896:	e7d0      	b.n	800283a <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002898:	4b19      	ldr	r3, [pc, #100]	; (8002900 <HAL_TIM_MspPostInit+0xf0>)
 800289a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800289c:	f042 0220 	orr.w	r2, r2, #32
 80028a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80028a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a4:	f003 0320 	and.w	r3, r3, #32
 80028a8:	9303      	str	r3, [sp, #12]
 80028aa:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = PWM5_Pin;
 80028ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028b0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b2:	2302      	movs	r3, #2
 80028b4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM15;
 80028b6:	2303      	movs	r3, #3
 80028b8:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(PWM5_GPIO_Port, &GPIO_InitStruct);
 80028ba:	a905      	add	r1, sp, #20
 80028bc:	4811      	ldr	r0, [pc, #68]	; (8002904 <HAL_TIM_MspPostInit+0xf4>)
 80028be:	f001 ffaf 	bl	8004820 <HAL_GPIO_Init>
 80028c2:	e7ba      	b.n	800283a <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028c4:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <HAL_TIM_MspPostInit+0xf0>)
 80028c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028c8:	f042 0220 	orr.w	r2, r2, #32
 80028cc:	64da      	str	r2, [r3, #76]	; 0x4c
 80028ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d0:	f003 0320 	and.w	r3, r3, #32
 80028d4:	9304      	str	r3, [sp, #16]
 80028d6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = PWM6_Pin|PWM7_Pin|PWM8_Pin|PWM9_Pin;
 80028d8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80028dc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028de:	2302      	movs	r3, #2
 80028e0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM20;
 80028e2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028e4:	a905      	add	r1, sp, #20
 80028e6:	4807      	ldr	r0, [pc, #28]	; (8002904 <HAL_TIM_MspPostInit+0xf4>)
 80028e8:	f001 ff9a 	bl	8004820 <HAL_GPIO_Init>
}
 80028ec:	e7a5      	b.n	800283a <HAL_TIM_MspPostInit+0x2a>
 80028ee:	bf00      	nop
 80028f0:	40000c00 	.word	0x40000c00
 80028f4:	40013400 	.word	0x40013400
 80028f8:	40014000 	.word	0x40014000
 80028fc:	40015000 	.word	0x40015000
 8002900:	40021000 	.word	0x40021000
 8002904:	48001400 	.word	0x48001400
 8002908:	48000800 	.word	0x48000800

0800290c <MX_TIM5_Init>:
{
 800290c:	b500      	push	{lr}
 800290e:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002910:	2300      	movs	r3, #0
 8002912:	930a      	str	r3, [sp, #40]	; 0x28
 8002914:	930b      	str	r3, [sp, #44]	; 0x2c
 8002916:	930c      	str	r3, [sp, #48]	; 0x30
 8002918:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800291a:	9307      	str	r3, [sp, #28]
 800291c:	9308      	str	r3, [sp, #32]
 800291e:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	9301      	str	r3, [sp, #4]
 8002924:	9302      	str	r3, [sp, #8]
 8002926:	9303      	str	r3, [sp, #12]
 8002928:	9304      	str	r3, [sp, #16]
 800292a:	9305      	str	r3, [sp, #20]
 800292c:	9306      	str	r3, [sp, #24]
  htim5.Instance = TIM5;
 800292e:	4830      	ldr	r0, [pc, #192]	; (80029f0 <MX_TIM5_Init+0xe4>)
 8002930:	4a30      	ldr	r2, [pc, #192]	; (80029f4 <MX_TIM5_Init+0xe8>)
 8002932:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 10;
 8002934:	220a      	movs	r2, #10
 8002936:	6042      	str	r2, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002938:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 10000;
 800293a:	f242 7210 	movw	r2, #10000	; 0x2710
 800293e:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002940:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002942:	2380      	movs	r3, #128	; 0x80
 8002944:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002946:	f004 fde1 	bl	800750c <HAL_TIM_Base_Init>
 800294a:	2800      	cmp	r0, #0
 800294c:	d13a      	bne.n	80029c4 <MX_TIM5_Init+0xb8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800294e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002952:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002954:	a90a      	add	r1, sp, #40	; 0x28
 8002956:	4826      	ldr	r0, [pc, #152]	; (80029f0 <MX_TIM5_Init+0xe4>)
 8002958:	f004 ff30 	bl	80077bc <HAL_TIM_ConfigClockSource>
 800295c:	2800      	cmp	r0, #0
 800295e:	d134      	bne.n	80029ca <MX_TIM5_Init+0xbe>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002960:	4823      	ldr	r0, [pc, #140]	; (80029f0 <MX_TIM5_Init+0xe4>)
 8002962:	f004 fe03 	bl	800756c <HAL_TIM_PWM_Init>
 8002966:	2800      	cmp	r0, #0
 8002968:	d132      	bne.n	80029d0 <MX_TIM5_Init+0xc4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800296a:	2300      	movs	r3, #0
 800296c:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800296e:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002970:	a907      	add	r1, sp, #28
 8002972:	481f      	ldr	r0, [pc, #124]	; (80029f0 <MX_TIM5_Init+0xe4>)
 8002974:	f004 ffcc 	bl	8007910 <HAL_TIMEx_MasterConfigSynchronization>
 8002978:	bb68      	cbnz	r0, 80029d6 <MX_TIM5_Init+0xca>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800297a:	2360      	movs	r3, #96	; 0x60
 800297c:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 200;
 800297e:	23c8      	movs	r3, #200	; 0xc8
 8002980:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002982:	2300      	movs	r3, #0
 8002984:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002986:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002988:	2204      	movs	r2, #4
 800298a:	4669      	mov	r1, sp
 800298c:	4818      	ldr	r0, [pc, #96]	; (80029f0 <MX_TIM5_Init+0xe4>)
 800298e:	f004 fe6b 	bl	8007668 <HAL_TIM_PWM_ConfigChannel>
 8002992:	bb18      	cbnz	r0, 80029dc <MX_TIM5_Init+0xd0>
  sConfigOC.Pulse = 400;
 8002994:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002998:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800299a:	2208      	movs	r2, #8
 800299c:	4669      	mov	r1, sp
 800299e:	4814      	ldr	r0, [pc, #80]	; (80029f0 <MX_TIM5_Init+0xe4>)
 80029a0:	f004 fe62 	bl	8007668 <HAL_TIM_PWM_ConfigChannel>
 80029a4:	b9e8      	cbnz	r0, 80029e2 <MX_TIM5_Init+0xd6>
  sConfigOC.Pulse = 600;
 80029a6:	f44f 7316 	mov.w	r3, #600	; 0x258
 80029aa:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80029ac:	220c      	movs	r2, #12
 80029ae:	4669      	mov	r1, sp
 80029b0:	480f      	ldr	r0, [pc, #60]	; (80029f0 <MX_TIM5_Init+0xe4>)
 80029b2:	f004 fe59 	bl	8007668 <HAL_TIM_PWM_ConfigChannel>
 80029b6:	b9b8      	cbnz	r0, 80029e8 <MX_TIM5_Init+0xdc>
  HAL_TIM_MspPostInit(&htim5);
 80029b8:	480d      	ldr	r0, [pc, #52]	; (80029f0 <MX_TIM5_Init+0xe4>)
 80029ba:	f7ff ff29 	bl	8002810 <HAL_TIM_MspPostInit>
}
 80029be:	b00f      	add	sp, #60	; 0x3c
 80029c0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80029c4:	f7ff fa34 	bl	8001e30 <Error_Handler>
 80029c8:	e7c1      	b.n	800294e <MX_TIM5_Init+0x42>
    Error_Handler();
 80029ca:	f7ff fa31 	bl	8001e30 <Error_Handler>
 80029ce:	e7c7      	b.n	8002960 <MX_TIM5_Init+0x54>
    Error_Handler();
 80029d0:	f7ff fa2e 	bl	8001e30 <Error_Handler>
 80029d4:	e7c9      	b.n	800296a <MX_TIM5_Init+0x5e>
    Error_Handler();
 80029d6:	f7ff fa2b 	bl	8001e30 <Error_Handler>
 80029da:	e7ce      	b.n	800297a <MX_TIM5_Init+0x6e>
    Error_Handler();
 80029dc:	f7ff fa28 	bl	8001e30 <Error_Handler>
 80029e0:	e7d8      	b.n	8002994 <MX_TIM5_Init+0x88>
    Error_Handler();
 80029e2:	f7ff fa25 	bl	8001e30 <Error_Handler>
 80029e6:	e7de      	b.n	80029a6 <MX_TIM5_Init+0x9a>
    Error_Handler();
 80029e8:	f7ff fa22 	bl	8001e30 <Error_Handler>
 80029ec:	e7e4      	b.n	80029b8 <MX_TIM5_Init+0xac>
 80029ee:	bf00      	nop
 80029f0:	200038c4 	.word	0x200038c4
 80029f4:	40000c00 	.word	0x40000c00

080029f8 <MX_TIM8_Init>:
{
 80029f8:	b510      	push	{r4, lr}
 80029fa:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029fc:	2400      	movs	r4, #0
 80029fe:	9418      	str	r4, [sp, #96]	; 0x60
 8002a00:	9419      	str	r4, [sp, #100]	; 0x64
 8002a02:	941a      	str	r4, [sp, #104]	; 0x68
 8002a04:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a06:	9415      	str	r4, [sp, #84]	; 0x54
 8002a08:	9416      	str	r4, [sp, #88]	; 0x58
 8002a0a:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a0c:	940e      	str	r4, [sp, #56]	; 0x38
 8002a0e:	940f      	str	r4, [sp, #60]	; 0x3c
 8002a10:	9410      	str	r4, [sp, #64]	; 0x40
 8002a12:	9411      	str	r4, [sp, #68]	; 0x44
 8002a14:	9412      	str	r4, [sp, #72]	; 0x48
 8002a16:	9413      	str	r4, [sp, #76]	; 0x4c
 8002a18:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a1a:	2234      	movs	r2, #52	; 0x34
 8002a1c:	4621      	mov	r1, r4
 8002a1e:	a801      	add	r0, sp, #4
 8002a20:	f008 fa64 	bl	800aeec <memset>
  htim8.Instance = TIM8;
 8002a24:	4846      	ldr	r0, [pc, #280]	; (8002b40 <MX_TIM8_Init+0x148>)
 8002a26:	4b47      	ldr	r3, [pc, #284]	; (8002b44 <MX_TIM8_Init+0x14c>)
 8002a28:	6003      	str	r3, [r0, #0]
  htim8.Init.Prescaler = 0;
 8002a2a:	6044      	str	r4, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a2c:	6084      	str	r4, [r0, #8]
  htim8.Init.Period = 65535;
 8002a2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a32:	60c3      	str	r3, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a34:	6104      	str	r4, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 8002a36:	6144      	str	r4, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a38:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002a3a:	f004 fd67 	bl	800750c <HAL_TIM_Base_Init>
 8002a3e:	2800      	cmp	r0, #0
 8002a40:	d162      	bne.n	8002b08 <MX_TIM8_Init+0x110>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a46:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002a48:	a918      	add	r1, sp, #96	; 0x60
 8002a4a:	483d      	ldr	r0, [pc, #244]	; (8002b40 <MX_TIM8_Init+0x148>)
 8002a4c:	f004 feb6 	bl	80077bc <HAL_TIM_ConfigClockSource>
 8002a50:	2800      	cmp	r0, #0
 8002a52:	d15c      	bne.n	8002b0e <MX_TIM8_Init+0x116>
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002a54:	483a      	ldr	r0, [pc, #232]	; (8002b40 <MX_TIM8_Init+0x148>)
 8002a56:	f004 fd89 	bl	800756c <HAL_TIM_PWM_Init>
 8002a5a:	2800      	cmp	r0, #0
 8002a5c:	d15a      	bne.n	8002b14 <MX_TIM8_Init+0x11c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a62:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a64:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002a66:	a915      	add	r1, sp, #84	; 0x54
 8002a68:	4835      	ldr	r0, [pc, #212]	; (8002b40 <MX_TIM8_Init+0x148>)
 8002a6a:	f004 ff51 	bl	8007910 <HAL_TIMEx_MasterConfigSynchronization>
 8002a6e:	2800      	cmp	r0, #0
 8002a70:	d153      	bne.n	8002b1a <MX_TIM8_Init+0x122>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a72:	2360      	movs	r3, #96	; 0x60
 8002a74:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 1000;
 8002a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a7a:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a80:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a82:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a84:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a86:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a88:	a90e      	add	r1, sp, #56	; 0x38
 8002a8a:	482d      	ldr	r0, [pc, #180]	; (8002b40 <MX_TIM8_Init+0x148>)
 8002a8c:	f004 fdec 	bl	8007668 <HAL_TIM_PWM_ConfigChannel>
 8002a90:	2800      	cmp	r0, #0
 8002a92:	d145      	bne.n	8002b20 <MX_TIM8_Init+0x128>
  sConfigOC.Pulse = 2000;
 8002a94:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002a98:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	a90e      	add	r1, sp, #56	; 0x38
 8002a9e:	4828      	ldr	r0, [pc, #160]	; (8002b40 <MX_TIM8_Init+0x148>)
 8002aa0:	f004 fde2 	bl	8007668 <HAL_TIM_PWM_ConfigChannel>
 8002aa4:	2800      	cmp	r0, #0
 8002aa6:	d13e      	bne.n	8002b26 <MX_TIM8_Init+0x12e>
  sConfigOC.Pulse = 4000;
 8002aa8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002aac:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002aae:	2208      	movs	r2, #8
 8002ab0:	a90e      	add	r1, sp, #56	; 0x38
 8002ab2:	4823      	ldr	r0, [pc, #140]	; (8002b40 <MX_TIM8_Init+0x148>)
 8002ab4:	f004 fdd8 	bl	8007668 <HAL_TIM_PWM_ConfigChannel>
 8002ab8:	2800      	cmp	r0, #0
 8002aba:	d137      	bne.n	8002b2c <MX_TIM8_Init+0x134>
  sConfigOC.Pulse = 8000;
 8002abc:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8002ac0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ac2:	220c      	movs	r2, #12
 8002ac4:	a90e      	add	r1, sp, #56	; 0x38
 8002ac6:	481e      	ldr	r0, [pc, #120]	; (8002b40 <MX_TIM8_Init+0x148>)
 8002ac8:	f004 fdce 	bl	8007668 <HAL_TIM_PWM_ConfigChannel>
 8002acc:	2800      	cmp	r0, #0
 8002ace:	d130      	bne.n	8002b32 <MX_TIM8_Init+0x13a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ad4:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ad6:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ad8:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ada:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002adc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ae0:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002ae2:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002ae4:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002ae6:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002ae8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aec:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002aee:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002af0:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002af2:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002af4:	a901      	add	r1, sp, #4
 8002af6:	4812      	ldr	r0, [pc, #72]	; (8002b40 <MX_TIM8_Init+0x148>)
 8002af8:	f004 ff60 	bl	80079bc <HAL_TIMEx_ConfigBreakDeadTime>
 8002afc:	b9e0      	cbnz	r0, 8002b38 <MX_TIM8_Init+0x140>
  HAL_TIM_MspPostInit(&htim8);
 8002afe:	4810      	ldr	r0, [pc, #64]	; (8002b40 <MX_TIM8_Init+0x148>)
 8002b00:	f7ff fe86 	bl	8002810 <HAL_TIM_MspPostInit>
}
 8002b04:	b01c      	add	sp, #112	; 0x70
 8002b06:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002b08:	f7ff f992 	bl	8001e30 <Error_Handler>
 8002b0c:	e799      	b.n	8002a42 <MX_TIM8_Init+0x4a>
    Error_Handler();
 8002b0e:	f7ff f98f 	bl	8001e30 <Error_Handler>
 8002b12:	e79f      	b.n	8002a54 <MX_TIM8_Init+0x5c>
    Error_Handler();
 8002b14:	f7ff f98c 	bl	8001e30 <Error_Handler>
 8002b18:	e7a1      	b.n	8002a5e <MX_TIM8_Init+0x66>
    Error_Handler();
 8002b1a:	f7ff f989 	bl	8001e30 <Error_Handler>
 8002b1e:	e7a8      	b.n	8002a72 <MX_TIM8_Init+0x7a>
    Error_Handler();
 8002b20:	f7ff f986 	bl	8001e30 <Error_Handler>
 8002b24:	e7b6      	b.n	8002a94 <MX_TIM8_Init+0x9c>
    Error_Handler();
 8002b26:	f7ff f983 	bl	8001e30 <Error_Handler>
 8002b2a:	e7bd      	b.n	8002aa8 <MX_TIM8_Init+0xb0>
    Error_Handler();
 8002b2c:	f7ff f980 	bl	8001e30 <Error_Handler>
 8002b30:	e7c4      	b.n	8002abc <MX_TIM8_Init+0xc4>
    Error_Handler();
 8002b32:	f7ff f97d 	bl	8001e30 <Error_Handler>
 8002b36:	e7cb      	b.n	8002ad0 <MX_TIM8_Init+0xd8>
    Error_Handler();
 8002b38:	f7ff f97a 	bl	8001e30 <Error_Handler>
 8002b3c:	e7df      	b.n	8002afe <MX_TIM8_Init+0x106>
 8002b3e:	bf00      	nop
 8002b40:	20003910 	.word	0x20003910
 8002b44:	40013400 	.word	0x40013400

08002b48 <MX_TIM15_Init>:
{
 8002b48:	b510      	push	{r4, lr}
 8002b4a:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b4c:	2400      	movs	r4, #0
 8002b4e:	9418      	str	r4, [sp, #96]	; 0x60
 8002b50:	9419      	str	r4, [sp, #100]	; 0x64
 8002b52:	941a      	str	r4, [sp, #104]	; 0x68
 8002b54:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b56:	9415      	str	r4, [sp, #84]	; 0x54
 8002b58:	9416      	str	r4, [sp, #88]	; 0x58
 8002b5a:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b5c:	940e      	str	r4, [sp, #56]	; 0x38
 8002b5e:	940f      	str	r4, [sp, #60]	; 0x3c
 8002b60:	9410      	str	r4, [sp, #64]	; 0x40
 8002b62:	9411      	str	r4, [sp, #68]	; 0x44
 8002b64:	9412      	str	r4, [sp, #72]	; 0x48
 8002b66:	9413      	str	r4, [sp, #76]	; 0x4c
 8002b68:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b6a:	2234      	movs	r2, #52	; 0x34
 8002b6c:	4621      	mov	r1, r4
 8002b6e:	a801      	add	r0, sp, #4
 8002b70:	f008 f9bc 	bl	800aeec <memset>
  htim15.Instance = TIM15;
 8002b74:	482e      	ldr	r0, [pc, #184]	; (8002c30 <MX_TIM15_Init+0xe8>)
 8002b76:	4b2f      	ldr	r3, [pc, #188]	; (8002c34 <MX_TIM15_Init+0xec>)
 8002b78:	6003      	str	r3, [r0, #0]
  htim15.Init.Prescaler = 0;
 8002b7a:	6044      	str	r4, [r0, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b7c:	6084      	str	r4, [r0, #8]
  htim15.Init.Period = 32768;
 8002b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b82:	60c3      	str	r3, [r0, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b84:	6104      	str	r4, [r0, #16]
  htim15.Init.RepetitionCounter = 0;
 8002b86:	6144      	str	r4, [r0, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b88:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002b8a:	f004 fcbf 	bl	800750c <HAL_TIM_Base_Init>
 8002b8e:	2800      	cmp	r0, #0
 8002b90:	d13c      	bne.n	8002c0c <MX_TIM15_Init+0xc4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b96:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002b98:	a918      	add	r1, sp, #96	; 0x60
 8002b9a:	4825      	ldr	r0, [pc, #148]	; (8002c30 <MX_TIM15_Init+0xe8>)
 8002b9c:	f004 fe0e 	bl	80077bc <HAL_TIM_ConfigClockSource>
 8002ba0:	2800      	cmp	r0, #0
 8002ba2:	d136      	bne.n	8002c12 <MX_TIM15_Init+0xca>
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002ba4:	4822      	ldr	r0, [pc, #136]	; (8002c30 <MX_TIM15_Init+0xe8>)
 8002ba6:	f004 fce1 	bl	800756c <HAL_TIM_PWM_Init>
 8002baa:	2800      	cmp	r0, #0
 8002bac:	d134      	bne.n	8002c18 <MX_TIM15_Init+0xd0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bb2:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002bb4:	a915      	add	r1, sp, #84	; 0x54
 8002bb6:	481e      	ldr	r0, [pc, #120]	; (8002c30 <MX_TIM15_Init+0xe8>)
 8002bb8:	f004 feaa 	bl	8007910 <HAL_TIMEx_MasterConfigSynchronization>
 8002bbc:	2800      	cmp	r0, #0
 8002bbe:	d12e      	bne.n	8002c1e <MX_TIM15_Init+0xd6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bc0:	2360      	movs	r3, #96	; 0x60
 8002bc2:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 16000;
 8002bc4:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8002bc8:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bce:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bd0:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bd2:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bd4:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bd6:	2204      	movs	r2, #4
 8002bd8:	a90e      	add	r1, sp, #56	; 0x38
 8002bda:	4815      	ldr	r0, [pc, #84]	; (8002c30 <MX_TIM15_Init+0xe8>)
 8002bdc:	f004 fd44 	bl	8007668 <HAL_TIM_PWM_ConfigChannel>
 8002be0:	bb00      	cbnz	r0, 8002c24 <MX_TIM15_Init+0xdc>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002be6:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002be8:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002bea:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002bec:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002bee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bf2:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002bf4:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002bf6:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002bf8:	a901      	add	r1, sp, #4
 8002bfa:	480d      	ldr	r0, [pc, #52]	; (8002c30 <MX_TIM15_Init+0xe8>)
 8002bfc:	f004 fede 	bl	80079bc <HAL_TIMEx_ConfigBreakDeadTime>
 8002c00:	b998      	cbnz	r0, 8002c2a <MX_TIM15_Init+0xe2>
  HAL_TIM_MspPostInit(&htim15);
 8002c02:	480b      	ldr	r0, [pc, #44]	; (8002c30 <MX_TIM15_Init+0xe8>)
 8002c04:	f7ff fe04 	bl	8002810 <HAL_TIM_MspPostInit>
}
 8002c08:	b01c      	add	sp, #112	; 0x70
 8002c0a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002c0c:	f7ff f910 	bl	8001e30 <Error_Handler>
 8002c10:	e7bf      	b.n	8002b92 <MX_TIM15_Init+0x4a>
    Error_Handler();
 8002c12:	f7ff f90d 	bl	8001e30 <Error_Handler>
 8002c16:	e7c5      	b.n	8002ba4 <MX_TIM15_Init+0x5c>
    Error_Handler();
 8002c18:	f7ff f90a 	bl	8001e30 <Error_Handler>
 8002c1c:	e7c7      	b.n	8002bae <MX_TIM15_Init+0x66>
    Error_Handler();
 8002c1e:	f7ff f907 	bl	8001e30 <Error_Handler>
 8002c22:	e7cd      	b.n	8002bc0 <MX_TIM15_Init+0x78>
    Error_Handler();
 8002c24:	f7ff f904 	bl	8001e30 <Error_Handler>
 8002c28:	e7db      	b.n	8002be2 <MX_TIM15_Init+0x9a>
    Error_Handler();
 8002c2a:	f7ff f901 	bl	8001e30 <Error_Handler>
 8002c2e:	e7e8      	b.n	8002c02 <MX_TIM15_Init+0xba>
 8002c30:	2000382c 	.word	0x2000382c
 8002c34:	40014000 	.word	0x40014000

08002c38 <MX_TIM20_Init>:
{
 8002c38:	b510      	push	{r4, lr}
 8002c3a:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c3c:	2400      	movs	r4, #0
 8002c3e:	9418      	str	r4, [sp, #96]	; 0x60
 8002c40:	9419      	str	r4, [sp, #100]	; 0x64
 8002c42:	941a      	str	r4, [sp, #104]	; 0x68
 8002c44:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c46:	9415      	str	r4, [sp, #84]	; 0x54
 8002c48:	9416      	str	r4, [sp, #88]	; 0x58
 8002c4a:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c4c:	940e      	str	r4, [sp, #56]	; 0x38
 8002c4e:	940f      	str	r4, [sp, #60]	; 0x3c
 8002c50:	9410      	str	r4, [sp, #64]	; 0x40
 8002c52:	9411      	str	r4, [sp, #68]	; 0x44
 8002c54:	9412      	str	r4, [sp, #72]	; 0x48
 8002c56:	9413      	str	r4, [sp, #76]	; 0x4c
 8002c58:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c5a:	2234      	movs	r2, #52	; 0x34
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	a801      	add	r0, sp, #4
 8002c60:	f008 f944 	bl	800aeec <memset>
  htim20.Instance = TIM20;
 8002c64:	4846      	ldr	r0, [pc, #280]	; (8002d80 <MX_TIM20_Init+0x148>)
 8002c66:	4b47      	ldr	r3, [pc, #284]	; (8002d84 <MX_TIM20_Init+0x14c>)
 8002c68:	6003      	str	r3, [r0, #0]
  htim20.Init.Prescaler = 0;
 8002c6a:	6044      	str	r4, [r0, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c6c:	6084      	str	r4, [r0, #8]
  htim20.Init.Period = 16000;
 8002c6e:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8002c72:	60c3      	str	r3, [r0, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c74:	6104      	str	r4, [r0, #16]
  htim20.Init.RepetitionCounter = 0;
 8002c76:	6144      	str	r4, [r0, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c78:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8002c7a:	f004 fc47 	bl	800750c <HAL_TIM_Base_Init>
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	d162      	bne.n	8002d48 <MX_TIM20_Init+0x110>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c86:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8002c88:	a918      	add	r1, sp, #96	; 0x60
 8002c8a:	483d      	ldr	r0, [pc, #244]	; (8002d80 <MX_TIM20_Init+0x148>)
 8002c8c:	f004 fd96 	bl	80077bc <HAL_TIM_ConfigClockSource>
 8002c90:	2800      	cmp	r0, #0
 8002c92:	d15c      	bne.n	8002d4e <MX_TIM20_Init+0x116>
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8002c94:	483a      	ldr	r0, [pc, #232]	; (8002d80 <MX_TIM20_Init+0x148>)
 8002c96:	f004 fc69 	bl	800756c <HAL_TIM_PWM_Init>
 8002c9a:	2800      	cmp	r0, #0
 8002c9c:	d15a      	bne.n	8002d54 <MX_TIM20_Init+0x11c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ca2:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ca4:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8002ca6:	a915      	add	r1, sp, #84	; 0x54
 8002ca8:	4835      	ldr	r0, [pc, #212]	; (8002d80 <MX_TIM20_Init+0x148>)
 8002caa:	f004 fe31 	bl	8007910 <HAL_TIMEx_MasterConfigSynchronization>
 8002cae:	2800      	cmp	r0, #0
 8002cb0:	d153      	bne.n	8002d5a <MX_TIM20_Init+0x122>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cb2:	2360      	movs	r3, #96	; 0x60
 8002cb4:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 8000;
 8002cb6:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8002cba:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002cc0:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cc2:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002cc4:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002cc6:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cc8:	a90e      	add	r1, sp, #56	; 0x38
 8002cca:	482d      	ldr	r0, [pc, #180]	; (8002d80 <MX_TIM20_Init+0x148>)
 8002ccc:	f004 fccc 	bl	8007668 <HAL_TIM_PWM_ConfigChannel>
 8002cd0:	2800      	cmp	r0, #0
 8002cd2:	d145      	bne.n	8002d60 <MX_TIM20_Init+0x128>
  sConfigOC.Pulse = 10000;
 8002cd4:	f242 7310 	movw	r3, #10000	; 0x2710
 8002cd8:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002cda:	2204      	movs	r2, #4
 8002cdc:	a90e      	add	r1, sp, #56	; 0x38
 8002cde:	4828      	ldr	r0, [pc, #160]	; (8002d80 <MX_TIM20_Init+0x148>)
 8002ce0:	f004 fcc2 	bl	8007668 <HAL_TIM_PWM_ConfigChannel>
 8002ce4:	2800      	cmp	r0, #0
 8002ce6:	d13e      	bne.n	8002d66 <MX_TIM20_Init+0x12e>
  sConfigOC.Pulse = 12000;
 8002ce8:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8002cec:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002cee:	2208      	movs	r2, #8
 8002cf0:	a90e      	add	r1, sp, #56	; 0x38
 8002cf2:	4823      	ldr	r0, [pc, #140]	; (8002d80 <MX_TIM20_Init+0x148>)
 8002cf4:	f004 fcb8 	bl	8007668 <HAL_TIM_PWM_ConfigChannel>
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	d137      	bne.n	8002d6c <MX_TIM20_Init+0x134>
  sConfigOC.Pulse = 15000;
 8002cfc:	f643 2398 	movw	r3, #15000	; 0x3a98
 8002d00:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d02:	220c      	movs	r2, #12
 8002d04:	a90e      	add	r1, sp, #56	; 0x38
 8002d06:	481e      	ldr	r0, [pc, #120]	; (8002d80 <MX_TIM20_Init+0x148>)
 8002d08:	f004 fcae 	bl	8007668 <HAL_TIM_PWM_ConfigChannel>
 8002d0c:	2800      	cmp	r0, #0
 8002d0e:	d130      	bne.n	8002d72 <MX_TIM20_Init+0x13a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d10:	2300      	movs	r3, #0
 8002d12:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d14:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d16:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d18:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d1a:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d20:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002d22:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002d24:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002d26:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002d28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d2c:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002d2e:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002d30:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d32:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8002d34:	a901      	add	r1, sp, #4
 8002d36:	4812      	ldr	r0, [pc, #72]	; (8002d80 <MX_TIM20_Init+0x148>)
 8002d38:	f004 fe40 	bl	80079bc <HAL_TIMEx_ConfigBreakDeadTime>
 8002d3c:	b9e0      	cbnz	r0, 8002d78 <MX_TIM20_Init+0x140>
  HAL_TIM_MspPostInit(&htim20);
 8002d3e:	4810      	ldr	r0, [pc, #64]	; (8002d80 <MX_TIM20_Init+0x148>)
 8002d40:	f7ff fd66 	bl	8002810 <HAL_TIM_MspPostInit>
}
 8002d44:	b01c      	add	sp, #112	; 0x70
 8002d46:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002d48:	f7ff f872 	bl	8001e30 <Error_Handler>
 8002d4c:	e799      	b.n	8002c82 <MX_TIM20_Init+0x4a>
    Error_Handler();
 8002d4e:	f7ff f86f 	bl	8001e30 <Error_Handler>
 8002d52:	e79f      	b.n	8002c94 <MX_TIM20_Init+0x5c>
    Error_Handler();
 8002d54:	f7ff f86c 	bl	8001e30 <Error_Handler>
 8002d58:	e7a1      	b.n	8002c9e <MX_TIM20_Init+0x66>
    Error_Handler();
 8002d5a:	f7ff f869 	bl	8001e30 <Error_Handler>
 8002d5e:	e7a8      	b.n	8002cb2 <MX_TIM20_Init+0x7a>
    Error_Handler();
 8002d60:	f7ff f866 	bl	8001e30 <Error_Handler>
 8002d64:	e7b6      	b.n	8002cd4 <MX_TIM20_Init+0x9c>
    Error_Handler();
 8002d66:	f7ff f863 	bl	8001e30 <Error_Handler>
 8002d6a:	e7bd      	b.n	8002ce8 <MX_TIM20_Init+0xb0>
    Error_Handler();
 8002d6c:	f7ff f860 	bl	8001e30 <Error_Handler>
 8002d70:	e7c4      	b.n	8002cfc <MX_TIM20_Init+0xc4>
    Error_Handler();
 8002d72:	f7ff f85d 	bl	8001e30 <Error_Handler>
 8002d76:	e7cb      	b.n	8002d10 <MX_TIM20_Init+0xd8>
    Error_Handler();
 8002d78:	f7ff f85a 	bl	8001e30 <Error_Handler>
 8002d7c:	e7df      	b.n	8002d3e <MX_TIM20_Init+0x106>
 8002d7e:	bf00      	nop
 8002d80:	20003878 	.word	0x20003878
 8002d84:	40015000 	.word	0x40015000

08002d88 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002d88:	b508      	push	{r3, lr}
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002d8a:	4817      	ldr	r0, [pc, #92]	; (8002de8 <MX_UART4_Init+0x60>)
 8002d8c:	4b17      	ldr	r3, [pc, #92]	; (8002dec <MX_UART4_Init+0x64>)
 8002d8e:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 8002d90:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002d94:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002d96:	2300      	movs	r3, #0
 8002d98:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002d9a:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002d9c:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002d9e:	220c      	movs	r2, #12
 8002da0:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002da2:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002da4:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002da6:	6203      	str	r3, [r0, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002da8:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002daa:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002dac:	f005 f941 	bl	8008032 <HAL_UART_Init>
 8002db0:	b970      	cbnz	r0, 8002dd0 <MX_UART4_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002db2:	2100      	movs	r1, #0
 8002db4:	480c      	ldr	r0, [pc, #48]	; (8002de8 <MX_UART4_Init+0x60>)
 8002db6:	f005 f9b4 	bl	8008122 <HAL_UARTEx_SetTxFifoThreshold>
 8002dba:	b960      	cbnz	r0, 8002dd6 <MX_UART4_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	480a      	ldr	r0, [pc, #40]	; (8002de8 <MX_UART4_Init+0x60>)
 8002dc0:	f005 f9d4 	bl	800816c <HAL_UARTEx_SetRxFifoThreshold>
 8002dc4:	b950      	cbnz	r0, 8002ddc <MX_UART4_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002dc6:	4808      	ldr	r0, [pc, #32]	; (8002de8 <MX_UART4_Init+0x60>)
 8002dc8:	f005 f98c 	bl	80080e4 <HAL_UARTEx_DisableFifoMode>
 8002dcc:	b948      	cbnz	r0, 8002de2 <MX_UART4_Init+0x5a>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002dce:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002dd0:	f7ff f82e 	bl	8001e30 <Error_Handler>
 8002dd4:	e7ed      	b.n	8002db2 <MX_UART4_Init+0x2a>
    Error_Handler();
 8002dd6:	f7ff f82b 	bl	8001e30 <Error_Handler>
 8002dda:	e7ef      	b.n	8002dbc <MX_UART4_Init+0x34>
    Error_Handler();
 8002ddc:	f7ff f828 	bl	8001e30 <Error_Handler>
 8002de0:	e7f1      	b.n	8002dc6 <MX_UART4_Init+0x3e>
    Error_Handler();
 8002de2:	f7ff f825 	bl	8001e30 <Error_Handler>
}
 8002de6:	e7f2      	b.n	8002dce <MX_UART4_Init+0x46>
 8002de8:	20003a7c 	.word	0x20003a7c
 8002dec:	40004c00 	.word	0x40004c00

08002df0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002df0:	b508      	push	{r3, lr}
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002df2:	4817      	ldr	r0, [pc, #92]	; (8002e50 <MX_UART5_Init+0x60>)
 8002df4:	4b17      	ldr	r3, [pc, #92]	; (8002e54 <MX_UART5_Init+0x64>)
 8002df6:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 115200;
 8002df8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002dfc:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002e02:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002e04:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002e06:	220c      	movs	r2, #12
 8002e08:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e0a:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e0c:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e0e:	6203      	str	r3, [r0, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e10:	6243      	str	r3, [r0, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e12:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002e14:	f005 f90d 	bl	8008032 <HAL_UART_Init>
 8002e18:	b970      	cbnz	r0, 8002e38 <MX_UART5_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	480c      	ldr	r0, [pc, #48]	; (8002e50 <MX_UART5_Init+0x60>)
 8002e1e:	f005 f980 	bl	8008122 <HAL_UARTEx_SetTxFifoThreshold>
 8002e22:	b960      	cbnz	r0, 8002e3e <MX_UART5_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e24:	2100      	movs	r1, #0
 8002e26:	480a      	ldr	r0, [pc, #40]	; (8002e50 <MX_UART5_Init+0x60>)
 8002e28:	f005 f9a0 	bl	800816c <HAL_UARTEx_SetRxFifoThreshold>
 8002e2c:	b950      	cbnz	r0, 8002e44 <MX_UART5_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002e2e:	4808      	ldr	r0, [pc, #32]	; (8002e50 <MX_UART5_Init+0x60>)
 8002e30:	f005 f958 	bl	80080e4 <HAL_UARTEx_DisableFifoMode>
 8002e34:	b948      	cbnz	r0, 8002e4a <MX_UART5_Init+0x5a>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002e36:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002e38:	f7fe fffa 	bl	8001e30 <Error_Handler>
 8002e3c:	e7ed      	b.n	8002e1a <MX_UART5_Init+0x2a>
    Error_Handler();
 8002e3e:	f7fe fff7 	bl	8001e30 <Error_Handler>
 8002e42:	e7ef      	b.n	8002e24 <MX_UART5_Init+0x34>
    Error_Handler();
 8002e44:	f7fe fff4 	bl	8001e30 <Error_Handler>
 8002e48:	e7f1      	b.n	8002e2e <MX_UART5_Init+0x3e>
    Error_Handler();
 8002e4a:	f7fe fff1 	bl	8001e30 <Error_Handler>
}
 8002e4e:	e7f2      	b.n	8002e36 <MX_UART5_Init+0x46>
 8002e50:	20003b0c 	.word	0x20003b0c
 8002e54:	40005000 	.word	0x40005000

08002e58 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e58:	b570      	push	{r4, r5, r6, lr}
 8002e5a:	b0a6      	sub	sp, #152	; 0x98

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	2100      	movs	r1, #0
 8002e60:	a81e      	add	r0, sp, #120	; 0x78
 8002e62:	f008 f843 	bl	800aeec <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e66:	2100      	movs	r1, #0
 8002e68:	9118      	str	r1, [sp, #96]	; 0x60
 8002e6a:	9119      	str	r1, [sp, #100]	; 0x64
 8002e6c:	911a      	str	r1, [sp, #104]	; 0x68
 8002e6e:	911b      	str	r1, [sp, #108]	; 0x6c
 8002e70:	911c      	str	r1, [sp, #112]	; 0x70
 8002e72:	911d      	str	r1, [sp, #116]	; 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e74:	2254      	movs	r2, #84	; 0x54
 8002e76:	a803      	add	r0, sp, #12
 8002e78:	f008 f838 	bl	800aeec <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	9303      	str	r3, [sp, #12]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e80:	a803      	add	r0, sp, #12
 8002e82:	f003 fedf 	bl	8006c44 <HAL_RCCEx_PeriphCLKConfig>
 8002e86:	2800      	cmp	r0, #0
 8002e88:	f040 80d2 	bne.w	8003030 <MX_USART1_UART_Init+0x1d8>
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002e8c:	4b6a      	ldr	r3, [pc, #424]	; (8003038 <MX_USART1_UART_Init+0x1e0>)
 8002e8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e94:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002e96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e98:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002e9c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002e9e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002ea0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ea8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002eaa:	f002 0201 	and.w	r2, r2, #1
 8002eae:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8002eb0:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002eb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eb8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec0:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002ec2:	9b00      	ldr	r3, [sp, #0]
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOG);
  /**USART1 GPIO Configuration
  PA10   ------> USART1_RX
  PG9   ------> USART1_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8002ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ec8:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002eca:	2602      	movs	r6, #2
 8002ecc:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002ece:	2400      	movs	r4, #0
 8002ed0:	941a      	str	r4, [sp, #104]	; 0x68
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ed2:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ed4:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002ed6:	2507      	movs	r5, #7
 8002ed8:	951d      	str	r5, [sp, #116]	; 0x74
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eda:	a918      	add	r1, sp, #96	; 0x60
 8002edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ee0:	f005 fa32 	bl	8008348 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8002ee4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ee8:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002eea:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002eec:	941a      	str	r4, [sp, #104]	; 0x68
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002eee:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ef0:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002ef2:	951d      	str	r5, [sp, #116]	; 0x74
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ef4:	a918      	add	r1, sp, #96	; 0x60
 8002ef6:	4851      	ldr	r0, [pc, #324]	; (800303c <MX_USART1_UART_Init+0x1e4>)
 8002ef8:	f005 fa26 	bl	8008348 <LL_GPIO_Init>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8002efc:	4b50      	ldr	r3, [pc, #320]	; (8003040 <MX_USART1_UART_Init+0x1e8>)
 8002efe:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8002f02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f06:	f042 0218 	orr.w	r2, r2, #24
 8002f0a:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8002f0e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f14:	f022 0210 	bic.w	r2, r2, #16
 8002f18:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8002f1a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f1c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002f20:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8002f22:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f24:	f022 0220 	bic.w	r2, r2, #32
 8002f28:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8002f2a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f30:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8002f32:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f38:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8002f3a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f3c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002f40:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8002f42:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f44:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002f48:	66da      	str	r2, [r3, #108]	; 0x6c
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8002f4a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8002f4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f52:	f042 0219 	orr.w	r2, r2, #25
 8002f56:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8002f5a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002f5e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f62:	f022 0210 	bic.w	r2, r2, #16
 8002f66:	f042 0210 	orr.w	r2, r2, #16
 8002f6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8002f6e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002f72:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002f76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8002f7a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002f7e:	f022 0220 	bic.w	r2, r2, #32
 8002f82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8002f86:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8002f92:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002f96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8002f9e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002fa2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002fa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8002faa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002fae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002fb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8002fb6:	941e      	str	r4, [sp, #120]	; 0x78
  USART_InitStruct.BaudRate = 115200;
 8002fb8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002fbc:	931f      	str	r3, [sp, #124]	; 0x7c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002fbe:	9420      	str	r4, [sp, #128]	; 0x80
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002fc0:	9421      	str	r4, [sp, #132]	; 0x84
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002fc2:	9422      	str	r4, [sp, #136]	; 0x88
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002fc4:	230c      	movs	r3, #12
 8002fc6:	9323      	str	r3, [sp, #140]	; 0x8c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002fc8:	9424      	str	r4, [sp, #144]	; 0x90
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002fca:	9425      	str	r4, [sp, #148]	; 0x94
  LL_USART_Init(USART1, &USART_InitStruct);
 8002fcc:	a91e      	add	r1, sp, #120	; 0x78
 8002fce:	481d      	ldr	r0, [pc, #116]	; (8003044 <MX_USART1_UART_Init+0x1ec>)
 8002fd0:	f005 fbd0 	bl	8008774 <LL_USART_Init>
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8002fd4:	4b1c      	ldr	r3, [pc, #112]	; (8003048 <MX_USART1_UART_Init+0x1f0>)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd6:	e853 2f00 	ldrex	r2, [r3]
 8002fda:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fde:	e843 2100 	strex	r1, r2, [r3]
 8002fe2:	2900      	cmp	r1, #0
 8002fe4:	d1f6      	bne.n	8002fd4 <MX_USART1_UART_Init+0x17c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe6:	e853 2f00 	ldrex	r2, [r3]
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8002fea:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fee:	e843 2100 	strex	r1, r2, [r3]
 8002ff2:	2900      	cmp	r1, #0
 8002ff4:	d1f7      	bne.n	8002fe6 <MX_USART1_UART_Init+0x18e>
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8002ff6:	4b13      	ldr	r3, [pc, #76]	; (8003044 <MX_USART1_UART_Init+0x1ec>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002ffe:	601a      	str	r2, [r3, #0]
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003006:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800300e:	609a      	str	r2, [r3, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8003018:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <MX_USART1_UART_Init+0x1ec>)
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003020:	d0fa      	beq.n	8003018 <MX_USART1_UART_Init+0x1c0>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8003022:	4b08      	ldr	r3, [pc, #32]	; (8003044 <MX_USART1_UART_Init+0x1ec>)
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800302a:	d0f5      	beq.n	8003018 <MX_USART1_UART_Init+0x1c0>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800302c:	b026      	add	sp, #152	; 0x98
 800302e:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8003030:	f7fe fefe 	bl	8001e30 <Error_Handler>
 8003034:	e72a      	b.n	8002e8c <MX_USART1_UART_Init+0x34>
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000
 800303c:	48001800 	.word	0x48001800
 8003040:	40020000 	.word	0x40020000
 8003044:	40013800 	.word	0x40013800
 8003048:	40013808 	.word	0x40013808

0800304c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800304c:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800304e:	4817      	ldr	r0, [pc, #92]	; (80030ac <MX_USART2_UART_Init+0x60>)
 8003050:	4b17      	ldr	r3, [pc, #92]	; (80030b0 <MX_USART2_UART_Init+0x64>)
 8003052:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8003054:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003058:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800305a:	2300      	movs	r3, #0
 800305c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800305e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003060:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003062:	220c      	movs	r2, #12
 8003064:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003066:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003068:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800306a:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800306c:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800306e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003070:	f004 ffdf 	bl	8008032 <HAL_UART_Init>
 8003074:	b970      	cbnz	r0, 8003094 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003076:	2100      	movs	r1, #0
 8003078:	480c      	ldr	r0, [pc, #48]	; (80030ac <MX_USART2_UART_Init+0x60>)
 800307a:	f005 f852 	bl	8008122 <HAL_UARTEx_SetTxFifoThreshold>
 800307e:	b960      	cbnz	r0, 800309a <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003080:	2100      	movs	r1, #0
 8003082:	480a      	ldr	r0, [pc, #40]	; (80030ac <MX_USART2_UART_Init+0x60>)
 8003084:	f005 f872 	bl	800816c <HAL_UARTEx_SetRxFifoThreshold>
 8003088:	b950      	cbnz	r0, 80030a0 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800308a:	4808      	ldr	r0, [pc, #32]	; (80030ac <MX_USART2_UART_Init+0x60>)
 800308c:	f005 f82a 	bl	80080e4 <HAL_UARTEx_DisableFifoMode>
 8003090:	b948      	cbnz	r0, 80030a6 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003092:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003094:	f7fe fecc 	bl	8001e30 <Error_Handler>
 8003098:	e7ed      	b.n	8003076 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 800309a:	f7fe fec9 	bl	8001e30 <Error_Handler>
 800309e:	e7ef      	b.n	8003080 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 80030a0:	f7fe fec6 	bl	8001e30 <Error_Handler>
 80030a4:	e7f1      	b.n	800308a <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 80030a6:	f7fe fec3 	bl	8001e30 <Error_Handler>
}
 80030aa:	e7f2      	b.n	8003092 <MX_USART2_UART_Init+0x46>
 80030ac:	2000395c 	.word	0x2000395c
 80030b0:	40004400 	.word	0x40004400

080030b4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80030b4:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80030b6:	4817      	ldr	r0, [pc, #92]	; (8003114 <MX_USART3_UART_Init+0x60>)
 80030b8:	4b17      	ldr	r3, [pc, #92]	; (8003118 <MX_USART3_UART_Init+0x64>)
 80030ba:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 80030bc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80030c0:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80030c2:	2300      	movs	r3, #0
 80030c4:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80030c6:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80030c8:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80030ca:	220c      	movs	r2, #12
 80030cc:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ce:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030d0:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030d2:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030d4:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030d6:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030d8:	f004 ffab 	bl	8008032 <HAL_UART_Init>
 80030dc:	b970      	cbnz	r0, 80030fc <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030de:	2100      	movs	r1, #0
 80030e0:	480c      	ldr	r0, [pc, #48]	; (8003114 <MX_USART3_UART_Init+0x60>)
 80030e2:	f005 f81e 	bl	8008122 <HAL_UARTEx_SetTxFifoThreshold>
 80030e6:	b960      	cbnz	r0, 8003102 <MX_USART3_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030e8:	2100      	movs	r1, #0
 80030ea:	480a      	ldr	r0, [pc, #40]	; (8003114 <MX_USART3_UART_Init+0x60>)
 80030ec:	f005 f83e 	bl	800816c <HAL_UARTEx_SetRxFifoThreshold>
 80030f0:	b950      	cbnz	r0, 8003108 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80030f2:	4808      	ldr	r0, [pc, #32]	; (8003114 <MX_USART3_UART_Init+0x60>)
 80030f4:	f004 fff6 	bl	80080e4 <HAL_UARTEx_DisableFifoMode>
 80030f8:	b948      	cbnz	r0, 800310e <MX_USART3_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80030fa:	bd08      	pop	{r3, pc}
    Error_Handler();
 80030fc:	f7fe fe98 	bl	8001e30 <Error_Handler>
 8003100:	e7ed      	b.n	80030de <MX_USART3_UART_Init+0x2a>
    Error_Handler();
 8003102:	f7fe fe95 	bl	8001e30 <Error_Handler>
 8003106:	e7ef      	b.n	80030e8 <MX_USART3_UART_Init+0x34>
    Error_Handler();
 8003108:	f7fe fe92 	bl	8001e30 <Error_Handler>
 800310c:	e7f1      	b.n	80030f2 <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 800310e:	f7fe fe8f 	bl	8001e30 <Error_Handler>
}
 8003112:	e7f2      	b.n	80030fa <MX_USART3_UART_Init+0x46>
 8003114:	200039ec 	.word	0x200039ec
 8003118:	40004800 	.word	0x40004800

0800311c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800311c:	b570      	push	{r4, r5, r6, lr}
 800311e:	b0a4      	sub	sp, #144	; 0x90
 8003120:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003122:	2100      	movs	r1, #0
 8003124:	911f      	str	r1, [sp, #124]	; 0x7c
 8003126:	9120      	str	r1, [sp, #128]	; 0x80
 8003128:	9121      	str	r1, [sp, #132]	; 0x84
 800312a:	9122      	str	r1, [sp, #136]	; 0x88
 800312c:	9123      	str	r1, [sp, #140]	; 0x8c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800312e:	2254      	movs	r2, #84	; 0x54
 8003130:	a80a      	add	r0, sp, #40	; 0x28
 8003132:	f007 fedb 	bl	800aeec <memset>
  if(uartHandle->Instance==UART4)
 8003136:	6823      	ldr	r3, [r4, #0]
 8003138:	4a66      	ldr	r2, [pc, #408]	; (80032d4 <HAL_UART_MspInit+0x1b8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d00b      	beq.n	8003156 <HAL_UART_MspInit+0x3a>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==UART5)
 800313e:	4a66      	ldr	r2, [pc, #408]	; (80032d8 <HAL_UART_MspInit+0x1bc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d033      	beq.n	80031ac <HAL_UART_MspInit+0x90>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8003144:	4a65      	ldr	r2, [pc, #404]	; (80032dc <HAL_UART_MspInit+0x1c0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d06f      	beq.n	800322a <HAL_UART_MspInit+0x10e>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 800314a:	4a65      	ldr	r2, [pc, #404]	; (80032e0 <HAL_UART_MspInit+0x1c4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	f000 8096 	beq.w	800327e <HAL_UART_MspInit+0x162>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003152:	b024      	add	sp, #144	; 0x90
 8003154:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003156:	2308      	movs	r3, #8
 8003158:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800315a:	a80a      	add	r0, sp, #40	; 0x28
 800315c:	f003 fd72 	bl	8006c44 <HAL_RCCEx_PeriphCLKConfig>
 8003160:	bb08      	cbnz	r0, 80031a6 <HAL_UART_MspInit+0x8a>
    __HAL_RCC_UART4_CLK_ENABLE();
 8003162:	4b60      	ldr	r3, [pc, #384]	; (80032e4 <HAL_UART_MspInit+0x1c8>)
 8003164:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003166:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800316a:	659a      	str	r2, [r3, #88]	; 0x58
 800316c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800316e:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8003172:	9201      	str	r2, [sp, #4]
 8003174:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003176:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003178:	f042 0204 	orr.w	r2, r2, #4
 800317c:	64da      	str	r2, [r3, #76]	; 0x4c
 800317e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	9302      	str	r3, [sp, #8]
 8003186:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003188:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800318c:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318e:	2302      	movs	r3, #2
 8003190:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	2300      	movs	r3, #0
 8003194:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003196:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003198:	2305      	movs	r3, #5
 800319a:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800319c:	a91f      	add	r1, sp, #124	; 0x7c
 800319e:	4852      	ldr	r0, [pc, #328]	; (80032e8 <HAL_UART_MspInit+0x1cc>)
 80031a0:	f001 fb3e 	bl	8004820 <HAL_GPIO_Init>
 80031a4:	e7d5      	b.n	8003152 <HAL_UART_MspInit+0x36>
      Error_Handler();
 80031a6:	f7fe fe43 	bl	8001e30 <Error_Handler>
 80031aa:	e7da      	b.n	8003162 <HAL_UART_MspInit+0x46>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80031ac:	2310      	movs	r3, #16
 80031ae:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031b0:	a80a      	add	r0, sp, #40	; 0x28
 80031b2:	f003 fd47 	bl	8006c44 <HAL_RCCEx_PeriphCLKConfig>
 80031b6:	2800      	cmp	r0, #0
 80031b8:	d134      	bne.n	8003224 <HAL_UART_MspInit+0x108>
    __HAL_RCC_UART5_CLK_ENABLE();
 80031ba:	4b4a      	ldr	r3, [pc, #296]	; (80032e4 <HAL_UART_MspInit+0x1c8>)
 80031bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80031c2:	659a      	str	r2, [r3, #88]	; 0x58
 80031c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031c6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80031ca:	9203      	str	r2, [sp, #12]
 80031cc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031d0:	f042 0204 	orr.w	r2, r2, #4
 80031d4:	64da      	str	r2, [r3, #76]	; 0x4c
 80031d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031d8:	f002 0204 	and.w	r2, r2, #4
 80031dc:	9204      	str	r2, [sp, #16]
 80031de:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031e2:	f042 0208 	orr.w	r2, r2, #8
 80031e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80031e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	9305      	str	r3, [sp, #20]
 80031f0:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = LIN_TX_Pin;
 80031f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031f6:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f8:	2602      	movs	r6, #2
 80031fa:	9620      	str	r6, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fc:	2400      	movs	r4, #0
 80031fe:	9421      	str	r4, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003200:	9422      	str	r4, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003202:	2505      	movs	r5, #5
 8003204:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(LIN_TX_GPIO_Port, &GPIO_InitStruct);
 8003206:	a91f      	add	r1, sp, #124	; 0x7c
 8003208:	4837      	ldr	r0, [pc, #220]	; (80032e8 <HAL_UART_MspInit+0x1cc>)
 800320a:	f001 fb09 	bl	8004820 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LIN_RX_Pin;
 800320e:	2304      	movs	r3, #4
 8003210:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003212:	9620      	str	r6, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003214:	9421      	str	r4, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003216:	9422      	str	r4, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003218:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(LIN_RX_GPIO_Port, &GPIO_InitStruct);
 800321a:	a91f      	add	r1, sp, #124	; 0x7c
 800321c:	4833      	ldr	r0, [pc, #204]	; (80032ec <HAL_UART_MspInit+0x1d0>)
 800321e:	f001 faff 	bl	8004820 <HAL_GPIO_Init>
 8003222:	e796      	b.n	8003152 <HAL_UART_MspInit+0x36>
      Error_Handler();
 8003224:	f7fe fe04 	bl	8001e30 <Error_Handler>
 8003228:	e7c7      	b.n	80031ba <HAL_UART_MspInit+0x9e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800322a:	2302      	movs	r3, #2
 800322c:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800322e:	a80a      	add	r0, sp, #40	; 0x28
 8003230:	f003 fd08 	bl	8006c44 <HAL_RCCEx_PeriphCLKConfig>
 8003234:	bb00      	cbnz	r0, 8003278 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003236:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <HAL_UART_MspInit+0x1c8>)
 8003238:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800323a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800323e:	659a      	str	r2, [r3, #88]	; 0x58
 8003240:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003242:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003246:	9206      	str	r2, [sp, #24]
 8003248:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800324a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800324c:	f042 0202 	orr.w	r2, r2, #2
 8003250:	64da      	str	r2, [r3, #76]	; 0x4c
 8003252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	9307      	str	r3, [sp, #28]
 800325a:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800325c:	2318      	movs	r3, #24
 800325e:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003260:	2302      	movs	r3, #2
 8003262:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003264:	2300      	movs	r3, #0
 8003266:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003268:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800326a:	2307      	movs	r3, #7
 800326c:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800326e:	a91f      	add	r1, sp, #124	; 0x7c
 8003270:	481f      	ldr	r0, [pc, #124]	; (80032f0 <HAL_UART_MspInit+0x1d4>)
 8003272:	f001 fad5 	bl	8004820 <HAL_GPIO_Init>
 8003276:	e76c      	b.n	8003152 <HAL_UART_MspInit+0x36>
      Error_Handler();
 8003278:	f7fe fdda 	bl	8001e30 <Error_Handler>
 800327c:	e7db      	b.n	8003236 <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800327e:	2304      	movs	r3, #4
 8003280:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003282:	a80a      	add	r0, sp, #40	; 0x28
 8003284:	f003 fcde 	bl	8006c44 <HAL_RCCEx_PeriphCLKConfig>
 8003288:	bb08      	cbnz	r0, 80032ce <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800328a:	4b16      	ldr	r3, [pc, #88]	; (80032e4 <HAL_UART_MspInit+0x1c8>)
 800328c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800328e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003292:	659a      	str	r2, [r3, #88]	; 0x58
 8003294:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003296:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800329a:	9208      	str	r2, [sp, #32]
 800329c:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800329e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032a0:	f042 0202 	orr.w	r2, r2, #2
 80032a4:	64da      	str	r2, [r3, #76]	; 0x4c
 80032a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	9309      	str	r3, [sp, #36]	; 0x24
 80032ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80032b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032b4:	931f      	str	r3, [sp, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b6:	2302      	movs	r3, #2
 80032b8:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032be:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80032c0:	2307      	movs	r3, #7
 80032c2:	9323      	str	r3, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c4:	a91f      	add	r1, sp, #124	; 0x7c
 80032c6:	480a      	ldr	r0, [pc, #40]	; (80032f0 <HAL_UART_MspInit+0x1d4>)
 80032c8:	f001 faaa 	bl	8004820 <HAL_GPIO_Init>
}
 80032cc:	e741      	b.n	8003152 <HAL_UART_MspInit+0x36>
      Error_Handler();
 80032ce:	f7fe fdaf 	bl	8001e30 <Error_Handler>
 80032d2:	e7da      	b.n	800328a <HAL_UART_MspInit+0x16e>
 80032d4:	40004c00 	.word	0x40004c00
 80032d8:	40005000 	.word	0x40005000
 80032dc:	40004400 	.word	0x40004400
 80032e0:	40004800 	.word	0x40004800
 80032e4:	40021000 	.word	0x40021000
 80032e8:	48000800 	.word	0x48000800
 80032ec:	48000c00 	.word	0x48000c00
 80032f0:	48000400 	.word	0x48000400

080032f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032f4:	480d      	ldr	r0, [pc, #52]	; (800332c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032f8:	480d      	ldr	r0, [pc, #52]	; (8003330 <LoopForever+0x6>)
  ldr r1, =_edata
 80032fa:	490e      	ldr	r1, [pc, #56]	; (8003334 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032fc:	4a0e      	ldr	r2, [pc, #56]	; (8003338 <LoopForever+0xe>)
  movs r3, #0
 80032fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003300:	e002      	b.n	8003308 <LoopCopyDataInit>

08003302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003306:	3304      	adds	r3, #4

08003308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800330a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800330c:	d3f9      	bcc.n	8003302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800330e:	4a0b      	ldr	r2, [pc, #44]	; (800333c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003310:	4c0b      	ldr	r4, [pc, #44]	; (8003340 <LoopForever+0x16>)
  movs r3, #0
 8003312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003314:	e001      	b.n	800331a <LoopFillZerobss>

08003316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003318:	3204      	adds	r2, #4

0800331a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800331a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800331c:	d3fb      	bcc.n	8003316 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800331e:	f7ff fa27 	bl	8002770 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003322:	f007 fdaf 	bl	800ae84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003326:	f7fe fdc5 	bl	8001eb4 <main>

0800332a <LoopForever>:

LoopForever:
    b LoopForever
 800332a:	e7fe      	b.n	800332a <LoopForever>
  ldr   r0, =_estack
 800332c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003334:	2000039c 	.word	0x2000039c
  ldr r2, =_sidata
 8003338:	08010b18 	.word	0x08010b18
  ldr r2, =_sbss
 800333c:	2000039c 	.word	0x2000039c
  ldr r4, =_ebss
 8003340:	2000560c 	.word	0x2000560c

08003344 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003344:	e7fe      	b.n	8003344 <ADC1_2_IRQHandler>
	...

08003348 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8003348:	4b10      	ldr	r3, [pc, #64]	; (800338c <HAL_InitTick+0x44>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	b90b      	cbnz	r3, 8003352 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800334e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8003350:	4770      	bx	lr
{
 8003352:	b510      	push	{r4, lr}
 8003354:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003356:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800335a:	fbb0 f3f3 	udiv	r3, r0, r3
 800335e:	4a0c      	ldr	r2, [pc, #48]	; (8003390 <HAL_InitTick+0x48>)
 8003360:	6810      	ldr	r0, [r2, #0]
 8003362:	fbb0 f0f3 	udiv	r0, r0, r3
 8003366:	f000 fd7f 	bl	8003e68 <HAL_SYSTICK_Config>
 800336a:	b968      	cbnz	r0, 8003388 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800336c:	2c0f      	cmp	r4, #15
 800336e:	d901      	bls.n	8003374 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8003370:	2001      	movs	r0, #1
 8003372:	e00a      	b.n	800338a <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003374:	2200      	movs	r2, #0
 8003376:	4621      	mov	r1, r4
 8003378:	f04f 30ff 	mov.w	r0, #4294967295
 800337c:	f000 fd2e 	bl	8003ddc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003380:	4b04      	ldr	r3, [pc, #16]	; (8003394 <HAL_InitTick+0x4c>)
 8003382:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8003384:	2000      	movs	r0, #0
 8003386:	e000      	b.n	800338a <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8003388:	2001      	movs	r0, #1
}
 800338a:	bd10      	pop	{r4, pc}
 800338c:	20000048 	.word	0x20000048
 8003390:	20000044 	.word	0x20000044
 8003394:	2000004c 	.word	0x2000004c

08003398 <HAL_Init>:
{
 8003398:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800339a:	2003      	movs	r0, #3
 800339c:	f000 fd0c 	bl	8003db8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033a0:	2000      	movs	r0, #0
 80033a2:	f7ff ffd1 	bl	8003348 <HAL_InitTick>
 80033a6:	b110      	cbz	r0, 80033ae <HAL_Init+0x16>
    status = HAL_ERROR;
 80033a8:	2401      	movs	r4, #1
}
 80033aa:	4620      	mov	r0, r4
 80033ac:	bd10      	pop	{r4, pc}
 80033ae:	4604      	mov	r4, r0
    HAL_MspInit();
 80033b0:	f7ff f91e 	bl	80025f0 <HAL_MspInit>
 80033b4:	e7f9      	b.n	80033aa <HAL_Init+0x12>
	...

080033b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80033b8:	4a03      	ldr	r2, [pc, #12]	; (80033c8 <HAL_IncTick+0x10>)
 80033ba:	6813      	ldr	r3, [r2, #0]
 80033bc:	4903      	ldr	r1, [pc, #12]	; (80033cc <HAL_IncTick+0x14>)
 80033be:	6809      	ldr	r1, [r1, #0]
 80033c0:	440b      	add	r3, r1
 80033c2:	6013      	str	r3, [r2, #0]
}
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	20003b9c 	.word	0x20003b9c
 80033cc:	20000048 	.word	0x20000048

080033d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80033d0:	4b01      	ldr	r3, [pc, #4]	; (80033d8 <HAL_GetTick+0x8>)
 80033d2:	6818      	ldr	r0, [r3, #0]
}
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	20003b9c 	.word	0x20003b9c

080033dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033dc:	b538      	push	{r3, r4, r5, lr}
 80033de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80033e0:	f7ff fff6 	bl	80033d0 <HAL_GetTick>
 80033e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033e6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80033ea:	d002      	beq.n	80033f2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ec:	4b04      	ldr	r3, [pc, #16]	; (8003400 <HAL_Delay+0x24>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033f2:	f7ff ffed 	bl	80033d0 <HAL_GetTick>
 80033f6:	1b40      	subs	r0, r0, r5
 80033f8:	42a0      	cmp	r0, r4
 80033fa:	d3fa      	bcc.n	80033f2 <HAL_Delay+0x16>
  {
  }
}
 80033fc:	bd38      	pop	{r3, r4, r5, pc}
 80033fe:	bf00      	nop
 8003400:	20000048 	.word	0x20000048

08003404 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003404:	b530      	push	{r4, r5, lr}
 8003406:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003408:	2300      	movs	r3, #0
 800340a:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800340c:	2800      	cmp	r0, #0
 800340e:	f000 8138 	beq.w	8003682 <HAL_ADC_Init+0x27e>
 8003412:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003414:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003416:	b313      	cbz	r3, 800345e <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003418:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8003420:	d005      	beq.n	800342e <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8003428:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800342c:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800342e:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003430:	6893      	ldr	r3, [r2, #8]
 8003432:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003436:	d11f      	bne.n	8003478 <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 8003438:	6893      	ldr	r3, [r2, #8]
 800343a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800343e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003446:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003448:	4b8f      	ldr	r3, [pc, #572]	; (8003688 <HAL_ADC_Init+0x284>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	099b      	lsrs	r3, r3, #6
 800344e:	4a8f      	ldr	r2, [pc, #572]	; (800368c <HAL_ADC_Init+0x288>)
 8003450:	fba2 2303 	umull	r2, r3, r2, r3
 8003454:	099b      	lsrs	r3, r3, #6
 8003456:	3301      	adds	r3, #1
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800345c:	e009      	b.n	8003472 <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 800345e:	f7fd ff2b 	bl	80012b8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003462:	2300      	movs	r3, #0
 8003464:	6623      	str	r3, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8003466:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 800346a:	e7d5      	b.n	8003418 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 800346c:	9b01      	ldr	r3, [sp, #4]
 800346e:	3b01      	subs	r3, #1
 8003470:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003472:	9b01      	ldr	r3, [sp, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1f9      	bne.n	800346c <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003478:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800347a:	6893      	ldr	r3, [r2, #8]
 800347c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003480:	d13d      	bne.n	80034fe <HAL_ADC_Init+0xfa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003482:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003484:	f043 0310 	orr.w	r3, r3, #16
 8003488:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800348a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	6623      	str	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003492:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003494:	6893      	ldr	r3, [r2, #8]
 8003496:	f013 0304 	ands.w	r3, r3, #4
 800349a:	d000      	beq.n	800349e <HAL_ADC_Init+0x9a>
 800349c:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800349e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80034a0:	f011 0f10 	tst.w	r1, #16
 80034a4:	f040 80e6 	bne.w	8003674 <HAL_ADC_Init+0x270>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f040 80e3 	bne.w	8003674 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034ae:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80034b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80034b4:	f043 0302 	orr.w	r3, r3, #2
 80034b8:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034ba:	6893      	ldr	r3, [r2, #8]
 80034bc:	f013 0f01 	tst.w	r3, #1
 80034c0:	d13e      	bne.n	8003540 <HAL_ADC_Init+0x13c>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034c2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80034c6:	d01c      	beq.n	8003502 <HAL_ADC_Init+0xfe>
 80034c8:	4b71      	ldr	r3, [pc, #452]	; (8003690 <HAL_ADC_Init+0x28c>)
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d019      	beq.n	8003502 <HAL_ADC_Init+0xfe>
 80034ce:	4b71      	ldr	r3, [pc, #452]	; (8003694 <HAL_ADC_Init+0x290>)
 80034d0:	6899      	ldr	r1, [r3, #8]
 80034d2:	f011 0101 	ands.w	r1, r1, #1
 80034d6:	d000      	beq.n	80034da <HAL_ADC_Init+0xd6>
 80034d8:	2101      	movs	r1, #1
 80034da:	4b6f      	ldr	r3, [pc, #444]	; (8003698 <HAL_ADC_Init+0x294>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f013 0301 	ands.w	r3, r3, #1
 80034e2:	d000      	beq.n	80034e6 <HAL_ADC_Init+0xe2>
 80034e4:	2301      	movs	r3, #1
 80034e6:	430b      	orrs	r3, r1
 80034e8:	496c      	ldr	r1, [pc, #432]	; (800369c <HAL_ADC_Init+0x298>)
 80034ea:	6889      	ldr	r1, [r1, #8]
 80034ec:	f011 0101 	ands.w	r1, r1, #1
 80034f0:	d000      	beq.n	80034f4 <HAL_ADC_Init+0xf0>
 80034f2:	2101      	movs	r1, #1
 80034f4:	430b      	orrs	r3, r1
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	e012      	b.n	8003524 <HAL_ADC_Init+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034fe:	2000      	movs	r0, #0
 8003500:	e7c8      	b.n	8003494 <HAL_ADC_Init+0x90>
 8003502:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f013 0301 	ands.w	r3, r3, #1
 800350c:	d000      	beq.n	8003510 <HAL_ADC_Init+0x10c>
 800350e:	2301      	movs	r3, #1
 8003510:	495f      	ldr	r1, [pc, #380]	; (8003690 <HAL_ADC_Init+0x28c>)
 8003512:	6889      	ldr	r1, [r1, #8]
 8003514:	f011 0101 	ands.w	r1, r1, #1
 8003518:	d000      	beq.n	800351c <HAL_ADC_Init+0x118>
 800351a:	2101      	movs	r1, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800351c:	430b      	orrs	r3, r1
 800351e:	bf0c      	ite	eq
 8003520:	2301      	moveq	r3, #1
 8003522:	2300      	movne	r3, #0
 8003524:	b163      	cbz	r3, 8003540 <HAL_ADC_Init+0x13c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003526:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800352a:	d072      	beq.n	8003612 <HAL_ADC_Init+0x20e>
 800352c:	4b58      	ldr	r3, [pc, #352]	; (8003690 <HAL_ADC_Init+0x28c>)
 800352e:	429a      	cmp	r2, r3
 8003530:	d06d      	beq.n	800360e <HAL_ADC_Init+0x20a>
 8003532:	495b      	ldr	r1, [pc, #364]	; (80036a0 <HAL_ADC_Init+0x29c>)
 8003534:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003536:	688a      	ldr	r2, [r1, #8]
 8003538:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800353c:	4313      	orrs	r3, r2
 800353e:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003540:	7f62      	ldrb	r2, [r4, #29]
                hadc->Init.Overrun                                                     |
 8003542:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003544:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 8003548:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 800354a:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 800354c:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 800354e:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003550:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003554:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003558:	2a01      	cmp	r2, #1
 800355a:	d05c      	beq.n	8003616 <HAL_ADC_Init+0x212>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800355c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800355e:	b122      	cbz	r2, 800356a <HAL_ADC_Init+0x166>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003560:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003564:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003566:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003568:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800356a:	6821      	ldr	r1, [r4, #0]
 800356c:	68cd      	ldr	r5, [r1, #12]
 800356e:	4a4d      	ldr	r2, [pc, #308]	; (80036a4 <HAL_ADC_Init+0x2a0>)
 8003570:	402a      	ands	r2, r5
 8003572:	4313      	orrs	r3, r2
 8003574:	60cb      	str	r3, [r1, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003576:	6822      	ldr	r2, [r4, #0]
 8003578:	6913      	ldr	r3, [r2, #16]
 800357a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800357e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003580:	430b      	orrs	r3, r1
 8003582:	6113      	str	r3, [r2, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003584:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003586:	688b      	ldr	r3, [r1, #8]
 8003588:	f013 0304 	ands.w	r3, r3, #4
 800358c:	d000      	beq.n	8003590 <HAL_ADC_Init+0x18c>
 800358e:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003590:	688a      	ldr	r2, [r1, #8]
 8003592:	f012 0208 	ands.w	r2, r2, #8
 8003596:	d000      	beq.n	800359a <HAL_ADC_Init+0x196>
 8003598:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800359a:	bb4b      	cbnz	r3, 80035f0 <HAL_ADC_Init+0x1ec>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800359c:	bb42      	cbnz	r2, 80035f0 <HAL_ADC_Init+0x1ec>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800359e:	7f22      	ldrb	r2, [r4, #28]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80035a0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80035a4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80035a6:	ea43 3282 	orr.w	r2, r3, r2, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80035aa:	68cb      	ldr	r3, [r1, #12]
 80035ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035b0:	f023 0302 	bic.w	r3, r3, #2
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60cb      	str	r3, [r1, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80035b8:	6923      	ldr	r3, [r4, #16]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d030      	beq.n	8003620 <HAL_ADC_Init+0x21c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80035be:	6822      	ldr	r2, [r4, #0]
 80035c0:	6913      	ldr	r3, [r2, #16]
 80035c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c6:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80035c8:	6822      	ldr	r2, [r4, #0]
 80035ca:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80035ce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80035d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035d6:	6921      	ldr	r1, [r4, #16]
 80035d8:	430b      	orrs	r3, r1
 80035da:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80035de:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d02b      	beq.n	800363e <HAL_ADC_Init+0x23a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80035e6:	6822      	ldr	r2, [r4, #0]
 80035e8:	6913      	ldr	r3, [r2, #16]
 80035ea:	f023 0301 	bic.w	r3, r3, #1
 80035ee:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035f0:	6963      	ldr	r3, [r4, #20]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d035      	beq.n	8003662 <HAL_ADC_Init+0x25e>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80035f6:	6822      	ldr	r2, [r4, #0]
 80035f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80035fa:	f023 030f 	bic.w	r3, r3, #15
 80035fe:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003600:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003602:	f023 0303 	bic.w	r3, r3, #3
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	65e3      	str	r3, [r4, #92]	; 0x5c
 800360c:	e037      	b.n	800367e <HAL_ADC_Init+0x27a>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800360e:	4926      	ldr	r1, [pc, #152]	; (80036a8 <HAL_ADC_Init+0x2a4>)
 8003610:	e790      	b.n	8003534 <HAL_ADC_Init+0x130>
 8003612:	4925      	ldr	r1, [pc, #148]	; (80036a8 <HAL_ADC_Init+0x2a4>)
 8003614:	e78e      	b.n	8003534 <HAL_ADC_Init+0x130>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003616:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003618:	3a01      	subs	r2, #1
 800361a:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800361e:	e79d      	b.n	800355c <HAL_ADC_Init+0x158>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003620:	6822      	ldr	r2, [r4, #0]
 8003622:	6913      	ldr	r3, [r2, #16]
 8003624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003628:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800362a:	6822      	ldr	r2, [r4, #0]
 800362c:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8003630:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003634:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003638:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800363c:	e7cf      	b.n	80035de <HAL_ADC_Init+0x1da>
        MODIFY_REG(hadc->Instance->CFGR2,
 800363e:	6821      	ldr	r1, [r4, #0]
 8003640:	690b      	ldr	r3, [r1, #16]
 8003642:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003646:	f023 0304 	bic.w	r3, r3, #4
 800364a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800364c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800364e:	432a      	orrs	r2, r5
 8003650:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8003652:	432a      	orrs	r2, r5
 8003654:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8003656:	432a      	orrs	r2, r5
 8003658:	4313      	orrs	r3, r2
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	610b      	str	r3, [r1, #16]
 8003660:	e7c6      	b.n	80035f0 <HAL_ADC_Init+0x1ec>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003662:	6821      	ldr	r1, [r4, #0]
 8003664:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003666:	f023 030f 	bic.w	r3, r3, #15
 800366a:	6a22      	ldr	r2, [r4, #32]
 800366c:	3a01      	subs	r2, #1
 800366e:	4313      	orrs	r3, r2
 8003670:	630b      	str	r3, [r1, #48]	; 0x30
 8003672:	e7c5      	b.n	8003600 <HAL_ADC_Init+0x1fc>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003674:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003676:	f043 0310 	orr.w	r3, r3, #16
 800367a:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800367c:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 800367e:	b003      	add	sp, #12
 8003680:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003682:	2001      	movs	r0, #1
 8003684:	e7fb      	b.n	800367e <HAL_ADC_Init+0x27a>
 8003686:	bf00      	nop
 8003688:	20000044 	.word	0x20000044
 800368c:	053e2d63 	.word	0x053e2d63
 8003690:	50000100 	.word	0x50000100
 8003694:	50000400 	.word	0x50000400
 8003698:	50000500 	.word	0x50000500
 800369c:	50000600 	.word	0x50000600
 80036a0:	50000700 	.word	0x50000700
 80036a4:	fff04007 	.word	0xfff04007
 80036a8:	50000300 	.word	0x50000300

080036ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80036ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ae:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80036b0:	2200      	movs	r2, #0
 80036b2:	9201      	str	r2, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036b4:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 80036b8:	2a01      	cmp	r2, #1
 80036ba:	f000 8284 	beq.w	8003bc6 <HAL_ADC_ConfigChannel+0x51a>
 80036be:	4603      	mov	r3, r0
 80036c0:	2201      	movs	r2, #1
 80036c2:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036c6:	6805      	ldr	r5, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036c8:	68a8      	ldr	r0, [r5, #8]
 80036ca:	f010 0f04 	tst.w	r0, #4
 80036ce:	d009      	beq.n	80036e4 <HAL_ADC_ConfigChannel+0x38>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036d2:	f042 0220 	orr.w	r2, r2, #32
 80036d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80036d8:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80036e0:	b003      	add	sp, #12
 80036e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80036e4:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80036e6:	3530      	adds	r5, #48	; 0x30
 80036e8:	0a22      	lsrs	r2, r4, #8
 80036ea:	0092      	lsls	r2, r2, #2
 80036ec:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 80036f0:	58a8      	ldr	r0, [r5, r2]
 80036f2:	f004 0e1f 	and.w	lr, r4, #31
 80036f6:	241f      	movs	r4, #31
 80036f8:	fa04 f40e 	lsl.w	r4, r4, lr
 80036fc:	ea20 0004 	bic.w	r0, r0, r4
 8003700:	680c      	ldr	r4, [r1, #0]
 8003702:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8003706:	fa0c fc0e 	lsl.w	ip, ip, lr
 800370a:	ea40 000c 	orr.w	r0, r0, ip
 800370e:	50a8      	str	r0, [r5, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003710:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003712:	6882      	ldr	r2, [r0, #8]
 8003714:	f012 0204 	ands.w	r2, r2, #4
 8003718:	d000      	beq.n	800371c <HAL_ADC_ConfigChannel+0x70>
 800371a:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800371c:	6884      	ldr	r4, [r0, #8]
 800371e:	f014 0408 	ands.w	r4, r4, #8
 8003722:	d000      	beq.n	8003726 <HAL_ADC_ConfigChannel+0x7a>
 8003724:	2401      	movs	r4, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003726:	2a00      	cmp	r2, #0
 8003728:	d150      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x120>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800372a:	2c00      	cmp	r4, #0
 800372c:	d14e      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x120>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800372e:	688f      	ldr	r7, [r1, #8]
 8003730:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 8003734:	f000 8086 	beq.w	8003844 <HAL_ADC_ConfigChannel+0x198>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003738:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800373a:	3014      	adds	r0, #20
 800373c:	0e72      	lsrs	r2, r6, #25
 800373e:	0092      	lsls	r2, r2, #2
 8003740:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8003744:	5885      	ldr	r5, [r0, r2]
 8003746:	f3c6 5e04 	ubfx	lr, r6, #20, #5
 800374a:	f04f 0c07 	mov.w	ip, #7
 800374e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003752:	ea25 0c0c 	bic.w	ip, r5, ip
 8003756:	fa07 f50e 	lsl.w	r5, r7, lr
 800375a:	ea4c 0505 	orr.w	r5, ip, r5
 800375e:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003760:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003762:	6942      	ldr	r2, [r0, #20]
 8003764:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003768:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800376a:	694d      	ldr	r5, [r1, #20]
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	68c2      	ldr	r2, [r0, #12]
 8003770:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003774:	0052      	lsls	r2, r2, #1
 8003776:	fa05 f202 	lsl.w	r2, r5, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800377a:	690e      	ldr	r6, [r1, #16]
 800377c:	2e04      	cmp	r6, #4
 800377e:	d079      	beq.n	8003874 <HAL_ADC_ConfigChannel+0x1c8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003780:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 8003782:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8003786:	4dae      	ldr	r5, [pc, #696]	; (8003a40 <HAL_ADC_ConfigChannel+0x394>)
 8003788:	403d      	ands	r5, r7
 800378a:	680f      	ldr	r7, [r1, #0]
 800378c:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 8003790:	433a      	orrs	r2, r7
 8003792:	4315      	orrs	r5, r2
 8003794:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8003798:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	690e      	ldr	r6, [r1, #16]
 80037a0:	6988      	ldr	r0, [r1, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037a2:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 80037a4:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
 80037a8:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 80037ac:	4328      	orrs	r0, r5
 80037ae:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	690d      	ldr	r5, [r1, #16]
 80037b6:	7f08      	ldrb	r0, [r1, #28]
 80037b8:	2801      	cmp	r0, #1
 80037ba:	d058      	beq.n	800386e <HAL_ADC_ConfigChannel+0x1c2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037bc:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 80037be:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80037c2:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 80037c6:	4304      	orrs	r4, r0
 80037c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037cc:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037ce:	6890      	ldr	r0, [r2, #8]
 80037d0:	f010 0f01 	tst.w	r0, #1
 80037d4:	d112      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x150>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80037d6:	6808      	ldr	r0, [r1, #0]
 80037d8:	68cd      	ldr	r5, [r1, #12]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80037da:	4c9a      	ldr	r4, [pc, #616]	; (8003a44 <HAL_ADC_ConfigChannel+0x398>)
 80037dc:	42a5      	cmp	r5, r4
 80037de:	f000 80b1 	beq.w	8003944 <HAL_ADC_ConfigChannel+0x298>
    CLEAR_BIT(ADCx->DIFSEL,
 80037e2:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 80037e6:	f3c0 0012 	ubfx	r0, r0, #0, #19
 80037ea:	ea24 0000 	bic.w	r0, r4, r0
 80037ee:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80037f2:	68c8      	ldr	r0, [r1, #12]
 80037f4:	4a93      	ldr	r2, [pc, #588]	; (8003a44 <HAL_ADC_ConfigChannel+0x398>)
 80037f6:	4290      	cmp	r0, r2
 80037f8:	f000 80ac 	beq.w	8003954 <HAL_ADC_ConfigChannel+0x2a8>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80037fc:	680a      	ldr	r2, [r1, #0]
 80037fe:	4992      	ldr	r1, [pc, #584]	; (8003a48 <HAL_ADC_ConfigChannel+0x39c>)
 8003800:	420a      	tst	r2, r1
 8003802:	f000 81da 	beq.w	8003bba <HAL_ADC_ConfigChannel+0x50e>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003806:	6819      	ldr	r1, [r3, #0]
 8003808:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 800380c:	f000 8173 	beq.w	8003af6 <HAL_ADC_ConfigChannel+0x44a>
 8003810:	488e      	ldr	r0, [pc, #568]	; (8003a4c <HAL_ADC_ConfigChannel+0x3a0>)
 8003812:	4281      	cmp	r1, r0
 8003814:	f000 816c 	beq.w	8003af0 <HAL_ADC_ConfigChannel+0x444>
 8003818:	488d      	ldr	r0, [pc, #564]	; (8003a50 <HAL_ADC_ConfigChannel+0x3a4>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800381a:	6880      	ldr	r0, [r0, #8]
 800381c:	f000 74e0 	and.w	r4, r0, #29360128	; 0x1c00000
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003820:	4d8c      	ldr	r5, [pc, #560]	; (8003a54 <HAL_ADC_ConfigChannel+0x3a8>)
 8003822:	42aa      	cmp	r2, r5
 8003824:	f000 8169 	beq.w	8003afa <HAL_ADC_ConfigChannel+0x44e>
 8003828:	4d8b      	ldr	r5, [pc, #556]	; (8003a58 <HAL_ADC_ConfigChannel+0x3ac>)
 800382a:	42aa      	cmp	r2, r5
 800382c:	f000 8165 	beq.w	8003afa <HAL_ADC_ConfigChannel+0x44e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003830:	4d8a      	ldr	r5, [pc, #552]	; (8003a5c <HAL_ADC_ConfigChannel+0x3b0>)
 8003832:	42aa      	cmp	r2, r5
 8003834:	f000 8194 	beq.w	8003b60 <HAL_ADC_ConfigChannel+0x4b4>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003838:	4d89      	ldr	r5, [pc, #548]	; (8003a60 <HAL_ADC_ConfigChannel+0x3b4>)
 800383a:	42aa      	cmp	r2, r5
 800383c:	f000 81a8 	beq.w	8003b90 <HAL_ADC_ConfigChannel+0x4e4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003840:	2000      	movs	r0, #0
 8003842:	e74a      	b.n	80036da <HAL_ADC_ConfigChannel+0x2e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003844:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003846:	3014      	adds	r0, #20
 8003848:	0e6a      	lsrs	r2, r5, #25
 800384a:	0092      	lsls	r2, r2, #2
 800384c:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8003850:	5886      	ldr	r6, [r0, r2]
 8003852:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8003856:	2707      	movs	r7, #7
 8003858:	fa07 f505 	lsl.w	r5, r7, r5
 800385c:	ea26 0505 	bic.w	r5, r6, r5
 8003860:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003862:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003864:	6942      	ldr	r2, [r0, #20]
 8003866:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800386a:	6142      	str	r2, [r0, #20]
}
 800386c:	e77d      	b.n	800376a <HAL_ADC_ConfigChannel+0xbe>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800386e:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8003872:	e7a3      	b.n	80037bc <HAL_ADC_ConfigChannel+0x110>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003874:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8003876:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003878:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800387c:	680a      	ldr	r2, [r1, #0]
 800387e:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003882:	bb85      	cbnz	r5, 80038e6 <HAL_ADC_ConfigChannel+0x23a>
 8003884:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003888:	4294      	cmp	r4, r2
 800388a:	d034      	beq.n	80038f6 <HAL_ADC_ConfigChannel+0x24a>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800388c:	681c      	ldr	r4, [r3, #0]
 800388e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003890:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003892:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003896:	680a      	ldr	r2, [r1, #0]
 8003898:	f3c2 0512 	ubfx	r5, r2, #0, #19
 800389c:	bb85      	cbnz	r5, 8003900 <HAL_ADC_ConfigChannel+0x254>
 800389e:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80038a2:	4290      	cmp	r0, r2
 80038a4:	d034      	beq.n	8003910 <HAL_ADC_ConfigChannel+0x264>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038a6:	681c      	ldr	r4, [r3, #0]
 80038a8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80038aa:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80038ac:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038b0:	680a      	ldr	r2, [r1, #0]
 80038b2:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80038b6:	bb85      	cbnz	r5, 800391a <HAL_ADC_ConfigChannel+0x26e>
 80038b8:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038bc:	4290      	cmp	r0, r2
 80038be:	d034      	beq.n	800392a <HAL_ADC_ConfigChannel+0x27e>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038c0:	681c      	ldr	r4, [r3, #0]
 80038c2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80038c4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80038c6:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038ca:	680a      	ldr	r2, [r1, #0]
 80038cc:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80038d0:	bb85      	cbnz	r5, 8003934 <HAL_ADC_ConfigChannel+0x288>
 80038d2:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038d6:	4290      	cmp	r0, r2
 80038d8:	f47f af78 	bne.w	80037cc <HAL_ADC_ConfigChannel+0x120>
  MODIFY_REG(*preg,
 80038dc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80038de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038e2:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 80038e4:	e772      	b.n	80037cc <HAL_ADC_ConfigChannel+0x120>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e6:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80038ea:	b112      	cbz	r2, 80038f2 <HAL_ADC_ConfigChannel+0x246>
  return __builtin_clz(value);
 80038ec:	fab2 f282 	clz	r2, r2
 80038f0:	e7ca      	b.n	8003888 <HAL_ADC_ConfigChannel+0x1dc>
    return 32U;
 80038f2:	2220      	movs	r2, #32
 80038f4:	e7c8      	b.n	8003888 <HAL_ADC_ConfigChannel+0x1dc>
  MODIFY_REG(*preg,
 80038f6:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80038f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038fc:	6602      	str	r2, [r0, #96]	; 0x60
}
 80038fe:	e7c5      	b.n	800388c <HAL_ADC_ConfigChannel+0x1e0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003900:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003904:	b112      	cbz	r2, 800390c <HAL_ADC_ConfigChannel+0x260>
  return __builtin_clz(value);
 8003906:	fab2 f282 	clz	r2, r2
 800390a:	e7ca      	b.n	80038a2 <HAL_ADC_ConfigChannel+0x1f6>
    return 32U;
 800390c:	2220      	movs	r2, #32
 800390e:	e7c8      	b.n	80038a2 <HAL_ADC_ConfigChannel+0x1f6>
  MODIFY_REG(*preg,
 8003910:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003912:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003916:	6662      	str	r2, [r4, #100]	; 0x64
}
 8003918:	e7c5      	b.n	80038a6 <HAL_ADC_ConfigChannel+0x1fa>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800391e:	b112      	cbz	r2, 8003926 <HAL_ADC_ConfigChannel+0x27a>
  return __builtin_clz(value);
 8003920:	fab2 f282 	clz	r2, r2
 8003924:	e7ca      	b.n	80038bc <HAL_ADC_ConfigChannel+0x210>
    return 32U;
 8003926:	2220      	movs	r2, #32
 8003928:	e7c8      	b.n	80038bc <HAL_ADC_ConfigChannel+0x210>
  MODIFY_REG(*preg,
 800392a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800392c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003930:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8003932:	e7c5      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x214>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003934:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003938:	b112      	cbz	r2, 8003940 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 800393a:	fab2 f282 	clz	r2, r2
 800393e:	e7ca      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x22a>
    return 32U;
 8003940:	2220      	movs	r2, #32
 8003942:	e7c8      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x22a>
    SET_BIT(ADCx->DIFSEL,
 8003944:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8003948:	f3c0 0012 	ubfx	r0, r0, #0, #19
 800394c:	4320      	orrs	r0, r4
 800394e:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
 8003952:	e74e      	b.n	80037f2 <HAL_ADC_ConfigChannel+0x146>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003954:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003956:	680a      	ldr	r2, [r1, #0]
 8003958:	f3c2 0512 	ubfx	r5, r2, #0, #19
 800395c:	2d00      	cmp	r5, #0
 800395e:	d138      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x326>
 8003960:	0e90      	lsrs	r0, r2, #26
 8003962:	3001      	adds	r0, #1
 8003964:	f000 001f 	and.w	r0, r0, #31
 8003968:	2809      	cmp	r0, #9
 800396a:	bf8c      	ite	hi
 800396c:	2000      	movhi	r0, #0
 800396e:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003970:	2800      	cmp	r0, #0
 8003972:	d077      	beq.n	8003a64 <HAL_ADC_ConfigChannel+0x3b8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003974:	2d00      	cmp	r5, #0
 8003976:	d13b      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x344>
 8003978:	0e90      	lsrs	r0, r2, #26
 800397a:	3001      	adds	r0, #1
 800397c:	0680      	lsls	r0, r0, #26
 800397e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003982:	2d00      	cmp	r5, #0
 8003984:	d140      	bne.n	8003a08 <HAL_ADC_ConfigChannel+0x35c>
 8003986:	0e96      	lsrs	r6, r2, #26
 8003988:	3601      	adds	r6, #1
 800398a:	f006 071f 	and.w	r7, r6, #31
 800398e:	2601      	movs	r6, #1
 8003990:	40be      	lsls	r6, r7
 8003992:	4330      	orrs	r0, r6
 8003994:	2d00      	cmp	r5, #0
 8003996:	d145      	bne.n	8003a24 <HAL_ADC_ConfigChannel+0x378>
 8003998:	0e92      	lsrs	r2, r2, #26
 800399a:	3201      	adds	r2, #1
 800399c:	f002 021f 	and.w	r2, r2, #31
 80039a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80039a4:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039a6:	4302      	orrs	r2, r0
 80039a8:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039aa:	f104 0614 	add.w	r6, r4, #20
 80039ae:	0e55      	lsrs	r5, r2, #25
 80039b0:	00ad      	lsls	r5, r5, #2
 80039b2:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 80039b6:	5974      	ldr	r4, [r6, r5]
 80039b8:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80039bc:	f04f 0c07 	mov.w	ip, #7
 80039c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80039c4:	ea24 0c0c 	bic.w	ip, r4, ip
 80039c8:	4090      	lsls	r0, r2
 80039ca:	ea4c 0000 	orr.w	r0, ip, r0
 80039ce:	5170      	str	r0, [r6, r5]
}
 80039d0:	e714      	b.n	80037fc <HAL_ADC_ConfigChannel+0x150>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d2:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80039d6:	b148      	cbz	r0, 80039ec <HAL_ADC_ConfigChannel+0x340>
  return __builtin_clz(value);
 80039d8:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039dc:	3001      	adds	r0, #1
 80039de:	f000 001f 	and.w	r0, r0, #31
 80039e2:	2809      	cmp	r0, #9
 80039e4:	bf8c      	ite	hi
 80039e6:	2000      	movhi	r0, #0
 80039e8:	2001      	movls	r0, #1
 80039ea:	e7c1      	b.n	8003970 <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 80039ec:	2020      	movs	r0, #32
 80039ee:	e7f5      	b.n	80039dc <HAL_ADC_ConfigChannel+0x330>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f0:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80039f4:	b130      	cbz	r0, 8003a04 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80039f6:	fab0 f080 	clz	r0, r0
 80039fa:	3001      	adds	r0, #1
 80039fc:	0680      	lsls	r0, r0, #26
 80039fe:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003a02:	e7be      	b.n	8003982 <HAL_ADC_ConfigChannel+0x2d6>
    return 32U;
 8003a04:	2020      	movs	r0, #32
 8003a06:	e7f8      	b.n	80039fa <HAL_ADC_ConfigChannel+0x34e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a08:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8003a0c:	b146      	cbz	r6, 8003a20 <HAL_ADC_ConfigChannel+0x374>
  return __builtin_clz(value);
 8003a0e:	fab6 f686 	clz	r6, r6
 8003a12:	3601      	adds	r6, #1
 8003a14:	f006 061f 	and.w	r6, r6, #31
 8003a18:	2701      	movs	r7, #1
 8003a1a:	fa07 f606 	lsl.w	r6, r7, r6
 8003a1e:	e7b8      	b.n	8003992 <HAL_ADC_ConfigChannel+0x2e6>
    return 32U;
 8003a20:	2620      	movs	r6, #32
 8003a22:	e7f6      	b.n	8003a12 <HAL_ADC_ConfigChannel+0x366>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a24:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003a28:	b142      	cbz	r2, 8003a3c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8003a2a:	fab2 f282 	clz	r2, r2
 8003a2e:	3201      	adds	r2, #1
 8003a30:	f002 021f 	and.w	r2, r2, #31
 8003a34:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003a38:	0512      	lsls	r2, r2, #20
 8003a3a:	e7b4      	b.n	80039a6 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	e7f6      	b.n	8003a2e <HAL_ADC_ConfigChannel+0x382>
 8003a40:	03fff000 	.word	0x03fff000
 8003a44:	407f0000 	.word	0x407f0000
 8003a48:	80080000 	.word	0x80080000
 8003a4c:	50000100 	.word	0x50000100
 8003a50:	50000700 	.word	0x50000700
 8003a54:	c3210000 	.word	0xc3210000
 8003a58:	90c00010 	.word	0x90c00010
 8003a5c:	c7520000 	.word	0xc7520000
 8003a60:	cb840000 	.word	0xcb840000
 8003a64:	b9cd      	cbnz	r5, 8003a9a <HAL_ADC_ConfigChannel+0x3ee>
 8003a66:	0e90      	lsrs	r0, r2, #26
 8003a68:	3001      	adds	r0, #1
 8003a6a:	0680      	lsls	r0, r0, #26
 8003a6c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003a70:	b9fd      	cbnz	r5, 8003ab2 <HAL_ADC_ConfigChannel+0x406>
 8003a72:	0e96      	lsrs	r6, r2, #26
 8003a74:	3601      	adds	r6, #1
 8003a76:	f006 071f 	and.w	r7, r6, #31
 8003a7a:	2601      	movs	r6, #1
 8003a7c:	40be      	lsls	r6, r7
 8003a7e:	4330      	orrs	r0, r6
 8003a80:	bb2d      	cbnz	r5, 8003ace <HAL_ADC_ConfigChannel+0x422>
 8003a82:	0e92      	lsrs	r2, r2, #26
 8003a84:	3201      	adds	r2, #1
 8003a86:	f002 021f 	and.w	r2, r2, #31
 8003a8a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003a8e:	3a1e      	subs	r2, #30
 8003a90:	0512      	lsls	r2, r2, #20
 8003a92:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a96:	4302      	orrs	r2, r0
 8003a98:	e786      	b.n	80039a8 <HAL_ADC_ConfigChannel+0x2fc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8003a9e:	b130      	cbz	r0, 8003aae <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003aa0:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003aa4:	3001      	adds	r0, #1
 8003aa6:	0680      	lsls	r0, r0, #26
 8003aa8:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003aac:	e7e0      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x3c4>
    return 32U;
 8003aae:	2020      	movs	r0, #32
 8003ab0:	e7f8      	b.n	8003aa4 <HAL_ADC_ConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab2:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8003ab6:	b146      	cbz	r6, 8003aca <HAL_ADC_ConfigChannel+0x41e>
  return __builtin_clz(value);
 8003ab8:	fab6 f686 	clz	r6, r6
 8003abc:	3601      	adds	r6, #1
 8003abe:	f006 061f 	and.w	r6, r6, #31
 8003ac2:	2701      	movs	r7, #1
 8003ac4:	fa07 f606 	lsl.w	r6, r7, r6
 8003ac8:	e7d9      	b.n	8003a7e <HAL_ADC_ConfigChannel+0x3d2>
    return 32U;
 8003aca:	2620      	movs	r6, #32
 8003acc:	e7f6      	b.n	8003abc <HAL_ADC_ConfigChannel+0x410>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ace:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003ad2:	b15a      	cbz	r2, 8003aec <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 8003ad4:	fab2 f282 	clz	r2, r2
 8003ad8:	3201      	adds	r2, #1
 8003ada:	f002 021f 	and.w	r2, r2, #31
 8003ade:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003ae2:	3a1e      	subs	r2, #30
 8003ae4:	0512      	lsls	r2, r2, #20
 8003ae6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003aea:	e7d4      	b.n	8003a96 <HAL_ADC_ConfigChannel+0x3ea>
    return 32U;
 8003aec:	2220      	movs	r2, #32
 8003aee:	e7f3      	b.n	8003ad8 <HAL_ADC_ConfigChannel+0x42c>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003af0:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8003af4:	e691      	b.n	800381a <HAL_ADC_ConfigChannel+0x16e>
 8003af6:	4835      	ldr	r0, [pc, #212]	; (8003bcc <HAL_ADC_ConfigChannel+0x520>)
 8003af8:	e68f      	b.n	800381a <HAL_ADC_ConfigChannel+0x16e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003afa:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8003afe:	f47f ae97 	bne.w	8003830 <HAL_ADC_ConfigChannel+0x184>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b02:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003b06:	d004      	beq.n	8003b12 <HAL_ADC_ConfigChannel+0x466>
 8003b08:	4a31      	ldr	r2, [pc, #196]	; (8003bd0 <HAL_ADC_ConfigChannel+0x524>)
 8003b0a:	4291      	cmp	r1, r2
 8003b0c:	d001      	beq.n	8003b12 <HAL_ADC_ConfigChannel+0x466>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b0e:	2000      	movs	r0, #0
 8003b10:	e5e3      	b.n	80036da <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b12:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003b16:	d019      	beq.n	8003b4c <HAL_ADC_ConfigChannel+0x4a0>
 8003b18:	4a2e      	ldr	r2, [pc, #184]	; (8003bd4 <HAL_ADC_ConfigChannel+0x528>)
 8003b1a:	4291      	cmp	r1, r2
 8003b1c:	d014      	beq.n	8003b48 <HAL_ADC_ConfigChannel+0x49c>
 8003b1e:	492e      	ldr	r1, [pc, #184]	; (8003bd8 <HAL_ADC_ConfigChannel+0x52c>)
 8003b20:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003b24:	688a      	ldr	r2, [r1, #8]
 8003b26:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003b2a:	4314      	orrs	r4, r2
 8003b2c:	608c      	str	r4, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b2e:	4a2b      	ldr	r2, [pc, #172]	; (8003bdc <HAL_ADC_ConfigChannel+0x530>)
 8003b30:	6812      	ldr	r2, [r2, #0]
 8003b32:	0992      	lsrs	r2, r2, #6
 8003b34:	492a      	ldr	r1, [pc, #168]	; (8003be0 <HAL_ADC_ConfigChannel+0x534>)
 8003b36:	fba1 1202 	umull	r1, r2, r1, r2
 8003b3a:	0992      	lsrs	r2, r2, #6
 8003b3c:	3201      	adds	r2, #1
 8003b3e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003b42:	0092      	lsls	r2, r2, #2
 8003b44:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003b46:	e006      	b.n	8003b56 <HAL_ADC_ConfigChannel+0x4aa>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b48:	4920      	ldr	r1, [pc, #128]	; (8003bcc <HAL_ADC_ConfigChannel+0x520>)
 8003b4a:	e7e9      	b.n	8003b20 <HAL_ADC_ConfigChannel+0x474>
 8003b4c:	491f      	ldr	r1, [pc, #124]	; (8003bcc <HAL_ADC_ConfigChannel+0x520>)
 8003b4e:	e7e7      	b.n	8003b20 <HAL_ADC_ConfigChannel+0x474>
            wait_loop_index--;
 8003b50:	9a01      	ldr	r2, [sp, #4]
 8003b52:	3a01      	subs	r2, #1
 8003b54:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003b56:	9a01      	ldr	r2, [sp, #4]
 8003b58:	2a00      	cmp	r2, #0
 8003b5a:	d1f9      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x4a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	e5bc      	b.n	80036da <HAL_ADC_ConfigChannel+0x2e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b60:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8003b64:	f47f ae68 	bne.w	8003838 <HAL_ADC_ConfigChannel+0x18c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b68:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003b6c:	d00e      	beq.n	8003b8c <HAL_ADC_ConfigChannel+0x4e0>
 8003b6e:	4a19      	ldr	r2, [pc, #100]	; (8003bd4 <HAL_ADC_ConfigChannel+0x528>)
 8003b70:	4291      	cmp	r1, r2
 8003b72:	d009      	beq.n	8003b88 <HAL_ADC_ConfigChannel+0x4dc>
 8003b74:	4918      	ldr	r1, [pc, #96]	; (8003bd8 <HAL_ADC_ConfigChannel+0x52c>)
 8003b76:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 8003b7a:	688a      	ldr	r2, [r1, #8]
 8003b7c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003b80:	4314      	orrs	r4, r2
 8003b82:	608c      	str	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b84:	2000      	movs	r0, #0
}
 8003b86:	e5a8      	b.n	80036da <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b88:	4910      	ldr	r1, [pc, #64]	; (8003bcc <HAL_ADC_ConfigChannel+0x520>)
 8003b8a:	e7f4      	b.n	8003b76 <HAL_ADC_ConfigChannel+0x4ca>
 8003b8c:	490f      	ldr	r1, [pc, #60]	; (8003bcc <HAL_ADC_ConfigChannel+0x520>)
 8003b8e:	e7f2      	b.n	8003b76 <HAL_ADC_ConfigChannel+0x4ca>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b90:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8003b94:	d113      	bne.n	8003bbe <HAL_ADC_ConfigChannel+0x512>
        if (ADC_VREFINT_INSTANCE(hadc))
 8003b96:	4a0f      	ldr	r2, [pc, #60]	; (8003bd4 <HAL_ADC_ConfigChannel+0x528>)
 8003b98:	4291      	cmp	r1, r2
 8003b9a:	d012      	beq.n	8003bc2 <HAL_ADC_ConfigChannel+0x516>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b9c:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003ba0:	d009      	beq.n	8003bb6 <HAL_ADC_ConfigChannel+0x50a>
 8003ba2:	480d      	ldr	r0, [pc, #52]	; (8003bd8 <HAL_ADC_ConfigChannel+0x52c>)
 8003ba4:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003ba8:	6881      	ldr	r1, [r0, #8]
 8003baa:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bb2:	2000      	movs	r0, #0
}
 8003bb4:	e591      	b.n	80036da <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bb6:	4805      	ldr	r0, [pc, #20]	; (8003bcc <HAL_ADC_ConfigChannel+0x520>)
 8003bb8:	e7f4      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x4f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bba:	2000      	movs	r0, #0
 8003bbc:	e58d      	b.n	80036da <HAL_ADC_ConfigChannel+0x2e>
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	e58b      	b.n	80036da <HAL_ADC_ConfigChannel+0x2e>
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	e589      	b.n	80036da <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8003bc6:	2002      	movs	r0, #2
 8003bc8:	e58a      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x34>
 8003bca:	bf00      	nop
 8003bcc:	50000300 	.word	0x50000300
 8003bd0:	50000600 	.word	0x50000600
 8003bd4:	50000100 	.word	0x50000100
 8003bd8:	50000700 	.word	0x50000700
 8003bdc:	20000044 	.word	0x20000044
 8003be0:	053e2d63 	.word	0x053e2d63

08003be4 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003be4:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8003be8:	2a01      	cmp	r2, #1
 8003bea:	f000 80d6 	beq.w	8003d9a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
{
 8003bee:	b410      	push	{r4}
 8003bf0:	b09d      	sub	sp, #116	; 0x74
 8003bf2:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	9218      	str	r2, [sp, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003bfe:	9219      	str	r2, [sp, #100]	; 0x64

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c00:	6800      	ldr	r0, [r0, #0]
 8003c02:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8003c06:	d047      	beq.n	8003c98 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 8003c08:	4a65      	ldr	r2, [pc, #404]	; (8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003c0a:	4290      	cmp	r0, r2
 8003c0c:	d047      	beq.n	8003c9e <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8003c0e:	2200      	movs	r2, #0
 8003c10:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8003c12:	9a01      	ldr	r2, [sp, #4]
 8003c14:	2a00      	cmp	r2, #0
 8003c16:	d046      	beq.n	8003ca6 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c18:	6892      	ldr	r2, [r2, #8]
 8003c1a:	f012 0204 	ands.w	r2, r2, #4
 8003c1e:	d000      	beq.n	8003c22 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003c20:	2201      	movs	r2, #1
 8003c22:	6884      	ldr	r4, [r0, #8]
 8003c24:	f014 0f04 	tst.w	r4, #4
 8003c28:	f040 80a7 	bne.w	8003d7a <HAL_ADCEx_MultiModeConfigChannel+0x196>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c2c:	2a00      	cmp	r2, #0
 8003c2e:	f040 80a4 	bne.w	8003d7a <HAL_ADCEx_MultiModeConfigChannel+0x196>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c32:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8003c36:	d042      	beq.n	8003cbe <HAL_ADCEx_MultiModeConfigChannel+0xda>
 8003c38:	4a5a      	ldr	r2, [pc, #360]	; (8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003c3a:	4290      	cmp	r0, r2
 8003c3c:	d03c      	beq.n	8003cb8 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8003c3e:	4a5a      	ldr	r2, [pc, #360]	; (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c40:	6808      	ldr	r0, [r1, #0]
 8003c42:	2800      	cmp	r0, #0
 8003c44:	d05c      	beq.n	8003d00 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003c46:	6890      	ldr	r0, [r2, #8]
 8003c48:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8003c4c:	684c      	ldr	r4, [r1, #4]
 8003c4e:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8003c52:	ea44 344c 	orr.w	r4, r4, ip, lsl #13
 8003c56:	4320      	orrs	r0, r4
 8003c58:	6090      	str	r0, [r2, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c5a:	6818      	ldr	r0, [r3, #0]
 8003c5c:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8003c60:	d02f      	beq.n	8003cc2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
 8003c62:	4c50      	ldr	r4, [pc, #320]	; (8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003c64:	42a0      	cmp	r0, r4
 8003c66:	d02c      	beq.n	8003cc2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c68:	484d      	ldr	r0, [pc, #308]	; (8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003c6a:	6884      	ldr	r4, [r0, #8]
 8003c6c:	f014 0401 	ands.w	r4, r4, #1
 8003c70:	d000      	beq.n	8003c74 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8003c72:	2401      	movs	r4, #1
 8003c74:	484d      	ldr	r0, [pc, #308]	; (8003dac <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8003c76:	6880      	ldr	r0, [r0, #8]
 8003c78:	f010 0001 	ands.w	r0, r0, #1
 8003c7c:	d000      	beq.n	8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8003c7e:	2001      	movs	r0, #1
 8003c80:	4320      	orrs	r0, r4
 8003c82:	4c4b      	ldr	r4, [pc, #300]	; (8003db0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003c84:	68a4      	ldr	r4, [r4, #8]
 8003c86:	f014 0401 	ands.w	r4, r4, #1
 8003c8a:	d000      	beq.n	8003c8e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8003c8c:	2401      	movs	r4, #1
 8003c8e:	4320      	orrs	r0, r4
 8003c90:	bf0c      	ite	eq
 8003c92:	2001      	moveq	r0, #1
 8003c94:	2000      	movne	r0, #0
 8003c96:	e025      	b.n	8003ce4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c98:	4a42      	ldr	r2, [pc, #264]	; (8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003c9a:	9201      	str	r2, [sp, #4]
 8003c9c:	e7b9      	b.n	8003c12 <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 8003c9e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8003ca2:	9201      	str	r2, [sp, #4]
 8003ca4:	e7b5      	b.n	8003c12 <HAL_ADCEx_MultiModeConfigChannel+0x2e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ca6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ca8:	f042 0220 	orr.w	r2, r2, #32
 8003cac:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_UNLOCK(hadc);
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	e068      	b.n	8003d8a <HAL_ADCEx_MultiModeConfigChannel+0x1a6>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003cb8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8003cbc:	e7c0      	b.n	8003c40 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8003cbe:	4a3d      	ldr	r2, [pc, #244]	; (8003db4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003cc0:	e7be      	b.n	8003c40 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8003cc2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003cc6:	6880      	ldr	r0, [r0, #8]
 8003cc8:	f010 0001 	ands.w	r0, r0, #1
 8003ccc:	d000      	beq.n	8003cd0 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8003cce:	2001      	movs	r0, #1
 8003cd0:	4c34      	ldr	r4, [pc, #208]	; (8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003cd2:	68a4      	ldr	r4, [r4, #8]
 8003cd4:	f014 0401 	ands.w	r4, r4, #1
 8003cd8:	d000      	beq.n	8003cdc <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8003cda:	2401      	movs	r4, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cdc:	4320      	orrs	r0, r4
 8003cde:	bf0c      	ite	eq
 8003ce0:	2001      	moveq	r0, #1
 8003ce2:	2000      	movne	r0, #0
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	d054      	beq.n	8003d92 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ce8:	6890      	ldr	r0, [r2, #8]
 8003cea:	f420 6071 	bic.w	r0, r0, #3856	; 0xf10
 8003cee:	f020 000f 	bic.w	r0, r0, #15
 8003cf2:	680c      	ldr	r4, [r1, #0]
 8003cf4:	6889      	ldr	r1, [r1, #8]
 8003cf6:	4321      	orrs	r1, r4
 8003cf8:	4308      	orrs	r0, r1
 8003cfa:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	e041      	b.n	8003d84 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003d00:	6891      	ldr	r1, [r2, #8]
 8003d02:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8003d06:	6091      	str	r1, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d08:	6819      	ldr	r1, [r3, #0]
 8003d0a:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8003d0e:	d01a      	beq.n	8003d46 <HAL_ADCEx_MultiModeConfigChannel+0x162>
 8003d10:	4824      	ldr	r0, [pc, #144]	; (8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003d12:	4281      	cmp	r1, r0
 8003d14:	d017      	beq.n	8003d46 <HAL_ADCEx_MultiModeConfigChannel+0x162>
 8003d16:	4922      	ldr	r1, [pc, #136]	; (8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003d18:	6888      	ldr	r0, [r1, #8]
 8003d1a:	f010 0001 	ands.w	r0, r0, #1
 8003d1e:	d000      	beq.n	8003d22 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003d20:	2001      	movs	r0, #1
 8003d22:	4922      	ldr	r1, [pc, #136]	; (8003dac <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8003d24:	6889      	ldr	r1, [r1, #8]
 8003d26:	f011 0101 	ands.w	r1, r1, #1
 8003d2a:	d000      	beq.n	8003d2e <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	4301      	orrs	r1, r0
 8003d30:	481f      	ldr	r0, [pc, #124]	; (8003db0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003d32:	6880      	ldr	r0, [r0, #8]
 8003d34:	f010 0001 	ands.w	r0, r0, #1
 8003d38:	d000      	beq.n	8003d3c <HAL_ADCEx_MultiModeConfigChannel+0x158>
 8003d3a:	2001      	movs	r0, #1
 8003d3c:	4301      	orrs	r1, r0
 8003d3e:	bf0c      	ite	eq
 8003d40:	2101      	moveq	r1, #1
 8003d42:	2100      	movne	r1, #0
 8003d44:	e010      	b.n	8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x184>
 8003d46:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8003d4a:	6889      	ldr	r1, [r1, #8]
 8003d4c:	f011 0101 	ands.w	r1, r1, #1
 8003d50:	d000      	beq.n	8003d54 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003d52:	2101      	movs	r1, #1
 8003d54:	4813      	ldr	r0, [pc, #76]	; (8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003d56:	6880      	ldr	r0, [r0, #8]
 8003d58:	f010 0001 	ands.w	r0, r0, #1
 8003d5c:	d000      	beq.n	8003d60 <HAL_ADCEx_MultiModeConfigChannel+0x17c>
 8003d5e:	2001      	movs	r0, #1
 8003d60:	4301      	orrs	r1, r0
 8003d62:	bf0c      	ite	eq
 8003d64:	2101      	moveq	r1, #1
 8003d66:	2100      	movne	r1, #0
 8003d68:	b1a9      	cbz	r1, 8003d96 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d6a:	6891      	ldr	r1, [r2, #8]
 8003d6c:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8003d70:	f021 010f 	bic.w	r1, r1, #15
 8003d74:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d76:	2000      	movs	r0, #0
 8003d78:	e004      	b.n	8003d84 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d7c:	f042 0220 	orr.w	r2, r2, #32
 8003d80:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d82:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003d8a:	b01d      	add	sp, #116	; 0x74
 8003d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d90:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d92:	2000      	movs	r0, #0
 8003d94:	e7f6      	b.n	8003d84 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
 8003d96:	2000      	movs	r0, #0
 8003d98:	e7f4      	b.n	8003d84 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  __HAL_LOCK(hadc);
 8003d9a:	2002      	movs	r0, #2
}
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	50000400 	.word	0x50000400
 8003da4:	50000100 	.word	0x50000100
 8003da8:	50000700 	.word	0x50000700
 8003dac:	50000500 	.word	0x50000500
 8003db0:	50000600 	.word	0x50000600
 8003db4:	50000300 	.word	0x50000300

08003db8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003db8:	4a07      	ldr	r2, [pc, #28]	; (8003dd8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003dba:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dbc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003dc0:	041b      	lsls	r3, r3, #16
 8003dc2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dc4:	0200      	lsls	r0, r0, #8
 8003dc6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dca:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003dd4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003dd6:	4770      	bx	lr
 8003dd8:	e000ed00 	.word	0xe000ed00

08003ddc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ddc:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dde:	4b19      	ldr	r3, [pc, #100]	; (8003e44 <HAL_NVIC_SetPriority+0x68>)
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003de6:	f1c3 0c07 	rsb	ip, r3, #7
 8003dea:	f1bc 0f04 	cmp.w	ip, #4
 8003dee:	bf28      	it	cs
 8003df0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003df4:	f103 0e04 	add.w	lr, r3, #4
 8003df8:	f1be 0f06 	cmp.w	lr, #6
 8003dfc:	d918      	bls.n	8003e30 <HAL_NVIC_SetPriority+0x54>
 8003dfe:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e00:	f04f 3eff 	mov.w	lr, #4294967295
 8003e04:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003e08:	ea21 010c 	bic.w	r1, r1, ip
 8003e0c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e0e:	fa0e f303 	lsl.w	r3, lr, r3
 8003e12:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e16:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	db0b      	blt.n	8003e34 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e1c:	0109      	lsls	r1, r1, #4
 8003e1e:	b2c9      	uxtb	r1, r1
 8003e20:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003e24:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003e28:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003e2c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e30:	2300      	movs	r3, #0
 8003e32:	e7e5      	b.n	8003e00 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e34:	f000 000f 	and.w	r0, r0, #15
 8003e38:	0109      	lsls	r1, r1, #4
 8003e3a:	b2c9      	uxtb	r1, r1
 8003e3c:	4b02      	ldr	r3, [pc, #8]	; (8003e48 <HAL_NVIC_SetPriority+0x6c>)
 8003e3e:	5419      	strb	r1, [r3, r0]
 8003e40:	e7f4      	b.n	8003e2c <HAL_NVIC_SetPriority+0x50>
 8003e42:	bf00      	nop
 8003e44:	e000ed00 	.word	0xe000ed00
 8003e48:	e000ed14 	.word	0xe000ed14

08003e4c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	db07      	blt.n	8003e60 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e50:	f000 021f 	and.w	r2, r0, #31
 8003e54:	0940      	lsrs	r0, r0, #5
 8003e56:	2301      	movs	r3, #1
 8003e58:	4093      	lsls	r3, r2
 8003e5a:	4a02      	ldr	r2, [pc, #8]	; (8003e64 <HAL_NVIC_EnableIRQ+0x18>)
 8003e5c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	e000e100 	.word	0xe000e100

08003e68 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e68:	3801      	subs	r0, #1
 8003e6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003e6e:	d20b      	bcs.n	8003e88 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e70:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003e74:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e76:	4a05      	ldr	r2, [pc, #20]	; (8003e8c <HAL_SYSTICK_Config+0x24>)
 8003e78:	21f0      	movs	r1, #240	; 0xf0
 8003e7a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e7e:	2000      	movs	r0, #0
 8003e80:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e82:	2207      	movs	r2, #7
 8003e84:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e86:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003e88:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003e8a:	4770      	bx	lr
 8003e8c:	e000ed00 	.word	0xe000ed00

08003e90 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003e90:	2800      	cmp	r0, #0
 8003e92:	d038      	beq.n	8003f06 <HAL_CRC_Init+0x76>
{
 8003e94:	b510      	push	{r4, lr}
 8003e96:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003e98:	7f43      	ldrb	r3, [r0, #29]
 8003e9a:	b31b      	cbz	r3, 8003ee4 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003ea0:	7923      	ldrb	r3, [r4, #4]
 8003ea2:	bb1b      	cbnz	r3, 8003eec <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	4a19      	ldr	r2, [pc, #100]	; (8003f0c <HAL_CRC_Init+0x7c>)
 8003ea8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003eaa:	6822      	ldr	r2, [r4, #0]
 8003eac:	6893      	ldr	r3, [r2, #8]
 8003eae:	f023 0318 	bic.w	r3, r3, #24
 8003eb2:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003eb4:	7963      	ldrb	r3, [r4, #5]
 8003eb6:	bb13      	cbnz	r3, 8003efe <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	f04f 32ff 	mov.w	r2, #4294967295
 8003ebe:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003ec0:	6822      	ldr	r2, [r4, #0]
 8003ec2:	6893      	ldr	r3, [r2, #8]
 8003ec4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003ec8:	6961      	ldr	r1, [r4, #20]
 8003eca:	430b      	orrs	r3, r1
 8003ecc:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003ece:	6822      	ldr	r2, [r4, #0]
 8003ed0:	6893      	ldr	r3, [r2, #8]
 8003ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ed6:	69a1      	ldr	r1, [r4, #24]
 8003ed8:	430b      	orrs	r3, r1
 8003eda:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003edc:	2301      	movs	r3, #1
 8003ede:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 8003ee0:	2000      	movs	r0, #0
}
 8003ee2:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8003ee4:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8003ee6:	f7fd fb53 	bl	8001590 <HAL_CRC_MspInit>
 8003eea:	e7d7      	b.n	8003e9c <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003eec:	68e2      	ldr	r2, [r4, #12]
 8003eee:	68a1      	ldr	r1, [r4, #8]
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	f000 f80d 	bl	8003f10 <HAL_CRCEx_Polynomial_Set>
 8003ef6:	2800      	cmp	r0, #0
 8003ef8:	d0dc      	beq.n	8003eb4 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 8003efa:	2001      	movs	r0, #1
 8003efc:	e7f1      	b.n	8003ee2 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003efe:	6823      	ldr	r3, [r4, #0]
 8003f00:	6922      	ldr	r2, [r4, #16]
 8003f02:	611a      	str	r2, [r3, #16]
 8003f04:	e7dc      	b.n	8003ec0 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 8003f06:	2001      	movs	r0, #1
}
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	04c11db7 	.word	0x04c11db7

08003f10 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003f10:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003f12:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003f14:	461c      	mov	r4, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b134      	cbz	r4, 8003f28 <HAL_CRCEx_Polynomial_Set+0x18>
 8003f1a:	f003 0c1f 	and.w	ip, r3, #31
 8003f1e:	fa21 fc0c 	lsr.w	ip, r1, ip
 8003f22:	f01c 0f01 	tst.w	ip, #1
 8003f26:	d0f5      	beq.n	8003f14 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8003f28:	2a18      	cmp	r2, #24
 8003f2a:	d822      	bhi.n	8003f72 <HAL_CRCEx_Polynomial_Set+0x62>
 8003f2c:	e8df f002 	tbb	[pc, r2]
 8003f30:	2121210f 	.word	0x2121210f
 8003f34:	21212121 	.word	0x21212121
 8003f38:	2121211d 	.word	0x2121211d
 8003f3c:	21212121 	.word	0x21212121
 8003f40:	21212119 	.word	0x21212119
 8003f44:	21212121 	.word	0x21212121
 8003f48:	0d          	.byte	0x0d
 8003f49:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003f4a:	2b06      	cmp	r3, #6
 8003f4c:	d815      	bhi.n	8003f7a <HAL_CRCEx_Polynomial_Set+0x6a>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003f4e:	6803      	ldr	r3, [r0, #0]
 8003f50:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003f52:	6801      	ldr	r1, [r0, #0]
 8003f54:	688b      	ldr	r3, [r1, #8]
 8003f56:	f023 0318 	bic.w	r3, r3, #24
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	608a      	str	r2, [r1, #8]
 8003f5e:	2000      	movs	r0, #0
 8003f60:	e008      	b.n	8003f74 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_8B)
 8003f62:	2b07      	cmp	r3, #7
 8003f64:	d9f3      	bls.n	8003f4e <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8003f66:	2001      	movs	r0, #1
 8003f68:	e004      	b.n	8003f74 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_16B)
 8003f6a:	2b0f      	cmp	r3, #15
 8003f6c:	d9ef      	bls.n	8003f4e <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8003f6e:	2001      	movs	r0, #1
 8003f70:	e000      	b.n	8003f74 <HAL_CRCEx_Polynomial_Set+0x64>
  switch (PolyLength)
 8003f72:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 8003f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f78:	4770      	bx	lr
        status =   HAL_ERROR;
 8003f7a:	2001      	movs	r0, #1
 8003f7c:	e7fa      	b.n	8003f74 <HAL_CRCEx_Polynomial_Set+0x64>

08003f7e <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8003f7e:	b170      	cbz	r0, 8003f9e <HAL_DAC_Init+0x20>
{
 8003f80:	b510      	push	{r4, lr}
 8003f82:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003f84:	7903      	ldrb	r3, [r0, #4]
 8003f86:	b133      	cbz	r3, 8003f96 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f88:	2302      	movs	r3, #2
 8003f8a:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003f8c:	2000      	movs	r0, #0
 8003f8e:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003f90:	2301      	movs	r3, #1
 8003f92:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8003f94:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8003f96:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8003f98:	f7fd fb6c 	bl	8001674 <HAL_DAC_MspInit>
 8003f9c:	e7f4      	b.n	8003f88 <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 8003f9e:	2001      	movs	r0, #1
}
 8003fa0:	4770      	bx	lr
	...

08003fa4 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003fa4:	7943      	ldrb	r3, [r0, #5]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	f000 80f4 	beq.w	8004194 <HAL_DAC_ConfigChannel+0x1f0>
{
 8003fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fb0:	4604      	mov	r4, r0
 8003fb2:	460e      	mov	r6, r1
 8003fb4:	4615      	mov	r5, r2
  __HAL_LOCK(hdac);
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003fba:	2302      	movs	r3, #2
 8003fbc:	7103      	strb	r3, [r0, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003fbe:	688b      	ldr	r3, [r1, #8]
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	d017      	beq.n	8003ff4 <HAL_DAC_ConfigChannel+0x50>
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003fc4:	69f3      	ldr	r3, [r6, #28]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d05e      	beq.n	8004088 <HAL_DAC_ConfigChannel+0xe4>
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003fca:	6823      	ldr	r3, [r4, #0]
 8003fcc:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003fce:	f005 0510 	and.w	r5, r5, #16
 8003fd2:	2307      	movs	r3, #7
 8003fd4:	40ab      	lsls	r3, r5
 8003fd6:	ea27 0703 	bic.w	r7, r7, r3
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003fda:	69b3      	ldr	r3, [r6, #24]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d060      	beq.n	80040a2 <HAL_DAC_ConfigChannel+0xfe>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	f000 80bd 	beq.w	8004160 <HAL_DAC_ConfigChannel+0x1bc>
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003fe6:	6973      	ldr	r3, [r6, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f040 80bc 	bne.w	8004166 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003fee:	f04f 0801 	mov.w	r8, #1
 8003ff2:	e058      	b.n	80040a6 <HAL_DAC_ConfigChannel+0x102>
    tickstart = HAL_GetTick();
 8003ff4:	f7ff f9ec 	bl	80033d0 <HAL_GetTick>
 8003ff8:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8003ffa:	b17d      	cbz	r5, 800401c <HAL_DAC_ConfigChannel+0x78>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003ffc:	6823      	ldr	r3, [r4, #0]
 8003ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004000:	2b00      	cmp	r3, #0
 8004002:	da3a      	bge.n	800407a <HAL_DAC_ConfigChannel+0xd6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004004:	f7ff f9e4 	bl	80033d0 <HAL_GetTick>
 8004008:	1bc0      	subs	r0, r0, r7
 800400a:	2801      	cmp	r0, #1
 800400c:	d9f6      	bls.n	8003ffc <HAL_DAC_ConfigChannel+0x58>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800400e:	6923      	ldr	r3, [r4, #16]
 8004010:	f043 0308 	orr.w	r3, r3, #8
 8004014:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004016:	2003      	movs	r0, #3
 8004018:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 800401a:	e09f      	b.n	800415c <HAL_DAC_ConfigChannel+0x1b8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800401c:	6823      	ldr	r3, [r4, #0]
 800401e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004020:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004024:	d00b      	beq.n	800403e <HAL_DAC_ConfigChannel+0x9a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004026:	f7ff f9d3 	bl	80033d0 <HAL_GetTick>
 800402a:	1bc0      	subs	r0, r0, r7
 800402c:	2801      	cmp	r0, #1
 800402e:	d9f5      	bls.n	800401c <HAL_DAC_ConfigChannel+0x78>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004030:	6923      	ldr	r3, [r4, #16]
 8004032:	f043 0308 	orr.w	r3, r3, #8
 8004036:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004038:	2003      	movs	r0, #3
 800403a:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 800403c:	e08e      	b.n	800415c <HAL_DAC_ConfigChannel+0x1b8>
      HAL_Delay(1);
 800403e:	2001      	movs	r0, #1
 8004040:	f7ff f9cc 	bl	80033dc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8004048:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800404a:	6820      	ldr	r0, [r4, #0]
 800404c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800404e:	f005 0110 	and.w	r1, r5, #16
 8004052:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004056:	408b      	lsls	r3, r1
 8004058:	ea22 0203 	bic.w	r2, r2, r3
 800405c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800405e:	408b      	lsls	r3, r1
 8004060:	431a      	orrs	r2, r3
 8004062:	6482      	str	r2, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004064:	6820      	ldr	r0, [r4, #0]
 8004066:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004068:	22ff      	movs	r2, #255	; 0xff
 800406a:	408a      	lsls	r2, r1
 800406c:	ea23 0302 	bic.w	r3, r3, r2
 8004070:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8004072:	408a      	lsls	r2, r1
 8004074:	4313      	orrs	r3, r2
 8004076:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004078:	e7a4      	b.n	8003fc4 <HAL_DAC_ConfigChannel+0x20>
      HAL_Delay(1U);
 800407a:	2001      	movs	r0, #1
 800407c:	f7ff f9ae 	bl	80033dc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8004084:	645a      	str	r2, [r3, #68]	; 0x44
 8004086:	e7e0      	b.n	800404a <HAL_DAC_ConfigChannel+0xa6>
    tmpreg1 = hdac->Instance->CCR;
 8004088:	6821      	ldr	r1, [r4, #0]
 800408a:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800408c:	f005 0010 	and.w	r0, r5, #16
 8004090:	231f      	movs	r3, #31
 8004092:	4083      	lsls	r3, r0
 8004094:	ea22 0203 	bic.w	r2, r2, r3
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004098:	6a33      	ldr	r3, [r6, #32]
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800409a:	4083      	lsls	r3, r0
 800409c:	4313      	orrs	r3, r2
    hdac->Instance->CCR = tmpreg1;
 800409e:	638b      	str	r3, [r1, #56]	; 0x38
 80040a0:	e793      	b.n	8003fca <HAL_DAC_ConfigChannel+0x26>
    connectOnChip = 0x00000000UL;
 80040a2:	f04f 0800 	mov.w	r8, #0
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80040a6:	68b3      	ldr	r3, [r6, #8]
 80040a8:	6972      	ldr	r2, [r6, #20]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	ea43 0308 	orr.w	r3, r3, r8
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80040b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040b4:	40aa      	lsls	r2, r5
 80040b6:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80040ba:	7932      	ldrb	r2, [r6, #4]
 80040bc:	2a01      	cmp	r2, #1
 80040be:	d055      	beq.n	800416c <HAL_DAC_ConfigChannel+0x1c8>
 80040c0:	f04f 0800 	mov.w	r8, #0
 80040c4:	ea48 0303 	orr.w	r3, r8, r3
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80040c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040cc:	40aa      	lsls	r2, r5
 80040ce:	ea27 0702 	bic.w	r7, r7, r2
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80040d2:	7972      	ldrb	r2, [r6, #5]
 80040d4:	2a01      	cmp	r2, #1
 80040d6:	d04c      	beq.n	8004172 <HAL_DAC_ConfigChannel+0x1ce>
 80040d8:	f04f 0800 	mov.w	r8, #0
 80040dc:	ea48 0803 	orr.w	r8, r8, r3
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80040e0:	f427 4740 	bic.w	r7, r7, #49152	; 0xc000
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80040e4:	6833      	ldr	r3, [r6, #0]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d046      	beq.n	8004178 <HAL_DAC_ConfigChannel+0x1d4>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80040ea:	431f      	orrs	r7, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80040ec:	fa08 f805 	lsl.w	r8, r8, r5
 80040f0:	ea48 0707 	orr.w	r7, r8, r7
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	63df      	str	r7, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80040f8:	6821      	ldr	r1, [r4, #0]
 80040fa:	680b      	ldr	r3, [r1, #0]
 80040fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004100:	40aa      	lsls	r2, r5
 8004102:	ea23 0302 	bic.w	r3, r3, r2
 8004106:	600b      	str	r3, [r1, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004108:	6821      	ldr	r1, [r4, #0]
 800410a:	680b      	ldr	r3, [r1, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800410c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004110:	40aa      	lsls	r2, r5
 8004112:	ea23 0202 	bic.w	r2, r3, r2
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004116:	68f3      	ldr	r3, [r6, #12]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004118:	40ab      	lsls	r3, r5
 800411a:	4313      	orrs	r3, r2
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800411c:	600b      	str	r3, [r1, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800411e:	6821      	ldr	r1, [r4, #0]
 8004120:	680b      	ldr	r3, [r1, #0]
 8004122:	22c0      	movs	r2, #192	; 0xc0
 8004124:	40aa      	lsls	r2, r5
 8004126:	ea23 0302 	bic.w	r3, r3, r2
 800412a:	600b      	str	r3, [r1, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800412c:	68f2      	ldr	r2, [r6, #12]
 800412e:	f3c2 0383 	ubfx	r3, r2, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004132:	6932      	ldr	r2, [r6, #16]
 8004134:	0892      	lsrs	r2, r2, #2
 8004136:	0212      	lsls	r2, r2, #8
 8004138:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800413c:	431a      	orrs	r2, r3
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800413e:	6820      	ldr	r0, [r4, #0]
 8004140:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004142:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004146:	40a9      	lsls	r1, r5
 8004148:	ea23 0301 	bic.w	r3, r3, r1
 800414c:	fa02 f505 	lsl.w	r5, r2, r5
 8004150:	431d      	orrs	r5, r3
 8004152:	6605      	str	r5, [r0, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004154:	2301      	movs	r3, #1
 8004156:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004158:	2000      	movs	r0, #0
 800415a:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 800415c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = DAC_MCR_MODE1_0;
 8004160:	f04f 0801 	mov.w	r8, #1
 8004164:	e79f      	b.n	80040a6 <HAL_DAC_ConfigChannel+0x102>
      connectOnChip = 0x00000000UL;
 8004166:	f04f 0800 	mov.w	r8, #0
 800416a:	e79c      	b.n	80040a6 <HAL_DAC_ConfigChannel+0x102>
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800416c:	f44f 7880 	mov.w	r8, #256	; 0x100
 8004170:	e7a8      	b.n	80040c4 <HAL_DAC_ConfigChannel+0x120>
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004172:	f44f 7800 	mov.w	r8, #512	; 0x200
 8004176:	e7b1      	b.n	80040dc <HAL_DAC_ConfigChannel+0x138>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004178:	f002 fd3a 	bl	8006bf0 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <HAL_DAC_ConfigChannel+0x1f4>)
 800417e:	4298      	cmp	r0, r3
 8004180:	d902      	bls.n	8004188 <HAL_DAC_ConfigChannel+0x1e4>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004182:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 8004186:	e7b1      	b.n	80040ec <HAL_DAC_ConfigChannel+0x148>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004188:	4b04      	ldr	r3, [pc, #16]	; (800419c <HAL_DAC_ConfigChannel+0x1f8>)
 800418a:	4298      	cmp	r0, r3
 800418c:	d9ae      	bls.n	80040ec <HAL_DAC_ConfigChannel+0x148>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800418e:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8004192:	e7ab      	b.n	80040ec <HAL_DAC_ConfigChannel+0x148>
  __HAL_LOCK(hdac);
 8004194:	2002      	movs	r0, #2
}
 8004196:	4770      	bx	lr
 8004198:	09896800 	.word	0x09896800
 800419c:	04c4b400 	.word	0x04c4b400

080041a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041a0:	b430      	push	{r4, r5}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041a2:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80041a4:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80041a6:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80041a8:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80041aa:	b114      	cbz	r4, 80041b2 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041ac:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80041ae:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80041b0:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041b2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80041b4:	f004 0c1f 	and.w	ip, r4, #31
 80041b8:	2401      	movs	r4, #1
 80041ba:	fa04 f40c 	lsl.w	r4, r4, ip
 80041be:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80041c0:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80041c2:	6804      	ldr	r4, [r0, #0]
 80041c4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041c6:	6883      	ldr	r3, [r0, #8]
 80041c8:	2b10      	cmp	r3, #16
 80041ca:	d005      	beq.n	80041d8 <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80041cc:	6803      	ldr	r3, [r0, #0]
 80041ce:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80041d0:	6803      	ldr	r3, [r0, #0]
 80041d2:	60da      	str	r2, [r3, #12]
  }
}
 80041d4:	bc30      	pop	{r4, r5}
 80041d6:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80041d8:	6803      	ldr	r3, [r0, #0]
 80041da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80041dc:	6803      	ldr	r3, [r0, #0]
 80041de:	60d9      	str	r1, [r3, #12]
 80041e0:	e7f8      	b.n	80041d4 <DMA_SetConfig+0x34>
	...

080041e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80041e4:	6803      	ldr	r3, [r0, #0]
 80041e6:	4a0c      	ldr	r2, [pc, #48]	; (8004218 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d813      	bhi.n	8004214 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80041ec:	490b      	ldr	r1, [pc, #44]	; (800421c <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	3b08      	subs	r3, #8
 80041f2:	4a0b      	ldr	r2, [pc, #44]	; (8004220 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 80041f4:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80041f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80041fa:	f022 0203 	bic.w	r2, r2, #3
 80041fe:	440a      	add	r2, r1
 8004200:	6482      	str	r2, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004202:	4a08      	ldr	r2, [pc, #32]	; (8004224 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8004204:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004206:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800420a:	2201      	movs	r2, #1
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	6503      	str	r3, [r0, #80]	; 0x50
}
 8004212:	4770      	bx	lr
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004214:	4904      	ldr	r1, [pc, #16]	; (8004228 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8004216:	e7ea      	b.n	80041ee <DMA_CalcDMAMUXChannelBaseAndMask+0xa>
 8004218:	40020407 	.word	0x40020407
 800421c:	40020800 	.word	0x40020800
 8004220:	cccccccd 	.word	0xcccccccd
 8004224:	40020880 	.word	0x40020880
 8004228:	40020820 	.word	0x40020820

0800422c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800422c:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800422e:	4a07      	ldr	r2, [pc, #28]	; (800424c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8004230:	441a      	add	r2, r3
 8004232:	0092      	lsls	r2, r2, #2
 8004234:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004236:	4a06      	ldr	r2, [pc, #24]	; (8004250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8004238:	6582      	str	r2, [r0, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800423a:	3b01      	subs	r3, #1
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	2201      	movs	r2, #1
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	1000823f 	.word	0x1000823f
 8004250:	40020940 	.word	0x40020940

08004254 <HAL_DMA_Init>:
  if (hdma == NULL)
 8004254:	2800      	cmp	r0, #0
 8004256:	d05b      	beq.n	8004310 <HAL_DMA_Init+0xbc>
{
 8004258:	b510      	push	{r4, lr}
 800425a:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800425c:	6801      	ldr	r1, [r0, #0]
 800425e:	4b2d      	ldr	r3, [pc, #180]	; (8004314 <HAL_DMA_Init+0xc0>)
 8004260:	4299      	cmp	r1, r3
 8004262:	d83d      	bhi.n	80042e0 <HAL_DMA_Init+0x8c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004264:	4b2c      	ldr	r3, [pc, #176]	; (8004318 <HAL_DMA_Init+0xc4>)
 8004266:	440b      	add	r3, r1
 8004268:	4a2c      	ldr	r2, [pc, #176]	; (800431c <HAL_DMA_Init+0xc8>)
 800426a:	fba2 2303 	umull	r2, r3, r2, r3
 800426e:	091b      	lsrs	r3, r3, #4
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004274:	4b2a      	ldr	r3, [pc, #168]	; (8004320 <HAL_DMA_Init+0xcc>)
 8004276:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8004278:	2302      	movs	r3, #2
 800427a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 800427e:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004280:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8004284:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8004288:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800428a:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 800428c:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800428e:	6920      	ldr	r0, [r4, #16]
 8004290:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004292:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004294:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004296:	69a0      	ldr	r0, [r4, #24]
 8004298:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800429a:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800429c:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800429e:	6a20      	ldr	r0, [r4, #32]
 80042a0:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80042a2:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 80042a4:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80042a6:	4620      	mov	r0, r4
 80042a8:	f7ff ff9c 	bl	80041e4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80042ac:	68a3      	ldr	r3, [r4, #8]
 80042ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042b2:	d020      	beq.n	80042f6 <HAL_DMA_Init+0xa2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80042b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80042b6:	7922      	ldrb	r2, [r4, #4]
 80042b8:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042ba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80042bc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80042be:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80042c0:	6863      	ldr	r3, [r4, #4]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d919      	bls.n	80042fc <HAL_DMA_Init+0xa8>
    hdma->DMAmuxRequestGen = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80042cc:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80042ce:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042d0:	2000      	movs	r0, #0
 80042d2:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 80042d4:	2301      	movs	r3, #1
 80042d6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 80042da:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80042de:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80042e0:	4b10      	ldr	r3, [pc, #64]	; (8004324 <HAL_DMA_Init+0xd0>)
 80042e2:	440b      	add	r3, r1
 80042e4:	4a0d      	ldr	r2, [pc, #52]	; (800431c <HAL_DMA_Init+0xc8>)
 80042e6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ea:	091b      	lsrs	r3, r3, #4
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80042f0:	4b0d      	ldr	r3, [pc, #52]	; (8004328 <HAL_DMA_Init+0xd4>)
 80042f2:	6403      	str	r3, [r0, #64]	; 0x40
 80042f4:	e7c0      	b.n	8004278 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80042f6:	2300      	movs	r3, #0
 80042f8:	6063      	str	r3, [r4, #4]
 80042fa:	e7db      	b.n	80042b4 <HAL_DMA_Init+0x60>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80042fc:	4620      	mov	r0, r4
 80042fe:	f7ff ff95 	bl	800422c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004302:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004308:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800430a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800430c:	605a      	str	r2, [r3, #4]
 800430e:	e7df      	b.n	80042d0 <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 8004310:	2001      	movs	r0, #1
}
 8004312:	4770      	bx	lr
 8004314:	40020407 	.word	0x40020407
 8004318:	bffdfff8 	.word	0xbffdfff8
 800431c:	cccccccd 	.word	0xcccccccd
 8004320:	40020000 	.word	0x40020000
 8004324:	bffdfbf8 	.word	0xbffdfbf8
 8004328:	40020400 	.word	0x40020400

0800432c <HAL_DMA_DeInit>:
  if (NULL == hdma)
 800432c:	2800      	cmp	r0, #0
 800432e:	d04b      	beq.n	80043c8 <HAL_DMA_DeInit+0x9c>
{
 8004330:	b538      	push	{r3, r4, r5, lr}
 8004332:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8004334:	6802      	ldr	r2, [r0, #0]
 8004336:	6813      	ldr	r3, [r2, #0]
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800433e:	6802      	ldr	r2, [r0, #0]
 8004340:	4b22      	ldr	r3, [pc, #136]	; (80043cc <HAL_DMA_DeInit+0xa0>)
 8004342:	429a      	cmp	r2, r3
 8004344:	d82c      	bhi.n	80043a0 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004346:	4b22      	ldr	r3, [pc, #136]	; (80043d0 <HAL_DMA_DeInit+0xa4>)
 8004348:	4413      	add	r3, r2
 800434a:	4922      	ldr	r1, [pc, #136]	; (80043d4 <HAL_DMA_DeInit+0xa8>)
 800434c:	fba1 1303 	umull	r1, r3, r1, r3
 8004350:	091b      	lsrs	r3, r3, #4
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004356:	4b20      	ldr	r3, [pc, #128]	; (80043d8 <HAL_DMA_DeInit+0xac>)
 8004358:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR  = 0;
 800435a:	2500      	movs	r5, #0
 800435c:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800435e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004360:	f003 021f 	and.w	r2, r3, #31
 8004364:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004366:	2301      	movs	r3, #1
 8004368:	4093      	lsls	r3, r2
 800436a:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800436c:	4620      	mov	r0, r4
 800436e:	f7ff ff39 	bl	80041e4 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0;
 8004372:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004374:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004376:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004378:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800437a:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800437c:	6863      	ldr	r3, [r4, #4]
 800437e:	3b01      	subs	r3, #1
 8004380:	2b03      	cmp	r3, #3
 8004382:	d918      	bls.n	80043b6 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 8004384:	2000      	movs	r0, #0
 8004386:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8004388:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800438a:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 800438c:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800438e:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004390:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004392:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004394:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8004396:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800439a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800439e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80043a0:	4b0e      	ldr	r3, [pc, #56]	; (80043dc <HAL_DMA_DeInit+0xb0>)
 80043a2:	4413      	add	r3, r2
 80043a4:	490b      	ldr	r1, [pc, #44]	; (80043d4 <HAL_DMA_DeInit+0xa8>)
 80043a6:	fba1 1303 	umull	r1, r3, r1, r3
 80043aa:	091b      	lsrs	r3, r3, #4
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80043b0:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <HAL_DMA_DeInit+0xb4>)
 80043b2:	6403      	str	r3, [r0, #64]	; 0x40
 80043b4:	e7d1      	b.n	800435a <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043b6:	4620      	mov	r0, r4
 80043b8:	f7ff ff38 	bl	800422c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80043bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80043be:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043c2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80043c4:	605a      	str	r2, [r3, #4]
 80043c6:	e7dd      	b.n	8004384 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 80043c8:	2001      	movs	r0, #1
}
 80043ca:	4770      	bx	lr
 80043cc:	40020407 	.word	0x40020407
 80043d0:	bffdfff8 	.word	0xbffdfff8
 80043d4:	cccccccd 	.word	0xcccccccd
 80043d8:	40020000 	.word	0x40020000
 80043dc:	bffdfbf8 	.word	0xbffdfbf8
 80043e0:	40020400 	.word	0x40020400

080043e4 <HAL_DMA_Start_IT>:
{
 80043e4:	b538      	push	{r3, r4, r5, lr}
 80043e6:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80043e8:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 80043ec:	2801      	cmp	r0, #1
 80043ee:	d041      	beq.n	8004474 <HAL_DMA_Start_IT+0x90>
 80043f0:	2001      	movs	r0, #1
 80043f2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 80043f6:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 80043fa:	b2c0      	uxtb	r0, r0
 80043fc:	2801      	cmp	r0, #1
 80043fe:	d004      	beq.n	800440a <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8004400:	2300      	movs	r3, #0
 8004402:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 8004406:	2002      	movs	r0, #2
}
 8004408:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800440a:	2002      	movs	r0, #2
 800440c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004410:	2000      	movs	r0, #0
 8004412:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004414:	6825      	ldr	r5, [r4, #0]
 8004416:	6828      	ldr	r0, [r5, #0]
 8004418:	f020 0001 	bic.w	r0, r0, #1
 800441c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800441e:	4620      	mov	r0, r4
 8004420:	f7ff febe 	bl	80041a0 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8004424:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004426:	b1d3      	cbz	r3, 800445e <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004428:	6822      	ldr	r2, [r4, #0]
 800442a:	6813      	ldr	r3, [r2, #0]
 800442c:	f043 030e 	orr.w	r3, r3, #14
 8004430:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004432:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800443a:	d003      	beq.n	8004444 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004442:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8004444:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004446:	b11b      	cbz	r3, 8004450 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800444e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004450:	6822      	ldr	r2, [r4, #0]
 8004452:	6813      	ldr	r3, [r2, #0]
 8004454:	f043 0301 	orr.w	r3, r3, #1
 8004458:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800445a:	2000      	movs	r0, #0
 800445c:	e7d4      	b.n	8004408 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800445e:	6822      	ldr	r2, [r4, #0]
 8004460:	6813      	ldr	r3, [r2, #0]
 8004462:	f023 0304 	bic.w	r3, r3, #4
 8004466:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004468:	6822      	ldr	r2, [r4, #0]
 800446a:	6813      	ldr	r3, [r2, #0]
 800446c:	f043 030a 	orr.w	r3, r3, #10
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	e7de      	b.n	8004432 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8004474:	2002      	movs	r0, #2
 8004476:	e7c7      	b.n	8004408 <HAL_DMA_Start_IT+0x24>

08004478 <HAL_DMA_Abort_IT>:
{
 8004478:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800447a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d009      	beq.n	8004498 <HAL_DMA_Abort_IT+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004484:	2304      	movs	r3, #4
 8004486:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004488:	2301      	movs	r3, #1
 800448a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800448e:	2200      	movs	r2, #0
 8004490:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    status = HAL_ERROR;
 8004494:	4618      	mov	r0, r3
}
 8004496:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004498:	6802      	ldr	r2, [r0, #0]
 800449a:	6813      	ldr	r3, [r2, #0]
 800449c:	f023 030e 	bic.w	r3, r3, #14
 80044a0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80044a2:	6802      	ldr	r2, [r0, #0]
 80044a4:	6813      	ldr	r3, [r2, #0]
 80044a6:	f023 0301 	bic.w	r3, r3, #1
 80044aa:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044ac:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80044ae:	6813      	ldr	r3, [r2, #0]
 80044b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044b4:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80044b6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80044b8:	f003 021f 	and.w	r2, r3, #31
 80044bc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80044be:	2301      	movs	r3, #1
 80044c0:	4093      	lsls	r3, r2
 80044c2:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80044c6:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80044c8:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80044ca:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80044cc:	b133      	cbz	r3, 80044dc <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044d4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044d6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80044d8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80044da:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80044dc:	2301      	movs	r3, #1
 80044de:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80044e2:	2300      	movs	r3, #0
 80044e4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80044e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80044ea:	b113      	cbz	r3, 80044f2 <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 80044ec:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80044ee:	2000      	movs	r0, #0
 80044f0:	e7d1      	b.n	8004496 <HAL_DMA_Abort_IT+0x1e>
 80044f2:	2000      	movs	r0, #0
 80044f4:	e7cf      	b.n	8004496 <HAL_DMA_Abort_IT+0x1e>

080044f6 <HAL_DMA_IRQHandler>:
{
 80044f6:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044f8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80044fa:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80044fc:	6804      	ldr	r4, [r0, #0]
 80044fe:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004500:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004502:	f003 031f 	and.w	r3, r3, #31
 8004506:	2204      	movs	r2, #4
 8004508:	409a      	lsls	r2, r3
 800450a:	420a      	tst	r2, r1
 800450c:	d015      	beq.n	800453a <HAL_DMA_IRQHandler+0x44>
 800450e:	f015 0f04 	tst.w	r5, #4
 8004512:	d012      	beq.n	800453a <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004514:	6823      	ldr	r3, [r4, #0]
 8004516:	f013 0f20 	tst.w	r3, #32
 800451a:	d103      	bne.n	8004524 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800451c:	6823      	ldr	r3, [r4, #0]
 800451e:	f023 0304 	bic.w	r3, r3, #4
 8004522:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004524:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004526:	f003 021f 	and.w	r2, r3, #31
 800452a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800452c:	2304      	movs	r3, #4
 800452e:	4093      	lsls	r3, r2
 8004530:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8004532:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004534:	b103      	cbz	r3, 8004538 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 8004536:	4798      	blx	r3
}
 8004538:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800453a:	2202      	movs	r2, #2
 800453c:	409a      	lsls	r2, r3
 800453e:	420a      	tst	r2, r1
 8004540:	d01c      	beq.n	800457c <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 8004542:	f015 0f02 	tst.w	r5, #2
 8004546:	d019      	beq.n	800457c <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004548:	6823      	ldr	r3, [r4, #0]
 800454a:	f013 0f20 	tst.w	r3, #32
 800454e:	d106      	bne.n	800455e <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	f023 030a 	bic.w	r3, r3, #10
 8004556:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004558:	2301      	movs	r3, #1
 800455a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800455e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004560:	f003 021f 	and.w	r2, r3, #31
 8004564:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004566:	2302      	movs	r3, #2
 8004568:	4093      	lsls	r3, r2
 800456a:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 800456c:	2300      	movs	r3, #0
 800456e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8004572:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0df      	beq.n	8004538 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8004578:	4798      	blx	r3
 800457a:	e7dd      	b.n	8004538 <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800457c:	2208      	movs	r2, #8
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	420b      	tst	r3, r1
 8004584:	d0d8      	beq.n	8004538 <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 8004586:	f015 0f08 	tst.w	r5, #8
 800458a:	d0d5      	beq.n	8004538 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800458c:	6823      	ldr	r3, [r4, #0]
 800458e:	f023 030e 	bic.w	r3, r3, #14
 8004592:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004594:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004596:	f003 031f 	and.w	r3, r3, #31
 800459a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800459c:	2201      	movs	r2, #1
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045a4:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80045a6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80045aa:	2300      	movs	r3, #0
 80045ac:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80045b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0c0      	beq.n	8004538 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80045b6:	4798      	blx	r3
  return;
 80045b8:	e7be      	b.n	8004538 <HAL_DMA_IRQHandler+0x42>

080045ba <HAL_DMA_GetState>:
  return hdma->State;
 80045ba:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 80045be:	4770      	bx	lr

080045c0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80045c0:	b410      	push	{r4}
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80045c2:	6802      	ldr	r2, [r0, #0]
 80045c4:	4b1d      	ldr	r3, [pc, #116]	; (800463c <FDCAN_CalcultateRamBlockAddresses+0x7c>)
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d028      	beq.n	800461c <FDCAN_CalcultateRamBlockAddresses+0x5c>
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80045ca:	491d      	ldr	r1, [pc, #116]	; (8004640 <FDCAN_CalcultateRamBlockAddresses+0x80>)
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80045cc:	4b1d      	ldr	r3, [pc, #116]	; (8004644 <FDCAN_CalcultateRamBlockAddresses+0x84>)
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d026      	beq.n	8004620 <FDCAN_CalcultateRamBlockAddresses+0x60>
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80045d2:	6401      	str	r1, [r0, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80045d4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80045d8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045dc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80045de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80045e2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80045e6:	f101 0370 	add.w	r3, r1, #112	; 0x70
 80045ea:	6443      	str	r3, [r0, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80045ec:	6802      	ldr	r2, [r0, #0]
 80045ee:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80045f2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80045f6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80045f8:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80045fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004600:	f101 03b0 	add.w	r3, r1, #176	; 0xb0
 8004604:	6483      	str	r3, [r0, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004606:	f501 73c4 	add.w	r3, r1, #392	; 0x188
 800460a:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800460c:	f501 7318 	add.w	r3, r1, #608	; 0x260
 8004610:	6503      	str	r3, [r0, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004612:	f501 731e 	add.w	r3, r1, #632	; 0x278
 8004616:	6543      	str	r3, [r0, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004618:	460b      	mov	r3, r1
 800461a:	e007      	b.n	800462c <FDCAN_CalcultateRamBlockAddresses+0x6c>
    SramCanInstanceBase += SRAMCAN_SIZE;
 800461c:	490a      	ldr	r1, [pc, #40]	; (8004648 <FDCAN_CalcultateRamBlockAddresses+0x88>)
 800461e:	e7d5      	b.n	80045cc <FDCAN_CalcultateRamBlockAddresses+0xc>
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8004620:	f501 61d4 	add.w	r1, r1, #1696	; 0x6a0
 8004624:	e7d5      	b.n	80045d2 <FDCAN_CalcultateRamBlockAddresses+0x12>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004626:	2200      	movs	r2, #0
 8004628:	f843 2b04 	str.w	r2, [r3], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800462c:	f501 7254 	add.w	r2, r1, #848	; 0x350
 8004630:	429a      	cmp	r2, r3
 8004632:	d8f8      	bhi.n	8004626 <FDCAN_CalcultateRamBlockAddresses+0x66>
  }
}
 8004634:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40006800 	.word	0x40006800
 8004640:	4000a400 	.word	0x4000a400
 8004644:	40006c00 	.word	0x40006c00
 8004648:	4000a750 	.word	0x4000a750

0800464c <HAL_FDCAN_Init>:
  if (hfdcan == NULL)
 800464c:	2800      	cmp	r0, #0
 800464e:	f000 80e3 	beq.w	8004818 <HAL_FDCAN_Init+0x1cc>
{
 8004652:	b538      	push	{r3, r4, r5, lr}
 8004654:	4604      	mov	r4, r0
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004656:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800465a:	b1d3      	cbz	r3, 8004692 <HAL_FDCAN_Init+0x46>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800465c:	6822      	ldr	r2, [r4, #0]
 800465e:	6993      	ldr	r3, [r2, #24]
 8004660:	f023 0310 	bic.w	r3, r3, #16
 8004664:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 8004666:	f7fe feb3 	bl	80033d0 <HAL_GetTick>
 800466a:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800466c:	6823      	ldr	r3, [r4, #0]
 800466e:	699a      	ldr	r2, [r3, #24]
 8004670:	f012 0f08 	tst.w	r2, #8
 8004674:	d012      	beq.n	800469c <HAL_FDCAN_Init+0x50>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004676:	f7fe feab 	bl	80033d0 <HAL_GetTick>
 800467a:	1b40      	subs	r0, r0, r5
 800467c:	280a      	cmp	r0, #10
 800467e:	d9f5      	bls.n	800466c <HAL_FDCAN_Init+0x20>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004680:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004682:	f043 0301 	orr.w	r3, r3, #1
 8004686:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004688:	2303      	movs	r3, #3
 800468a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 800468e:	2001      	movs	r0, #1
}
 8004690:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8004692:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8004696:	f7fd f8cf 	bl	8001838 <HAL_FDCAN_MspInit>
 800469a:	e7df      	b.n	800465c <HAL_FDCAN_Init+0x10>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800469c:	699a      	ldr	r2, [r3, #24]
 800469e:	f042 0201 	orr.w	r2, r2, #1
 80046a2:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 80046a4:	f7fe fe94 	bl	80033d0 <HAL_GetTick>
 80046a8:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	699a      	ldr	r2, [r3, #24]
 80046ae:	f012 0f01 	tst.w	r2, #1
 80046b2:	d10d      	bne.n	80046d0 <HAL_FDCAN_Init+0x84>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80046b4:	f7fe fe8c 	bl	80033d0 <HAL_GetTick>
 80046b8:	1b40      	subs	r0, r0, r5
 80046ba:	280a      	cmp	r0, #10
 80046bc:	d9f5      	bls.n	80046aa <HAL_FDCAN_Init+0x5e>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80046be:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80046c0:	f043 0301 	orr.w	r3, r3, #1
 80046c4:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80046c6:	2303      	movs	r3, #3
 80046c8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 80046cc:	2001      	movs	r0, #1
 80046ce:	e7df      	b.n	8004690 <HAL_FDCAN_Init+0x44>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80046d0:	699a      	ldr	r2, [r3, #24]
 80046d2:	f042 0202 	orr.w	r2, r2, #2
 80046d6:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 80046d8:	6822      	ldr	r2, [r4, #0]
 80046da:	4b50      	ldr	r3, [pc, #320]	; (800481c <HAL_FDCAN_Init+0x1d0>)
 80046dc:	429a      	cmp	r2, r3
 80046de:	d042      	beq.n	8004766 <HAL_FDCAN_Init+0x11a>
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80046e0:	7c23      	ldrb	r3, [r4, #16]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d045      	beq.n	8004772 <HAL_FDCAN_Init+0x126>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80046e6:	6822      	ldr	r2, [r4, #0]
 80046e8:	6993      	ldr	r3, [r2, #24]
 80046ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046ee:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 80046f0:	7c63      	ldrb	r3, [r4, #17]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d043      	beq.n	800477e <HAL_FDCAN_Init+0x132>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80046f6:	6822      	ldr	r2, [r4, #0]
 80046f8:	6993      	ldr	r3, [r2, #24]
 80046fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046fe:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004700:	7ca3      	ldrb	r3, [r4, #18]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d041      	beq.n	800478a <HAL_FDCAN_Init+0x13e>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004706:	6822      	ldr	r2, [r4, #0]
 8004708:	6993      	ldr	r3, [r2, #24]
 800470a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800470e:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004710:	6822      	ldr	r2, [r4, #0]
 8004712:	6993      	ldr	r3, [r2, #24]
 8004714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004718:	68a1      	ldr	r1, [r4, #8]
 800471a:	430b      	orrs	r3, r1
 800471c:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800471e:	6822      	ldr	r2, [r4, #0]
 8004720:	6993      	ldr	r3, [r2, #24]
 8004722:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 8004726:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004728:	6822      	ldr	r2, [r4, #0]
 800472a:	6913      	ldr	r3, [r2, #16]
 800472c:	f023 0310 	bic.w	r3, r3, #16
 8004730:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004732:	68e3      	ldr	r3, [r4, #12]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d02e      	beq.n	8004796 <HAL_FDCAN_Init+0x14a>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004738:	2b00      	cmp	r3, #0
 800473a:	d031      	beq.n	80047a0 <HAL_FDCAN_Init+0x154>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800473c:	2b02      	cmp	r3, #2
 800473e:	d054      	beq.n	80047ea <HAL_FDCAN_Init+0x19e>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004740:	6822      	ldr	r2, [r4, #0]
 8004742:	6993      	ldr	r3, [r2, #24]
 8004744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004748:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800474a:	6822      	ldr	r2, [r4, #0]
 800474c:	6913      	ldr	r3, [r2, #16]
 800474e:	f043 0310 	orr.w	r3, r3, #16
 8004752:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004754:	68e3      	ldr	r3, [r4, #12]
 8004756:	2b03      	cmp	r3, #3
 8004758:	d122      	bne.n	80047a0 <HAL_FDCAN_Init+0x154>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800475a:	6822      	ldr	r2, [r4, #0]
 800475c:	6993      	ldr	r3, [r2, #24]
 800475e:	f043 0320 	orr.w	r3, r3, #32
 8004762:	6193      	str	r3, [r2, #24]
 8004764:	e01c      	b.n	80047a0 <HAL_FDCAN_Init+0x154>
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004766:	6862      	ldr	r2, [r4, #4]
 8004768:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800476c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8004770:	e7b6      	b.n	80046e0 <HAL_FDCAN_Init+0x94>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004772:	6822      	ldr	r2, [r4, #0]
 8004774:	6993      	ldr	r3, [r2, #24]
 8004776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800477a:	6193      	str	r3, [r2, #24]
 800477c:	e7b8      	b.n	80046f0 <HAL_FDCAN_Init+0xa4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800477e:	6822      	ldr	r2, [r4, #0]
 8004780:	6993      	ldr	r3, [r2, #24]
 8004782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004786:	6193      	str	r3, [r2, #24]
 8004788:	e7ba      	b.n	8004700 <HAL_FDCAN_Init+0xb4>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800478a:	6822      	ldr	r2, [r4, #0]
 800478c:	6993      	ldr	r3, [r2, #24]
 800478e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004792:	6193      	str	r3, [r2, #24]
 8004794:	e7bc      	b.n	8004710 <HAL_FDCAN_Init+0xc4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004796:	6822      	ldr	r2, [r4, #0]
 8004798:	6993      	ldr	r3, [r2, #24]
 800479a:	f043 0304 	orr.w	r3, r3, #4
 800479e:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047a0:	69a3      	ldr	r3, [r4, #24]
 80047a2:	1e5a      	subs	r2, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80047a4:	69e3      	ldr	r3, [r4, #28]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047aa:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80047ae:	6a22      	ldr	r2, [r4, #32]
 80047b0:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80047b2:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80047b4:	6962      	ldr	r2, [r4, #20]
 80047b6:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047b8:	6821      	ldr	r1, [r4, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80047ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047be:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80047c0:	68a3      	ldr	r3, [r4, #8]
 80047c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047c6:	d016      	beq.n	80047f6 <HAL_FDCAN_Init+0x1aa>
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80047c8:	6822      	ldr	r2, [r4, #0]
 80047ca:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80047ce:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80047d0:	430b      	orrs	r3, r1
 80047d2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80047d6:	4620      	mov	r0, r4
 80047d8:	f7ff fef2 	bl	80045c0 <FDCAN_CalcultateRamBlockAddresses>
  hfdcan->LatestTxFifoQRequest = 0U;
 80047dc:	2000      	movs	r0, #0
 80047de:	65a0      	str	r0, [r4, #88]	; 0x58
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80047e0:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80047e2:	2301      	movs	r3, #1
 80047e4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return HAL_OK;
 80047e8:	e752      	b.n	8004690 <HAL_FDCAN_Init+0x44>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80047ea:	6822      	ldr	r2, [r4, #0]
 80047ec:	6993      	ldr	r3, [r2, #24]
 80047ee:	f043 0320 	orr.w	r3, r3, #32
 80047f2:	6193      	str	r3, [r2, #24]
 80047f4:	e7d4      	b.n	80047a0 <HAL_FDCAN_Init+0x154>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80047f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80047f8:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80047fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80047fc:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80047fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004802:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004804:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004806:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800480a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800480c:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800480e:	6821      	ldr	r1, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004810:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004814:	60cb      	str	r3, [r1, #12]
 8004816:	e7d7      	b.n	80047c8 <HAL_FDCAN_Init+0x17c>
    return HAL_ERROR;
 8004818:	2001      	movs	r0, #1
}
 800481a:	4770      	bx	lr
 800481c:	40006400 	.word	0x40006400

08004820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004822:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8004824:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004826:	e062      	b.n	80048ee <HAL_GPIO_Init+0xce>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004828:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800482a:	005e      	lsls	r6, r3, #1
 800482c:	2403      	movs	r4, #3
 800482e:	40b4      	lsls	r4, r6
 8004830:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004834:	68cc      	ldr	r4, [r1, #12]
 8004836:	40b4      	lsls	r4, r6
 8004838:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800483a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800483c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800483e:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004842:	684c      	ldr	r4, [r1, #4]
 8004844:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8004848:	409c      	lsls	r4, r3
 800484a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 800484e:	6044      	str	r4, [r0, #4]
 8004850:	e05e      	b.n	8004910 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004852:	08dd      	lsrs	r5, r3, #3
 8004854:	3508      	adds	r5, #8
 8004856:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800485a:	f003 0407 	and.w	r4, r3, #7
 800485e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004862:	240f      	movs	r4, #15
 8004864:	fa04 f40c 	lsl.w	r4, r4, ip
 8004868:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800486c:	690c      	ldr	r4, [r1, #16]
 800486e:	fa04 f40c 	lsl.w	r4, r4, ip
 8004872:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004876:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800487a:	e060      	b.n	800493e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800487c:	2405      	movs	r4, #5
 800487e:	e000      	b.n	8004882 <HAL_GPIO_Init+0x62>
 8004880:	2400      	movs	r4, #0
 8004882:	fa04 f40e 	lsl.w	r4, r4, lr
 8004886:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004888:	f10c 0c02 	add.w	ip, ip, #2
 800488c:	4d55      	ldr	r5, [pc, #340]	; (80049e4 <HAL_GPIO_Init+0x1c4>)
 800488e:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004892:	4c55      	ldr	r4, [pc, #340]	; (80049e8 <HAL_GPIO_Init+0x1c8>)
 8004894:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8004896:	43d4      	mvns	r4, r2
 8004898:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800489c:	684f      	ldr	r7, [r1, #4]
 800489e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80048a2:	d001      	beq.n	80048a8 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 80048a4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80048a8:	4d4f      	ldr	r5, [pc, #316]	; (80049e8 <HAL_GPIO_Init+0x1c8>)
 80048aa:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 80048ac:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80048ae:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048b2:	684f      	ldr	r7, [r1, #4]
 80048b4:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 80048b8:	d001      	beq.n	80048be <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 80048ba:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 80048be:	4d4a      	ldr	r5, [pc, #296]	; (80049e8 <HAL_GPIO_Init+0x1c8>)
 80048c0:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR1;
 80048c2:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80048c4:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048c8:	684f      	ldr	r7, [r1, #4]
 80048ca:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80048ce:	d001      	beq.n	80048d4 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 80048d0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 80048d4:	4d44      	ldr	r5, [pc, #272]	; (80049e8 <HAL_GPIO_Init+0x1c8>)
 80048d6:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80048d8:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 80048da:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048dc:	684e      	ldr	r6, [r1, #4]
 80048de:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80048e2:	d001      	beq.n	80048e8 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 80048e4:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 80048e8:	4a3f      	ldr	r2, [pc, #252]	; (80049e8 <HAL_GPIO_Init+0x1c8>)
 80048ea:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 80048ec:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80048ee:	680a      	ldr	r2, [r1, #0]
 80048f0:	fa32 f403 	lsrs.w	r4, r2, r3
 80048f4:	d074      	beq.n	80049e0 <HAL_GPIO_Init+0x1c0>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048f6:	f04f 0c01 	mov.w	ip, #1
 80048fa:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 80048fe:	ea1c 0202 	ands.w	r2, ip, r2
 8004902:	d0f3      	beq.n	80048ec <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004904:	684c      	ldr	r4, [r1, #4]
 8004906:	f004 0403 	and.w	r4, r4, #3
 800490a:	3c01      	subs	r4, #1
 800490c:	2c01      	cmp	r4, #1
 800490e:	d98b      	bls.n	8004828 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004910:	684c      	ldr	r4, [r1, #4]
 8004912:	f004 0403 	and.w	r4, r4, #3
 8004916:	2c03      	cmp	r4, #3
 8004918:	d00c      	beq.n	8004934 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 800491a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800491c:	005d      	lsls	r5, r3, #1
 800491e:	f04f 0c03 	mov.w	ip, #3
 8004922:	fa0c fc05 	lsl.w	ip, ip, r5
 8004926:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800492a:	688c      	ldr	r4, [r1, #8]
 800492c:	40ac      	lsls	r4, r5
 800492e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8004932:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004934:	684c      	ldr	r4, [r1, #4]
 8004936:	f004 0403 	and.w	r4, r4, #3
 800493a:	2c02      	cmp	r4, #2
 800493c:	d089      	beq.n	8004852 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 800493e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004940:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004944:	f04f 0c03 	mov.w	ip, #3
 8004948:	fa0c fc0e 	lsl.w	ip, ip, lr
 800494c:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004950:	684c      	ldr	r4, [r1, #4]
 8004952:	f004 0403 	and.w	r4, r4, #3
 8004956:	fa04 f40e 	lsl.w	r4, r4, lr
 800495a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800495e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004960:	684c      	ldr	r4, [r1, #4]
 8004962:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8004966:	d0c1      	beq.n	80048ec <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004968:	4c20      	ldr	r4, [pc, #128]	; (80049ec <HAL_GPIO_Init+0x1cc>)
 800496a:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800496c:	f045 0501 	orr.w	r5, r5, #1
 8004970:	6625      	str	r5, [r4, #96]	; 0x60
 8004972:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8004974:	f004 0401 	and.w	r4, r4, #1
 8004978:	9401      	str	r4, [sp, #4]
 800497a:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800497c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004980:	f10c 0502 	add.w	r5, ip, #2
 8004984:	4c17      	ldr	r4, [pc, #92]	; (80049e4 <HAL_GPIO_Init+0x1c4>)
 8004986:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800498a:	f003 0403 	and.w	r4, r3, #3
 800498e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004992:	240f      	movs	r4, #15
 8004994:	fa04 f40e 	lsl.w	r4, r4, lr
 8004998:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800499c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80049a0:	f43f af6e 	beq.w	8004880 <HAL_GPIO_Init+0x60>
 80049a4:	4c12      	ldr	r4, [pc, #72]	; (80049f0 <HAL_GPIO_Init+0x1d0>)
 80049a6:	42a0      	cmp	r0, r4
 80049a8:	d012      	beq.n	80049d0 <HAL_GPIO_Init+0x1b0>
 80049aa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80049ae:	42a0      	cmp	r0, r4
 80049b0:	d010      	beq.n	80049d4 <HAL_GPIO_Init+0x1b4>
 80049b2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80049b6:	42a0      	cmp	r0, r4
 80049b8:	d00e      	beq.n	80049d8 <HAL_GPIO_Init+0x1b8>
 80049ba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80049be:	42a0      	cmp	r0, r4
 80049c0:	d00c      	beq.n	80049dc <HAL_GPIO_Init+0x1bc>
 80049c2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80049c6:	42a0      	cmp	r0, r4
 80049c8:	f43f af58 	beq.w	800487c <HAL_GPIO_Init+0x5c>
 80049cc:	2406      	movs	r4, #6
 80049ce:	e758      	b.n	8004882 <HAL_GPIO_Init+0x62>
 80049d0:	2401      	movs	r4, #1
 80049d2:	e756      	b.n	8004882 <HAL_GPIO_Init+0x62>
 80049d4:	2402      	movs	r4, #2
 80049d6:	e754      	b.n	8004882 <HAL_GPIO_Init+0x62>
 80049d8:	2403      	movs	r4, #3
 80049da:	e752      	b.n	8004882 <HAL_GPIO_Init+0x62>
 80049dc:	2404      	movs	r4, #4
 80049de:	e750      	b.n	8004882 <HAL_GPIO_Init+0x62>
  }
}
 80049e0:	b003      	add	sp, #12
 80049e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049e4:	40010000 	.word	0x40010000
 80049e8:	40010400 	.word	0x40010400
 80049ec:	40021000 	.word	0x40021000
 80049f0:	48000400 	.word	0x48000400

080049f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049f4:	b10a      	cbz	r2, 80049fa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049f6:	6181      	str	r1, [r0, #24]
 80049f8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049fa:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80049fc:	4770      	bx	lr

080049fe <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80049fe:	6803      	ldr	r3, [r0, #0]
 8004a00:	699a      	ldr	r2, [r3, #24]
 8004a02:	f012 0f02 	tst.w	r2, #2
 8004a06:	d001      	beq.n	8004a0c <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a08:	2200      	movs	r2, #0
 8004a0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a0c:	6803      	ldr	r3, [r0, #0]
 8004a0e:	699a      	ldr	r2, [r3, #24]
 8004a10:	f012 0f01 	tst.w	r2, #1
 8004a14:	d103      	bne.n	8004a1e <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a16:	699a      	ldr	r2, [r3, #24]
 8004a18:	f042 0201 	orr.w	r2, r2, #1
 8004a1c:	619a      	str	r2, [r3, #24]
  }
}
 8004a1e:	4770      	bx	lr

08004a20 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004a20:	f011 0f01 	tst.w	r1, #1
 8004a24:	d009      	beq.n	8004a3a <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a26:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004a2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a2e:	2b28      	cmp	r3, #40	; 0x28
 8004a30:	d001      	beq.n	8004a36 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a32:	23f2      	movs	r3, #242	; 0xf2
 8004a34:	e002      	b.n	8004a3c <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004a36:	2342      	movs	r3, #66	; 0x42
 8004a38:	e000      	b.n	8004a3c <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8004a3a:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004a3c:	f011 0f02 	tst.w	r1, #2
 8004a40:	d009      	beq.n	8004a56 <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004a42:	f043 0c44 	orr.w	ip, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a46:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8004a4a:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8004a4e:	2a28      	cmp	r2, #40	; 0x28
 8004a50:	d010      	beq.n	8004a74 <I2C_Disable_IRQ+0x54>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a52:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004a56:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8004a5a:	d10d      	bne.n	8004a78 <I2C_Disable_IRQ+0x58>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004a5c:	2910      	cmp	r1, #16
 8004a5e:	d00e      	beq.n	8004a7e <I2C_Disable_IRQ+0x5e>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004a60:	2920      	cmp	r1, #32
 8004a62:	d00f      	beq.n	8004a84 <I2C_Disable_IRQ+0x64>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004a64:	2940      	cmp	r1, #64	; 0x40
 8004a66:	d010      	beq.n	8004a8a <I2C_Disable_IRQ+0x6a>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004a68:	6801      	ldr	r1, [r0, #0]
 8004a6a:	680a      	ldr	r2, [r1, #0]
 8004a6c:	ea22 0303 	bic.w	r3, r2, r3
 8004a70:	600b      	str	r3, [r1, #0]
}
 8004a72:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004a74:	4663      	mov	r3, ip
 8004a76:	e7ee      	b.n	8004a56 <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a78:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004a7c:	e7ee      	b.n	8004a5c <I2C_Disable_IRQ+0x3c>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004a7e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004a82:	e7ed      	b.n	8004a60 <I2C_Disable_IRQ+0x40>
    tmpisr |= I2C_IT_STOPI;
 8004a84:	f043 0320 	orr.w	r3, r3, #32
 8004a88:	e7ec      	b.n	8004a64 <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI;
 8004a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a8e:	e7eb      	b.n	8004a68 <I2C_Disable_IRQ+0x48>

08004a90 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004a90:	2800      	cmp	r0, #0
 8004a92:	d059      	beq.n	8004b48 <HAL_I2C_Init+0xb8>
{
 8004a94:	b510      	push	{r4, lr}
 8004a96:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a98:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d043      	beq.n	8004b28 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004aa0:	2324      	movs	r3, #36	; 0x24
 8004aa2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004aa6:	6822      	ldr	r2, [r4, #0]
 8004aa8:	6813      	ldr	r3, [r2, #0]
 8004aaa:	f023 0301 	bic.w	r3, r3, #1
 8004aae:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ab0:	6863      	ldr	r3, [r4, #4]
 8004ab2:	6822      	ldr	r2, [r4, #0]
 8004ab4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004ab8:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004aba:	6822      	ldr	r2, [r4, #0]
 8004abc:	6893      	ldr	r3, [r2, #8]
 8004abe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ac2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ac4:	68e3      	ldr	r3, [r4, #12]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d033      	beq.n	8004b32 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004aca:	68a3      	ldr	r3, [r4, #8]
 8004acc:	6822      	ldr	r2, [r4, #0]
 8004ace:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8004ad2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ad4:	68e3      	ldr	r3, [r4, #12]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d031      	beq.n	8004b3e <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ada:	6822      	ldr	r2, [r4, #0]
 8004adc:	6853      	ldr	r3, [r2, #4]
 8004ade:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae6:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ae8:	6822      	ldr	r2, [r4, #0]
 8004aea:	68d3      	ldr	r3, [r2, #12]
 8004aec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004af0:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004af2:	6923      	ldr	r3, [r4, #16]
 8004af4:	6962      	ldr	r2, [r4, #20]
 8004af6:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004af8:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004afa:	6822      	ldr	r2, [r4, #0]
 8004afc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004b00:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b02:	69e3      	ldr	r3, [r4, #28]
 8004b04:	6a21      	ldr	r1, [r4, #32]
 8004b06:	6822      	ldr	r2, [r4, #0]
 8004b08:	430b      	orrs	r3, r1
 8004b0a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004b0c:	6822      	ldr	r2, [r4, #0]
 8004b0e:	6813      	ldr	r3, [r2, #0]
 8004b10:	f043 0301 	orr.w	r3, r3, #1
 8004b14:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b16:	2000      	movs	r0, #0
 8004b18:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b1a:	2320      	movs	r3, #32
 8004b1c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b20:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b22:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004b26:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004b28:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004b2c:	f7fd f8a6 	bl	8001c7c <HAL_I2C_MspInit>
 8004b30:	e7b6      	b.n	8004aa0 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b32:	68a3      	ldr	r3, [r4, #8]
 8004b34:	6822      	ldr	r2, [r4, #0]
 8004b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b3a:	6093      	str	r3, [r2, #8]
 8004b3c:	e7ca      	b.n	8004ad4 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b44:	605a      	str	r2, [r3, #4]
 8004b46:	e7c8      	b.n	8004ada <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8004b48:	2001      	movs	r0, #1
}
 8004b4a:	4770      	bx	lr

08004b4c <HAL_I2C_EV_IRQHandler>:
{
 8004b4c:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004b4e:	6803      	ldr	r3, [r0, #0]
 8004b50:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004b52:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8004b54:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004b56:	b103      	cbz	r3, 8004b5a <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8004b58:	4798      	blx	r3
}
 8004b5a:	bd08      	pop	{r3, pc}

08004b5c <HAL_I2C_SlaveTxCpltCallback>:
}
 8004b5c:	4770      	bx	lr

08004b5e <HAL_I2C_SlaveRxCpltCallback>:
}
 8004b5e:	4770      	bx	lr

08004b60 <I2C_ITSlaveSeqCplt>:
{
 8004b60:	b510      	push	{r4, lr}
 8004b62:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004b64:	6803      	ldr	r3, [r0, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b68:	2100      	movs	r1, #0
 8004b6a:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004b6e:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004b72:	d00e      	beq.n	8004b92 <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b7a:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004b7c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b29      	cmp	r3, #41	; 0x29
 8004b84:	d00d      	beq.n	8004ba2 <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b86:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b2a      	cmp	r3, #42	; 0x2a
 8004b8e:	d018      	beq.n	8004bc2 <I2C_ITSlaveSeqCplt+0x62>
}
 8004b90:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004b92:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004b96:	d0f1      	beq.n	8004b7c <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	e7ec      	b.n	8004b7c <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004ba2:	2328      	movs	r3, #40	; 0x28
 8004ba4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ba8:	2321      	movs	r3, #33	; 0x21
 8004baa:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004bac:	2101      	movs	r1, #1
 8004bae:	4620      	mov	r0, r4
 8004bb0:	f7ff ff36 	bl	8004a20 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004bba:	4620      	mov	r0, r4
 8004bbc:	f7ff ffce 	bl	8004b5c <HAL_I2C_SlaveTxCpltCallback>
 8004bc0:	e7e6      	b.n	8004b90 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004bc2:	2328      	movs	r3, #40	; 0x28
 8004bc4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004bc8:	2322      	movs	r3, #34	; 0x22
 8004bca:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004bcc:	2102      	movs	r1, #2
 8004bce:	4620      	mov	r0, r4
 8004bd0:	f7ff ff26 	bl	8004a20 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f7ff ffbf 	bl	8004b5e <HAL_I2C_SlaveRxCpltCallback>
}
 8004be0:	e7d6      	b.n	8004b90 <I2C_ITSlaveSeqCplt+0x30>

08004be2 <HAL_I2C_AddrCallback>:
}
 8004be2:	4770      	bx	lr

08004be4 <I2C_ITAddrCplt>:
{
 8004be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be6:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004be8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004bec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bf0:	2b28      	cmp	r3, #40	; 0x28
 8004bf2:	d006      	beq.n	8004c02 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004bf4:	6803      	ldr	r3, [r0, #0]
 8004bf6:	2208      	movs	r2, #8
 8004bf8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8004c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8004c02:	6803      	ldr	r3, [r0, #0]
 8004c04:	699e      	ldr	r6, [r3, #24]
 8004c06:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004c0a:	699a      	ldr	r2, [r3, #24]
 8004c0c:	0c12      	lsrs	r2, r2, #16
 8004c0e:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004c18:	68df      	ldr	r7, [r3, #12]
 8004c1a:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c1e:	68c1      	ldr	r1, [r0, #12]
 8004c20:	2902      	cmp	r1, #2
 8004c22:	d122      	bne.n	8004c6a <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004c24:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8004c28:	f015 0f06 	tst.w	r5, #6
 8004c2c:	d110      	bne.n	8004c50 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8004c2e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004c30:	3101      	adds	r1, #1
 8004c32:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004c34:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004c36:	2902      	cmp	r1, #2
 8004c38:	d1e2      	bne.n	8004c00 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c3e:	2008      	movs	r0, #8
 8004c40:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8004c42:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004c46:	4631      	mov	r1, r6
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f7ff ffca 	bl	8004be2 <HAL_I2C_AddrCallback>
 8004c4e:	e7d7      	b.n	8004c00 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004c50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c54:	f7ff fee4 	bl	8004a20 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004c58:	2300      	movs	r3, #0
 8004c5a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004c5e:	463a      	mov	r2, r7
 8004c60:	4631      	mov	r1, r6
 8004c62:	4620      	mov	r0, r4
 8004c64:	f7ff ffbd 	bl	8004be2 <HAL_I2C_AddrCallback>
 8004c68:	e7ca      	b.n	8004c00 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004c6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c6e:	f7ff fed7 	bl	8004a20 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004c72:	2300      	movs	r3, #0
 8004c74:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004c78:	462a      	mov	r2, r5
 8004c7a:	4631      	mov	r1, r6
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	f7ff ffb0 	bl	8004be2 <HAL_I2C_AddrCallback>
 8004c82:	e7bd      	b.n	8004c00 <I2C_ITAddrCplt+0x1c>

08004c84 <HAL_I2C_ListenCpltCallback>:
}
 8004c84:	4770      	bx	lr
	...

08004c88 <I2C_ITListenCplt>:
{
 8004c88:	b510      	push	{r4, lr}
 8004c8a:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c8c:	4b17      	ldr	r3, [pc, #92]	; (8004cec <I2C_ITListenCplt+0x64>)
 8004c8e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c90:	2300      	movs	r3, #0
 8004c92:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004c94:	2220      	movs	r2, #32
 8004c96:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c9a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004c9e:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004ca0:	f011 0f04 	tst.w	r1, #4
 8004ca4:	d013      	beq.n	8004cce <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ca6:	6803      	ldr	r3, [r0, #0]
 8004ca8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004caa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004cac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004cae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8004cb4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8004cb6:	b153      	cbz	r3, 8004cce <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8004cbc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cc6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004cc8:	f043 0304 	orr.w	r3, r3, #4
 8004ccc:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004cce:	f248 0103 	movw	r1, #32771	; 0x8003
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	f7ff fea4 	bl	8004a20 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cd8:	6823      	ldr	r3, [r4, #0]
 8004cda:	2210      	movs	r2, #16
 8004cdc:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	f7ff ffcd 	bl	8004c84 <HAL_I2C_ListenCpltCallback>
}
 8004cea:	bd10      	pop	{r4, pc}
 8004cec:	ffff0000 	.word	0xffff0000

08004cf0 <HAL_I2C_ErrorCallback>:
}
 8004cf0:	4770      	bx	lr

08004cf2 <HAL_I2C_AbortCpltCallback>:
}
 8004cf2:	4770      	bx	lr

08004cf4 <I2C_TreatErrorCallback>:
{
 8004cf4:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004cf6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b60      	cmp	r3, #96	; 0x60
 8004cfe:	d006      	beq.n	8004d0e <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d00:	2300      	movs	r3, #0
 8004d02:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d04:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004d08:	f7ff fff2 	bl	8004cf0 <HAL_I2C_ErrorCallback>
}
 8004d0c:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8004d0e:	2320      	movs	r3, #32
 8004d10:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d14:	2300      	movs	r3, #0
 8004d16:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d18:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d1c:	f7ff ffe9 	bl	8004cf2 <HAL_I2C_AbortCpltCallback>
 8004d20:	e7f4      	b.n	8004d0c <I2C_TreatErrorCallback+0x18>
	...

08004d24 <I2C_ITError>:
{
 8004d24:	b510      	push	{r4, lr}
 8004d26:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004d28:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d2c:	2000      	movs	r0, #0
 8004d2e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d32:	4a3b      	ldr	r2, [pc, #236]	; (8004e20 <I2C_ITError+0xfc>)
 8004d34:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004d36:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8004d38:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004d3e:	3b28      	subs	r3, #40	; 0x28
 8004d40:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d819      	bhi.n	8004d7a <I2C_ITError+0x56>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004d46:	2103      	movs	r1, #3
 8004d48:	4620      	mov	r0, r4
 8004d4a:	f7ff fe69 	bl	8004a20 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004d4e:	2328      	movs	r3, #40	; 0x28
 8004d50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004d54:	4b33      	ldr	r3, [pc, #204]	; (8004e24 <I2C_ITError+0x100>)
 8004d56:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8004d58:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004d5a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004d5c:	b11a      	cbz	r2, 8004d66 <I2C_ITError+0x42>
 8004d5e:	2b11      	cmp	r3, #17
 8004d60:	d01b      	beq.n	8004d9a <I2C_ITError+0x76>
 8004d62:	2b21      	cmp	r3, #33	; 0x21
 8004d64:	d019      	beq.n	8004d9a <I2C_ITError+0x76>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004d66:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004d68:	b11a      	cbz	r2, 8004d72 <I2C_ITError+0x4e>
 8004d6a:	2b12      	cmp	r3, #18
 8004d6c:	d036      	beq.n	8004ddc <I2C_ITError+0xb8>
 8004d6e:	2b22      	cmp	r3, #34	; 0x22
 8004d70:	d034      	beq.n	8004ddc <I2C_ITError+0xb8>
    I2C_TreatErrorCallback(hi2c);
 8004d72:	4620      	mov	r0, r4
 8004d74:	f7ff ffbe 	bl	8004cf4 <I2C_TreatErrorCallback>
}
 8004d78:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004d7a:	f248 0103 	movw	r1, #32771	; 0x8003
 8004d7e:	4620      	mov	r0, r4
 8004d80:	f7ff fe4e 	bl	8004a20 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004d84:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b60      	cmp	r3, #96	; 0x60
 8004d8c:	d002      	beq.n	8004d94 <I2C_ITError+0x70>
      hi2c->State         = HAL_I2C_STATE_READY;
 8004d8e:	2320      	movs	r3, #32
 8004d90:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8004d94:	2300      	movs	r3, #0
 8004d96:	6363      	str	r3, [r4, #52]	; 0x34
 8004d98:	e7de      	b.n	8004d58 <I2C_ITError+0x34>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004da2:	d003      	beq.n	8004dac <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004daa:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004dac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004dae:	f7ff fc04 	bl	80045ba <HAL_DMA_GetState>
 8004db2:	2801      	cmp	r0, #1
 8004db4:	d00e      	beq.n	8004dd4 <I2C_ITError+0xb0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004db6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004db8:	4a1b      	ldr	r2, [pc, #108]	; (8004e28 <I2C_ITError+0x104>)
 8004dba:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004dc2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004dc4:	f7ff fb58 	bl	8004478 <HAL_DMA_Abort_IT>
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	d0d5      	beq.n	8004d78 <I2C_ITError+0x54>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004dcc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004dce:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004dd0:	4798      	blx	r3
 8004dd2:	e7d1      	b.n	8004d78 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	f7ff ff8d 	bl	8004cf4 <I2C_TreatErrorCallback>
 8004dda:	e7cd      	b.n	8004d78 <I2C_ITError+0x54>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004ddc:	6823      	ldr	r3, [r4, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004de4:	d003      	beq.n	8004dee <I2C_ITError+0xca>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dec:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004dee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004df0:	f7ff fbe3 	bl	80045ba <HAL_DMA_GetState>
 8004df4:	2801      	cmp	r0, #1
 8004df6:	d00e      	beq.n	8004e16 <I2C_ITError+0xf2>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004df8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004dfa:	4a0b      	ldr	r2, [pc, #44]	; (8004e28 <I2C_ITError+0x104>)
 8004dfc:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8004dfe:	2300      	movs	r3, #0
 8004e00:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e04:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004e06:	f7ff fb37 	bl	8004478 <HAL_DMA_Abort_IT>
 8004e0a:	2800      	cmp	r0, #0
 8004e0c:	d0b4      	beq.n	8004d78 <I2C_ITError+0x54>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e0e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004e10:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004e12:	4798      	blx	r3
 8004e14:	e7b0      	b.n	8004d78 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8004e16:	4620      	mov	r0, r4
 8004e18:	f7ff ff6c 	bl	8004cf4 <I2C_TreatErrorCallback>
 8004e1c:	e7ac      	b.n	8004d78 <I2C_ITError+0x54>
 8004e1e:	bf00      	nop
 8004e20:	ffff0000 	.word	0xffff0000
 8004e24:	08004f95 	.word	0x08004f95
 8004e28:	0800514d 	.word	0x0800514d

08004e2c <I2C_ITSlaveCplt>:
{
 8004e2c:	b570      	push	{r4, r5, r6, lr}
 8004e2e:	4604      	mov	r4, r0
 8004e30:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004e32:	6802      	ldr	r2, [r0, #0]
 8004e34:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e36:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004e3a:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e3c:	2120      	movs	r1, #32
 8004e3e:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e40:	2b21      	cmp	r3, #33	; 0x21
 8004e42:	d00d      	beq.n	8004e60 <I2C_ITSlaveCplt+0x34>
 8004e44:	2b29      	cmp	r3, #41	; 0x29
 8004e46:	d00b      	beq.n	8004e60 <I2C_ITSlaveCplt+0x34>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e48:	2b22      	cmp	r3, #34	; 0x22
 8004e4a:	d001      	beq.n	8004e50 <I2C_ITSlaveCplt+0x24>
 8004e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8004e4e:	d10e      	bne.n	8004e6e <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004e50:	f248 0102 	movw	r1, #32770	; 0x8002
 8004e54:	4620      	mov	r0, r4
 8004e56:	f7ff fde3 	bl	8004a20 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e5a:	2322      	movs	r3, #34	; 0x22
 8004e5c:	6323      	str	r3, [r4, #48]	; 0x30
 8004e5e:	e006      	b.n	8004e6e <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004e60:	f248 0101 	movw	r1, #32769	; 0x8001
 8004e64:	4620      	mov	r0, r4
 8004e66:	f7ff fddb 	bl	8004a20 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e6a:	2321      	movs	r3, #33	; 0x21
 8004e6c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004e6e:	6822      	ldr	r2, [r4, #0]
 8004e70:	6853      	ldr	r3, [r2, #4]
 8004e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e76:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8004e78:	6822      	ldr	r2, [r4, #0]
 8004e7a:	6853      	ldr	r3, [r2, #4]
 8004e7c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004e80:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004e84:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004e88:	f023 0301 	bic.w	r3, r3, #1
 8004e8c:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f7ff fdb5 	bl	80049fe <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004e94:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8004e98:	d040      	beq.n	8004f1c <I2C_ITSlaveCplt+0xf0>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004e9a:	6822      	ldr	r2, [r4, #0]
 8004e9c:	6813      	ldr	r3, [r2, #0]
 8004e9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ea2:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8004ea4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ea6:	b11b      	cbz	r3, 8004eb0 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004eb0:	f015 0f04 	tst.w	r5, #4
 8004eb4:	d011      	beq.n	8004eda <I2C_ITSlaveCplt+0xae>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004eb6:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ec0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8004ec8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004eca:	b133      	cbz	r3, 8004eda <I2C_ITSlaveCplt+0xae>
      hi2c->XferSize--;
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004ed0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8004eda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	b11b      	cbz	r3, 8004ee8 <I2C_ITSlaveCplt+0xbc>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ee0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004ee2:	f043 0304 	orr.w	r3, r3, #4
 8004ee6:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004eee:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ef0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004ef2:	bb1b      	cbnz	r3, 8004f3c <I2C_ITSlaveCplt+0x110>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004ef4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004ef6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004efa:	d12d      	bne.n	8004f58 <I2C_ITSlaveCplt+0x12c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004efc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b22      	cmp	r3, #34	; 0x22
 8004f04:	d038      	beq.n	8004f78 <I2C_ITSlaveCplt+0x14c>
    hi2c->State = HAL_I2C_STATE_READY;
 8004f06:	2320      	movs	r3, #32
 8004f08:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004f10:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f14:	4620      	mov	r0, r4
 8004f16:	f7ff fe21 	bl	8004b5c <HAL_I2C_SlaveTxCpltCallback>
}
 8004f1a:	e02c      	b.n	8004f76 <I2C_ITSlaveCplt+0x14a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004f1c:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8004f20:	d0c6      	beq.n	8004eb0 <I2C_ITSlaveCplt+0x84>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f22:	6822      	ldr	r2, [r4, #0]
 8004f24:	6813      	ldr	r3, [r2, #0]
 8004f26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f2a:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8004f2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0be      	beq.n	8004eb0 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004f3a:	e7b9      	b.n	8004eb0 <I2C_ITSlaveCplt+0x84>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004f3c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f7ff fef0 	bl	8004d24 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004f44:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b28      	cmp	r3, #40	; 0x28
 8004f4c:	d113      	bne.n	8004f76 <I2C_ITSlaveCplt+0x14a>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004f4e:	4629      	mov	r1, r5
 8004f50:	4620      	mov	r0, r4
 8004f52:	f7ff fe99 	bl	8004c88 <I2C_ITListenCplt>
 8004f56:	e00e      	b.n	8004f76 <I2C_ITSlaveCplt+0x14a>
    I2C_ITSlaveSeqCplt(hi2c);
 8004f58:	4620      	mov	r0, r4
 8004f5a:	f7ff fe01 	bl	8004b60 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f5e:	4b0c      	ldr	r3, [pc, #48]	; (8004f90 <I2C_ITSlaveCplt+0x164>)
 8004f60:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004f62:	2320      	movs	r3, #32
 8004f64:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004f6c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004f70:	4620      	mov	r0, r4
 8004f72:	f7ff fe87 	bl	8004c84 <HAL_I2C_ListenCpltCallback>
}
 8004f76:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8004f78:	2320      	movs	r3, #32
 8004f7a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004f82:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f86:	4620      	mov	r0, r4
 8004f88:	f7ff fde9 	bl	8004b5e <HAL_I2C_SlaveRxCpltCallback>
 8004f8c:	e7f3      	b.n	8004f76 <I2C_ITSlaveCplt+0x14a>
 8004f8e:	bf00      	nop
 8004f90:	ffff0000 	.word	0xffff0000

08004f94 <I2C_Slave_ISR_IT>:
{
 8004f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8004f96:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8004f98:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	f000 809e 	beq.w	80050de <I2C_Slave_ISR_IT+0x14a>
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	460d      	mov	r5, r1
 8004fa6:	4616      	mov	r6, r2
 8004fa8:	2301      	movs	r3, #1
 8004faa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004fae:	f011 0f20 	tst.w	r1, #32
 8004fb2:	d002      	beq.n	8004fba <I2C_Slave_ISR_IT+0x26>
 8004fb4:	f012 0f20 	tst.w	r2, #32
 8004fb8:	d119      	bne.n	8004fee <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004fba:	f015 0f10 	tst.w	r5, #16
 8004fbe:	d03e      	beq.n	800503e <I2C_Slave_ISR_IT+0xaa>
 8004fc0:	f016 0f10 	tst.w	r6, #16
 8004fc4:	d03b      	beq.n	800503e <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 8004fc6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	bb43      	cbnz	r3, 800501e <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004fcc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b28      	cmp	r3, #40	; 0x28
 8004fd4:	d00e      	beq.n	8004ff4 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004fd6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b29      	cmp	r3, #41	; 0x29
 8004fde:	d011      	beq.n	8005004 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	2210      	movs	r2, #16
 8004fe4:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8004fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004fee:	f7ff ff1d 	bl	8004e2c <I2C_ITSlaveCplt>
 8004ff2:	e7e2      	b.n	8004fba <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004ff4:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8004ff8:	d1ed      	bne.n	8004fd6 <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004ffa:	4629      	mov	r1, r5
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	f7ff fe43 	bl	8004c88 <I2C_ITListenCplt>
 8005002:	e7f0      	b.n	8004fe6 <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005004:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8005008:	d0ea      	beq.n	8004fe0 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800500a:	6823      	ldr	r3, [r4, #0]
 800500c:	2210      	movs	r2, #16
 800500e:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8005010:	4620      	mov	r0, r4
 8005012:	f7ff fcf4 	bl	80049fe <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8005016:	4620      	mov	r0, r4
 8005018:	f7ff fda2 	bl	8004b60 <I2C_ITSlaveSeqCplt>
 800501c:	e7e3      	b.n	8004fe6 <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	2210      	movs	r2, #16
 8005022:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005024:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005026:	f043 0304 	orr.w	r3, r3, #4
 800502a:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800502c:	b117      	cbz	r7, 8005034 <I2C_Slave_ISR_IT+0xa0>
 800502e:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8005032:	d1d8      	bne.n	8004fe6 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005034:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005036:	4620      	mov	r0, r4
 8005038:	f7ff fe74 	bl	8004d24 <I2C_ITError>
 800503c:	e7d3      	b.n	8004fe6 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800503e:	f015 0f04 	tst.w	r5, #4
 8005042:	d01f      	beq.n	8005084 <I2C_Slave_ISR_IT+0xf0>
 8005044:	f016 0f04 	tst.w	r6, #4
 8005048:	d01c      	beq.n	8005084 <I2C_Slave_ISR_IT+0xf0>
    if (hi2c->XferCount > 0U)
 800504a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800504c:	b29b      	uxth	r3, r3
 800504e:	b173      	cbz	r3, 800506e <I2C_Slave_ISR_IT+0xda>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005054:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005056:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005058:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800505a:	3301      	adds	r3, #1
 800505c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800505e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005060:	3b01      	subs	r3, #1
 8005062:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005064:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005066:	b29b      	uxth	r3, r3
 8005068:	3b01      	subs	r3, #1
 800506a:	b29b      	uxth	r3, r3
 800506c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800506e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005070:	b29b      	uxth	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1b7      	bne.n	8004fe6 <I2C_Slave_ISR_IT+0x52>
 8005076:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 800507a:	d0b4      	beq.n	8004fe6 <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 800507c:	4620      	mov	r0, r4
 800507e:	f7ff fd6f 	bl	8004b60 <I2C_ITSlaveSeqCplt>
 8005082:	e7b0      	b.n	8004fe6 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005084:	f015 0f08 	tst.w	r5, #8
 8005088:	d002      	beq.n	8005090 <I2C_Slave_ISR_IT+0xfc>
 800508a:	f016 0f08 	tst.w	r6, #8
 800508e:	d118      	bne.n	80050c2 <I2C_Slave_ISR_IT+0x12e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005090:	f015 0f02 	tst.w	r5, #2
 8005094:	d0a7      	beq.n	8004fe6 <I2C_Slave_ISR_IT+0x52>
 8005096:	f016 0f02 	tst.w	r6, #2
 800509a:	d0a4      	beq.n	8004fe6 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 800509c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800509e:	b29b      	uxth	r3, r3
 80050a0:	b1a3      	cbz	r3, 80050cc <I2C_Slave_ISR_IT+0x138>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	7812      	ldrb	r2, [r2, #0]
 80050a8:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80050aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050ac:	3301      	adds	r3, #1
 80050ae:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80050b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	3b01      	subs	r3, #1
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80050ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80050bc:	3b01      	subs	r3, #1
 80050be:	8523      	strh	r3, [r4, #40]	; 0x28
 80050c0:	e791      	b.n	8004fe6 <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80050c2:	4629      	mov	r1, r5
 80050c4:	4620      	mov	r0, r4
 80050c6:	f7ff fd8d 	bl	8004be4 <I2C_ITAddrCplt>
 80050ca:	e78c      	b.n	8004fe6 <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80050cc:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 80050d0:	d001      	beq.n	80050d6 <I2C_Slave_ISR_IT+0x142>
 80050d2:	2f00      	cmp	r7, #0
 80050d4:	d187      	bne.n	8004fe6 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 80050d6:	4620      	mov	r0, r4
 80050d8:	f7ff fd42 	bl	8004b60 <I2C_ITSlaveSeqCplt>
 80050dc:	e783      	b.n	8004fe6 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 80050de:	2002      	movs	r0, #2
 80050e0:	e784      	b.n	8004fec <I2C_Slave_ISR_IT+0x58>

080050e2 <HAL_I2C_ER_IRQHandler>:
{
 80050e2:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80050e4:	6802      	ldr	r2, [r0, #0]
 80050e6:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80050e8:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80050ea:	f413 7f80 	tst.w	r3, #256	; 0x100
 80050ee:	d009      	beq.n	8005104 <HAL_I2C_ER_IRQHandler+0x22>
 80050f0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80050f4:	d006      	beq.n	8005104 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80050f6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80050f8:	f044 0401 	orr.w	r4, r4, #1
 80050fc:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80050fe:	f44f 7480 	mov.w	r4, #256	; 0x100
 8005102:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005104:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005108:	d00a      	beq.n	8005120 <HAL_I2C_ER_IRQHandler+0x3e>
 800510a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800510e:	d007      	beq.n	8005120 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005110:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005112:	f042 0208 	orr.w	r2, r2, #8
 8005116:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005118:	6802      	ldr	r2, [r0, #0]
 800511a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800511e:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005120:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005124:	d00a      	beq.n	800513c <HAL_I2C_ER_IRQHandler+0x5a>
 8005126:	f011 0f80 	tst.w	r1, #128	; 0x80
 800512a:	d007      	beq.n	800513c <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800512c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800512e:	f043 0302 	orr.w	r3, r3, #2
 8005132:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005134:	6803      	ldr	r3, [r0, #0]
 8005136:	f44f 7200 	mov.w	r2, #512	; 0x200
 800513a:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 800513c:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800513e:	f011 0f0b 	tst.w	r1, #11
 8005142:	d100      	bne.n	8005146 <HAL_I2C_ER_IRQHandler+0x64>
}
 8005144:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 8005146:	f7ff fded 	bl	8004d24 <I2C_ITError>
}
 800514a:	e7fb      	b.n	8005144 <HAL_I2C_ER_IRQHandler+0x62>

0800514c <I2C_DMAAbort>:
{
 800514c:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800514e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->hdmatx != NULL)
 8005150:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005152:	b10b      	cbz	r3, 8005158 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005154:	2200      	movs	r2, #0
 8005156:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 8005158:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800515a:	b10b      	cbz	r3, 8005160 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800515c:	2200      	movs	r2, #0
 800515e:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 8005160:	f7ff fdc8 	bl	8004cf4 <I2C_TreatErrorCallback>
}
 8005164:	bd08      	pop	{r3, pc}

08005166 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005166:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b20      	cmp	r3, #32
 800516e:	d124      	bne.n	80051ba <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005170:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005174:	2b01      	cmp	r3, #1
 8005176:	d022      	beq.n	80051be <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8005178:	2301      	movs	r3, #1
 800517a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800517e:	2324      	movs	r3, #36	; 0x24
 8005180:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005184:	6802      	ldr	r2, [r0, #0]
 8005186:	6813      	ldr	r3, [r2, #0]
 8005188:	f023 0301 	bic.w	r3, r3, #1
 800518c:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800518e:	6802      	ldr	r2, [r0, #0]
 8005190:	6813      	ldr	r3, [r2, #0]
 8005192:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005196:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005198:	6802      	ldr	r2, [r0, #0]
 800519a:	6813      	ldr	r3, [r2, #0]
 800519c:	4319      	orrs	r1, r3
 800519e:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051a0:	6802      	ldr	r2, [r0, #0]
 80051a2:	6813      	ldr	r3, [r2, #0]
 80051a4:	f043 0301 	orr.w	r3, r3, #1
 80051a8:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051aa:	2320      	movs	r3, #32
 80051ac:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051b0:	2300      	movs	r3, #0
 80051b2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80051b6:	4618      	mov	r0, r3
 80051b8:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80051ba:	2002      	movs	r0, #2
 80051bc:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80051be:	2002      	movs	r0, #2
  }
}
 80051c0:	4770      	bx	lr

080051c2 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051c2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b20      	cmp	r3, #32
 80051ca:	d122      	bne.n	8005212 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051cc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d020      	beq.n	8005216 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80051d4:	2301      	movs	r3, #1
 80051d6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051da:	2324      	movs	r3, #36	; 0x24
 80051dc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051e0:	6802      	ldr	r2, [r0, #0]
 80051e2:	6813      	ldr	r3, [r2, #0]
 80051e4:	f023 0301 	bic.w	r3, r3, #1
 80051e8:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80051ea:	6802      	ldr	r2, [r0, #0]
 80051ec:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80051ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80051f2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80051f6:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051f8:	6802      	ldr	r2, [r0, #0]
 80051fa:	6813      	ldr	r3, [r2, #0]
 80051fc:	f043 0301 	orr.w	r3, r3, #1
 8005200:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005202:	2320      	movs	r3, #32
 8005204:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005208:	2300      	movs	r3, #0
 800520a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800520e:	4618      	mov	r0, r3
 8005210:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005212:	2002      	movs	r0, #2
 8005214:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005216:	2002      	movs	r0, #2
  }
}
 8005218:	4770      	bx	lr

0800521a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800521a:	b538      	push	{r3, r4, r5, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800521c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005220:	d043      	beq.n	80052aa <HAL_PCD_EP_DB_Receive+0x90>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005222:	6804      	ldr	r4, [r0, #0]
 8005224:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8005228:	f891 c000 	ldrb.w	ip, [r1]
 800522c:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 8005230:	fa1e f383 	uxtah	r3, lr, r3
 8005234:	4423      	add	r3, r4
 8005236:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 800523a:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 800523e:	698b      	ldr	r3, [r1, #24]
 8005240:	42a3      	cmp	r3, r4
 8005242:	d328      	bcc.n	8005296 <HAL_PCD_EP_DB_Receive+0x7c>
    {
      ep->xfer_len -= count;
 8005244:	1b1b      	subs	r3, r3, r4
 8005246:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 8005248:	698b      	ldr	r3, [r1, #24]
 800524a:	b97b      	cbnz	r3, 800526c <HAL_PCD_EP_DB_Receive+0x52>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800524c:	6805      	ldr	r5, [r0, #0]
 800524e:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8005252:	b29b      	uxth	r3, r3
 8005254:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005268:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800526c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005270:	d00e      	beq.n	8005290 <HAL_PCD_EP_DB_Receive+0x76>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005272:	6802      	ldr	r2, [r0, #0]
 8005274:	780d      	ldrb	r5, [r1, #0]
 8005276:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 800527a:	b29b      	uxth	r3, r3
 800527c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005288:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800528c:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 8005290:	b924      	cbnz	r4, 800529c <HAL_PCD_EP_DB_Receive+0x82>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 8005292:	4620      	mov	r0, r4
 8005294:	bd38      	pop	{r3, r4, r5, pc}
      ep->xfer_len = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	618b      	str	r3, [r1, #24]
 800529a:	e7d5      	b.n	8005248 <HAL_PCD_EP_DB_Receive+0x2e>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800529c:	4623      	mov	r3, r4
 800529e:	890a      	ldrh	r2, [r1, #8]
 80052a0:	6949      	ldr	r1, [r1, #20]
 80052a2:	6800      	ldr	r0, [r0, #0]
 80052a4:	f004 fa1d 	bl	80096e2 <USB_ReadPMA>
 80052a8:	e7f3      	b.n	8005292 <HAL_PCD_EP_DB_Receive+0x78>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80052aa:	6804      	ldr	r4, [r0, #0]
 80052ac:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80052b0:	f891 c000 	ldrb.w	ip, [r1]
 80052b4:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 80052b8:	fa1e f383 	uxtah	r3, lr, r3
 80052bc:	4423      	add	r3, r4
 80052be:	f8b3 4406 	ldrh.w	r4, [r3, #1030]	; 0x406
 80052c2:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 80052c6:	698b      	ldr	r3, [r1, #24]
 80052c8:	42a3      	cmp	r3, r4
 80052ca:	d32f      	bcc.n	800532c <HAL_PCD_EP_DB_Receive+0x112>
      ep->xfer_len -= count;
 80052cc:	1b1b      	subs	r3, r3, r4
 80052ce:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 80052d0:	698b      	ldr	r3, [r1, #24]
 80052d2:	b97b      	cbnz	r3, 80052f4 <HAL_PCD_EP_DB_Receive+0xda>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80052d4:	6805      	ldr	r5, [r0, #0]
 80052d6:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80052e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f0:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80052f4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80052f8:	d10f      	bne.n	800531a <HAL_PCD_EP_DB_Receive+0x100>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80052fa:	6802      	ldr	r2, [r0, #0]
 80052fc:	f891 c000 	ldrb.w	ip, [r1]
 8005300:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 8005304:	b29b      	uxth	r3, r3
 8005306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800530a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005312:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005316:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
    if (count != 0U)
 800531a:	2c00      	cmp	r4, #0
 800531c:	d0b9      	beq.n	8005292 <HAL_PCD_EP_DB_Receive+0x78>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800531e:	4623      	mov	r3, r4
 8005320:	894a      	ldrh	r2, [r1, #10]
 8005322:	6949      	ldr	r1, [r1, #20]
 8005324:	6800      	ldr	r0, [r0, #0]
 8005326:	f004 f9dc 	bl	80096e2 <USB_ReadPMA>
 800532a:	e7b2      	b.n	8005292 <HAL_PCD_EP_DB_Receive+0x78>
      ep->xfer_len = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	618b      	str	r3, [r1, #24]
 8005330:	e7ce      	b.n	80052d0 <HAL_PCD_EP_DB_Receive+0xb6>

08005332 <HAL_PCD_Init>:
  if (hpcd == NULL)
 8005332:	2800      	cmp	r0, #0
 8005334:	d06d      	beq.n	8005412 <HAL_PCD_Init+0xe0>
{
 8005336:	b530      	push	{r4, r5, lr}
 8005338:	b087      	sub	sp, #28
 800533a:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800533c:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8005340:	b13b      	cbz	r3, 8005352 <HAL_PCD_Init+0x20>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8005342:	2303      	movs	r3, #3
 8005344:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8005348:	6820      	ldr	r0, [r4, #0]
 800534a:	f003 faa8 	bl	800889e <USB_DisableGlobalInt>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800534e:	2300      	movs	r3, #0
 8005350:	e01f      	b.n	8005392 <HAL_PCD_Init+0x60>
    hpcd->Lock = HAL_UNLOCKED;
 8005352:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8005356:	f005 fc35 	bl	800abc4 <HAL_PCD_MspInit>
 800535a:	e7f2      	b.n	8005342 <HAL_PCD_Init+0x10>
    hpcd->IN_ep[i].is_in = 1U;
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005362:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8005366:	2001      	movs	r0, #1
 8005368:	7048      	strb	r0, [r1, #1]
    hpcd->IN_ep[i].num = i;
 800536a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800536e:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005372:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005376:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800537a:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800537c:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 8005380:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8005384:	2000      	movs	r0, #0
 8005386:	f88c 0003 	strb.w	r0, [ip, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 800538a:	6388      	str	r0, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 800538c:	63c8      	str	r0, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 800538e:	6408      	str	r0, [r1, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005390:	b2d3      	uxtb	r3, r2
 8005392:	6860      	ldr	r0, [r4, #4]
 8005394:	4283      	cmp	r3, r0
 8005396:	d3e1      	bcc.n	800535c <HAL_PCD_Init+0x2a>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005398:	2300      	movs	r3, #0
 800539a:	e016      	b.n	80053ca <HAL_PCD_Init+0x98>
    hpcd->OUT_ep[i].is_in = 0U;
 800539c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80053a0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80053a4:	2100      	movs	r1, #0
 80053a6:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 80053aa:	f882 3168 	strb.w	r3, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80053ae:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 80053b2:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80053b6:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80053ba:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80053be:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80053c2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053c6:	3301      	adds	r3, #1
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	4298      	cmp	r0, r3
 80053cc:	d8e6      	bhi.n	800539c <HAL_PCD_Init+0x6a>
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80053ce:	46a4      	mov	ip, r4
 80053d0:	f85c 5b10 	ldr.w	r5, [ip], #16
 80053d4:	46ee      	mov	lr, sp
 80053d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80053da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80053de:	f8dc 3000 	ldr.w	r3, [ip]
 80053e2:	f8ce 3000 	str.w	r3, [lr]
 80053e6:	1d23      	adds	r3, r4, #4
 80053e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053ea:	4628      	mov	r0, r5
 80053ec:	f003 fa61 	bl	80088b2 <USB_DevInit>
  hpcd->USB_Address = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80053f6:	2301      	movs	r3, #1
 80053f8:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  if (hpcd->Init.lpm_enable == 1U)
 80053fc:	69e3      	ldr	r3, [r4, #28]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d002      	beq.n	8005408 <HAL_PCD_Init+0xd6>
  return HAL_OK;
 8005402:	2000      	movs	r0, #0
}
 8005404:	b007      	add	sp, #28
 8005406:	bd30      	pop	{r4, r5, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005408:	4620      	mov	r0, r4
 800540a:	f000 fee8 	bl	80061de <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 800540e:	2000      	movs	r0, #0
 8005410:	e7f8      	b.n	8005404 <HAL_PCD_Init+0xd2>
    return HAL_ERROR;
 8005412:	2001      	movs	r0, #1
}
 8005414:	4770      	bx	lr

08005416 <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 8005416:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 800541a:	2b01      	cmp	r3, #1
 800541c:	d00e      	beq.n	800543c <HAL_PCD_Start+0x26>
{
 800541e:	b510      	push	{r4, lr}
 8005420:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8005422:	2301      	movs	r3, #1
 8005424:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005428:	6800      	ldr	r0, [r0, #0]
 800542a:	f003 fa2f 	bl	800888c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800542e:	6820      	ldr	r0, [r4, #0]
 8005430:	f003 fd84 	bl	8008f3c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005434:	2000      	movs	r0, #0
 8005436:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800543a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800543c:	2002      	movs	r0, #2
}
 800543e:	4770      	bx	lr

08005440 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005440:	b570      	push	{r4, r5, r6, lr}
 8005442:	4605      	mov	r5, r0
 8005444:	460c      	mov	r4, r1
 8005446:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005448:	f012 0f40 	tst.w	r2, #64	; 0x40
 800544c:	f000 8109 	beq.w	8005662 <HAL_PCD_EP_DB_Transmit+0x222>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005450:	6802      	ldr	r2, [r0, #0]
 8005452:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005456:	7809      	ldrb	r1, [r1, #0]
 8005458:	00c8      	lsls	r0, r1, #3
 800545a:	fa10 f383 	uxtah	r3, r0, r3
 800545e:	4413      	add	r3, r2
 8005460:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8005464:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxPctSize)
 8005468:	69a3      	ldr	r3, [r4, #24]
 800546a:	4293      	cmp	r3, r2
 800546c:	d951      	bls.n	8005512 <HAL_PCD_EP_DB_Transmit+0xd2>
    {
      ep->xfer_len -= TxPctSize;
 800546e:	1a9b      	subs	r3, r3, r2
 8005470:	61a3      	str	r3, [r4, #24]
    {
      ep->xfer_len = 0U;
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005472:	69a3      	ldr	r3, [r4, #24]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d168      	bne.n	800554a <HAL_PCD_EP_DB_Transmit+0x10a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005478:	7863      	ldrb	r3, [r4, #1]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d14c      	bne.n	8005518 <HAL_PCD_EP_DB_Transmit+0xd8>
 800547e:	682a      	ldr	r2, [r5, #0]
 8005480:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005484:	fa12 f383 	uxtah	r3, r2, r3
 8005488:	4403      	add	r3, r0
 800548a:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800548e:	b292      	uxth	r2, r2
 8005490:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005494:	b292      	uxth	r2, r2
 8005496:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800549a:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800549e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80054a2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80054a6:	b292      	uxth	r2, r2
 80054a8:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054ac:	6829      	ldr	r1, [r5, #0]
 80054ae:	7862      	ldrb	r2, [r4, #1]
 80054b0:	2a00      	cmp	r2, #0
 80054b2:	d13d      	bne.n	8005530 <HAL_PCD_EP_DB_Transmit+0xf0>
 80054b4:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80054b8:	fa11 f383 	uxtah	r3, r1, r3
 80054bc:	7822      	ldrb	r2, [r4, #0]
 80054be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054c2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80054c6:	b292      	uxth	r2, r2
 80054c8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80054cc:	b292      	uxth	r2, r2
 80054ce:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80054d2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80054d6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80054da:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80054de:	b292      	uxth	r2, r2
 80054e0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80054e4:	7821      	ldrb	r1, [r4, #0]
 80054e6:	4628      	mov	r0, r5
 80054e8:	f005 fbb0 	bl	800ac4c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80054ec:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80054f0:	d040      	beq.n	8005574 <HAL_PCD_EP_DB_Transmit+0x134>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80054f2:	682a      	ldr	r2, [r5, #0]
 80054f4:	7821      	ldrb	r1, [r4, #0]
 80054f6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005504:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8005510:	e030      	b.n	8005574 <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	61a3      	str	r3, [r4, #24]
 8005516:	e7ac      	b.n	8005472 <HAL_PCD_EP_DB_Transmit+0x32>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005518:	2b01      	cmp	r3, #1
 800551a:	d1c7      	bne.n	80054ac <HAL_PCD_EP_DB_Transmit+0x6c>
 800551c:	682a      	ldr	r2, [r5, #0]
 800551e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005522:	fa12 f383 	uxtah	r3, r2, r3
 8005526:	4403      	add	r3, r0
 8005528:	2200      	movs	r2, #0
 800552a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800552e:	e7bd      	b.n	80054ac <HAL_PCD_EP_DB_Transmit+0x6c>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005530:	2a01      	cmp	r2, #1
 8005532:	d1d7      	bne.n	80054e4 <HAL_PCD_EP_DB_Transmit+0xa4>
 8005534:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8005538:	fa11 f383 	uxtah	r3, r1, r3
 800553c:	7821      	ldrb	r1, [r4, #0]
 800553e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005542:	2200      	movs	r2, #0
 8005544:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005548:	e7cc      	b.n	80054e4 <HAL_PCD_EP_DB_Transmit+0xa4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800554a:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800554e:	d00d      	beq.n	800556c <HAL_PCD_EP_DB_Transmit+0x12c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005550:	6828      	ldr	r0, [r5, #0]
 8005552:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8005556:	b29b      	uxth	r3, r3
 8005558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800555c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005560:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005568:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800556c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005570:	2b01      	cmp	r3, #1
 8005572:	d012      	beq.n	800559a <HAL_PCD_EP_DB_Transmit+0x15a>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005574:	682a      	ldr	r2, [r5, #0]
 8005576:	7821      	ldrb	r1, [r4, #0]
 8005578:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800557c:	b29b      	uxth	r3, r3
 800557e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005586:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800558a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800558e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005592:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 8005596:	2000      	movs	r0, #0
 8005598:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_buff += TxPctSize;
 800559a:	6963      	ldr	r3, [r4, #20]
 800559c:	4413      	add	r3, r2
 800559e:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 80055a0:	69e3      	ldr	r3, [r4, #28]
 80055a2:	4413      	add	r3, r2
 80055a4:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 80055a6:	6a21      	ldr	r1, [r4, #32]
 80055a8:	6923      	ldr	r3, [r4, #16]
 80055aa:	4299      	cmp	r1, r3
 80055ac:	d31b      	bcc.n	80055e6 <HAL_PCD_EP_DB_Transmit+0x1a6>
          ep->xfer_len_db -= len;
 80055ae:	1ac9      	subs	r1, r1, r3
 80055b0:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80055b2:	7862      	ldrb	r2, [r4, #1]
 80055b4:	2a00      	cmp	r2, #0
 80055b6:	d13f      	bne.n	8005638 <HAL_PCD_EP_DB_Transmit+0x1f8>
 80055b8:	6829      	ldr	r1, [r5, #0]
 80055ba:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 80055be:	fa11 f282 	uxtah	r2, r1, r2
 80055c2:	7821      	ldrb	r1, [r4, #0]
 80055c4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80055c8:	2b3e      	cmp	r3, #62	; 0x3e
 80055ca:	d918      	bls.n	80055fe <HAL_PCD_EP_DB_Transmit+0x1be>
 80055cc:	0959      	lsrs	r1, r3, #5
 80055ce:	f013 0f1f 	tst.w	r3, #31
 80055d2:	d100      	bne.n	80055d6 <HAL_PCD_EP_DB_Transmit+0x196>
 80055d4:	3901      	subs	r1, #1
 80055d6:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80055da:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80055de:	b289      	uxth	r1, r1
 80055e0:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80055e4:	e02a      	b.n	800563c <HAL_PCD_EP_DB_Transmit+0x1fc>
        else if (ep->xfer_len_db == 0U)
 80055e6:	b921      	cbnz	r1, 80055f2 <HAL_PCD_EP_DB_Transmit+0x1b2>
          ep->xfer_fill_db = 0U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 80055ee:	4613      	mov	r3, r2
 80055f0:	e7df      	b.n	80055b2 <HAL_PCD_EP_DB_Transmit+0x172>
          ep->xfer_fill_db = 0U;
 80055f2:	2300      	movs	r3, #0
 80055f4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 80055f8:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 80055fa:	460b      	mov	r3, r1
 80055fc:	e7d9      	b.n	80055b2 <HAL_PCD_EP_DB_Transmit+0x172>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80055fe:	b98b      	cbnz	r3, 8005624 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8005600:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8005604:	b289      	uxth	r1, r1
 8005606:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800560a:	b289      	uxth	r1, r1
 800560c:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8005610:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8005614:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005618:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800561c:	b289      	uxth	r1, r1
 800561e:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8005622:	e00b      	b.n	800563c <HAL_PCD_EP_DB_Transmit+0x1fc>
 8005624:	0859      	lsrs	r1, r3, #1
 8005626:	f013 0f01 	tst.w	r3, #1
 800562a:	d000      	beq.n	800562e <HAL_PCD_EP_DB_Transmit+0x1ee>
 800562c:	3101      	adds	r1, #1
 800562e:	0289      	lsls	r1, r1, #10
 8005630:	b289      	uxth	r1, r1
 8005632:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8005636:	e001      	b.n	800563c <HAL_PCD_EP_DB_Transmit+0x1fc>
 8005638:	2a01      	cmp	r2, #1
 800563a:	d006      	beq.n	800564a <HAL_PCD_EP_DB_Transmit+0x20a>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800563c:	b29b      	uxth	r3, r3
 800563e:	8922      	ldrh	r2, [r4, #8]
 8005640:	6961      	ldr	r1, [r4, #20]
 8005642:	6828      	ldr	r0, [r5, #0]
 8005644:	f003 fc89 	bl	8008f5a <USB_WritePMA>
 8005648:	e794      	b.n	8005574 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800564a:	6829      	ldr	r1, [r5, #0]
 800564c:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8005650:	fa11 f282 	uxtah	r2, r1, r2
 8005654:	7821      	ldrb	r1, [r4, #0]
 8005656:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800565a:	b299      	uxth	r1, r3
 800565c:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8005660:	e7ec      	b.n	800563c <HAL_PCD_EP_DB_Transmit+0x1fc>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005662:	6802      	ldr	r2, [r0, #0]
 8005664:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005668:	7809      	ldrb	r1, [r1, #0]
 800566a:	00c8      	lsls	r0, r1, #3
 800566c:	fa10 f383 	uxtah	r3, r0, r3
 8005670:	4413      	add	r3, r2
 8005672:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8005676:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxPctSize)
 800567a:	69a3      	ldr	r3, [r4, #24]
 800567c:	4293      	cmp	r3, r2
 800567e:	d352      	bcc.n	8005726 <HAL_PCD_EP_DB_Transmit+0x2e6>
      ep->xfer_len -= TxPctSize;
 8005680:	1a9b      	subs	r3, r3, r2
 8005682:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8005684:	69a3      	ldr	r3, [r4, #24]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d169      	bne.n	800575e <HAL_PCD_EP_DB_Transmit+0x31e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800568a:	7863      	ldrb	r3, [r4, #1]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d14d      	bne.n	800572c <HAL_PCD_EP_DB_Transmit+0x2ec>
 8005690:	682a      	ldr	r2, [r5, #0]
 8005692:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005696:	fa12 f383 	uxtah	r3, r2, r3
 800569a:	4418      	add	r0, r3
 800569c:	f8b0 3402 	ldrh.w	r3, [r0, #1026]	; 0x402
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
 80056ac:	f8b0 3402 	ldrh.w	r3, [r0, #1026]	; 0x402
 80056b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056be:	6829      	ldr	r1, [r5, #0]
 80056c0:	7862      	ldrb	r2, [r4, #1]
 80056c2:	2a00      	cmp	r2, #0
 80056c4:	d13e      	bne.n	8005744 <HAL_PCD_EP_DB_Transmit+0x304>
 80056c6:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80056ca:	fa11 f383 	uxtah	r3, r1, r3
 80056ce:	7822      	ldrb	r2, [r4, #0]
 80056d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056d4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80056d8:	b292      	uxth	r2, r2
 80056da:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80056de:	b292      	uxth	r2, r2
 80056e0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80056e4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80056e8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80056ec:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80056f0:	b292      	uxth	r2, r2
 80056f2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056f6:	7821      	ldrb	r1, [r4, #0]
 80056f8:	4628      	mov	r0, r5
 80056fa:	f005 faa7 	bl	800ac4c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80056fe:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8005702:	f47f af37 	bne.w	8005574 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005706:	682a      	ldr	r2, [r5, #0]
 8005708:	7821      	ldrb	r1, [r4, #0]
 800570a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800570e:	b29b      	uxth	r3, r3
 8005710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005718:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800571c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005720:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8005724:	e726      	b.n	8005574 <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	61a3      	str	r3, [r4, #24]
 800572a:	e7ab      	b.n	8005684 <HAL_PCD_EP_DB_Transmit+0x244>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800572c:	2b01      	cmp	r3, #1
 800572e:	d1c6      	bne.n	80056be <HAL_PCD_EP_DB_Transmit+0x27e>
 8005730:	682a      	ldr	r2, [r5, #0]
 8005732:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005736:	fa12 f383 	uxtah	r3, r2, r3
 800573a:	4418      	add	r0, r3
 800573c:	2300      	movs	r3, #0
 800573e:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
 8005742:	e7bc      	b.n	80056be <HAL_PCD_EP_DB_Transmit+0x27e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005744:	2a01      	cmp	r2, #1
 8005746:	d1d6      	bne.n	80056f6 <HAL_PCD_EP_DB_Transmit+0x2b6>
 8005748:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 800574c:	fa11 f383 	uxtah	r3, r1, r3
 8005750:	7821      	ldrb	r1, [r4, #0]
 8005752:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005756:	2200      	movs	r2, #0
 8005758:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800575c:	e7cb      	b.n	80056f6 <HAL_PCD_EP_DB_Transmit+0x2b6>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800575e:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8005762:	d10d      	bne.n	8005780 <HAL_PCD_EP_DB_Transmit+0x340>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005764:	6828      	ldr	r0, [r5, #0]
 8005766:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800576a:	b29b      	uxth	r3, r3
 800576c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005774:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800577c:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8005780:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005784:	2b01      	cmp	r3, #1
 8005786:	f47f aef5 	bne.w	8005574 <HAL_PCD_EP_DB_Transmit+0x134>
        ep->xfer_buff += TxPctSize;
 800578a:	6963      	ldr	r3, [r4, #20]
 800578c:	4413      	add	r3, r2
 800578e:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8005790:	69e3      	ldr	r3, [r4, #28]
 8005792:	4413      	add	r3, r2
 8005794:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8005796:	6a21      	ldr	r1, [r4, #32]
 8005798:	6923      	ldr	r3, [r4, #16]
 800579a:	4299      	cmp	r1, r3
 800579c:	d31b      	bcc.n	80057d6 <HAL_PCD_EP_DB_Transmit+0x396>
          ep->xfer_len_db -= len;
 800579e:	1ac9      	subs	r1, r1, r3
 80057a0:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80057a2:	6829      	ldr	r1, [r5, #0]
 80057a4:	7862      	ldrb	r2, [r4, #1]
 80057a6:	2a00      	cmp	r2, #0
 80057a8:	d13e      	bne.n	8005828 <HAL_PCD_EP_DB_Transmit+0x3e8>
 80057aa:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 80057ae:	fa11 f282 	uxtah	r2, r1, r2
 80057b2:	7821      	ldrb	r1, [r4, #0]
 80057b4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80057b8:	2b3e      	cmp	r3, #62	; 0x3e
 80057ba:	d918      	bls.n	80057ee <HAL_PCD_EP_DB_Transmit+0x3ae>
 80057bc:	0959      	lsrs	r1, r3, #5
 80057be:	f013 0f1f 	tst.w	r3, #31
 80057c2:	d100      	bne.n	80057c6 <HAL_PCD_EP_DB_Transmit+0x386>
 80057c4:	3901      	subs	r1, #1
 80057c6:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80057ca:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80057ce:	b289      	uxth	r1, r1
 80057d0:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 80057d4:	e02a      	b.n	800582c <HAL_PCD_EP_DB_Transmit+0x3ec>
        else if (ep->xfer_len_db == 0U)
 80057d6:	b921      	cbnz	r1, 80057e2 <HAL_PCD_EP_DB_Transmit+0x3a2>
          ep->xfer_fill_db = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 80057de:	4613      	mov	r3, r2
 80057e0:	e7df      	b.n	80057a2 <HAL_PCD_EP_DB_Transmit+0x362>
          ep->xfer_len_db = 0U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 80057e6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 80057ea:	460b      	mov	r3, r1
 80057ec:	e7d9      	b.n	80057a2 <HAL_PCD_EP_DB_Transmit+0x362>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80057ee:	b98b      	cbnz	r3, 8005814 <HAL_PCD_EP_DB_Transmit+0x3d4>
 80057f0:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 80057f4:	b289      	uxth	r1, r1
 80057f6:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80057fa:	b289      	uxth	r1, r1
 80057fc:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8005800:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8005804:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005808:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800580c:	b289      	uxth	r1, r1
 800580e:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8005812:	e00b      	b.n	800582c <HAL_PCD_EP_DB_Transmit+0x3ec>
 8005814:	0859      	lsrs	r1, r3, #1
 8005816:	f013 0f01 	tst.w	r3, #1
 800581a:	d000      	beq.n	800581e <HAL_PCD_EP_DB_Transmit+0x3de>
 800581c:	3101      	adds	r1, #1
 800581e:	0289      	lsls	r1, r1, #10
 8005820:	b289      	uxth	r1, r1
 8005822:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8005826:	e001      	b.n	800582c <HAL_PCD_EP_DB_Transmit+0x3ec>
 8005828:	2a01      	cmp	r2, #1
 800582a:	d006      	beq.n	800583a <HAL_PCD_EP_DB_Transmit+0x3fa>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800582c:	b29b      	uxth	r3, r3
 800582e:	8962      	ldrh	r2, [r4, #10]
 8005830:	6961      	ldr	r1, [r4, #20]
 8005832:	6828      	ldr	r0, [r5, #0]
 8005834:	f003 fb91 	bl	8008f5a <USB_WritePMA>
 8005838:	e69c      	b.n	8005574 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800583a:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 800583e:	fa11 f282 	uxtah	r2, r1, r2
 8005842:	7821      	ldrb	r1, [r4, #0]
 8005844:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005848:	b299      	uxth	r1, r3
 800584a:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 800584e:	e7ed      	b.n	800582c <HAL_PCD_EP_DB_Transmit+0x3ec>

08005850 <PCD_EP_ISR_Handler>:
{
 8005850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005854:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005856:	e0ca      	b.n	80059ee <PCD_EP_ISR_Handler+0x19e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005858:	8803      	ldrh	r3, [r0, #0]
 800585a:	b29b      	uxth	r3, r3
 800585c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800586c:	b29b      	uxth	r3, r3
 800586e:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005870:	6829      	ldr	r1, [r5, #0]
 8005872:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8005876:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 800587a:	00d2      	lsls	r2, r2, #3
 800587c:	fa12 f383 	uxtah	r3, r2, r3
 8005880:	440b      	add	r3, r1
 8005882:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8005886:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800588a:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800588c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800588e:	4413      	add	r3, r2
 8005890:	63eb      	str	r3, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005892:	2100      	movs	r1, #0
 8005894:	4628      	mov	r0, r5
 8005896:	f005 f9d9 	bl	800ac4c <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800589a:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 80a5 	beq.w	80059ee <PCD_EP_ISR_Handler+0x19e>
 80058a4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f040 80a1 	bne.w	80059ee <PCD_EP_ISR_Handler+0x19e>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80058ac:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80058b0:	682a      	ldr	r2, [r5, #0]
 80058b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058b6:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 80058c0:	e095      	b.n	80059ee <PCD_EP_ISR_Handler+0x19e>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80058c2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80058c6:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 80058ca:	00d2      	lsls	r2, r2, #3
 80058cc:	fa12 f383 	uxtah	r3, r2, r3
 80058d0:	4403      	add	r3, r0
 80058d2:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80058d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058da:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80058de:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 80058e2:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 80058e6:	f003 fefc 	bl	80096e2 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80058ea:	682a      	ldr	r2, [r5, #0]
 80058ec:	8813      	ldrh	r3, [r2, #0]
 80058ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f2:	051b      	lsls	r3, r3, #20
 80058f4:	0d1b      	lsrs	r3, r3, #20
 80058f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058fa:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80058fc:	4628      	mov	r0, r5
 80058fe:	f005 f991 	bl	800ac24 <HAL_PCD_SetupStageCallback>
 8005902:	e074      	b.n	80059ee <PCD_EP_ISR_Handler+0x19e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005904:	b989      	cbnz	r1, 800592a <PCD_EP_ISR_Handler+0xda>
 8005906:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800590a:	b292      	uxth	r2, r2
 800590c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005910:	b292      	uxth	r2, r2
 8005912:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005916:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800591a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800591e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005922:	b292      	uxth	r2, r2
 8005924:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005928:	e0bf      	b.n	8005aaa <PCD_EP_ISR_Handler+0x25a>
 800592a:	084a      	lsrs	r2, r1, #1
 800592c:	f011 0f01 	tst.w	r1, #1
 8005930:	d000      	beq.n	8005934 <PCD_EP_ISR_Handler+0xe4>
 8005932:	3201      	adds	r2, #1
 8005934:	0292      	lsls	r2, r2, #10
 8005936:	b292      	uxth	r2, r2
 8005938:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800593c:	e0b5      	b.n	8005aaa <PCD_EP_ISR_Handler+0x25a>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800593e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8005942:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005944:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005948:	f040 80be 	bne.w	8005ac8 <PCD_EP_ISR_Handler+0x278>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800594c:	f016 0f80 	tst.w	r6, #128	; 0x80
 8005950:	d04d      	beq.n	80059ee <PCD_EP_ISR_Handler+0x19e>
        ep = &hpcd->IN_ep[epindex];
 8005952:	1c62      	adds	r2, r4, #1
 8005954:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005958:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800595c:	6828      	ldr	r0, [r5, #0]
 800595e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8005962:	b29b      	uxth	r3, r3
 8005964:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005974:	b29b      	uxth	r3, r3
 8005976:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->type != EP_TYPE_BULK)
 800597a:	78cb      	ldrb	r3, [r1, #3]
 800597c:	2b02      	cmp	r3, #2
 800597e:	f000 81a7 	beq.w	8005cd0 <PCD_EP_ISR_Handler+0x480>
          ep->xfer_len = 0U;
 8005982:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005986:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800598a:	2200      	movs	r2, #0
 800598c:	641a      	str	r2, [r3, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 800598e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005992:	b323      	cbz	r3, 80059de <PCD_EP_ISR_Handler+0x18e>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005994:	f016 0f40 	tst.w	r6, #64	; 0x40
 8005998:	f000 8163 	beq.w	8005c62 <PCD_EP_ISR_Handler+0x412>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800599c:	784b      	ldrb	r3, [r1, #1]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f040 814c 	bne.w	8005c3c <PCD_EP_ISR_Handler+0x3ec>
 80059a4:	682a      	ldr	r2, [r5, #0]
 80059a6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80059aa:	fa12 f383 	uxtah	r3, r2, r3
 80059ae:	1c62      	adds	r2, r4, #1
 80059b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80059b4:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 80059b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059bc:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80059c0:	b292      	uxth	r2, r2
 80059c2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80059c6:	b292      	uxth	r2, r2
 80059c8:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80059cc:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80059d0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80059d4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80059d8:	b292      	uxth	r2, r2
 80059da:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80059de:	3401      	adds	r4, #1
 80059e0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80059e4:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 80059e8:	4628      	mov	r0, r5
 80059ea:	f005 f92f 	bl	800ac4c <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80059ee:	6828      	ldr	r0, [r5, #0]
 80059f0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80059f4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80059f8:	f000 81ae 	beq.w	8005d58 <PCD_EP_ISR_Handler+0x508>
    wIstr = hpcd->Instance->ISTR;
 80059fc:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 8005a00:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 8005a02:	f014 040f 	ands.w	r4, r4, #15
 8005a06:	d19a      	bne.n	800593e <PCD_EP_ISR_Handler+0xee>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005a08:	f013 0f10 	tst.w	r3, #16
 8005a0c:	f43f af24 	beq.w	8005858 <PCD_EP_ISR_Handler+0x8>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005a10:	8803      	ldrh	r3, [r0, #0]
 8005a12:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005a14:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005a18:	f47f af53 	bne.w	80058c2 <PCD_EP_ISR_Handler+0x72>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005a1c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8005a20:	d0e5      	beq.n	80059ee <PCD_EP_ISR_Handler+0x19e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005a22:	8803      	ldrh	r3, [r0, #0]
 8005a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a28:	051b      	lsls	r3, r3, #20
 8005a2a:	0d1b      	lsrs	r3, r3, #20
 8005a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a30:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005a32:	6828      	ldr	r0, [r5, #0]
 8005a34:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005a38:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8005a3c:	00d2      	lsls	r2, r2, #3
 8005a3e:	fa12 f383 	uxtah	r3, r2, r3
 8005a42:	4403      	add	r3, r0
 8005a44:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8005a48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a4c:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005a50:	b18b      	cbz	r3, 8005a76 <PCD_EP_ISR_Handler+0x226>
 8005a52:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 8005a56:	b171      	cbz	r1, 8005a76 <PCD_EP_ISR_Handler+0x226>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005a58:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8005a5c:	f003 fe41 	bl	80096e2 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8005a60:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
 8005a64:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 8005a68:	4413      	add	r3, r2
 8005a6a:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005a6e:	2100      	movs	r1, #0
 8005a70:	4628      	mov	r0, r5
 8005a72:	f005 f8df 	bl	800ac34 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005a76:	682b      	ldr	r3, [r5, #0]
 8005a78:	881a      	ldrh	r2, [r3, #0]
 8005a7a:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005a7e:	d1b6      	bne.n	80059ee <PCD_EP_ISR_Handler+0x19e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005a80:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005a84:	fa13 f382 	uxtah	r3, r3, r2
 8005a88:	f8d5 1178 	ldr.w	r1, [r5, #376]	; 0x178
 8005a8c:	293e      	cmp	r1, #62	; 0x3e
 8005a8e:	f67f af39 	bls.w	8005904 <PCD_EP_ISR_Handler+0xb4>
 8005a92:	094a      	lsrs	r2, r1, #5
 8005a94:	f011 0f1f 	tst.w	r1, #31
 8005a98:	d100      	bne.n	8005a9c <PCD_EP_ISR_Handler+0x24c>
 8005a9a:	3a01      	subs	r2, #1
 8005a9c:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8005aa0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005aa4:	b292      	uxth	r2, r2
 8005aa6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005aaa:	682a      	ldr	r2, [r5, #0]
 8005aac:	8813      	ldrh	r3, [r2, #0]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac4:	8013      	strh	r3, [r2, #0]
 8005ac6:	e792      	b.n	80059ee <PCD_EP_ISR_Handler+0x19e>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005ac8:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8005acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad0:	051b      	lsls	r3, r3, #20
 8005ad2:	0d1b      	lsrs	r3, r3, #20
 8005ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ad8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 8005adc:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005ae0:	00c9      	lsls	r1, r1, #3
 8005ae2:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8005ae6:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 8005aea:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005aee:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005af2:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d140      	bne.n	8005b7c <PCD_EP_ISR_Handler+0x32c>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005afa:	6828      	ldr	r0, [r5, #0]
 8005afc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005b00:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005b04:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005b08:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8005b0c:	00d2      	lsls	r2, r2, #3
 8005b0e:	fa12 f383 	uxtah	r3, r2, r3
 8005b12:	4403      	add	r3, r0
 8005b14:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8005b18:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 8005b1c:	bb17      	cbnz	r7, 8005b64 <PCD_EP_ISR_Handler+0x314>
        ep->xfer_count += count;
 8005b1e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005b22:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005b26:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8005b2a:	443a      	add	r2, r7
 8005b2c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8005b30:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8005b34:	443a      	add	r2, r7
 8005b36:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005b3a:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8005b3e:	b13b      	cbz	r3, 8005b50 <PCD_EP_ISR_Handler+0x300>
 8005b40:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005b44:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005b48:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8005b4c:	429f      	cmp	r7, r3
 8005b4e:	d270      	bcs.n	8005c32 <PCD_EP_ISR_Handler+0x3e2>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005b50:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005b54:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005b58:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	f005 f869 	bl	800ac34 <HAL_PCD_DataOutStageCallback>
 8005b62:	e6f3      	b.n	800594c <PCD_EP_ISR_Handler+0xfc>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005b64:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005b68:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8005b6c:	463b      	mov	r3, r7
 8005b6e:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8005b72:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8005b76:	f003 fdb4 	bl	80096e2 <USB_ReadPMA>
 8005b7a:	e7d0      	b.n	8005b1e <PCD_EP_ISR_Handler+0x2ce>
          if (ep->type == EP_TYPE_BULK)
 8005b7c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005b80:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005b84:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d033      	beq.n	8005bf4 <PCD_EP_ISR_Handler+0x3a4>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005b8c:	6829      	ldr	r1, [r5, #0]
 8005b8e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005b92:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005b96:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8005b9a:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bb0:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005bb4:	6828      	ldr	r0, [r5, #0]
 8005bb6:	f892 3168 	ldrb.w	r3, [r2, #360]	; 0x168
 8005bba:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005bbe:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005bc2:	d01e      	beq.n	8005c02 <PCD_EP_ISR_Handler+0x3b2>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005bc4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	fa13 f382 	uxtah	r3, r3, r2
 8005bce:	4403      	add	r3, r0
 8005bd0:	f8b3 7402 	ldrh.w	r7, [r3, #1026]	; 0x402
 8005bd4:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8005bd8:	2f00      	cmp	r7, #0
 8005bda:	d0a0      	beq.n	8005b1e <PCD_EP_ISR_Handler+0x2ce>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005bdc:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005be0:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8005be4:	463b      	mov	r3, r7
 8005be6:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8005bea:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8005bee:	f003 fd78 	bl	80096e2 <USB_ReadPMA>
 8005bf2:	e794      	b.n	8005b1e <PCD_EP_ISR_Handler+0x2ce>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005bf4:	4632      	mov	r2, r6
 8005bf6:	4641      	mov	r1, r8
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	f7ff fb0e 	bl	800521a <HAL_PCD_EP_DB_Receive>
 8005bfe:	4607      	mov	r7, r0
 8005c00:	e78d      	b.n	8005b1e <PCD_EP_ISR_Handler+0x2ce>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005c02:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	fa13 f382 	uxtah	r3, r3, r2
 8005c0c:	4403      	add	r3, r0
 8005c0e:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8005c12:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8005c16:	2f00      	cmp	r7, #0
 8005c18:	d081      	beq.n	8005b1e <PCD_EP_ISR_Handler+0x2ce>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005c1a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005c1e:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8005c22:	463b      	mov	r3, r7
 8005c24:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8005c28:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8005c2c:	f003 fd59 	bl	80096e2 <USB_ReadPMA>
 8005c30:	e775      	b.n	8005b1e <PCD_EP_ISR_Handler+0x2ce>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005c32:	4641      	mov	r1, r8
 8005c34:	6828      	ldr	r0, [r5, #0]
 8005c36:	f003 f9a4 	bl	8008f82 <USB_EPStartXfer>
 8005c3a:	e687      	b.n	800594c <PCD_EP_ISR_Handler+0xfc>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	f47f aece 	bne.w	80059de <PCD_EP_ISR_Handler+0x18e>
 8005c42:	682a      	ldr	r2, [r5, #0]
 8005c44:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005c48:	fa12 f383 	uxtah	r3, r2, r3
 8005c4c:	1c62      	adds	r2, r4, #1
 8005c4e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005c52:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8005c56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8005c60:	e6bd      	b.n	80059de <PCD_EP_ISR_Handler+0x18e>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c62:	6829      	ldr	r1, [r5, #0]
 8005c64:	1c63      	adds	r3, r4, #1
 8005c66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005c6a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005c6e:	785a      	ldrb	r2, [r3, #1]
 8005c70:	b9e2      	cbnz	r2, 8005cac <PCD_EP_ISR_Handler+0x45c>
 8005c72:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8005c76:	fa11 f383 	uxtah	r3, r1, r3
 8005c7a:	1c62      	adds	r2, r4, #1
 8005c7c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005c80:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8005c84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c88:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8005c8c:	b292      	uxth	r2, r2
 8005c8e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005c92:	b292      	uxth	r2, r2
 8005c94:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005c98:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8005c9c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005ca0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005ca4:	b292      	uxth	r2, r2
 8005ca6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005caa:	e698      	b.n	80059de <PCD_EP_ISR_Handler+0x18e>
 8005cac:	2a01      	cmp	r2, #1
 8005cae:	f47f ae96 	bne.w	80059de <PCD_EP_ISR_Handler+0x18e>
 8005cb2:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8005cb6:	fa11 f383 	uxtah	r3, r1, r3
 8005cba:	1c62      	adds	r2, r4, #1
 8005cbc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005cc0:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8005cc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005cce:	e686      	b.n	80059de <PCD_EP_ISR_Handler+0x18e>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005cd0:	f416 7f80 	tst.w	r6, #256	; 0x100
 8005cd4:	d13b      	bne.n	8005d4e <PCD_EP_ISR_Handler+0x4fe>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005cd6:	6828      	ldr	r0, [r5, #0]
 8005cd8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005cdc:	1c62      	adds	r2, r4, #1
 8005cde:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005ce2:	f815 6032 	ldrb.w	r6, [r5, r2, lsl #3]
 8005ce6:	00f2      	lsls	r2, r6, #3
 8005ce8:	fa12 f383 	uxtah	r3, r2, r3
 8005cec:	4403      	add	r3, r0
 8005cee:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8005cf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (ep->xfer_len > TxPctSize)
 8005cf6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005cfa:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005cfe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d910      	bls.n	8005d26 <PCD_EP_ISR_Handler+0x4d6>
              ep->xfer_len -= TxPctSize;
 8005d04:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 8005d08:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 8005d0c:	1ad2      	subs	r2, r2, r3
 8005d0e:	643a      	str	r2, [r7, #64]	; 0x40
            if (ep->xfer_len == 0U)
 8005d10:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005d14:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005d18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005d1a:	b95a      	cbnz	r2, 8005d34 <PCD_EP_ISR_Handler+0x4e4>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005d1c:	4631      	mov	r1, r6
 8005d1e:	4628      	mov	r0, r5
 8005d20:	f004 ff94 	bl	800ac4c <HAL_PCD_DataInStageCallback>
 8005d24:	e663      	b.n	80059ee <PCD_EP_ISR_Handler+0x19e>
              ep->xfer_len = 0U;
 8005d26:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005d2a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005d2e:	2700      	movs	r7, #0
 8005d30:	6417      	str	r7, [r2, #64]	; 0x40
 8005d32:	e7ed      	b.n	8005d10 <PCD_EP_ISR_Handler+0x4c0>
              ep->xfer_buff += TxPctSize;
 8005d34:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005d38:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005d3c:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8005d3e:	441e      	add	r6, r3
 8005d40:	63d6      	str	r6, [r2, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 8005d42:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8005d44:	4423      	add	r3, r4
 8005d46:	6453      	str	r3, [r2, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005d48:	f003 f91b 	bl	8008f82 <USB_EPStartXfer>
 8005d4c:	e64f      	b.n	80059ee <PCD_EP_ISR_Handler+0x19e>
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005d4e:	4632      	mov	r2, r6
 8005d50:	4628      	mov	r0, r5
 8005d52:	f7ff fb75 	bl	8005440 <HAL_PCD_EP_DB_Transmit>
 8005d56:	e64a      	b.n	80059ee <PCD_EP_ISR_Handler+0x19e>
}
 8005d58:	2000      	movs	r0, #0
 8005d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005d5e <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8005d5e:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d00d      	beq.n	8005d82 <HAL_PCD_SetAddress+0x24>
{
 8005d66:	b510      	push	{r4, lr}
 8005d68:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005d70:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005d74:	6800      	ldr	r0, [r0, #0]
 8005d76:	f003 f8db 	bl	8008f30 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005d80:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8005d82:	2002      	movs	r0, #2
}
 8005d84:	4770      	bx	lr

08005d86 <HAL_PCD_IRQHandler>:
{
 8005d86:	b510      	push	{r4, lr}
 8005d88:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005d8a:	6800      	ldr	r0, [r0, #0]
 8005d8c:	f003 f8e1 	bl	8008f52 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005d90:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8005d94:	d123      	bne.n	8005dde <HAL_PCD_IRQHandler+0x58>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005d96:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8005d9a:	d124      	bne.n	8005de6 <HAL_PCD_IRQHandler+0x60>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005d9c:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8005da0:	d132      	bne.n	8005e08 <HAL_PCD_IRQHandler+0x82>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005da2:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8005da6:	d139      	bne.n	8005e1c <HAL_PCD_IRQHandler+0x96>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005da8:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8005dac:	d140      	bne.n	8005e30 <HAL_PCD_IRQHandler+0xaa>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005dae:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8005db2:	d167      	bne.n	8005e84 <HAL_PCD_IRQHandler+0xfe>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005db4:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005db8:	f040 8081 	bne.w	8005ebe <HAL_PCD_IRQHandler+0x138>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005dbc:	f410 7f00 	tst.w	r0, #512	; 0x200
 8005dc0:	f040 80ad 	bne.w	8005f1e <HAL_PCD_IRQHandler+0x198>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005dc4:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005dc8:	d027      	beq.n	8005e1a <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005dca:	6822      	ldr	r2, [r4, #0]
 8005dcc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8005ddc:	e01d      	b.n	8005e1a <HAL_PCD_IRQHandler+0x94>
    (void)PCD_EP_ISR_Handler(hpcd);
 8005dde:	4620      	mov	r0, r4
 8005de0:	f7ff fd36 	bl	8005850 <PCD_EP_ISR_Handler>
    return;
 8005de4:	e019      	b.n	8005e1a <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005de6:	6822      	ldr	r2, [r4, #0]
 8005de8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f004 ff38 	bl	800ac6e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005dfe:	2100      	movs	r1, #0
 8005e00:	4620      	mov	r0, r4
 8005e02:	f7ff ffac 	bl	8005d5e <HAL_PCD_SetAddress>
    return;
 8005e06:	e008      	b.n	8005e1a <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005e08:	6822      	ldr	r2, [r4, #0]
 8005e0a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8005e1a:	bd10      	pop	{r4, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005e1c:	6822      	ldr	r2, [r4, #0]
 8005e1e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8005e2e:	e7f4      	b.n	8005e1a <HAL_PCD_IRQHandler+0x94>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005e30:	6822      	ldr	r2, [r4, #0]
 8005e32:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	f023 0304 	bic.w	r3, r3, #4
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005e42:	6822      	ldr	r2, [r4, #0]
 8005e44:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	f023 0308 	bic.w	r3, r3, #8
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8005e54:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d00c      	beq.n	8005e76 <HAL_PCD_IRQHandler+0xf0>
    HAL_PCD_ResumeCallback(hpcd);
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f004 ff29 	bl	800acb4 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005e62:	6822      	ldr	r2, [r4, #0]
 8005e64:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8005e74:	e7d1      	b.n	8005e1a <HAL_PCD_IRQHandler+0x94>
      hpcd->LPM_State = LPM_L0;
 8005e76:	2100      	movs	r1, #0
 8005e78:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f004 ffd1 	bl	800ae24 <HAL_PCDEx_LPM_Callback>
 8005e82:	e7eb      	b.n	8005e5c <HAL_PCD_IRQHandler+0xd6>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005e84:	6822      	ldr	r2, [r4, #0]
 8005e86:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	f043 0308 	orr.w	r3, r3, #8
 8005e90:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005e94:	6822      	ldr	r2, [r4, #0]
 8005e96:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005ea6:	6822      	ldr	r2, [r4, #0]
 8005ea8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f043 0304 	orr.w	r3, r3, #4
 8005eb2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f004 feec 	bl	800ac94 <HAL_PCD_SuspendCallback>
    return;
 8005ebc:	e7ad      	b.n	8005e1a <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005ebe:	6822      	ldr	r2, [r4, #0]
 8005ec0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005ed0:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8005ed4:	b9fb      	cbnz	r3, 8005f16 <HAL_PCD_IRQHandler+0x190>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005ed6:	6822      	ldr	r2, [r4, #0]
 8005ed8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	f043 0304 	orr.w	r3, r3, #4
 8005ee2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005ee6:	6822      	ldr	r2, [r4, #0]
 8005ee8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	f043 0308 	orr.w	r3, r3, #8
 8005ef2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005f02:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8005f06:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8005f0a:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005f0e:	4620      	mov	r0, r4
 8005f10:	f004 ff88 	bl	800ae24 <HAL_PCDEx_LPM_Callback>
 8005f14:	e781      	b.n	8005e1a <HAL_PCD_IRQHandler+0x94>
      HAL_PCD_SuspendCallback(hpcd);
 8005f16:	4620      	mov	r0, r4
 8005f18:	f004 febc 	bl	800ac94 <HAL_PCD_SuspendCallback>
    return;
 8005f1c:	e77d      	b.n	8005e1a <HAL_PCD_IRQHandler+0x94>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005f1e:	6822      	ldr	r2, [r4, #0]
 8005f20:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8005f30:	4620      	mov	r0, r4
 8005f32:	f004 fe96 	bl	800ac62 <HAL_PCD_SOFCallback>
    return;
 8005f36:	e770      	b.n	8005e1a <HAL_PCD_IRQHandler+0x94>

08005f38 <HAL_PCD_EP_Open>:
{
 8005f38:	b510      	push	{r4, lr}
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8005f3e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005f42:	d12a      	bne.n	8005f9a <HAL_PCD_EP_Open+0x62>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f44:	f001 0007 	and.w	r0, r1, #7
 8005f48:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8005f4c:	00c9      	lsls	r1, r1, #3
 8005f4e:	f501 7eb4 	add.w	lr, r1, #360	; 0x168
 8005f52:	eb04 010e 	add.w	r1, r4, lr
    ep->is_in = 0U;
 8005f56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f5a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8005f5e:	f04f 0e00 	mov.w	lr, #0
 8005f62:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f66:	f00c 0c07 	and.w	ip, ip, #7
 8005f6a:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 8005f6e:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8005f70:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8005f72:	784a      	ldrb	r2, [r1, #1]
 8005f74:	b10a      	cbz	r2, 8005f7a <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 8005f76:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d019      	beq.n	8005fb2 <HAL_PCD_EP_Open+0x7a>
  __HAL_LOCK(hpcd);
 8005f7e:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d018      	beq.n	8005fb8 <HAL_PCD_EP_Open+0x80>
 8005f86:	2301      	movs	r3, #1
 8005f88:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005f8c:	6820      	ldr	r0, [r4, #0]
 8005f8e:	f002 fca1 	bl	80088d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f92:	2000      	movs	r0, #0
 8005f94:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005f98:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f9a:	f001 0007 	and.w	r0, r1, #7
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8005fa4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 8005fa8:	f04f 0e01 	mov.w	lr, #1
 8005fac:	f881 e001 	strb.w	lr, [r1, #1]
 8005fb0:	e7d9      	b.n	8005f66 <HAL_PCD_EP_Open+0x2e>
    ep->data_pid_start = 0U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	710b      	strb	r3, [r1, #4]
 8005fb6:	e7e2      	b.n	8005f7e <HAL_PCD_EP_Open+0x46>
  __HAL_LOCK(hpcd);
 8005fb8:	2002      	movs	r0, #2
 8005fba:	e7ed      	b.n	8005f98 <HAL_PCD_EP_Open+0x60>

08005fbc <HAL_PCD_EP_Close>:
{
 8005fbc:	b510      	push	{r4, lr}
 8005fbe:	4604      	mov	r4, r0
 8005fc0:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8005fc2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005fc6:	d11f      	bne.n	8006008 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fc8:	f001 0207 	and.w	r2, r1, #7
 8005fcc:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005fd0:	00c9      	lsls	r1, r1, #3
 8005fd2:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8005fd6:	4401      	add	r1, r0
    ep->is_in = 0U;
 8005fd8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005fdc:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005fe6:	f003 0307 	and.w	r3, r3, #7
 8005fea:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8005fec:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d013      	beq.n	800601c <HAL_PCD_EP_Close+0x60>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005ffa:	6820      	ldr	r0, [r4, #0]
 8005ffc:	f002 fe37 	bl	8008c6e <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006000:	2000      	movs	r0, #0
 8006002:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8006006:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006008:	f001 0207 	and.w	r2, r1, #7
 800600c:	3201      	adds	r2, #1
 800600e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8006012:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8006016:	2001      	movs	r0, #1
 8006018:	7048      	strb	r0, [r1, #1]
 800601a:	e7e4      	b.n	8005fe6 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 800601c:	2002      	movs	r0, #2
 800601e:	e7f2      	b.n	8006006 <HAL_PCD_EP_Close+0x4a>

08006020 <HAL_PCD_EP_Receive>:
{
 8006020:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006022:	f001 0407 	and.w	r4, r1, #7
 8006026:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800602a:	00c9      	lsls	r1, r1, #3
 800602c:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8006030:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8006032:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8006036:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 800603a:	f8cc 217c 	str.w	r2, [ip, #380]	; 0x17c
  ep->xfer_len = len;
 800603e:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
  ep->xfer_count = 0U;
 8006042:	2300      	movs	r3, #0
 8006044:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
  ep->is_in = 0U;
 8006048:	f88c 3169 	strb.w	r3, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 800604c:	f88c 4168 	strb.w	r4, [ip, #360]	; 0x168
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006050:	b924      	cbnz	r4, 800605c <HAL_PCD_EP_Receive+0x3c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006052:	6800      	ldr	r0, [r0, #0]
 8006054:	f002 ff95 	bl	8008f82 <USB_EPStartXfer>
}
 8006058:	2000      	movs	r0, #0
 800605a:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800605c:	6800      	ldr	r0, [r0, #0]
 800605e:	f002 ff90 	bl	8008f82 <USB_EPStartXfer>
 8006062:	e7f9      	b.n	8006058 <HAL_PCD_EP_Receive+0x38>

08006064 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006064:	f001 0107 	and.w	r1, r1, #7
 8006068:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800606c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8006070:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8006074:	4770      	bx	lr

08006076 <HAL_PCD_EP_Transmit>:
{
 8006076:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006078:	f001 0407 	and.w	r4, r1, #7
 800607c:	f104 0c01 	add.w	ip, r4, #1
 8006080:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8006084:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 8006088:	eb04 0e84 	add.w	lr, r4, r4, lsl #2
 800608c:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8006090:	f8ce 203c 	str.w	r2, [lr, #60]	; 0x3c
  ep->xfer_len = len;
 8006094:	f8ce 3040 	str.w	r3, [lr, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 8006098:	2201      	movs	r2, #1
 800609a:	f88e 204c 	strb.w	r2, [lr, #76]	; 0x4c
  ep->xfer_len_db = len;
 800609e:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
  ep->xfer_count = 0U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	f8ce 3044 	str.w	r3, [lr, #68]	; 0x44
  ep->is_in = 1U;
 80060a8:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060aa:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80060ae:	f800 403c 	strb.w	r4, [r0, ip, lsl #3]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80060b2:	b924      	cbnz	r4, 80060be <HAL_PCD_EP_Transmit+0x48>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80060b4:	6800      	ldr	r0, [r0, #0]
 80060b6:	f002 ff64 	bl	8008f82 <USB_EPStartXfer>
}
 80060ba:	2000      	movs	r0, #0
 80060bc:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80060be:	6800      	ldr	r0, [r0, #0]
 80060c0:	f002 ff5f 	bl	8008f82 <USB_EPStartXfer>
 80060c4:	e7f9      	b.n	80060ba <HAL_PCD_EP_Transmit+0x44>

080060c6 <HAL_PCD_EP_SetStall>:
{
 80060c6:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80060c8:	f001 0207 	and.w	r2, r1, #7
 80060cc:	6841      	ldr	r1, [r0, #4]
 80060ce:	428a      	cmp	r2, r1
 80060d0:	d82a      	bhi.n	8006128 <HAL_PCD_EP_SetStall+0x62>
{
 80060d2:	b510      	push	{r4, lr}
 80060d4:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80060d6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80060da:	d11d      	bne.n	8006118 <HAL_PCD_EP_SetStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr];
 80060dc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80060e0:	00c9      	lsls	r1, r1, #3
 80060e2:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80060e6:	4401      	add	r1, r0
    ep->is_in = 0U;
 80060e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80060ec:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80060f0:	2000      	movs	r0, #0
 80060f2:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 80060f6:	2301      	movs	r3, #1
 80060f8:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060fa:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80060fc:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8006100:	2b01      	cmp	r3, #1
 8006102:	d013      	beq.n	800612c <HAL_PCD_EP_SetStall+0x66>
 8006104:	2301      	movs	r3, #1
 8006106:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800610a:	6820      	ldr	r0, [r4, #0]
 800610c:	f002 fe9a 	bl	8008e44 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8006110:	2000      	movs	r0, #0
 8006112:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8006116:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006118:	1c53      	adds	r3, r2, #1
 800611a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800611e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8006122:	2001      	movs	r0, #1
 8006124:	7048      	strb	r0, [r1, #1]
 8006126:	e7e6      	b.n	80060f6 <HAL_PCD_EP_SetStall+0x30>
    return HAL_ERROR;
 8006128:	2001      	movs	r0, #1
}
 800612a:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 800612c:	2002      	movs	r0, #2
 800612e:	e7f2      	b.n	8006116 <HAL_PCD_EP_SetStall+0x50>

08006130 <HAL_PCD_EP_ClrStall>:
{
 8006130:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006132:	f001 010f 	and.w	r1, r1, #15
 8006136:	6842      	ldr	r2, [r0, #4]
 8006138:	4291      	cmp	r1, r2
 800613a:	d830      	bhi.n	800619e <HAL_PCD_EP_ClrStall+0x6e>
{
 800613c:	b510      	push	{r4, lr}
 800613e:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8006140:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006144:	d121      	bne.n	800618a <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006146:	f003 0207 	and.w	r2, r3, #7
 800614a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800614e:	00c9      	lsls	r1, r1, #3
 8006150:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8006154:	4401      	add	r1, r0
    ep->is_in = 0U;
 8006156:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800615a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800615e:	2000      	movs	r0, #0
 8006160:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 8006164:	2200      	movs	r2, #0
 8006166:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800616e:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8006172:	2b01      	cmp	r3, #1
 8006174:	d015      	beq.n	80061a2 <HAL_PCD_EP_ClrStall+0x72>
 8006176:	2301      	movs	r3, #1
 8006178:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800617c:	6820      	ldr	r0, [r4, #0]
 800617e:	f002 fe86 	bl	8008e8e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006182:	2000      	movs	r0, #0
 8006184:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8006188:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800618a:	f003 0207 	and.w	r2, r3, #7
 800618e:	3201      	adds	r2, #1
 8006190:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8006194:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8006198:	2001      	movs	r0, #1
 800619a:	7048      	strb	r0, [r1, #1]
 800619c:	e7e2      	b.n	8006164 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 800619e:	2001      	movs	r0, #1
}
 80061a0:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80061a2:	2002      	movs	r0, #2
 80061a4:	e7f0      	b.n	8006188 <HAL_PCD_EP_ClrStall+0x58>

080061a6 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80061a6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80061aa:	d00b      	beq.n	80061c4 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061ac:	f001 0107 	and.w	r1, r1, #7
 80061b0:	3101      	adds	r1, #1
 80061b2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80061b6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80061ba:	b952      	cbnz	r2, 80061d2 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80061bc:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80061be:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80061c0:	2000      	movs	r0, #0
 80061c2:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 80061c4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80061c8:	00c9      	lsls	r1, r1, #3
 80061ca:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80061ce:	4401      	add	r1, r0
 80061d0:	e7f3      	b.n	80061ba <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 80061d2:	2201      	movs	r2, #1
 80061d4:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80061d6:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80061d8:	0c1b      	lsrs	r3, r3, #16
 80061da:	814b      	strh	r3, [r1, #10]
 80061dc:	e7f0      	b.n	80061c0 <HAL_PCDEx_PMAConfig+0x1a>

080061de <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80061de:	4603      	mov	r3, r0

  USB_TypeDef *USBx = hpcd->Instance;
 80061e0:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 80061e2:	2101      	movs	r1, #1
 80061e4:	f8c0 12e8 	str.w	r1, [r0, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80061e8:	2000      	movs	r0, #0
 80061ea:	f883 02e0 	strb.w	r0, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80061ee:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	430b      	orrs	r3, r1
 80061f6:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80061fa:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 80061fe:	b29b      	uxth	r3, r3
 8006200:	f043 0302 	orr.w	r3, r3, #2
 8006204:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8006208:	4770      	bx	lr
	...

0800620c <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800620c:	2800      	cmp	r0, #0
 800620e:	d136      	bne.n	800627e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006210:	4b3e      	ldr	r3, [pc, #248]	; (800630c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800621c:	d008      	beq.n	8006230 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800621e:	4a3b      	ldr	r2, [pc, #236]	; (800630c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006220:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8006224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006228:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800622c:	2000      	movs	r0, #0
 800622e:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006230:	4a36      	ldr	r2, [pc, #216]	; (800630c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006232:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8006236:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800623a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800623e:	6813      	ldr	r3, [r2, #0]
 8006240:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006244:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006248:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800624a:	4b31      	ldr	r3, [pc, #196]	; (8006310 <HAL_PWREx_ControlVoltageScaling+0x104>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2232      	movs	r2, #50	; 0x32
 8006250:	fb02 f303 	mul.w	r3, r2, r3
 8006254:	4a2f      	ldr	r2, [pc, #188]	; (8006314 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8006256:	fba2 2303 	umull	r2, r3, r2, r3
 800625a:	0c9b      	lsrs	r3, r3, #18
 800625c:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800625e:	e000      	b.n	8006262 <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 8006260:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006262:	4a2a      	ldr	r2, [pc, #168]	; (800630c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006264:	6952      	ldr	r2, [r2, #20]
 8006266:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800626a:	d001      	beq.n	8006270 <HAL_PWREx_ControlVoltageScaling+0x64>
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1f7      	bne.n	8006260 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006270:	4b26      	ldr	r3, [pc, #152]	; (800630c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006278:	d144      	bne.n	8006304 <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 800627a:	2000      	movs	r0, #0
 800627c:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800627e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006282:	d008      	beq.n	8006296 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006284:	4a21      	ldr	r2, [pc, #132]	; (800630c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006286:	6813      	ldr	r3, [r2, #0]
 8006288:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800628c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006290:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8006292:	2000      	movs	r0, #0
 8006294:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006296:	4b1d      	ldr	r3, [pc, #116]	; (800630c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800629e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a2:	d008      	beq.n	80062b6 <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80062a4:	4a19      	ldr	r2, [pc, #100]	; (800630c <HAL_PWREx_ControlVoltageScaling+0x100>)
 80062a6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80062aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062ae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 80062b2:	2000      	movs	r0, #0
 80062b4:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80062b6:	4a15      	ldr	r2, [pc, #84]	; (800630c <HAL_PWREx_ControlVoltageScaling+0x100>)
 80062b8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80062bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80062c4:	6813      	ldr	r3, [r2, #0]
 80062c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80062ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062ce:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80062d0:	4b0f      	ldr	r3, [pc, #60]	; (8006310 <HAL_PWREx_ControlVoltageScaling+0x104>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2232      	movs	r2, #50	; 0x32
 80062d6:	fb02 f303 	mul.w	r3, r2, r3
 80062da:	4a0e      	ldr	r2, [pc, #56]	; (8006314 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80062dc:	fba2 2303 	umull	r2, r3, r2, r3
 80062e0:	0c9b      	lsrs	r3, r3, #18
 80062e2:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062e4:	e000      	b.n	80062e8 <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 80062e6:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062e8:	4a08      	ldr	r2, [pc, #32]	; (800630c <HAL_PWREx_ControlVoltageScaling+0x100>)
 80062ea:	6952      	ldr	r2, [r2, #20]
 80062ec:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80062f0:	d001      	beq.n	80062f6 <HAL_PWREx_ControlVoltageScaling+0xea>
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1f7      	bne.n	80062e6 <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80062f6:	4b05      	ldr	r3, [pc, #20]	; (800630c <HAL_PWREx_ControlVoltageScaling+0x100>)
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80062fe:	d103      	bne.n	8006308 <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 8006300:	2000      	movs	r0, #0
 8006302:	4770      	bx	lr
        return HAL_TIMEOUT;
 8006304:	2003      	movs	r0, #3
 8006306:	4770      	bx	lr
        return HAL_TIMEOUT;
 8006308:	2003      	movs	r0, #3
}
 800630a:	4770      	bx	lr
 800630c:	40007000 	.word	0x40007000
 8006310:	20000044 	.word	0x20000044
 8006314:	431bde83 	.word	0x431bde83

08006318 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006318:	4a02      	ldr	r2, [pc, #8]	; (8006324 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800631a:	6893      	ldr	r3, [r2, #8]
 800631c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006320:	6093      	str	r3, [r2, #8]
}
 8006322:	4770      	bx	lr
 8006324:	40007000 	.word	0x40007000

08006328 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800632c:	4605      	mov	r5, r0
 800632e:	460f      	mov	r7, r1
 8006330:	4616      	mov	r6, r2
 8006332:	4699      	mov	r9, r3
 8006334:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006338:	682c      	ldr	r4, [r5, #0]
 800633a:	68a4      	ldr	r4, [r4, #8]
 800633c:	423c      	tst	r4, r7
 800633e:	bf14      	ite	ne
 8006340:	f04f 0c01 	movne.w	ip, #1
 8006344:	f04f 0c00 	moveq.w	ip, #0
 8006348:	45b4      	cmp	ip, r6
 800634a:	d014      	beq.n	8006376 <QSPI_WaitFlagStateUntilTimeout+0x4e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800634c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006350:	d0f2      	beq.n	8006338 <QSPI_WaitFlagStateUntilTimeout+0x10>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006352:	f7fd f83d 	bl	80033d0 <HAL_GetTick>
 8006356:	eba0 0009 	sub.w	r0, r0, r9
 800635a:	4540      	cmp	r0, r8
 800635c:	d802      	bhi.n	8006364 <QSPI_WaitFlagStateUntilTimeout+0x3c>
 800635e:	f1b8 0f00 	cmp.w	r8, #0
 8006362:	d1e9      	bne.n	8006338 <QSPI_WaitFlagStateUntilTimeout+0x10>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006364:	2304      	movs	r3, #4
 8006366:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800636a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800636c:	f043 0301 	orr.w	r3, r3, #1
 8006370:	646b      	str	r3, [r5, #68]	; 0x44

        return HAL_ERROR;
 8006372:	2001      	movs	r0, #1
 8006374:	e000      	b.n	8006378 <QSPI_WaitFlagStateUntilTimeout+0x50>
      }
    }
  }
  return HAL_OK;
 8006376:	2000      	movs	r0, #0
}
 8006378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800637c <HAL_QSPI_SetTimeout>:
  hqspi->Timeout = Timeout;
 800637c:	6481      	str	r1, [r0, #72]	; 0x48
}
 800637e:	4770      	bx	lr

08006380 <HAL_QSPI_Init>:
{
 8006380:	b570      	push	{r4, r5, r6, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006386:	f7fd f823 	bl	80033d0 <HAL_GetTick>
  if(hqspi == NULL)
 800638a:	2c00      	cmp	r4, #0
 800638c:	d04c      	beq.n	8006428 <HAL_QSPI_Init+0xa8>
 800638e:	4606      	mov	r6, r0
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006390:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006394:	2b00      	cmp	r3, #0
 8006396:	d03c      	beq.n	8006412 <HAL_QSPI_Init+0x92>
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006398:	6825      	ldr	r5, [r4, #0]
 800639a:	682a      	ldr	r2, [r5, #0]
 800639c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80063a0:	68a1      	ldr	r1, [r4, #8]
 80063a2:	3901      	subs	r1, #1
 80063a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80063a8:	602a      	str	r2, [r5, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80063aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	4633      	mov	r3, r6
 80063b0:	2200      	movs	r2, #0
 80063b2:	2120      	movs	r1, #32
 80063b4:	4620      	mov	r0, r4
 80063b6:	f7ff ffb7 	bl	8006328 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 80063ba:	bb28      	cbnz	r0, 8006408 <HAL_QSPI_Init+0x88>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80063bc:	6821      	ldr	r1, [r4, #0]
 80063be:	680b      	ldr	r3, [r1, #0]
 80063c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80063c4:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80063c8:	6865      	ldr	r5, [r4, #4]
 80063ca:	68e2      	ldr	r2, [r4, #12]
 80063cc:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 80063d0:	69e5      	ldr	r5, [r4, #28]
 80063d2:	432a      	orrs	r2, r5
 80063d4:	6a25      	ldr	r5, [r4, #32]
 80063d6:	432a      	orrs	r2, r5
 80063d8:	4313      	orrs	r3, r2
 80063da:	600b      	str	r3, [r1, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80063dc:	6821      	ldr	r1, [r4, #0]
 80063de:	684a      	ldr	r2, [r1, #4]
 80063e0:	4b12      	ldr	r3, [pc, #72]	; (800642c <HAL_QSPI_Init+0xac>)
 80063e2:	4013      	ands	r3, r2
 80063e4:	6925      	ldr	r5, [r4, #16]
 80063e6:	6962      	ldr	r2, [r4, #20]
 80063e8:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80063ec:	69a5      	ldr	r5, [r4, #24]
 80063ee:	432a      	orrs	r2, r5
 80063f0:	4313      	orrs	r3, r2
 80063f2:	604b      	str	r3, [r1, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80063f4:	6822      	ldr	r2, [r4, #0]
 80063f6:	6813      	ldr	r3, [r2, #0]
 80063f8:	f043 0301 	orr.w	r3, r3, #1
 80063fc:	6013      	str	r3, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80063fe:	2300      	movs	r3, #0
 8006400:	6463      	str	r3, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8006402:	2301      	movs	r3, #1
 8006404:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8006408:	2300      	movs	r3, #0
 800640a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800640e:	b002      	add	sp, #8
 8006410:	bd70      	pop	{r4, r5, r6, pc}
    hqspi->Lock = HAL_UNLOCKED;
 8006412:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8006416:	4620      	mov	r0, r4
 8006418:	f7fb ff5c 	bl	80022d4 <HAL_QSPI_MspInit>
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800641c:	f241 3188 	movw	r1, #5000	; 0x1388
 8006420:	4620      	mov	r0, r4
 8006422:	f7ff ffab 	bl	800637c <HAL_QSPI_SetTimeout>
 8006426:	e7b7      	b.n	8006398 <HAL_QSPI_Init+0x18>
    return HAL_ERROR;
 8006428:	2001      	movs	r0, #1
 800642a:	e7f0      	b.n	800640e <HAL_QSPI_Init+0x8e>
 800642c:	ffe0f8fe 	.word	0xffe0f8fe

08006430 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006430:	4b12      	ldr	r3, [pc, #72]	; (800647c <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8006432:	68da      	ldr	r2, [r3, #12]
 8006434:	f002 0203 	and.w	r2, r2, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006438:	68d8      	ldr	r0, [r3, #12]
 800643a:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800643e:	1c43      	adds	r3, r0, #1

  switch (pllsource)
 8006440:	2a03      	cmp	r2, #3
 8006442:	d011      	beq.n	8006468 <RCC_GetSysClockFreqFromPLLSource+0x38>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006444:	480e      	ldr	r0, [pc, #56]	; (8006480 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 8006446:	fbb0 f0f3 	udiv	r0, r0, r3
 800644a:	4b0c      	ldr	r3, [pc, #48]	; (800647c <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8006452:	fb03 f000 	mul.w	r0, r3, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006456:	4b09      	ldr	r3, [pc, #36]	; (800647c <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800645e:	3301      	adds	r3, #1
 8006460:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 8006462:	fbb0 f0f3 	udiv	r0, r0, r3
 8006466:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006468:	4806      	ldr	r0, [pc, #24]	; (8006484 <RCC_GetSysClockFreqFromPLLSource+0x54>)
 800646a:	fbb0 f0f3 	udiv	r0, r0, r3
 800646e:	4b03      	ldr	r3, [pc, #12]	; (800647c <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8006476:	fb03 f000 	mul.w	r0, r3, r0
    break;
 800647a:	e7ec      	b.n	8006456 <RCC_GetSysClockFreqFromPLLSource+0x26>
 800647c:	40021000 	.word	0x40021000
 8006480:	00f42400 	.word	0x00f42400
 8006484:	007a1200 	.word	0x007a1200

08006488 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8006488:	2800      	cmp	r0, #0
 800648a:	f000 8254 	beq.w	8006936 <HAL_RCC_OscConfig+0x4ae>
{
 800648e:	b570      	push	{r4, r5, r6, lr}
 8006490:	b082      	sub	sp, #8
 8006492:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006494:	6803      	ldr	r3, [r0, #0]
 8006496:	f013 0f01 	tst.w	r3, #1
 800649a:	d037      	beq.n	800650c <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800649c:	4aa4      	ldr	r2, [pc, #656]	; (8006730 <HAL_RCC_OscConfig+0x2a8>)
 800649e:	6893      	ldr	r3, [r2, #8]
 80064a0:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064a4:	68d2      	ldr	r2, [r2, #12]
 80064a6:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80064aa:	2b0c      	cmp	r3, #12
 80064ac:	d023      	beq.n	80064f6 <HAL_RCC_OscConfig+0x6e>
 80064ae:	2b08      	cmp	r3, #8
 80064b0:	d023      	beq.n	80064fa <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064b2:	6863      	ldr	r3, [r4, #4]
 80064b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064b8:	d04e      	beq.n	8006558 <HAL_RCC_OscConfig+0xd0>
 80064ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064be:	d051      	beq.n	8006564 <HAL_RCC_OscConfig+0xdc>
 80064c0:	4b9b      	ldr	r3, [pc, #620]	; (8006730 <HAL_RCC_OscConfig+0x2a8>)
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80064d0:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064d2:	6863      	ldr	r3, [r4, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d052      	beq.n	800657e <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
 80064d8:	f7fc ff7a 	bl	80033d0 <HAL_GetTick>
 80064dc:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064de:	4b94      	ldr	r3, [pc, #592]	; (8006730 <HAL_RCC_OscConfig+0x2a8>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80064e6:	d111      	bne.n	800650c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064e8:	f7fc ff72 	bl	80033d0 <HAL_GetTick>
 80064ec:	1b40      	subs	r0, r0, r5
 80064ee:	2864      	cmp	r0, #100	; 0x64
 80064f0:	d9f5      	bls.n	80064de <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 80064f2:	2003      	movs	r0, #3
 80064f4:	e228      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80064f6:	2a03      	cmp	r2, #3
 80064f8:	d1d9      	bne.n	80064ae <HAL_RCC_OscConfig+0x26>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064fa:	4b8d      	ldr	r3, [pc, #564]	; (8006730 <HAL_RCC_OscConfig+0x2a8>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006502:	d003      	beq.n	800650c <HAL_RCC_OscConfig+0x84>
 8006504:	6863      	ldr	r3, [r4, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 8217 	beq.w	800693a <HAL_RCC_OscConfig+0x4b2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800650c:	6823      	ldr	r3, [r4, #0]
 800650e:	f013 0f02 	tst.w	r3, #2
 8006512:	d05d      	beq.n	80065d0 <HAL_RCC_OscConfig+0x148>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006514:	4a86      	ldr	r2, [pc, #536]	; (8006730 <HAL_RCC_OscConfig+0x2a8>)
 8006516:	6893      	ldr	r3, [r2, #8]
 8006518:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800651c:	68d2      	ldr	r2, [r2, #12]
 800651e:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006522:	2b0c      	cmp	r3, #12
 8006524:	d03a      	beq.n	800659c <HAL_RCC_OscConfig+0x114>
 8006526:	2b04      	cmp	r3, #4
 8006528:	d03a      	beq.n	80065a0 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800652a:	68e3      	ldr	r3, [r4, #12]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d075      	beq.n	800661c <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8006530:	4a7f      	ldr	r2, [pc, #508]	; (8006730 <HAL_RCC_OscConfig+0x2a8>)
 8006532:	6813      	ldr	r3, [r2, #0]
 8006534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006538:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800653a:	f7fc ff49 	bl	80033d0 <HAL_GetTick>
 800653e:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006540:	4b7b      	ldr	r3, [pc, #492]	; (8006730 <HAL_RCC_OscConfig+0x2a8>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006548:	d15f      	bne.n	800660a <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800654a:	f7fc ff41 	bl	80033d0 <HAL_GetTick>
 800654e:	1b40      	subs	r0, r0, r5
 8006550:	2802      	cmp	r0, #2
 8006552:	d9f5      	bls.n	8006540 <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
 8006554:	2003      	movs	r0, #3
 8006556:	e1f7      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006558:	4a75      	ldr	r2, [pc, #468]	; (8006730 <HAL_RCC_OscConfig+0x2a8>)
 800655a:	6813      	ldr	r3, [r2, #0]
 800655c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006560:	6013      	str	r3, [r2, #0]
 8006562:	e7b6      	b.n	80064d2 <HAL_RCC_OscConfig+0x4a>
 8006564:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006568:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	e7a9      	b.n	80064d2 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 800657e:	f7fc ff27 	bl	80033d0 <HAL_GetTick>
 8006582:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006584:	4b6a      	ldr	r3, [pc, #424]	; (8006730 <HAL_RCC_OscConfig+0x2a8>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800658c:	d0be      	beq.n	800650c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800658e:	f7fc ff1f 	bl	80033d0 <HAL_GetTick>
 8006592:	1b40      	subs	r0, r0, r5
 8006594:	2864      	cmp	r0, #100	; 0x64
 8006596:	d9f5      	bls.n	8006584 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 8006598:	2003      	movs	r0, #3
 800659a:	e1d5      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800659c:	2a02      	cmp	r2, #2
 800659e:	d1c2      	bne.n	8006526 <HAL_RCC_OscConfig+0x9e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065a0:	4b63      	ldr	r3, [pc, #396]	; (8006730 <HAL_RCC_OscConfig+0x2a8>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80065a8:	d003      	beq.n	80065b2 <HAL_RCC_OscConfig+0x12a>
 80065aa:	68e3      	ldr	r3, [r4, #12]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 81c6 	beq.w	800693e <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065b2:	4a5f      	ldr	r2, [pc, #380]	; (8006730 <HAL_RCC_OscConfig+0x2a8>)
 80065b4:	6853      	ldr	r3, [r2, #4]
 80065b6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80065ba:	6921      	ldr	r1, [r4, #16]
 80065bc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80065c0:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80065c2:	4b5c      	ldr	r3, [pc, #368]	; (8006734 <HAL_RCC_OscConfig+0x2ac>)
 80065c4:	6818      	ldr	r0, [r3, #0]
 80065c6:	f7fc febf 	bl	8003348 <HAL_InitTick>
 80065ca:	2800      	cmp	r0, #0
 80065cc:	f040 81b9 	bne.w	8006942 <HAL_RCC_OscConfig+0x4ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	f013 0f08 	tst.w	r3, #8
 80065d6:	d04c      	beq.n	8006672 <HAL_RCC_OscConfig+0x1ea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065d8:	6963      	ldr	r3, [r4, #20]
 80065da:	b39b      	cbz	r3, 8006644 <HAL_RCC_OscConfig+0x1bc>
      __HAL_RCC_LSI_ENABLE();
 80065dc:	4a54      	ldr	r2, [pc, #336]	; (8006730 <HAL_RCC_OscConfig+0x2a8>)
 80065de:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80065e2:	f043 0301 	orr.w	r3, r3, #1
 80065e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80065ea:	f7fc fef1 	bl	80033d0 <HAL_GetTick>
 80065ee:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80065f0:	4b4f      	ldr	r3, [pc, #316]	; (8006730 <HAL_RCC_OscConfig+0x2a8>)
 80065f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065f6:	f013 0f02 	tst.w	r3, #2
 80065fa:	d13a      	bne.n	8006672 <HAL_RCC_OscConfig+0x1ea>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065fc:	f7fc fee8 	bl	80033d0 <HAL_GetTick>
 8006600:	1b40      	subs	r0, r0, r5
 8006602:	2802      	cmp	r0, #2
 8006604:	d9f4      	bls.n	80065f0 <HAL_RCC_OscConfig+0x168>
          return HAL_TIMEOUT;
 8006606:	2003      	movs	r0, #3
 8006608:	e19e      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800660a:	4a49      	ldr	r2, [pc, #292]	; (8006730 <HAL_RCC_OscConfig+0x2a8>)
 800660c:	6853      	ldr	r3, [r2, #4]
 800660e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006612:	6921      	ldr	r1, [r4, #16]
 8006614:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006618:	6053      	str	r3, [r2, #4]
 800661a:	e7d9      	b.n	80065d0 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 800661c:	4a44      	ldr	r2, [pc, #272]	; (8006730 <HAL_RCC_OscConfig+0x2a8>)
 800661e:	6813      	ldr	r3, [r2, #0]
 8006620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006624:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006626:	f7fc fed3 	bl	80033d0 <HAL_GetTick>
 800662a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800662c:	4b40      	ldr	r3, [pc, #256]	; (8006730 <HAL_RCC_OscConfig+0x2a8>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006634:	d0cc      	beq.n	80065d0 <HAL_RCC_OscConfig+0x148>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006636:	f7fc fecb 	bl	80033d0 <HAL_GetTick>
 800663a:	1b40      	subs	r0, r0, r5
 800663c:	2802      	cmp	r0, #2
 800663e:	d9f5      	bls.n	800662c <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 8006640:	2003      	movs	r0, #3
 8006642:	e181      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_LSI_DISABLE();
 8006644:	4a3a      	ldr	r2, [pc, #232]	; (8006730 <HAL_RCC_OscConfig+0x2a8>)
 8006646:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800664a:	f023 0301 	bic.w	r3, r3, #1
 800664e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006652:	f7fc febd 	bl	80033d0 <HAL_GetTick>
 8006656:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006658:	4b35      	ldr	r3, [pc, #212]	; (8006730 <HAL_RCC_OscConfig+0x2a8>)
 800665a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800665e:	f013 0f02 	tst.w	r3, #2
 8006662:	d006      	beq.n	8006672 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006664:	f7fc feb4 	bl	80033d0 <HAL_GetTick>
 8006668:	1b40      	subs	r0, r0, r5
 800666a:	2802      	cmp	r0, #2
 800666c:	d9f4      	bls.n	8006658 <HAL_RCC_OscConfig+0x1d0>
          return HAL_TIMEOUT;
 800666e:	2003      	movs	r0, #3
 8006670:	e16a      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006672:	6823      	ldr	r3, [r4, #0]
 8006674:	f013 0f04 	tst.w	r3, #4
 8006678:	f000 8081 	beq.w	800677e <HAL_RCC_OscConfig+0x2f6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800667c:	4b2c      	ldr	r3, [pc, #176]	; (8006730 <HAL_RCC_OscConfig+0x2a8>)
 800667e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006680:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8006684:	d136      	bne.n	80066f4 <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006686:	4b2a      	ldr	r3, [pc, #168]	; (8006730 <HAL_RCC_OscConfig+0x2a8>)
 8006688:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800668a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800668e:	659a      	str	r2, [r3, #88]	; 0x58
 8006690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006696:	9301      	str	r3, [sp, #4]
 8006698:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800669a:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800669c:	4b26      	ldr	r3, [pc, #152]	; (8006738 <HAL_RCC_OscConfig+0x2b0>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80066a4:	d028      	beq.n	80066f8 <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066a6:	68a3      	ldr	r3, [r4, #8]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d039      	beq.n	8006720 <HAL_RCC_OscConfig+0x298>
 80066ac:	2b05      	cmp	r3, #5
 80066ae:	d045      	beq.n	800673c <HAL_RCC_OscConfig+0x2b4>
 80066b0:	4b1f      	ldr	r3, [pc, #124]	; (8006730 <HAL_RCC_OscConfig+0x2a8>)
 80066b2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80066b6:	f022 0201 	bic.w	r2, r2, #1
 80066ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80066be:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80066c2:	f022 0204 	bic.w	r2, r2, #4
 80066c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066ca:	68a3      	ldr	r3, [r4, #8]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d043      	beq.n	8006758 <HAL_RCC_OscConfig+0x2d0>
      tickstart = HAL_GetTick();
 80066d0:	f7fc fe7e 	bl	80033d0 <HAL_GetTick>
 80066d4:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066d6:	4b16      	ldr	r3, [pc, #88]	; (8006730 <HAL_RCC_OscConfig+0x2a8>)
 80066d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066dc:	f013 0f02 	tst.w	r3, #2
 80066e0:	d14c      	bne.n	800677c <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066e2:	f7fc fe75 	bl	80033d0 <HAL_GetTick>
 80066e6:	1b80      	subs	r0, r0, r6
 80066e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80066ec:	4298      	cmp	r0, r3
 80066ee:	d9f2      	bls.n	80066d6 <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 80066f0:	2003      	movs	r0, #3
 80066f2:	e129      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
    FlagStatus       pwrclkchanged = RESET;
 80066f4:	2500      	movs	r5, #0
 80066f6:	e7d1      	b.n	800669c <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066f8:	4a0f      	ldr	r2, [pc, #60]	; (8006738 <HAL_RCC_OscConfig+0x2b0>)
 80066fa:	6813      	ldr	r3, [r2, #0]
 80066fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006700:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006702:	f7fc fe65 	bl	80033d0 <HAL_GetTick>
 8006706:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006708:	4b0b      	ldr	r3, [pc, #44]	; (8006738 <HAL_RCC_OscConfig+0x2b0>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006710:	d1c9      	bne.n	80066a6 <HAL_RCC_OscConfig+0x21e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006712:	f7fc fe5d 	bl	80033d0 <HAL_GetTick>
 8006716:	1b80      	subs	r0, r0, r6
 8006718:	2802      	cmp	r0, #2
 800671a:	d9f5      	bls.n	8006708 <HAL_RCC_OscConfig+0x280>
          return HAL_TIMEOUT;
 800671c:	2003      	movs	r0, #3
 800671e:	e113      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006720:	4a03      	ldr	r2, [pc, #12]	; (8006730 <HAL_RCC_OscConfig+0x2a8>)
 8006722:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006726:	f043 0301 	orr.w	r3, r3, #1
 800672a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800672e:	e7cc      	b.n	80066ca <HAL_RCC_OscConfig+0x242>
 8006730:	40021000 	.word	0x40021000
 8006734:	2000004c 	.word	0x2000004c
 8006738:	40007000 	.word	0x40007000
 800673c:	4b8a      	ldr	r3, [pc, #552]	; (8006968 <HAL_RCC_OscConfig+0x4e0>)
 800673e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006742:	f042 0204 	orr.w	r2, r2, #4
 8006746:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800674a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800674e:	f042 0201 	orr.w	r2, r2, #1
 8006752:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006756:	e7b8      	b.n	80066ca <HAL_RCC_OscConfig+0x242>
      tickstart = HAL_GetTick();
 8006758:	f7fc fe3a 	bl	80033d0 <HAL_GetTick>
 800675c:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800675e:	4b82      	ldr	r3, [pc, #520]	; (8006968 <HAL_RCC_OscConfig+0x4e0>)
 8006760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006764:	f013 0f02 	tst.w	r3, #2
 8006768:	d008      	beq.n	800677c <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800676a:	f7fc fe31 	bl	80033d0 <HAL_GetTick>
 800676e:	1b80      	subs	r0, r0, r6
 8006770:	f241 3388 	movw	r3, #5000	; 0x1388
 8006774:	4298      	cmp	r0, r3
 8006776:	d9f2      	bls.n	800675e <HAL_RCC_OscConfig+0x2d6>
          return HAL_TIMEOUT;
 8006778:	2003      	movs	r0, #3
 800677a:	e0e5      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
    if (pwrclkchanged == SET)
 800677c:	b9e5      	cbnz	r5, 80067b8 <HAL_RCC_OscConfig+0x330>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	f013 0f20 	tst.w	r3, #32
 8006784:	d035      	beq.n	80067f2 <HAL_RCC_OscConfig+0x36a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006786:	69a3      	ldr	r3, [r4, #24]
 8006788:	b1e3      	cbz	r3, 80067c4 <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_HSI48_ENABLE();
 800678a:	4a77      	ldr	r2, [pc, #476]	; (8006968 <HAL_RCC_OscConfig+0x4e0>)
 800678c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8006790:	f043 0301 	orr.w	r3, r3, #1
 8006794:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8006798:	f7fc fe1a 	bl	80033d0 <HAL_GetTick>
 800679c:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800679e:	4b72      	ldr	r3, [pc, #456]	; (8006968 <HAL_RCC_OscConfig+0x4e0>)
 80067a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067a4:	f013 0f02 	tst.w	r3, #2
 80067a8:	d123      	bne.n	80067f2 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067aa:	f7fc fe11 	bl	80033d0 <HAL_GetTick>
 80067ae:	1b40      	subs	r0, r0, r5
 80067b0:	2802      	cmp	r0, #2
 80067b2:	d9f4      	bls.n	800679e <HAL_RCC_OscConfig+0x316>
          return HAL_TIMEOUT;
 80067b4:	2003      	movs	r0, #3
 80067b6:	e0c7      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_PWR_CLK_DISABLE();
 80067b8:	4a6b      	ldr	r2, [pc, #428]	; (8006968 <HAL_RCC_OscConfig+0x4e0>)
 80067ba:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80067bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067c0:	6593      	str	r3, [r2, #88]	; 0x58
 80067c2:	e7dc      	b.n	800677e <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI48_DISABLE();
 80067c4:	4a68      	ldr	r2, [pc, #416]	; (8006968 <HAL_RCC_OscConfig+0x4e0>)
 80067c6:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80067ca:	f023 0301 	bic.w	r3, r3, #1
 80067ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 80067d2:	f7fc fdfd 	bl	80033d0 <HAL_GetTick>
 80067d6:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80067d8:	4b63      	ldr	r3, [pc, #396]	; (8006968 <HAL_RCC_OscConfig+0x4e0>)
 80067da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067de:	f013 0f02 	tst.w	r3, #2
 80067e2:	d006      	beq.n	80067f2 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067e4:	f7fc fdf4 	bl	80033d0 <HAL_GetTick>
 80067e8:	1b40      	subs	r0, r0, r5
 80067ea:	2802      	cmp	r0, #2
 80067ec:	d9f4      	bls.n	80067d8 <HAL_RCC_OscConfig+0x350>
          return HAL_TIMEOUT;
 80067ee:	2003      	movs	r0, #3
 80067f0:	e0aa      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80067f2:	69e3      	ldr	r3, [r4, #28]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 80a6 	beq.w	8006946 <HAL_RCC_OscConfig+0x4be>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067fa:	4a5b      	ldr	r2, [pc, #364]	; (8006968 <HAL_RCC_OscConfig+0x4e0>)
 80067fc:	6892      	ldr	r2, [r2, #8]
 80067fe:	f002 020c 	and.w	r2, r2, #12
 8006802:	2a0c      	cmp	r2, #12
 8006804:	d069      	beq.n	80068da <HAL_RCC_OscConfig+0x452>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006806:	2b02      	cmp	r3, #2
 8006808:	d01d      	beq.n	8006846 <HAL_RCC_OscConfig+0x3be>
        __HAL_RCC_PLL_DISABLE();
 800680a:	4b57      	ldr	r3, [pc, #348]	; (8006968 <HAL_RCC_OscConfig+0x4e0>)
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006812:	601a      	str	r2, [r3, #0]
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006814:	68da      	ldr	r2, [r3, #12]
 8006816:	f022 0203 	bic.w	r2, r2, #3
 800681a:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800681c:	68da      	ldr	r2, [r3, #12]
 800681e:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8006822:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006826:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8006828:	f7fc fdd2 	bl	80033d0 <HAL_GetTick>
 800682c:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800682e:	4b4e      	ldr	r3, [pc, #312]	; (8006968 <HAL_RCC_OscConfig+0x4e0>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006836:	d04e      	beq.n	80068d6 <HAL_RCC_OscConfig+0x44e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006838:	f7fc fdca 	bl	80033d0 <HAL_GetTick>
 800683c:	1b00      	subs	r0, r0, r4
 800683e:	2802      	cmp	r0, #2
 8006840:	d9f5      	bls.n	800682e <HAL_RCC_OscConfig+0x3a6>
            return HAL_TIMEOUT;
 8006842:	2003      	movs	r0, #3
 8006844:	e080      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_DISABLE();
 8006846:	4a48      	ldr	r2, [pc, #288]	; (8006968 <HAL_RCC_OscConfig+0x4e0>)
 8006848:	6813      	ldr	r3, [r2, #0]
 800684a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800684e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006850:	f7fc fdbe 	bl	80033d0 <HAL_GetTick>
 8006854:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006856:	4b44      	ldr	r3, [pc, #272]	; (8006968 <HAL_RCC_OscConfig+0x4e0>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800685e:	d006      	beq.n	800686e <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006860:	f7fc fdb6 	bl	80033d0 <HAL_GetTick>
 8006864:	1b40      	subs	r0, r0, r5
 8006866:	2802      	cmp	r0, #2
 8006868:	d9f5      	bls.n	8006856 <HAL_RCC_OscConfig+0x3ce>
            return HAL_TIMEOUT;
 800686a:	2003      	movs	r0, #3
 800686c:	e06c      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800686e:	4a3e      	ldr	r2, [pc, #248]	; (8006968 <HAL_RCC_OscConfig+0x4e0>)
 8006870:	68d3      	ldr	r3, [r2, #12]
 8006872:	493e      	ldr	r1, [pc, #248]	; (800696c <HAL_RCC_OscConfig+0x4e4>)
 8006874:	4019      	ands	r1, r3
 8006876:	6a23      	ldr	r3, [r4, #32]
 8006878:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800687a:	3801      	subs	r0, #1
 800687c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8006880:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006882:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8006886:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006888:	0840      	lsrs	r0, r0, #1
 800688a:	3801      	subs	r0, #1
 800688c:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8006890:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006892:	0840      	lsrs	r0, r0, #1
 8006894:	3801      	subs	r0, #1
 8006896:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800689a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800689c:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 80068a0:	430b      	orrs	r3, r1
 80068a2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 80068a4:	6813      	ldr	r3, [r2, #0]
 80068a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068aa:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80068ac:	68d3      	ldr	r3, [r2, #12]
 80068ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068b2:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80068b4:	f7fc fd8c 	bl	80033d0 <HAL_GetTick>
 80068b8:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068ba:	4b2b      	ldr	r3, [pc, #172]	; (8006968 <HAL_RCC_OscConfig+0x4e0>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80068c2:	d106      	bne.n	80068d2 <HAL_RCC_OscConfig+0x44a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c4:	f7fc fd84 	bl	80033d0 <HAL_GetTick>
 80068c8:	1b00      	subs	r0, r0, r4
 80068ca:	2802      	cmp	r0, #2
 80068cc:	d9f5      	bls.n	80068ba <HAL_RCC_OscConfig+0x432>
            return HAL_TIMEOUT;
 80068ce:	2003      	movs	r0, #3
 80068d0:	e03a      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 80068d2:	2000      	movs	r0, #0
 80068d4:	e038      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
 80068d6:	2000      	movs	r0, #0
 80068d8:	e036      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d036      	beq.n	800694c <HAL_RCC_OscConfig+0x4c4>
      temp_pllckcfg = RCC->PLLCFGR;
 80068de:	4b22      	ldr	r3, [pc, #136]	; (8006968 <HAL_RCC_OscConfig+0x4e0>)
 80068e0:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068e2:	f003 0103 	and.w	r1, r3, #3
 80068e6:	6a22      	ldr	r2, [r4, #32]
 80068e8:	4291      	cmp	r1, r2
 80068ea:	d131      	bne.n	8006950 <HAL_RCC_OscConfig+0x4c8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80068f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80068f2:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068f4:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80068f8:	d12c      	bne.n	8006954 <HAL_RCC_OscConfig+0x4cc>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80068fa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80068fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006900:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8006904:	d128      	bne.n	8006958 <HAL_RCC_OscConfig+0x4d0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006906:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800690a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800690c:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8006910:	d124      	bne.n	800695c <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006912:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8006916:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006918:	0852      	lsrs	r2, r2, #1
 800691a:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800691c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8006920:	d11e      	bne.n	8006960 <HAL_RCC_OscConfig+0x4d8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006922:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8006926:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006928:	0852      	lsrs	r2, r2, #1
 800692a:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800692c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8006930:	d118      	bne.n	8006964 <HAL_RCC_OscConfig+0x4dc>
  return HAL_OK;
 8006932:	2000      	movs	r0, #0
 8006934:	e008      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
    return HAL_ERROR;
 8006936:	2001      	movs	r0, #1
}
 8006938:	4770      	bx	lr
        return HAL_ERROR;
 800693a:	2001      	movs	r0, #1
 800693c:	e004      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 800693e:	2001      	movs	r0, #1
 8006940:	e002      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
          return HAL_ERROR;
 8006942:	2001      	movs	r0, #1
 8006944:	e000      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 8006946:	2000      	movs	r0, #0
}
 8006948:	b002      	add	sp, #8
 800694a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800694c:	2001      	movs	r0, #1
 800694e:	e7fb      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 8006950:	2001      	movs	r0, #1
 8006952:	e7f9      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
 8006954:	2001      	movs	r0, #1
 8006956:	e7f7      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
 8006958:	2001      	movs	r0, #1
 800695a:	e7f5      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
 800695c:	2001      	movs	r0, #1
 800695e:	e7f3      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
 8006960:	2001      	movs	r0, #1
 8006962:	e7f1      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
 8006964:	2001      	movs	r0, #1
 8006966:	e7ef      	b.n	8006948 <HAL_RCC_OscConfig+0x4c0>
 8006968:	40021000 	.word	0x40021000
 800696c:	019f800c 	.word	0x019f800c

08006970 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006970:	4b1e      	ldr	r3, [pc, #120]	; (80069ec <HAL_RCC_GetSysClockFreq+0x7c>)
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f003 030c 	and.w	r3, r3, #12
 8006978:	2b04      	cmp	r3, #4
 800697a:	d033      	beq.n	80069e4 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800697c:	4b1b      	ldr	r3, [pc, #108]	; (80069ec <HAL_RCC_GetSysClockFreq+0x7c>)
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f003 030c 	and.w	r3, r3, #12
 8006984:	2b08      	cmp	r3, #8
 8006986:	d02f      	beq.n	80069e8 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006988:	4b18      	ldr	r3, [pc, #96]	; (80069ec <HAL_RCC_GetSysClockFreq+0x7c>)
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f003 030c 	and.w	r3, r3, #12
 8006990:	2b0c      	cmp	r3, #12
 8006992:	d001      	beq.n	8006998 <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 8006994:	2000      	movs	r0, #0
}
 8006996:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006998:	4b14      	ldr	r3, [pc, #80]	; (80069ec <HAL_RCC_GetSysClockFreq+0x7c>)
 800699a:	68da      	ldr	r2, [r3, #12]
 800699c:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80069a0:	68d8      	ldr	r0, [r3, #12]
 80069a2:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80069a6:	1c43      	adds	r3, r0, #1
    switch (pllsource)
 80069a8:	2a03      	cmp	r2, #3
 80069aa:	d011      	beq.n	80069d0 <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069ac:	4810      	ldr	r0, [pc, #64]	; (80069f0 <HAL_RCC_GetSysClockFreq+0x80>)
 80069ae:	fbb0 f0f3 	udiv	r0, r0, r3
 80069b2:	4b0e      	ldr	r3, [pc, #56]	; (80069ec <HAL_RCC_GetSysClockFreq+0x7c>)
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80069ba:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80069be:	4b0b      	ldr	r3, [pc, #44]	; (80069ec <HAL_RCC_GetSysClockFreq+0x7c>)
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80069c6:	3301      	adds	r3, #1
 80069c8:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80069ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80069ce:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069d0:	4808      	ldr	r0, [pc, #32]	; (80069f4 <HAL_RCC_GetSysClockFreq+0x84>)
 80069d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80069d6:	4b05      	ldr	r3, [pc, #20]	; (80069ec <HAL_RCC_GetSysClockFreq+0x7c>)
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80069de:	fb03 f000 	mul.w	r0, r3, r0
      break;
 80069e2:	e7ec      	b.n	80069be <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 80069e4:	4802      	ldr	r0, [pc, #8]	; (80069f0 <HAL_RCC_GetSysClockFreq+0x80>)
 80069e6:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80069e8:	4802      	ldr	r0, [pc, #8]	; (80069f4 <HAL_RCC_GetSysClockFreq+0x84>)
 80069ea:	4770      	bx	lr
 80069ec:	40021000 	.word	0x40021000
 80069f0:	00f42400 	.word	0x00f42400
 80069f4:	007a1200 	.word	0x007a1200

080069f8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80069f8:	2800      	cmp	r0, #0
 80069fa:	f000 80e6 	beq.w	8006bca <HAL_RCC_ClockConfig+0x1d2>
{
 80069fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a00:	460c      	mov	r4, r1
 8006a02:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a04:	4b74      	ldr	r3, [pc, #464]	; (8006bd8 <HAL_RCC_ClockConfig+0x1e0>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 030f 	and.w	r3, r3, #15
 8006a0c:	428b      	cmp	r3, r1
 8006a0e:	d20b      	bcs.n	8006a28 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a10:	4a71      	ldr	r2, [pc, #452]	; (8006bd8 <HAL_RCC_ClockConfig+0x1e0>)
 8006a12:	6813      	ldr	r3, [r2, #0]
 8006a14:	f023 030f 	bic.w	r3, r3, #15
 8006a18:	430b      	orrs	r3, r1
 8006a1a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a1c:	6813      	ldr	r3, [r2, #0]
 8006a1e:	f003 030f 	and.w	r3, r3, #15
 8006a22:	428b      	cmp	r3, r1
 8006a24:	f040 80d3 	bne.w	8006bce <HAL_RCC_ClockConfig+0x1d6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a28:	682e      	ldr	r6, [r5, #0]
 8006a2a:	f016 0601 	ands.w	r6, r6, #1
 8006a2e:	d05f      	beq.n	8006af0 <HAL_RCC_ClockConfig+0xf8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a30:	686b      	ldr	r3, [r5, #4]
 8006a32:	2b03      	cmp	r3, #3
 8006a34:	d02f      	beq.n	8006a96 <HAL_RCC_ClockConfig+0x9e>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d04d      	beq.n	8006ad6 <HAL_RCC_ClockConfig+0xde>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a3a:	4b68      	ldr	r3, [pc, #416]	; (8006bdc <HAL_RCC_ClockConfig+0x1e4>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006a42:	f000 80c6 	beq.w	8006bd2 <HAL_RCC_ClockConfig+0x1da>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006a46:	f7ff ff93 	bl	8006970 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8006a4a:	4b65      	ldr	r3, [pc, #404]	; (8006be0 <HAL_RCC_ClockConfig+0x1e8>)
 8006a4c:	4298      	cmp	r0, r3
 8006a4e:	d94d      	bls.n	8006aec <HAL_RCC_ClockConfig+0xf4>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006a50:	4a62      	ldr	r2, [pc, #392]	; (8006bdc <HAL_RCC_ClockConfig+0x1e4>)
 8006a52:	6893      	ldr	r3, [r2, #8]
 8006a54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a5c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006a5e:	2680      	movs	r6, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a60:	4a5e      	ldr	r2, [pc, #376]	; (8006bdc <HAL_RCC_ClockConfig+0x1e4>)
 8006a62:	6893      	ldr	r3, [r2, #8]
 8006a64:	f023 0303 	bic.w	r3, r3, #3
 8006a68:	6869      	ldr	r1, [r5, #4]
 8006a6a:	430b      	orrs	r3, r1
 8006a6c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8006a6e:	f7fc fcaf 	bl	80033d0 <HAL_GetTick>
 8006a72:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a74:	4b59      	ldr	r3, [pc, #356]	; (8006bdc <HAL_RCC_ClockConfig+0x1e4>)
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f003 030c 	and.w	r3, r3, #12
 8006a7c:	686a      	ldr	r2, [r5, #4]
 8006a7e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006a82:	d035      	beq.n	8006af0 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a84:	f7fc fca4 	bl	80033d0 <HAL_GetTick>
 8006a88:	1bc0      	subs	r0, r0, r7
 8006a8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8006a8e:	4298      	cmp	r0, r3
 8006a90:	d9f0      	bls.n	8006a74 <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 8006a92:	2003      	movs	r0, #3
 8006a94:	e078      	b.n	8006b88 <HAL_RCC_ClockConfig+0x190>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a96:	4b51      	ldr	r3, [pc, #324]	; (8006bdc <HAL_RCC_ClockConfig+0x1e4>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006a9e:	d101      	bne.n	8006aa4 <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 8006aa0:	2001      	movs	r0, #1
 8006aa2:	e071      	b.n	8006b88 <HAL_RCC_ClockConfig+0x190>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006aa4:	f7ff fcc4 	bl	8006430 <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 8006aa8:	4b4d      	ldr	r3, [pc, #308]	; (8006be0 <HAL_RCC_ClockConfig+0x1e8>)
 8006aaa:	4298      	cmp	r0, r3
 8006aac:	d91a      	bls.n	8006ae4 <HAL_RCC_ClockConfig+0xec>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006aae:	4b4b      	ldr	r3, [pc, #300]	; (8006bdc <HAL_RCC_ClockConfig+0x1e4>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8006ab6:	d005      	beq.n	8006ac4 <HAL_RCC_ClockConfig+0xcc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006ab8:	682e      	ldr	r6, [r5, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006aba:	f016 0602 	ands.w	r6, r6, #2
 8006abe:	d0cf      	beq.n	8006a60 <HAL_RCC_ClockConfig+0x68>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006ac0:	68ab      	ldr	r3, [r5, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006ac2:	b98b      	cbnz	r3, 8006ae8 <HAL_RCC_ClockConfig+0xf0>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006ac4:	4a45      	ldr	r2, [pc, #276]	; (8006bdc <HAL_RCC_ClockConfig+0x1e4>)
 8006ac6:	6893      	ldr	r3, [r2, #8]
 8006ac8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ad0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006ad2:	2680      	movs	r6, #128	; 0x80
 8006ad4:	e7c4      	b.n	8006a60 <HAL_RCC_ClockConfig+0x68>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ad6:	4b41      	ldr	r3, [pc, #260]	; (8006bdc <HAL_RCC_ClockConfig+0x1e4>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006ade:	d1b2      	bne.n	8006a46 <HAL_RCC_ClockConfig+0x4e>
          return HAL_ERROR;
 8006ae0:	2001      	movs	r0, #1
 8006ae2:	e051      	b.n	8006b88 <HAL_RCC_ClockConfig+0x190>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006ae4:	2600      	movs	r6, #0
 8006ae6:	e7bb      	b.n	8006a60 <HAL_RCC_ClockConfig+0x68>
 8006ae8:	2600      	movs	r6, #0
 8006aea:	e7b9      	b.n	8006a60 <HAL_RCC_ClockConfig+0x68>
 8006aec:	2600      	movs	r6, #0
 8006aee:	e7b7      	b.n	8006a60 <HAL_RCC_ClockConfig+0x68>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006af0:	682b      	ldr	r3, [r5, #0]
 8006af2:	f013 0f02 	tst.w	r3, #2
 8006af6:	d048      	beq.n	8006b8a <HAL_RCC_ClockConfig+0x192>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006af8:	f013 0f04 	tst.w	r3, #4
 8006afc:	d004      	beq.n	8006b08 <HAL_RCC_ClockConfig+0x110>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006afe:	4a37      	ldr	r2, [pc, #220]	; (8006bdc <HAL_RCC_ClockConfig+0x1e4>)
 8006b00:	6893      	ldr	r3, [r2, #8]
 8006b02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006b06:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b08:	682b      	ldr	r3, [r5, #0]
 8006b0a:	f013 0f08 	tst.w	r3, #8
 8006b0e:	d006      	beq.n	8006b1e <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006b10:	4a32      	ldr	r2, [pc, #200]	; (8006bdc <HAL_RCC_ClockConfig+0x1e4>)
 8006b12:	6893      	ldr	r3, [r2, #8]
 8006b14:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006b18:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006b1c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b1e:	4a2f      	ldr	r2, [pc, #188]	; (8006bdc <HAL_RCC_ClockConfig+0x1e4>)
 8006b20:	6893      	ldr	r3, [r2, #8]
 8006b22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b26:	68a9      	ldr	r1, [r5, #8]
 8006b28:	430b      	orrs	r3, r1
 8006b2a:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b2c:	4b2a      	ldr	r3, [pc, #168]	; (8006bd8 <HAL_RCC_ClockConfig+0x1e0>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 030f 	and.w	r3, r3, #15
 8006b34:	42a3      	cmp	r3, r4
 8006b36:	d830      	bhi.n	8006b9a <HAL_RCC_ClockConfig+0x1a2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b38:	682b      	ldr	r3, [r5, #0]
 8006b3a:	f013 0f04 	tst.w	r3, #4
 8006b3e:	d006      	beq.n	8006b4e <HAL_RCC_ClockConfig+0x156>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b40:	4a26      	ldr	r2, [pc, #152]	; (8006bdc <HAL_RCC_ClockConfig+0x1e4>)
 8006b42:	6893      	ldr	r3, [r2, #8]
 8006b44:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006b48:	68e9      	ldr	r1, [r5, #12]
 8006b4a:	430b      	orrs	r3, r1
 8006b4c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b4e:	682b      	ldr	r3, [r5, #0]
 8006b50:	f013 0f08 	tst.w	r3, #8
 8006b54:	d007      	beq.n	8006b66 <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b56:	4a21      	ldr	r2, [pc, #132]	; (8006bdc <HAL_RCC_ClockConfig+0x1e4>)
 8006b58:	6893      	ldr	r3, [r2, #8]
 8006b5a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006b5e:	6929      	ldr	r1, [r5, #16]
 8006b60:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006b64:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b66:	f7ff ff03 	bl	8006970 <HAL_RCC_GetSysClockFreq>
 8006b6a:	4b1c      	ldr	r3, [pc, #112]	; (8006bdc <HAL_RCC_ClockConfig+0x1e4>)
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006b72:	4a1c      	ldr	r2, [pc, #112]	; (8006be4 <HAL_RCC_ClockConfig+0x1ec>)
 8006b74:	5cd3      	ldrb	r3, [r2, r3]
 8006b76:	f003 031f 	and.w	r3, r3, #31
 8006b7a:	40d8      	lsrs	r0, r3
 8006b7c:	4b1a      	ldr	r3, [pc, #104]	; (8006be8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b7e:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8006b80:	4b1a      	ldr	r3, [pc, #104]	; (8006bec <HAL_RCC_ClockConfig+0x1f4>)
 8006b82:	6818      	ldr	r0, [r3, #0]
 8006b84:	f7fc fbe0 	bl	8003348 <HAL_InitTick>
}
 8006b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 8006b8a:	2e80      	cmp	r6, #128	; 0x80
 8006b8c:	d1ce      	bne.n	8006b2c <HAL_RCC_ClockConfig+0x134>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006b8e:	4a13      	ldr	r2, [pc, #76]	; (8006bdc <HAL_RCC_ClockConfig+0x1e4>)
 8006b90:	6893      	ldr	r3, [r2, #8]
 8006b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b96:	6093      	str	r3, [r2, #8]
 8006b98:	e7c8      	b.n	8006b2c <HAL_RCC_ClockConfig+0x134>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b9a:	4a0f      	ldr	r2, [pc, #60]	; (8006bd8 <HAL_RCC_ClockConfig+0x1e0>)
 8006b9c:	6813      	ldr	r3, [r2, #0]
 8006b9e:	f023 030f 	bic.w	r3, r3, #15
 8006ba2:	4323      	orrs	r3, r4
 8006ba4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006ba6:	f7fc fc13 	bl	80033d0 <HAL_GetTick>
 8006baa:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bac:	4b0a      	ldr	r3, [pc, #40]	; (8006bd8 <HAL_RCC_ClockConfig+0x1e0>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 030f 	and.w	r3, r3, #15
 8006bb4:	42a3      	cmp	r3, r4
 8006bb6:	d0bf      	beq.n	8006b38 <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bb8:	f7fc fc0a 	bl	80033d0 <HAL_GetTick>
 8006bbc:	1b80      	subs	r0, r0, r6
 8006bbe:	f241 3388 	movw	r3, #5000	; 0x1388
 8006bc2:	4298      	cmp	r0, r3
 8006bc4:	d9f2      	bls.n	8006bac <HAL_RCC_ClockConfig+0x1b4>
        return HAL_TIMEOUT;
 8006bc6:	2003      	movs	r0, #3
 8006bc8:	e7de      	b.n	8006b88 <HAL_RCC_ClockConfig+0x190>
    return HAL_ERROR;
 8006bca:	2001      	movs	r0, #1
}
 8006bcc:	4770      	bx	lr
      return HAL_ERROR;
 8006bce:	2001      	movs	r0, #1
 8006bd0:	e7da      	b.n	8006b88 <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
 8006bd2:	2001      	movs	r0, #1
 8006bd4:	e7d8      	b.n	8006b88 <HAL_RCC_ClockConfig+0x190>
 8006bd6:	bf00      	nop
 8006bd8:	40022000 	.word	0x40022000
 8006bdc:	40021000 	.word	0x40021000
 8006be0:	04c4b400 	.word	0x04c4b400
 8006be4:	0800f928 	.word	0x0800f928
 8006be8:	20000044 	.word	0x20000044
 8006bec:	2000004c 	.word	0x2000004c

08006bf0 <HAL_RCC_GetHCLKFreq>:
}
 8006bf0:	4b01      	ldr	r3, [pc, #4]	; (8006bf8 <HAL_RCC_GetHCLKFreq+0x8>)
 8006bf2:	6818      	ldr	r0, [r3, #0]
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	20000044 	.word	0x20000044

08006bfc <HAL_RCC_GetPCLK1Freq>:
{
 8006bfc:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006bfe:	f7ff fff7 	bl	8006bf0 <HAL_RCC_GetHCLKFreq>
 8006c02:	4b05      	ldr	r3, [pc, #20]	; (8006c18 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006c0a:	4a04      	ldr	r2, [pc, #16]	; (8006c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c0c:	5cd3      	ldrb	r3, [r2, r3]
 8006c0e:	f003 031f 	and.w	r3, r3, #31
}
 8006c12:	40d8      	lsrs	r0, r3
 8006c14:	bd08      	pop	{r3, pc}
 8006c16:	bf00      	nop
 8006c18:	40021000 	.word	0x40021000
 8006c1c:	0800f938 	.word	0x0800f938

08006c20 <HAL_RCC_GetPCLK2Freq>:
{
 8006c20:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006c22:	f7ff ffe5 	bl	8006bf0 <HAL_RCC_GetHCLKFreq>
 8006c26:	4b05      	ldr	r3, [pc, #20]	; (8006c3c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006c2e:	4a04      	ldr	r2, [pc, #16]	; (8006c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c30:	5cd3      	ldrb	r3, [r2, r3]
 8006c32:	f003 031f 	and.w	r3, r3, #31
}
 8006c36:	40d8      	lsrs	r0, r3
 8006c38:	bd08      	pop	{r3, pc}
 8006c3a:	bf00      	nop
 8006c3c:	40021000 	.word	0x40021000
 8006c40:	0800f938 	.word	0x0800f938

08006c44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c46:	b083      	sub	sp, #12
 8006c48:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c4a:	6803      	ldr	r3, [r0, #0]
 8006c4c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8006c50:	d06e      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xec>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c52:	4b35      	ldr	r3, [pc, #212]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c56:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8006c5a:	d11e      	bne.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c5c:	4b32      	ldr	r3, [pc, #200]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006c5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c60:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006c64:	659a      	str	r2, [r3, #88]	; 0x58
 8006c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c6c:	9301      	str	r3, [sp, #4]
 8006c6e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006c70:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c72:	4a2e      	ldr	r2, [pc, #184]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006c74:	6813      	ldr	r3, [r2, #0]
 8006c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c7c:	f7fc fba8 	bl	80033d0 <HAL_GetTick>
 8006c80:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c82:	4b2a      	ldr	r3, [pc, #168]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006c8a:	d108      	bne.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c8c:	f7fc fba0 	bl	80033d0 <HAL_GetTick>
 8006c90:	1b40      	subs	r0, r0, r5
 8006c92:	2802      	cmp	r0, #2
 8006c94:	d9f5      	bls.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 8006c96:	2503      	movs	r5, #3
 8006c98:	e002      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 8006c9a:	2600      	movs	r6, #0
 8006c9c:	e7e9      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c9e:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 8006ca0:	bb45      	cbnz	r5, 8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006ca2:	4b21      	ldr	r3, [pc, #132]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006ca8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006cac:	d015      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x96>
 8006cae:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d012      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006cb4:	4a1c      	ldr	r2, [pc, #112]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006cb6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006cbe:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8006cc2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8006cc6:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006cca:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8006cce:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8006cd2:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006cd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006cda:	f013 0f01 	tst.w	r3, #1
 8006cde:	d110      	bne.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 8006ce0:	b945      	cbnz	r5, 8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ce2:	4a11      	ldr	r2, [pc, #68]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006ce4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cec:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006cee:	430b      	orrs	r3, r1
 8006cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006cf4:	b1ee      	cbz	r6, 8006d32 <HAL_RCCEx_PeriphCLKConfig+0xee>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cf6:	4a0c      	ldr	r2, [pc, #48]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006cf8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006cfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cfe:	6593      	str	r3, [r2, #88]	; 0x58
 8006d00:	e017      	b.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0xee>
        tickstart = HAL_GetTick();
 8006d02:	f7fc fb65 	bl	80033d0 <HAL_GetTick>
 8006d06:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d08:	4b07      	ldr	r3, [pc, #28]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d0e:	f013 0f02 	tst.w	r3, #2
 8006d12:	d1e5      	bne.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d14:	f7fc fb5c 	bl	80033d0 <HAL_GetTick>
 8006d18:	1bc0      	subs	r0, r0, r7
 8006d1a:	f241 3388 	movw	r3, #5000	; 0x1388
 8006d1e:	4298      	cmp	r0, r3
 8006d20:	d9f2      	bls.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 8006d22:	2503      	movs	r5, #3
 8006d24:	e7dc      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8006d26:	bf00      	nop
 8006d28:	40021000 	.word	0x40021000
 8006d2c:	40007000 	.word	0x40007000
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d30:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d32:	6823      	ldr	r3, [r4, #0]
 8006d34:	f013 0f01 	tst.w	r3, #1
 8006d38:	d008      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d3a:	4a9f      	ldr	r2, [pc, #636]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d3c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006d40:	f023 0303 	bic.w	r3, r3, #3
 8006d44:	6861      	ldr	r1, [r4, #4]
 8006d46:	430b      	orrs	r3, r1
 8006d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d4c:	6823      	ldr	r3, [r4, #0]
 8006d4e:	f013 0f02 	tst.w	r3, #2
 8006d52:	d008      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d54:	4a98      	ldr	r2, [pc, #608]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d56:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006d5a:	f023 030c 	bic.w	r3, r3, #12
 8006d5e:	68a1      	ldr	r1, [r4, #8]
 8006d60:	430b      	orrs	r3, r1
 8006d62:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	f013 0f04 	tst.w	r3, #4
 8006d6c:	d008      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006d6e:	4a92      	ldr	r2, [pc, #584]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d70:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006d74:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006d78:	68e1      	ldr	r1, [r4, #12]
 8006d7a:	430b      	orrs	r3, r1
 8006d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006d80:	6823      	ldr	r3, [r4, #0]
 8006d82:	f013 0f08 	tst.w	r3, #8
 8006d86:	d008      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006d88:	4a8b      	ldr	r2, [pc, #556]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d8a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006d8e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006d92:	6921      	ldr	r1, [r4, #16]
 8006d94:	430b      	orrs	r3, r1
 8006d96:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006d9a:	6823      	ldr	r3, [r4, #0]
 8006d9c:	f013 0f10 	tst.w	r3, #16
 8006da0:	d008      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006da2:	4a85      	ldr	r2, [pc, #532]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006da4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dac:	6961      	ldr	r1, [r4, #20]
 8006dae:	430b      	orrs	r3, r1
 8006db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006db4:	6823      	ldr	r3, [r4, #0]
 8006db6:	f013 0f20 	tst.w	r3, #32
 8006dba:	d008      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006dbc:	4a7e      	ldr	r2, [pc, #504]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dbe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006dc2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006dc6:	69a1      	ldr	r1, [r4, #24]
 8006dc8:	430b      	orrs	r3, r1
 8006dca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006dce:	6823      	ldr	r3, [r4, #0]
 8006dd0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006dd4:	d008      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006dd6:	4a78      	ldr	r2, [pc, #480]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dd8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006ddc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006de0:	69e1      	ldr	r1, [r4, #28]
 8006de2:	430b      	orrs	r3, r1
 8006de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006de8:	6823      	ldr	r3, [r4, #0]
 8006dea:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006dee:	d008      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006df0:	4a71      	ldr	r2, [pc, #452]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006df2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006df6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006dfa:	6a21      	ldr	r1, [r4, #32]
 8006dfc:	430b      	orrs	r3, r1
 8006dfe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006e02:	6823      	ldr	r3, [r4, #0]
 8006e04:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006e08:	d008      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006e0a:	4a6b      	ldr	r2, [pc, #428]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e0c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006e10:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006e14:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006e16:	430b      	orrs	r3, r1
 8006e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e1c:	6823      	ldr	r3, [r4, #0]
 8006e1e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006e22:	d008      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e24:	4a64      	ldr	r2, [pc, #400]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e26:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8006e2a:	f023 0303 	bic.w	r3, r3, #3
 8006e2e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006e30:	430b      	orrs	r3, r1
 8006e32:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006e3c:	d008      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e3e:	4a5e      	ldr	r2, [pc, #376]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e40:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006e44:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8006e48:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006e4a:	430b      	orrs	r3, r1
 8006e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006e50:	6823      	ldr	r3, [r4, #0]
 8006e52:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006e56:	d00c      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e58:	4a57      	ldr	r2, [pc, #348]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e5a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006e5e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006e62:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006e64:	430b      	orrs	r3, r1
 8006e66:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006e6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006e6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e70:	d079      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x322>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006e72:	6823      	ldr	r3, [r4, #0]
 8006e74:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006e78:	d00c      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006e7a:	4a4f      	ldr	r2, [pc, #316]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e7c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006e80:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006e84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e86:	430b      	orrs	r3, r1
 8006e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006e8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e92:	d06d      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8006e9a:	d00c      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e9c:	4a46      	ldr	r2, [pc, #280]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e9e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006ea2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8006ea6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006ea8:	430b      	orrs	r3, r1
 8006eaa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006eae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006eb4:	d061      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x336>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006eb6:	6823      	ldr	r3, [r4, #0]
 8006eb8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006ebc:	d00c      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ebe:	4a3e      	ldr	r2, [pc, #248]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ec0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006ec4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8006ec8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006eca:	430b      	orrs	r3, r1
 8006ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006ed0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006ed2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ed6:	d055      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x340>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006ed8:	6823      	ldr	r3, [r4, #0]
 8006eda:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006ede:	d00c      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ee0:	4a35      	ldr	r2, [pc, #212]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ee2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006ee6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8006eea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006eec:	430b      	orrs	r3, r1
 8006eee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006ef2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ef4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ef8:	d049      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006efa:	6823      	ldr	r3, [r4, #0]
 8006efc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006f00:	d00c      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006f02:	4a2d      	ldr	r2, [pc, #180]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f04:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006f08:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006f0c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006f0e:	430b      	orrs	r3, r1
 8006f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006f14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006f16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f1a:	d03d      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x354>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006f22:	d00c      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006f24:	4a24      	ldr	r2, [pc, #144]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f26:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006f2a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006f2e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006f30:	430b      	orrs	r3, r1
 8006f32:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006f36:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f3c:	d031      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8006f44:	d00c      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006f46:	4a1c      	ldr	r2, [pc, #112]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f48:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8006f4c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006f50:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006f52:	430b      	orrs	r3, r1
 8006f54:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006f58:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006f5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f5e:	d025      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x368>
  }

#endif /* QUADSPI */

  return status;
}
 8006f60:	4628      	mov	r0, r5
 8006f62:	b003      	add	sp, #12
 8006f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f66:	68d3      	ldr	r3, [r2, #12]
 8006f68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f6c:	60d3      	str	r3, [r2, #12]
 8006f6e:	e780      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x22e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f70:	68d3      	ldr	r3, [r2, #12]
 8006f72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f76:	60d3      	str	r3, [r2, #12]
 8006f78:	e78c      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f7a:	68d3      	ldr	r3, [r2, #12]
 8006f7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f80:	60d3      	str	r3, [r2, #12]
 8006f82:	e798      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x272>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f84:	68d3      	ldr	r3, [r2, #12]
 8006f86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f8a:	60d3      	str	r3, [r2, #12]
 8006f8c:	e7a4      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x294>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f8e:	68d3      	ldr	r3, [r2, #12]
 8006f90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f94:	60d3      	str	r3, [r2, #12]
 8006f96:	e7b0      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006f98:	68d3      	ldr	r3, [r2, #12]
 8006f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f9e:	60d3      	str	r3, [r2, #12]
 8006fa0:	e7bc      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006fa2:	68d3      	ldr	r3, [r2, #12]
 8006fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fa8:	60d3      	str	r3, [r2, #12]
 8006faa:	e7c8      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fac:	68d3      	ldr	r3, [r2, #12]
 8006fae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fb2:	60d3      	str	r3, [r2, #12]
 8006fb4:	e7d4      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8006fb6:	bf00      	nop
 8006fb8:	40021000 	.word	0x40021000

08006fbc <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	d06f      	beq.n	80070a0 <HAL_SPI_Init+0xe4>
{
 8006fc0:	b510      	push	{r4, lr}
 8006fc2:	4604      	mov	r4, r0
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006fc4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006fc6:	b933      	cbnz	r3, 8006fd6 <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fc8:	6843      	ldr	r3, [r0, #4]
 8006fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fce:	d005      	beq.n	8006fdc <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	61c3      	str	r3, [r0, #28]
 8006fd4:	e002      	b.n	8006fdc <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006fda:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fe0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d052      	beq.n	800708e <HAL_SPI_Init+0xd2>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fe8:	2302      	movs	r3, #2
 8006fea:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fee:	6822      	ldr	r2, [r4, #0]
 8006ff0:	6813      	ldr	r3, [r2, #0]
 8006ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ff6:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ff8:	68e3      	ldr	r3, [r4, #12]
 8006ffa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ffe:	d94c      	bls.n	800709a <HAL_SPI_Init+0xde>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007000:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007002:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007006:	d004      	beq.n	8007012 <HAL_SPI_Init+0x56>
 8007008:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800700c:	d001      	beq.n	8007012 <HAL_SPI_Init+0x56>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800700e:	2300      	movs	r3, #0
 8007010:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007012:	6863      	ldr	r3, [r4, #4]
 8007014:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8007018:	68a1      	ldr	r1, [r4, #8]
 800701a:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800701e:	430b      	orrs	r3, r1
 8007020:	6921      	ldr	r1, [r4, #16]
 8007022:	f001 0102 	and.w	r1, r1, #2
 8007026:	430b      	orrs	r3, r1
 8007028:	6961      	ldr	r1, [r4, #20]
 800702a:	f001 0101 	and.w	r1, r1, #1
 800702e:	430b      	orrs	r3, r1
 8007030:	69a1      	ldr	r1, [r4, #24]
 8007032:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8007036:	430b      	orrs	r3, r1
 8007038:	69e1      	ldr	r1, [r4, #28]
 800703a:	f001 0138 	and.w	r1, r1, #56	; 0x38
 800703e:	430b      	orrs	r3, r1
 8007040:	6a21      	ldr	r1, [r4, #32]
 8007042:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8007046:	430b      	orrs	r3, r1
 8007048:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800704a:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 800704e:	6820      	ldr	r0, [r4, #0]
 8007050:	430b      	orrs	r3, r1
 8007052:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007054:	8b63      	ldrh	r3, [r4, #26]
 8007056:	f003 0304 	and.w	r3, r3, #4
 800705a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800705c:	f001 0110 	and.w	r1, r1, #16
 8007060:	430b      	orrs	r3, r1
 8007062:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007064:	f001 0108 	and.w	r1, r1, #8
 8007068:	430b      	orrs	r3, r1
 800706a:	68e1      	ldr	r1, [r4, #12]
 800706c:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8007070:	430b      	orrs	r3, r1
 8007072:	6821      	ldr	r1, [r4, #0]
 8007074:	4313      	orrs	r3, r2
 8007076:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007078:	6822      	ldr	r2, [r4, #0]
 800707a:	69d3      	ldr	r3, [r2, #28]
 800707c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007080:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007082:	2000      	movs	r0, #0
 8007084:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007086:	2301      	movs	r3, #1
 8007088:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 800708c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800708e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8007092:	4620      	mov	r0, r4
 8007094:	f7fb fa7a 	bl	800258c <HAL_SPI_MspInit>
 8007098:	e7a6      	b.n	8006fe8 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800709a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800709e:	e7b0      	b.n	8007002 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 80070a0:	2001      	movs	r0, #1
}
 80070a2:	4770      	bx	lr

080070a4 <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80070a4:	b340      	cbz	r0, 80070f8 <HAL_SRAM_Init+0x54>
{
 80070a6:	b570      	push	{r4, r5, r6, lr}
 80070a8:	460e      	mov	r6, r1
 80070aa:	4615      	mov	r5, r2
 80070ac:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80070ae:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80070b2:	b1e3      	cbz	r3, 80070ee <HAL_SRAM_Init+0x4a>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80070b4:	4621      	mov	r1, r4
 80070b6:	f851 0b08 	ldr.w	r0, [r1], #8
 80070ba:	f001 f87d 	bl	80081b8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80070be:	68a2      	ldr	r2, [r4, #8]
 80070c0:	4631      	mov	r1, r6
 80070c2:	6820      	ldr	r0, [r4, #0]
 80070c4:	f001 f8e8 	bl	8008298 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80070c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80070ca:	68a2      	ldr	r2, [r4, #8]
 80070cc:	4629      	mov	r1, r5
 80070ce:	6860      	ldr	r0, [r4, #4]
 80070d0:	f001 f915 	bl	80082fe <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80070d4:	6822      	ldr	r2, [r4, #0]
 80070d6:	68a1      	ldr	r1, [r4, #8]
 80070d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070dc:	f043 0301 	orr.w	r3, r3, #1
 80070e0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80070e4:	2301      	movs	r3, #1
 80070e6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 80070ea:	2000      	movs	r0, #0
}
 80070ec:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 80070ee:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SRAM_MspInit(hsram);
 80070f2:	f7fa fc6b 	bl	80019cc <HAL_SRAM_MspInit>
 80070f6:	e7dd      	b.n	80070b4 <HAL_SRAM_Init+0x10>
    return HAL_ERROR;
 80070f8:	2001      	movs	r0, #1
}
 80070fa:	4770      	bx	lr

080070fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070fc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070fe:	6a03      	ldr	r3, [r0, #32]
 8007100:	f023 0301 	bic.w	r3, r3, #1
 8007104:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007106:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007108:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800710a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800710c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007110:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007114:	680c      	ldr	r4, [r1, #0]
 8007116:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007118:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800711c:	688c      	ldr	r4, [r1, #8]
 800711e:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007120:	4c21      	ldr	r4, [pc, #132]	; (80071a8 <TIM_OC1_SetConfig+0xac>)
 8007122:	42a0      	cmp	r0, r4
 8007124:	d013      	beq.n	800714e <TIM_OC1_SetConfig+0x52>
 8007126:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800712a:	42a0      	cmp	r0, r4
 800712c:	d00f      	beq.n	800714e <TIM_OC1_SetConfig+0x52>
 800712e:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8007132:	42a0      	cmp	r0, r4
 8007134:	d00b      	beq.n	800714e <TIM_OC1_SetConfig+0x52>
 8007136:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800713a:	42a0      	cmp	r0, r4
 800713c:	d007      	beq.n	800714e <TIM_OC1_SetConfig+0x52>
 800713e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007142:	42a0      	cmp	r0, r4
 8007144:	d003      	beq.n	800714e <TIM_OC1_SetConfig+0x52>
 8007146:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800714a:	42a0      	cmp	r0, r4
 800714c:	d105      	bne.n	800715a <TIM_OC1_SetConfig+0x5e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800714e:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007152:	68cc      	ldr	r4, [r1, #12]
 8007154:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007156:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800715a:	4c13      	ldr	r4, [pc, #76]	; (80071a8 <TIM_OC1_SetConfig+0xac>)
 800715c:	42a0      	cmp	r0, r4
 800715e:	d013      	beq.n	8007188 <TIM_OC1_SetConfig+0x8c>
 8007160:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007164:	42a0      	cmp	r0, r4
 8007166:	d00f      	beq.n	8007188 <TIM_OC1_SetConfig+0x8c>
 8007168:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800716c:	42a0      	cmp	r0, r4
 800716e:	d00b      	beq.n	8007188 <TIM_OC1_SetConfig+0x8c>
 8007170:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007174:	42a0      	cmp	r0, r4
 8007176:	d007      	beq.n	8007188 <TIM_OC1_SetConfig+0x8c>
 8007178:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800717c:	42a0      	cmp	r0, r4
 800717e:	d003      	beq.n	8007188 <TIM_OC1_SetConfig+0x8c>
 8007180:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007184:	42a0      	cmp	r0, r4
 8007186:	d107      	bne.n	8007198 <TIM_OC1_SetConfig+0x9c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007188:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800718c:	694c      	ldr	r4, [r1, #20]
 800718e:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007192:	698d      	ldr	r5, [r1, #24]
 8007194:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007198:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800719a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800719c:	684a      	ldr	r2, [r1, #4]
 800719e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071a0:	6203      	str	r3, [r0, #32]
}
 80071a2:	bc30      	pop	{r4, r5}
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	40012c00 	.word	0x40012c00

080071ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071ac:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071ae:	6a03      	ldr	r3, [r0, #32]
 80071b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071b4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071b6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071b8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071ba:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80071c0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071c4:	680d      	ldr	r5, [r1, #0]
 80071c6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071cc:	688d      	ldr	r5, [r1, #8]
 80071ce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071d2:	4d1c      	ldr	r5, [pc, #112]	; (8007244 <TIM_OC3_SetConfig+0x98>)
 80071d4:	42a8      	cmp	r0, r5
 80071d6:	d007      	beq.n	80071e8 <TIM_OC3_SetConfig+0x3c>
 80071d8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80071dc:	42a8      	cmp	r0, r5
 80071de:	d003      	beq.n	80071e8 <TIM_OC3_SetConfig+0x3c>
 80071e0:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80071e4:	42a8      	cmp	r0, r5
 80071e6:	d106      	bne.n	80071f6 <TIM_OC3_SetConfig+0x4a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071ec:	68cd      	ldr	r5, [r1, #12]
 80071ee:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071f6:	4d13      	ldr	r5, [pc, #76]	; (8007244 <TIM_OC3_SetConfig+0x98>)
 80071f8:	42a8      	cmp	r0, r5
 80071fa:	d013      	beq.n	8007224 <TIM_OC3_SetConfig+0x78>
 80071fc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007200:	42a8      	cmp	r0, r5
 8007202:	d00f      	beq.n	8007224 <TIM_OC3_SetConfig+0x78>
 8007204:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8007208:	42a8      	cmp	r0, r5
 800720a:	d00b      	beq.n	8007224 <TIM_OC3_SetConfig+0x78>
 800720c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007210:	42a8      	cmp	r0, r5
 8007212:	d007      	beq.n	8007224 <TIM_OC3_SetConfig+0x78>
 8007214:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007218:	42a8      	cmp	r0, r5
 800721a:	d003      	beq.n	8007224 <TIM_OC3_SetConfig+0x78>
 800721c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007220:	42a8      	cmp	r0, r5
 8007222:	d107      	bne.n	8007234 <TIM_OC3_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007224:	f424 5c40 	bic.w	ip, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007228:	694c      	ldr	r4, [r1, #20]
 800722a:	ea4c 1c04 	orr.w	ip, ip, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800722e:	698c      	ldr	r4, [r1, #24]
 8007230:	ea4c 1404 	orr.w	r4, ip, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007234:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007236:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007238:	684a      	ldr	r2, [r1, #4]
 800723a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800723c:	6203      	str	r3, [r0, #32]
}
 800723e:	bc30      	pop	{r4, r5}
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	40012c00 	.word	0x40012c00

08007248 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007248:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800724a:	6a03      	ldr	r3, [r0, #32]
 800724c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007250:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007252:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007254:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007256:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007258:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800725c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007260:	680d      	ldr	r5, [r1, #0]
 8007262:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007266:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800726a:	688d      	ldr	r5, [r1, #8]
 800726c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007270:	4d1b      	ldr	r5, [pc, #108]	; (80072e0 <TIM_OC4_SetConfig+0x98>)
 8007272:	42a8      	cmp	r0, r5
 8007274:	d007      	beq.n	8007286 <TIM_OC4_SetConfig+0x3e>
 8007276:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800727a:	42a8      	cmp	r0, r5
 800727c:	d003      	beq.n	8007286 <TIM_OC4_SetConfig+0x3e>
 800727e:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8007282:	42a8      	cmp	r0, r5
 8007284:	d106      	bne.n	8007294 <TIM_OC4_SetConfig+0x4c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007286:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800728a:	68cd      	ldr	r5, [r1, #12]
 800728c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007290:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007294:	4d12      	ldr	r5, [pc, #72]	; (80072e0 <TIM_OC4_SetConfig+0x98>)
 8007296:	42a8      	cmp	r0, r5
 8007298:	d013      	beq.n	80072c2 <TIM_OC4_SetConfig+0x7a>
 800729a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800729e:	42a8      	cmp	r0, r5
 80072a0:	d00f      	beq.n	80072c2 <TIM_OC4_SetConfig+0x7a>
 80072a2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80072a6:	42a8      	cmp	r0, r5
 80072a8:	d00b      	beq.n	80072c2 <TIM_OC4_SetConfig+0x7a>
 80072aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80072ae:	42a8      	cmp	r0, r5
 80072b0:	d007      	beq.n	80072c2 <TIM_OC4_SetConfig+0x7a>
 80072b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80072b6:	42a8      	cmp	r0, r5
 80072b8:	d003      	beq.n	80072c2 <TIM_OC4_SetConfig+0x7a>
 80072ba:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80072be:	42a8      	cmp	r0, r5
 80072c0:	d107      	bne.n	80072d2 <TIM_OC4_SetConfig+0x8a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80072c2:	f424 4c40 	bic.w	ip, r4, #49152	; 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072c6:	694c      	ldr	r4, [r1, #20]
 80072c8:	ea4c 1c84 	orr.w	ip, ip, r4, lsl #6
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80072cc:	698c      	ldr	r4, [r1, #24]
 80072ce:	ea4c 1484 	orr.w	r4, ip, r4, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072d2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072d4:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072d6:	684a      	ldr	r2, [r1, #4]
 80072d8:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072da:	6203      	str	r3, [r0, #32]
}
 80072dc:	bc30      	pop	{r4, r5}
 80072de:	4770      	bx	lr
 80072e0:	40012c00 	.word	0x40012c00

080072e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80072e4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80072e6:	6a03      	ldr	r3, [r0, #32]
 80072e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072ec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072f0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072f2:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80072f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80072f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072fc:	680d      	ldr	r5, [r1, #0]
 80072fe:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007300:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007304:	688d      	ldr	r5, [r1, #8]
 8007306:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800730a:	4d11      	ldr	r5, [pc, #68]	; (8007350 <TIM_OC5_SetConfig+0x6c>)
 800730c:	42a8      	cmp	r0, r5
 800730e:	d013      	beq.n	8007338 <TIM_OC5_SetConfig+0x54>
 8007310:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007314:	42a8      	cmp	r0, r5
 8007316:	d00f      	beq.n	8007338 <TIM_OC5_SetConfig+0x54>
 8007318:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800731c:	42a8      	cmp	r0, r5
 800731e:	d00b      	beq.n	8007338 <TIM_OC5_SetConfig+0x54>
 8007320:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007324:	42a8      	cmp	r0, r5
 8007326:	d007      	beq.n	8007338 <TIM_OC5_SetConfig+0x54>
 8007328:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800732c:	42a8      	cmp	r0, r5
 800732e:	d003      	beq.n	8007338 <TIM_OC5_SetConfig+0x54>
 8007330:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007334:	42a8      	cmp	r0, r5
 8007336:	d104      	bne.n	8007342 <TIM_OC5_SetConfig+0x5e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007338:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800733c:	694d      	ldr	r5, [r1, #20]
 800733e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007342:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007344:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007346:	684a      	ldr	r2, [r1, #4]
 8007348:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800734a:	6203      	str	r3, [r0, #32]
}
 800734c:	bc30      	pop	{r4, r5}
 800734e:	4770      	bx	lr
 8007350:	40012c00 	.word	0x40012c00

08007354 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007354:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007356:	6a03      	ldr	r3, [r0, #32]
 8007358:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800735c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800735e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007360:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007362:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007364:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007368:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800736c:	680d      	ldr	r5, [r1, #0]
 800736e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007372:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007376:	688d      	ldr	r5, [r1, #8]
 8007378:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800737c:	4d11      	ldr	r5, [pc, #68]	; (80073c4 <TIM_OC6_SetConfig+0x70>)
 800737e:	42a8      	cmp	r0, r5
 8007380:	d013      	beq.n	80073aa <TIM_OC6_SetConfig+0x56>
 8007382:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007386:	42a8      	cmp	r0, r5
 8007388:	d00f      	beq.n	80073aa <TIM_OC6_SetConfig+0x56>
 800738a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800738e:	42a8      	cmp	r0, r5
 8007390:	d00b      	beq.n	80073aa <TIM_OC6_SetConfig+0x56>
 8007392:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007396:	42a8      	cmp	r0, r5
 8007398:	d007      	beq.n	80073aa <TIM_OC6_SetConfig+0x56>
 800739a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800739e:	42a8      	cmp	r0, r5
 80073a0:	d003      	beq.n	80073aa <TIM_OC6_SetConfig+0x56>
 80073a2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80073a6:	42a8      	cmp	r0, r5
 80073a8:	d104      	bne.n	80073b4 <TIM_OC6_SetConfig+0x60>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80073aa:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80073ae:	694d      	ldr	r5, [r1, #20]
 80073b0:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073b4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073b6:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80073b8:	684a      	ldr	r2, [r1, #4]
 80073ba:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073bc:	6203      	str	r3, [r0, #32]
}
 80073be:	bc30      	pop	{r4, r5}
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	40012c00 	.word	0x40012c00

080073c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073c8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073ca:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073cc:	6a04      	ldr	r4, [r0, #32]
 80073ce:	f024 0401 	bic.w	r4, r4, #1
 80073d2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073d4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073d6:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073da:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073de:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80073e2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073e4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80073e6:	6203      	str	r3, [r0, #32]
}
 80073e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073ee:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073f0:	6a04      	ldr	r4, [r0, #32]
 80073f2:	f024 0410 	bic.w	r4, r4, #16
 80073f6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073f8:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80073fa:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073fc:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007400:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007404:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007408:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800740c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800740e:	6203      	str	r3, [r0, #32]
}
 8007410:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007414:	4770      	bx	lr

08007416 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007416:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007418:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800741c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007420:	430b      	orrs	r3, r1
 8007422:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007426:	6083      	str	r3, [r0, #8]
}
 8007428:	4770      	bx	lr

0800742a <HAL_TIM_PWM_MspInit>:
}
 800742a:	4770      	bx	lr

0800742c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800742c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800742e:	4a36      	ldr	r2, [pc, #216]	; (8007508 <TIM_Base_SetConfig+0xdc>)
 8007430:	4290      	cmp	r0, r2
 8007432:	d016      	beq.n	8007462 <TIM_Base_SetConfig+0x36>
 8007434:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007438:	d013      	beq.n	8007462 <TIM_Base_SetConfig+0x36>
 800743a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800743e:	4290      	cmp	r0, r2
 8007440:	d00f      	beq.n	8007462 <TIM_Base_SetConfig+0x36>
 8007442:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007446:	4290      	cmp	r0, r2
 8007448:	d00b      	beq.n	8007462 <TIM_Base_SetConfig+0x36>
 800744a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800744e:	4290      	cmp	r0, r2
 8007450:	d007      	beq.n	8007462 <TIM_Base_SetConfig+0x36>
 8007452:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8007456:	4290      	cmp	r0, r2
 8007458:	d003      	beq.n	8007462 <TIM_Base_SetConfig+0x36>
 800745a:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800745e:	4290      	cmp	r0, r2
 8007460:	d103      	bne.n	800746a <TIM_Base_SetConfig+0x3e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007466:	684a      	ldr	r2, [r1, #4]
 8007468:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800746a:	4a27      	ldr	r2, [pc, #156]	; (8007508 <TIM_Base_SetConfig+0xdc>)
 800746c:	4290      	cmp	r0, r2
 800746e:	d022      	beq.n	80074b6 <TIM_Base_SetConfig+0x8a>
 8007470:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007474:	d01f      	beq.n	80074b6 <TIM_Base_SetConfig+0x8a>
 8007476:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800747a:	4290      	cmp	r0, r2
 800747c:	d01b      	beq.n	80074b6 <TIM_Base_SetConfig+0x8a>
 800747e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007482:	4290      	cmp	r0, r2
 8007484:	d017      	beq.n	80074b6 <TIM_Base_SetConfig+0x8a>
 8007486:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800748a:	4290      	cmp	r0, r2
 800748c:	d013      	beq.n	80074b6 <TIM_Base_SetConfig+0x8a>
 800748e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8007492:	4290      	cmp	r0, r2
 8007494:	d00f      	beq.n	80074b6 <TIM_Base_SetConfig+0x8a>
 8007496:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800749a:	4290      	cmp	r0, r2
 800749c:	d00b      	beq.n	80074b6 <TIM_Base_SetConfig+0x8a>
 800749e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074a2:	4290      	cmp	r0, r2
 80074a4:	d007      	beq.n	80074b6 <TIM_Base_SetConfig+0x8a>
 80074a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074aa:	4290      	cmp	r0, r2
 80074ac:	d003      	beq.n	80074b6 <TIM_Base_SetConfig+0x8a>
 80074ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074b2:	4290      	cmp	r0, r2
 80074b4:	d103      	bne.n	80074be <TIM_Base_SetConfig+0x92>
    tmpcr1 &= ~TIM_CR1_CKD;
 80074b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074ba:	68ca      	ldr	r2, [r1, #12]
 80074bc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074c2:	694a      	ldr	r2, [r1, #20]
 80074c4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80074c6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074c8:	688b      	ldr	r3, [r1, #8]
 80074ca:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80074cc:	680b      	ldr	r3, [r1, #0]
 80074ce:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074d0:	4b0d      	ldr	r3, [pc, #52]	; (8007508 <TIM_Base_SetConfig+0xdc>)
 80074d2:	4298      	cmp	r0, r3
 80074d4:	d013      	beq.n	80074fe <TIM_Base_SetConfig+0xd2>
 80074d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074da:	4298      	cmp	r0, r3
 80074dc:	d00f      	beq.n	80074fe <TIM_Base_SetConfig+0xd2>
 80074de:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80074e2:	4298      	cmp	r0, r3
 80074e4:	d00b      	beq.n	80074fe <TIM_Base_SetConfig+0xd2>
 80074e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074ea:	4298      	cmp	r0, r3
 80074ec:	d007      	beq.n	80074fe <TIM_Base_SetConfig+0xd2>
 80074ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074f2:	4298      	cmp	r0, r3
 80074f4:	d003      	beq.n	80074fe <TIM_Base_SetConfig+0xd2>
 80074f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074fa:	4298      	cmp	r0, r3
 80074fc:	d101      	bne.n	8007502 <TIM_Base_SetConfig+0xd6>
    TIMx->RCR = Structure->RepetitionCounter;
 80074fe:	690b      	ldr	r3, [r1, #16]
 8007500:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8007502:	2301      	movs	r3, #1
 8007504:	6143      	str	r3, [r0, #20]
}
 8007506:	4770      	bx	lr
 8007508:	40012c00 	.word	0x40012c00

0800750c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800750c:	b360      	cbz	r0, 8007568 <HAL_TIM_Base_Init+0x5c>
{
 800750e:	b510      	push	{r4, lr}
 8007510:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007512:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007516:	b313      	cbz	r3, 800755e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8007518:	2302      	movs	r3, #2
 800751a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800751e:	4621      	mov	r1, r4
 8007520:	f851 0b04 	ldr.w	r0, [r1], #4
 8007524:	f7ff ff82 	bl	800742c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007528:	2301      	movs	r3, #1
 800752a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800752e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007532:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007536:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800753a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800753e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007542:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007546:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800754a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800754e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007552:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007556:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800755a:	2000      	movs	r0, #0
}
 800755c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800755e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007562:	f7fb f90f 	bl	8002784 <HAL_TIM_Base_MspInit>
 8007566:	e7d7      	b.n	8007518 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8007568:	2001      	movs	r0, #1
}
 800756a:	4770      	bx	lr

0800756c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800756c:	b360      	cbz	r0, 80075c8 <HAL_TIM_PWM_Init+0x5c>
{
 800756e:	b510      	push	{r4, lr}
 8007570:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007572:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007576:	b313      	cbz	r3, 80075be <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8007578:	2302      	movs	r3, #2
 800757a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800757e:	4621      	mov	r1, r4
 8007580:	f851 0b04 	ldr.w	r0, [r1], #4
 8007584:	f7ff ff52 	bl	800742c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007588:	2301      	movs	r3, #1
 800758a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800758e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007592:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007596:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800759a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800759e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80075aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075ae:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80075b2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80075b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80075ba:	2000      	movs	r0, #0
}
 80075bc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80075be:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80075c2:	f7ff ff32 	bl	800742a <HAL_TIM_PWM_MspInit>
 80075c6:	e7d7      	b.n	8007578 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80075c8:	2001      	movs	r0, #1
}
 80075ca:	4770      	bx	lr

080075cc <TIM_OC2_SetConfig>:
{
 80075cc:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075ce:	6a03      	ldr	r3, [r0, #32]
 80075d0:	f023 0310 	bic.w	r3, r3, #16
 80075d4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80075d6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80075d8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80075da:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075dc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80075e0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075e4:	680d      	ldr	r5, [r1, #0]
 80075e6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80075ea:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075ee:	688d      	ldr	r5, [r1, #8]
 80075f0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075f4:	4d1b      	ldr	r5, [pc, #108]	; (8007664 <TIM_OC2_SetConfig+0x98>)
 80075f6:	42a8      	cmp	r0, r5
 80075f8:	d007      	beq.n	800760a <TIM_OC2_SetConfig+0x3e>
 80075fa:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80075fe:	42a8      	cmp	r0, r5
 8007600:	d003      	beq.n	800760a <TIM_OC2_SetConfig+0x3e>
 8007602:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8007606:	42a8      	cmp	r0, r5
 8007608:	d106      	bne.n	8007618 <TIM_OC2_SetConfig+0x4c>
    tmpccer &= ~TIM_CCER_CC2NP;
 800760a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800760e:	68cd      	ldr	r5, [r1, #12]
 8007610:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007618:	4d12      	ldr	r5, [pc, #72]	; (8007664 <TIM_OC2_SetConfig+0x98>)
 800761a:	42a8      	cmp	r0, r5
 800761c:	d013      	beq.n	8007646 <TIM_OC2_SetConfig+0x7a>
 800761e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007622:	42a8      	cmp	r0, r5
 8007624:	d00f      	beq.n	8007646 <TIM_OC2_SetConfig+0x7a>
 8007626:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800762a:	42a8      	cmp	r0, r5
 800762c:	d00b      	beq.n	8007646 <TIM_OC2_SetConfig+0x7a>
 800762e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007632:	42a8      	cmp	r0, r5
 8007634:	d007      	beq.n	8007646 <TIM_OC2_SetConfig+0x7a>
 8007636:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800763a:	42a8      	cmp	r0, r5
 800763c:	d003      	beq.n	8007646 <TIM_OC2_SetConfig+0x7a>
 800763e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007642:	42a8      	cmp	r0, r5
 8007644:	d107      	bne.n	8007656 <TIM_OC2_SetConfig+0x8a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007646:	f424 6c40 	bic.w	ip, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800764a:	694c      	ldr	r4, [r1, #20]
 800764c:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007650:	698c      	ldr	r4, [r1, #24]
 8007652:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8007656:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007658:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800765a:	684a      	ldr	r2, [r1, #4]
 800765c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800765e:	6203      	str	r3, [r0, #32]
}
 8007660:	bc30      	pop	{r4, r5}
 8007662:	4770      	bx	lr
 8007664:	40012c00 	.word	0x40012c00

08007668 <HAL_TIM_PWM_ConfigChannel>:
{
 8007668:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800766a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800766e:	2b01      	cmp	r3, #1
 8007670:	f000 8095 	beq.w	800779e <HAL_TIM_PWM_ConfigChannel+0x136>
 8007674:	4604      	mov	r4, r0
 8007676:	460d      	mov	r5, r1
 8007678:	2301      	movs	r3, #1
 800767a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800767e:	2a14      	cmp	r2, #20
 8007680:	f200 8088 	bhi.w	8007794 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8007684:	e8df f002 	tbb	[pc, r2]
 8007688:	8686860b 	.word	0x8686860b
 800768c:	8686861f 	.word	0x8686861f
 8007690:	86868634 	.word	0x86868634
 8007694:	86868648 	.word	0x86868648
 8007698:	8686865d 	.word	0x8686865d
 800769c:	71          	.byte	0x71
 800769d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800769e:	6800      	ldr	r0, [r0, #0]
 80076a0:	f7ff fd2c 	bl	80070fc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076a4:	6822      	ldr	r2, [r4, #0]
 80076a6:	6993      	ldr	r3, [r2, #24]
 80076a8:	f043 0308 	orr.w	r3, r3, #8
 80076ac:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076ae:	6822      	ldr	r2, [r4, #0]
 80076b0:	6993      	ldr	r3, [r2, #24]
 80076b2:	f023 0304 	bic.w	r3, r3, #4
 80076b6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076b8:	6822      	ldr	r2, [r4, #0]
 80076ba:	6993      	ldr	r3, [r2, #24]
 80076bc:	6929      	ldr	r1, [r5, #16]
 80076be:	430b      	orrs	r3, r1
 80076c0:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80076c2:	2000      	movs	r0, #0
      break;
 80076c4:	e067      	b.n	8007796 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076c6:	6800      	ldr	r0, [r0, #0]
 80076c8:	f7ff ff80 	bl	80075cc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076cc:	6822      	ldr	r2, [r4, #0]
 80076ce:	6993      	ldr	r3, [r2, #24]
 80076d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80076d4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076d6:	6822      	ldr	r2, [r4, #0]
 80076d8:	6993      	ldr	r3, [r2, #24]
 80076da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076de:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076e0:	6822      	ldr	r2, [r4, #0]
 80076e2:	6993      	ldr	r3, [r2, #24]
 80076e4:	6929      	ldr	r1, [r5, #16]
 80076e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80076ea:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80076ec:	2000      	movs	r0, #0
      break;
 80076ee:	e052      	b.n	8007796 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076f0:	6800      	ldr	r0, [r0, #0]
 80076f2:	f7ff fd5b 	bl	80071ac <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076f6:	6822      	ldr	r2, [r4, #0]
 80076f8:	69d3      	ldr	r3, [r2, #28]
 80076fa:	f043 0308 	orr.w	r3, r3, #8
 80076fe:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007700:	6822      	ldr	r2, [r4, #0]
 8007702:	69d3      	ldr	r3, [r2, #28]
 8007704:	f023 0304 	bic.w	r3, r3, #4
 8007708:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800770a:	6822      	ldr	r2, [r4, #0]
 800770c:	69d3      	ldr	r3, [r2, #28]
 800770e:	6929      	ldr	r1, [r5, #16]
 8007710:	430b      	orrs	r3, r1
 8007712:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007714:	2000      	movs	r0, #0
      break;
 8007716:	e03e      	b.n	8007796 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007718:	6800      	ldr	r0, [r0, #0]
 800771a:	f7ff fd95 	bl	8007248 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800771e:	6822      	ldr	r2, [r4, #0]
 8007720:	69d3      	ldr	r3, [r2, #28]
 8007722:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007726:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007728:	6822      	ldr	r2, [r4, #0]
 800772a:	69d3      	ldr	r3, [r2, #28]
 800772c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007730:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007732:	6822      	ldr	r2, [r4, #0]
 8007734:	69d3      	ldr	r3, [r2, #28]
 8007736:	6929      	ldr	r1, [r5, #16]
 8007738:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800773c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800773e:	2000      	movs	r0, #0
      break;
 8007740:	e029      	b.n	8007796 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007742:	6800      	ldr	r0, [r0, #0]
 8007744:	f7ff fdce 	bl	80072e4 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007748:	6822      	ldr	r2, [r4, #0]
 800774a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800774c:	f043 0308 	orr.w	r3, r3, #8
 8007750:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007752:	6822      	ldr	r2, [r4, #0]
 8007754:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007756:	f023 0304 	bic.w	r3, r3, #4
 800775a:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800775c:	6822      	ldr	r2, [r4, #0]
 800775e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007760:	6929      	ldr	r1, [r5, #16]
 8007762:	430b      	orrs	r3, r1
 8007764:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8007766:	2000      	movs	r0, #0
      break;
 8007768:	e015      	b.n	8007796 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800776a:	6800      	ldr	r0, [r0, #0]
 800776c:	f7ff fdf2 	bl	8007354 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007770:	6822      	ldr	r2, [r4, #0]
 8007772:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007774:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007778:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800777a:	6822      	ldr	r2, [r4, #0]
 800777c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800777e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007782:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007784:	6822      	ldr	r2, [r4, #0]
 8007786:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007788:	6929      	ldr	r1, [r5, #16]
 800778a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800778e:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8007790:	2000      	movs	r0, #0
      break;
 8007792:	e000      	b.n	8007796 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8007794:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8007796:	2300      	movs	r3, #0
 8007798:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800779c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800779e:	2002      	movs	r0, #2
 80077a0:	e7fc      	b.n	800779c <HAL_TIM_PWM_ConfigChannel+0x134>

080077a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077a2:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077a4:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077a6:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077aa:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80077ae:	430a      	orrs	r2, r1
 80077b0:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077b4:	6082      	str	r2, [r0, #8]
}
 80077b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80077bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	f000 809b 	beq.w	80078fc <HAL_TIM_ConfigClockSource+0x140>
{
 80077c6:	b510      	push	{r4, lr}
 80077c8:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80077ca:	2301      	movs	r3, #1
 80077cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80077d0:	2302      	movs	r3, #2
 80077d2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80077d6:	6802      	ldr	r2, [r0, #0]
 80077d8:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077da:	4b49      	ldr	r3, [pc, #292]	; (8007900 <HAL_TIM_ConfigClockSource+0x144>)
 80077dc:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80077de:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80077e0:	680b      	ldr	r3, [r1, #0]
 80077e2:	2b70      	cmp	r3, #112	; 0x70
 80077e4:	d061      	beq.n	80078aa <HAL_TIM_ConfigClockSource+0xee>
 80077e6:	d831      	bhi.n	800784c <HAL_TIM_ConfigClockSource+0x90>
 80077e8:	2b50      	cmp	r3, #80	; 0x50
 80077ea:	d078      	beq.n	80078de <HAL_TIM_ConfigClockSource+0x122>
 80077ec:	d90c      	bls.n	8007808 <HAL_TIM_ConfigClockSource+0x4c>
 80077ee:	2b60      	cmp	r3, #96	; 0x60
 80077f0:	d12a      	bne.n	8007848 <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077f2:	68ca      	ldr	r2, [r1, #12]
 80077f4:	6849      	ldr	r1, [r1, #4]
 80077f6:	6820      	ldr	r0, [r4, #0]
 80077f8:	f7ff fdf9 	bl	80073ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077fc:	2160      	movs	r1, #96	; 0x60
 80077fe:	6820      	ldr	r0, [r4, #0]
 8007800:	f7ff fe09 	bl	8007416 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007804:	2000      	movs	r0, #0
      break;
 8007806:	e038      	b.n	800787a <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8007808:	2b40      	cmp	r3, #64	; 0x40
 800780a:	d10a      	bne.n	8007822 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800780c:	68ca      	ldr	r2, [r1, #12]
 800780e:	6849      	ldr	r1, [r1, #4]
 8007810:	6820      	ldr	r0, [r4, #0]
 8007812:	f7ff fdd9 	bl	80073c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007816:	2140      	movs	r1, #64	; 0x40
 8007818:	6820      	ldr	r0, [r4, #0]
 800781a:	f7ff fdfc 	bl	8007416 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800781e:	2000      	movs	r0, #0
      break;
 8007820:	e02b      	b.n	800787a <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8007822:	d867      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x138>
 8007824:	2b20      	cmp	r3, #32
 8007826:	d007      	beq.n	8007838 <HAL_TIM_ConfigClockSource+0x7c>
 8007828:	d903      	bls.n	8007832 <HAL_TIM_ConfigClockSource+0x76>
 800782a:	2b30      	cmp	r3, #48	; 0x30
 800782c:	d004      	beq.n	8007838 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800782e:	2001      	movs	r0, #1
 8007830:	e023      	b.n	800787a <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8007832:	b10b      	cbz	r3, 8007838 <HAL_TIM_ConfigClockSource+0x7c>
 8007834:	2b10      	cmp	r3, #16
 8007836:	d105      	bne.n	8007844 <HAL_TIM_ConfigClockSource+0x88>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007838:	4619      	mov	r1, r3
 800783a:	6820      	ldr	r0, [r4, #0]
 800783c:	f7ff fdeb 	bl	8007416 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007840:	2000      	movs	r0, #0
      break;
 8007842:	e01a      	b.n	800787a <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 8007844:	2001      	movs	r0, #1
 8007846:	e018      	b.n	800787a <HAL_TIM_ConfigClockSource+0xbe>
 8007848:	2001      	movs	r0, #1
 800784a:	e016      	b.n	800787a <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 800784c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007850:	d038      	beq.n	80078c4 <HAL_TIM_ConfigClockSource+0x108>
 8007852:	d90e      	bls.n	8007872 <HAL_TIM_ConfigClockSource+0xb6>
 8007854:	4a2b      	ldr	r2, [pc, #172]	; (8007904 <HAL_TIM_ConfigClockSource+0x148>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d0ee      	beq.n	8007838 <HAL_TIM_ConfigClockSource+0x7c>
 800785a:	d915      	bls.n	8007888 <HAL_TIM_ConfigClockSource+0xcc>
 800785c:	4a2a      	ldr	r2, [pc, #168]	; (8007908 <HAL_TIM_ConfigClockSource+0x14c>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d0ea      	beq.n	8007838 <HAL_TIM_ConfigClockSource+0x7c>
 8007862:	3210      	adds	r2, #16
 8007864:	4293      	cmp	r3, r2
 8007866:	d0e7      	beq.n	8007838 <HAL_TIM_ConfigClockSource+0x7c>
 8007868:	3a20      	subs	r2, #32
 800786a:	4293      	cmp	r3, r2
 800786c:	d0e4      	beq.n	8007838 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800786e:	2001      	movs	r0, #1
 8007870:	e003      	b.n	800787a <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8007872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007876:	d13f      	bne.n	80078f8 <HAL_TIM_ConfigClockSource+0x13c>
 8007878:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800787a:	2301      	movs	r3, #1
 800787c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007880:	2300      	movs	r3, #0
 8007882:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8007886:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8007888:	3a20      	subs	r2, #32
 800788a:	4293      	cmp	r3, r2
 800788c:	d0d4      	beq.n	8007838 <HAL_TIM_ConfigClockSource+0x7c>
 800788e:	d904      	bls.n	800789a <HAL_TIM_ConfigClockSource+0xde>
 8007890:	4a1e      	ldr	r2, [pc, #120]	; (800790c <HAL_TIM_ConfigClockSource+0x150>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d0d0      	beq.n	8007838 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 8007896:	2001      	movs	r0, #1
 8007898:	e7ef      	b.n	800787a <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 800789a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800789e:	d0cb      	beq.n	8007838 <HAL_TIM_ConfigClockSource+0x7c>
 80078a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80078a4:	d0c8      	beq.n	8007838 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 80078a6:	2001      	movs	r0, #1
 80078a8:	e7e7      	b.n	800787a <HAL_TIM_ConfigClockSource+0xbe>
      TIM_ETR_SetConfig(htim->Instance,
 80078aa:	68cb      	ldr	r3, [r1, #12]
 80078ac:	684a      	ldr	r2, [r1, #4]
 80078ae:	6889      	ldr	r1, [r1, #8]
 80078b0:	6820      	ldr	r0, [r4, #0]
 80078b2:	f7ff ff76 	bl	80077a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80078b6:	6822      	ldr	r2, [r4, #0]
 80078b8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80078be:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80078c0:	2000      	movs	r0, #0
      break;
 80078c2:	e7da      	b.n	800787a <HAL_TIM_ConfigClockSource+0xbe>
      TIM_ETR_SetConfig(htim->Instance,
 80078c4:	68cb      	ldr	r3, [r1, #12]
 80078c6:	684a      	ldr	r2, [r1, #4]
 80078c8:	6889      	ldr	r1, [r1, #8]
 80078ca:	6820      	ldr	r0, [r4, #0]
 80078cc:	f7ff ff69 	bl	80077a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078d0:	6822      	ldr	r2, [r4, #0]
 80078d2:	6893      	ldr	r3, [r2, #8]
 80078d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078d8:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80078da:	2000      	movs	r0, #0
      break;
 80078dc:	e7cd      	b.n	800787a <HAL_TIM_ConfigClockSource+0xbe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078de:	68ca      	ldr	r2, [r1, #12]
 80078e0:	6849      	ldr	r1, [r1, #4]
 80078e2:	6820      	ldr	r0, [r4, #0]
 80078e4:	f7ff fd70 	bl	80073c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078e8:	2150      	movs	r1, #80	; 0x50
 80078ea:	6820      	ldr	r0, [r4, #0]
 80078ec:	f7ff fd93 	bl	8007416 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80078f0:	2000      	movs	r0, #0
      break;
 80078f2:	e7c2      	b.n	800787a <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 80078f4:	2001      	movs	r0, #1
 80078f6:	e7c0      	b.n	800787a <HAL_TIM_ConfigClockSource+0xbe>
 80078f8:	2001      	movs	r0, #1
 80078fa:	e7be      	b.n	800787a <HAL_TIM_ConfigClockSource+0xbe>
  __HAL_LOCK(htim);
 80078fc:	2002      	movs	r0, #2
}
 80078fe:	4770      	bx	lr
 8007900:	ffce0088 	.word	0xffce0088
 8007904:	00100040 	.word	0x00100040
 8007908:	00100060 	.word	0x00100060
 800790c:	00100030 	.word	0x00100030

08007910 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007910:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007914:	2b01      	cmp	r3, #1
 8007916:	d04c      	beq.n	80079b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
{
 8007918:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800791a:	2301      	movs	r3, #1
 800791c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007920:	2302      	movs	r3, #2
 8007922:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007926:	6802      	ldr	r2, [r0, #0]
 8007928:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800792a:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800792c:	4d22      	ldr	r5, [pc, #136]	; (80079b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800792e:	42aa      	cmp	r2, r5
 8007930:	d007      	beq.n	8007942 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8007932:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007936:	42aa      	cmp	r2, r5
 8007938:	d003      	beq.n	8007942 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 800793a:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800793e:	42aa      	cmp	r2, r5
 8007940:	d103      	bne.n	800794a <HAL_TIMEx_MasterConfigSynchronization+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007942:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007946:	684d      	ldr	r5, [r1, #4]
 8007948:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800794a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800794e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007952:	680d      	ldr	r5, [r1, #0]
 8007954:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007956:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007958:	6803      	ldr	r3, [r0, #0]
 800795a:	4a17      	ldr	r2, [pc, #92]	; (80079b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d01a      	beq.n	8007996 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007964:	d017      	beq.n	8007996 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007966:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800796a:	4293      	cmp	r3, r2
 800796c:	d013      	beq.n	8007996 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800796e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007972:	4293      	cmp	r3, r2
 8007974:	d00f      	beq.n	8007996 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007976:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800797a:	4293      	cmp	r3, r2
 800797c:	d00b      	beq.n	8007996 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800797e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8007982:	4293      	cmp	r3, r2
 8007984:	d007      	beq.n	8007996 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007986:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800798a:	4293      	cmp	r3, r2
 800798c:	d003      	beq.n	8007996 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800798e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007992:	4293      	cmp	r3, r2
 8007994:	d104      	bne.n	80079a0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007996:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800799a:	688a      	ldr	r2, [r1, #8]
 800799c:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800799e:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079a0:	2301      	movs	r3, #1
 80079a2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079a6:	2300      	movs	r3, #0
 80079a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80079ac:	4618      	mov	r0, r3
}
 80079ae:	bc30      	pop	{r4, r5}
 80079b0:	4770      	bx	lr
  __HAL_LOCK(htim);
 80079b2:	2002      	movs	r0, #2
}
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	40012c00 	.word	0x40012c00

080079bc <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80079bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d060      	beq.n	8007a86 <HAL_TIMEx_ConfigBreakDeadTime+0xca>
{
 80079c4:	b410      	push	{r4}
  __HAL_LOCK(htim);
 80079c6:	2301      	movs	r3, #1
 80079c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80079cc:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80079ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079d2:	688a      	ldr	r2, [r1, #8]
 80079d4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80079d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079da:	684a      	ldr	r2, [r1, #4]
 80079dc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80079de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079e2:	680a      	ldr	r2, [r1, #0]
 80079e4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80079e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079ea:	690a      	ldr	r2, [r1, #16]
 80079ec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80079ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079f2:	694a      	ldr	r2, [r1, #20]
 80079f4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80079f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079fa:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80079fc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80079fe:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8007a02:	698a      	ldr	r2, [r1, #24]
 8007a04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007a08:	6802      	ldr	r2, [r0, #0]
 8007a0a:	4c20      	ldr	r4, [pc, #128]	; (8007a8c <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8007a0c:	42a2      	cmp	r2, r4
 8007a0e:	d007      	beq.n	8007a20 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8007a10:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007a14:	42a2      	cmp	r2, r4
 8007a16:	d003      	beq.n	8007a20 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8007a18:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8007a1c:	42a2      	cmp	r2, r4
 8007a1e:	d103      	bne.n	8007a28 <HAL_TIMEx_ConfigBreakDeadTime+0x6c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a24:	69cc      	ldr	r4, [r1, #28]
 8007a26:	4323      	orrs	r3, r4
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007a28:	4c18      	ldr	r4, [pc, #96]	; (8007a8c <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8007a2a:	42a2      	cmp	r2, r4
 8007a2c:	d007      	beq.n	8007a3e <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8007a2e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007a32:	42a2      	cmp	r2, r4
 8007a34:	d003      	beq.n	8007a3e <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8007a36:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8007a3a:	42a2      	cmp	r2, r4
 8007a3c:	d11b      	bne.n	8007a76 <HAL_TIMEx_ConfigBreakDeadTime+0xba>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007a3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a42:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8007a44:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007a48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a4c:	6a0c      	ldr	r4, [r1, #32]
 8007a4e:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007a50:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007a54:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8007a56:	4323      	orrs	r3, r4

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007a58:	4c0c      	ldr	r4, [pc, #48]	; (8007a8c <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8007a5a:	42a2      	cmp	r2, r4
 8007a5c:	d007      	beq.n	8007a6e <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8007a5e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007a62:	42a2      	cmp	r2, r4
 8007a64:	d003      	beq.n	8007a6e <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8007a66:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8007a6a:	42a2      	cmp	r2, r4
 8007a6c:	d103      	bne.n	8007a76 <HAL_TIMEx_ConfigBreakDeadTime+0xba>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007a6e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a72:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8007a74:	430b      	orrs	r3, r1
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a76:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007a78:	2300      	movs	r3, #0
 8007a7a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8007a7e:	4618      	mov	r0, r3
}
 8007a80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a84:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007a86:	2002      	movs	r0, #2
}
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	40012c00 	.word	0x40012c00

08007a90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a90:	b570      	push	{r4, r5, r6, lr}
 8007a92:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a94:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a96:	6883      	ldr	r3, [r0, #8]
 8007a98:	6902      	ldr	r2, [r0, #16]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	6942      	ldr	r2, [r0, #20]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	69c2      	ldr	r2, [r0, #28]
 8007aa2:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007aa4:	6808      	ldr	r0, [r1, #0]
 8007aa6:	4a96      	ldr	r2, [pc, #600]	; (8007d00 <UART_SetConfig+0x270>)
 8007aa8:	4002      	ands	r2, r0
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007aae:	6822      	ldr	r2, [r4, #0]
 8007ab0:	6853      	ldr	r3, [r2, #4]
 8007ab2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007ab6:	68e1      	ldr	r1, [r4, #12]
 8007ab8:	430b      	orrs	r3, r1
 8007aba:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007abc:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007abe:	6822      	ldr	r2, [r4, #0]
 8007ac0:	4b90      	ldr	r3, [pc, #576]	; (8007d04 <UART_SetConfig+0x274>)
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d001      	beq.n	8007aca <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ac6:	6a23      	ldr	r3, [r4, #32]
 8007ac8:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007aca:	6893      	ldr	r3, [r2, #8]
 8007acc:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007ad0:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007ad4:	430b      	orrs	r3, r1
 8007ad6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ad8:	6822      	ldr	r2, [r4, #0]
 8007ada:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007adc:	f023 030f 	bic.w	r3, r3, #15
 8007ae0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007ae2:	430b      	orrs	r3, r1
 8007ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	4a87      	ldr	r2, [pc, #540]	; (8007d08 <UART_SetConfig+0x278>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d010      	beq.n	8007b10 <UART_SetConfig+0x80>
 8007aee:	4a87      	ldr	r2, [pc, #540]	; (8007d0c <UART_SetConfig+0x27c>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d021      	beq.n	8007b38 <UART_SetConfig+0xa8>
 8007af4:	4a86      	ldr	r2, [pc, #536]	; (8007d10 <UART_SetConfig+0x280>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d037      	beq.n	8007b6a <UART_SetConfig+0xda>
 8007afa:	4a86      	ldr	r2, [pc, #536]	; (8007d14 <UART_SetConfig+0x284>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d05c      	beq.n	8007bba <UART_SetConfig+0x12a>
 8007b00:	4a85      	ldr	r2, [pc, #532]	; (8007d18 <UART_SetConfig+0x288>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d06b      	beq.n	8007bde <UART_SetConfig+0x14e>
 8007b06:	4a7f      	ldr	r2, [pc, #508]	; (8007d04 <UART_SetConfig+0x274>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d07d      	beq.n	8007c08 <UART_SetConfig+0x178>
 8007b0c:	2210      	movs	r2, #16
 8007b0e:	e03a      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007b10:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8007b14:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007b18:	f002 0203 	and.w	r2, r2, #3
 8007b1c:	2a03      	cmp	r2, #3
 8007b1e:	d809      	bhi.n	8007b34 <UART_SetConfig+0xa4>
 8007b20:	e8df f002 	tbb	[pc, r2]
 8007b24:	06870402 	.word	0x06870402
 8007b28:	2201      	movs	r2, #1
 8007b2a:	e02c      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007b2c:	2204      	movs	r2, #4
 8007b2e:	e02a      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007b30:	2208      	movs	r2, #8
 8007b32:	e028      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007b34:	2210      	movs	r2, #16
 8007b36:	e026      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007b38:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8007b3c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007b40:	f002 020c 	and.w	r2, r2, #12
 8007b44:	2a0c      	cmp	r2, #12
 8007b46:	d80e      	bhi.n	8007b66 <UART_SetConfig+0xd6>
 8007b48:	e8df f002 	tbb	[pc, r2]
 8007b4c:	0d0d0d07 	.word	0x0d0d0d07
 8007b50:	0d0d0d09 	.word	0x0d0d0d09
 8007b54:	0d0d0d75 	.word	0x0d0d0d75
 8007b58:	0b          	.byte	0x0b
 8007b59:	00          	.byte	0x00
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	e013      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007b5e:	2204      	movs	r2, #4
 8007b60:	e011      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007b62:	2208      	movs	r2, #8
 8007b64:	e00f      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007b66:	2210      	movs	r2, #16
 8007b68:	e00d      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007b6a:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8007b6e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007b72:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8007b76:	2a20      	cmp	r2, #32
 8007b78:	d05f      	beq.n	8007c3a <UART_SetConfig+0x1aa>
 8007b7a:	d81a      	bhi.n	8007bb2 <UART_SetConfig+0x122>
 8007b7c:	2a00      	cmp	r2, #0
 8007b7e:	d05e      	beq.n	8007c3e <UART_SetConfig+0x1ae>
 8007b80:	2a10      	cmp	r2, #16
 8007b82:	d15e      	bne.n	8007c42 <UART_SetConfig+0x1b2>
 8007b84:	2204      	movs	r2, #4

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b86:	495f      	ldr	r1, [pc, #380]	; (8007d04 <UART_SetConfig+0x274>)
 8007b88:	428b      	cmp	r3, r1
 8007b8a:	d076      	beq.n	8007c7a <UART_SetConfig+0x1ea>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b8c:	69e0      	ldr	r0, [r4, #28]
 8007b8e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007b92:	f000 80c9 	beq.w	8007d28 <UART_SetConfig+0x298>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b96:	2a08      	cmp	r2, #8
 8007b98:	f200 8134 	bhi.w	8007e04 <UART_SetConfig+0x374>
 8007b9c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007ba0:	011900f7 	.word	0x011900f7
 8007ba4:	013200f5 	.word	0x013200f5
 8007ba8:	0132011c 	.word	0x0132011c
 8007bac:	01320132 	.word	0x01320132
 8007bb0:	011f      	.short	0x011f
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bb2:	2a30      	cmp	r2, #48	; 0x30
 8007bb4:	d147      	bne.n	8007c46 <UART_SetConfig+0x1b6>
 8007bb6:	2208      	movs	r2, #8
 8007bb8:	e7e5      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007bba:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8007bbe:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007bc2:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8007bc6:	2a80      	cmp	r2, #128	; 0x80
 8007bc8:	d03f      	beq.n	8007c4a <UART_SetConfig+0x1ba>
 8007bca:	d804      	bhi.n	8007bd6 <UART_SetConfig+0x146>
 8007bcc:	b3fa      	cbz	r2, 8007c4e <UART_SetConfig+0x1be>
 8007bce:	2a40      	cmp	r2, #64	; 0x40
 8007bd0:	d13f      	bne.n	8007c52 <UART_SetConfig+0x1c2>
 8007bd2:	2204      	movs	r2, #4
 8007bd4:	e7d7      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007bd6:	2ac0      	cmp	r2, #192	; 0xc0
 8007bd8:	d13d      	bne.n	8007c56 <UART_SetConfig+0x1c6>
 8007bda:	2208      	movs	r2, #8
 8007bdc:	e7d3      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007bde:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8007be2:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007be6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8007bea:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8007bee:	d034      	beq.n	8007c5a <UART_SetConfig+0x1ca>
 8007bf0:	d805      	bhi.n	8007bfe <UART_SetConfig+0x16e>
 8007bf2:	b3a2      	cbz	r2, 8007c5e <UART_SetConfig+0x1ce>
 8007bf4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8007bf8:	d133      	bne.n	8007c62 <UART_SetConfig+0x1d2>
 8007bfa:	2204      	movs	r2, #4
 8007bfc:	e7c3      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007bfe:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8007c02:	d130      	bne.n	8007c66 <UART_SetConfig+0x1d6>
 8007c04:	2208      	movs	r2, #8
 8007c06:	e7be      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007c08:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8007c0c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007c10:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8007c14:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007c18:	d027      	beq.n	8007c6a <UART_SetConfig+0x1da>
 8007c1a:	d805      	bhi.n	8007c28 <UART_SetConfig+0x198>
 8007c1c:	b33a      	cbz	r2, 8007c6e <UART_SetConfig+0x1de>
 8007c1e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007c22:	d126      	bne.n	8007c72 <UART_SetConfig+0x1e2>
 8007c24:	2204      	movs	r2, #4
 8007c26:	e7ae      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007c28:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8007c2c:	d123      	bne.n	8007c76 <UART_SetConfig+0x1e6>
 8007c2e:	2208      	movs	r2, #8
 8007c30:	e7a9      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007c32:	2202      	movs	r2, #2
 8007c34:	e7a7      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007c36:	2202      	movs	r2, #2
 8007c38:	e7a5      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	e7a3      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007c3e:	2200      	movs	r2, #0
 8007c40:	e7a1      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007c42:	2210      	movs	r2, #16
 8007c44:	e79f      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007c46:	2210      	movs	r2, #16
 8007c48:	e79d      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	e79b      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007c4e:	2200      	movs	r2, #0
 8007c50:	e799      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007c52:	2210      	movs	r2, #16
 8007c54:	e797      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007c56:	2210      	movs	r2, #16
 8007c58:	e795      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	e793      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007c5e:	2200      	movs	r2, #0
 8007c60:	e791      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007c62:	2210      	movs	r2, #16
 8007c64:	e78f      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007c66:	2210      	movs	r2, #16
 8007c68:	e78d      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	e78b      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007c6e:	2200      	movs	r2, #0
 8007c70:	e789      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007c72:	2210      	movs	r2, #16
 8007c74:	e787      	b.n	8007b86 <UART_SetConfig+0xf6>
 8007c76:	2210      	movs	r2, #16
 8007c78:	e785      	b.n	8007b86 <UART_SetConfig+0xf6>
    switch (clocksource)
 8007c7a:	2a08      	cmp	r2, #8
 8007c7c:	f200 80b2 	bhi.w	8007de4 <UART_SetConfig+0x354>
 8007c80:	e8df f002 	tbb	[pc, r2]
 8007c84:	b03bb008 	.word	0xb03bb008
 8007c88:	b0b0b038 	.word	0xb0b0b038
 8007c8c:	05          	.byte	0x05
 8007c8d:	00          	.byte	0x00
 8007c8e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007c92:	e004      	b.n	8007c9e <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c94:	f7fe ffb2 	bl	8006bfc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	f000 80a5 	beq.w	8007de8 <UART_SetConfig+0x358>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007ca0:	4b1e      	ldr	r3, [pc, #120]	; (8007d1c <UART_SetConfig+0x28c>)
 8007ca2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007ca6:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007caa:	6865      	ldr	r5, [r4, #4]
 8007cac:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8007cb0:	4299      	cmp	r1, r3
 8007cb2:	f200 809b 	bhi.w	8007dec <UART_SetConfig+0x35c>
 8007cb6:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8007cba:	f200 8099 	bhi.w	8007df0 <UART_SetConfig+0x360>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cbe:	2600      	movs	r6, #0
 8007cc0:	4633      	mov	r3, r6
 8007cc2:	4631      	mov	r1, r6
 8007cc4:	f7f9 f808 	bl	8000cd8 <__aeabi_uldivmod>
 8007cc8:	0209      	lsls	r1, r1, #8
 8007cca:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8007cce:	0200      	lsls	r0, r0, #8
 8007cd0:	086b      	lsrs	r3, r5, #1
 8007cd2:	18c0      	adds	r0, r0, r3
 8007cd4:	462a      	mov	r2, r5
 8007cd6:	4633      	mov	r3, r6
 8007cd8:	f141 0100 	adc.w	r1, r1, #0
 8007cdc:	f7f8 fffc 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ce0:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8007ce4:	4b0e      	ldr	r3, [pc, #56]	; (8007d20 <UART_SetConfig+0x290>)
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	f200 8084 	bhi.w	8007df4 <UART_SetConfig+0x364>
          huart->Instance->BRR = usartdiv;
 8007cec:	6823      	ldr	r3, [r4, #0]
 8007cee:	60d8      	str	r0, [r3, #12]
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	e065      	b.n	8007dc0 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetSysClockFreq();
 8007cf4:	f7fe fe3c 	bl	8006970 <HAL_RCC_GetSysClockFreq>
        break;
 8007cf8:	e7ce      	b.n	8007c98 <UART_SetConfig+0x208>
        pclk = (uint32_t) HSI_VALUE;
 8007cfa:	480a      	ldr	r0, [pc, #40]	; (8007d24 <UART_SetConfig+0x294>)
 8007cfc:	e7cf      	b.n	8007c9e <UART_SetConfig+0x20e>
 8007cfe:	bf00      	nop
 8007d00:	cfff69f3 	.word	0xcfff69f3
 8007d04:	40008000 	.word	0x40008000
 8007d08:	40013800 	.word	0x40013800
 8007d0c:	40004400 	.word	0x40004400
 8007d10:	40004800 	.word	0x40004800
 8007d14:	40004c00 	.word	0x40004c00
 8007d18:	40005000 	.word	0x40005000
 8007d1c:	0800f940 	.word	0x0800f940
 8007d20:	000ffcff 	.word	0x000ffcff
 8007d24:	00f42400 	.word	0x00f42400
    switch (clocksource)
 8007d28:	2a08      	cmp	r2, #8
 8007d2a:	d865      	bhi.n	8007df8 <UART_SetConfig+0x368>
 8007d2c:	e8df f002 	tbb	[pc, r2]
 8007d30:	64052707 	.word	0x64052707
 8007d34:	6464642a 	.word	0x6464642a
 8007d38:	0b          	.byte	0x0b
 8007d39:	00          	.byte	0x00
 8007d3a:	4835      	ldr	r0, [pc, #212]	; (8007e10 <UART_SetConfig+0x380>)
 8007d3c:	e003      	b.n	8007d46 <UART_SetConfig+0x2b6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d3e:	f7fe ff5d 	bl	8006bfc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007d42:	2800      	cmp	r0, #0
 8007d44:	d05a      	beq.n	8007dfc <UART_SetConfig+0x36c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d46:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007d48:	4b32      	ldr	r3, [pc, #200]	; (8007e14 <UART_SetConfig+0x384>)
 8007d4a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007d4e:	fbb0 f0f3 	udiv	r0, r0, r3
 8007d52:	6862      	ldr	r2, [r4, #4]
 8007d54:	0853      	lsrs	r3, r2, #1
 8007d56:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8007d5a:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d5e:	f1a0 0210 	sub.w	r2, r0, #16
 8007d62:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d84a      	bhi.n	8007e00 <UART_SetConfig+0x370>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d6a:	b283      	uxth	r3, r0
 8007d6c:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d70:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8007d74:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8007d76:	6823      	ldr	r3, [r4, #0]
 8007d78:	60d8      	str	r0, [r3, #12]
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	e020      	b.n	8007dc0 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d7e:	f7fe ff4f 	bl	8006c20 <HAL_RCC_GetPCLK2Freq>
        break;
 8007d82:	e7de      	b.n	8007d42 <UART_SetConfig+0x2b2>
        pclk = HAL_RCC_GetSysClockFreq();
 8007d84:	f7fe fdf4 	bl	8006970 <HAL_RCC_GetSysClockFreq>
        break;
 8007d88:	e7db      	b.n	8007d42 <UART_SetConfig+0x2b2>
    switch (clocksource)
 8007d8a:	4821      	ldr	r0, [pc, #132]	; (8007e10 <UART_SetConfig+0x380>)
 8007d8c:	e003      	b.n	8007d96 <UART_SetConfig+0x306>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d8e:	f7fe ff35 	bl	8006bfc <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8007d92:	2800      	cmp	r0, #0
 8007d94:	d038      	beq.n	8007e08 <UART_SetConfig+0x378>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d96:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007d98:	4b1e      	ldr	r3, [pc, #120]	; (8007e14 <UART_SetConfig+0x384>)
 8007d9a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007d9e:	fbb0 f0f3 	udiv	r0, r0, r3
 8007da2:	6863      	ldr	r3, [r4, #4]
 8007da4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8007da8:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dac:	f1a0 0210 	sub.w	r2, r0, #16
 8007db0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d829      	bhi.n	8007e0c <UART_SetConfig+0x37c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007db8:	6823      	ldr	r3, [r4, #0]
 8007dba:	b280      	uxth	r0, r0
 8007dbc:	60d8      	str	r0, [r3, #12]
 8007dbe:	2000      	movs	r0, #0
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007dc6:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8007dce:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 8007dd0:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dd2:	f7fe ff25 	bl	8006c20 <HAL_RCC_GetPCLK2Freq>
        break;
 8007dd6:	e7dc      	b.n	8007d92 <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetSysClockFreq();
 8007dd8:	f7fe fdca 	bl	8006970 <HAL_RCC_GetSysClockFreq>
        break;
 8007ddc:	e7d9      	b.n	8007d92 <UART_SetConfig+0x302>
        pclk = (uint32_t) LSE_VALUE;
 8007dde:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007de2:	e7d8      	b.n	8007d96 <UART_SetConfig+0x306>
    switch (clocksource)
 8007de4:	2001      	movs	r0, #1
 8007de6:	e7eb      	b.n	8007dc0 <UART_SetConfig+0x330>
 8007de8:	2000      	movs	r0, #0
 8007dea:	e7e9      	b.n	8007dc0 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8007dec:	2001      	movs	r0, #1
 8007dee:	e7e7      	b.n	8007dc0 <UART_SetConfig+0x330>
 8007df0:	2001      	movs	r0, #1
 8007df2:	e7e5      	b.n	8007dc0 <UART_SetConfig+0x330>
          ret = HAL_ERROR;
 8007df4:	2001      	movs	r0, #1
 8007df6:	e7e3      	b.n	8007dc0 <UART_SetConfig+0x330>
    switch (clocksource)
 8007df8:	2001      	movs	r0, #1
 8007dfa:	e7e1      	b.n	8007dc0 <UART_SetConfig+0x330>
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	e7df      	b.n	8007dc0 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8007e00:	2001      	movs	r0, #1
 8007e02:	e7dd      	b.n	8007dc0 <UART_SetConfig+0x330>
    switch (clocksource)
 8007e04:	2001      	movs	r0, #1
 8007e06:	e7db      	b.n	8007dc0 <UART_SetConfig+0x330>
 8007e08:	2000      	movs	r0, #0
 8007e0a:	e7d9      	b.n	8007dc0 <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8007e0c:	2001      	movs	r0, #1
 8007e0e:	e7d7      	b.n	8007dc0 <UART_SetConfig+0x330>
 8007e10:	00f42400 	.word	0x00f42400
 8007e14:	0800f940 	.word	0x0800f940

08007e18 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e18:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e1a:	f013 0f01 	tst.w	r3, #1
 8007e1e:	d006      	beq.n	8007e2e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e20:	6802      	ldr	r2, [r0, #0]
 8007e22:	6853      	ldr	r3, [r2, #4]
 8007e24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e28:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007e2a:	430b      	orrs	r3, r1
 8007e2c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e2e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e30:	f013 0f02 	tst.w	r3, #2
 8007e34:	d006      	beq.n	8007e44 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e36:	6802      	ldr	r2, [r0, #0]
 8007e38:	6853      	ldr	r3, [r2, #4]
 8007e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e3e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8007e40:	430b      	orrs	r3, r1
 8007e42:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e44:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e46:	f013 0f04 	tst.w	r3, #4
 8007e4a:	d006      	beq.n	8007e5a <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e4c:	6802      	ldr	r2, [r0, #0]
 8007e4e:	6853      	ldr	r3, [r2, #4]
 8007e50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e54:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007e56:	430b      	orrs	r3, r1
 8007e58:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e5a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e5c:	f013 0f08 	tst.w	r3, #8
 8007e60:	d006      	beq.n	8007e70 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e62:	6802      	ldr	r2, [r0, #0]
 8007e64:	6853      	ldr	r3, [r2, #4]
 8007e66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e6a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007e6c:	430b      	orrs	r3, r1
 8007e6e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e70:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e72:	f013 0f10 	tst.w	r3, #16
 8007e76:	d006      	beq.n	8007e86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e78:	6802      	ldr	r2, [r0, #0]
 8007e7a:	6893      	ldr	r3, [r2, #8]
 8007e7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e80:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8007e82:	430b      	orrs	r3, r1
 8007e84:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e86:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e88:	f013 0f20 	tst.w	r3, #32
 8007e8c:	d006      	beq.n	8007e9c <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e8e:	6802      	ldr	r2, [r0, #0]
 8007e90:	6893      	ldr	r3, [r2, #8]
 8007e92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e96:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007e98:	430b      	orrs	r3, r1
 8007e9a:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e9e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007ea2:	d00a      	beq.n	8007eba <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ea4:	6802      	ldr	r2, [r0, #0]
 8007ea6:	6853      	ldr	r3, [r2, #4]
 8007ea8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007eac:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8007eae:	430b      	orrs	r3, r1
 8007eb0:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007eb2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007eb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eb8:	d00b      	beq.n	8007ed2 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007eba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007ebc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007ec0:	d006      	beq.n	8007ed0 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ec2:	6802      	ldr	r2, [r0, #0]
 8007ec4:	6853      	ldr	r3, [r2, #4]
 8007ec6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007eca:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8007ecc:	430b      	orrs	r3, r1
 8007ece:	6053      	str	r3, [r2, #4]
  }
}
 8007ed0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ed2:	6802      	ldr	r2, [r0, #0]
 8007ed4:	6853      	ldr	r3, [r2, #4]
 8007ed6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007eda:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007edc:	430b      	orrs	r3, r1
 8007ede:	6053      	str	r3, [r2, #4]
 8007ee0:	e7eb      	b.n	8007eba <UART_AdvFeatureConfig+0xa2>

08007ee2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ee2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ee6:	4605      	mov	r5, r0
 8007ee8:	460f      	mov	r7, r1
 8007eea:	4616      	mov	r6, r2
 8007eec:	4699      	mov	r9, r3
 8007eee:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ef2:	682c      	ldr	r4, [r5, #0]
 8007ef4:	69e4      	ldr	r4, [r4, #28]
 8007ef6:	ea37 0304 	bics.w	r3, r7, r4
 8007efa:	bf0c      	ite	eq
 8007efc:	f04f 0c01 	moveq.w	ip, #1
 8007f00:	f04f 0c00 	movne.w	ip, #0
 8007f04:	45b4      	cmp	ip, r6
 8007f06:	d157      	bne.n	8007fb8 <UART_WaitOnFlagUntilTimeout+0xd6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f08:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007f0c:	d0f1      	beq.n	8007ef2 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f0e:	f7fb fa5f 	bl	80033d0 <HAL_GetTick>
 8007f12:	eba0 0009 	sub.w	r0, r0, r9
 8007f16:	4540      	cmp	r0, r8
 8007f18:	d82f      	bhi.n	8007f7a <UART_WaitOnFlagUntilTimeout+0x98>
 8007f1a:	f1b8 0f00 	cmp.w	r8, #0
 8007f1e:	d02c      	beq.n	8007f7a <UART_WaitOnFlagUntilTimeout+0x98>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f20:	682b      	ldr	r3, [r5, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	f012 0f04 	tst.w	r2, #4
 8007f28:	d0e3      	beq.n	8007ef2 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f2a:	69da      	ldr	r2, [r3, #28]
 8007f2c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007f30:	d0df      	beq.n	8007ef2 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f36:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f38:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3a:	e852 3f00 	ldrex	r3, [r2]
 8007f3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f42:	e842 3100 	strex	r1, r3, [r2]
 8007f46:	2900      	cmp	r1, #0
 8007f48:	d1f6      	bne.n	8007f38 <UART_WaitOnFlagUntilTimeout+0x56>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f4a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4c:	f102 0308 	add.w	r3, r2, #8
 8007f50:	e853 3f00 	ldrex	r3, [r3]
 8007f54:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f58:	3208      	adds	r2, #8
 8007f5a:	e842 3100 	strex	r1, r3, [r2]
 8007f5e:	2900      	cmp	r1, #0
 8007f60:	d1f3      	bne.n	8007f4a <UART_WaitOnFlagUntilTimeout+0x68>

          huart->gState = HAL_UART_STATE_READY;
 8007f62:	2320      	movs	r3, #32
 8007f64:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007f68:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f6c:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f70:	2300      	movs	r3, #0
 8007f72:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80

          return HAL_TIMEOUT;
 8007f76:	2003      	movs	r0, #3
 8007f78:	e01f      	b.n	8007fba <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f7a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7c:	e852 3f00 	ldrex	r3, [r2]
 8007f80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f84:	e842 3100 	strex	r1, r3, [r2]
 8007f88:	2900      	cmp	r1, #0
 8007f8a:	d1f6      	bne.n	8007f7a <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f8c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8e:	f102 0308 	add.w	r3, r2, #8
 8007f92:	e853 3f00 	ldrex	r3, [r3]
 8007f96:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9a:	3208      	adds	r2, #8
 8007f9c:	e842 3100 	strex	r1, r3, [r2]
 8007fa0:	2900      	cmp	r1, #0
 8007fa2:	d1f3      	bne.n	8007f8c <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 8007fa4:	2320      	movs	r3, #32
 8007fa6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007faa:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8007fae:	2300      	movs	r3, #0
 8007fb0:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8007fb4:	2003      	movs	r0, #3
 8007fb6:	e000      	b.n	8007fba <UART_WaitOnFlagUntilTimeout+0xd8>
        }
      }
    }
  }
  return HAL_OK;
 8007fb8:	2000      	movs	r0, #0
}
 8007fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007fbe <UART_CheckIdleState>:
{
 8007fbe:	b530      	push	{r4, r5, lr}
 8007fc0:	b083      	sub	sp, #12
 8007fc2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8007fca:	f7fb fa01 	bl	80033d0 <HAL_GetTick>
 8007fce:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fd0:	6822      	ldr	r2, [r4, #0]
 8007fd2:	6812      	ldr	r2, [r2, #0]
 8007fd4:	f012 0f08 	tst.w	r2, #8
 8007fd8:	d10f      	bne.n	8007ffa <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fda:	6823      	ldr	r3, [r4, #0]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f013 0f04 	tst.w	r3, #4
 8007fe2:	d118      	bne.n	8008016 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8007fe4:	2320      	movs	r3, #32
 8007fe6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007fea:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fee:	2000      	movs	r0, #0
 8007ff0:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8007ff2:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8007ff6:	b003      	add	sp, #12
 8007ff8:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ffa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	4603      	mov	r3, r0
 8008002:	2200      	movs	r2, #0
 8008004:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008008:	4620      	mov	r0, r4
 800800a:	f7ff ff6a 	bl	8007ee2 <UART_WaitOnFlagUntilTimeout>
 800800e:	2800      	cmp	r0, #0
 8008010:	d0e3      	beq.n	8007fda <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8008012:	2003      	movs	r0, #3
 8008014:	e7ef      	b.n	8007ff6 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008016:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800801a:	9300      	str	r3, [sp, #0]
 800801c:	462b      	mov	r3, r5
 800801e:	2200      	movs	r2, #0
 8008020:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008024:	4620      	mov	r0, r4
 8008026:	f7ff ff5c 	bl	8007ee2 <UART_WaitOnFlagUntilTimeout>
 800802a:	2800      	cmp	r0, #0
 800802c:	d0da      	beq.n	8007fe4 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800802e:	2003      	movs	r0, #3
 8008030:	e7e1      	b.n	8007ff6 <UART_CheckIdleState+0x38>

08008032 <HAL_UART_Init>:
  if (huart == NULL)
 8008032:	b378      	cbz	r0, 8008094 <HAL_UART_Init+0x62>
{
 8008034:	b510      	push	{r4, lr}
 8008036:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8008038:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800803c:	b30b      	cbz	r3, 8008082 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800803e:	2324      	movs	r3, #36	; 0x24
 8008040:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8008044:	6822      	ldr	r2, [r4, #0]
 8008046:	6813      	ldr	r3, [r2, #0]
 8008048:	f023 0301 	bic.w	r3, r3, #1
 800804c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800804e:	4620      	mov	r0, r4
 8008050:	f7ff fd1e 	bl	8007a90 <UART_SetConfig>
 8008054:	2801      	cmp	r0, #1
 8008056:	d013      	beq.n	8008080 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008058:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800805a:	b9bb      	cbnz	r3, 800808c <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800805c:	6822      	ldr	r2, [r4, #0]
 800805e:	6853      	ldr	r3, [r2, #4]
 8008060:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8008064:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008066:	6822      	ldr	r2, [r4, #0]
 8008068:	6893      	ldr	r3, [r2, #8]
 800806a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800806e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8008070:	6822      	ldr	r2, [r4, #0]
 8008072:	6813      	ldr	r3, [r2, #0]
 8008074:	f043 0301 	orr.w	r3, r3, #1
 8008078:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800807a:	4620      	mov	r0, r4
 800807c:	f7ff ff9f 	bl	8007fbe <UART_CheckIdleState>
}
 8008080:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8008082:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8008086:	f7fb f849 	bl	800311c <HAL_UART_MspInit>
 800808a:	e7d8      	b.n	800803e <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800808c:	4620      	mov	r0, r4
 800808e:	f7ff fec3 	bl	8007e18 <UART_AdvFeatureConfig>
 8008092:	e7e3      	b.n	800805c <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8008094:	2001      	movs	r0, #1
}
 8008096:	4770      	bx	lr

08008098 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008098:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800809a:	b92b      	cbnz	r3, 80080a8 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800809c:	2301      	movs	r3, #1
 800809e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80080a2:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 80080a6:	4770      	bx	lr
{
 80080a8:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80080aa:	6803      	ldr	r3, [r0, #0]
 80080ac:	689a      	ldr	r2, [r3, #8]
 80080ae:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80080b2:	6899      	ldr	r1, [r3, #8]
 80080b4:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080b6:	4d09      	ldr	r5, [pc, #36]	; (80080dc <UARTEx_SetNbDataToProcess+0x44>)
 80080b8:	5c6b      	ldrb	r3, [r5, r1]
 80080ba:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80080bc:	4c08      	ldr	r4, [pc, #32]	; (80080e0 <UARTEx_SetNbDataToProcess+0x48>)
 80080be:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080c0:	fb93 f3f1 	sdiv	r3, r3, r1
 80080c4:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080c8:	5cab      	ldrb	r3, [r5, r2]
 80080ca:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80080cc:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80080d2:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 80080d6:	bc30      	pop	{r4, r5}
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	0800f960 	.word	0x0800f960
 80080e0:	0800f958 	.word	0x0800f958

080080e4 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80080e4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d018      	beq.n	800811e <HAL_UARTEx_DisableFifoMode+0x3a>
 80080ec:	2301      	movs	r3, #1
 80080ee:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80080f2:	2324      	movs	r3, #36	; 0x24
 80080f4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080f8:	6803      	ldr	r3, [r0, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80080fc:	6819      	ldr	r1, [r3, #0]
 80080fe:	f021 0101 	bic.w	r1, r1, #1
 8008102:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008104:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008108:	2300      	movs	r3, #0
 800810a:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800810c:	6801      	ldr	r1, [r0, #0]
 800810e:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008110:	2220      	movs	r2, #32
 8008112:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8008116:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 800811a:	4618      	mov	r0, r3
 800811c:	4770      	bx	lr
  __HAL_LOCK(huart);
 800811e:	2002      	movs	r0, #2
}
 8008120:	4770      	bx	lr

08008122 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8008122:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008124:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008128:	2b01      	cmp	r3, #1
 800812a:	d01d      	beq.n	8008168 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800812c:	4604      	mov	r4, r0
 800812e:	2301      	movs	r3, #1
 8008130:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8008134:	2324      	movs	r3, #36	; 0x24
 8008136:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800813a:	6803      	ldr	r3, [r0, #0]
 800813c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	f022 0201 	bic.w	r2, r2, #1
 8008144:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008146:	6802      	ldr	r2, [r0, #0]
 8008148:	6893      	ldr	r3, [r2, #8]
 800814a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800814e:	4319      	orrs	r1, r3
 8008150:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008152:	f7ff ffa1 	bl	8008098 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008156:	6823      	ldr	r3, [r4, #0]
 8008158:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800815a:	2320      	movs	r3, #32
 800815c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8008160:	2000      	movs	r0, #0
 8008162:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8008166:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008168:	2002      	movs	r0, #2
 800816a:	e7fc      	b.n	8008166 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800816c <HAL_UARTEx_SetRxFifoThreshold>:
{
 800816c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800816e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008172:	2b01      	cmp	r3, #1
 8008174:	d01d      	beq.n	80081b2 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8008176:	4604      	mov	r4, r0
 8008178:	2301      	movs	r3, #1
 800817a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800817e:	2324      	movs	r3, #36	; 0x24
 8008180:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008184:	6803      	ldr	r3, [r0, #0]
 8008186:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	f022 0201 	bic.w	r2, r2, #1
 800818e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008190:	6802      	ldr	r2, [r0, #0]
 8008192:	6893      	ldr	r3, [r2, #8]
 8008194:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8008198:	4319      	orrs	r1, r3
 800819a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800819c:	f7ff ff7c 	bl	8008098 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081a0:	6823      	ldr	r3, [r4, #0]
 80081a2:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80081a4:	2320      	movs	r3, #32
 80081a6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80081aa:	2000      	movs	r0, #0
 80081ac:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80081b0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80081b2:	2002      	movs	r0, #2
 80081b4:	e7fc      	b.n	80081b0 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

080081b8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80081b8:	b430      	push	{r4, r5}
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80081ba:	680a      	ldr	r2, [r1, #0]
 80081bc:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 80081c0:	f023 0301 	bic.w	r3, r3, #1
 80081c4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80081c8:	688b      	ldr	r3, [r1, #8]
 80081ca:	2b08      	cmp	r3, #8
 80081cc:	d036      	beq.n	800823c <FMC_NORSRAM_Init+0x84>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80081ce:	2400      	movs	r4, #0
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80081d0:	684a      	ldr	r2, [r1, #4]
  btcr_reg = (flashaccess                   | \
 80081d2:	4322      	orrs	r2, r4
              Init->DataAddressMux          | \
 80081d4:	4313      	orrs	r3, r2
              Init->MemoryType              | \
              Init->MemoryDataWidth         | \
 80081d6:	68ca      	ldr	r2, [r1, #12]
              Init->MemoryType              | \
 80081d8:	4313      	orrs	r3, r2
              Init->BurstAccessMode         | \
 80081da:	690a      	ldr	r2, [r1, #16]
              Init->MemoryDataWidth         | \
 80081dc:	4313      	orrs	r3, r2
              Init->WaitSignalPolarity      | \
 80081de:	694a      	ldr	r2, [r1, #20]
              Init->BurstAccessMode         | \
 80081e0:	4313      	orrs	r3, r2
              Init->WaitSignalActive        | \
 80081e2:	698a      	ldr	r2, [r1, #24]
              Init->WaitSignalPolarity      | \
 80081e4:	4313      	orrs	r3, r2
              Init->WriteOperation          | \
 80081e6:	69ca      	ldr	r2, [r1, #28]
              Init->WaitSignalActive        | \
 80081e8:	4313      	orrs	r3, r2
              Init->WaitSignal              | \
 80081ea:	6a0a      	ldr	r2, [r1, #32]
              Init->WriteOperation          | \
 80081ec:	4313      	orrs	r3, r2
              Init->ExtendedMode            | \
 80081ee:	6a4a      	ldr	r2, [r1, #36]	; 0x24
              Init->WaitSignal              | \
 80081f0:	4313      	orrs	r3, r2
              Init->AsynchronousWait        | \
 80081f2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
              Init->ExtendedMode            | \
 80081f4:	4313      	orrs	r3, r2
              Init->WriteBurst);
 80081f6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80081f8:	4313      	orrs	r3, r2

  btcr_reg |= Init->ContinuousClock;
 80081fa:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80081fc:	4313      	orrs	r3, r2
  btcr_reg |= Init->WriteFifo;
 80081fe:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8008200:	431a      	orrs	r2, r3
  btcr_reg |= Init->NBLSetupTime;
 8008202:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8008204:	431a      	orrs	r2, r3
  btcr_reg |= Init->PageSize;
 8008206:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8008208:	431a      	orrs	r2, r3
  mask |= FMC_BCR1_CCLKEN;
  mask |= FMC_BCR1_WFDIS;
  mask |= FMC_BCRx_NBLSET;
  mask |= FMC_BCRx_CPSIZE;

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800820a:	680c      	ldr	r4, [r1, #0]
 800820c:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8008210:	4b20      	ldr	r3, [pc, #128]	; (8008294 <FMC_NORSRAM_Init+0xdc>)
 8008212:	402b      	ands	r3, r5
 8008214:	4313      	orrs	r3, r2
 8008216:	f840 3024 	str.w	r3, [r0, r4, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800821a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800821c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008220:	d00e      	beq.n	8008240 <FMC_NORSRAM_Init+0x88>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8008222:	680b      	ldr	r3, [r1, #0]
 8008224:	b11b      	cbz	r3, 800822e <FMC_NORSRAM_Init+0x76>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8008226:	6803      	ldr	r3, [r0, #0]
 8008228:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800822a:	4313      	orrs	r3, r2
 800822c:	6003      	str	r3, [r0, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800822e:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 8008232:	2b01      	cmp	r3, #1
 8008234:	d00d      	beq.n	8008252 <FMC_NORSRAM_Init+0x9a>
        break;
    }
  }

  return HAL_OK;
}
 8008236:	2000      	movs	r0, #0
 8008238:	bc30      	pop	{r4, r5}
 800823a:	4770      	bx	lr
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800823c:	2440      	movs	r4, #64	; 0x40
 800823e:	e7c7      	b.n	80081d0 <FMC_NORSRAM_Init+0x18>
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8008240:	680a      	ldr	r2, [r1, #0]
 8008242:	2a00      	cmp	r2, #0
 8008244:	d0ed      	beq.n	8008222 <FMC_NORSRAM_Init+0x6a>
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8008246:	6802      	ldr	r2, [r0, #0]
 8008248:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800824c:	4313      	orrs	r3, r2
 800824e:	6003      	str	r3, [r0, #0]
 8008250:	e7e7      	b.n	8008222 <FMC_NORSRAM_Init+0x6a>
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 8008252:	6a03      	ldr	r3, [r0, #32]
 8008254:	0c1b      	lsrs	r3, r3, #16
 8008256:	041b      	lsls	r3, r3, #16
 8008258:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 800825a:	4313      	orrs	r3, r2
 800825c:	6203      	str	r3, [r0, #32]
    switch (Init->NSBank)
 800825e:	680b      	ldr	r3, [r1, #0]
 8008260:	2b02      	cmp	r3, #2
 8008262:	d00c      	beq.n	800827e <FMC_NORSRAM_Init+0xc6>
 8008264:	2b04      	cmp	r3, #4
 8008266:	d00f      	beq.n	8008288 <FMC_NORSRAM_Init+0xd0>
 8008268:	b123      	cbz	r3, 8008274 <FMC_NORSRAM_Init+0xbc>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800826a:	6a03      	ldr	r3, [r0, #32]
 800826c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008270:	6203      	str	r3, [r0, #32]
        break;
 8008272:	e7e0      	b.n	8008236 <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 8008274:	6a03      	ldr	r3, [r0, #32]
 8008276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800827a:	6203      	str	r3, [r0, #32]
        break;
 800827c:	e7db      	b.n	8008236 <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800827e:	6a03      	ldr	r3, [r0, #32]
 8008280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008284:	6203      	str	r3, [r0, #32]
        break;
 8008286:	e7d6      	b.n	8008236 <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 8008288:	6a03      	ldr	r3, [r0, #32]
 800828a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800828e:	6203      	str	r3, [r0, #32]
        break;
 8008290:	e7d1      	b.n	8008236 <FMC_NORSRAM_Init+0x7e>
 8008292:	bf00      	nop
 8008294:	ff000480 	.word	0xff000480

08008298 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008298:	b410      	push	{r4}
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800829a:	3201      	adds	r2, #1
 800829c:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 80082a0:	680b      	ldr	r3, [r1, #0]
 80082a2:	684c      	ldr	r4, [r1, #4]
 80082a4:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80082a8:	688c      	ldr	r4, [r1, #8]
 80082aa:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80082ae:	68cc      	ldr	r4, [r1, #12]
 80082b0:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
 80082b4:	690c      	ldr	r4, [r1, #16]
 80082b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80082ba:	694c      	ldr	r4, [r1, #20]
 80082bc:	f104 3cff 	add.w	ip, r4, #4294967295
 80082c0:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 80082c4:	698c      	ldr	r4, [r1, #24]
 80082c6:	f1a4 0c02 	sub.w	ip, r4, #2
 80082ca:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 80082ce:	69cc      	ldr	r4, [r1, #28]
 80082d0:	4323      	orrs	r3, r4
 80082d2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80082d6:	6803      	ldr	r3, [r0, #0]
 80082d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80082dc:	d00b      	beq.n	80082f6 <FMC_NORSRAM_Timing_Init+0x5e>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80082de:	6843      	ldr	r3, [r0, #4]
 80082e0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 80082e4:	694a      	ldr	r2, [r1, #20]
 80082e6:	3a01      	subs	r2, #1
 80082e8:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80082ec:	6843      	ldr	r3, [r0, #4]
 80082ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80082f2:	4313      	orrs	r3, r2
 80082f4:	6043      	str	r3, [r0, #4]
  }

  return HAL_OK;
}
 80082f6:	2000      	movs	r0, #0
 80082f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <FMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80082fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008302:	d005      	beq.n	8008310 <FMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008304:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8008308:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800830c:	2000      	movs	r0, #0
 800830e:	4770      	bx	lr
{
 8008310:	b410      	push	{r4}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008312:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8008316:	f003 6c7f 	and.w	ip, r3, #267386880	; 0xff00000
 800831a:	680b      	ldr	r3, [r1, #0]
 800831c:	684c      	ldr	r4, [r1, #4]
 800831e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8008322:	688c      	ldr	r4, [r1, #8]
 8008324:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8008328:	68cc      	ldr	r4, [r1, #12]
 800832a:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
 800832e:	69cc      	ldr	r4, [r1, #28]
 8008330:	4323      	orrs	r3, r4
 8008332:	6909      	ldr	r1, [r1, #16]
 8008334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008338:	ea4c 0303 	orr.w	r3, ip, r3
 800833c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 8008340:	2000      	movs	r0, #0
 8008342:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008346:	4770      	bx	lr

08008348 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008348:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800834a:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800834c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8008350:	b112      	cbz	r2, 8008358 <LL_GPIO_Init+0x10>
  return __builtin_clz(value);
 8008352:	fab2 f282 	clz	r2, r2
 8008356:	e04e      	b.n	80083f6 <LL_GPIO_Init+0xae>
    return 32U;
 8008358:	2220      	movs	r2, #32

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800835a:	e04c      	b.n	80083f6 <LL_GPIO_Init+0xae>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800835c:	688e      	ldr	r6, [r1, #8]
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800835e:	6885      	ldr	r5, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008360:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8008364:	b1e4      	cbz	r4, 80083a0 <LL_GPIO_Init+0x58>
  return __builtin_clz(value);
 8008366:	fab4 f484 	clz	r4, r4
 800836a:	0064      	lsls	r4, r4, #1
 800836c:	f04f 0c03 	mov.w	ip, #3
 8008370:	fa0c f404 	lsl.w	r4, ip, r4
 8008374:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008378:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800837c:	b194      	cbz	r4, 80083a4 <LL_GPIO_Init+0x5c>
  return __builtin_clz(value);
 800837e:	fab4 f484 	clz	r4, r4
 8008382:	0064      	lsls	r4, r4, #1
 8008384:	fa06 f404 	lsl.w	r4, r6, r4
 8008388:	432c      	orrs	r4, r5
 800838a:	6084      	str	r4, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800838c:	680d      	ldr	r5, [r1, #0]
 800838e:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008390:	6844      	ldr	r4, [r0, #4]
 8008392:	ea24 0405 	bic.w	r4, r4, r5
 8008396:	fb06 f505 	mul.w	r5, r6, r5
 800839a:	432c      	orrs	r4, r5
 800839c:	6044      	str	r4, [r0, #4]
}
 800839e:	e039      	b.n	8008414 <LL_GPIO_Init+0xcc>
    return 32U;
 80083a0:	2420      	movs	r4, #32
 80083a2:	e7e2      	b.n	800836a <LL_GPIO_Init+0x22>
 80083a4:	2420      	movs	r4, #32
 80083a6:	e7ec      	b.n	8008382 <LL_GPIO_Init+0x3a>
 80083a8:	2420      	movs	r4, #32
 80083aa:	e03b      	b.n	8008424 <LL_GPIO_Init+0xdc>
 80083ac:	2420      	movs	r4, #32
 80083ae:	e046      	b.n	800843e <LL_GPIO_Init+0xf6>
 80083b0:	2420      	movs	r4, #32
 80083b2:	e056      	b.n	8008462 <LL_GPIO_Init+0x11a>
 80083b4:	2420      	movs	r4, #32
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80083b6:	00a4      	lsls	r4, r4, #2
 80083b8:	fa06 f404 	lsl.w	r4, r6, r4
 80083bc:	432c      	orrs	r4, r5
 80083be:	6204      	str	r4, [r0, #32]
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80083c0:	684e      	ldr	r6, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80083c2:	6805      	ldr	r5, [r0, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083c4:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 80083c8:	2c00      	cmp	r4, #0
 80083ca:	d075      	beq.n	80084b8 <LL_GPIO_Init+0x170>
  return __builtin_clz(value);
 80083cc:	fab4 f484 	clz	r4, r4
 80083d0:	0064      	lsls	r4, r4, #1
 80083d2:	f04f 0c03 	mov.w	ip, #3
 80083d6:	fa0c f404 	lsl.w	r4, ip, r4
 80083da:	ea25 0404 	bic.w	r4, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083de:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d06a      	beq.n	80084bc <LL_GPIO_Init+0x174>
  return __builtin_clz(value);
 80083e6:	fab3 f383 	clz	r3, r3
 80083ea:	005b      	lsls	r3, r3, #1
 80083ec:	fa06 f303 	lsl.w	r3, r6, r3
 80083f0:	4323      	orrs	r3, r4
 80083f2:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 80083f4:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80083f6:	680b      	ldr	r3, [r1, #0]
 80083f8:	fa33 f402 	lsrs.w	r4, r3, r2
 80083fc:	d060      	beq.n	80084c0 <LL_GPIO_Init+0x178>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80083fe:	f04f 0c01 	mov.w	ip, #1
 8008402:	fa0c fc02 	lsl.w	ip, ip, r2
    if (currentpin != 0x00u)
 8008406:	ea1c 0303 	ands.w	r3, ip, r3
 800840a:	d0f3      	beq.n	80083f4 <LL_GPIO_Init+0xac>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800840c:	684c      	ldr	r4, [r1, #4]
 800840e:	3c01      	subs	r4, #1
 8008410:	2c01      	cmp	r4, #1
 8008412:	d9a3      	bls.n	800835c <LL_GPIO_Init+0x14>
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008414:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008416:	68c5      	ldr	r5, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008418:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800841c:	2c00      	cmp	r4, #0
 800841e:	d0c3      	beq.n	80083a8 <LL_GPIO_Init+0x60>
  return __builtin_clz(value);
 8008420:	fab4 f484 	clz	r4, r4
 8008424:	0064      	lsls	r4, r4, #1
 8008426:	f04f 0c03 	mov.w	ip, #3
 800842a:	fa0c f404 	lsl.w	r4, ip, r4
 800842e:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008432:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8008436:	2c00      	cmp	r4, #0
 8008438:	d0b8      	beq.n	80083ac <LL_GPIO_Init+0x64>
  return __builtin_clz(value);
 800843a:	fab4 f484 	clz	r4, r4
 800843e:	0064      	lsls	r4, r4, #1
 8008440:	fa06 f404 	lsl.w	r4, r6, r4
 8008444:	432c      	orrs	r4, r5
 8008446:	60c4      	str	r4, [r0, #12]
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008448:	684c      	ldr	r4, [r1, #4]
 800844a:	2c02      	cmp	r4, #2
 800844c:	d1b8      	bne.n	80083c0 <LL_GPIO_Init+0x78>
        if (currentpin < LL_GPIO_PIN_8)
 800844e:	2bff      	cmp	r3, #255	; 0xff
 8008450:	d814      	bhi.n	800847c <LL_GPIO_Init+0x134>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008452:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008454:	6a05      	ldr	r5, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008456:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800845a:	2c00      	cmp	r4, #0
 800845c:	d0a8      	beq.n	80083b0 <LL_GPIO_Init+0x68>
  return __builtin_clz(value);
 800845e:	fab4 f484 	clz	r4, r4
 8008462:	00a4      	lsls	r4, r4, #2
 8008464:	270f      	movs	r7, #15
 8008466:	fa07 f404 	lsl.w	r4, r7, r4
 800846a:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800846e:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8008472:	2c00      	cmp	r4, #0
 8008474:	d09e      	beq.n	80083b4 <LL_GPIO_Init+0x6c>
  return __builtin_clz(value);
 8008476:	fab4 f484 	clz	r4, r4
 800847a:	e79c      	b.n	80083b6 <LL_GPIO_Init+0x6e>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800847c:	694f      	ldr	r7, [r1, #20]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800847e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008480:	0a1c      	lsrs	r4, r3, #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008482:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8008486:	b19d      	cbz	r5, 80084b0 <LL_GPIO_Init+0x168>
  return __builtin_clz(value);
 8008488:	fab5 f585 	clz	r5, r5
 800848c:	00ad      	lsls	r5, r5, #2
 800848e:	f04f 0c0f 	mov.w	ip, #15
 8008492:	fa0c f505 	lsl.w	r5, ip, r5
 8008496:	ea26 0505 	bic.w	r5, r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800849a:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 800849e:	b14c      	cbz	r4, 80084b4 <LL_GPIO_Init+0x16c>
  return __builtin_clz(value);
 80084a0:	fab4 f484 	clz	r4, r4
 80084a4:	00a4      	lsls	r4, r4, #2
 80084a6:	fa07 f404 	lsl.w	r4, r7, r4
 80084aa:	432c      	orrs	r4, r5
 80084ac:	6244      	str	r4, [r0, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80084ae:	e787      	b.n	80083c0 <LL_GPIO_Init+0x78>
    return 32U;
 80084b0:	2520      	movs	r5, #32
 80084b2:	e7eb      	b.n	800848c <LL_GPIO_Init+0x144>
 80084b4:	2420      	movs	r4, #32
 80084b6:	e7f5      	b.n	80084a4 <LL_GPIO_Init+0x15c>
 80084b8:	2420      	movs	r4, #32
 80084ba:	e789      	b.n	80083d0 <LL_GPIO_Init+0x88>
 80084bc:	2320      	movs	r3, #32
 80084be:	e794      	b.n	80083ea <LL_GPIO_Init+0xa2>
  }
  return (SUCCESS);
}
 80084c0:	2000      	movs	r0, #0
 80084c2:	bcf0      	pop	{r4, r5, r6, r7}
 80084c4:	4770      	bx	lr
	...

080084c8 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80084c8:	4b04      	ldr	r3, [pc, #16]	; (80084dc <RCC_GetHCLKClockFreq+0x14>)
 80084ca:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80084cc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80084d0:	4a03      	ldr	r2, [pc, #12]	; (80084e0 <RCC_GetHCLKClockFreq+0x18>)
 80084d2:	5cd3      	ldrb	r3, [r2, r3]
 80084d4:	f003 031f 	and.w	r3, r3, #31
}
 80084d8:	40d8      	lsrs	r0, r3
 80084da:	4770      	bx	lr
 80084dc:	40021000 	.word	0x40021000
 80084e0:	0800f928 	.word	0x0800f928

080084e4 <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80084e4:	4b04      	ldr	r3, [pc, #16]	; (80084f8 <RCC_GetPCLK1ClockFreq+0x14>)
 80084e6:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80084e8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80084ec:	4a03      	ldr	r2, [pc, #12]	; (80084fc <RCC_GetPCLK1ClockFreq+0x18>)
 80084ee:	5cd3      	ldrb	r3, [r2, r3]
 80084f0:	f003 031f 	and.w	r3, r3, #31
}
 80084f4:	40d8      	lsrs	r0, r3
 80084f6:	4770      	bx	lr
 80084f8:	40021000 	.word	0x40021000
 80084fc:	0800f938 	.word	0x0800f938

08008500 <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8008500:	4b04      	ldr	r3, [pc, #16]	; (8008514 <RCC_GetPCLK2ClockFreq+0x14>)
 8008502:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8008504:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8008508:	4a03      	ldr	r2, [pc, #12]	; (8008518 <RCC_GetPCLK2ClockFreq+0x18>)
 800850a:	5cd3      	ldrb	r3, [r2, r3]
 800850c:	f003 031f 	and.w	r3, r3, #31
}
 8008510:	40d8      	lsrs	r0, r3
 8008512:	4770      	bx	lr
 8008514:	40021000 	.word	0x40021000
 8008518:	0800f938 	.word	0x0800f938

0800851c <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800851c:	4b0e      	ldr	r3, [pc, #56]	; (8008558 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	f003 0303 	and.w	r3, r3, #3
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8008524:	2b03      	cmp	r3, #3
 8008526:	d014      	beq.n	8008552 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8008528:	480c      	ldr	r0, [pc, #48]	; (800855c <RCC_PLL_GetFreqDomain_SYS+0x40>)
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800852a:	4a0b      	ldr	r2, [pc, #44]	; (8008558 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 800852c:	68d3      	ldr	r3, [r2, #12]
 800852e:	f3c3 2306 	ubfx	r3, r3, #8, #7

    default:
      pllinputfreq = HSI_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008532:	fb03 f000 	mul.w	r0, r3, r0
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008536:	68d3      	ldr	r3, [r2, #12]
 8008538:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800853c:	3301      	adds	r3, #1
 800853e:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8008542:	68d3      	ldr	r3, [r2, #12]
 8008544:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8008548:	3301      	adds	r3, #1
 800854a:	005b      	lsls	r3, r3, #1
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800854c:	fbb0 f0f3 	udiv	r0, r0, r3
 8008550:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 8008552:	4803      	ldr	r0, [pc, #12]	; (8008560 <RCC_PLL_GetFreqDomain_SYS+0x44>)
 8008554:	e7e9      	b.n	800852a <RCC_PLL_GetFreqDomain_SYS+0xe>
 8008556:	bf00      	nop
 8008558:	40021000 	.word	0x40021000
 800855c:	00f42400 	.word	0x00f42400
 8008560:	007a1200 	.word	0x007a1200

08008564 <RCC_GetSystemClockFreq>:
{
 8008564:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008566:	4b07      	ldr	r3, [pc, #28]	; (8008584 <RCC_GetSystemClockFreq+0x20>)
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 800856e:	2b08      	cmp	r3, #8
 8008570:	d004      	beq.n	800857c <RCC_GetSystemClockFreq+0x18>
 8008572:	2b0c      	cmp	r3, #12
 8008574:	d104      	bne.n	8008580 <RCC_GetSystemClockFreq+0x1c>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8008576:	f7ff ffd1 	bl	800851c <RCC_PLL_GetFreqDomain_SYS>
      break;
 800857a:	e002      	b.n	8008582 <RCC_GetSystemClockFreq+0x1e>
      frequency = HSE_VALUE;
 800857c:	4802      	ldr	r0, [pc, #8]	; (8008588 <RCC_GetSystemClockFreq+0x24>)
 800857e:	e000      	b.n	8008582 <RCC_GetSystemClockFreq+0x1e>
  switch (LL_RCC_GetSysClkSource())
 8008580:	4802      	ldr	r0, [pc, #8]	; (800858c <RCC_GetSystemClockFreq+0x28>)
}
 8008582:	bd08      	pop	{r3, pc}
 8008584:	40021000 	.word	0x40021000
 8008588:	007a1200 	.word	0x007a1200
 800858c:	00f42400 	.word	0x00f42400

08008590 <LL_RCC_GetUSARTClockFreq>:
{
 8008590:	b508      	push	{r3, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8008592:	2803      	cmp	r0, #3
 8008594:	d005      	beq.n	80085a2 <LL_RCC_GetUSARTClockFreq+0x12>
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8008596:	280c      	cmp	r0, #12
 8008598:	d02c      	beq.n	80085f4 <LL_RCC_GetUSARTClockFreq+0x64>
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800859a:	2830      	cmp	r0, #48	; 0x30
 800859c:	d053      	beq.n	8008646 <LL_RCC_GetUSARTClockFreq+0xb6>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800859e:	2000      	movs	r0, #0
}
 80085a0:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80085a2:	4b3d      	ldr	r3, [pc, #244]	; (8008698 <LL_RCC_GetUSARTClockFreq+0x108>)
 80085a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085a8:	4003      	ands	r3, r0
 80085aa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80085ae:	4b3b      	ldr	r3, [pc, #236]	; (800869c <LL_RCC_GetUSARTClockFreq+0x10c>)
 80085b0:	4298      	cmp	r0, r3
 80085b2:	d00f      	beq.n	80085d4 <LL_RCC_GetUSARTClockFreq+0x44>
 80085b4:	f1b0 1f03 	cmp.w	r0, #196611	; 0x30003
 80085b8:	d013      	beq.n	80085e2 <LL_RCC_GetUSARTClockFreq+0x52>
 80085ba:	3b01      	subs	r3, #1
 80085bc:	4298      	cmp	r0, r3
 80085be:	d006      	beq.n	80085ce <LL_RCC_GetUSARTClockFreq+0x3e>
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80085c0:	f7ff ffd0 	bl	8008564 <RCC_GetSystemClockFreq>
 80085c4:	f7ff ff80 	bl	80084c8 <RCC_GetHCLKClockFreq>
 80085c8:	f7ff ff9a 	bl	8008500 <RCC_GetPCLK2ClockFreq>
        break;
 80085cc:	e7e8      	b.n	80085a0 <LL_RCC_GetUSARTClockFreq+0x10>
        usart_frequency = RCC_GetSystemClockFreq();
 80085ce:	f7ff ffc9 	bl	8008564 <RCC_GetSystemClockFreq>
        break;
 80085d2:	e7e5      	b.n	80085a0 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80085d4:	4b30      	ldr	r3, [pc, #192]	; (8008698 <LL_RCC_GetUSARTClockFreq+0x108>)
 80085d6:	6818      	ldr	r0, [r3, #0]
 80085d8:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 80085dc:	d0e0      	beq.n	80085a0 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = HSI_VALUE;
 80085de:	4830      	ldr	r0, [pc, #192]	; (80086a0 <LL_RCC_GetUSARTClockFreq+0x110>)
 80085e0:	e7de      	b.n	80085a0 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80085e2:	4b2d      	ldr	r3, [pc, #180]	; (8008698 <LL_RCC_GetUSARTClockFreq+0x108>)
 80085e4:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80085e8:	f010 0002 	ands.w	r0, r0, #2
 80085ec:	d0d8      	beq.n	80085a0 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = LSE_VALUE;
 80085ee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80085f2:	e7d5      	b.n	80085a0 <LL_RCC_GetUSARTClockFreq+0x10>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80085f4:	4b28      	ldr	r3, [pc, #160]	; (8008698 <LL_RCC_GetUSARTClockFreq+0x108>)
 80085f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085fa:	4003      	ands	r3, r0
 80085fc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8008600:	4b28      	ldr	r3, [pc, #160]	; (80086a4 <LL_RCC_GetUSARTClockFreq+0x114>)
 8008602:	4298      	cmp	r0, r3
 8008604:	d00f      	beq.n	8008626 <LL_RCC_GetUSARTClockFreq+0x96>
 8008606:	f1b0 1f0c 	cmp.w	r0, #786444	; 0xc000c
 800860a:	d013      	beq.n	8008634 <LL_RCC_GetUSARTClockFreq+0xa4>
 800860c:	3b04      	subs	r3, #4
 800860e:	4298      	cmp	r0, r3
 8008610:	d006      	beq.n	8008620 <LL_RCC_GetUSARTClockFreq+0x90>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008612:	f7ff ffa7 	bl	8008564 <RCC_GetSystemClockFreq>
 8008616:	f7ff ff57 	bl	80084c8 <RCC_GetHCLKClockFreq>
 800861a:	f7ff ff63 	bl	80084e4 <RCC_GetPCLK1ClockFreq>
        break;
 800861e:	e7bf      	b.n	80085a0 <LL_RCC_GetUSARTClockFreq+0x10>
        usart_frequency = RCC_GetSystemClockFreq();
 8008620:	f7ff ffa0 	bl	8008564 <RCC_GetSystemClockFreq>
        break;
 8008624:	e7bc      	b.n	80085a0 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008626:	4b1c      	ldr	r3, [pc, #112]	; (8008698 <LL_RCC_GetUSARTClockFreq+0x108>)
 8008628:	6818      	ldr	r0, [r3, #0]
 800862a:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800862e:	d0b7      	beq.n	80085a0 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = HSI_VALUE;
 8008630:	481b      	ldr	r0, [pc, #108]	; (80086a0 <LL_RCC_GetUSARTClockFreq+0x110>)
 8008632:	e7b5      	b.n	80085a0 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008634:	4b18      	ldr	r3, [pc, #96]	; (8008698 <LL_RCC_GetUSARTClockFreq+0x108>)
 8008636:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800863a:	f010 0002 	ands.w	r0, r0, #2
 800863e:	d0af      	beq.n	80085a0 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = LSE_VALUE;
 8008640:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008644:	e7ac      	b.n	80085a0 <LL_RCC_GetUSARTClockFreq+0x10>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8008646:	4b14      	ldr	r3, [pc, #80]	; (8008698 <LL_RCC_GetUSARTClockFreq+0x108>)
 8008648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800864c:	4003      	ands	r3, r0
 800864e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8008652:	4b15      	ldr	r3, [pc, #84]	; (80086a8 <LL_RCC_GetUSARTClockFreq+0x118>)
 8008654:	4298      	cmp	r0, r3
 8008656:	d00f      	beq.n	8008678 <LL_RCC_GetUSARTClockFreq+0xe8>
 8008658:	f1b0 1f30 	cmp.w	r0, #3145776	; 0x300030
 800865c:	d013      	beq.n	8008686 <LL_RCC_GetUSARTClockFreq+0xf6>
 800865e:	3b10      	subs	r3, #16
 8008660:	4298      	cmp	r0, r3
 8008662:	d006      	beq.n	8008672 <LL_RCC_GetUSARTClockFreq+0xe2>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008664:	f7ff ff7e 	bl	8008564 <RCC_GetSystemClockFreq>
 8008668:	f7ff ff2e 	bl	80084c8 <RCC_GetHCLKClockFreq>
 800866c:	f7ff ff3a 	bl	80084e4 <RCC_GetPCLK1ClockFreq>
          break;
 8008670:	e796      	b.n	80085a0 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = RCC_GetSystemClockFreq();
 8008672:	f7ff ff77 	bl	8008564 <RCC_GetSystemClockFreq>
          break;
 8008676:	e793      	b.n	80085a0 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008678:	4b07      	ldr	r3, [pc, #28]	; (8008698 <LL_RCC_GetUSARTClockFreq+0x108>)
 800867a:	6818      	ldr	r0, [r3, #0]
 800867c:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8008680:	d08e      	beq.n	80085a0 <LL_RCC_GetUSARTClockFreq+0x10>
            usart_frequency = HSI_VALUE;
 8008682:	4807      	ldr	r0, [pc, #28]	; (80086a0 <LL_RCC_GetUSARTClockFreq+0x110>)
 8008684:	e78c      	b.n	80085a0 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008686:	4b04      	ldr	r3, [pc, #16]	; (8008698 <LL_RCC_GetUSARTClockFreq+0x108>)
 8008688:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800868c:	f010 0002 	ands.w	r0, r0, #2
 8008690:	d086      	beq.n	80085a0 <LL_RCC_GetUSARTClockFreq+0x10>
            usart_frequency = LSE_VALUE;
 8008692:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return usart_frequency;
 8008696:	e783      	b.n	80085a0 <LL_RCC_GetUSARTClockFreq+0x10>
 8008698:	40021000 	.word	0x40021000
 800869c:	00030002 	.word	0x00030002
 80086a0:	00f42400 	.word	0x00f42400
 80086a4:	000c0008 	.word	0x000c0008
 80086a8:	00300020 	.word	0x00300020

080086ac <LL_RCC_GetUARTClockFreq>:
{
 80086ac:	b510      	push	{r4, lr}
 80086ae:	4604      	mov	r4, r0
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80086b0:	28c0      	cmp	r0, #192	; 0xc0
 80086b2:	d004      	beq.n	80086be <LL_RCC_GetUARTClockFreq+0x12>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80086b4:	2000      	movs	r0, #0
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80086b6:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 80086ba:	d029      	beq.n	8008710 <LL_RCC_GetUARTClockFreq+0x64>
}
 80086bc:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 80086be:	4b29      	ldr	r3, [pc, #164]	; (8008764 <LL_RCC_GetUARTClockFreq+0xb8>)
 80086c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086c4:	4003      	ands	r3, r0
 80086c6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80086ca:	4a27      	ldr	r2, [pc, #156]	; (8008768 <LL_RCC_GetUARTClockFreq+0xbc>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d00f      	beq.n	80086f0 <LL_RCC_GetUARTClockFreq+0x44>
 80086d0:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80086d4:	d013      	beq.n	80086fe <LL_RCC_GetUARTClockFreq+0x52>
 80086d6:	3a40      	subs	r2, #64	; 0x40
 80086d8:	4293      	cmp	r3, r2
 80086da:	d006      	beq.n	80086ea <LL_RCC_GetUARTClockFreq+0x3e>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80086dc:	f7ff ff42 	bl	8008564 <RCC_GetSystemClockFreq>
 80086e0:	f7ff fef2 	bl	80084c8 <RCC_GetHCLKClockFreq>
 80086e4:	f7ff fefe 	bl	80084e4 <RCC_GetPCLK1ClockFreq>
        break;
 80086e8:	e7e5      	b.n	80086b6 <LL_RCC_GetUARTClockFreq+0xa>
        uart_frequency = RCC_GetSystemClockFreq();
 80086ea:	f7ff ff3b 	bl	8008564 <RCC_GetSystemClockFreq>
        break;
 80086ee:	e7e2      	b.n	80086b6 <LL_RCC_GetUARTClockFreq+0xa>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80086f0:	4b1c      	ldr	r3, [pc, #112]	; (8008764 <LL_RCC_GetUARTClockFreq+0xb8>)
 80086f2:	6818      	ldr	r0, [r3, #0]
 80086f4:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 80086f8:	d0dd      	beq.n	80086b6 <LL_RCC_GetUARTClockFreq+0xa>
          uart_frequency = HSI_VALUE;
 80086fa:	481c      	ldr	r0, [pc, #112]	; (800876c <LL_RCC_GetUARTClockFreq+0xc0>)
 80086fc:	e7db      	b.n	80086b6 <LL_RCC_GetUARTClockFreq+0xa>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80086fe:	4b19      	ldr	r3, [pc, #100]	; (8008764 <LL_RCC_GetUARTClockFreq+0xb8>)
 8008700:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8008704:	f010 0002 	ands.w	r0, r0, #2
 8008708:	d0d5      	beq.n	80086b6 <LL_RCC_GetUARTClockFreq+0xa>
          uart_frequency = LSE_VALUE;
 800870a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800870e:	e7d2      	b.n	80086b6 <LL_RCC_GetUARTClockFreq+0xa>
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8008710:	4b14      	ldr	r3, [pc, #80]	; (8008764 <LL_RCC_GetUARTClockFreq+0xb8>)
 8008712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008716:	4023      	ands	r3, r4
 8008718:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800871c:	4b14      	ldr	r3, [pc, #80]	; (8008770 <LL_RCC_GetUARTClockFreq+0xc4>)
 800871e:	429c      	cmp	r4, r3
 8008720:	d010      	beq.n	8008744 <LL_RCC_GetUARTClockFreq+0x98>
 8008722:	f1b4 2f03 	cmp.w	r4, #50332416	; 0x3000300
 8008726:	d014      	beq.n	8008752 <LL_RCC_GetUARTClockFreq+0xa6>
 8008728:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800872c:	429c      	cmp	r4, r3
 800872e:	d006      	beq.n	800873e <LL_RCC_GetUARTClockFreq+0x92>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008730:	f7ff ff18 	bl	8008564 <RCC_GetSystemClockFreq>
 8008734:	f7ff fec8 	bl	80084c8 <RCC_GetHCLKClockFreq>
 8008738:	f7ff fed4 	bl	80084e4 <RCC_GetPCLK1ClockFreq>
        break;
 800873c:	e7be      	b.n	80086bc <LL_RCC_GetUARTClockFreq+0x10>
        uart_frequency = RCC_GetSystemClockFreq();
 800873e:	f7ff ff11 	bl	8008564 <RCC_GetSystemClockFreq>
        break;
 8008742:	e7bb      	b.n	80086bc <LL_RCC_GetUARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008744:	4b07      	ldr	r3, [pc, #28]	; (8008764 <LL_RCC_GetUARTClockFreq+0xb8>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800874c:	d0b6      	beq.n	80086bc <LL_RCC_GetUARTClockFreq+0x10>
          uart_frequency = HSI_VALUE;
 800874e:	4807      	ldr	r0, [pc, #28]	; (800876c <LL_RCC_GetUARTClockFreq+0xc0>)
 8008750:	e7b4      	b.n	80086bc <LL_RCC_GetUARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008752:	4b04      	ldr	r3, [pc, #16]	; (8008764 <LL_RCC_GetUARTClockFreq+0xb8>)
 8008754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008758:	f013 0f02 	tst.w	r3, #2
 800875c:	d0ae      	beq.n	80086bc <LL_RCC_GetUARTClockFreq+0x10>
          uart_frequency = LSE_VALUE;
 800875e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return uart_frequency;
 8008762:	e7ab      	b.n	80086bc <LL_RCC_GetUARTClockFreq+0x10>
 8008764:	40021000 	.word	0x40021000
 8008768:	00c00080 	.word	0x00c00080
 800876c:	00f42400 	.word	0x00f42400
 8008770:	03000200 	.word	0x03000200

08008774 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8008774:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8008776:	6803      	ldr	r3, [r0, #0]
 8008778:	f013 0f01 	tst.w	r3, #1
 800877c:	d175      	bne.n	800886a <LL_USART_Init+0xf6>
 800877e:	4604      	mov	r4, r0
 8008780:	460d      	mov	r5, r1
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8008782:	6803      	ldr	r3, [r0, #0]
 8008784:	4a3a      	ldr	r2, [pc, #232]	; (8008870 <LL_USART_Init+0xfc>)
 8008786:	401a      	ands	r2, r3
 8008788:	688b      	ldr	r3, [r1, #8]
 800878a:	6909      	ldr	r1, [r1, #16]
 800878c:	430b      	orrs	r3, r1
 800878e:	6969      	ldr	r1, [r5, #20]
 8008790:	430b      	orrs	r3, r1
 8008792:	69e9      	ldr	r1, [r5, #28]
 8008794:	430b      	orrs	r3, r1
 8008796:	4313      	orrs	r3, r2
 8008798:	6003      	str	r3, [r0, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800879a:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800879c:	6842      	ldr	r2, [r0, #4]
 800879e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80087a2:	4313      	orrs	r3, r2
 80087a4:	6043      	str	r3, [r0, #4]
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80087a6:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80087a8:	6882      	ldr	r2, [r0, #8]
 80087aa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80087ae:	4313      	orrs	r3, r2
 80087b0:	6083      	str	r3, [r0, #8]

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80087b2:	4b30      	ldr	r3, [pc, #192]	; (8008874 <LL_USART_Init+0x100>)
 80087b4:	4298      	cmp	r0, r3
 80087b6:	d013      	beq.n	80087e0 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
    }
    else if (USARTx == USART2)
 80087b8:	4b2f      	ldr	r3, [pc, #188]	; (8008878 <LL_USART_Init+0x104>)
 80087ba:	4298      	cmp	r0, r3
 80087bc:	d019      	beq.n	80087f2 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
    }
    else if (USARTx == USART3)
 80087be:	4b2f      	ldr	r3, [pc, #188]	; (800887c <LL_USART_Init+0x108>)
 80087c0:	4298      	cmp	r0, r3
 80087c2:	d01a      	beq.n	80087fa <LL_USART_Init+0x86>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
    }
#if defined(UART4)
    else if (USARTx == UART4)
 80087c4:	4b2e      	ldr	r3, [pc, #184]	; (8008880 <LL_USART_Init+0x10c>)
 80087c6:	4298      	cmp	r0, r3
 80087c8:	d01b      	beq.n	8008802 <LL_USART_Init+0x8e>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80087ca:	4b2e      	ldr	r3, [pc, #184]	; (8008884 <LL_USART_Init+0x110>)
 80087cc:	4298      	cmp	r0, r3
 80087ce:	d01c      	beq.n	800880a <LL_USART_Init+0x96>
  ErrorStatus status = ERROR;
 80087d0:	2001      	movs	r0, #1
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 80087d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80087d4:	f022 020f 	bic.w	r2, r2, #15
 80087d8:	882b      	ldrh	r3, [r5, #0]
 80087da:	4313      	orrs	r3, r2
 80087dc:	62e3      	str	r3, [r4, #44]	; 0x2c
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 80087de:	bd38      	pop	{r3, r4, r5, pc}
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80087e0:	2003      	movs	r0, #3
 80087e2:	f7ff fed5 	bl	8008590 <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80087e6:	2800      	cmp	r0, #0
 80087e8:	d03d      	beq.n	8008866 <LL_USART_Init+0xf2>
        && (USART_InitStruct->BaudRate != 0U))
 80087ea:	686a      	ldr	r2, [r5, #4]
 80087ec:	b992      	cbnz	r2, 8008814 <LL_USART_Init+0xa0>
  ErrorStatus status = ERROR;
 80087ee:	2001      	movs	r0, #1
 80087f0:	e7ef      	b.n	80087d2 <LL_USART_Init+0x5e>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80087f2:	200c      	movs	r0, #12
 80087f4:	f7ff fecc 	bl	8008590 <LL_RCC_GetUSARTClockFreq>
 80087f8:	e7f5      	b.n	80087e6 <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80087fa:	2030      	movs	r0, #48	; 0x30
 80087fc:	f7ff fec8 	bl	8008590 <LL_RCC_GetUSARTClockFreq>
 8008800:	e7f1      	b.n	80087e6 <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8008802:	20c0      	movs	r0, #192	; 0xc0
 8008804:	f7ff ff52 	bl	80086ac <LL_RCC_GetUARTClockFreq>
 8008808:	e7ed      	b.n	80087e6 <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800880a:	f44f 7040 	mov.w	r0, #768	; 0x300
 800880e:	f7ff ff4d 	bl	80086ac <LL_RCC_GetUARTClockFreq>
 8008812:	e7e8      	b.n	80087e6 <LL_USART_Init+0x72>
      LL_USART_SetBaudRate(USARTx,
 8008814:	682b      	ldr	r3, [r5, #0]
 8008816:	69e9      	ldr	r1, [r5, #28]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8008818:	2b0b      	cmp	r3, #11
 800881a:	d80f      	bhi.n	800883c <LL_USART_Init+0xc8>
  else if (BaudRate == 0U)
 800881c:	b172      	cbz	r2, 800883c <LL_USART_Init+0xc8>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800881e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8008822:	d00d      	beq.n	8008840 <LL_USART_Init+0xcc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8008824:	b2db      	uxtb	r3, r3
 8008826:	4918      	ldr	r1, [pc, #96]	; (8008888 <LL_USART_Init+0x114>)
 8008828:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800882c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008830:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008834:	fbb3 f3f2 	udiv	r3, r3, r2
 8008838:	b29b      	uxth	r3, r3
 800883a:	60e3      	str	r3, [r4, #12]
      status = SUCCESS;
 800883c:	2000      	movs	r0, #0
}
 800883e:	e7c8      	b.n	80087d2 <LL_USART_Init+0x5e>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8008840:	b2db      	uxtb	r3, r3
 8008842:	4911      	ldr	r1, [pc, #68]	; (8008888 <LL_USART_Init+0x114>)
 8008844:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008848:	fbb0 f0f3 	udiv	r0, r0, r3
 800884c:	0853      	lsrs	r3, r2, #1
 800884e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8008852:	fbb0 f3f2 	udiv	r3, r0, r2
    brrtemp = usartdiv & 0xFFF0U;
 8008856:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800885a:	401a      	ands	r2, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800885c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8008860:	4313      	orrs	r3, r2
    USARTx->BRR = brrtemp;
 8008862:	60e3      	str	r3, [r4, #12]
 8008864:	e7ea      	b.n	800883c <LL_USART_Init+0xc8>
  ErrorStatus status = ERROR;
 8008866:	2001      	movs	r0, #1
 8008868:	e7b3      	b.n	80087d2 <LL_USART_Init+0x5e>
 800886a:	2001      	movs	r0, #1
 800886c:	e7b7      	b.n	80087de <LL_USART_Init+0x6a>
 800886e:	bf00      	nop
 8008870:	efff69f3 	.word	0xefff69f3
 8008874:	40013800 	.word	0x40013800
 8008878:	40004400 	.word	0x40004400
 800887c:	40004800 	.word	0x40004800
 8008880:	40004c00 	.word	0x40004c00
 8008884:	40005000 	.word	0x40005000
 8008888:	0800f968 	.word	0x0800f968

0800888c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800888c:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800888e:	2000      	movs	r0, #0
 8008890:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008894:	f64b 7280 	movw	r2, #49024	; 0xbf80
 8008898:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 800889c:	4770      	bx	lr

0800889e <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800889e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80088a2:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 80088a6:	045b      	lsls	r3, r3, #17
 80088a8:	0c5b      	lsrs	r3, r3, #17
 80088aa:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80088ae:	2000      	movs	r0, #0
 80088b0:	4770      	bx	lr

080088b2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80088b2:	b084      	sub	sp, #16
 80088b4:	4684      	mov	ip, r0
 80088b6:	a801      	add	r0, sp, #4
 80088b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80088bc:	2301      	movs	r3, #1
 80088be:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80088c2:	2000      	movs	r0, #0
 80088c4:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80088c8:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80088cc:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50

  return HAL_OK;
}
 80088d0:	b004      	add	sp, #16
 80088d2:	4770      	bx	lr

080088d4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088d4:	b510      	push	{r4, lr}
 80088d6:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80088d8:	780a      	ldrb	r2, [r1, #0]
 80088da:	f830 c022 	ldrh.w	ip, [r0, r2, lsl #2]
 80088de:	fa1f fc8c 	uxth.w	ip, ip
 80088e2:	f42c 4cec 	bic.w	ip, ip, #30208	; 0x7600
 80088e6:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 80088ea:	fa1f fc8c 	uxth.w	ip, ip

  /* initialize Endpoint */
  switch (ep->type)
 80088ee:	78c8      	ldrb	r0, [r1, #3]
 80088f0:	2803      	cmp	r0, #3
 80088f2:	d862      	bhi.n	80089ba <USB_ActivateEndpoint+0xe6>
 80088f4:	e8df f000 	tbb	[pc, r0]
 80088f8:	59025d56 	.word	0x59025d56
 80088fc:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80088fe:	f248 0e80 	movw	lr, #32896	; 0x8080
 8008902:	ea4c 0c0e 	orr.w	ip, ip, lr
 8008906:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800890a:	f891 c000 	ldrb.w	ip, [r1]
 800890e:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8008912:	b212      	sxth	r2, r2
 8008914:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008918:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800891c:	ea4c 0202 	orr.w	r2, ip, r2
 8008920:	b292      	uxth	r2, r2
 8008922:	ea42 020e 	orr.w	r2, r2, lr
 8008926:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  if (ep->doublebuffer == 0U)
 800892a:	7b0a      	ldrb	r2, [r1, #12]
 800892c:	2a00      	cmp	r2, #0
 800892e:	f040 80c2 	bne.w	8008ab6 <USB_ActivateEndpoint+0x1e2>
  {
    if (ep->is_in != 0U)
 8008932:	784a      	ldrb	r2, [r1, #1]
 8008934:	2a00      	cmp	r2, #0
 8008936:	d051      	beq.n	80089dc <USB_ActivateEndpoint+0x108>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008938:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800893c:	fa13 f282 	uxtah	r2, r3, r2
 8008940:	780c      	ldrb	r4, [r1, #0]
 8008942:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8008946:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 800894a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800894e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8008952:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008956:	780c      	ldrb	r4, [r1, #0]
 8008958:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800895c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008960:	d00c      	beq.n	800897c <USB_ActivateEndpoint+0xa8>
 8008962:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008966:	b292      	uxth	r2, r2
 8008968:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800896c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008970:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008974:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8008978:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800897c:	78ca      	ldrb	r2, [r1, #3]
 800897e:	2a01      	cmp	r2, #1
 8008980:	d01d      	beq.n	80089be <USB_ActivateEndpoint+0xea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008982:	7809      	ldrb	r1, [r1, #0]
 8008984:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8008988:	b292      	uxth	r2, r2
 800898a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800898e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008992:	f082 0220 	eor.w	r2, r2, #32
 8008996:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800899a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800899e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80089a2:	e066      	b.n	8008a72 <USB_ActivateEndpoint+0x19e>
      wEpRegVal |= USB_EP_CONTROL;
 80089a4:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
      break;
 80089a8:	e7a9      	b.n	80088fe <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_INTERRUPT;
 80089aa:	f44c 6cc0 	orr.w	ip, ip, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80089ae:	2000      	movs	r0, #0
      break;
 80089b0:	e7a5      	b.n	80088fe <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80089b2:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 80089b6:	2000      	movs	r0, #0
      break;
 80089b8:	e7a1      	b.n	80088fe <USB_ActivateEndpoint+0x2a>
      ret = HAL_ERROR;
 80089ba:	2001      	movs	r0, #1
 80089bc:	e79f      	b.n	80088fe <USB_ActivateEndpoint+0x2a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80089be:	7809      	ldrb	r1, [r1, #0]
 80089c0:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80089c4:	b292      	uxth	r2, r2
 80089c6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80089ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80089d6:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80089da:	e04a      	b.n	8008a72 <USB_ActivateEndpoint+0x19e>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80089dc:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80089e0:	fa13 f282 	uxtah	r2, r3, r2
 80089e4:	780c      	ldrb	r4, [r1, #0]
 80089e6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80089ea:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 80089ee:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80089f2:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80089f6:	f8a2 c404 	strh.w	ip, [r2, #1028]	; 0x404

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80089fa:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80089fe:	fa13 f282 	uxtah	r2, r3, r2
 8008a02:	780c      	ldrb	r4, [r1, #0]
 8008a04:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8008a08:	690c      	ldr	r4, [r1, #16]
 8008a0a:	2c3e      	cmp	r4, #62	; 0x3e
 8008a0c:	d932      	bls.n	8008a74 <USB_ActivateEndpoint+0x1a0>
 8008a0e:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 8008a12:	f014 0f1f 	tst.w	r4, #31
 8008a16:	d101      	bne.n	8008a1c <USB_ActivateEndpoint+0x148>
 8008a18:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008a1c:	ea6f 6ccc 	mvn.w	ip, ip, lsl #27
 8008a20:	ea6f 4c5c 	mvn.w	ip, ip, lsr #17
 8008a24:	fa1f fc8c 	uxth.w	ip, ip
 8008a28:	f8a2 c406 	strh.w	ip, [r2, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a2c:	780c      	ldrb	r4, [r1, #0]
 8008a2e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008a32:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8008a36:	d00c      	beq.n	8008a52 <USB_ActivateEndpoint+0x17e>
 8008a38:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008a3c:	b292      	uxth	r2, r2
 8008a3e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008a42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008a46:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008a4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a4e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a52:	7809      	ldrb	r1, [r1, #0]
 8008a54:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8008a58:	b292      	uxth	r2, r2
 8008a5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008a5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008a62:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8008a66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a6e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8008a72:	bd10      	pop	{r4, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008a74:	b98c      	cbnz	r4, 8008a9a <USB_ActivateEndpoint+0x1c6>
 8008a76:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 8008a7a:	b2a4      	uxth	r4, r4
 8008a7c:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8008a80:	b2a4      	uxth	r4, r4
 8008a82:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 8008a86:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 8008a8a:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8008a8e:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8008a92:	b2a4      	uxth	r4, r4
 8008a94:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 8008a98:	e7c8      	b.n	8008a2c <USB_ActivateEndpoint+0x158>
 8008a9a:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8008a9e:	f014 0f01 	tst.w	r4, #1
 8008aa2:	d001      	beq.n	8008aa8 <USB_ActivateEndpoint+0x1d4>
 8008aa4:	f10c 0c01 	add.w	ip, ip, #1
 8008aa8:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 8008aac:	fa1f fc8c 	uxth.w	ip, ip
 8008ab0:	f8a2 c406 	strh.w	ip, [r2, #1030]	; 0x406
 8008ab4:	e7ba      	b.n	8008a2c <USB_ActivateEndpoint+0x158>
    if (ep->type == EP_TYPE_BULK)
 8008ab6:	78ca      	ldrb	r2, [r1, #3]
 8008ab8:	2a02      	cmp	r2, #2
 8008aba:	d072      	beq.n	8008ba2 <USB_ActivateEndpoint+0x2ce>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008abc:	780c      	ldrb	r4, [r1, #0]
 8008abe:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008ac2:	b292      	uxth	r2, r2
 8008ac4:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8008ac8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008acc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ad0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008ad4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008ad8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8008adc:	fa13 f282 	uxtah	r2, r3, r2
 8008ae0:	f891 c000 	ldrb.w	ip, [r1]
 8008ae4:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8008ae8:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8008aec:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008af0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8008af4:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
 8008af8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8008afc:	fa13 f282 	uxtah	r2, r3, r2
 8008b00:	f891 c000 	ldrb.w	ip, [r1]
 8008b04:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8008b08:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 8008b0c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008b10:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8008b14:	f8a2 c404 	strh.w	ip, [r2, #1028]	; 0x404
    if (ep->is_in == 0U)
 8008b18:	784a      	ldrb	r2, [r1, #1]
 8008b1a:	2a00      	cmp	r2, #0
 8008b1c:	d150      	bne.n	8008bc0 <USB_ActivateEndpoint+0x2ec>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b1e:	780c      	ldrb	r4, [r1, #0]
 8008b20:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008b24:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8008b28:	d00c      	beq.n	8008b44 <USB_ActivateEndpoint+0x270>
 8008b2a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008b2e:	b292      	uxth	r2, r2
 8008b30:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008b34:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008b38:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008b3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008b40:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b44:	780c      	ldrb	r4, [r1, #0]
 8008b46:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008b4a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008b4e:	d00c      	beq.n	8008b6a <USB_ActivateEndpoint+0x296>
 8008b50:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008b54:	b292      	uxth	r2, r2
 8008b56:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008b5a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008b5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b62:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8008b66:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008b6a:	f891 c000 	ldrb.w	ip, [r1]
 8008b6e:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8008b72:	b292      	uxth	r2, r2
 8008b74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008b78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008b7c:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8008b80:	f248 0480 	movw	r4, #32896	; 0x8080
 8008b84:	4322      	orrs	r2, r4
 8008b86:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b8a:	7809      	ldrb	r1, [r1, #0]
 8008b8c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8008b90:	b292      	uxth	r2, r2
 8008b92:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b9a:	4322      	orrs	r2, r4
 8008b9c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8008ba0:	e767      	b.n	8008a72 <USB_ActivateEndpoint+0x19e>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008ba2:	780c      	ldrb	r4, [r1, #0]
 8008ba4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008ba8:	b292      	uxth	r2, r2
 8008baa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008bae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008bb2:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8008bb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008bba:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8008bbe:	e78b      	b.n	8008ad8 <USB_ActivateEndpoint+0x204>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008bc0:	780c      	ldrb	r4, [r1, #0]
 8008bc2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008bc6:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8008bca:	d00c      	beq.n	8008be6 <USB_ActivateEndpoint+0x312>
 8008bcc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008bd0:	b292      	uxth	r2, r2
 8008bd2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008bd6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008bda:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008bde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008be2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008be6:	780c      	ldrb	r4, [r1, #0]
 8008be8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008bec:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008bf0:	d00c      	beq.n	8008c0c <USB_ActivateEndpoint+0x338>
 8008bf2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008bf6:	b292      	uxth	r2, r2
 8008bf8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008bfc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008c00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c04:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8008c08:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8008c0c:	78ca      	ldrb	r2, [r1, #3]
 8008c0e:	2a01      	cmp	r2, #1
 8008c10:	d01e      	beq.n	8008c50 <USB_ActivateEndpoint+0x37c>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c12:	780c      	ldrb	r4, [r1, #0]
 8008c14:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008c18:	b292      	uxth	r2, r2
 8008c1a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c22:	f082 0220 	eor.w	r2, r2, #32
 8008c26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008c2e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008c32:	7809      	ldrb	r1, [r1, #0]
 8008c34:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8008c38:	b292      	uxth	r2, r2
 8008c3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008c3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008c42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008c4a:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8008c4e:	e710      	b.n	8008a72 <USB_ActivateEndpoint+0x19e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c50:	780c      	ldrb	r4, [r1, #0]
 8008c52:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008c56:	b292      	uxth	r2, r2
 8008c58:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008c5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008c68:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8008c6c:	e7e1      	b.n	8008c32 <USB_ActivateEndpoint+0x35e>

08008c6e <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8008c6e:	7b0b      	ldrb	r3, [r1, #12]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d146      	bne.n	8008d02 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8008c74:	784b      	ldrb	r3, [r1, #1]
 8008c76:	b313      	cbz	r3, 8008cbe <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c78:	780a      	ldrb	r2, [r1, #0]
 8008c7a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008c7e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008c82:	d00c      	beq.n	8008c9e <USB_DeactivateEndpoint+0x30>
 8008c84:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c9a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c9e:	780a      	ldrb	r2, [r1, #0]
 8008ca0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008caa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cb6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8008cba:	2000      	movs	r0, #0
 8008cbc:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008cbe:	780a      	ldrb	r2, [r1, #0]
 8008cc0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008cc4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008cc8:	d00c      	beq.n	8008ce4 <USB_DeactivateEndpoint+0x76>
 8008cca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ce0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ce4:	780a      	ldrb	r2, [r1, #0]
 8008ce6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cfc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8008d00:	e7db      	b.n	8008cba <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 8008d02:	784b      	ldrb	r3, [r1, #1]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d14e      	bne.n	8008da6 <USB_DeactivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d08:	780a      	ldrb	r2, [r1, #0]
 8008d0a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008d0e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008d12:	d00c      	beq.n	8008d2e <USB_DeactivateEndpoint+0xc0>
 8008d14:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d2a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d2e:	780a      	ldrb	r2, [r1, #0]
 8008d30:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008d34:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008d38:	d00c      	beq.n	8008d54 <USB_DeactivateEndpoint+0xe6>
 8008d3a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d50:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8008d54:	780a      	ldrb	r2, [r1, #0]
 8008d56:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d6c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008d70:	780b      	ldrb	r3, [r1, #0]
 8008d72:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8008d76:	b292      	uxth	r2, r2
 8008d78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008d7c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008d80:	f248 0c80 	movw	ip, #32896	; 0x8080
 8008d84:	ea42 020c 	orr.w	r2, r2, ip
 8008d88:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d8c:	780a      	ldrb	r2, [r1, #0]
 8008d8e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d9c:	ea43 030c 	orr.w	r3, r3, ip
 8008da0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8008da4:	e789      	b.n	8008cba <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008da6:	780a      	ldrb	r2, [r1, #0]
 8008da8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008dac:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008db0:	d00c      	beq.n	8008dcc <USB_DeactivateEndpoint+0x15e>
 8008db2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dc8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008dcc:	780a      	ldrb	r2, [r1, #0]
 8008dce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008dd2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008dd6:	d00c      	beq.n	8008df2 <USB_DeactivateEndpoint+0x184>
 8008dd8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008dee:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8008df2:	780a      	ldrb	r2, [r1, #0]
 8008df4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e0a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e0e:	780b      	ldrb	r3, [r1, #0]
 8008e10:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8008e14:	b292      	uxth	r2, r2
 8008e16:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008e1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e1e:	f248 0c80 	movw	ip, #32896	; 0x8080
 8008e22:	ea42 020c 	orr.w	r2, r2, ip
 8008e26:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008e2a:	780a      	ldrb	r2, [r1, #0]
 8008e2c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e3a:	ea43 030c 	orr.w	r3, r3, ip
 8008e3e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8008e42:	e73a      	b.n	8008cba <USB_DeactivateEndpoint+0x4c>

08008e44 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8008e44:	784b      	ldrb	r3, [r1, #1]
 8008e46:	b18b      	cbz	r3, 8008e6c <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008e48:	780a      	ldrb	r2, [r1, #0]
 8008e4a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e58:	f083 0310 	eor.w	r3, r3, #16
 8008e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e64:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8008e68:	2000      	movs	r0, #0
 8008e6a:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008e6c:	780a      	ldrb	r2, [r1, #0]
 8008e6e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e88:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8008e8c:	e7ec      	b.n	8008e68 <USB_EPSetStall+0x24>

08008e8e <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8008e8e:	7b0b      	ldrb	r3, [r1, #12]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d14b      	bne.n	8008f2c <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8008e94:	784b      	ldrb	r3, [r1, #1]
 8008e96:	b333      	cbz	r3, 8008ee6 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e98:	780a      	ldrb	r2, [r1, #0]
 8008e9a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008e9e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008ea2:	d00c      	beq.n	8008ebe <USB_EPClearStall+0x30>
 8008ea4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008eba:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8008ebe:	78cb      	ldrb	r3, [r1, #3]
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d033      	beq.n	8008f2c <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008ec4:	780a      	ldrb	r2, [r1, #0]
 8008ec6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ed4:	f083 0320 	eor.w	r3, r3, #32
 8008ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8008ee4:	e022      	b.n	8008f2c <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ee6:	780a      	ldrb	r2, [r1, #0]
 8008ee8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008eec:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008ef0:	d00c      	beq.n	8008f0c <USB_EPClearStall+0x7e>
 8008ef2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f08:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f0c:	780a      	ldrb	r2, [r1, #0]
 8008f0e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f1c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8008f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f28:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	4770      	bx	lr

08008f30 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8008f30:	b911      	cbnz	r1, 8008f38 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008f32:	2380      	movs	r3, #128	; 0x80
 8008f34:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8008f38:	2000      	movs	r0, #0
 8008f3a:	4770      	bx	lr

08008f3c <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008f3c:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8008f40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8008f4e:	2000      	movs	r0, #0
 8008f50:	4770      	bx	lr

08008f52 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008f52:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8008f56:	b280      	uxth	r0, r0
 8008f58:	4770      	bx	lr

08008f5a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f5a:	b410      	push	{r4}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008f5c:	1c5c      	adds	r4, r3, #1
 8008f5e:	0864      	lsrs	r4, r4, #1
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f60:	4402      	add	r2, r0
 8008f62:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8008f66:	e007      	b.n	8008f78 <USB_WritePMA+0x1e>
  {
    temp1 = *pBuf;
 8008f68:	780b      	ldrb	r3, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008f6a:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 8008f6c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8008f70:	f822 3b02 	strh.w	r3, [r2], #2

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008f74:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8008f76:	3c01      	subs	r4, #1
 8008f78:	2c00      	cmp	r4, #0
 8008f7a:	d1f5      	bne.n	8008f68 <USB_WritePMA+0xe>
  }
}
 8008f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f80:	4770      	bx	lr

08008f82 <USB_EPStartXfer>:
{
 8008f82:	b570      	push	{r4, r5, r6, lr}
 8008f84:	4605      	mov	r5, r0
 8008f86:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8008f88:	784a      	ldrb	r2, [r1, #1]
 8008f8a:	2a01      	cmp	r2, #1
 8008f8c:	d032      	beq.n	8008ff4 <USB_EPStartXfer+0x72>
    if (ep->doublebuffer == 0U)
 8008f8e:	7b0b      	ldrb	r3, [r1, #12]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f040 8283 	bne.w	800949c <USB_EPStartXfer+0x51a>
      if (ep->xfer_len > ep->maxpacket)
 8008f96:	698b      	ldr	r3, [r1, #24]
 8008f98:	690a      	ldr	r2, [r1, #16]
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	f240 825d 	bls.w	800945a <USB_EPStartXfer+0x4d8>
        ep->xfer_len -= len;
 8008fa0:	1a9b      	subs	r3, r3, r2
 8008fa2:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008fa4:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8008fa8:	fa15 f383 	uxtah	r3, r5, r3
 8008fac:	7821      	ldrb	r1, [r4, #0]
 8008fae:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008fb2:	2a3e      	cmp	r2, #62	; 0x3e
 8008fb4:	f240 8255 	bls.w	8009462 <USB_EPStartXfer+0x4e0>
 8008fb8:	0951      	lsrs	r1, r2, #5
 8008fba:	f012 0f1f 	tst.w	r2, #31
 8008fbe:	d100      	bne.n	8008fc2 <USB_EPStartXfer+0x40>
 8008fc0:	3901      	subs	r1, #1
 8008fc2:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8008fc6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8008fca:	b289      	uxth	r1, r1
 8008fcc:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008fd0:	7822      	ldrb	r2, [r4, #0]
 8008fd2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fe0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8008fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fec:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8008ff0:	2000      	movs	r0, #0
}
 8008ff2:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 8008ff4:	698e      	ldr	r6, [r1, #24]
 8008ff6:	6909      	ldr	r1, [r1, #16]
 8008ff8:	428e      	cmp	r6, r1
 8008ffa:	d900      	bls.n	8008ffe <USB_EPStartXfer+0x7c>
      len = ep->maxpacket;
 8008ffc:	460e      	mov	r6, r1
    if (ep->doublebuffer == 0U)
 8008ffe:	7b23      	ldrb	r3, [r4, #12]
 8009000:	b32b      	cbz	r3, 800904e <USB_EPStartXfer+0xcc>
      if (ep->type == EP_TYPE_BULK)
 8009002:	78e3      	ldrb	r3, [r4, #3]
 8009004:	2b02      	cmp	r3, #2
 8009006:	d044      	beq.n	8009092 <USB_EPStartXfer+0x110>
        ep->xfer_len_db -= len;
 8009008:	6a23      	ldr	r3, [r4, #32]
 800900a:	1b9b      	subs	r3, r3, r6
 800900c:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800900e:	7823      	ldrb	r3, [r4, #0]
 8009010:	f835 1023 	ldrh.w	r1, [r5, r3, lsl #2]
 8009014:	f011 0f40 	tst.w	r1, #64	; 0x40
 8009018:	f000 81dc 	beq.w	80093d4 <USB_EPStartXfer+0x452>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800901c:	2a00      	cmp	r2, #0
 800901e:	f040 81c9 	bne.w	80093b4 <USB_EPStartXfer+0x432>
 8009022:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8009026:	fa15 f282 	uxtah	r2, r5, r2
 800902a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800902e:	2e3e      	cmp	r6, #62	; 0x3e
 8009030:	f240 81a3 	bls.w	800937a <USB_EPStartXfer+0x3f8>
 8009034:	0972      	lsrs	r2, r6, #5
 8009036:	f016 0f1f 	tst.w	r6, #31
 800903a:	d100      	bne.n	800903e <USB_EPStartXfer+0xbc>
 800903c:	3a01      	subs	r2, #1
 800903e:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8009042:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009046:	b292      	uxth	r2, r2
 8009048:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800904c:	e1bb      	b.n	80093c6 <USB_EPStartXfer+0x444>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800904e:	b2b6      	uxth	r6, r6
 8009050:	4633      	mov	r3, r6
 8009052:	88e2      	ldrh	r2, [r4, #6]
 8009054:	6961      	ldr	r1, [r4, #20]
 8009056:	4628      	mov	r0, r5
 8009058:	f7ff ff7f 	bl	8008f5a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800905c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8009060:	fa15 f383 	uxtah	r3, r5, r3
 8009064:	7822      	ldrb	r2, [r4, #0]
 8009066:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800906a:	f8a3 6402 	strh.w	r6, [r3, #1026]	; 0x402
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800906e:	7822      	ldrb	r2, [r4, #0]
 8009070:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8009074:	b29b      	uxth	r3, r3
 8009076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800907a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800907e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8009082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800908a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800908e:	2000      	movs	r0, #0
 8009090:	e7af      	b.n	8008ff2 <USB_EPStartXfer+0x70>
        if (ep->xfer_len_db > ep->maxpacket)
 8009092:	6a23      	ldr	r3, [r4, #32]
 8009094:	4299      	cmp	r1, r3
 8009096:	f080 8152 	bcs.w	800933e <USB_EPStartXfer+0x3bc>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800909a:	7822      	ldrb	r2, [r4, #0]
 800909c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090aa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80090ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090b2:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 80090b6:	6a23      	ldr	r3, [r4, #32]
 80090b8:	1b9b      	subs	r3, r3, r6
 80090ba:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80090bc:	7823      	ldrb	r3, [r4, #0]
 80090be:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 80090c2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80090c6:	f000 809d 	beq.w	8009204 <USB_EPStartXfer+0x282>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80090ca:	7862      	ldrb	r2, [r4, #1]
 80090cc:	bb8a      	cbnz	r2, 8009132 <USB_EPStartXfer+0x1b0>
 80090ce:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80090d2:	fa15 f282 	uxtah	r2, r5, r2
 80090d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80090da:	2e3e      	cmp	r6, #62	; 0x3e
 80090dc:	d90c      	bls.n	80090f8 <USB_EPStartXfer+0x176>
 80090de:	0972      	lsrs	r2, r6, #5
 80090e0:	f016 0f1f 	tst.w	r6, #31
 80090e4:	d100      	bne.n	80090e8 <USB_EPStartXfer+0x166>
 80090e6:	3a01      	subs	r2, #1
 80090e8:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80090ec:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80090f0:	b292      	uxth	r2, r2
 80090f2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80090f6:	e01e      	b.n	8009136 <USB_EPStartXfer+0x1b4>
 80090f8:	b98e      	cbnz	r6, 800911e <USB_EPStartXfer+0x19c>
 80090fa:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80090fe:	b292      	uxth	r2, r2
 8009100:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009104:	b292      	uxth	r2, r2
 8009106:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800910a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800910e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8009112:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009116:	b292      	uxth	r2, r2
 8009118:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800911c:	e00b      	b.n	8009136 <USB_EPStartXfer+0x1b4>
 800911e:	0872      	lsrs	r2, r6, #1
 8009120:	f016 0f01 	tst.w	r6, #1
 8009124:	d000      	beq.n	8009128 <USB_EPStartXfer+0x1a6>
 8009126:	3201      	adds	r2, #1
 8009128:	0292      	lsls	r2, r2, #10
 800912a:	b292      	uxth	r2, r2
 800912c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009130:	e001      	b.n	8009136 <USB_EPStartXfer+0x1b4>
 8009132:	2a01      	cmp	r2, #1
 8009134:	d027      	beq.n	8009186 <USB_EPStartXfer+0x204>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009136:	b2b3      	uxth	r3, r6
 8009138:	8962      	ldrh	r2, [r4, #10]
 800913a:	6961      	ldr	r1, [r4, #20]
 800913c:	4628      	mov	r0, r5
 800913e:	f7ff ff0c 	bl	8008f5a <USB_WritePMA>
            ep->xfer_buff += len;
 8009142:	6963      	ldr	r3, [r4, #20]
 8009144:	4433      	add	r3, r6
 8009146:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8009148:	6a23      	ldr	r3, [r4, #32]
 800914a:	6922      	ldr	r2, [r4, #16]
 800914c:	4293      	cmp	r3, r2
 800914e:	d924      	bls.n	800919a <USB_EPStartXfer+0x218>
              ep->xfer_len_db -= len;
 8009150:	1b9b      	subs	r3, r3, r6
 8009152:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009154:	7863      	ldrb	r3, [r4, #1]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d140      	bne.n	80091dc <USB_EPStartXfer+0x25a>
 800915a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800915e:	fa15 f383 	uxtah	r3, r5, r3
 8009162:	7822      	ldrb	r2, [r4, #0]
 8009164:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009168:	2e3e      	cmp	r6, #62	; 0x3e
 800916a:	d91a      	bls.n	80091a2 <USB_EPStartXfer+0x220>
 800916c:	0972      	lsrs	r2, r6, #5
 800916e:	f016 0f1f 	tst.w	r6, #31
 8009172:	d100      	bne.n	8009176 <USB_EPStartXfer+0x1f4>
 8009174:	3a01      	subs	r2, #1
 8009176:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800917a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800917e:	b292      	uxth	r2, r2
 8009180:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009184:	e02c      	b.n	80091e0 <USB_EPStartXfer+0x25e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009186:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800918a:	fa15 f282 	uxtah	r2, r5, r2
 800918e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009192:	b2b2      	uxth	r2, r6
 8009194:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009198:	e7cd      	b.n	8009136 <USB_EPStartXfer+0x1b4>
              ep->xfer_len_db = 0U;
 800919a:	2200      	movs	r2, #0
 800919c:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 800919e:	461e      	mov	r6, r3
 80091a0:	e7d8      	b.n	8009154 <USB_EPStartXfer+0x1d2>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80091a2:	b98e      	cbnz	r6, 80091c8 <USB_EPStartXfer+0x246>
 80091a4:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80091a8:	b292      	uxth	r2, r2
 80091aa:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80091ae:	b292      	uxth	r2, r2
 80091b0:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80091b4:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80091b8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80091bc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80091c0:	b292      	uxth	r2, r2
 80091c2:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80091c6:	e00b      	b.n	80091e0 <USB_EPStartXfer+0x25e>
 80091c8:	0872      	lsrs	r2, r6, #1
 80091ca:	f016 0f01 	tst.w	r6, #1
 80091ce:	d000      	beq.n	80091d2 <USB_EPStartXfer+0x250>
 80091d0:	3201      	adds	r2, #1
 80091d2:	0292      	lsls	r2, r2, #10
 80091d4:	b292      	uxth	r2, r2
 80091d6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80091da:	e001      	b.n	80091e0 <USB_EPStartXfer+0x25e>
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d006      	beq.n	80091ee <USB_EPStartXfer+0x26c>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091e0:	b2b3      	uxth	r3, r6
 80091e2:	8922      	ldrh	r2, [r4, #8]
 80091e4:	6961      	ldr	r1, [r4, #20]
 80091e6:	4628      	mov	r0, r5
 80091e8:	f7ff feb7 	bl	8008f5a <USB_WritePMA>
 80091ec:	e73f      	b.n	800906e <USB_EPStartXfer+0xec>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80091ee:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80091f2:	fa15 f383 	uxtah	r3, r5, r3
 80091f6:	7822      	ldrb	r2, [r4, #0]
 80091f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091fc:	b2b2      	uxth	r2, r6
 80091fe:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009202:	e7ed      	b.n	80091e0 <USB_EPStartXfer+0x25e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009204:	7862      	ldrb	r2, [r4, #1]
 8009206:	bb8a      	cbnz	r2, 800926c <USB_EPStartXfer+0x2ea>
 8009208:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800920c:	fa15 f282 	uxtah	r2, r5, r2
 8009210:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009214:	2e3e      	cmp	r6, #62	; 0x3e
 8009216:	d90c      	bls.n	8009232 <USB_EPStartXfer+0x2b0>
 8009218:	0972      	lsrs	r2, r6, #5
 800921a:	f016 0f1f 	tst.w	r6, #31
 800921e:	d100      	bne.n	8009222 <USB_EPStartXfer+0x2a0>
 8009220:	3a01      	subs	r2, #1
 8009222:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8009226:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800922a:	b292      	uxth	r2, r2
 800922c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009230:	e01e      	b.n	8009270 <USB_EPStartXfer+0x2ee>
 8009232:	b98e      	cbnz	r6, 8009258 <USB_EPStartXfer+0x2d6>
 8009234:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8009238:	b292      	uxth	r2, r2
 800923a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800923e:	b292      	uxth	r2, r2
 8009240:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009244:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8009248:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800924c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009250:	b292      	uxth	r2, r2
 8009252:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009256:	e00b      	b.n	8009270 <USB_EPStartXfer+0x2ee>
 8009258:	0872      	lsrs	r2, r6, #1
 800925a:	f016 0f01 	tst.w	r6, #1
 800925e:	d000      	beq.n	8009262 <USB_EPStartXfer+0x2e0>
 8009260:	3201      	adds	r2, #1
 8009262:	0292      	lsls	r2, r2, #10
 8009264:	b292      	uxth	r2, r2
 8009266:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800926a:	e001      	b.n	8009270 <USB_EPStartXfer+0x2ee>
 800926c:	2a01      	cmp	r2, #1
 800926e:	d027      	beq.n	80092c0 <USB_EPStartXfer+0x33e>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009270:	b2b3      	uxth	r3, r6
 8009272:	8922      	ldrh	r2, [r4, #8]
 8009274:	6961      	ldr	r1, [r4, #20]
 8009276:	4628      	mov	r0, r5
 8009278:	f7ff fe6f 	bl	8008f5a <USB_WritePMA>
            ep->xfer_buff += len;
 800927c:	6963      	ldr	r3, [r4, #20]
 800927e:	4433      	add	r3, r6
 8009280:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8009282:	6a23      	ldr	r3, [r4, #32]
 8009284:	6922      	ldr	r2, [r4, #16]
 8009286:	4293      	cmp	r3, r2
 8009288:	d924      	bls.n	80092d4 <USB_EPStartXfer+0x352>
              ep->xfer_len_db -= len;
 800928a:	1b9b      	subs	r3, r3, r6
 800928c:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800928e:	7863      	ldrb	r3, [r4, #1]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d140      	bne.n	8009316 <USB_EPStartXfer+0x394>
 8009294:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8009298:	fa15 f383 	uxtah	r3, r5, r3
 800929c:	7822      	ldrb	r2, [r4, #0]
 800929e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092a2:	2e3e      	cmp	r6, #62	; 0x3e
 80092a4:	d91a      	bls.n	80092dc <USB_EPStartXfer+0x35a>
 80092a6:	0972      	lsrs	r2, r6, #5
 80092a8:	f016 0f1f 	tst.w	r6, #31
 80092ac:	d100      	bne.n	80092b0 <USB_EPStartXfer+0x32e>
 80092ae:	3a01      	subs	r2, #1
 80092b0:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80092b4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80092b8:	b292      	uxth	r2, r2
 80092ba:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80092be:	e02c      	b.n	800931a <USB_EPStartXfer+0x398>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80092c0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80092c4:	fa15 f282 	uxtah	r2, r5, r2
 80092c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80092cc:	b2b2      	uxth	r2, r6
 80092ce:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80092d2:	e7cd      	b.n	8009270 <USB_EPStartXfer+0x2ee>
              ep->xfer_len_db = 0U;
 80092d4:	2200      	movs	r2, #0
 80092d6:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 80092d8:	461e      	mov	r6, r3
 80092da:	e7d8      	b.n	800928e <USB_EPStartXfer+0x30c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80092dc:	b98e      	cbnz	r6, 8009302 <USB_EPStartXfer+0x380>
 80092de:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80092e2:	b292      	uxth	r2, r2
 80092e4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80092e8:	b292      	uxth	r2, r2
 80092ea:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80092ee:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80092f2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80092f6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80092fa:	b292      	uxth	r2, r2
 80092fc:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009300:	e00b      	b.n	800931a <USB_EPStartXfer+0x398>
 8009302:	0872      	lsrs	r2, r6, #1
 8009304:	f016 0f01 	tst.w	r6, #1
 8009308:	d000      	beq.n	800930c <USB_EPStartXfer+0x38a>
 800930a:	3201      	adds	r2, #1
 800930c:	0292      	lsls	r2, r2, #10
 800930e:	b292      	uxth	r2, r2
 8009310:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009314:	e001      	b.n	800931a <USB_EPStartXfer+0x398>
 8009316:	2b01      	cmp	r3, #1
 8009318:	d006      	beq.n	8009328 <USB_EPStartXfer+0x3a6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800931a:	b2b3      	uxth	r3, r6
 800931c:	8962      	ldrh	r2, [r4, #10]
 800931e:	6961      	ldr	r1, [r4, #20]
 8009320:	4628      	mov	r0, r5
 8009322:	f7ff fe1a 	bl	8008f5a <USB_WritePMA>
 8009326:	e6a2      	b.n	800906e <USB_EPStartXfer+0xec>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009328:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800932c:	fa15 f383 	uxtah	r3, r5, r3
 8009330:	7822      	ldrb	r2, [r4, #0]
 8009332:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009336:	b2b2      	uxth	r2, r6
 8009338:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800933c:	e7ed      	b.n	800931a <USB_EPStartXfer+0x398>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800933e:	7821      	ldrb	r1, [r4, #0]
 8009340:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 8009344:	b292      	uxth	r2, r2
 8009346:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 800934a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800934e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009352:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009356:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800935a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800935e:	fa15 f282 	uxtah	r2, r5, r2
 8009362:	7821      	ldrb	r1, [r4, #0]
 8009364:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009368:	b29b      	uxth	r3, r3
 800936a:	f8a2 3402 	strh.w	r3, [r2, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800936e:	8922      	ldrh	r2, [r4, #8]
 8009370:	6961      	ldr	r1, [r4, #20]
 8009372:	4628      	mov	r0, r5
 8009374:	f7ff fdf1 	bl	8008f5a <USB_WritePMA>
 8009378:	e679      	b.n	800906e <USB_EPStartXfer+0xec>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800937a:	b98e      	cbnz	r6, 80093a0 <USB_EPStartXfer+0x41e>
 800937c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8009380:	b292      	uxth	r2, r2
 8009382:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009386:	b292      	uxth	r2, r2
 8009388:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800938c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8009390:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8009394:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009398:	b292      	uxth	r2, r2
 800939a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800939e:	e012      	b.n	80093c6 <USB_EPStartXfer+0x444>
 80093a0:	0872      	lsrs	r2, r6, #1
 80093a2:	f016 0f01 	tst.w	r6, #1
 80093a6:	d000      	beq.n	80093aa <USB_EPStartXfer+0x428>
 80093a8:	3201      	adds	r2, #1
 80093aa:	0292      	lsls	r2, r2, #10
 80093ac:	b292      	uxth	r2, r2
 80093ae:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80093b2:	e008      	b.n	80093c6 <USB_EPStartXfer+0x444>
 80093b4:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80093b8:	fa15 f282 	uxtah	r2, r5, r2
 80093bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80093c0:	b2b2      	uxth	r2, r6
 80093c2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093c6:	b2b3      	uxth	r3, r6
 80093c8:	8962      	ldrh	r2, [r4, #10]
 80093ca:	6961      	ldr	r1, [r4, #20]
 80093cc:	4628      	mov	r0, r5
 80093ce:	f7ff fdc4 	bl	8008f5a <USB_WritePMA>
 80093d2:	e64c      	b.n	800906e <USB_EPStartXfer+0xec>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80093d4:	bb8a      	cbnz	r2, 800943a <USB_EPStartXfer+0x4b8>
 80093d6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80093da:	fa15 f282 	uxtah	r2, r5, r2
 80093de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80093e2:	2e3e      	cmp	r6, #62	; 0x3e
 80093e4:	d90c      	bls.n	8009400 <USB_EPStartXfer+0x47e>
 80093e6:	0972      	lsrs	r2, r6, #5
 80093e8:	f016 0f1f 	tst.w	r6, #31
 80093ec:	d100      	bne.n	80093f0 <USB_EPStartXfer+0x46e>
 80093ee:	3a01      	subs	r2, #1
 80093f0:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80093f4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80093f8:	b292      	uxth	r2, r2
 80093fa:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80093fe:	e025      	b.n	800944c <USB_EPStartXfer+0x4ca>
 8009400:	b98e      	cbnz	r6, 8009426 <USB_EPStartXfer+0x4a4>
 8009402:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8009406:	b292      	uxth	r2, r2
 8009408:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800940c:	b292      	uxth	r2, r2
 800940e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009412:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8009416:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800941a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800941e:	b292      	uxth	r2, r2
 8009420:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009424:	e012      	b.n	800944c <USB_EPStartXfer+0x4ca>
 8009426:	0872      	lsrs	r2, r6, #1
 8009428:	f016 0f01 	tst.w	r6, #1
 800942c:	d000      	beq.n	8009430 <USB_EPStartXfer+0x4ae>
 800942e:	3201      	adds	r2, #1
 8009430:	0292      	lsls	r2, r2, #10
 8009432:	b292      	uxth	r2, r2
 8009434:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009438:	e008      	b.n	800944c <USB_EPStartXfer+0x4ca>
 800943a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800943e:	fa15 f282 	uxtah	r2, r5, r2
 8009442:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009446:	b2b2      	uxth	r2, r6
 8009448:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800944c:	b2b3      	uxth	r3, r6
 800944e:	8922      	ldrh	r2, [r4, #8]
 8009450:	6961      	ldr	r1, [r4, #20]
 8009452:	4628      	mov	r0, r5
 8009454:	f7ff fd81 	bl	8008f5a <USB_WritePMA>
 8009458:	e609      	b.n	800906e <USB_EPStartXfer+0xec>
        ep->xfer_len = 0U;
 800945a:	2200      	movs	r2, #0
 800945c:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 800945e:	461a      	mov	r2, r3
 8009460:	e5a0      	b.n	8008fa4 <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009462:	b98a      	cbnz	r2, 8009488 <USB_EPStartXfer+0x506>
 8009464:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8009468:	b292      	uxth	r2, r2
 800946a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800946e:	b292      	uxth	r2, r2
 8009470:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009474:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8009478:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800947c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009480:	b292      	uxth	r2, r2
 8009482:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009486:	e5a3      	b.n	8008fd0 <USB_EPStartXfer+0x4e>
 8009488:	0851      	lsrs	r1, r2, #1
 800948a:	f012 0f01 	tst.w	r2, #1
 800948e:	d000      	beq.n	8009492 <USB_EPStartXfer+0x510>
 8009490:	3101      	adds	r1, #1
 8009492:	0289      	lsls	r1, r1, #10
 8009494:	b289      	uxth	r1, r1
 8009496:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 800949a:	e599      	b.n	8008fd0 <USB_EPStartXfer+0x4e>
      if (ep->type == EP_TYPE_BULK)
 800949c:	78cb      	ldrb	r3, [r1, #3]
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d03b      	beq.n	800951a <USB_EPStartXfer+0x598>
      else if (ep->type == EP_TYPE_ISOC)
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	f040 811b 	bne.w	80096de <USB_EPStartXfer+0x75c>
        if (ep->xfer_len > ep->maxpacket)
 80094a8:	6989      	ldr	r1, [r1, #24]
 80094aa:	6923      	ldr	r3, [r4, #16]
 80094ac:	4299      	cmp	r1, r3
 80094ae:	f240 80ca 	bls.w	8009646 <USB_EPStartXfer+0x6c4>
          ep->xfer_len -= len;
 80094b2:	1ac9      	subs	r1, r1, r3
 80094b4:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80094b6:	b9aa      	cbnz	r2, 80094e4 <USB_EPStartXfer+0x562>
 80094b8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80094bc:	fa15 f282 	uxtah	r2, r5, r2
 80094c0:	7821      	ldrb	r1, [r4, #0]
 80094c2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80094c6:	2b3e      	cmp	r3, #62	; 0x3e
 80094c8:	f240 80c1 	bls.w	800964e <USB_EPStartXfer+0x6cc>
 80094cc:	0959      	lsrs	r1, r3, #5
 80094ce:	f013 0f1f 	tst.w	r3, #31
 80094d2:	d100      	bne.n	80094d6 <USB_EPStartXfer+0x554>
 80094d4:	3901      	subs	r1, #1
 80094d6:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80094da:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80094de:	b289      	uxth	r1, r1
 80094e0:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80094e4:	7862      	ldrb	r2, [r4, #1]
 80094e6:	2a00      	cmp	r2, #0
 80094e8:	f040 80eb 	bne.w	80096c2 <USB_EPStartXfer+0x740>
 80094ec:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80094f0:	fa15 f282 	uxtah	r2, r5, r2
 80094f4:	7821      	ldrb	r1, [r4, #0]
 80094f6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80094fa:	2b3e      	cmp	r3, #62	; 0x3e
 80094fc:	f240 80c4 	bls.w	8009688 <USB_EPStartXfer+0x706>
 8009500:	0959      	lsrs	r1, r3, #5
 8009502:	f013 0f1f 	tst.w	r3, #31
 8009506:	d100      	bne.n	800950a <USB_EPStartXfer+0x588>
 8009508:	3901      	subs	r1, #1
 800950a:	ea6f 63c1 	mvn.w	r3, r1, lsl #27
 800950e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009512:	b29b      	uxth	r3, r3
 8009514:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8009518:	e55a      	b.n	8008fd0 <USB_EPStartXfer+0x4e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800951a:	b9aa      	cbnz	r2, 8009548 <USB_EPStartXfer+0x5c6>
 800951c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009520:	fa10 f383 	uxtah	r3, r0, r3
 8009524:	780a      	ldrb	r2, [r1, #0]
 8009526:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800952a:	6909      	ldr	r1, [r1, #16]
 800952c:	293e      	cmp	r1, #62	; 0x3e
 800952e:	d925      	bls.n	800957c <USB_EPStartXfer+0x5fa>
 8009530:	094a      	lsrs	r2, r1, #5
 8009532:	f011 0f1f 	tst.w	r1, #31
 8009536:	d100      	bne.n	800953a <USB_EPStartXfer+0x5b8>
 8009538:	3a01      	subs	r2, #1
 800953a:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800953e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009542:	b292      	uxth	r2, r2
 8009544:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8009548:	7863      	ldrb	r3, [r4, #1]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d150      	bne.n	80095f0 <USB_EPStartXfer+0x66e>
 800954e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8009552:	fa15 f383 	uxtah	r3, r5, r3
 8009556:	7822      	ldrb	r2, [r4, #0]
 8009558:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800955c:	6921      	ldr	r1, [r4, #16]
 800955e:	293e      	cmp	r1, #62	; 0x3e
 8009560:	d929      	bls.n	80095b6 <USB_EPStartXfer+0x634>
 8009562:	094a      	lsrs	r2, r1, #5
 8009564:	f011 0f1f 	tst.w	r1, #31
 8009568:	d100      	bne.n	800956c <USB_EPStartXfer+0x5ea>
 800956a:	3a01      	subs	r2, #1
 800956c:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8009570:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009574:	b292      	uxth	r2, r2
 8009576:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800957a:	e03b      	b.n	80095f4 <USB_EPStartXfer+0x672>
 800957c:	b989      	cbnz	r1, 80095a2 <USB_EPStartXfer+0x620>
 800957e:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8009582:	b292      	uxth	r2, r2
 8009584:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009588:	b292      	uxth	r2, r2
 800958a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800958e:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8009592:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8009596:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800959a:	b292      	uxth	r2, r2
 800959c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80095a0:	e7d2      	b.n	8009548 <USB_EPStartXfer+0x5c6>
 80095a2:	084a      	lsrs	r2, r1, #1
 80095a4:	f011 0f01 	tst.w	r1, #1
 80095a8:	d000      	beq.n	80095ac <USB_EPStartXfer+0x62a>
 80095aa:	3201      	adds	r2, #1
 80095ac:	0292      	lsls	r2, r2, #10
 80095ae:	b292      	uxth	r2, r2
 80095b0:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80095b4:	e7c8      	b.n	8009548 <USB_EPStartXfer+0x5c6>
 80095b6:	b989      	cbnz	r1, 80095dc <USB_EPStartXfer+0x65a>
 80095b8:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80095bc:	b292      	uxth	r2, r2
 80095be:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80095c2:	b292      	uxth	r2, r2
 80095c4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80095c8:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80095cc:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80095d0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80095d4:	b292      	uxth	r2, r2
 80095d6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80095da:	e00b      	b.n	80095f4 <USB_EPStartXfer+0x672>
 80095dc:	084a      	lsrs	r2, r1, #1
 80095de:	f011 0f01 	tst.w	r1, #1
 80095e2:	d000      	beq.n	80095e6 <USB_EPStartXfer+0x664>
 80095e4:	3201      	adds	r2, #1
 80095e6:	0292      	lsls	r2, r2, #10
 80095e8:	b292      	uxth	r2, r2
 80095ea:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80095ee:	e001      	b.n	80095f4 <USB_EPStartXfer+0x672>
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d01d      	beq.n	8009630 <USB_EPStartXfer+0x6ae>
        if (ep->xfer_count != 0U)
 80095f4:	69e3      	ldr	r3, [r4, #28]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f43f acea 	beq.w	8008fd0 <USB_EPStartXfer+0x4e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80095fc:	7822      	ldrb	r2, [r4, #0]
 80095fe:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009602:	f244 0340 	movw	r3, #16448	; 0x4040
 8009606:	ea03 0001 	and.w	r0, r3, r1
 800960a:	438b      	bics	r3, r1
 800960c:	d002      	beq.n	8009614 <USB_EPStartXfer+0x692>
 800960e:	2800      	cmp	r0, #0
 8009610:	f47f acde 	bne.w	8008fd0 <USB_EPStartXfer+0x4e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009614:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8009618:	b29b      	uxth	r3, r3
 800961a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800961e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009626:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800962a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 800962e:	e4cf      	b.n	8008fd0 <USB_EPStartXfer+0x4e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009630:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8009634:	fa15 f383 	uxtah	r3, r5, r3
 8009638:	7822      	ldrb	r2, [r4, #0]
 800963a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800963e:	8a22      	ldrh	r2, [r4, #16]
 8009640:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8009644:	e7d6      	b.n	80095f4 <USB_EPStartXfer+0x672>
          ep->xfer_len = 0U;
 8009646:	2300      	movs	r3, #0
 8009648:	61a3      	str	r3, [r4, #24]
          len = ep->xfer_len;
 800964a:	460b      	mov	r3, r1
 800964c:	e733      	b.n	80094b6 <USB_EPStartXfer+0x534>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800964e:	b98b      	cbnz	r3, 8009674 <USB_EPStartXfer+0x6f2>
 8009650:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8009654:	b289      	uxth	r1, r1
 8009656:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800965a:	b289      	uxth	r1, r1
 800965c:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8009660:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8009664:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8009668:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800966c:	b289      	uxth	r1, r1
 800966e:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8009672:	e737      	b.n	80094e4 <USB_EPStartXfer+0x562>
 8009674:	0859      	lsrs	r1, r3, #1
 8009676:	f013 0f01 	tst.w	r3, #1
 800967a:	d000      	beq.n	800967e <USB_EPStartXfer+0x6fc>
 800967c:	3101      	adds	r1, #1
 800967e:	0289      	lsls	r1, r1, #10
 8009680:	b289      	uxth	r1, r1
 8009682:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8009686:	e72d      	b.n	80094e4 <USB_EPStartXfer+0x562>
 8009688:	b98b      	cbnz	r3, 80096ae <USB_EPStartXfer+0x72c>
 800968a:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 800968e:	b29b      	uxth	r3, r3
 8009690:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009694:	b29b      	uxth	r3, r3
 8009696:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 800969a:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 800969e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 80096ac:	e490      	b.n	8008fd0 <USB_EPStartXfer+0x4e>
 80096ae:	0859      	lsrs	r1, r3, #1
 80096b0:	f013 0f01 	tst.w	r3, #1
 80096b4:	d000      	beq.n	80096b8 <USB_EPStartXfer+0x736>
 80096b6:	3101      	adds	r1, #1
 80096b8:	028b      	lsls	r3, r1, #10
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 80096c0:	e486      	b.n	8008fd0 <USB_EPStartXfer+0x4e>
 80096c2:	2a01      	cmp	r2, #1
 80096c4:	f47f ac84 	bne.w	8008fd0 <USB_EPStartXfer+0x4e>
 80096c8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80096cc:	fa15 f282 	uxtah	r2, r5, r2
 80096d0:	7821      	ldrb	r1, [r4, #0]
 80096d2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 80096dc:	e478      	b.n	8008fd0 <USB_EPStartXfer+0x4e>
        return HAL_ERROR;
 80096de:	2001      	movs	r0, #1
 80096e0:	e487      	b.n	8008ff2 <USB_EPStartXfer+0x70>

080096e2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80096e2:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 80096e4:	085c      	lsrs	r4, r3, #1
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80096e6:	4410      	add	r0, r2
 80096e8:	f500 6080 	add.w	r0, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 80096ec:	e007      	b.n	80096fe <USB_ReadPMA+0x1c>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80096ee:	f830 2b02 	ldrh.w	r2, [r0], #2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80096f2:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80096f4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80096f8:	704a      	strb	r2, [r1, #1]
    pBuf++;
 80096fa:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 80096fc:	3c01      	subs	r4, #1
 80096fe:	2c00      	cmp	r4, #0
 8009700:	d1f5      	bne.n	80096ee <USB_ReadPMA+0xc>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009702:	f013 0f01 	tst.w	r3, #1
 8009706:	d001      	beq.n	800970c <USB_ReadPMA+0x2a>
  {
    temp = *pdwVal;
 8009708:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800970a:	700b      	strb	r3, [r1, #0]
  }
}
 800970c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009710:	4770      	bx	lr
	...

08009714 <LCD_IO_Init>:
/*!
 * @brief Nizkonivojska inicializacija zaslona
 * @internal
 */
static void LCD_IO_Init()
{
 8009714:	b538      	push	{r3, r4, r5, lr}
	LCD_RST_LOW();
 8009716:	4c05      	ldr	r4, [pc, #20]	; (800972c <LCD_IO_Init+0x18>)
 8009718:	2508      	movs	r5, #8
 800971a:	62a5      	str	r5, [r4, #40]	; 0x28
	HAL_Delay(120);
 800971c:	2078      	movs	r0, #120	; 0x78
 800971e:	f7f9 fe5d 	bl	80033dc <HAL_Delay>
	LCD_RST_HIGH();
 8009722:	61a5      	str	r5, [r4, #24]
	HAL_Delay(120);
 8009724:	2078      	movs	r0, #120	; 0x78
 8009726:	f7f9 fe59 	bl	80033dc <HAL_Delay>
}
 800972a:	bd38      	pop	{r3, r4, r5, pc}
 800972c:	48000c00 	.word	0x48000c00

08009730 <LCD_SetBacklight>:
 * @param state logična vrednost
 */

void LCD_SetBacklight(uint8_t state)
{
	if (state == 1)
 8009730:	2801      	cmp	r0, #1
 8009732:	d003      	beq.n	800973c <LCD_SetBacklight+0xc>
		LCD_BCKL_ON();
	else
		LCD_BCKL_OFF();
 8009734:	4b03      	ldr	r3, [pc, #12]	; (8009744 <LCD_SetBacklight+0x14>)
 8009736:	2240      	movs	r2, #64	; 0x40
 8009738:	629a      	str	r2, [r3, #40]	; 0x28
}
 800973a:	4770      	bx	lr
		LCD_BCKL_ON();
 800973c:	4b01      	ldr	r3, [pc, #4]	; (8009744 <LCD_SetBacklight+0x14>)
 800973e:	2240      	movs	r2, #64	; 0x40
 8009740:	619a      	str	r2, [r3, #24]
 8009742:	4770      	bx	lr
 8009744:	48000400 	.word	0x48000400

08009748 <LCD_FillRect>:
 *
 * Funkcija izbere želeno območje, potem pa tolikokrat pošlje izbrano barvo,
 * kolikor slikovnih točk je potrebnih.
 */
void LCD_FillRect(uint32_t x, uint32_t y, uint32_t w, uint32_t h, uint16_t c)
{
 8009748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800974c:	4607      	mov	r7, r0
 800974e:	4688      	mov	r8, r1
 8009750:	4615      	mov	r5, r2
 8009752:	461e      	mov	r6, r3
	uint32_t max_count   = ILI9341_GetParam(LCD_AREA);     /* Št. vseh pikslov     */
 8009754:	2002      	movs	r0, #2
 8009756:	f000 f967 	bl	8009a28 <ILI9341_GetParam>
 800975a:	4604      	mov	r4, r0
	uint32_t pixel_count = w*h;  /* Dejansko št. pikslov */
 800975c:	fb06 f305 	mul.w	r3, r6, r5

	if(pixel_count > max_count)
 8009760:	4298      	cmp	r0, r3
 8009762:	d300      	bcc.n	8009766 <LCD_FillRect+0x1e>
	uint32_t pixel_count = w*h;  /* Dejansko št. pikslov */
 8009764:	461c      	mov	r4, r3
		pixel_count = max_count;

	// Izbor koordinat piksla
	ILI9341_SetDisplayWindow(x, y, w, h);
 8009766:	4633      	mov	r3, r6
 8009768:	462a      	mov	r2, r5
 800976a:	4641      	mov	r1, r8
 800976c:	4638      	mov	r0, r7
 800976e:	f000 f87d 	bl	800986c <ILI9341_SetDisplayWindow>

#ifdef ILI9341_USEDMA
	ILI9341_SendRepeatedDataDMA(c, pixel_count);
 8009772:	4621      	mov	r1, r4
 8009774:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8009778:	f000 f910 	bl	800999c <ILI9341_SendRepeatedDataDMA>
#else
	ILI9341_SendRepeatedData(c, pixel_count);
#endif

}
 800977c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009780 <LCD_ClearScreen>:

/*!
 * @brief Počisti zaslon (prebarvaj s črno barvo)
 */
void LCD_ClearScreen()
{
 8009780:	b510      	push	{r4, lr}
 8009782:	b082      	sub	sp, #8
    LCD_FillRect(0, 0, ILI9341_GetParam(LCD_WIDTH), ILI9341_GetParam(LCD_HEIGHT), 0);
 8009784:	2000      	movs	r0, #0
 8009786:	f000 f94f 	bl	8009a28 <ILI9341_GetParam>
 800978a:	4604      	mov	r4, r0
 800978c:	2001      	movs	r0, #1
 800978e:	f000 f94b 	bl	8009a28 <ILI9341_GetParam>
 8009792:	4603      	mov	r3, r0
 8009794:	2000      	movs	r0, #0
 8009796:	9000      	str	r0, [sp, #0]
 8009798:	4622      	mov	r2, r4
 800979a:	4601      	mov	r1, r0
 800979c:	f7ff ffd4 	bl	8009748 <LCD_FillRect>
}
 80097a0:	b002      	add	sp, #8
 80097a2:	bd10      	pop	{r4, pc}

080097a4 <LCD_Init>:
{
 80097a4:	b508      	push	{r3, lr}
	LCD_IO_Init();
 80097a6:	f7ff ffb5 	bl	8009714 <LCD_IO_Init>
	ILI9341_Init(ILI9341_COLORSPACE_RBG565, ILI9341_MISKO_ROTATE_0);
 80097aa:	2103      	movs	r1, #3
 80097ac:	2055      	movs	r0, #85	; 0x55
 80097ae:	f000 f8ab 	bl	8009908 <ILI9341_Init>
	ILI9341_DisplayOn();
 80097b2:	f000 f92d 	bl	8009a10 <ILI9341_DisplayOn>
	LCD_ClearScreen();
 80097b6:	f7ff ffe3 	bl	8009780 <LCD_ClearScreen>
	ILI9341_WaitTransfer();
 80097ba:	f000 f815 	bl	80097e8 <ILI9341_WaitTransfer>
	LCD_SetBacklight(1);
 80097be:	2001      	movs	r0, #1
 80097c0:	f7ff ffb6 	bl	8009730 <LCD_SetBacklight>
}
 80097c4:	bd08      	pop	{r3, pc}
	...

080097c8 <ILI9341_SendData>:
 */
void ILI9341_SendData(LCD_IO_Data_t *data, uint32_t length)
{
	uint8_t increment = LCD_IO_DATA_WRITE_CYCLES;

	for (uint32_t i = 0; i < (length/increment); i += increment)
 80097c8:	2300      	movs	r3, #0
 80097ca:	e007      	b.n	80097dc <ILI9341_SendData+0x14>
		FMC_BANK1_WriteData(data[i]);
 80097cc:	f830 c013 	ldrh.w	ip, [r0, r3, lsl #1]
	*(LCD_IO_Data_t *)(FMC_BANK1_MEM) = data;
 80097d0:	4a04      	ldr	r2, [pc, #16]	; (80097e4 <ILI9341_SendData+0x1c>)
 80097d2:	f8a2 c000 	strh.w	ip, [r2]
  __ASM volatile ("dsb 0xF":::"memory");
 80097d6:	f3bf 8f4f 	dsb	sy
	for (uint32_t i = 0; i < (length/increment); i += increment)
 80097da:	3301      	adds	r3, #1
 80097dc:	428b      	cmp	r3, r1
 80097de:	d3f5      	bcc.n	80097cc <ILI9341_SendData+0x4>
}
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	60010000 	.word	0x60010000

080097e8 <ILI9341_WaitTransfer>:
#endif
}

//! @brief Počakaj na prenos podatka FSMC->Ili9341.
void ILI9341_WaitTransfer()
{
 80097e8:	b508      	push	{r3, lr}
#ifdef ILI9341_USEDMA
	while (HAL_DMA_GetState(&hLCDDMA) != HAL_DMA_STATE_READY);
 80097ea:	4803      	ldr	r0, [pc, #12]	; (80097f8 <ILI9341_WaitTransfer+0x10>)
 80097ec:	f7fa fee5 	bl	80045ba <HAL_DMA_GetState>
 80097f0:	2801      	cmp	r0, #1
 80097f2:	d1fa      	bne.n	80097ea <ILI9341_WaitTransfer+0x2>
#endif
}
 80097f4:	bd08      	pop	{r3, pc}
 80097f6:	bf00      	nop
 80097f8:	2000061c 	.word	0x2000061c

080097fc <ILI9341_SetAddress>:
{
 80097fc:	b510      	push	{r4, lr}
 80097fe:	4604      	mov	r4, r0
	ILI9341_WaitTransfer();
 8009800:	f7ff fff2 	bl	80097e8 <ILI9341_WaitTransfer>
	FMC_BANK1_SetAddress(*address);
 8009804:	8822      	ldrh	r2, [r4, #0]
	*(LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 8009806:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800980a:	801a      	strh	r2, [r3, #0]
 800980c:	f3bf 8f4f 	dsb	sy
}
 8009810:	bd10      	pop	{r4, pc}
	...

08009814 <ILI9341_SetOrientation>:
{
 8009814:	b510      	push	{r4, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	4604      	mov	r4, r0
	ILI9341_Data_t command   = ILI9341_MAC; /* Memory Access Control */
 800981a:	2336      	movs	r3, #54	; 0x36
 800981c:	f8ad 3006 	strh.w	r3, [sp, #6]
	ILI9341_Data_t parameter = (ILI9341_Data_t)orientations[orientation];
 8009820:	4b10      	ldr	r3, [pc, #64]	; (8009864 <ILI9341_SetOrientation+0x50>)
 8009822:	f833 3020 	ldrh.w	r3, [r3, r0, lsl #2]
 8009826:	f8ad 3004 	strh.w	r3, [sp, #4]
	ILI9341_SetAddress(&command);
 800982a:	f10d 0006 	add.w	r0, sp, #6
 800982e:	f7ff ffe5 	bl	80097fc <ILI9341_SetAddress>
	ILI9341_SendData(&parameter, 1);
 8009832:	2101      	movs	r1, #1
 8009834:	a801      	add	r0, sp, #4
 8009836:	f7ff ffc7 	bl	80097c8 <ILI9341_SendData>
	switch (orientation) {
 800983a:	b144      	cbz	r4, 800984e <ILI9341_SetOrientation+0x3a>
 800983c:	2c03      	cmp	r4, #3
 800983e:	d006      	beq.n	800984e <ILI9341_SetOrientation+0x3a>
		LCD.width  = ILI9341_WIDTH;
 8009840:	4b09      	ldr	r3, [pc, #36]	; (8009868 <ILI9341_SetOrientation+0x54>)
 8009842:	22f0      	movs	r2, #240	; 0xf0
 8009844:	601a      	str	r2, [r3, #0]
		LCD.height = ILI9341_HEIGHT;
 8009846:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800984a:	605a      	str	r2, [r3, #4]
		break;
 800984c:	e005      	b.n	800985a <ILI9341_SetOrientation+0x46>
		LCD.width  = ILI9341_HEIGHT;
 800984e:	4b06      	ldr	r3, [pc, #24]	; (8009868 <ILI9341_SetOrientation+0x54>)
 8009850:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8009854:	601a      	str	r2, [r3, #0]
		LCD.height = ILI9341_WIDTH;
 8009856:	22f0      	movs	r2, #240	; 0xf0
 8009858:	605a      	str	r2, [r3, #4]
	LCD.orientation = orientation;
 800985a:	4b03      	ldr	r3, [pc, #12]	; (8009868 <ILI9341_SetOrientation+0x54>)
 800985c:	609c      	str	r4, [r3, #8]
}
 800985e:	b002      	add	sp, #8
 8009860:	bd10      	pop	{r4, pc}
 8009862:	bf00      	nop
 8009864:	0800f998 	.word	0x0800f998
 8009868:	20003ba0 	.word	0x20003ba0

0800986c <ILI9341_SetDisplayWindow>:
{
 800986c:	b530      	push	{r4, r5, lr}
 800986e:	b085      	sub	sp, #20
 8009870:	460c      	mov	r4, r1
 8009872:	461d      	mov	r5, r3
	command = ILI9341_CASET;
 8009874:	232a      	movs	r3, #42	; 0x2a
 8009876:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = (ILI9341_Data_t)(Xpos >> 8U);
 800987a:	f3c0 230f 	ubfx	r3, r0, #8, #16
 800987e:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter[1] = (ILI9341_Data_t)(Xpos & 0xFFU);
 8009882:	b2c3      	uxtb	r3, r0
 8009884:	f8ad 3006 	strh.w	r3, [sp, #6]
	parameter[2] = (ILI9341_Data_t)((Xpos + Width - 1U) >> 8U);
 8009888:	1883      	adds	r3, r0, r2
 800988a:	3b01      	subs	r3, #1
 800988c:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8009890:	f8ad 3008 	strh.w	r3, [sp, #8]
	parameter[3] = (ILI9341_Data_t)((Xpos + Width - 1U) & 0xFFU);
 8009894:	fa12 f080 	uxtah	r0, r2, r0
 8009898:	b280      	uxth	r0, r0
 800989a:	3801      	subs	r0, #1
 800989c:	b2c0      	uxtb	r0, r0
 800989e:	f8ad 000a 	strh.w	r0, [sp, #10]
	ILI9341_SetAddress(&command);
 80098a2:	f10d 000e 	add.w	r0, sp, #14
 80098a6:	f7ff ffa9 	bl	80097fc <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 4);
 80098aa:	2104      	movs	r1, #4
 80098ac:	eb0d 0001 	add.w	r0, sp, r1
 80098b0:	f7ff ff8a 	bl	80097c8 <ILI9341_SendData>
	command = ILI9341_RASET;
 80098b4:	232b      	movs	r3, #43	; 0x2b
 80098b6:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter [0] = (ILI9341_Data_t)(Ypos >> 8U);
 80098ba:	f3c4 230f 	ubfx	r3, r4, #8, #16
 80098be:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter [1] = (ILI9341_Data_t)(Ypos & 0xFFU);
 80098c2:	b2e3      	uxtb	r3, r4
 80098c4:	f8ad 3006 	strh.w	r3, [sp, #6]
	parameter [2] = (ILI9341_Data_t)((Ypos + Height - 1U) >> 8U);
 80098c8:	1962      	adds	r2, r4, r5
 80098ca:	3a01      	subs	r2, #1
 80098cc:	f3c2 220f 	ubfx	r2, r2, #8, #16
 80098d0:	f8ad 2008 	strh.w	r2, [sp, #8]
	parameter [3] = (ILI9341_Data_t)((Ypos + Height - 1U) & 0xFFU);
 80098d4:	fa15 f484 	uxtah	r4, r5, r4
 80098d8:	b2a4      	uxth	r4, r4
 80098da:	3c01      	subs	r4, #1
 80098dc:	b2e4      	uxtb	r4, r4
 80098de:	f8ad 400a 	strh.w	r4, [sp, #10]
	ILI9341_SetAddress(&command);
 80098e2:	f10d 000e 	add.w	r0, sp, #14
 80098e6:	f7ff ff89 	bl	80097fc <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 4);
 80098ea:	2104      	movs	r1, #4
 80098ec:	eb0d 0001 	add.w	r0, sp, r1
 80098f0:	f7ff ff6a 	bl	80097c8 <ILI9341_SendData>
	command = ILI9341_GRAM;
 80098f4:	232c      	movs	r3, #44	; 0x2c
 80098f6:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 80098fa:	f10d 000e 	add.w	r0, sp, #14
 80098fe:	f7ff ff7d 	bl	80097fc <ILI9341_SetAddress>
}
 8009902:	b005      	add	sp, #20
 8009904:	bd30      	pop	{r4, r5, pc}
	...

08009908 <ILI9341_Init>:
{
 8009908:	b510      	push	{r4, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	4604      	mov	r4, r0
	ILI9341_SetOrientation(orientation);
 800990e:	4608      	mov	r0, r1
 8009910:	f7ff ff80 	bl	8009814 <ILI9341_SetOrientation>
	ILI9341_SetDisplayWindow(0U, 0U, LCD.width, LCD.height);
 8009914:	4a20      	ldr	r2, [pc, #128]	; (8009998 <ILI9341_Init+0x90>)
 8009916:	6853      	ldr	r3, [r2, #4]
 8009918:	6812      	ldr	r2, [r2, #0]
 800991a:	2100      	movs	r1, #0
 800991c:	4608      	mov	r0, r1
 800991e:	f7ff ffa5 	bl	800986c <ILI9341_SetDisplayWindow>
	command = ILI9341_SLEEP_OUT;
 8009922:	2311      	movs	r3, #17
 8009924:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 8009928:	f10d 000e 	add.w	r0, sp, #14
 800992c:	f7ff ff66 	bl	80097fc <ILI9341_SetAddress>
	HAL_Delay(200);
 8009930:	20c8      	movs	r0, #200	; 0xc8
 8009932:	f7f9 fd53 	bl	80033dc <HAL_Delay>
	command = ILI9341_NORMAL_MODE_ON;
 8009936:	2313      	movs	r3, #19
 8009938:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 800993c:	f10d 000e 	add.w	r0, sp, #14
 8009940:	f7ff ff5c 	bl	80097fc <ILI9341_SetAddress>
	HAL_Delay(100);
 8009944:	2064      	movs	r0, #100	; 0x64
 8009946:	f7f9 fd49 	bl	80033dc <HAL_Delay>
	command = ILI9341_PIXEL_FORMAT;
 800994a:	233a      	movs	r3, #58	; 0x3a
 800994c:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = color_space;
 8009950:	f8ad 4004 	strh.w	r4, [sp, #4]
	ILI9341_SetAddress(&command);
 8009954:	f10d 000e 	add.w	r0, sp, #14
 8009958:	f7ff ff50 	bl	80097fc <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 1);
 800995c:	2101      	movs	r1, #1
 800995e:	a801      	add	r0, sp, #4
 8009960:	f7ff ff32 	bl	80097c8 <ILI9341_SendData>
	HAL_Delay(100);
 8009964:	2064      	movs	r0, #100	; 0x64
 8009966:	f7f9 fd39 	bl	80033dc <HAL_Delay>
	command = ILI9341_INTERFACE;
 800996a:	23f6      	movs	r3, #246	; 0xf6
 800996c:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = 0x49;
 8009970:	2349      	movs	r3, #73	; 0x49
 8009972:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter[1] = 0;
 8009976:	2300      	movs	r3, #0
 8009978:	f8ad 3006 	strh.w	r3, [sp, #6]
	parameter[2] = 0x20;
 800997c:	2320      	movs	r3, #32
 800997e:	f8ad 3008 	strh.w	r3, [sp, #8]
	ILI9341_SetAddress(&command);
 8009982:	f10d 000e 	add.w	r0, sp, #14
 8009986:	f7ff ff39 	bl	80097fc <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 3);
 800998a:	2103      	movs	r1, #3
 800998c:	a801      	add	r0, sp, #4
 800998e:	f7ff ff1b 	bl	80097c8 <ILI9341_SendData>
}
 8009992:	b004      	add	sp, #16
 8009994:	bd10      	pop	{r4, pc}
 8009996:	bf00      	nop
 8009998:	20003ba0 	.word	0x20003ba0

0800999c <ILI9341_SendRepeatedDataDMA>:
{
 800999c:	b530      	push	{r4, r5, lr}
 800999e:	b083      	sub	sp, #12
 80099a0:	460c      	mov	r4, r1
 80099a2:	f8ad 0006 	strh.w	r0, [sp, #6]
	switch (hLCDDMA.Init.PeriphDataAlignment)
 80099a6:	4b18      	ldr	r3, [pc, #96]	; (8009a08 <ILI9341_SendRepeatedDataDMA+0x6c>)
 80099a8:	695b      	ldr	r3, [r3, #20]
 80099aa:	b17b      	cbz	r3, 80099cc <ILI9341_SendRepeatedDataDMA+0x30>
 80099ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099b0:	d100      	bne.n	80099b4 <ILI9341_SendRepeatedDataDMA+0x18>
			len = (num_copies / (2*LCD_IO_DATA_WRITE_CYCLES));
 80099b2:	084c      	lsrs	r4, r1, #1
	ILI9341_WaitTransfer();
 80099b4:	f7ff ff18 	bl	80097e8 <ILI9341_WaitTransfer>
	HAL_DMA_DeInit(&hLCDDMA);
 80099b8:	4d13      	ldr	r5, [pc, #76]	; (8009a08 <ILI9341_SendRepeatedDataDMA+0x6c>)
 80099ba:	4628      	mov	r0, r5
 80099bc:	f7fa fcb6 	bl	800432c <HAL_DMA_DeInit>
	hLCDDMA.Init.PeriphInc = DMA_PINC_DISABLE;	// dont increment source address
 80099c0:	2300      	movs	r3, #0
 80099c2:	60eb      	str	r3, [r5, #12]
	HAL_DMA_Init(&hLCDDMA);
 80099c4:	4628      	mov	r0, r5
 80099c6:	f7fa fc45 	bl	8004254 <HAL_DMA_Init>
 80099ca:	e00e      	b.n	80099ea <ILI9341_SendRepeatedDataDMA+0x4e>
			len = 2*num_copies/LCD_IO_DATA_WRITE_CYCLES;
 80099cc:	004c      	lsls	r4, r1, #1
			break;
 80099ce:	e7f1      	b.n	80099b4 <ILI9341_SendRepeatedDataDMA+0x18>
			len -= 65535;
 80099d0:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
 80099d4:	3cff      	subs	r4, #255	; 0xff
			transfer = 65535;
 80099d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
		if (HAL_DMA_Start_IT(&hLCDDMA, (uint32_t) &data, (uint32_t)FMC_BANK1_MEM, transfer) != HAL_OK) return 1;
 80099da:	4a0c      	ldr	r2, [pc, #48]	; (8009a0c <ILI9341_SendRepeatedDataDMA+0x70>)
 80099dc:	f10d 0106 	add.w	r1, sp, #6
 80099e0:	4809      	ldr	r0, [pc, #36]	; (8009a08 <ILI9341_SendRepeatedDataDMA+0x6c>)
 80099e2:	f7fa fcff 	bl	80043e4 <HAL_DMA_Start_IT>
 80099e6:	b960      	cbnz	r0, 8009a02 <ILI9341_SendRepeatedDataDMA+0x66>
	while (len);
 80099e8:	b134      	cbz	r4, 80099f8 <ILI9341_SendRepeatedDataDMA+0x5c>
		ILI9341_WaitTransfer();
 80099ea:	f7ff fefd 	bl	80097e8 <ILI9341_WaitTransfer>
		if (len > 65535)
 80099ee:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 80099f2:	d2ed      	bcs.n	80099d0 <ILI9341_SendRepeatedDataDMA+0x34>
		if (transfer == 0) return 1;
 80099f4:	b914      	cbnz	r4, 80099fc <ILI9341_SendRepeatedDataDMA+0x60>
 80099f6:	2001      	movs	r0, #1
}
 80099f8:	b003      	add	sp, #12
 80099fa:	bd30      	pop	{r4, r5, pc}
			transfer = len;
 80099fc:	4623      	mov	r3, r4
			len = 0;
 80099fe:	2400      	movs	r4, #0
 8009a00:	e7eb      	b.n	80099da <ILI9341_SendRepeatedDataDMA+0x3e>
		if (HAL_DMA_Start_IT(&hLCDDMA, (uint32_t) &data, (uint32_t)FMC_BANK1_MEM, transfer) != HAL_OK) return 1;
 8009a02:	2001      	movs	r0, #1
 8009a04:	e7f8      	b.n	80099f8 <ILI9341_SendRepeatedDataDMA+0x5c>
 8009a06:	bf00      	nop
 8009a08:	2000061c 	.word	0x2000061c
 8009a0c:	60010000 	.word	0x60010000

08009a10 <ILI9341_DisplayOn>:

//! @brief Strojno omogoči zaslon
void ILI9341_DisplayOn()
{
 8009a10:	b500      	push	{lr}
 8009a12:	b083      	sub	sp, #12
	ILI9341_Data_t command = ILI9341_DISPLAY_ON;
 8009a14:	2329      	movs	r3, #41	; 0x29
 8009a16:	f8ad 3006 	strh.w	r3, [sp, #6]
	ILI9341_SetAddress(&command);
 8009a1a:	f10d 0006 	add.w	r0, sp, #6
 8009a1e:	f7ff feed 	bl	80097fc <ILI9341_SetAddress>
}
 8009a22:	b003      	add	sp, #12
 8009a24:	f85d fb04 	ldr.w	pc, [sp], #4

08009a28 <ILI9341_GetParam>:
 */
uint32_t ILI9341_GetParam(LCD_Param_t param)
{
	uint32_t value = 0;

	switch (param) {
 8009a28:	2803      	cmp	r0, #3
 8009a2a:	d803      	bhi.n	8009a34 <ILI9341_GetParam+0xc>
 8009a2c:	e8df f000 	tbb	[pc, r0]
 8009a30:	0a0d0704 	.word	0x0a0d0704
 8009a34:	2000      	movs	r0, #0
 8009a36:	4770      	bx	lr
	case LCD_WIDTH:
		value = LCD.width;
 8009a38:	4b05      	ldr	r3, [pc, #20]	; (8009a50 <ILI9341_GetParam+0x28>)
 8009a3a:	6818      	ldr	r0, [r3, #0]
		break;
 8009a3c:	4770      	bx	lr
	case LCD_HEIGHT:
		value = LCD.height;
 8009a3e:	4b04      	ldr	r3, [pc, #16]	; (8009a50 <ILI9341_GetParam+0x28>)
 8009a40:	6858      	ldr	r0, [r3, #4]
		break;
 8009a42:	4770      	bx	lr
	case LCD_AREA:
		value = ILI9341_AREA;
		break;
	case LCD_ORIENTATION:
		value = LCD.orientation;
 8009a44:	4b02      	ldr	r3, [pc, #8]	; (8009a50 <ILI9341_GetParam+0x28>)
 8009a46:	6898      	ldr	r0, [r3, #8]
		break;
 8009a48:	4770      	bx	lr
		value = ILI9341_AREA;
 8009a4a:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
	default:
		break;
	}

	return value;
}
 8009a4e:	4770      	bx	lr
 8009a50:	20003ba0 	.word	0x20003ba0

08009a54 <UserPixelSetFunction>:


#include "lcd_ugui.h"

void UserPixelSetFunction(UG_S16 x, UG_S16 y, UG_COLOR c)
{
 8009a54:	b500      	push	{lr}
 8009a56:	b083      	sub	sp, #12
 8009a58:	f8ad 2006 	strh.w	r2, [sp, #6]
	ILI9341_SetDisplayWindow(x, y, 1, 1);
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	461a      	mov	r2, r3
 8009a60:	f7ff ff04 	bl	800986c <ILI9341_SetDisplayWindow>
	ILI9341_SendData((LCD_IO_Data_t *)&c, 1);
 8009a64:	2101      	movs	r1, #1
 8009a66:	f10d 0006 	add.w	r0, sp, #6
 8009a6a:	f7ff fead 	bl	80097c8 <ILI9341_SendData>
}
 8009a6e:	b003      	add	sp, #12
 8009a70:	f85d fb04 	ldr.w	pc, [sp], #4

08009a74 <_HW_FillFrame_>:

UG_RESULT _HW_FillFrame_(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c)
{
 8009a74:	b510      	push	{r4, lr}
 8009a76:	b082      	sub	sp, #8
	LCD_FillRect(x1, y1, x2-x1, y2-y1, c);
 8009a78:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 8009a7c:	9400      	str	r4, [sp, #0]
 8009a7e:	1a5b      	subs	r3, r3, r1
 8009a80:	1a12      	subs	r2, r2, r0
 8009a82:	f7ff fe61 	bl	8009748 <LCD_FillRect>
	return UG_RESULT_OK;
}
 8009a86:	2000      	movs	r0, #0
 8009a88:	b002      	add	sp, #8
 8009a8a:	bd10      	pop	{r4, pc}

08009a8c <LCD_UG_init>:


UG_GUI gui;

UG_S16 LCD_UG_init(void)
{
 8009a8c:	b510      	push	{r4, lr}
	UG_Init(&gui, UserPixelSetFunction, ILI9341_GetParam(LCD_WIDTH), ILI9341_GetParam(LCD_HEIGHT));
 8009a8e:	2000      	movs	r0, #0
 8009a90:	f7ff ffca 	bl	8009a28 <ILI9341_GetParam>
 8009a94:	4604      	mov	r4, r0
 8009a96:	2001      	movs	r0, #1
 8009a98:	f7ff ffc6 	bl	8009a28 <ILI9341_GetParam>
 8009a9c:	b203      	sxth	r3, r0
 8009a9e:	b222      	sxth	r2, r4
 8009aa0:	490b      	ldr	r1, [pc, #44]	; (8009ad0 <LCD_UG_init+0x44>)
 8009aa2:	480c      	ldr	r0, [pc, #48]	; (8009ad4 <LCD_UG_init+0x48>)
 8009aa4:	f000 f81c 	bl	8009ae0 <UG_Init>
	UG_DriverRegister(DRIVER_FILL_FRAME, (void *)_HW_FillFrame_);
 8009aa8:	490b      	ldr	r1, [pc, #44]	; (8009ad8 <LCD_UG_init+0x4c>)
 8009aaa:	2001      	movs	r0, #1
 8009aac:	f000 f8b2 	bl	8009c14 <UG_DriverRegister>
	UG_DriverEnable(DRIVER_FILL_FRAME);
 8009ab0:	2001      	movs	r0, #1
 8009ab2:	f000 f8bd 	bl	8009c30 <UG_DriverEnable>

	UG_FontSelect(&FONT_8X12);
 8009ab6:	4809      	ldr	r0, [pc, #36]	; (8009adc <LCD_UG_init+0x50>)
 8009ab8:	f000 f852 	bl	8009b60 <UG_FontSelect>
	UG_SetForecolor(C_WHITE);
 8009abc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009ac0:	f000 f898 	bl	8009bf4 <UG_SetForecolor>
	UG_SetBackcolor(C_BLACK);
 8009ac4:	2000      	movs	r0, #0
 8009ac6:	f000 f89d 	bl	8009c04 <UG_SetBackcolor>
	return 0;
}
 8009aca:	2000      	movs	r0, #0
 8009acc:	bd10      	pop	{r4, pc}
 8009ace:	bf00      	nop
 8009ad0:	08009a55 	.word	0x08009a55
 8009ad4:	20003bac 	.word	0x20003bac
 8009ad8:	08009a75 	.word	0x08009a75
 8009adc:	0800f9a8 	.word	0x0800f9a8

08009ae0 <UG_Init>:

UG_S16 UG_Init( UG_GUI* g, void (*p)(UG_S16,UG_S16,UG_COLOR), UG_S16 x, UG_S16 y )
{
   UG_U8 i;

   g->pset = (void(*)(UG_S16,UG_S16,UG_COLOR))p;
 8009ae0:	6001      	str	r1, [r0, #0]
   g->x_dim = x;
 8009ae2:	8082      	strh	r2, [r0, #4]
   g->y_dim = y;
 8009ae4:	80c3      	strh	r3, [r0, #6]
   g->console.x_start = 4;
 8009ae6:	2104      	movs	r1, #4
 8009ae8:	8401      	strh	r1, [r0, #32]
   g->console.y_start = 4;
 8009aea:	8441      	strh	r1, [r0, #34]	; 0x22
   g->console.x_end = g->x_dim - g->console.x_start-1;
 8009aec:	b292      	uxth	r2, r2
 8009aee:	3a04      	subs	r2, #4
 8009af0:	b292      	uxth	r2, r2
 8009af2:	3a01      	subs	r2, #1
 8009af4:	b212      	sxth	r2, r2
 8009af6:	8482      	strh	r2, [r0, #36]	; 0x24
   g->console.y_end = g->y_dim - g->console.x_start-1;
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	3b04      	subs	r3, #4
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	3b01      	subs	r3, #1
 8009b00:	b21b      	sxth	r3, r3
 8009b02:	84c3      	strh	r3, [r0, #38]	; 0x26
   g->console.x_pos = g->console.x_end;
 8009b04:	8382      	strh	r2, [r0, #28]
   g->console.y_pos = g->console.y_end;
 8009b06:	83c3      	strh	r3, [r0, #30]
   g->char_h_space = 1;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   g->char_v_space = 1;
 8009b0e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
   g->font.p = NULL;
 8009b12:	2300      	movs	r3, #0
 8009b14:	62c3      	str	r3, [r0, #44]	; 0x2c
   g->font.char_height = 0;
 8009b16:	8683      	strh	r3, [r0, #52]	; 0x34
   g->font.char_width = 0;
 8009b18:	8643      	strh	r3, [r0, #50]	; 0x32
   g->font.start_char = 0;
 8009b1a:	86c3      	strh	r3, [r0, #54]	; 0x36
   g->font.end_char = 0;
 8009b1c:	8703      	strh	r3, [r0, #56]	; 0x38
   g->font.widths = NULL;
 8009b1e:	63c3      	str	r3, [r0, #60]	; 0x3c
   #ifdef USE_COLOR_RGB888
   g->desktop_color = 0x5E8BEf;
   #endif
   #ifdef USE_COLOR_RGB565
   g->desktop_color = 0x5C5D;
 8009b20:	f645 425d 	movw	r2, #23645	; 0x5c5d
 8009b24:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
   #endif
   g->fore_color = C_WHITE;
 8009b28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b2c:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
   g->back_color = C_BLACK;
 8009b30:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
   g->next_window = NULL;
 8009b34:	6103      	str	r3, [r0, #16]
   g->active_window = NULL;
 8009b36:	6143      	str	r3, [r0, #20]
   g->last_window = NULL;
 8009b38:	6183      	str	r3, [r0, #24]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8009b3a:	e008      	b.n	8009b4e <UG_Init+0x6e>
   {
      g->driver[i].driver = NULL;
 8009b3c:	f103 0209 	add.w	r2, r3, #9
 8009b40:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8009b44:	2100      	movs	r1, #0
 8009b46:	6051      	str	r1, [r2, #4]
      g->driver[i].state = 0;
 8009b48:	7211      	strb	r1, [r2, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d9f4      	bls.n	8009b3c <UG_Init+0x5c>
   }

   gui = g;
 8009b52:	4b02      	ldr	r3, [pc, #8]	; (8009b5c <UG_Init+0x7c>)
 8009b54:	6018      	str	r0, [r3, #0]
   return 1;
}
 8009b56:	2001      	movs	r0, #1
 8009b58:	4770      	bx	lr
 8009b5a:	bf00      	nop
 8009b5c:	20003c10 	.word	0x20003c10

08009b60 <UG_FontSelect>:
   gui = g;
   return 1;
}

void UG_FontSelect( const UG_FONT* font )
{
 8009b60:	b500      	push	{lr}
   gui->font = *font;
 8009b62:	4b07      	ldr	r3, [pc, #28]	; (8009b80 <UG_FontSelect+0x20>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f103 0c2c 	add.w	ip, r3, #44	; 0x2c
 8009b6a:	4686      	mov	lr, r0
 8009b6c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009b70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009b74:	f8de 3000 	ldr.w	r3, [lr]
 8009b78:	f8cc 3000 	str.w	r3, [ip]
}
 8009b7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b80:	20003c10 	.word	0x20003c10

08009b84 <UG_FillFrame>:
{
   UG_FillFrame(0,0,gui->x_dim-1,gui->y_dim-1,c);
}

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8009b84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b88:	b083      	sub	sp, #12
 8009b8a:	4606      	mov	r6, r0
 8009b8c:	4688      	mov	r8, r1
 8009b8e:	4691      	mov	r9, r2
 8009b90:	461d      	mov	r5, r3
 8009b92:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
   UG_S16 n,m;

   if ( x2 < x1 )
 8009b96:	4282      	cmp	r2, r0
 8009b98:	db01      	blt.n	8009b9e <UG_FillFrame+0x1a>
 8009b9a:	4681      	mov	r9, r0
 8009b9c:	4616      	mov	r6, r2
   {
      n = x2;
      x2 = x1;
      x1 = n;
   }
   if ( y2 < y1 )
 8009b9e:	4545      	cmp	r5, r8
 8009ba0:	db02      	blt.n	8009ba8 <UG_FillFrame+0x24>
 8009ba2:	462b      	mov	r3, r5
 8009ba4:	4645      	mov	r5, r8
 8009ba6:	4698      	mov	r8, r3
      y2 = y1;
      y1 = n;
   }

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 8009ba8:	4b11      	ldr	r3, [pc, #68]	; (8009bf0 <UG_FillFrame+0x6c>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8009bb0:	f012 0f02 	tst.w	r2, #2
 8009bb4:	d017      	beq.n	8009be6 <UG_FillFrame+0x62>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8009bb6:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8009bb8:	9700      	str	r7, [sp, #0]
 8009bba:	4643      	mov	r3, r8
 8009bbc:	4632      	mov	r2, r6
 8009bbe:	4629      	mov	r1, r5
 8009bc0:	4648      	mov	r0, r9
 8009bc2:	47a0      	blx	r4
 8009bc4:	b978      	cbnz	r0, 8009be6 <UG_FillFrame+0x62>
      for( n=x1; n<=x2; n++ )
      {
         gui->pset(n,m,c);
      }
   }
}
 8009bc6:	b003      	add	sp, #12
 8009bc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
         gui->pset(n,m,c);
 8009bcc:	4b08      	ldr	r3, [pc, #32]	; (8009bf0 <UG_FillFrame+0x6c>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	463a      	mov	r2, r7
 8009bd4:	4629      	mov	r1, r5
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8009bda:	3401      	adds	r4, #1
 8009bdc:	b224      	sxth	r4, r4
 8009bde:	42a6      	cmp	r6, r4
 8009be0:	daf4      	bge.n	8009bcc <UG_FillFrame+0x48>
   for( m=y1; m<=y2; m++ )
 8009be2:	3501      	adds	r5, #1
 8009be4:	b22d      	sxth	r5, r5
 8009be6:	45a8      	cmp	r8, r5
 8009be8:	dbed      	blt.n	8009bc6 <UG_FillFrame+0x42>
      for( n=x1; n<=x2; n++ )
 8009bea:	464c      	mov	r4, r9
 8009bec:	e7f7      	b.n	8009bde <UG_FillFrame+0x5a>
 8009bee:	bf00      	nop
 8009bf0:	20003c10 	.word	0x20003c10

08009bf4 <UG_SetForecolor>:
   gui->console.back_color = c;
}

void UG_SetForecolor( UG_COLOR c )
{
   gui->fore_color = c;
 8009bf4:	4b02      	ldr	r3, [pc, #8]	; (8009c00 <UG_SetForecolor+0xc>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
}
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	20003c10 	.word	0x20003c10

08009c04 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
   gui->back_color = c;
 8009c04:	4b02      	ldr	r3, [pc, #8]	; (8009c10 <UG_SetBackcolor+0xc>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
}
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	20003c10 	.word	0x20003c10

08009c14 <UG_DriverRegister>:
/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8009c14:	2802      	cmp	r0, #2
 8009c16:	d807      	bhi.n	8009c28 <UG_DriverRegister+0x14>

   gui->driver[type].driver = driver;
 8009c18:	4b04      	ldr	r3, [pc, #16]	; (8009c2c <UG_DriverRegister+0x18>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	3009      	adds	r0, #9
 8009c1e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8009c22:	6041      	str	r1, [r0, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8009c24:	2303      	movs	r3, #3
 8009c26:	7203      	strb	r3, [r0, #8]
}
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	20003c10 	.word	0x20003c10

08009c30 <UG_DriverEnable>:

void UG_DriverEnable( UG_U8 type )
{
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8009c30:	2802      	cmp	r0, #2
 8009c32:	d80f      	bhi.n	8009c54 <UG_DriverEnable+0x24>
   if ( gui->driver[type].state & DRIVER_REGISTERED )
 8009c34:	4b08      	ldr	r3, [pc, #32]	; (8009c58 <UG_DriverEnable+0x28>)
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	f100 0309 	add.w	r3, r0, #9
 8009c3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009c40:	7a1b      	ldrb	r3, [r3, #8]
 8009c42:	f013 0f01 	tst.w	r3, #1
 8009c46:	d005      	beq.n	8009c54 <UG_DriverEnable+0x24>
   {
      gui->driver[type].state |= DRIVER_ENABLED;
 8009c48:	3009      	adds	r0, #9
 8009c4a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8009c4e:	f043 0302 	orr.w	r3, r3, #2
 8009c52:	7203      	strb	r3, [r0, #8]
   }
}
 8009c54:	4770      	bx	lr
 8009c56:	bf00      	nop
 8009c58:	20003c10 	.word	0x20003c10

08009c5c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009c5c:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c5e:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8009c62:	b184      	cbz	r4, 8009c86 <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009c64:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8009c68:	b17b      	cbz	r3, 8009c8a <USBD_CDC_EP0_RxReady+0x2e>
 8009c6a:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8009c6e:	28ff      	cmp	r0, #255	; 0xff
 8009c70:	d00d      	beq.n	8009c8e <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8009c78:	4621      	mov	r1, r4
 8009c7a:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8009c7c:	23ff      	movs	r3, #255	; 0xff
 8009c7e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009c82:	2000      	movs	r0, #0
}
 8009c84:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8009c86:	2003      	movs	r0, #3
 8009c88:	e7fc      	b.n	8009c84 <USBD_CDC_EP0_RxReady+0x28>
  return (uint8_t)USBD_OK;
 8009c8a:	2000      	movs	r0, #0
 8009c8c:	e7fa      	b.n	8009c84 <USBD_CDC_EP0_RxReady+0x28>
 8009c8e:	2000      	movs	r0, #0
 8009c90:	e7f8      	b.n	8009c84 <USBD_CDC_EP0_RxReady+0x28>
	...

08009c94 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009c94:	2343      	movs	r3, #67	; 0x43
 8009c96:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8009c98:	4800      	ldr	r0, [pc, #0]	; (8009c9c <USBD_CDC_GetFSCfgDesc+0x8>)
 8009c9a:	4770      	bx	lr
 8009c9c:	20000088 	.word	0x20000088

08009ca0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009ca0:	2343      	movs	r3, #67	; 0x43
 8009ca2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8009ca4:	4800      	ldr	r0, [pc, #0]	; (8009ca8 <USBD_CDC_GetHSCfgDesc+0x8>)
 8009ca6:	4770      	bx	lr
 8009ca8:	200000cc 	.word	0x200000cc

08009cac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009cac:	2343      	movs	r3, #67	; 0x43
 8009cae:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8009cb0:	4800      	ldr	r0, [pc, #0]	; (8009cb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8009cb2:	4770      	bx	lr
 8009cb4:	2000011c 	.word	0x2000011c

08009cb8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009cb8:	230a      	movs	r3, #10
 8009cba:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8009cbc:	4800      	ldr	r0, [pc, #0]	; (8009cc0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8009cbe:	4770      	bx	lr
 8009cc0:	20000110 	.word	0x20000110

08009cc4 <USBD_CDC_DataOut>:
{
 8009cc4:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009cc6:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8009cca:	b175      	cbz	r5, 8009cea <USBD_CDC_DataOut+0x26>
 8009ccc:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009cce:	f001 f8a3 	bl	800ae18 <USBD_LL_GetRxDataSize>
 8009cd2:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009cd6:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8009ce0:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8009ce4:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8009ce6:	2000      	movs	r0, #0
}
 8009ce8:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8009cea:	2003      	movs	r0, #3
 8009cec:	e7fc      	b.n	8009ce8 <USBD_CDC_DataOut+0x24>

08009cee <USBD_CDC_DataIn>:
{
 8009cee:	b510      	push	{r4, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009cf0:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 8009cf4:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8009cf8:	b353      	cbz	r3, 8009d50 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009cfa:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8009cfe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009d02:	6992      	ldr	r2, [r2, #24]
 8009d04:	b14a      	cbz	r2, 8009d1a <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009d06:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8009d0a:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 8009d0e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8009d10:	fbb2 fcf4 	udiv	ip, r2, r4
 8009d14:	fb04 221c 	mls	r2, r4, ip, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009d18:	b172      	cbz	r2, 8009d38 <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009d20:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 8009d24:	6914      	ldr	r4, [r2, #16]
 8009d26:	b1ac      	cbz	r4, 8009d54 <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009d28:	460a      	mov	r2, r1
 8009d2a:	f503 7104 	add.w	r1, r3, #528	; 0x210
 8009d2e:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8009d32:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 8009d34:	2000      	movs	r0, #0
}
 8009d36:	bd10      	pop	{r4, pc}
    pdev->ep_in[epnum].total_length = 0U;
 8009d38:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8009d3c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009d40:	2400      	movs	r4, #0
 8009d42:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009d44:	4623      	mov	r3, r4
 8009d46:	4622      	mov	r2, r4
 8009d48:	f001 f856 	bl	800adf8 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8009d4c:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009d4e:	e7f2      	b.n	8009d36 <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 8009d50:	2003      	movs	r0, #3
 8009d52:	e7f0      	b.n	8009d36 <USBD_CDC_DataIn+0x48>
  return (uint8_t)USBD_OK;
 8009d54:	2000      	movs	r0, #0
 8009d56:	e7ee      	b.n	8009d36 <USBD_CDC_DataIn+0x48>

08009d58 <USBD_CDC_Setup>:
{
 8009d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d5a:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d5c:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8009d60:	2300      	movs	r3, #0
 8009d62:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8009d66:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hcdc == NULL)
 8009d6a:	2e00      	cmp	r6, #0
 8009d6c:	d06c      	beq.n	8009e48 <USBD_CDC_Setup+0xf0>
 8009d6e:	4607      	mov	r7, r0
 8009d70:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d72:	780b      	ldrb	r3, [r1, #0]
 8009d74:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8009d78:	d02a      	beq.n	8009dd0 <USBD_CDC_Setup+0x78>
 8009d7a:	2d20      	cmp	r5, #32
 8009d7c:	d15e      	bne.n	8009e3c <USBD_CDC_Setup+0xe4>
      if (req->wLength != 0U)
 8009d7e:	88ca      	ldrh	r2, [r1, #6]
 8009d80:	b1f2      	cbz	r2, 8009dc0 <USBD_CDC_Setup+0x68>
        if ((req->bmRequest & 0x80U) != 0U)
 8009d82:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009d86:	d00f      	beq.n	8009da8 <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d88:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	4631      	mov	r1, r6
 8009d90:	7860      	ldrb	r0, [r4, #1]
 8009d92:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009d94:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009d96:	2a07      	cmp	r2, #7
 8009d98:	bf28      	it	cs
 8009d9a:	2207      	movcs	r2, #7
 8009d9c:	4631      	mov	r1, r6
 8009d9e:	4638      	mov	r0, r7
 8009da0:	f000 fdd4 	bl	800a94c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8009da4:	2500      	movs	r5, #0
 8009da6:	e04c      	b.n	8009e42 <USBD_CDC_Setup+0xea>
          hcdc->CmdOpCode = req->bRequest;
 8009da8:	784b      	ldrb	r3, [r1, #1]
 8009daa:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009dae:	798b      	ldrb	r3, [r1, #6]
 8009db0:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009db4:	88ca      	ldrh	r2, [r1, #6]
 8009db6:	4631      	mov	r1, r6
 8009db8:	f000 fddd 	bl	800a976 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8009dbc:	2500      	movs	r5, #0
 8009dbe:	e040      	b.n	8009e42 <USBD_CDC_Setup+0xea>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009dc0:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	7848      	ldrb	r0, [r1, #1]
 8009dca:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8009dcc:	2500      	movs	r5, #0
 8009dce:	e038      	b.n	8009e42 <USBD_CDC_Setup+0xea>
      switch (req->bRequest)
 8009dd0:	784e      	ldrb	r6, [r1, #1]
 8009dd2:	2e0b      	cmp	r6, #11
 8009dd4:	d82e      	bhi.n	8009e34 <USBD_CDC_Setup+0xdc>
 8009dd6:	e8df f006 	tbb	[pc, r6]
 8009dda:	3406      	.short	0x3406
 8009ddc:	2d2d2d2d 	.word	0x2d2d2d2d
 8009de0:	2d2d2d2d 	.word	0x2d2d2d2d
 8009de4:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009de6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	2b03      	cmp	r3, #3
 8009dee:	d003      	beq.n	8009df8 <USBD_CDC_Setup+0xa0>
            USBD_CtlError(pdev, req);
 8009df0:	f000 fa72 	bl	800a2d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8009df4:	2503      	movs	r5, #3
 8009df6:	e024      	b.n	8009e42 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009df8:	2202      	movs	r2, #2
 8009dfa:	a901      	add	r1, sp, #4
 8009dfc:	f000 fda6 	bl	800a94c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8009e00:	4635      	mov	r5, r6
 8009e02:	e01e      	b.n	8009e42 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e04:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	2b03      	cmp	r3, #3
 8009e0c:	d003      	beq.n	8009e16 <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 8009e0e:	f000 fa63 	bl	800a2d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e12:	2503      	movs	r5, #3
 8009e14:	e015      	b.n	8009e42 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009e16:	2201      	movs	r2, #1
 8009e18:	f10d 0107 	add.w	r1, sp, #7
 8009e1c:	f000 fd96 	bl	800a94c <USBD_CtlSendData>
 8009e20:	e00f      	b.n	8009e42 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009e22:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	2b03      	cmp	r3, #3
 8009e2a:	d00a      	beq.n	8009e42 <USBD_CDC_Setup+0xea>
            USBD_CtlError(pdev, req);
 8009e2c:	f000 fa54 	bl	800a2d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e30:	2503      	movs	r5, #3
 8009e32:	e006      	b.n	8009e42 <USBD_CDC_Setup+0xea>
          USBD_CtlError(pdev, req);
 8009e34:	f000 fa50 	bl	800a2d8 <USBD_CtlError>
          ret = USBD_FAIL;
 8009e38:	2503      	movs	r5, #3
          break;
 8009e3a:	e002      	b.n	8009e42 <USBD_CDC_Setup+0xea>
      USBD_CtlError(pdev, req);
 8009e3c:	f000 fa4c 	bl	800a2d8 <USBD_CtlError>
      ret = USBD_FAIL;
 8009e40:	2503      	movs	r5, #3
}
 8009e42:	4628      	mov	r0, r5
 8009e44:	b003      	add	sp, #12
 8009e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8009e48:	2503      	movs	r5, #3
 8009e4a:	e7fa      	b.n	8009e42 <USBD_CDC_Setup+0xea>

08009e4c <USBD_CDC_DeInit>:
{
 8009e4c:	b538      	push	{r3, r4, r5, lr}
 8009e4e:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009e50:	2181      	movs	r1, #129	; 0x81
 8009e52:	f000 ff9a 	bl	800ad8a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009e56:	2500      	movs	r5, #0
 8009e58:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009e5a:	2101      	movs	r1, #1
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	f000 ff94 	bl	800ad8a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009e62:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009e66:	2182      	movs	r1, #130	; 0x82
 8009e68:	4620      	mov	r0, r4
 8009e6a:	f000 ff8e 	bl	800ad8a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009e6e:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009e72:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 8009e76:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8009e7a:	b14b      	cbz	r3, 8009e90 <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009e7c:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009e84:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8009e88:	f000 fff4 	bl	800ae74 <USBD_static_free>
    pdev->pClassData = NULL;
 8009e8c:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8009e90:	2000      	movs	r0, #0
 8009e92:	bd38      	pop	{r3, r4, r5, pc}

08009e94 <USBD_CDC_Init>:
{
 8009e94:	b570      	push	{r4, r5, r6, lr}
 8009e96:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009e98:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009e9c:	f000 ffe6 	bl	800ae6c <USBD_static_malloc>
  if (hcdc == NULL)
 8009ea0:	b3b8      	cbz	r0, 8009f12 <USBD_CDC_Init+0x7e>
 8009ea2:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 8009ea4:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ea8:	7c23      	ldrb	r3, [r4, #16]
 8009eaa:	bbbb      	cbnz	r3, 8009f1c <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009eac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009eb0:	2202      	movs	r2, #2
 8009eb2:	2181      	movs	r1, #129	; 0x81
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	f000 ff5d 	bl	800ad74 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009eba:	2501      	movs	r5, #1
 8009ebc:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009ebe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ec2:	2202      	movs	r2, #2
 8009ec4:	4629      	mov	r1, r5
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	f000 ff54 	bl	800ad74 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009ecc:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009ed0:	2310      	movs	r3, #16
 8009ed2:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009ed6:	2308      	movs	r3, #8
 8009ed8:	2203      	movs	r2, #3
 8009eda:	2182      	movs	r1, #130	; 0x82
 8009edc:	4620      	mov	r0, r4
 8009ede:	f000 ff49 	bl	800ad74 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009ee8:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4798      	blx	r3
  hcdc->TxState = 0U;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 8009ef6:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009efa:	7c25      	ldrb	r5, [r4, #16]
 8009efc:	bb15      	cbnz	r5, 8009f44 <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009efe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f02:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8009f06:	2101      	movs	r1, #1
 8009f08:	4620      	mov	r0, r4
 8009f0a:	f000 ff7d 	bl	800ae08 <USBD_LL_PrepareReceive>
}
 8009f0e:	4628      	mov	r0, r5
 8009f10:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 8009f12:	2300      	movs	r3, #0
 8009f14:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009f18:	2502      	movs	r5, #2
 8009f1a:	e7f8      	b.n	8009f0e <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009f1c:	2340      	movs	r3, #64	; 0x40
 8009f1e:	2202      	movs	r2, #2
 8009f20:	2181      	movs	r1, #129	; 0x81
 8009f22:	4620      	mov	r0, r4
 8009f24:	f000 ff26 	bl	800ad74 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009f28:	2501      	movs	r5, #1
 8009f2a:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009f2c:	2340      	movs	r3, #64	; 0x40
 8009f2e:	2202      	movs	r2, #2
 8009f30:	4629      	mov	r1, r5
 8009f32:	4620      	mov	r0, r4
 8009f34:	f000 ff1e 	bl	800ad74 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009f38:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009f3c:	2310      	movs	r3, #16
 8009f3e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8009f42:	e7c8      	b.n	8009ed6 <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009f44:	2340      	movs	r3, #64	; 0x40
 8009f46:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8009f4a:	2101      	movs	r1, #1
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f000 ff5b 	bl	800ae08 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8009f52:	2500      	movs	r5, #0
 8009f54:	e7db      	b.n	8009f0e <USBD_CDC_Init+0x7a>

08009f56 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8009f56:	b119      	cbz	r1, 8009f60 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8009f58:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8009f60:	2003      	movs	r0, #3
}
 8009f62:	4770      	bx	lr

08009f64 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f64:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8009f68:	b12b      	cbz	r3, 8009f76 <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8009f6a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009f6e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009f72:	2000      	movs	r0, #0
 8009f74:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8009f76:	2003      	movs	r0, #3
}
 8009f78:	4770      	bx	lr

08009f7a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f7a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8009f7e:	b11b      	cbz	r3, 8009f88 <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8009f80:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009f84:	2000      	movs	r0, #0
 8009f86:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8009f88:	2003      	movs	r0, #3
}
 8009f8a:	4770      	bx	lr

08009f8c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009f8c:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f8e:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8009f92:	b192      	cbz	r2, 8009fba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f94:	7c04      	ldrb	r4, [r0, #16]
 8009f96:	b944      	cbnz	r4, 8009faa <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009f98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f9c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8009fa0:	2101      	movs	r1, #1
 8009fa2:	f000 ff31 	bl	800ae08 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009faa:	2340      	movs	r3, #64	; 0x40
 8009fac:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8009fb0:	2101      	movs	r1, #1
 8009fb2:	f000 ff29 	bl	800ae08 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8009fb6:	2400      	movs	r4, #0
 8009fb8:	e7f5      	b.n	8009fa6 <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 8009fba:	2403      	movs	r4, #3
 8009fbc:	e7f3      	b.n	8009fa6 <USBD_CDC_ReceivePacket+0x1a>

08009fbe <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009fbe:	b198      	cbz	r0, 8009fe8 <USBD_Init+0x2a>
{
 8009fc0:	b508      	push	{r3, lr}
 8009fc2:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009fca:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009fce:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009fd2:	b109      	cbz	r1, 8009fd8 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8009fd4:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009fd8:	2101      	movs	r1, #1
 8009fda:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8009fde:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f000 fe7b 	bl	800acdc <USBD_LL_Init>

  return ret;
}
 8009fe6:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8009fe8:	2003      	movs	r0, #3
}
 8009fea:	4770      	bx	lr

08009fec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009fec:	b510      	push	{r4, lr}
 8009fee:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8009ff6:	b161      	cbz	r1, 800a012 <USBD_RegisterClass+0x26>
 8009ff8:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009ffa:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009ffe:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800a000:	b14b      	cbz	r3, 800a016 <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a002:	f10d 0006 	add.w	r0, sp, #6
 800a006:	4798      	blx	r3
 800a008:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a00c:	2000      	movs	r0, #0
}
 800a00e:	b002      	add	sp, #8
 800a010:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800a012:	2003      	movs	r0, #3
 800a014:	e7fb      	b.n	800a00e <USBD_RegisterClass+0x22>
  return USBD_OK;
 800a016:	2000      	movs	r0, #0
 800a018:	e7f9      	b.n	800a00e <USBD_RegisterClass+0x22>

0800a01a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a01a:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a01c:	f000 fea2 	bl	800ad64 <USBD_LL_Start>
}
 800a020:	bd08      	pop	{r3, pc}

0800a022 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a022:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800a024:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a028:	b113      	cbz	r3, 800a030 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4798      	blx	r3
  }

  return ret;
}
 800a02e:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a030:	2003      	movs	r0, #3
 800a032:	e7fc      	b.n	800a02e <USBD_SetClassConfig+0xc>

0800a034 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a034:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a036:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a03a:	b10b      	cbz	r3, 800a040 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	4798      	blx	r3
  }

  return USBD_OK;
}
 800a040:	2000      	movs	r0, #0
 800a042:	bd08      	pop	{r3, pc}

0800a044 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a044:	b538      	push	{r3, r4, r5, lr}
 800a046:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a048:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 800a04c:	4628      	mov	r0, r5
 800a04e:	f000 f92f 	bl	800a2b0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a052:	2301      	movs	r3, #1
 800a054:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a058:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800a05c:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a060:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 800a064:	f001 031f 	and.w	r3, r1, #31
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d00d      	beq.n	800a088 <USBD_LL_SetupStage+0x44>
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	d010      	beq.n	800a092 <USBD_LL_SetupStage+0x4e>
 800a070:	b12b      	cbz	r3, 800a07e <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a072:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800a076:	4620      	mov	r0, r4
 800a078:	f000 fe8f 	bl	800ad9a <USBD_LL_StallEP>
      break;
 800a07c:	e003      	b.n	800a086 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a07e:	4629      	mov	r1, r5
 800a080:	4620      	mov	r0, r4
 800a082:	f000 fae4 	bl	800a64e <USBD_StdDevReq>
  }

  return ret;
}
 800a086:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a088:	4629      	mov	r1, r5
 800a08a:	4620      	mov	r0, r4
 800a08c:	f000 fb17 	bl	800a6be <USBD_StdItfReq>
      break;
 800a090:	e7f9      	b.n	800a086 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a092:	4629      	mov	r1, r5
 800a094:	4620      	mov	r0, r4
 800a096:	f000 fb46 	bl	800a726 <USBD_StdEPReq>
      break;
 800a09a:	e7f4      	b.n	800a086 <USBD_LL_SetupStage+0x42>

0800a09c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a09c:	b538      	push	{r3, r4, r5, lr}
 800a09e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a0a0:	460d      	mov	r5, r1
 800a0a2:	bb41      	cbnz	r1, 800a0f6 <USBD_LL_DataOutStage+0x5a>
 800a0a4:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a0a6:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800a0aa:	2a03      	cmp	r2, #3
 800a0ac:	d001      	beq.n	800a0b2 <USBD_LL_DataOutStage+0x16>
        }
      }
    }
  }

  return USBD_OK;
 800a0ae:	4608      	mov	r0, r1
}
 800a0b0:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800a0b2:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 800a0b6:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 800a0ba:	4291      	cmp	r1, r2
 800a0bc:	d809      	bhi.n	800a0d2 <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0be:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	2b03      	cmp	r3, #3
 800a0c6:	d00f      	beq.n	800a0e8 <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	f000 fc6b 	bl	800a9a4 <USBD_CtlSendStatus>
  return USBD_OK;
 800a0ce:	4628      	mov	r0, r5
 800a0d0:	e7ee      	b.n	800a0b0 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800a0d2:	1a89      	subs	r1, r1, r2
 800a0d4:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a0d8:	428a      	cmp	r2, r1
 800a0da:	bf28      	it	cs
 800a0dc:	460a      	movcs	r2, r1
 800a0de:	4619      	mov	r1, r3
 800a0e0:	f000 fc58 	bl	800a994 <USBD_CtlContinueRx>
  return USBD_OK;
 800a0e4:	4628      	mov	r0, r5
 800a0e6:	e7e3      	b.n	800a0b0 <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 800a0e8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a0ec:	691b      	ldr	r3, [r3, #16]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d0ea      	beq.n	800a0c8 <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 800a0f2:	4798      	blx	r3
 800a0f4:	e7e8      	b.n	800a0c8 <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0f6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	2b03      	cmp	r3, #3
 800a0fe:	d001      	beq.n	800a104 <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 800a100:	2000      	movs	r0, #0
 800a102:	e7d5      	b.n	800a0b0 <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 800a104:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a108:	699b      	ldr	r3, [r3, #24]
 800a10a:	b10b      	cbz	r3, 800a110 <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a10c:	4798      	blx	r3
        if (ret != USBD_OK)
 800a10e:	e7cf      	b.n	800a0b0 <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 800a110:	2000      	movs	r0, #0
 800a112:	e7cd      	b.n	800a0b0 <USBD_LL_DataOutStage+0x14>

0800a114 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a114:	b538      	push	{r3, r4, r5, lr}
 800a116:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a118:	460d      	mov	r5, r1
 800a11a:	2900      	cmp	r1, #0
 800a11c:	d14a      	bne.n	800a1b4 <USBD_LL_DataInStage+0xa0>
 800a11e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a120:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800a124:	2a02      	cmp	r2, #2
 800a126:	d005      	beq.n	800a134 <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a128:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d03c      	beq.n	800a1aa <USBD_LL_DataInStage+0x96>
        }
      }
    }
  }

  return USBD_OK;
 800a130:	4628      	mov	r0, r5
}
 800a132:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800a134:	69c2      	ldr	r2, [r0, #28]
 800a136:	6a01      	ldr	r1, [r0, #32]
 800a138:	428a      	cmp	r2, r1
 800a13a:	d80e      	bhi.n	800a15a <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 800a13c:	428a      	cmp	r2, r1
 800a13e:	d018      	beq.n	800a172 <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a140:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800a144:	b2db      	uxtb	r3, r3
 800a146:	2b03      	cmp	r3, #3
 800a148:	d027      	beq.n	800a19a <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a14a:	2180      	movs	r1, #128	; 0x80
 800a14c:	4620      	mov	r0, r4
 800a14e:	f000 fe24 	bl	800ad9a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a152:	4620      	mov	r0, r4
 800a154:	f000 fc31 	bl	800a9ba <USBD_CtlReceiveStatus>
 800a158:	e7e6      	b.n	800a128 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800a15a:	1a52      	subs	r2, r2, r1
 800a15c:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a15e:	4619      	mov	r1, r3
 800a160:	f000 fc01 	bl	800a966 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a164:	2300      	movs	r3, #0
 800a166:	461a      	mov	r2, r3
 800a168:	4619      	mov	r1, r3
 800a16a:	4620      	mov	r0, r4
 800a16c:	f000 fe4c 	bl	800ae08 <USBD_LL_PrepareReceive>
 800a170:	e7da      	b.n	800a128 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 800a172:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800a174:	4299      	cmp	r1, r3
 800a176:	d8e3      	bhi.n	800a140 <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 800a178:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d2df      	bcs.n	800a140 <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a180:	2200      	movs	r2, #0
 800a182:	4611      	mov	r1, r2
 800a184:	f000 fbef 	bl	800a966 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a188:	2100      	movs	r1, #0
 800a18a:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a18e:	460b      	mov	r3, r1
 800a190:	460a      	mov	r2, r1
 800a192:	4620      	mov	r0, r4
 800a194:	f000 fe38 	bl	800ae08 <USBD_LL_PrepareReceive>
 800a198:	e7c6      	b.n	800a128 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 800a19a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d0d2      	beq.n	800a14a <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	4798      	blx	r3
 800a1a8:	e7cf      	b.n	800a14a <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	e7be      	b.n	800a132 <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1b4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	2b03      	cmp	r3, #3
 800a1bc:	d001      	beq.n	800a1c2 <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 800a1be:	2000      	movs	r0, #0
 800a1c0:	e7b7      	b.n	800a132 <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 800a1c2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a1c6:	695b      	ldr	r3, [r3, #20]
 800a1c8:	b10b      	cbz	r3, 800a1ce <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a1ca:	4798      	blx	r3
        if (ret != USBD_OK)
 800a1cc:	e7b1      	b.n	800a132 <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 800a1ce:	2000      	movs	r0, #0
 800a1d0:	e7af      	b.n	800a132 <USBD_LL_DataInStage+0x1e>

0800a1d2 <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800a1de:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800a1e0:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a1e4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a1e8:	b1f3      	cbz	r3, 800a228 <USBD_LL_Reset+0x56>
{
 800a1ea:	b570      	push	{r4, r5, r6, lr}
 800a1ec:	4604      	mov	r4, r0
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800a1ee:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800a1f2:	b11a      	cbz	r2, 800a1fc <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	b10b      	cbz	r3, 800a1fc <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a1fc:	2340      	movs	r3, #64	; 0x40
 800a1fe:	2200      	movs	r2, #0
 800a200:	4611      	mov	r1, r2
 800a202:	4620      	mov	r0, r4
 800a204:	f000 fdb6 	bl	800ad74 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a208:	2601      	movs	r6, #1
 800a20a:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a20e:	2540      	movs	r5, #64	; 0x40
 800a210:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a214:	462b      	mov	r3, r5
 800a216:	2200      	movs	r2, #0
 800a218:	2180      	movs	r1, #128	; 0x80
 800a21a:	4620      	mov	r0, r4
 800a21c:	f000 fdaa 	bl	800ad74 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a220:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a222:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 800a224:	2000      	movs	r0, #0
}
 800a226:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800a228:	2003      	movs	r0, #3
}
 800a22a:	4770      	bx	lr

0800a22c <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800a22c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800a22e:	2000      	movs	r0, #0
 800a230:	4770      	bx	lr

0800a232 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800a232:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a236:	b2db      	uxtb	r3, r3
 800a238:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a23c:	2304      	movs	r3, #4
 800a23e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800a242:	2000      	movs	r0, #0
 800a244:	4770      	bx	lr

0800a246 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a246:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	2b04      	cmp	r3, #4
 800a24e:	d001      	beq.n	800a254 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800a250:	2000      	movs	r0, #0
 800a252:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800a254:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 800a25e:	e7f7      	b.n	800a250 <USBD_LL_Resume+0xa>

0800a260 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800a260:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800a264:	b162      	cbz	r2, 800a280 <USBD_LL_SOF+0x20>
{
 800a266:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a268:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	2b03      	cmp	r3, #3
 800a270:	d001      	beq.n	800a276 <USBD_LL_SOF+0x16>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800a272:	2000      	movs	r0, #0
}
 800a274:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800a276:	69d3      	ldr	r3, [r2, #28]
 800a278:	b123      	cbz	r3, 800a284 <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 800a27a:	4798      	blx	r3
  return USBD_OK;
 800a27c:	2000      	movs	r0, #0
 800a27e:	e7f9      	b.n	800a274 <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 800a280:	2003      	movs	r0, #3
}
 800a282:	4770      	bx	lr
  return USBD_OK;
 800a284:	2000      	movs	r0, #0
 800a286:	e7f5      	b.n	800a274 <USBD_LL_SOF+0x14>

0800a288 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a288:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 800a28a:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800a28c:	e002      	b.n	800a294 <USBD_GetLen+0xc>
  {
    len++;
 800a28e:	3001      	adds	r0, #1
 800a290:	b2c0      	uxtb	r0, r0
    pbuff++;
 800a292:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 800a294:	781a      	ldrb	r2, [r3, #0]
 800a296:	2a00      	cmp	r2, #0
 800a298:	d1f9      	bne.n	800a28e <USBD_GetLen+0x6>
  }

  return len;
}
 800a29a:	4770      	bx	lr

0800a29c <USBD_SetFeature>:
{
 800a29c:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a29e:	884b      	ldrh	r3, [r1, #2]
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d000      	beq.n	800a2a6 <USBD_SetFeature+0xa>
}
 800a2a4:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800a2a6:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a2aa:	f000 fb7b 	bl	800a9a4 <USBD_CtlSendStatus>
}
 800a2ae:	e7f9      	b.n	800a2a4 <USBD_SetFeature+0x8>

0800a2b0 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800a2b0:	780b      	ldrb	r3, [r1, #0]
 800a2b2:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800a2b4:	784b      	ldrb	r3, [r1, #1]
 800a2b6:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 800a2b8:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800a2ba:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a2bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800a2c0:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800a2c2:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 800a2c4:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a2c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800a2ca:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800a2cc:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800a2ce:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a2d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800a2d4:	80c3      	strh	r3, [r0, #6]
}
 800a2d6:	4770      	bx	lr

0800a2d8 <USBD_CtlError>:
{
 800a2d8:	b510      	push	{r4, lr}
 800a2da:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2dc:	2180      	movs	r1, #128	; 0x80
 800a2de:	f000 fd5c 	bl	800ad9a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	f000 fd58 	bl	800ad9a <USBD_LL_StallEP>
}
 800a2ea:	bd10      	pop	{r4, pc}

0800a2ec <USBD_GetDescriptor>:
{
 800a2ec:	b530      	push	{r4, r5, lr}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	460d      	mov	r5, r1
  uint16_t len = 0U;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800a2fa:	884a      	ldrh	r2, [r1, #2]
 800a2fc:	0a13      	lsrs	r3, r2, #8
 800a2fe:	3b01      	subs	r3, #1
 800a300:	2b0e      	cmp	r3, #14
 800a302:	f200 80bc 	bhi.w	800a47e <USBD_GetDescriptor+0x192>
 800a306:	e8df f003 	tbb	[pc, r3]
 800a30a:	3015      	.short	0x3015
 800a30c:	9ebaba44 	.word	0x9ebaba44
 800a310:	bababaab 	.word	0xbababaab
 800a314:	babababa 	.word	0xbabababa
 800a318:	08          	.byte	0x08
 800a319:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a31a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a31e:	69db      	ldr	r3, [r3, #28]
 800a320:	b123      	cbz	r3, 800a32c <USBD_GetDescriptor+0x40>
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a322:	f10d 0106 	add.w	r1, sp, #6
 800a326:	7c00      	ldrb	r0, [r0, #16]
 800a328:	4798      	blx	r3
  if (err != 0U)
 800a32a:	e00a      	b.n	800a342 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800a32c:	4629      	mov	r1, r5
 800a32e:	f7ff ffd3 	bl	800a2d8 <USBD_CtlError>
  if (err != 0U)
 800a332:	e018      	b.n	800a366 <USBD_GetDescriptor+0x7a>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a334:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f10d 0106 	add.w	r1, sp, #6
 800a33e:	7c00      	ldrb	r0, [r0, #16]
 800a340:	4798      	blx	r3
  if (req->wLength != 0U)
 800a342:	88ea      	ldrh	r2, [r5, #6]
 800a344:	2a00      	cmp	r2, #0
 800a346:	f000 80a3 	beq.w	800a490 <USBD_GetDescriptor+0x1a4>
    if (len != 0U)
 800a34a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	f000 8099 	beq.w	800a486 <USBD_GetDescriptor+0x19a>
      len = MIN(len, req->wLength);
 800a354:	429a      	cmp	r2, r3
 800a356:	bf28      	it	cs
 800a358:	461a      	movcs	r2, r3
 800a35a:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a35e:	4601      	mov	r1, r0
 800a360:	4620      	mov	r0, r4
 800a362:	f000 faf3 	bl	800a94c <USBD_CtlSendData>
}
 800a366:	b003      	add	sp, #12
 800a368:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a36a:	7c03      	ldrb	r3, [r0, #16]
 800a36c:	b943      	cbnz	r3, 800a380 <USBD_GetDescriptor+0x94>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a36e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a374:	f10d 0006 	add.w	r0, sp, #6
 800a378:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a37a:	2302      	movs	r3, #2
 800a37c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a37e:	e7e0      	b.n	800a342 <USBD_GetDescriptor+0x56>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a380:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a386:	f10d 0006 	add.w	r0, sp, #6
 800a38a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a38c:	2302      	movs	r3, #2
 800a38e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a390:	e7d7      	b.n	800a342 <USBD_GetDescriptor+0x56>
      switch ((uint8_t)(req->wValue))
 800a392:	b2d2      	uxtb	r2, r2
 800a394:	2a05      	cmp	r2, #5
 800a396:	d852      	bhi.n	800a43e <USBD_GetDescriptor+0x152>
 800a398:	e8df f002 	tbb	[pc, r2]
 800a39c:	2a1d1003 	.word	0x2a1d1003
 800a3a0:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a3a2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	b123      	cbz	r3, 800a3b4 <USBD_GetDescriptor+0xc8>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a3aa:	f10d 0106 	add.w	r1, sp, #6
 800a3ae:	7c00      	ldrb	r0, [r0, #16]
 800a3b0:	4798      	blx	r3
  if (err != 0U)
 800a3b2:	e7c6      	b.n	800a342 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800a3b4:	4629      	mov	r1, r5
 800a3b6:	f7ff ff8f 	bl	800a2d8 <USBD_CtlError>
  if (err != 0U)
 800a3ba:	e7d4      	b.n	800a366 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a3bc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	b123      	cbz	r3, 800a3ce <USBD_GetDescriptor+0xe2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a3c4:	f10d 0106 	add.w	r1, sp, #6
 800a3c8:	7c00      	ldrb	r0, [r0, #16]
 800a3ca:	4798      	blx	r3
  if (err != 0U)
 800a3cc:	e7b9      	b.n	800a342 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800a3ce:	4629      	mov	r1, r5
 800a3d0:	f7ff ff82 	bl	800a2d8 <USBD_CtlError>
  if (err != 0U)
 800a3d4:	e7c7      	b.n	800a366 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a3d6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	b123      	cbz	r3, 800a3e8 <USBD_GetDescriptor+0xfc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a3de:	f10d 0106 	add.w	r1, sp, #6
 800a3e2:	7c00      	ldrb	r0, [r0, #16]
 800a3e4:	4798      	blx	r3
  if (err != 0U)
 800a3e6:	e7ac      	b.n	800a342 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800a3e8:	4629      	mov	r1, r5
 800a3ea:	f7ff ff75 	bl	800a2d8 <USBD_CtlError>
  if (err != 0U)
 800a3ee:	e7ba      	b.n	800a366 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a3f0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a3f4:	691b      	ldr	r3, [r3, #16]
 800a3f6:	b123      	cbz	r3, 800a402 <USBD_GetDescriptor+0x116>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a3f8:	f10d 0106 	add.w	r1, sp, #6
 800a3fc:	7c00      	ldrb	r0, [r0, #16]
 800a3fe:	4798      	blx	r3
  if (err != 0U)
 800a400:	e79f      	b.n	800a342 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800a402:	4629      	mov	r1, r5
 800a404:	f7ff ff68 	bl	800a2d8 <USBD_CtlError>
  if (err != 0U)
 800a408:	e7ad      	b.n	800a366 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a40a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a40e:	695b      	ldr	r3, [r3, #20]
 800a410:	b123      	cbz	r3, 800a41c <USBD_GetDescriptor+0x130>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a412:	f10d 0106 	add.w	r1, sp, #6
 800a416:	7c00      	ldrb	r0, [r0, #16]
 800a418:	4798      	blx	r3
  if (err != 0U)
 800a41a:	e792      	b.n	800a342 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800a41c:	4629      	mov	r1, r5
 800a41e:	f7ff ff5b 	bl	800a2d8 <USBD_CtlError>
  if (err != 0U)
 800a422:	e7a0      	b.n	800a366 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a424:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800a428:	699b      	ldr	r3, [r3, #24]
 800a42a:	b123      	cbz	r3, 800a436 <USBD_GetDescriptor+0x14a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a42c:	f10d 0106 	add.w	r1, sp, #6
 800a430:	7c00      	ldrb	r0, [r0, #16]
 800a432:	4798      	blx	r3
  if (err != 0U)
 800a434:	e785      	b.n	800a342 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800a436:	4629      	mov	r1, r5
 800a438:	f7ff ff4e 	bl	800a2d8 <USBD_CtlError>
  if (err != 0U)
 800a43c:	e793      	b.n	800a366 <USBD_GetDescriptor+0x7a>
          USBD_CtlError(pdev, req);
 800a43e:	4629      	mov	r1, r5
 800a440:	f7ff ff4a 	bl	800a2d8 <USBD_CtlError>
  if (err != 0U)
 800a444:	e78f      	b.n	800a366 <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a446:	7c03      	ldrb	r3, [r0, #16]
 800a448:	b933      	cbnz	r3, 800a458 <USBD_GetDescriptor+0x16c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a44a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a44e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a450:	f10d 0006 	add.w	r0, sp, #6
 800a454:	4798      	blx	r3
  if (err != 0U)
 800a456:	e774      	b.n	800a342 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800a458:	4629      	mov	r1, r5
 800a45a:	f7ff ff3d 	bl	800a2d8 <USBD_CtlError>
  if (err != 0U)
 800a45e:	e782      	b.n	800a366 <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a460:	7c03      	ldrb	r3, [r0, #16]
 800a462:	b943      	cbnz	r3, 800a476 <USBD_GetDescriptor+0x18a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a464:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a46a:	f10d 0006 	add.w	r0, sp, #6
 800a46e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a470:	2307      	movs	r3, #7
 800a472:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a474:	e765      	b.n	800a342 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800a476:	4629      	mov	r1, r5
 800a478:	f7ff ff2e 	bl	800a2d8 <USBD_CtlError>
  if (err != 0U)
 800a47c:	e773      	b.n	800a366 <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 800a47e:	4629      	mov	r1, r5
 800a480:	f7ff ff2a 	bl	800a2d8 <USBD_CtlError>
    return;
 800a484:	e76f      	b.n	800a366 <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 800a486:	4629      	mov	r1, r5
 800a488:	4620      	mov	r0, r4
 800a48a:	f7ff ff25 	bl	800a2d8 <USBD_CtlError>
 800a48e:	e76a      	b.n	800a366 <USBD_GetDescriptor+0x7a>
    (void)USBD_CtlSendStatus(pdev);
 800a490:	4620      	mov	r0, r4
 800a492:	f000 fa87 	bl	800a9a4 <USBD_CtlSendStatus>
 800a496:	e766      	b.n	800a366 <USBD_GetDescriptor+0x7a>

0800a498 <USBD_SetAddress>:
{
 800a498:	b538      	push	{r3, r4, r5, lr}
 800a49a:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a49c:	888b      	ldrh	r3, [r1, #4]
 800a49e:	b9fb      	cbnz	r3, 800a4e0 <USBD_SetAddress+0x48>
 800a4a0:	88cb      	ldrh	r3, [r1, #6]
 800a4a2:	b9eb      	cbnz	r3, 800a4e0 <USBD_SetAddress+0x48>
 800a4a4:	884b      	ldrh	r3, [r1, #2]
 800a4a6:	2b7f      	cmp	r3, #127	; 0x7f
 800a4a8:	d81a      	bhi.n	800a4e0 <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a4aa:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4ae:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	2b03      	cmp	r3, #3
 800a4b6:	d00c      	beq.n	800a4d2 <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 800a4b8:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a4bc:	4629      	mov	r1, r5
 800a4be:	f000 fc93 	bl	800ade8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	f000 fa6e 	bl	800a9a4 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800a4c8:	b135      	cbz	r5, 800a4d8 <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4ca:	2302      	movs	r3, #2
 800a4cc:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800a4d0:	e009      	b.n	800a4e6 <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 800a4d2:	f7ff ff01 	bl	800a2d8 <USBD_CtlError>
 800a4d6:	e006      	b.n	800a4e6 <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800a4de:	e002      	b.n	800a4e6 <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	f7ff fef9 	bl	800a2d8 <USBD_CtlError>
}
 800a4e6:	bd38      	pop	{r3, r4, r5, pc}

0800a4e8 <USBD_SetConfig>:
{
 800a4e8:	b570      	push	{r4, r5, r6, lr}
 800a4ea:	4604      	mov	r4, r0
 800a4ec:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800a4ee:	788d      	ldrb	r5, [r1, #2]
 800a4f0:	4b2e      	ldr	r3, [pc, #184]	; (800a5ac <USBD_SetConfig+0xc4>)
 800a4f2:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a4f4:	2d01      	cmp	r5, #1
 800a4f6:	d810      	bhi.n	800a51a <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 800a4f8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	d00f      	beq.n	800a522 <USBD_SetConfig+0x3a>
 800a502:	2b03      	cmp	r3, #3
 800a504:	d023      	beq.n	800a54e <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 800a506:	f7ff fee7 	bl	800a2d8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a50a:	4b28      	ldr	r3, [pc, #160]	; (800a5ac <USBD_SetConfig+0xc4>)
 800a50c:	7819      	ldrb	r1, [r3, #0]
 800a50e:	4620      	mov	r0, r4
 800a510:	f7ff fd90 	bl	800a034 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a514:	2503      	movs	r5, #3
}
 800a516:	4628      	mov	r0, r5
 800a518:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800a51a:	f7ff fedd 	bl	800a2d8 <USBD_CtlError>
    return USBD_FAIL;
 800a51e:	2503      	movs	r5, #3
 800a520:	e7f9      	b.n	800a516 <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 800a522:	b18d      	cbz	r5, 800a548 <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 800a524:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a526:	4629      	mov	r1, r5
 800a528:	f7ff fd7b 	bl	800a022 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800a52c:	4605      	mov	r5, r0
 800a52e:	b120      	cbz	r0, 800a53a <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 800a530:	4631      	mov	r1, r6
 800a532:	4620      	mov	r0, r4
 800a534:	f7ff fed0 	bl	800a2d8 <USBD_CtlError>
 800a538:	e7ed      	b.n	800a516 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800a53a:	4620      	mov	r0, r4
 800a53c:	f000 fa32 	bl	800a9a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a540:	2303      	movs	r3, #3
 800a542:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800a546:	e7e6      	b.n	800a516 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800a548:	f000 fa2c 	bl	800a9a4 <USBD_CtlSendStatus>
 800a54c:	e7e3      	b.n	800a516 <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 800a54e:	b1cd      	cbz	r5, 800a584 <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 800a550:	6841      	ldr	r1, [r0, #4]
 800a552:	428d      	cmp	r5, r1
 800a554:	d025      	beq.n	800a5a2 <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a556:	b2c9      	uxtb	r1, r1
 800a558:	f7ff fd6c 	bl	800a034 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a55c:	4b13      	ldr	r3, [pc, #76]	; (800a5ac <USBD_SetConfig+0xc4>)
 800a55e:	7819      	ldrb	r1, [r3, #0]
 800a560:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a562:	4620      	mov	r0, r4
 800a564:	f7ff fd5d 	bl	800a022 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800a568:	4605      	mov	r5, r0
 800a56a:	b1b0      	cbz	r0, 800a59a <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 800a56c:	4631      	mov	r1, r6
 800a56e:	4620      	mov	r0, r4
 800a570:	f7ff feb2 	bl	800a2d8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a574:	7921      	ldrb	r1, [r4, #4]
 800a576:	4620      	mov	r0, r4
 800a578:	f7ff fd5c 	bl	800a034 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a57c:	2302      	movs	r3, #2
 800a57e:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800a582:	e7c8      	b.n	800a516 <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a584:	2302      	movs	r3, #2
 800a586:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a58a:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a58c:	4629      	mov	r1, r5
 800a58e:	f7ff fd51 	bl	800a034 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a592:	4620      	mov	r0, r4
 800a594:	f000 fa06 	bl	800a9a4 <USBD_CtlSendStatus>
 800a598:	e7bd      	b.n	800a516 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800a59a:	4620      	mov	r0, r4
 800a59c:	f000 fa02 	bl	800a9a4 <USBD_CtlSendStatus>
 800a5a0:	e7b9      	b.n	800a516 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800a5a2:	f000 f9ff 	bl	800a9a4 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800a5a6:	2500      	movs	r5, #0
 800a5a8:	e7b5      	b.n	800a516 <USBD_SetConfig+0x2e>
 800a5aa:	bf00      	nop
 800a5ac:	20003c14 	.word	0x20003c14

0800a5b0 <USBD_GetConfig>:
{
 800a5b0:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800a5b2:	88cb      	ldrh	r3, [r1, #6]
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d10b      	bne.n	800a5d0 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 800a5b8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	2b02      	cmp	r3, #2
 800a5c0:	d909      	bls.n	800a5d6 <USBD_GetConfig+0x26>
 800a5c2:	2b03      	cmp	r3, #3
 800a5c4:	d109      	bne.n	800a5da <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	1d01      	adds	r1, r0, #4
 800a5ca:	f000 f9bf 	bl	800a94c <USBD_CtlSendData>
        break;
 800a5ce:	e001      	b.n	800a5d4 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 800a5d0:	f7ff fe82 	bl	800a2d8 <USBD_CtlError>
}
 800a5d4:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800a5d6:	b25b      	sxtb	r3, r3
 800a5d8:	b913      	cbnz	r3, 800a5e0 <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 800a5da:	f7ff fe7d 	bl	800a2d8 <USBD_CtlError>
}
 800a5de:	e7f9      	b.n	800a5d4 <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 800a5e0:	4601      	mov	r1, r0
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	f000 f9af 	bl	800a94c <USBD_CtlSendData>
        break;
 800a5ee:	e7f1      	b.n	800a5d4 <USBD_GetConfig+0x24>

0800a5f0 <USBD_GetStatus>:
{
 800a5f0:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800a5f2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a5f6:	3b01      	subs	r3, #1
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	d812      	bhi.n	800a622 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 800a5fc:	88cb      	ldrh	r3, [r1, #6]
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d10c      	bne.n	800a61c <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a602:	2301      	movs	r3, #1
 800a604:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800a606:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800a60a:	b10b      	cbz	r3, 800a610 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a60c:	2303      	movs	r3, #3
 800a60e:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a610:	2202      	movs	r2, #2
 800a612:	f100 010c 	add.w	r1, r0, #12
 800a616:	f000 f999 	bl	800a94c <USBD_CtlSendData>
}
 800a61a:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 800a61c:	f7ff fe5c 	bl	800a2d8 <USBD_CtlError>
        break;
 800a620:	e7fb      	b.n	800a61a <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800a622:	f7ff fe59 	bl	800a2d8 <USBD_CtlError>
}
 800a626:	e7f8      	b.n	800a61a <USBD_GetStatus+0x2a>

0800a628 <USBD_ClrFeature>:
{
 800a628:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800a62a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a62e:	3b01      	subs	r3, #1
 800a630:	2b02      	cmp	r3, #2
 800a632:	d809      	bhi.n	800a648 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a634:	884b      	ldrh	r3, [r1, #2]
 800a636:	2b01      	cmp	r3, #1
 800a638:	d000      	beq.n	800a63c <USBD_ClrFeature+0x14>
}
 800a63a:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800a63c:	2300      	movs	r3, #0
 800a63e:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a642:	f000 f9af 	bl	800a9a4 <USBD_CtlSendStatus>
 800a646:	e7f8      	b.n	800a63a <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800a648:	f7ff fe46 	bl	800a2d8 <USBD_CtlError>
}
 800a64c:	e7f5      	b.n	800a63a <USBD_ClrFeature+0x12>

0800a64e <USBD_StdDevReq>:
{
 800a64e:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a650:	780c      	ldrb	r4, [r1, #0]
 800a652:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800a656:	2c20      	cmp	r4, #32
 800a658:	d006      	beq.n	800a668 <USBD_StdDevReq+0x1a>
 800a65a:	2c40      	cmp	r4, #64	; 0x40
 800a65c:	d004      	beq.n	800a668 <USBD_StdDevReq+0x1a>
 800a65e:	b154      	cbz	r4, 800a676 <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 800a660:	f7ff fe3a 	bl	800a2d8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a664:	2400      	movs	r4, #0
      break;
 800a666:	e004      	b.n	800a672 <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a668:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	4798      	blx	r3
 800a670:	4604      	mov	r4, r0
}
 800a672:	4620      	mov	r0, r4
 800a674:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800a676:	784d      	ldrb	r5, [r1, #1]
 800a678:	2d09      	cmp	r5, #9
 800a67a:	d81d      	bhi.n	800a6b8 <USBD_StdDevReq+0x6a>
 800a67c:	e8df f005 	tbb	[pc, r5]
 800a680:	161c1912 	.word	0x161c1912
 800a684:	1c05081c 	.word	0x1c05081c
 800a688:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 800a68a:	f7ff fe2f 	bl	800a2ec <USBD_GetDescriptor>
          break;
 800a68e:	e7f0      	b.n	800a672 <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 800a690:	f7ff ff02 	bl	800a498 <USBD_SetAddress>
          break;
 800a694:	e7ed      	b.n	800a672 <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 800a696:	f7ff ff27 	bl	800a4e8 <USBD_SetConfig>
 800a69a:	4604      	mov	r4, r0
          break;
 800a69c:	e7e9      	b.n	800a672 <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 800a69e:	f7ff ff87 	bl	800a5b0 <USBD_GetConfig>
          break;
 800a6a2:	e7e6      	b.n	800a672 <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 800a6a4:	f7ff ffa4 	bl	800a5f0 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800a6a8:	462c      	mov	r4, r5
          break;
 800a6aa:	e7e2      	b.n	800a672 <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 800a6ac:	f7ff fdf6 	bl	800a29c <USBD_SetFeature>
          break;
 800a6b0:	e7df      	b.n	800a672 <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 800a6b2:	f7ff ffb9 	bl	800a628 <USBD_ClrFeature>
          break;
 800a6b6:	e7dc      	b.n	800a672 <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 800a6b8:	f7ff fe0e 	bl	800a2d8 <USBD_CtlError>
          break;
 800a6bc:	e7d9      	b.n	800a672 <USBD_StdDevReq+0x24>

0800a6be <USBD_StdItfReq>:
{
 800a6be:	b570      	push	{r4, r5, r6, lr}
 800a6c0:	4605      	mov	r5, r0
 800a6c2:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6c4:	780b      	ldrb	r3, [r1, #0]
 800a6c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6ca:	2b20      	cmp	r3, #32
 800a6cc:	d007      	beq.n	800a6de <USBD_StdItfReq+0x20>
 800a6ce:	2b40      	cmp	r3, #64	; 0x40
 800a6d0:	d005      	beq.n	800a6de <USBD_StdItfReq+0x20>
 800a6d2:	b123      	cbz	r3, 800a6de <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800a6d4:	f7ff fe00 	bl	800a2d8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a6d8:	2600      	movs	r6, #0
}
 800a6da:	4630      	mov	r0, r6
 800a6dc:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800a6de:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	2b02      	cmp	r3, #2
 800a6e6:	d818      	bhi.n	800a71a <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a6e8:	7923      	ldrb	r3, [r4, #4]
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d80f      	bhi.n	800a70e <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a6ee:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	4621      	mov	r1, r4
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	4798      	blx	r3
 800a6fa:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a6fc:	88e3      	ldrh	r3, [r4, #6]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d1eb      	bne.n	800a6da <USBD_StdItfReq+0x1c>
 800a702:	2800      	cmp	r0, #0
 800a704:	d1e9      	bne.n	800a6da <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800a706:	4628      	mov	r0, r5
 800a708:	f000 f94c 	bl	800a9a4 <USBD_CtlSendStatus>
 800a70c:	e7e5      	b.n	800a6da <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 800a70e:	4621      	mov	r1, r4
 800a710:	4628      	mov	r0, r5
 800a712:	f7ff fde1 	bl	800a2d8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a716:	2600      	movs	r6, #0
 800a718:	e7df      	b.n	800a6da <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 800a71a:	4621      	mov	r1, r4
 800a71c:	4628      	mov	r0, r5
 800a71e:	f7ff fddb 	bl	800a2d8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a722:	2600      	movs	r6, #0
          break;
 800a724:	e7d9      	b.n	800a6da <USBD_StdItfReq+0x1c>

0800a726 <USBD_StdEPReq>:
{
 800a726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a728:	4606      	mov	r6, r0
 800a72a:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800a72c:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a72e:	780c      	ldrb	r4, [r1, #0]
 800a730:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800a734:	2c20      	cmp	r4, #32
 800a736:	d008      	beq.n	800a74a <USBD_StdEPReq+0x24>
 800a738:	b2d9      	uxtb	r1, r3
 800a73a:	2c40      	cmp	r4, #64	; 0x40
 800a73c:	d005      	beq.n	800a74a <USBD_StdEPReq+0x24>
 800a73e:	b16c      	cbz	r4, 800a75c <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 800a740:	4629      	mov	r1, r5
 800a742:	f7ff fdc9 	bl	800a2d8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a746:	2400      	movs	r4, #0
      break;
 800a748:	e006      	b.n	800a758 <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a74a:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	4629      	mov	r1, r5
 800a752:	4630      	mov	r0, r6
 800a754:	4798      	blx	r3
 800a756:	4604      	mov	r4, r0
}
 800a758:	4620      	mov	r0, r4
 800a75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 800a75c:	786f      	ldrb	r7, [r5, #1]
 800a75e:	2f01      	cmp	r7, #1
 800a760:	d02f      	beq.n	800a7c2 <USBD_StdEPReq+0x9c>
 800a762:	2f03      	cmp	r7, #3
 800a764:	d005      	beq.n	800a772 <USBD_StdEPReq+0x4c>
 800a766:	2f00      	cmp	r7, #0
 800a768:	d059      	beq.n	800a81e <USBD_StdEPReq+0xf8>
          USBD_CtlError(pdev, req);
 800a76a:	4629      	mov	r1, r5
 800a76c:	f7ff fdb4 	bl	800a2d8 <USBD_CtlError>
          break;
 800a770:	e7f2      	b.n	800a758 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 800a772:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a776:	b2db      	uxtb	r3, r3
 800a778:	2b02      	cmp	r3, #2
 800a77a:	d005      	beq.n	800a788 <USBD_StdEPReq+0x62>
 800a77c:	2b03      	cmp	r3, #3
 800a77e:	d012      	beq.n	800a7a6 <USBD_StdEPReq+0x80>
              USBD_CtlError(pdev, req);
 800a780:	4629      	mov	r1, r5
 800a782:	f7ff fda9 	bl	800a2d8 <USBD_CtlError>
              break;
 800a786:	e7e7      	b.n	800a758 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a788:	b109      	cbz	r1, 800a78e <USBD_StdEPReq+0x68>
 800a78a:	2980      	cmp	r1, #128	; 0x80
 800a78c:	d104      	bne.n	800a798 <USBD_StdEPReq+0x72>
                USBD_CtlError(pdev, req);
 800a78e:	4629      	mov	r1, r5
 800a790:	4630      	mov	r0, r6
 800a792:	f7ff fda1 	bl	800a2d8 <USBD_CtlError>
 800a796:	e7df      	b.n	800a758 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a798:	f000 faff 	bl	800ad9a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a79c:	2180      	movs	r1, #128	; 0x80
 800a79e:	4630      	mov	r0, r6
 800a7a0:	f000 fafb 	bl	800ad9a <USBD_LL_StallEP>
 800a7a4:	e7d8      	b.n	800a758 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a7a6:	886b      	ldrh	r3, [r5, #2]
 800a7a8:	b923      	cbnz	r3, 800a7b4 <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a7aa:	b119      	cbz	r1, 800a7b4 <USBD_StdEPReq+0x8e>
 800a7ac:	2980      	cmp	r1, #128	; 0x80
 800a7ae:	d001      	beq.n	800a7b4 <USBD_StdEPReq+0x8e>
 800a7b0:	88eb      	ldrh	r3, [r5, #6]
 800a7b2:	b11b      	cbz	r3, 800a7bc <USBD_StdEPReq+0x96>
              (void)USBD_CtlSendStatus(pdev);
 800a7b4:	4630      	mov	r0, r6
 800a7b6:	f000 f8f5 	bl	800a9a4 <USBD_CtlSendStatus>
              break;
 800a7ba:	e7cd      	b.n	800a758 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7bc:	f000 faed 	bl	800ad9a <USBD_LL_StallEP>
 800a7c0:	e7f8      	b.n	800a7b4 <USBD_StdEPReq+0x8e>
          switch (pdev->dev_state)
 800a7c2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	2b02      	cmp	r3, #2
 800a7ca:	d005      	beq.n	800a7d8 <USBD_StdEPReq+0xb2>
 800a7cc:	2b03      	cmp	r3, #3
 800a7ce:	d012      	beq.n	800a7f6 <USBD_StdEPReq+0xd0>
              USBD_CtlError(pdev, req);
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	f7ff fd81 	bl	800a2d8 <USBD_CtlError>
              break;
 800a7d6:	e7bf      	b.n	800a758 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7d8:	b109      	cbz	r1, 800a7de <USBD_StdEPReq+0xb8>
 800a7da:	2980      	cmp	r1, #128	; 0x80
 800a7dc:	d104      	bne.n	800a7e8 <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 800a7de:	4629      	mov	r1, r5
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	f7ff fd79 	bl	800a2d8 <USBD_CtlError>
 800a7e6:	e7b7      	b.n	800a758 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7e8:	f000 fad7 	bl	800ad9a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7ec:	2180      	movs	r1, #128	; 0x80
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	f000 fad3 	bl	800ad9a <USBD_LL_StallEP>
 800a7f4:	e7b0      	b.n	800a758 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a7f6:	886b      	ldrh	r3, [r5, #2]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d1ad      	bne.n	800a758 <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 800a7fc:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 800a800:	d10a      	bne.n	800a818 <USBD_StdEPReq+0xf2>
                (void)USBD_CtlSendStatus(pdev);
 800a802:	4630      	mov	r0, r6
 800a804:	f000 f8ce 	bl	800a9a4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a808:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	4629      	mov	r1, r5
 800a810:	4630      	mov	r0, r6
 800a812:	4798      	blx	r3
 800a814:	4604      	mov	r4, r0
 800a816:	e79f      	b.n	800a758 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a818:	f000 fac7 	bl	800adaa <USBD_LL_ClearStallEP>
 800a81c:	e7f1      	b.n	800a802 <USBD_StdEPReq+0xdc>
          switch (pdev->dev_state)
 800a81e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800a822:	b2d2      	uxtb	r2, r2
 800a824:	2a02      	cmp	r2, #2
 800a826:	d006      	beq.n	800a836 <USBD_StdEPReq+0x110>
 800a828:	2a03      	cmp	r2, #3
 800a82a:	d029      	beq.n	800a880 <USBD_StdEPReq+0x15a>
              USBD_CtlError(pdev, req);
 800a82c:	4629      	mov	r1, r5
 800a82e:	f7ff fd53 	bl	800a2d8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a832:	463c      	mov	r4, r7
              break;
 800a834:	e790      	b.n	800a758 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a836:	b109      	cbz	r1, 800a83c <USBD_StdEPReq+0x116>
 800a838:	2980      	cmp	r1, #128	; 0x80
 800a83a:	d113      	bne.n	800a864 <USBD_StdEPReq+0x13e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a83c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a840:	d115      	bne.n	800a86e <USBD_StdEPReq+0x148>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a842:	f001 017f 	and.w	r1, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a846:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a84a:	0089      	lsls	r1, r1, #2
 800a84c:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 800a850:	4431      	add	r1, r6
 800a852:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800a854:	2300      	movs	r3, #0
 800a856:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a858:	2202      	movs	r2, #2
 800a85a:	4630      	mov	r0, r6
 800a85c:	f000 f876 	bl	800a94c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a860:	463c      	mov	r4, r7
              break;
 800a862:	e779      	b.n	800a758 <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 800a864:	4629      	mov	r1, r5
 800a866:	f7ff fd37 	bl	800a2d8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a86a:	463c      	mov	r4, r7
                break;
 800a86c:	e774      	b.n	800a758 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a86e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800a872:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a876:	0089      	lsls	r1, r1, #2
 800a878:	3110      	adds	r1, #16
 800a87a:	4431      	add	r1, r6
 800a87c:	3104      	adds	r1, #4
 800a87e:	e7e9      	b.n	800a854 <USBD_StdEPReq+0x12e>
              if ((ep_addr & 0x80U) == 0x80U)
 800a880:	b25b      	sxtb	r3, r3
 800a882:	2b00      	cmp	r3, #0
 800a884:	db1f      	blt.n	800a8c6 <USBD_StdEPReq+0x1a0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a886:	f001 020f 	and.w	r2, r1, #15
 800a88a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a88e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a892:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 800a896:	b322      	cbz	r2, 800a8e2 <USBD_StdEPReq+0x1bc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a898:	2b00      	cmp	r3, #0
 800a89a:	db27      	blt.n	800a8ec <USBD_StdEPReq+0x1c6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a89c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a8a4:	009c      	lsls	r4, r3, #2
 800a8a6:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 800a8aa:	4434      	add	r4, r6
 800a8ac:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a8ae:	b109      	cbz	r1, 800a8b4 <USBD_StdEPReq+0x18e>
 800a8b0:	2980      	cmp	r1, #128	; 0x80
 800a8b2:	d124      	bne.n	800a8fe <USBD_StdEPReq+0x1d8>
                pep->status = 0x0000U;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a8b8:	2202      	movs	r2, #2
 800a8ba:	4621      	mov	r1, r4
 800a8bc:	4630      	mov	r0, r6
 800a8be:	f000 f845 	bl	800a94c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a8c2:	463c      	mov	r4, r7
              break;
 800a8c4:	e748      	b.n	800a758 <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a8c6:	f001 020f 	and.w	r2, r1, #15
 800a8ca:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a8ce:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a8d2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800a8d4:	2a00      	cmp	r2, #0
 800a8d6:	d1df      	bne.n	800a898 <USBD_StdEPReq+0x172>
                  USBD_CtlError(pdev, req);
 800a8d8:	4629      	mov	r1, r5
 800a8da:	f7ff fcfd 	bl	800a2d8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a8de:	463c      	mov	r4, r7
                  break;
 800a8e0:	e73a      	b.n	800a758 <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 800a8e2:	4629      	mov	r1, r5
 800a8e4:	f7ff fcf8 	bl	800a2d8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a8e8:	463c      	mov	r4, r7
                  break;
 800a8ea:	e735      	b.n	800a758 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8ec:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800a8f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a8f4:	009c      	lsls	r4, r3, #2
 800a8f6:	3410      	adds	r4, #16
 800a8f8:	4434      	add	r4, r6
 800a8fa:	3404      	adds	r4, #4
 800a8fc:	e7d7      	b.n	800a8ae <USBD_StdEPReq+0x188>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a8fe:	4630      	mov	r0, r6
 800a900:	f000 fa5b 	bl	800adba <USBD_LL_IsStallEP>
 800a904:	b110      	cbz	r0, 800a90c <USBD_StdEPReq+0x1e6>
                pep->status = 0x0001U;
 800a906:	2301      	movs	r3, #1
 800a908:	6023      	str	r3, [r4, #0]
 800a90a:	e7d5      	b.n	800a8b8 <USBD_StdEPReq+0x192>
                pep->status = 0x0000U;
 800a90c:	2300      	movs	r3, #0
 800a90e:	6023      	str	r3, [r4, #0]
 800a910:	e7d2      	b.n	800a8b8 <USBD_StdEPReq+0x192>

0800a912 <USBD_GetString>:
  if (desc == NULL)
 800a912:	b1d0      	cbz	r0, 800a94a <USBD_GetString+0x38>
{
 800a914:	b570      	push	{r4, r5, r6, lr}
 800a916:	460d      	mov	r5, r1
 800a918:	4616      	mov	r6, r2
 800a91a:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a91c:	f7ff fcb4 	bl	800a288 <USBD_GetLen>
 800a920:	1c43      	adds	r3, r0, #1
 800a922:	005b      	lsls	r3, r3, #1
 800a924:	b29b      	uxth	r3, r3
 800a926:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800a928:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a92a:	2303      	movs	r3, #3
 800a92c:	706b      	strb	r3, [r5, #1]
  idx++;
 800a92e:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800a930:	e007      	b.n	800a942 <USBD_GetString+0x30>
    unicode[idx] = *pdesc;
 800a932:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 800a934:	3401      	adds	r4, #1
    idx++;
 800a936:	1c5a      	adds	r2, r3, #1
 800a938:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800a93a:	2100      	movs	r1, #0
 800a93c:	54a9      	strb	r1, [r5, r2]
    idx++;
 800a93e:	3302      	adds	r3, #2
 800a940:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800a942:	7822      	ldrb	r2, [r4, #0]
 800a944:	2a00      	cmp	r2, #0
 800a946:	d1f4      	bne.n	800a932 <USBD_GetString+0x20>
}
 800a948:	bd70      	pop	{r4, r5, r6, pc}
 800a94a:	4770      	bx	lr

0800a94c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a94c:	b508      	push	{r3, lr}
 800a94e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a950:	2202      	movs	r2, #2
 800a952:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a956:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a958:	61c3      	str	r3, [r0, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a95a:	460a      	mov	r2, r1
 800a95c:	2100      	movs	r1, #0
 800a95e:	f000 fa4b 	bl	800adf8 <USBD_LL_Transmit>

  return USBD_OK;
}
 800a962:	2000      	movs	r0, #0
 800a964:	bd08      	pop	{r3, pc}

0800a966 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a966:	b508      	push	{r3, lr}
 800a968:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a96a:	460a      	mov	r2, r1
 800a96c:	2100      	movs	r1, #0
 800a96e:	f000 fa43 	bl	800adf8 <USBD_LL_Transmit>

  return USBD_OK;
}
 800a972:	2000      	movs	r0, #0
 800a974:	bd08      	pop	{r3, pc}

0800a976 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a976:	b508      	push	{r3, lr}
 800a978:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a97a:	2203      	movs	r2, #3
 800a97c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a980:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a984:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a988:	460a      	mov	r2, r1
 800a98a:	2100      	movs	r1, #0
 800a98c:	f000 fa3c 	bl	800ae08 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800a990:	2000      	movs	r0, #0
 800a992:	bd08      	pop	{r3, pc}

0800a994 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a994:	b508      	push	{r3, lr}
 800a996:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a998:	460a      	mov	r2, r1
 800a99a:	2100      	movs	r1, #0
 800a99c:	f000 fa34 	bl	800ae08 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	bd08      	pop	{r3, pc}

0800a9a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a9a4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a9a6:	2204      	movs	r2, #4
 800a9a8:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	f000 fa21 	bl	800adf8 <USBD_LL_Transmit>

  return USBD_OK;
}
 800a9b6:	2000      	movs	r0, #0
 800a9b8:	bd08      	pop	{r3, pc}

0800a9ba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a9ba:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a9bc:	2205      	movs	r2, #5
 800a9be:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	f000 fa1e 	bl	800ae08 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800a9cc:	2000      	movs	r0, #0
 800a9ce:	bd08      	pop	{r3, pc}

0800a9d0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a9d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	490f      	ldr	r1, [pc, #60]	; (800aa14 <MX_USB_Device_Init+0x44>)
 800a9d6:	4810      	ldr	r0, [pc, #64]	; (800aa18 <MX_USB_Device_Init+0x48>)
 800a9d8:	f7ff faf1 	bl	8009fbe <USBD_Init>
 800a9dc:	b970      	cbnz	r0, 800a9fc <MX_USB_Device_Init+0x2c>
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a9de:	490f      	ldr	r1, [pc, #60]	; (800aa1c <MX_USB_Device_Init+0x4c>)
 800a9e0:	480d      	ldr	r0, [pc, #52]	; (800aa18 <MX_USB_Device_Init+0x48>)
 800a9e2:	f7ff fb03 	bl	8009fec <USBD_RegisterClass>
 800a9e6:	b960      	cbnz	r0, 800aa02 <MX_USB_Device_Init+0x32>
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a9e8:	490d      	ldr	r1, [pc, #52]	; (800aa20 <MX_USB_Device_Init+0x50>)
 800a9ea:	480b      	ldr	r0, [pc, #44]	; (800aa18 <MX_USB_Device_Init+0x48>)
 800a9ec:	f7ff fab3 	bl	8009f56 <USBD_CDC_RegisterInterface>
 800a9f0:	b950      	cbnz	r0, 800aa08 <MX_USB_Device_Init+0x38>
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a9f2:	4809      	ldr	r0, [pc, #36]	; (800aa18 <MX_USB_Device_Init+0x48>)
 800a9f4:	f7ff fb11 	bl	800a01a <USBD_Start>
 800a9f8:	b948      	cbnz	r0, 800aa0e <MX_USB_Device_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a9fa:	bd08      	pop	{r3, pc}
    Error_Handler();
 800a9fc:	f7f7 fa18 	bl	8001e30 <Error_Handler>
 800aa00:	e7ed      	b.n	800a9de <MX_USB_Device_Init+0xe>
    Error_Handler();
 800aa02:	f7f7 fa15 	bl	8001e30 <Error_Handler>
 800aa06:	e7ef      	b.n	800a9e8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800aa08:	f7f7 fa12 	bl	8001e30 <Error_Handler>
 800aa0c:	e7f1      	b.n	800a9f2 <MX_USB_Device_Init+0x22>
    Error_Handler();
 800aa0e:	f7f7 fa0f 	bl	8001e30 <Error_Handler>
}
 800aa12:	e7f2      	b.n	800a9fa <MX_USB_Device_Init+0x2a>
 800aa14:	20000174 	.word	0x20000174
 800aa18:	20003c18 	.word	0x20003c18
 800aa1c:	20000050 	.word	0x20000050
 800aa20:	20000160 	.word	0x20000160

0800aa24 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800aa24:	2000      	movs	r0, #0
 800aa26:	4770      	bx	lr

0800aa28 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800aa28:	2000      	movs	r0, #0
 800aa2a:	4770      	bx	lr

0800aa2c <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	4770      	bx	lr

0800aa30 <CDC_Receive_FS>:
{
 800aa30:	b510      	push	{r4, lr}
 800aa32:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aa34:	4c04      	ldr	r4, [pc, #16]	; (800aa48 <CDC_Receive_FS+0x18>)
 800aa36:	4620      	mov	r0, r4
 800aa38:	f7ff fa9f 	bl	8009f7a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	f7ff faa5 	bl	8009f8c <USBD_CDC_ReceivePacket>
}
 800aa42:	2000      	movs	r0, #0
 800aa44:	bd10      	pop	{r4, pc}
 800aa46:	bf00      	nop
 800aa48:	20003c18 	.word	0x20003c18

0800aa4c <CDC_Init_FS>:
{
 800aa4c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aa4e:	4c06      	ldr	r4, [pc, #24]	; (800aa68 <CDC_Init_FS+0x1c>)
 800aa50:	2200      	movs	r2, #0
 800aa52:	4906      	ldr	r1, [pc, #24]	; (800aa6c <CDC_Init_FS+0x20>)
 800aa54:	4620      	mov	r0, r4
 800aa56:	f7ff fa85 	bl	8009f64 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aa5a:	4905      	ldr	r1, [pc, #20]	; (800aa70 <CDC_Init_FS+0x24>)
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	f7ff fa8c 	bl	8009f7a <USBD_CDC_SetRxBuffer>
}
 800aa62:	2000      	movs	r0, #0
 800aa64:	bd10      	pop	{r4, pc}
 800aa66:	bf00      	nop
 800aa68:	20003c18 	.word	0x20003c18
 800aa6c:	200046e8 	.word	0x200046e8
 800aa70:	20003ee8 	.word	0x20003ee8

0800aa74 <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800aa74:	2312      	movs	r3, #18
 800aa76:	800b      	strh	r3, [r1, #0]
  return USBD_CDC_DeviceDesc;
}
 800aa78:	4800      	ldr	r0, [pc, #0]	; (800aa7c <USBD_CDC_DeviceDescriptor+0x8>)
 800aa7a:	4770      	bx	lr
 800aa7c:	20000194 	.word	0x20000194

0800aa80 <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa80:	2304      	movs	r3, #4
 800aa82:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800aa84:	4800      	ldr	r0, [pc, #0]	; (800aa88 <USBD_CDC_LangIDStrDescriptor+0x8>)
 800aa86:	4770      	bx	lr
 800aa88:	200001a8 	.word	0x200001a8

0800aa8c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d21e      	bcs.n	800aad0 <IntToUnicode+0x44>
{
 800aa92:	b500      	push	{lr}
 800aa94:	e010      	b.n	800aab8 <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa96:	f10c 0c37 	add.w	ip, ip, #55	; 0x37
 800aa9a:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 800aa9e:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800aaa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800aaa4:	f10c 0c01 	add.w	ip, ip, #1
 800aaa8:	f04f 0e00 	mov.w	lr, #0
 800aaac:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 800aab0:	3301      	adds	r3, #1
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d209      	bcs.n	800aacc <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 800aab8:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 800aabc:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 800aac0:	d2e9      	bcs.n	800aa96 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800aac2:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800aac6:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 800aaca:	e7e8      	b.n	800aa9e <IntToUnicode+0x12>
  }
}
 800aacc:	f85d fb04 	ldr.w	pc, [sp], #4
 800aad0:	4770      	bx	lr
	...

0800aad4 <Get_SerialNum>:
{
 800aad4:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aad6:	4b0b      	ldr	r3, [pc, #44]	; (800ab04 <Get_SerialNum+0x30>)
 800aad8:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aadc:	f8d3 4594 	ldr.w	r4, [r3, #1428]	; 0x594
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aae0:	f8d3 3598 	ldr.w	r3, [r3, #1432]	; 0x598
  if (deviceserial0 != 0)
 800aae4:	18c0      	adds	r0, r0, r3
 800aae6:	d100      	bne.n	800aaea <Get_SerialNum+0x16>
}
 800aae8:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aaea:	4d07      	ldr	r5, [pc, #28]	; (800ab08 <Get_SerialNum+0x34>)
 800aaec:	2208      	movs	r2, #8
 800aaee:	1ca9      	adds	r1, r5, #2
 800aaf0:	f7ff ffcc 	bl	800aa8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aaf4:	2204      	movs	r2, #4
 800aaf6:	f105 0112 	add.w	r1, r5, #18
 800aafa:	4620      	mov	r0, r4
 800aafc:	f7ff ffc6 	bl	800aa8c <IntToUnicode>
}
 800ab00:	e7f2      	b.n	800aae8 <Get_SerialNum+0x14>
 800ab02:	bf00      	nop
 800ab04:	1fff7000 	.word	0x1fff7000
 800ab08:	200001ac 	.word	0x200001ac

0800ab0c <USBD_CDC_SerialStrDescriptor>:
{
 800ab0c:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800ab0e:	231a      	movs	r3, #26
 800ab10:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800ab12:	f7ff ffdf 	bl	800aad4 <Get_SerialNum>
}
 800ab16:	4801      	ldr	r0, [pc, #4]	; (800ab1c <USBD_CDC_SerialStrDescriptor+0x10>)
 800ab18:	bd08      	pop	{r3, pc}
 800ab1a:	bf00      	nop
 800ab1c:	200001ac 	.word	0x200001ac

0800ab20 <USBD_CDC_ProductStrDescriptor>:
{
 800ab20:	b508      	push	{r3, lr}
 800ab22:	460a      	mov	r2, r1
  if(speed == 0)
 800ab24:	b928      	cbnz	r0, 800ab32 <USBD_CDC_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ab26:	4905      	ldr	r1, [pc, #20]	; (800ab3c <USBD_CDC_ProductStrDescriptor+0x1c>)
 800ab28:	4805      	ldr	r0, [pc, #20]	; (800ab40 <USBD_CDC_ProductStrDescriptor+0x20>)
 800ab2a:	f7ff fef2 	bl	800a912 <USBD_GetString>
}
 800ab2e:	4803      	ldr	r0, [pc, #12]	; (800ab3c <USBD_CDC_ProductStrDescriptor+0x1c>)
 800ab30:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ab32:	4902      	ldr	r1, [pc, #8]	; (800ab3c <USBD_CDC_ProductStrDescriptor+0x1c>)
 800ab34:	4802      	ldr	r0, [pc, #8]	; (800ab40 <USBD_CDC_ProductStrDescriptor+0x20>)
 800ab36:	f7ff feec 	bl	800a912 <USBD_GetString>
 800ab3a:	e7f8      	b.n	800ab2e <USBD_CDC_ProductStrDescriptor+0xe>
 800ab3c:	20004ee8 	.word	0x20004ee8
 800ab40:	080105bc 	.word	0x080105bc

0800ab44 <USBD_CDC_ManufacturerStrDescriptor>:
{
 800ab44:	b510      	push	{r4, lr}
 800ab46:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ab48:	4c03      	ldr	r4, [pc, #12]	; (800ab58 <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 800ab4a:	4621      	mov	r1, r4
 800ab4c:	4803      	ldr	r0, [pc, #12]	; (800ab5c <USBD_CDC_ManufacturerStrDescriptor+0x18>)
 800ab4e:	f7ff fee0 	bl	800a912 <USBD_GetString>
}
 800ab52:	4620      	mov	r0, r4
 800ab54:	bd10      	pop	{r4, pc}
 800ab56:	bf00      	nop
 800ab58:	20004ee8 	.word	0x20004ee8
 800ab5c:	080105d4 	.word	0x080105d4

0800ab60 <USBD_CDC_ConfigStrDescriptor>:
{
 800ab60:	b508      	push	{r3, lr}
 800ab62:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800ab64:	b928      	cbnz	r0, 800ab72 <USBD_CDC_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ab66:	4905      	ldr	r1, [pc, #20]	; (800ab7c <USBD_CDC_ConfigStrDescriptor+0x1c>)
 800ab68:	4805      	ldr	r0, [pc, #20]	; (800ab80 <USBD_CDC_ConfigStrDescriptor+0x20>)
 800ab6a:	f7ff fed2 	bl	800a912 <USBD_GetString>
}
 800ab6e:	4803      	ldr	r0, [pc, #12]	; (800ab7c <USBD_CDC_ConfigStrDescriptor+0x1c>)
 800ab70:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ab72:	4902      	ldr	r1, [pc, #8]	; (800ab7c <USBD_CDC_ConfigStrDescriptor+0x1c>)
 800ab74:	4802      	ldr	r0, [pc, #8]	; (800ab80 <USBD_CDC_ConfigStrDescriptor+0x20>)
 800ab76:	f7ff fecc 	bl	800a912 <USBD_GetString>
 800ab7a:	e7f8      	b.n	800ab6e <USBD_CDC_ConfigStrDescriptor+0xe>
 800ab7c:	20004ee8 	.word	0x20004ee8
 800ab80:	080105e8 	.word	0x080105e8

0800ab84 <USBD_CDC_InterfaceStrDescriptor>:
{
 800ab84:	b508      	push	{r3, lr}
 800ab86:	460a      	mov	r2, r1
  if(speed == 0)
 800ab88:	b928      	cbnz	r0, 800ab96 <USBD_CDC_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ab8a:	4905      	ldr	r1, [pc, #20]	; (800aba0 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 800ab8c:	4805      	ldr	r0, [pc, #20]	; (800aba4 <USBD_CDC_InterfaceStrDescriptor+0x20>)
 800ab8e:	f7ff fec0 	bl	800a912 <USBD_GetString>
}
 800ab92:	4803      	ldr	r0, [pc, #12]	; (800aba0 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 800ab94:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ab96:	4902      	ldr	r1, [pc, #8]	; (800aba0 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 800ab98:	4802      	ldr	r0, [pc, #8]	; (800aba4 <USBD_CDC_InterfaceStrDescriptor+0x20>)
 800ab9a:	f7ff feba 	bl	800a912 <USBD_GetString>
 800ab9e:	e7f8      	b.n	800ab92 <USBD_CDC_InterfaceStrDescriptor+0xe>
 800aba0:	20004ee8 	.word	0x20004ee8
 800aba4:	080105f4 	.word	0x080105f4

0800aba8 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800aba8:	2803      	cmp	r0, #3
 800abaa:	d805      	bhi.n	800abb8 <USBD_Get_USB_Status+0x10>
 800abac:	e8df f000 	tbb	[pc, r0]
 800abb0:	05020405 	.word	0x05020405
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800abb4:	2001      	movs	r0, #1
    break;
 800abb6:	4770      	bx	lr
      usb_status = USBD_FAIL;
 800abb8:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800abba:	4770      	bx	lr

0800abbc <SystemClockConfig_Resume>:
{
 800abbc:	b508      	push	{r3, lr}
  SystemClock_Config();
 800abbe:	f7f7 f93f 	bl	8001e40 <SystemClock_Config>
}
 800abc2:	bd08      	pop	{r3, pc}

0800abc4 <HAL_PCD_MspInit>:
{
 800abc4:	b510      	push	{r4, lr}
 800abc6:	b096      	sub	sp, #88	; 0x58
 800abc8:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800abca:	2254      	movs	r2, #84	; 0x54
 800abcc:	2100      	movs	r1, #0
 800abce:	a801      	add	r0, sp, #4
 800abd0:	f000 f98c 	bl	800aeec <memset>
  if(pcdHandle->Instance==USB)
 800abd4:	6822      	ldr	r2, [r4, #0]
 800abd6:	4b11      	ldr	r3, [pc, #68]	; (800ac1c <HAL_PCD_MspInit+0x58>)
 800abd8:	429a      	cmp	r2, r3
 800abda:	d001      	beq.n	800abe0 <HAL_PCD_MspInit+0x1c>
}
 800abdc:	b016      	add	sp, #88	; 0x58
 800abde:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800abe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800abe4:	9301      	str	r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800abe6:	a801      	add	r0, sp, #4
 800abe8:	f7fc f82c 	bl	8006c44 <HAL_RCCEx_PeriphCLKConfig>
 800abec:	b990      	cbnz	r0, 800ac14 <HAL_PCD_MspInit+0x50>
    __HAL_RCC_USB_CLK_ENABLE();
 800abee:	4b0c      	ldr	r3, [pc, #48]	; (800ac20 <HAL_PCD_MspInit+0x5c>)
 800abf0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800abf2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800abf6:	659a      	str	r2, [r3, #88]	; 0x58
 800abf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abfe:	9300      	str	r3, [sp, #0]
 800ac00:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ac02:	2200      	movs	r2, #0
 800ac04:	4611      	mov	r1, r2
 800ac06:	2014      	movs	r0, #20
 800ac08:	f7f9 f8e8 	bl	8003ddc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ac0c:	2014      	movs	r0, #20
 800ac0e:	f7f9 f91d 	bl	8003e4c <HAL_NVIC_EnableIRQ>
}
 800ac12:	e7e3      	b.n	800abdc <HAL_PCD_MspInit+0x18>
      Error_Handler();
 800ac14:	f7f7 f90c 	bl	8001e30 <Error_Handler>
 800ac18:	e7e9      	b.n	800abee <HAL_PCD_MspInit+0x2a>
 800ac1a:	bf00      	nop
 800ac1c:	40005c00 	.word	0x40005c00
 800ac20:	40021000 	.word	0x40021000

0800ac24 <HAL_PCD_SetupStageCallback>:
{
 800ac24:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ac26:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 800ac2a:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800ac2e:	f7ff fa09 	bl	800a044 <USBD_LL_SetupStage>
}
 800ac32:	bd08      	pop	{r3, pc}

0800ac34 <HAL_PCD_DataOutStageCallback>:
{
 800ac34:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ac36:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800ac3a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800ac3e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800ac42:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800ac46:	f7ff fa29 	bl	800a09c <USBD_LL_DataOutStage>
}
 800ac4a:	bd08      	pop	{r3, pc}

0800ac4c <HAL_PCD_DataInStageCallback>:
{
 800ac4c:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ac4e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800ac52:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800ac56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac58:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800ac5c:	f7ff fa5a 	bl	800a114 <USBD_LL_DataInStage>
}
 800ac60:	bd08      	pop	{r3, pc}

0800ac62 <HAL_PCD_SOFCallback>:
{
 800ac62:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ac64:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800ac68:	f7ff fafa 	bl	800a260 <USBD_LL_SOF>
}
 800ac6c:	bd08      	pop	{r3, pc}

0800ac6e <HAL_PCD_ResetCallback>:
{
 800ac6e:	b510      	push	{r4, lr}
 800ac70:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ac72:	6883      	ldr	r3, [r0, #8]
 800ac74:	2b02      	cmp	r3, #2
 800ac76:	d109      	bne.n	800ac8c <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ac78:	2101      	movs	r1, #1
 800ac7a:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800ac7e:	f7ff fad5 	bl	800a22c <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ac82:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800ac86:	f7ff faa4 	bl	800a1d2 <USBD_LL_Reset>
}
 800ac8a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800ac8c:	f7f7 f8d0 	bl	8001e30 <Error_Handler>
 800ac90:	e7f2      	b.n	800ac78 <HAL_PCD_ResetCallback+0xa>
	...

0800ac94 <HAL_PCD_SuspendCallback>:
{
 800ac94:	b510      	push	{r4, lr}
 800ac96:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ac98:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800ac9c:	f7ff fac9 	bl	800a232 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800aca0:	69a3      	ldr	r3, [r4, #24]
 800aca2:	b123      	cbz	r3, 800acae <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aca4:	4a02      	ldr	r2, [pc, #8]	; (800acb0 <HAL_PCD_SuspendCallback+0x1c>)
 800aca6:	6913      	ldr	r3, [r2, #16]
 800aca8:	f043 0306 	orr.w	r3, r3, #6
 800acac:	6113      	str	r3, [r2, #16]
}
 800acae:	bd10      	pop	{r4, pc}
 800acb0:	e000ed00 	.word	0xe000ed00

0800acb4 <HAL_PCD_ResumeCallback>:
{
 800acb4:	b510      	push	{r4, lr}
 800acb6:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 800acb8:	6983      	ldr	r3, [r0, #24]
 800acba:	b923      	cbnz	r3, 800acc6 <HAL_PCD_ResumeCallback+0x12>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800acbc:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800acc0:	f7ff fac1 	bl	800a246 <USBD_LL_Resume>
}
 800acc4:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800acc6:	4a04      	ldr	r2, [pc, #16]	; (800acd8 <HAL_PCD_ResumeCallback+0x24>)
 800acc8:	6913      	ldr	r3, [r2, #16]
 800acca:	f023 0306 	bic.w	r3, r3, #6
 800acce:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800acd0:	f7ff ff74 	bl	800abbc <SystemClockConfig_Resume>
 800acd4:	e7f2      	b.n	800acbc <HAL_PCD_ResumeCallback+0x8>
 800acd6:	bf00      	nop
 800acd8:	e000ed00 	.word	0xe000ed00

0800acdc <USBD_LL_Init>:
{
 800acdc:	b510      	push	{r4, lr}
 800acde:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800ace0:	481e      	ldr	r0, [pc, #120]	; (800ad5c <USBD_LL_Init+0x80>)
 800ace2:	f8c0 42f0 	str.w	r4, [r0, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 800ace6:	f8c4 02c4 	str.w	r0, [r4, #708]	; 0x2c4
  hpcd_USB_FS.Instance = USB;
 800acea:	4b1d      	ldr	r3, [pc, #116]	; (800ad60 <USBD_LL_Init+0x84>)
 800acec:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800acee:	2308      	movs	r3, #8
 800acf0:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800acf2:	2302      	movs	r3, #2
 800acf4:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800acf6:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800acf8:	2300      	movs	r3, #0
 800acfa:	6143      	str	r3, [r0, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800acfc:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800acfe:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ad00:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ad02:	f7fa fb16 	bl	8005332 <HAL_PCD_Init>
 800ad06:	bb30      	cbnz	r0, 800ad56 <USBD_LL_Init+0x7a>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ad08:	2318      	movs	r3, #24
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	4611      	mov	r1, r2
 800ad0e:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800ad12:	f7fb fa48 	bl	80061a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ad16:	2358      	movs	r3, #88	; 0x58
 800ad18:	2200      	movs	r2, #0
 800ad1a:	2180      	movs	r1, #128	; 0x80
 800ad1c:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800ad20:	f7fb fa41 	bl	80061a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ad24:	23c0      	movs	r3, #192	; 0xc0
 800ad26:	2200      	movs	r2, #0
 800ad28:	2181      	movs	r1, #129	; 0x81
 800ad2a:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800ad2e:	f7fb fa3a 	bl	80061a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ad32:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ad36:	2200      	movs	r2, #0
 800ad38:	2101      	movs	r1, #1
 800ad3a:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800ad3e:	f7fb fa32 	bl	80061a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ad42:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad46:	2200      	movs	r2, #0
 800ad48:	2182      	movs	r1, #130	; 0x82
 800ad4a:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800ad4e:	f7fb fa2a 	bl	80061a6 <HAL_PCDEx_PMAConfig>
}
 800ad52:	2000      	movs	r0, #0
 800ad54:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800ad56:	f7f7 f86b 	bl	8001e30 <Error_Handler>
 800ad5a:	e7d5      	b.n	800ad08 <USBD_LL_Init+0x2c>
 800ad5c:	200050e8 	.word	0x200050e8
 800ad60:	40005c00 	.word	0x40005c00

0800ad64 <USBD_LL_Start>:
{
 800ad64:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800ad66:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800ad6a:	f7fa fb54 	bl	8005416 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad6e:	f7ff ff1b 	bl	800aba8 <USBD_Get_USB_Status>
}
 800ad72:	bd08      	pop	{r3, pc}

0800ad74 <USBD_LL_OpenEP>:
{
 800ad74:	b508      	push	{r3, lr}
 800ad76:	4694      	mov	ip, r2
 800ad78:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ad7a:	4663      	mov	r3, ip
 800ad7c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800ad80:	f7fb f8da 	bl	8005f38 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad84:	f7ff ff10 	bl	800aba8 <USBD_Get_USB_Status>
}
 800ad88:	bd08      	pop	{r3, pc}

0800ad8a <USBD_LL_CloseEP>:
{
 800ad8a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ad8c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800ad90:	f7fb f914 	bl	8005fbc <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad94:	f7ff ff08 	bl	800aba8 <USBD_Get_USB_Status>
}
 800ad98:	bd08      	pop	{r3, pc}

0800ad9a <USBD_LL_StallEP>:
{
 800ad9a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ad9c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800ada0:	f7fb f991 	bl	80060c6 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ada4:	f7ff ff00 	bl	800aba8 <USBD_Get_USB_Status>
}
 800ada8:	bd08      	pop	{r3, pc}

0800adaa <USBD_LL_ClearStallEP>:
{
 800adaa:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800adac:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800adb0:	f7fb f9be 	bl	8006130 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800adb4:	f7ff fef8 	bl	800aba8 <USBD_Get_USB_Status>
}
 800adb8:	bd08      	pop	{r3, pc}

0800adba <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800adba:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 800adbe:	f011 0f80 	tst.w	r1, #128	; 0x80
 800adc2:	d108      	bne.n	800add6 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800adc4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800adc8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800adcc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800add0:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 800add4:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800add6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800adda:	3101      	adds	r1, #1
 800addc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ade0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ade4:	7888      	ldrb	r0, [r1, #2]
 800ade6:	4770      	bx	lr

0800ade8 <USBD_LL_SetUSBAddress>:
{
 800ade8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800adea:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800adee:	f7fa ffb6 	bl	8005d5e <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800adf2:	f7ff fed9 	bl	800aba8 <USBD_Get_USB_Status>
}
 800adf6:	bd08      	pop	{r3, pc}

0800adf8 <USBD_LL_Transmit>:
{
 800adf8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800adfa:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800adfe:	f7fb f93a 	bl	8006076 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae02:	f7ff fed1 	bl	800aba8 <USBD_Get_USB_Status>
}
 800ae06:	bd08      	pop	{r3, pc}

0800ae08 <USBD_LL_PrepareReceive>:
{
 800ae08:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae0a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800ae0e:	f7fb f907 	bl	8006020 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae12:	f7ff fec9 	bl	800aba8 <USBD_Get_USB_Status>
}
 800ae16:	bd08      	pop	{r3, pc}

0800ae18 <USBD_LL_GetRxDataSize>:
{
 800ae18:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ae1a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800ae1e:	f7fb f921 	bl	8006064 <HAL_PCD_EP_GetRxCount>
}
 800ae22:	bd08      	pop	{r3, pc}

0800ae24 <HAL_PCDEx_LPM_Callback>:
{
 800ae24:	b510      	push	{r4, lr}
 800ae26:	4604      	mov	r4, r0
  switch (msg)
 800ae28:	b111      	cbz	r1, 800ae30 <HAL_PCDEx_LPM_Callback+0xc>
 800ae2a:	2901      	cmp	r1, #1
 800ae2c:	d00f      	beq.n	800ae4e <HAL_PCDEx_LPM_Callback+0x2a>
}
 800ae2e:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 800ae30:	6983      	ldr	r3, [r0, #24]
 800ae32:	b923      	cbnz	r3, 800ae3e <HAL_PCDEx_LPM_Callback+0x1a>
    USBD_LL_Resume(hpcd->pData);
 800ae34:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800ae38:	f7ff fa05 	bl	800a246 <USBD_LL_Resume>
    break;
 800ae3c:	e7f7      	b.n	800ae2e <HAL_PCDEx_LPM_Callback+0xa>
      SystemClockConfig_Resume();
 800ae3e:	f7ff febd 	bl	800abbc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae42:	4a09      	ldr	r2, [pc, #36]	; (800ae68 <HAL_PCDEx_LPM_Callback+0x44>)
 800ae44:	6913      	ldr	r3, [r2, #16]
 800ae46:	f023 0306 	bic.w	r3, r3, #6
 800ae4a:	6113      	str	r3, [r2, #16]
 800ae4c:	e7f2      	b.n	800ae34 <HAL_PCDEx_LPM_Callback+0x10>
    USBD_LL_Suspend(hpcd->pData);
 800ae4e:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800ae52:	f7ff f9ee 	bl	800a232 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ae56:	69a3      	ldr	r3, [r4, #24]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d0e8      	beq.n	800ae2e <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae5c:	4a02      	ldr	r2, [pc, #8]	; (800ae68 <HAL_PCDEx_LPM_Callback+0x44>)
 800ae5e:	6913      	ldr	r3, [r2, #16]
 800ae60:	f043 0306 	orr.w	r3, r3, #6
 800ae64:	6113      	str	r3, [r2, #16]
}
 800ae66:	e7e2      	b.n	800ae2e <HAL_PCDEx_LPM_Callback+0xa>
 800ae68:	e000ed00 	.word	0xe000ed00

0800ae6c <USBD_static_malloc>:
}
 800ae6c:	4800      	ldr	r0, [pc, #0]	; (800ae70 <USBD_static_malloc+0x4>)
 800ae6e:	4770      	bx	lr
 800ae70:	200053dc 	.word	0x200053dc

0800ae74 <USBD_static_free>:
}
 800ae74:	4770      	bx	lr
	...

0800ae78 <__errno>:
 800ae78:	4b01      	ldr	r3, [pc, #4]	; (800ae80 <__errno+0x8>)
 800ae7a:	6818      	ldr	r0, [r3, #0]
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop
 800ae80:	200001c8 	.word	0x200001c8

0800ae84 <__libc_init_array>:
 800ae84:	b570      	push	{r4, r5, r6, lr}
 800ae86:	4d0d      	ldr	r5, [pc, #52]	; (800aebc <__libc_init_array+0x38>)
 800ae88:	4c0d      	ldr	r4, [pc, #52]	; (800aec0 <__libc_init_array+0x3c>)
 800ae8a:	1b64      	subs	r4, r4, r5
 800ae8c:	10a4      	asrs	r4, r4, #2
 800ae8e:	2600      	movs	r6, #0
 800ae90:	42a6      	cmp	r6, r4
 800ae92:	d109      	bne.n	800aea8 <__libc_init_array+0x24>
 800ae94:	4d0b      	ldr	r5, [pc, #44]	; (800aec4 <__libc_init_array+0x40>)
 800ae96:	4c0c      	ldr	r4, [pc, #48]	; (800aec8 <__libc_init_array+0x44>)
 800ae98:	f004 fd3a 	bl	800f910 <_init>
 800ae9c:	1b64      	subs	r4, r4, r5
 800ae9e:	10a4      	asrs	r4, r4, #2
 800aea0:	2600      	movs	r6, #0
 800aea2:	42a6      	cmp	r6, r4
 800aea4:	d105      	bne.n	800aeb2 <__libc_init_array+0x2e>
 800aea6:	bd70      	pop	{r4, r5, r6, pc}
 800aea8:	f855 3b04 	ldr.w	r3, [r5], #4
 800aeac:	4798      	blx	r3
 800aeae:	3601      	adds	r6, #1
 800aeb0:	e7ee      	b.n	800ae90 <__libc_init_array+0xc>
 800aeb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aeb6:	4798      	blx	r3
 800aeb8:	3601      	adds	r6, #1
 800aeba:	e7f2      	b.n	800aea2 <__libc_init_array+0x1e>
 800aebc:	08010b10 	.word	0x08010b10
 800aec0:	08010b10 	.word	0x08010b10
 800aec4:	08010b10 	.word	0x08010b10
 800aec8:	08010b14 	.word	0x08010b14

0800aecc <malloc>:
 800aecc:	4b02      	ldr	r3, [pc, #8]	; (800aed8 <malloc+0xc>)
 800aece:	4601      	mov	r1, r0
 800aed0:	6818      	ldr	r0, [r3, #0]
 800aed2:	f000 b87f 	b.w	800afd4 <_malloc_r>
 800aed6:	bf00      	nop
 800aed8:	200001c8 	.word	0x200001c8

0800aedc <free>:
 800aedc:	4b02      	ldr	r3, [pc, #8]	; (800aee8 <free+0xc>)
 800aede:	4601      	mov	r1, r0
 800aee0:	6818      	ldr	r0, [r3, #0]
 800aee2:	f000 b80b 	b.w	800aefc <_free_r>
 800aee6:	bf00      	nop
 800aee8:	200001c8 	.word	0x200001c8

0800aeec <memset>:
 800aeec:	4402      	add	r2, r0
 800aeee:	4603      	mov	r3, r0
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d100      	bne.n	800aef6 <memset+0xa>
 800aef4:	4770      	bx	lr
 800aef6:	f803 1b01 	strb.w	r1, [r3], #1
 800aefa:	e7f9      	b.n	800aef0 <memset+0x4>

0800aefc <_free_r>:
 800aefc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aefe:	2900      	cmp	r1, #0
 800af00:	d044      	beq.n	800af8c <_free_r+0x90>
 800af02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af06:	9001      	str	r0, [sp, #4]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f1a1 0404 	sub.w	r4, r1, #4
 800af0e:	bfb8      	it	lt
 800af10:	18e4      	addlt	r4, r4, r3
 800af12:	f003 f907 	bl	800e124 <__malloc_lock>
 800af16:	4a1e      	ldr	r2, [pc, #120]	; (800af90 <_free_r+0x94>)
 800af18:	9801      	ldr	r0, [sp, #4]
 800af1a:	6813      	ldr	r3, [r2, #0]
 800af1c:	b933      	cbnz	r3, 800af2c <_free_r+0x30>
 800af1e:	6063      	str	r3, [r4, #4]
 800af20:	6014      	str	r4, [r2, #0]
 800af22:	b003      	add	sp, #12
 800af24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af28:	f003 b902 	b.w	800e130 <__malloc_unlock>
 800af2c:	42a3      	cmp	r3, r4
 800af2e:	d908      	bls.n	800af42 <_free_r+0x46>
 800af30:	6825      	ldr	r5, [r4, #0]
 800af32:	1961      	adds	r1, r4, r5
 800af34:	428b      	cmp	r3, r1
 800af36:	bf01      	itttt	eq
 800af38:	6819      	ldreq	r1, [r3, #0]
 800af3a:	685b      	ldreq	r3, [r3, #4]
 800af3c:	1949      	addeq	r1, r1, r5
 800af3e:	6021      	streq	r1, [r4, #0]
 800af40:	e7ed      	b.n	800af1e <_free_r+0x22>
 800af42:	461a      	mov	r2, r3
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	b10b      	cbz	r3, 800af4c <_free_r+0x50>
 800af48:	42a3      	cmp	r3, r4
 800af4a:	d9fa      	bls.n	800af42 <_free_r+0x46>
 800af4c:	6811      	ldr	r1, [r2, #0]
 800af4e:	1855      	adds	r5, r2, r1
 800af50:	42a5      	cmp	r5, r4
 800af52:	d10b      	bne.n	800af6c <_free_r+0x70>
 800af54:	6824      	ldr	r4, [r4, #0]
 800af56:	4421      	add	r1, r4
 800af58:	1854      	adds	r4, r2, r1
 800af5a:	42a3      	cmp	r3, r4
 800af5c:	6011      	str	r1, [r2, #0]
 800af5e:	d1e0      	bne.n	800af22 <_free_r+0x26>
 800af60:	681c      	ldr	r4, [r3, #0]
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	6053      	str	r3, [r2, #4]
 800af66:	4421      	add	r1, r4
 800af68:	6011      	str	r1, [r2, #0]
 800af6a:	e7da      	b.n	800af22 <_free_r+0x26>
 800af6c:	d902      	bls.n	800af74 <_free_r+0x78>
 800af6e:	230c      	movs	r3, #12
 800af70:	6003      	str	r3, [r0, #0]
 800af72:	e7d6      	b.n	800af22 <_free_r+0x26>
 800af74:	6825      	ldr	r5, [r4, #0]
 800af76:	1961      	adds	r1, r4, r5
 800af78:	428b      	cmp	r3, r1
 800af7a:	bf04      	itt	eq
 800af7c:	6819      	ldreq	r1, [r3, #0]
 800af7e:	685b      	ldreq	r3, [r3, #4]
 800af80:	6063      	str	r3, [r4, #4]
 800af82:	bf04      	itt	eq
 800af84:	1949      	addeq	r1, r1, r5
 800af86:	6021      	streq	r1, [r4, #0]
 800af88:	6054      	str	r4, [r2, #4]
 800af8a:	e7ca      	b.n	800af22 <_free_r+0x26>
 800af8c:	b003      	add	sp, #12
 800af8e:	bd30      	pop	{r4, r5, pc}
 800af90:	200055fc 	.word	0x200055fc

0800af94 <sbrk_aligned>:
 800af94:	b570      	push	{r4, r5, r6, lr}
 800af96:	4e0e      	ldr	r6, [pc, #56]	; (800afd0 <sbrk_aligned+0x3c>)
 800af98:	460c      	mov	r4, r1
 800af9a:	6831      	ldr	r1, [r6, #0]
 800af9c:	4605      	mov	r5, r0
 800af9e:	b911      	cbnz	r1, 800afa6 <sbrk_aligned+0x12>
 800afa0:	f000 ff72 	bl	800be88 <_sbrk_r>
 800afa4:	6030      	str	r0, [r6, #0]
 800afa6:	4621      	mov	r1, r4
 800afa8:	4628      	mov	r0, r5
 800afaa:	f000 ff6d 	bl	800be88 <_sbrk_r>
 800afae:	1c43      	adds	r3, r0, #1
 800afb0:	d00a      	beq.n	800afc8 <sbrk_aligned+0x34>
 800afb2:	1cc4      	adds	r4, r0, #3
 800afb4:	f024 0403 	bic.w	r4, r4, #3
 800afb8:	42a0      	cmp	r0, r4
 800afba:	d007      	beq.n	800afcc <sbrk_aligned+0x38>
 800afbc:	1a21      	subs	r1, r4, r0
 800afbe:	4628      	mov	r0, r5
 800afc0:	f000 ff62 	bl	800be88 <_sbrk_r>
 800afc4:	3001      	adds	r0, #1
 800afc6:	d101      	bne.n	800afcc <sbrk_aligned+0x38>
 800afc8:	f04f 34ff 	mov.w	r4, #4294967295
 800afcc:	4620      	mov	r0, r4
 800afce:	bd70      	pop	{r4, r5, r6, pc}
 800afd0:	20005600 	.word	0x20005600

0800afd4 <_malloc_r>:
 800afd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afd8:	1ccd      	adds	r5, r1, #3
 800afda:	f025 0503 	bic.w	r5, r5, #3
 800afde:	3508      	adds	r5, #8
 800afe0:	2d0c      	cmp	r5, #12
 800afe2:	bf38      	it	cc
 800afe4:	250c      	movcc	r5, #12
 800afe6:	2d00      	cmp	r5, #0
 800afe8:	4607      	mov	r7, r0
 800afea:	db01      	blt.n	800aff0 <_malloc_r+0x1c>
 800afec:	42a9      	cmp	r1, r5
 800afee:	d905      	bls.n	800affc <_malloc_r+0x28>
 800aff0:	230c      	movs	r3, #12
 800aff2:	603b      	str	r3, [r7, #0]
 800aff4:	2600      	movs	r6, #0
 800aff6:	4630      	mov	r0, r6
 800aff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800affc:	4e2e      	ldr	r6, [pc, #184]	; (800b0b8 <_malloc_r+0xe4>)
 800affe:	f003 f891 	bl	800e124 <__malloc_lock>
 800b002:	6833      	ldr	r3, [r6, #0]
 800b004:	461c      	mov	r4, r3
 800b006:	bb34      	cbnz	r4, 800b056 <_malloc_r+0x82>
 800b008:	4629      	mov	r1, r5
 800b00a:	4638      	mov	r0, r7
 800b00c:	f7ff ffc2 	bl	800af94 <sbrk_aligned>
 800b010:	1c43      	adds	r3, r0, #1
 800b012:	4604      	mov	r4, r0
 800b014:	d14d      	bne.n	800b0b2 <_malloc_r+0xde>
 800b016:	6834      	ldr	r4, [r6, #0]
 800b018:	4626      	mov	r6, r4
 800b01a:	2e00      	cmp	r6, #0
 800b01c:	d140      	bne.n	800b0a0 <_malloc_r+0xcc>
 800b01e:	6823      	ldr	r3, [r4, #0]
 800b020:	4631      	mov	r1, r6
 800b022:	4638      	mov	r0, r7
 800b024:	eb04 0803 	add.w	r8, r4, r3
 800b028:	f000 ff2e 	bl	800be88 <_sbrk_r>
 800b02c:	4580      	cmp	r8, r0
 800b02e:	d13a      	bne.n	800b0a6 <_malloc_r+0xd2>
 800b030:	6821      	ldr	r1, [r4, #0]
 800b032:	3503      	adds	r5, #3
 800b034:	1a6d      	subs	r5, r5, r1
 800b036:	f025 0503 	bic.w	r5, r5, #3
 800b03a:	3508      	adds	r5, #8
 800b03c:	2d0c      	cmp	r5, #12
 800b03e:	bf38      	it	cc
 800b040:	250c      	movcc	r5, #12
 800b042:	4629      	mov	r1, r5
 800b044:	4638      	mov	r0, r7
 800b046:	f7ff ffa5 	bl	800af94 <sbrk_aligned>
 800b04a:	3001      	adds	r0, #1
 800b04c:	d02b      	beq.n	800b0a6 <_malloc_r+0xd2>
 800b04e:	6823      	ldr	r3, [r4, #0]
 800b050:	442b      	add	r3, r5
 800b052:	6023      	str	r3, [r4, #0]
 800b054:	e00e      	b.n	800b074 <_malloc_r+0xa0>
 800b056:	6822      	ldr	r2, [r4, #0]
 800b058:	1b52      	subs	r2, r2, r5
 800b05a:	d41e      	bmi.n	800b09a <_malloc_r+0xc6>
 800b05c:	2a0b      	cmp	r2, #11
 800b05e:	d916      	bls.n	800b08e <_malloc_r+0xba>
 800b060:	1961      	adds	r1, r4, r5
 800b062:	42a3      	cmp	r3, r4
 800b064:	6025      	str	r5, [r4, #0]
 800b066:	bf18      	it	ne
 800b068:	6059      	strne	r1, [r3, #4]
 800b06a:	6863      	ldr	r3, [r4, #4]
 800b06c:	bf08      	it	eq
 800b06e:	6031      	streq	r1, [r6, #0]
 800b070:	5162      	str	r2, [r4, r5]
 800b072:	604b      	str	r3, [r1, #4]
 800b074:	4638      	mov	r0, r7
 800b076:	f104 060b 	add.w	r6, r4, #11
 800b07a:	f003 f859 	bl	800e130 <__malloc_unlock>
 800b07e:	f026 0607 	bic.w	r6, r6, #7
 800b082:	1d23      	adds	r3, r4, #4
 800b084:	1af2      	subs	r2, r6, r3
 800b086:	d0b6      	beq.n	800aff6 <_malloc_r+0x22>
 800b088:	1b9b      	subs	r3, r3, r6
 800b08a:	50a3      	str	r3, [r4, r2]
 800b08c:	e7b3      	b.n	800aff6 <_malloc_r+0x22>
 800b08e:	6862      	ldr	r2, [r4, #4]
 800b090:	42a3      	cmp	r3, r4
 800b092:	bf0c      	ite	eq
 800b094:	6032      	streq	r2, [r6, #0]
 800b096:	605a      	strne	r2, [r3, #4]
 800b098:	e7ec      	b.n	800b074 <_malloc_r+0xa0>
 800b09a:	4623      	mov	r3, r4
 800b09c:	6864      	ldr	r4, [r4, #4]
 800b09e:	e7b2      	b.n	800b006 <_malloc_r+0x32>
 800b0a0:	4634      	mov	r4, r6
 800b0a2:	6876      	ldr	r6, [r6, #4]
 800b0a4:	e7b9      	b.n	800b01a <_malloc_r+0x46>
 800b0a6:	230c      	movs	r3, #12
 800b0a8:	603b      	str	r3, [r7, #0]
 800b0aa:	4638      	mov	r0, r7
 800b0ac:	f003 f840 	bl	800e130 <__malloc_unlock>
 800b0b0:	e7a1      	b.n	800aff6 <_malloc_r+0x22>
 800b0b2:	6025      	str	r5, [r4, #0]
 800b0b4:	e7de      	b.n	800b074 <_malloc_r+0xa0>
 800b0b6:	bf00      	nop
 800b0b8:	200055fc 	.word	0x200055fc

0800b0bc <__cvt>:
 800b0bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0c0:	ec55 4b10 	vmov	r4, r5, d0
 800b0c4:	2d00      	cmp	r5, #0
 800b0c6:	460e      	mov	r6, r1
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	462b      	mov	r3, r5
 800b0cc:	bfbb      	ittet	lt
 800b0ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b0d2:	461d      	movlt	r5, r3
 800b0d4:	2300      	movge	r3, #0
 800b0d6:	232d      	movlt	r3, #45	; 0x2d
 800b0d8:	700b      	strb	r3, [r1, #0]
 800b0da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b0e0:	4691      	mov	r9, r2
 800b0e2:	f023 0820 	bic.w	r8, r3, #32
 800b0e6:	bfbc      	itt	lt
 800b0e8:	4622      	movlt	r2, r4
 800b0ea:	4614      	movlt	r4, r2
 800b0ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b0f0:	d005      	beq.n	800b0fe <__cvt+0x42>
 800b0f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b0f6:	d100      	bne.n	800b0fa <__cvt+0x3e>
 800b0f8:	3601      	adds	r6, #1
 800b0fa:	2102      	movs	r1, #2
 800b0fc:	e000      	b.n	800b100 <__cvt+0x44>
 800b0fe:	2103      	movs	r1, #3
 800b100:	ab03      	add	r3, sp, #12
 800b102:	9301      	str	r3, [sp, #4]
 800b104:	ab02      	add	r3, sp, #8
 800b106:	9300      	str	r3, [sp, #0]
 800b108:	ec45 4b10 	vmov	d0, r4, r5
 800b10c:	4653      	mov	r3, sl
 800b10e:	4632      	mov	r2, r6
 800b110:	f001 fe62 	bl	800cdd8 <_dtoa_r>
 800b114:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b118:	4607      	mov	r7, r0
 800b11a:	d102      	bne.n	800b122 <__cvt+0x66>
 800b11c:	f019 0f01 	tst.w	r9, #1
 800b120:	d022      	beq.n	800b168 <__cvt+0xac>
 800b122:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b126:	eb07 0906 	add.w	r9, r7, r6
 800b12a:	d110      	bne.n	800b14e <__cvt+0x92>
 800b12c:	783b      	ldrb	r3, [r7, #0]
 800b12e:	2b30      	cmp	r3, #48	; 0x30
 800b130:	d10a      	bne.n	800b148 <__cvt+0x8c>
 800b132:	2200      	movs	r2, #0
 800b134:	2300      	movs	r3, #0
 800b136:	4620      	mov	r0, r4
 800b138:	4629      	mov	r1, r5
 800b13a:	f7f5 fced 	bl	8000b18 <__aeabi_dcmpeq>
 800b13e:	b918      	cbnz	r0, 800b148 <__cvt+0x8c>
 800b140:	f1c6 0601 	rsb	r6, r6, #1
 800b144:	f8ca 6000 	str.w	r6, [sl]
 800b148:	f8da 3000 	ldr.w	r3, [sl]
 800b14c:	4499      	add	r9, r3
 800b14e:	2200      	movs	r2, #0
 800b150:	2300      	movs	r3, #0
 800b152:	4620      	mov	r0, r4
 800b154:	4629      	mov	r1, r5
 800b156:	f7f5 fcdf 	bl	8000b18 <__aeabi_dcmpeq>
 800b15a:	b108      	cbz	r0, 800b160 <__cvt+0xa4>
 800b15c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b160:	2230      	movs	r2, #48	; 0x30
 800b162:	9b03      	ldr	r3, [sp, #12]
 800b164:	454b      	cmp	r3, r9
 800b166:	d307      	bcc.n	800b178 <__cvt+0xbc>
 800b168:	9b03      	ldr	r3, [sp, #12]
 800b16a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b16c:	1bdb      	subs	r3, r3, r7
 800b16e:	4638      	mov	r0, r7
 800b170:	6013      	str	r3, [r2, #0]
 800b172:	b004      	add	sp, #16
 800b174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b178:	1c59      	adds	r1, r3, #1
 800b17a:	9103      	str	r1, [sp, #12]
 800b17c:	701a      	strb	r2, [r3, #0]
 800b17e:	e7f0      	b.n	800b162 <__cvt+0xa6>

0800b180 <__exponent>:
 800b180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b182:	4603      	mov	r3, r0
 800b184:	2900      	cmp	r1, #0
 800b186:	bfb8      	it	lt
 800b188:	4249      	neglt	r1, r1
 800b18a:	f803 2b02 	strb.w	r2, [r3], #2
 800b18e:	bfb4      	ite	lt
 800b190:	222d      	movlt	r2, #45	; 0x2d
 800b192:	222b      	movge	r2, #43	; 0x2b
 800b194:	2909      	cmp	r1, #9
 800b196:	7042      	strb	r2, [r0, #1]
 800b198:	dd2a      	ble.n	800b1f0 <__exponent+0x70>
 800b19a:	f10d 0407 	add.w	r4, sp, #7
 800b19e:	46a4      	mov	ip, r4
 800b1a0:	270a      	movs	r7, #10
 800b1a2:	46a6      	mov	lr, r4
 800b1a4:	460a      	mov	r2, r1
 800b1a6:	fb91 f6f7 	sdiv	r6, r1, r7
 800b1aa:	fb07 1516 	mls	r5, r7, r6, r1
 800b1ae:	3530      	adds	r5, #48	; 0x30
 800b1b0:	2a63      	cmp	r2, #99	; 0x63
 800b1b2:	f104 34ff 	add.w	r4, r4, #4294967295
 800b1b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b1ba:	4631      	mov	r1, r6
 800b1bc:	dcf1      	bgt.n	800b1a2 <__exponent+0x22>
 800b1be:	3130      	adds	r1, #48	; 0x30
 800b1c0:	f1ae 0502 	sub.w	r5, lr, #2
 800b1c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b1c8:	1c44      	adds	r4, r0, #1
 800b1ca:	4629      	mov	r1, r5
 800b1cc:	4561      	cmp	r1, ip
 800b1ce:	d30a      	bcc.n	800b1e6 <__exponent+0x66>
 800b1d0:	f10d 0209 	add.w	r2, sp, #9
 800b1d4:	eba2 020e 	sub.w	r2, r2, lr
 800b1d8:	4565      	cmp	r5, ip
 800b1da:	bf88      	it	hi
 800b1dc:	2200      	movhi	r2, #0
 800b1de:	4413      	add	r3, r2
 800b1e0:	1a18      	subs	r0, r3, r0
 800b1e2:	b003      	add	sp, #12
 800b1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b1ee:	e7ed      	b.n	800b1cc <__exponent+0x4c>
 800b1f0:	2330      	movs	r3, #48	; 0x30
 800b1f2:	3130      	adds	r1, #48	; 0x30
 800b1f4:	7083      	strb	r3, [r0, #2]
 800b1f6:	70c1      	strb	r1, [r0, #3]
 800b1f8:	1d03      	adds	r3, r0, #4
 800b1fa:	e7f1      	b.n	800b1e0 <__exponent+0x60>

0800b1fc <_printf_float>:
 800b1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b200:	ed2d 8b02 	vpush	{d8}
 800b204:	b08d      	sub	sp, #52	; 0x34
 800b206:	460c      	mov	r4, r1
 800b208:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b20c:	4616      	mov	r6, r2
 800b20e:	461f      	mov	r7, r3
 800b210:	4605      	mov	r5, r0
 800b212:	f002 ff63 	bl	800e0dc <_localeconv_r>
 800b216:	f8d0 a000 	ldr.w	sl, [r0]
 800b21a:	4650      	mov	r0, sl
 800b21c:	f7f5 f800 	bl	8000220 <strlen>
 800b220:	2300      	movs	r3, #0
 800b222:	930a      	str	r3, [sp, #40]	; 0x28
 800b224:	6823      	ldr	r3, [r4, #0]
 800b226:	9305      	str	r3, [sp, #20]
 800b228:	f8d8 3000 	ldr.w	r3, [r8]
 800b22c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b230:	3307      	adds	r3, #7
 800b232:	f023 0307 	bic.w	r3, r3, #7
 800b236:	f103 0208 	add.w	r2, r3, #8
 800b23a:	f8c8 2000 	str.w	r2, [r8]
 800b23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b242:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b246:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b24a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b24e:	9307      	str	r3, [sp, #28]
 800b250:	f8cd 8018 	str.w	r8, [sp, #24]
 800b254:	ee08 0a10 	vmov	s16, r0
 800b258:	4b9f      	ldr	r3, [pc, #636]	; (800b4d8 <_printf_float+0x2dc>)
 800b25a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b25e:	f04f 32ff 	mov.w	r2, #4294967295
 800b262:	f7f5 fc8b 	bl	8000b7c <__aeabi_dcmpun>
 800b266:	bb88      	cbnz	r0, 800b2cc <_printf_float+0xd0>
 800b268:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b26c:	4b9a      	ldr	r3, [pc, #616]	; (800b4d8 <_printf_float+0x2dc>)
 800b26e:	f04f 32ff 	mov.w	r2, #4294967295
 800b272:	f7f5 fc65 	bl	8000b40 <__aeabi_dcmple>
 800b276:	bb48      	cbnz	r0, 800b2cc <_printf_float+0xd0>
 800b278:	2200      	movs	r2, #0
 800b27a:	2300      	movs	r3, #0
 800b27c:	4640      	mov	r0, r8
 800b27e:	4649      	mov	r1, r9
 800b280:	f7f5 fc54 	bl	8000b2c <__aeabi_dcmplt>
 800b284:	b110      	cbz	r0, 800b28c <_printf_float+0x90>
 800b286:	232d      	movs	r3, #45	; 0x2d
 800b288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b28c:	4b93      	ldr	r3, [pc, #588]	; (800b4dc <_printf_float+0x2e0>)
 800b28e:	4894      	ldr	r0, [pc, #592]	; (800b4e0 <_printf_float+0x2e4>)
 800b290:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b294:	bf94      	ite	ls
 800b296:	4698      	movls	r8, r3
 800b298:	4680      	movhi	r8, r0
 800b29a:	2303      	movs	r3, #3
 800b29c:	6123      	str	r3, [r4, #16]
 800b29e:	9b05      	ldr	r3, [sp, #20]
 800b2a0:	f023 0204 	bic.w	r2, r3, #4
 800b2a4:	6022      	str	r2, [r4, #0]
 800b2a6:	f04f 0900 	mov.w	r9, #0
 800b2aa:	9700      	str	r7, [sp, #0]
 800b2ac:	4633      	mov	r3, r6
 800b2ae:	aa0b      	add	r2, sp, #44	; 0x2c
 800b2b0:	4621      	mov	r1, r4
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	f000 f9d8 	bl	800b668 <_printf_common>
 800b2b8:	3001      	adds	r0, #1
 800b2ba:	f040 8090 	bne.w	800b3de <_printf_float+0x1e2>
 800b2be:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c2:	b00d      	add	sp, #52	; 0x34
 800b2c4:	ecbd 8b02 	vpop	{d8}
 800b2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2cc:	4642      	mov	r2, r8
 800b2ce:	464b      	mov	r3, r9
 800b2d0:	4640      	mov	r0, r8
 800b2d2:	4649      	mov	r1, r9
 800b2d4:	f7f5 fc52 	bl	8000b7c <__aeabi_dcmpun>
 800b2d8:	b140      	cbz	r0, 800b2ec <_printf_float+0xf0>
 800b2da:	464b      	mov	r3, r9
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	bfbc      	itt	lt
 800b2e0:	232d      	movlt	r3, #45	; 0x2d
 800b2e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b2e6:	487f      	ldr	r0, [pc, #508]	; (800b4e4 <_printf_float+0x2e8>)
 800b2e8:	4b7f      	ldr	r3, [pc, #508]	; (800b4e8 <_printf_float+0x2ec>)
 800b2ea:	e7d1      	b.n	800b290 <_printf_float+0x94>
 800b2ec:	6863      	ldr	r3, [r4, #4]
 800b2ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b2f2:	9206      	str	r2, [sp, #24]
 800b2f4:	1c5a      	adds	r2, r3, #1
 800b2f6:	d13f      	bne.n	800b378 <_printf_float+0x17c>
 800b2f8:	2306      	movs	r3, #6
 800b2fa:	6063      	str	r3, [r4, #4]
 800b2fc:	9b05      	ldr	r3, [sp, #20]
 800b2fe:	6861      	ldr	r1, [r4, #4]
 800b300:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b304:	2300      	movs	r3, #0
 800b306:	9303      	str	r3, [sp, #12]
 800b308:	ab0a      	add	r3, sp, #40	; 0x28
 800b30a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b30e:	ab09      	add	r3, sp, #36	; 0x24
 800b310:	ec49 8b10 	vmov	d0, r8, r9
 800b314:	9300      	str	r3, [sp, #0]
 800b316:	6022      	str	r2, [r4, #0]
 800b318:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b31c:	4628      	mov	r0, r5
 800b31e:	f7ff fecd 	bl	800b0bc <__cvt>
 800b322:	9b06      	ldr	r3, [sp, #24]
 800b324:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b326:	2b47      	cmp	r3, #71	; 0x47
 800b328:	4680      	mov	r8, r0
 800b32a:	d108      	bne.n	800b33e <_printf_float+0x142>
 800b32c:	1cc8      	adds	r0, r1, #3
 800b32e:	db02      	blt.n	800b336 <_printf_float+0x13a>
 800b330:	6863      	ldr	r3, [r4, #4]
 800b332:	4299      	cmp	r1, r3
 800b334:	dd41      	ble.n	800b3ba <_printf_float+0x1be>
 800b336:	f1ab 0b02 	sub.w	fp, fp, #2
 800b33a:	fa5f fb8b 	uxtb.w	fp, fp
 800b33e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b342:	d820      	bhi.n	800b386 <_printf_float+0x18a>
 800b344:	3901      	subs	r1, #1
 800b346:	465a      	mov	r2, fp
 800b348:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b34c:	9109      	str	r1, [sp, #36]	; 0x24
 800b34e:	f7ff ff17 	bl	800b180 <__exponent>
 800b352:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b354:	1813      	adds	r3, r2, r0
 800b356:	2a01      	cmp	r2, #1
 800b358:	4681      	mov	r9, r0
 800b35a:	6123      	str	r3, [r4, #16]
 800b35c:	dc02      	bgt.n	800b364 <_printf_float+0x168>
 800b35e:	6822      	ldr	r2, [r4, #0]
 800b360:	07d2      	lsls	r2, r2, #31
 800b362:	d501      	bpl.n	800b368 <_printf_float+0x16c>
 800b364:	3301      	adds	r3, #1
 800b366:	6123      	str	r3, [r4, #16]
 800b368:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d09c      	beq.n	800b2aa <_printf_float+0xae>
 800b370:	232d      	movs	r3, #45	; 0x2d
 800b372:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b376:	e798      	b.n	800b2aa <_printf_float+0xae>
 800b378:	9a06      	ldr	r2, [sp, #24]
 800b37a:	2a47      	cmp	r2, #71	; 0x47
 800b37c:	d1be      	bne.n	800b2fc <_printf_float+0x100>
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d1bc      	bne.n	800b2fc <_printf_float+0x100>
 800b382:	2301      	movs	r3, #1
 800b384:	e7b9      	b.n	800b2fa <_printf_float+0xfe>
 800b386:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b38a:	d118      	bne.n	800b3be <_printf_float+0x1c2>
 800b38c:	2900      	cmp	r1, #0
 800b38e:	6863      	ldr	r3, [r4, #4]
 800b390:	dd0b      	ble.n	800b3aa <_printf_float+0x1ae>
 800b392:	6121      	str	r1, [r4, #16]
 800b394:	b913      	cbnz	r3, 800b39c <_printf_float+0x1a0>
 800b396:	6822      	ldr	r2, [r4, #0]
 800b398:	07d0      	lsls	r0, r2, #31
 800b39a:	d502      	bpl.n	800b3a2 <_printf_float+0x1a6>
 800b39c:	3301      	adds	r3, #1
 800b39e:	440b      	add	r3, r1
 800b3a0:	6123      	str	r3, [r4, #16]
 800b3a2:	65a1      	str	r1, [r4, #88]	; 0x58
 800b3a4:	f04f 0900 	mov.w	r9, #0
 800b3a8:	e7de      	b.n	800b368 <_printf_float+0x16c>
 800b3aa:	b913      	cbnz	r3, 800b3b2 <_printf_float+0x1b6>
 800b3ac:	6822      	ldr	r2, [r4, #0]
 800b3ae:	07d2      	lsls	r2, r2, #31
 800b3b0:	d501      	bpl.n	800b3b6 <_printf_float+0x1ba>
 800b3b2:	3302      	adds	r3, #2
 800b3b4:	e7f4      	b.n	800b3a0 <_printf_float+0x1a4>
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e7f2      	b.n	800b3a0 <_printf_float+0x1a4>
 800b3ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b3be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3c0:	4299      	cmp	r1, r3
 800b3c2:	db05      	blt.n	800b3d0 <_printf_float+0x1d4>
 800b3c4:	6823      	ldr	r3, [r4, #0]
 800b3c6:	6121      	str	r1, [r4, #16]
 800b3c8:	07d8      	lsls	r0, r3, #31
 800b3ca:	d5ea      	bpl.n	800b3a2 <_printf_float+0x1a6>
 800b3cc:	1c4b      	adds	r3, r1, #1
 800b3ce:	e7e7      	b.n	800b3a0 <_printf_float+0x1a4>
 800b3d0:	2900      	cmp	r1, #0
 800b3d2:	bfd4      	ite	le
 800b3d4:	f1c1 0202 	rsble	r2, r1, #2
 800b3d8:	2201      	movgt	r2, #1
 800b3da:	4413      	add	r3, r2
 800b3dc:	e7e0      	b.n	800b3a0 <_printf_float+0x1a4>
 800b3de:	6823      	ldr	r3, [r4, #0]
 800b3e0:	055a      	lsls	r2, r3, #21
 800b3e2:	d407      	bmi.n	800b3f4 <_printf_float+0x1f8>
 800b3e4:	6923      	ldr	r3, [r4, #16]
 800b3e6:	4642      	mov	r2, r8
 800b3e8:	4631      	mov	r1, r6
 800b3ea:	4628      	mov	r0, r5
 800b3ec:	47b8      	blx	r7
 800b3ee:	3001      	adds	r0, #1
 800b3f0:	d12c      	bne.n	800b44c <_printf_float+0x250>
 800b3f2:	e764      	b.n	800b2be <_printf_float+0xc2>
 800b3f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b3f8:	f240 80e0 	bls.w	800b5bc <_printf_float+0x3c0>
 800b3fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b400:	2200      	movs	r2, #0
 800b402:	2300      	movs	r3, #0
 800b404:	f7f5 fb88 	bl	8000b18 <__aeabi_dcmpeq>
 800b408:	2800      	cmp	r0, #0
 800b40a:	d034      	beq.n	800b476 <_printf_float+0x27a>
 800b40c:	4a37      	ldr	r2, [pc, #220]	; (800b4ec <_printf_float+0x2f0>)
 800b40e:	2301      	movs	r3, #1
 800b410:	4631      	mov	r1, r6
 800b412:	4628      	mov	r0, r5
 800b414:	47b8      	blx	r7
 800b416:	3001      	adds	r0, #1
 800b418:	f43f af51 	beq.w	800b2be <_printf_float+0xc2>
 800b41c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b420:	429a      	cmp	r2, r3
 800b422:	db02      	blt.n	800b42a <_printf_float+0x22e>
 800b424:	6823      	ldr	r3, [r4, #0]
 800b426:	07d8      	lsls	r0, r3, #31
 800b428:	d510      	bpl.n	800b44c <_printf_float+0x250>
 800b42a:	ee18 3a10 	vmov	r3, s16
 800b42e:	4652      	mov	r2, sl
 800b430:	4631      	mov	r1, r6
 800b432:	4628      	mov	r0, r5
 800b434:	47b8      	blx	r7
 800b436:	3001      	adds	r0, #1
 800b438:	f43f af41 	beq.w	800b2be <_printf_float+0xc2>
 800b43c:	f04f 0800 	mov.w	r8, #0
 800b440:	f104 091a 	add.w	r9, r4, #26
 800b444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b446:	3b01      	subs	r3, #1
 800b448:	4543      	cmp	r3, r8
 800b44a:	dc09      	bgt.n	800b460 <_printf_float+0x264>
 800b44c:	6823      	ldr	r3, [r4, #0]
 800b44e:	079b      	lsls	r3, r3, #30
 800b450:	f100 8105 	bmi.w	800b65e <_printf_float+0x462>
 800b454:	68e0      	ldr	r0, [r4, #12]
 800b456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b458:	4298      	cmp	r0, r3
 800b45a:	bfb8      	it	lt
 800b45c:	4618      	movlt	r0, r3
 800b45e:	e730      	b.n	800b2c2 <_printf_float+0xc6>
 800b460:	2301      	movs	r3, #1
 800b462:	464a      	mov	r2, r9
 800b464:	4631      	mov	r1, r6
 800b466:	4628      	mov	r0, r5
 800b468:	47b8      	blx	r7
 800b46a:	3001      	adds	r0, #1
 800b46c:	f43f af27 	beq.w	800b2be <_printf_float+0xc2>
 800b470:	f108 0801 	add.w	r8, r8, #1
 800b474:	e7e6      	b.n	800b444 <_printf_float+0x248>
 800b476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b478:	2b00      	cmp	r3, #0
 800b47a:	dc39      	bgt.n	800b4f0 <_printf_float+0x2f4>
 800b47c:	4a1b      	ldr	r2, [pc, #108]	; (800b4ec <_printf_float+0x2f0>)
 800b47e:	2301      	movs	r3, #1
 800b480:	4631      	mov	r1, r6
 800b482:	4628      	mov	r0, r5
 800b484:	47b8      	blx	r7
 800b486:	3001      	adds	r0, #1
 800b488:	f43f af19 	beq.w	800b2be <_printf_float+0xc2>
 800b48c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b490:	4313      	orrs	r3, r2
 800b492:	d102      	bne.n	800b49a <_printf_float+0x29e>
 800b494:	6823      	ldr	r3, [r4, #0]
 800b496:	07d9      	lsls	r1, r3, #31
 800b498:	d5d8      	bpl.n	800b44c <_printf_float+0x250>
 800b49a:	ee18 3a10 	vmov	r3, s16
 800b49e:	4652      	mov	r2, sl
 800b4a0:	4631      	mov	r1, r6
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	47b8      	blx	r7
 800b4a6:	3001      	adds	r0, #1
 800b4a8:	f43f af09 	beq.w	800b2be <_printf_float+0xc2>
 800b4ac:	f04f 0900 	mov.w	r9, #0
 800b4b0:	f104 0a1a 	add.w	sl, r4, #26
 800b4b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4b6:	425b      	negs	r3, r3
 800b4b8:	454b      	cmp	r3, r9
 800b4ba:	dc01      	bgt.n	800b4c0 <_printf_float+0x2c4>
 800b4bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4be:	e792      	b.n	800b3e6 <_printf_float+0x1ea>
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	4652      	mov	r2, sl
 800b4c4:	4631      	mov	r1, r6
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	47b8      	blx	r7
 800b4ca:	3001      	adds	r0, #1
 800b4cc:	f43f aef7 	beq.w	800b2be <_printf_float+0xc2>
 800b4d0:	f109 0901 	add.w	r9, r9, #1
 800b4d4:	e7ee      	b.n	800b4b4 <_printf_float+0x2b8>
 800b4d6:	bf00      	nop
 800b4d8:	7fefffff 	.word	0x7fefffff
 800b4dc:	08010608 	.word	0x08010608
 800b4e0:	0801060c 	.word	0x0801060c
 800b4e4:	08010614 	.word	0x08010614
 800b4e8:	08010610 	.word	0x08010610
 800b4ec:	08010618 	.word	0x08010618
 800b4f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	bfa8      	it	ge
 800b4f8:	461a      	movge	r2, r3
 800b4fa:	2a00      	cmp	r2, #0
 800b4fc:	4691      	mov	r9, r2
 800b4fe:	dc37      	bgt.n	800b570 <_printf_float+0x374>
 800b500:	f04f 0b00 	mov.w	fp, #0
 800b504:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b508:	f104 021a 	add.w	r2, r4, #26
 800b50c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b50e:	9305      	str	r3, [sp, #20]
 800b510:	eba3 0309 	sub.w	r3, r3, r9
 800b514:	455b      	cmp	r3, fp
 800b516:	dc33      	bgt.n	800b580 <_printf_float+0x384>
 800b518:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b51c:	429a      	cmp	r2, r3
 800b51e:	db3b      	blt.n	800b598 <_printf_float+0x39c>
 800b520:	6823      	ldr	r3, [r4, #0]
 800b522:	07da      	lsls	r2, r3, #31
 800b524:	d438      	bmi.n	800b598 <_printf_float+0x39c>
 800b526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b528:	9a05      	ldr	r2, [sp, #20]
 800b52a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b52c:	1a9a      	subs	r2, r3, r2
 800b52e:	eba3 0901 	sub.w	r9, r3, r1
 800b532:	4591      	cmp	r9, r2
 800b534:	bfa8      	it	ge
 800b536:	4691      	movge	r9, r2
 800b538:	f1b9 0f00 	cmp.w	r9, #0
 800b53c:	dc35      	bgt.n	800b5aa <_printf_float+0x3ae>
 800b53e:	f04f 0800 	mov.w	r8, #0
 800b542:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b546:	f104 0a1a 	add.w	sl, r4, #26
 800b54a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b54e:	1a9b      	subs	r3, r3, r2
 800b550:	eba3 0309 	sub.w	r3, r3, r9
 800b554:	4543      	cmp	r3, r8
 800b556:	f77f af79 	ble.w	800b44c <_printf_float+0x250>
 800b55a:	2301      	movs	r3, #1
 800b55c:	4652      	mov	r2, sl
 800b55e:	4631      	mov	r1, r6
 800b560:	4628      	mov	r0, r5
 800b562:	47b8      	blx	r7
 800b564:	3001      	adds	r0, #1
 800b566:	f43f aeaa 	beq.w	800b2be <_printf_float+0xc2>
 800b56a:	f108 0801 	add.w	r8, r8, #1
 800b56e:	e7ec      	b.n	800b54a <_printf_float+0x34e>
 800b570:	4613      	mov	r3, r2
 800b572:	4631      	mov	r1, r6
 800b574:	4642      	mov	r2, r8
 800b576:	4628      	mov	r0, r5
 800b578:	47b8      	blx	r7
 800b57a:	3001      	adds	r0, #1
 800b57c:	d1c0      	bne.n	800b500 <_printf_float+0x304>
 800b57e:	e69e      	b.n	800b2be <_printf_float+0xc2>
 800b580:	2301      	movs	r3, #1
 800b582:	4631      	mov	r1, r6
 800b584:	4628      	mov	r0, r5
 800b586:	9205      	str	r2, [sp, #20]
 800b588:	47b8      	blx	r7
 800b58a:	3001      	adds	r0, #1
 800b58c:	f43f ae97 	beq.w	800b2be <_printf_float+0xc2>
 800b590:	9a05      	ldr	r2, [sp, #20]
 800b592:	f10b 0b01 	add.w	fp, fp, #1
 800b596:	e7b9      	b.n	800b50c <_printf_float+0x310>
 800b598:	ee18 3a10 	vmov	r3, s16
 800b59c:	4652      	mov	r2, sl
 800b59e:	4631      	mov	r1, r6
 800b5a0:	4628      	mov	r0, r5
 800b5a2:	47b8      	blx	r7
 800b5a4:	3001      	adds	r0, #1
 800b5a6:	d1be      	bne.n	800b526 <_printf_float+0x32a>
 800b5a8:	e689      	b.n	800b2be <_printf_float+0xc2>
 800b5aa:	9a05      	ldr	r2, [sp, #20]
 800b5ac:	464b      	mov	r3, r9
 800b5ae:	4442      	add	r2, r8
 800b5b0:	4631      	mov	r1, r6
 800b5b2:	4628      	mov	r0, r5
 800b5b4:	47b8      	blx	r7
 800b5b6:	3001      	adds	r0, #1
 800b5b8:	d1c1      	bne.n	800b53e <_printf_float+0x342>
 800b5ba:	e680      	b.n	800b2be <_printf_float+0xc2>
 800b5bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5be:	2a01      	cmp	r2, #1
 800b5c0:	dc01      	bgt.n	800b5c6 <_printf_float+0x3ca>
 800b5c2:	07db      	lsls	r3, r3, #31
 800b5c4:	d538      	bpl.n	800b638 <_printf_float+0x43c>
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	4642      	mov	r2, r8
 800b5ca:	4631      	mov	r1, r6
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	47b8      	blx	r7
 800b5d0:	3001      	adds	r0, #1
 800b5d2:	f43f ae74 	beq.w	800b2be <_printf_float+0xc2>
 800b5d6:	ee18 3a10 	vmov	r3, s16
 800b5da:	4652      	mov	r2, sl
 800b5dc:	4631      	mov	r1, r6
 800b5de:	4628      	mov	r0, r5
 800b5e0:	47b8      	blx	r7
 800b5e2:	3001      	adds	r0, #1
 800b5e4:	f43f ae6b 	beq.w	800b2be <_printf_float+0xc2>
 800b5e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	f7f5 fa92 	bl	8000b18 <__aeabi_dcmpeq>
 800b5f4:	b9d8      	cbnz	r0, 800b62e <_printf_float+0x432>
 800b5f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5f8:	f108 0201 	add.w	r2, r8, #1
 800b5fc:	3b01      	subs	r3, #1
 800b5fe:	4631      	mov	r1, r6
 800b600:	4628      	mov	r0, r5
 800b602:	47b8      	blx	r7
 800b604:	3001      	adds	r0, #1
 800b606:	d10e      	bne.n	800b626 <_printf_float+0x42a>
 800b608:	e659      	b.n	800b2be <_printf_float+0xc2>
 800b60a:	2301      	movs	r3, #1
 800b60c:	4652      	mov	r2, sl
 800b60e:	4631      	mov	r1, r6
 800b610:	4628      	mov	r0, r5
 800b612:	47b8      	blx	r7
 800b614:	3001      	adds	r0, #1
 800b616:	f43f ae52 	beq.w	800b2be <_printf_float+0xc2>
 800b61a:	f108 0801 	add.w	r8, r8, #1
 800b61e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b620:	3b01      	subs	r3, #1
 800b622:	4543      	cmp	r3, r8
 800b624:	dcf1      	bgt.n	800b60a <_printf_float+0x40e>
 800b626:	464b      	mov	r3, r9
 800b628:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b62c:	e6dc      	b.n	800b3e8 <_printf_float+0x1ec>
 800b62e:	f04f 0800 	mov.w	r8, #0
 800b632:	f104 0a1a 	add.w	sl, r4, #26
 800b636:	e7f2      	b.n	800b61e <_printf_float+0x422>
 800b638:	2301      	movs	r3, #1
 800b63a:	4642      	mov	r2, r8
 800b63c:	e7df      	b.n	800b5fe <_printf_float+0x402>
 800b63e:	2301      	movs	r3, #1
 800b640:	464a      	mov	r2, r9
 800b642:	4631      	mov	r1, r6
 800b644:	4628      	mov	r0, r5
 800b646:	47b8      	blx	r7
 800b648:	3001      	adds	r0, #1
 800b64a:	f43f ae38 	beq.w	800b2be <_printf_float+0xc2>
 800b64e:	f108 0801 	add.w	r8, r8, #1
 800b652:	68e3      	ldr	r3, [r4, #12]
 800b654:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b656:	1a5b      	subs	r3, r3, r1
 800b658:	4543      	cmp	r3, r8
 800b65a:	dcf0      	bgt.n	800b63e <_printf_float+0x442>
 800b65c:	e6fa      	b.n	800b454 <_printf_float+0x258>
 800b65e:	f04f 0800 	mov.w	r8, #0
 800b662:	f104 0919 	add.w	r9, r4, #25
 800b666:	e7f4      	b.n	800b652 <_printf_float+0x456>

0800b668 <_printf_common>:
 800b668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b66c:	4616      	mov	r6, r2
 800b66e:	4699      	mov	r9, r3
 800b670:	688a      	ldr	r2, [r1, #8]
 800b672:	690b      	ldr	r3, [r1, #16]
 800b674:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b678:	4293      	cmp	r3, r2
 800b67a:	bfb8      	it	lt
 800b67c:	4613      	movlt	r3, r2
 800b67e:	6033      	str	r3, [r6, #0]
 800b680:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b684:	4607      	mov	r7, r0
 800b686:	460c      	mov	r4, r1
 800b688:	b10a      	cbz	r2, 800b68e <_printf_common+0x26>
 800b68a:	3301      	adds	r3, #1
 800b68c:	6033      	str	r3, [r6, #0]
 800b68e:	6823      	ldr	r3, [r4, #0]
 800b690:	0699      	lsls	r1, r3, #26
 800b692:	bf42      	ittt	mi
 800b694:	6833      	ldrmi	r3, [r6, #0]
 800b696:	3302      	addmi	r3, #2
 800b698:	6033      	strmi	r3, [r6, #0]
 800b69a:	6825      	ldr	r5, [r4, #0]
 800b69c:	f015 0506 	ands.w	r5, r5, #6
 800b6a0:	d106      	bne.n	800b6b0 <_printf_common+0x48>
 800b6a2:	f104 0a19 	add.w	sl, r4, #25
 800b6a6:	68e3      	ldr	r3, [r4, #12]
 800b6a8:	6832      	ldr	r2, [r6, #0]
 800b6aa:	1a9b      	subs	r3, r3, r2
 800b6ac:	42ab      	cmp	r3, r5
 800b6ae:	dc26      	bgt.n	800b6fe <_printf_common+0x96>
 800b6b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b6b4:	1e13      	subs	r3, r2, #0
 800b6b6:	6822      	ldr	r2, [r4, #0]
 800b6b8:	bf18      	it	ne
 800b6ba:	2301      	movne	r3, #1
 800b6bc:	0692      	lsls	r2, r2, #26
 800b6be:	d42b      	bmi.n	800b718 <_printf_common+0xb0>
 800b6c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b6c4:	4649      	mov	r1, r9
 800b6c6:	4638      	mov	r0, r7
 800b6c8:	47c0      	blx	r8
 800b6ca:	3001      	adds	r0, #1
 800b6cc:	d01e      	beq.n	800b70c <_printf_common+0xa4>
 800b6ce:	6823      	ldr	r3, [r4, #0]
 800b6d0:	68e5      	ldr	r5, [r4, #12]
 800b6d2:	6832      	ldr	r2, [r6, #0]
 800b6d4:	f003 0306 	and.w	r3, r3, #6
 800b6d8:	2b04      	cmp	r3, #4
 800b6da:	bf08      	it	eq
 800b6dc:	1aad      	subeq	r5, r5, r2
 800b6de:	68a3      	ldr	r3, [r4, #8]
 800b6e0:	6922      	ldr	r2, [r4, #16]
 800b6e2:	bf0c      	ite	eq
 800b6e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6e8:	2500      	movne	r5, #0
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	bfc4      	itt	gt
 800b6ee:	1a9b      	subgt	r3, r3, r2
 800b6f0:	18ed      	addgt	r5, r5, r3
 800b6f2:	2600      	movs	r6, #0
 800b6f4:	341a      	adds	r4, #26
 800b6f6:	42b5      	cmp	r5, r6
 800b6f8:	d11a      	bne.n	800b730 <_printf_common+0xc8>
 800b6fa:	2000      	movs	r0, #0
 800b6fc:	e008      	b.n	800b710 <_printf_common+0xa8>
 800b6fe:	2301      	movs	r3, #1
 800b700:	4652      	mov	r2, sl
 800b702:	4649      	mov	r1, r9
 800b704:	4638      	mov	r0, r7
 800b706:	47c0      	blx	r8
 800b708:	3001      	adds	r0, #1
 800b70a:	d103      	bne.n	800b714 <_printf_common+0xac>
 800b70c:	f04f 30ff 	mov.w	r0, #4294967295
 800b710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b714:	3501      	adds	r5, #1
 800b716:	e7c6      	b.n	800b6a6 <_printf_common+0x3e>
 800b718:	18e1      	adds	r1, r4, r3
 800b71a:	1c5a      	adds	r2, r3, #1
 800b71c:	2030      	movs	r0, #48	; 0x30
 800b71e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b722:	4422      	add	r2, r4
 800b724:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b728:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b72c:	3302      	adds	r3, #2
 800b72e:	e7c7      	b.n	800b6c0 <_printf_common+0x58>
 800b730:	2301      	movs	r3, #1
 800b732:	4622      	mov	r2, r4
 800b734:	4649      	mov	r1, r9
 800b736:	4638      	mov	r0, r7
 800b738:	47c0      	blx	r8
 800b73a:	3001      	adds	r0, #1
 800b73c:	d0e6      	beq.n	800b70c <_printf_common+0xa4>
 800b73e:	3601      	adds	r6, #1
 800b740:	e7d9      	b.n	800b6f6 <_printf_common+0x8e>
	...

0800b744 <_printf_i>:
 800b744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b748:	7e0f      	ldrb	r7, [r1, #24]
 800b74a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b74c:	2f78      	cmp	r7, #120	; 0x78
 800b74e:	4691      	mov	r9, r2
 800b750:	4680      	mov	r8, r0
 800b752:	460c      	mov	r4, r1
 800b754:	469a      	mov	sl, r3
 800b756:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b75a:	d807      	bhi.n	800b76c <_printf_i+0x28>
 800b75c:	2f62      	cmp	r7, #98	; 0x62
 800b75e:	d80a      	bhi.n	800b776 <_printf_i+0x32>
 800b760:	2f00      	cmp	r7, #0
 800b762:	f000 80d8 	beq.w	800b916 <_printf_i+0x1d2>
 800b766:	2f58      	cmp	r7, #88	; 0x58
 800b768:	f000 80a3 	beq.w	800b8b2 <_printf_i+0x16e>
 800b76c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b770:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b774:	e03a      	b.n	800b7ec <_printf_i+0xa8>
 800b776:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b77a:	2b15      	cmp	r3, #21
 800b77c:	d8f6      	bhi.n	800b76c <_printf_i+0x28>
 800b77e:	a101      	add	r1, pc, #4	; (adr r1, 800b784 <_printf_i+0x40>)
 800b780:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b784:	0800b7dd 	.word	0x0800b7dd
 800b788:	0800b7f1 	.word	0x0800b7f1
 800b78c:	0800b76d 	.word	0x0800b76d
 800b790:	0800b76d 	.word	0x0800b76d
 800b794:	0800b76d 	.word	0x0800b76d
 800b798:	0800b76d 	.word	0x0800b76d
 800b79c:	0800b7f1 	.word	0x0800b7f1
 800b7a0:	0800b76d 	.word	0x0800b76d
 800b7a4:	0800b76d 	.word	0x0800b76d
 800b7a8:	0800b76d 	.word	0x0800b76d
 800b7ac:	0800b76d 	.word	0x0800b76d
 800b7b0:	0800b8fd 	.word	0x0800b8fd
 800b7b4:	0800b821 	.word	0x0800b821
 800b7b8:	0800b8df 	.word	0x0800b8df
 800b7bc:	0800b76d 	.word	0x0800b76d
 800b7c0:	0800b76d 	.word	0x0800b76d
 800b7c4:	0800b91f 	.word	0x0800b91f
 800b7c8:	0800b76d 	.word	0x0800b76d
 800b7cc:	0800b821 	.word	0x0800b821
 800b7d0:	0800b76d 	.word	0x0800b76d
 800b7d4:	0800b76d 	.word	0x0800b76d
 800b7d8:	0800b8e7 	.word	0x0800b8e7
 800b7dc:	682b      	ldr	r3, [r5, #0]
 800b7de:	1d1a      	adds	r2, r3, #4
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	602a      	str	r2, [r5, #0]
 800b7e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	e0a3      	b.n	800b938 <_printf_i+0x1f4>
 800b7f0:	6820      	ldr	r0, [r4, #0]
 800b7f2:	6829      	ldr	r1, [r5, #0]
 800b7f4:	0606      	lsls	r6, r0, #24
 800b7f6:	f101 0304 	add.w	r3, r1, #4
 800b7fa:	d50a      	bpl.n	800b812 <_printf_i+0xce>
 800b7fc:	680e      	ldr	r6, [r1, #0]
 800b7fe:	602b      	str	r3, [r5, #0]
 800b800:	2e00      	cmp	r6, #0
 800b802:	da03      	bge.n	800b80c <_printf_i+0xc8>
 800b804:	232d      	movs	r3, #45	; 0x2d
 800b806:	4276      	negs	r6, r6
 800b808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b80c:	485e      	ldr	r0, [pc, #376]	; (800b988 <_printf_i+0x244>)
 800b80e:	230a      	movs	r3, #10
 800b810:	e019      	b.n	800b846 <_printf_i+0x102>
 800b812:	680e      	ldr	r6, [r1, #0]
 800b814:	602b      	str	r3, [r5, #0]
 800b816:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b81a:	bf18      	it	ne
 800b81c:	b236      	sxthne	r6, r6
 800b81e:	e7ef      	b.n	800b800 <_printf_i+0xbc>
 800b820:	682b      	ldr	r3, [r5, #0]
 800b822:	6820      	ldr	r0, [r4, #0]
 800b824:	1d19      	adds	r1, r3, #4
 800b826:	6029      	str	r1, [r5, #0]
 800b828:	0601      	lsls	r1, r0, #24
 800b82a:	d501      	bpl.n	800b830 <_printf_i+0xec>
 800b82c:	681e      	ldr	r6, [r3, #0]
 800b82e:	e002      	b.n	800b836 <_printf_i+0xf2>
 800b830:	0646      	lsls	r6, r0, #25
 800b832:	d5fb      	bpl.n	800b82c <_printf_i+0xe8>
 800b834:	881e      	ldrh	r6, [r3, #0]
 800b836:	4854      	ldr	r0, [pc, #336]	; (800b988 <_printf_i+0x244>)
 800b838:	2f6f      	cmp	r7, #111	; 0x6f
 800b83a:	bf0c      	ite	eq
 800b83c:	2308      	moveq	r3, #8
 800b83e:	230a      	movne	r3, #10
 800b840:	2100      	movs	r1, #0
 800b842:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b846:	6865      	ldr	r5, [r4, #4]
 800b848:	60a5      	str	r5, [r4, #8]
 800b84a:	2d00      	cmp	r5, #0
 800b84c:	bfa2      	ittt	ge
 800b84e:	6821      	ldrge	r1, [r4, #0]
 800b850:	f021 0104 	bicge.w	r1, r1, #4
 800b854:	6021      	strge	r1, [r4, #0]
 800b856:	b90e      	cbnz	r6, 800b85c <_printf_i+0x118>
 800b858:	2d00      	cmp	r5, #0
 800b85a:	d04d      	beq.n	800b8f8 <_printf_i+0x1b4>
 800b85c:	4615      	mov	r5, r2
 800b85e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b862:	fb03 6711 	mls	r7, r3, r1, r6
 800b866:	5dc7      	ldrb	r7, [r0, r7]
 800b868:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b86c:	4637      	mov	r7, r6
 800b86e:	42bb      	cmp	r3, r7
 800b870:	460e      	mov	r6, r1
 800b872:	d9f4      	bls.n	800b85e <_printf_i+0x11a>
 800b874:	2b08      	cmp	r3, #8
 800b876:	d10b      	bne.n	800b890 <_printf_i+0x14c>
 800b878:	6823      	ldr	r3, [r4, #0]
 800b87a:	07de      	lsls	r6, r3, #31
 800b87c:	d508      	bpl.n	800b890 <_printf_i+0x14c>
 800b87e:	6923      	ldr	r3, [r4, #16]
 800b880:	6861      	ldr	r1, [r4, #4]
 800b882:	4299      	cmp	r1, r3
 800b884:	bfde      	ittt	le
 800b886:	2330      	movle	r3, #48	; 0x30
 800b888:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b88c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b890:	1b52      	subs	r2, r2, r5
 800b892:	6122      	str	r2, [r4, #16]
 800b894:	f8cd a000 	str.w	sl, [sp]
 800b898:	464b      	mov	r3, r9
 800b89a:	aa03      	add	r2, sp, #12
 800b89c:	4621      	mov	r1, r4
 800b89e:	4640      	mov	r0, r8
 800b8a0:	f7ff fee2 	bl	800b668 <_printf_common>
 800b8a4:	3001      	adds	r0, #1
 800b8a6:	d14c      	bne.n	800b942 <_printf_i+0x1fe>
 800b8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ac:	b004      	add	sp, #16
 800b8ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8b2:	4835      	ldr	r0, [pc, #212]	; (800b988 <_printf_i+0x244>)
 800b8b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b8b8:	6829      	ldr	r1, [r5, #0]
 800b8ba:	6823      	ldr	r3, [r4, #0]
 800b8bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b8c0:	6029      	str	r1, [r5, #0]
 800b8c2:	061d      	lsls	r5, r3, #24
 800b8c4:	d514      	bpl.n	800b8f0 <_printf_i+0x1ac>
 800b8c6:	07df      	lsls	r7, r3, #31
 800b8c8:	bf44      	itt	mi
 800b8ca:	f043 0320 	orrmi.w	r3, r3, #32
 800b8ce:	6023      	strmi	r3, [r4, #0]
 800b8d0:	b91e      	cbnz	r6, 800b8da <_printf_i+0x196>
 800b8d2:	6823      	ldr	r3, [r4, #0]
 800b8d4:	f023 0320 	bic.w	r3, r3, #32
 800b8d8:	6023      	str	r3, [r4, #0]
 800b8da:	2310      	movs	r3, #16
 800b8dc:	e7b0      	b.n	800b840 <_printf_i+0xfc>
 800b8de:	6823      	ldr	r3, [r4, #0]
 800b8e0:	f043 0320 	orr.w	r3, r3, #32
 800b8e4:	6023      	str	r3, [r4, #0]
 800b8e6:	2378      	movs	r3, #120	; 0x78
 800b8e8:	4828      	ldr	r0, [pc, #160]	; (800b98c <_printf_i+0x248>)
 800b8ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b8ee:	e7e3      	b.n	800b8b8 <_printf_i+0x174>
 800b8f0:	0659      	lsls	r1, r3, #25
 800b8f2:	bf48      	it	mi
 800b8f4:	b2b6      	uxthmi	r6, r6
 800b8f6:	e7e6      	b.n	800b8c6 <_printf_i+0x182>
 800b8f8:	4615      	mov	r5, r2
 800b8fa:	e7bb      	b.n	800b874 <_printf_i+0x130>
 800b8fc:	682b      	ldr	r3, [r5, #0]
 800b8fe:	6826      	ldr	r6, [r4, #0]
 800b900:	6961      	ldr	r1, [r4, #20]
 800b902:	1d18      	adds	r0, r3, #4
 800b904:	6028      	str	r0, [r5, #0]
 800b906:	0635      	lsls	r5, r6, #24
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	d501      	bpl.n	800b910 <_printf_i+0x1cc>
 800b90c:	6019      	str	r1, [r3, #0]
 800b90e:	e002      	b.n	800b916 <_printf_i+0x1d2>
 800b910:	0670      	lsls	r0, r6, #25
 800b912:	d5fb      	bpl.n	800b90c <_printf_i+0x1c8>
 800b914:	8019      	strh	r1, [r3, #0]
 800b916:	2300      	movs	r3, #0
 800b918:	6123      	str	r3, [r4, #16]
 800b91a:	4615      	mov	r5, r2
 800b91c:	e7ba      	b.n	800b894 <_printf_i+0x150>
 800b91e:	682b      	ldr	r3, [r5, #0]
 800b920:	1d1a      	adds	r2, r3, #4
 800b922:	602a      	str	r2, [r5, #0]
 800b924:	681d      	ldr	r5, [r3, #0]
 800b926:	6862      	ldr	r2, [r4, #4]
 800b928:	2100      	movs	r1, #0
 800b92a:	4628      	mov	r0, r5
 800b92c:	f7f4 fc80 	bl	8000230 <memchr>
 800b930:	b108      	cbz	r0, 800b936 <_printf_i+0x1f2>
 800b932:	1b40      	subs	r0, r0, r5
 800b934:	6060      	str	r0, [r4, #4]
 800b936:	6863      	ldr	r3, [r4, #4]
 800b938:	6123      	str	r3, [r4, #16]
 800b93a:	2300      	movs	r3, #0
 800b93c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b940:	e7a8      	b.n	800b894 <_printf_i+0x150>
 800b942:	6923      	ldr	r3, [r4, #16]
 800b944:	462a      	mov	r2, r5
 800b946:	4649      	mov	r1, r9
 800b948:	4640      	mov	r0, r8
 800b94a:	47d0      	blx	sl
 800b94c:	3001      	adds	r0, #1
 800b94e:	d0ab      	beq.n	800b8a8 <_printf_i+0x164>
 800b950:	6823      	ldr	r3, [r4, #0]
 800b952:	079b      	lsls	r3, r3, #30
 800b954:	d413      	bmi.n	800b97e <_printf_i+0x23a>
 800b956:	68e0      	ldr	r0, [r4, #12]
 800b958:	9b03      	ldr	r3, [sp, #12]
 800b95a:	4298      	cmp	r0, r3
 800b95c:	bfb8      	it	lt
 800b95e:	4618      	movlt	r0, r3
 800b960:	e7a4      	b.n	800b8ac <_printf_i+0x168>
 800b962:	2301      	movs	r3, #1
 800b964:	4632      	mov	r2, r6
 800b966:	4649      	mov	r1, r9
 800b968:	4640      	mov	r0, r8
 800b96a:	47d0      	blx	sl
 800b96c:	3001      	adds	r0, #1
 800b96e:	d09b      	beq.n	800b8a8 <_printf_i+0x164>
 800b970:	3501      	adds	r5, #1
 800b972:	68e3      	ldr	r3, [r4, #12]
 800b974:	9903      	ldr	r1, [sp, #12]
 800b976:	1a5b      	subs	r3, r3, r1
 800b978:	42ab      	cmp	r3, r5
 800b97a:	dcf2      	bgt.n	800b962 <_printf_i+0x21e>
 800b97c:	e7eb      	b.n	800b956 <_printf_i+0x212>
 800b97e:	2500      	movs	r5, #0
 800b980:	f104 0619 	add.w	r6, r4, #25
 800b984:	e7f5      	b.n	800b972 <_printf_i+0x22e>
 800b986:	bf00      	nop
 800b988:	0801061a 	.word	0x0801061a
 800b98c:	0801062b 	.word	0x0801062b

0800b990 <_scanf_float>:
 800b990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b994:	b087      	sub	sp, #28
 800b996:	4617      	mov	r7, r2
 800b998:	9303      	str	r3, [sp, #12]
 800b99a:	688b      	ldr	r3, [r1, #8]
 800b99c:	1e5a      	subs	r2, r3, #1
 800b99e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b9a2:	bf83      	ittte	hi
 800b9a4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b9a8:	195b      	addhi	r3, r3, r5
 800b9aa:	9302      	strhi	r3, [sp, #8]
 800b9ac:	2300      	movls	r3, #0
 800b9ae:	bf86      	itte	hi
 800b9b0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b9b4:	608b      	strhi	r3, [r1, #8]
 800b9b6:	9302      	strls	r3, [sp, #8]
 800b9b8:	680b      	ldr	r3, [r1, #0]
 800b9ba:	468b      	mov	fp, r1
 800b9bc:	2500      	movs	r5, #0
 800b9be:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b9c2:	f84b 3b1c 	str.w	r3, [fp], #28
 800b9c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b9ca:	4680      	mov	r8, r0
 800b9cc:	460c      	mov	r4, r1
 800b9ce:	465e      	mov	r6, fp
 800b9d0:	46aa      	mov	sl, r5
 800b9d2:	46a9      	mov	r9, r5
 800b9d4:	9501      	str	r5, [sp, #4]
 800b9d6:	68a2      	ldr	r2, [r4, #8]
 800b9d8:	b152      	cbz	r2, 800b9f0 <_scanf_float+0x60>
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	781b      	ldrb	r3, [r3, #0]
 800b9de:	2b4e      	cmp	r3, #78	; 0x4e
 800b9e0:	d864      	bhi.n	800baac <_scanf_float+0x11c>
 800b9e2:	2b40      	cmp	r3, #64	; 0x40
 800b9e4:	d83c      	bhi.n	800ba60 <_scanf_float+0xd0>
 800b9e6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b9ea:	b2c8      	uxtb	r0, r1
 800b9ec:	280e      	cmp	r0, #14
 800b9ee:	d93a      	bls.n	800ba66 <_scanf_float+0xd6>
 800b9f0:	f1b9 0f00 	cmp.w	r9, #0
 800b9f4:	d003      	beq.n	800b9fe <_scanf_float+0x6e>
 800b9f6:	6823      	ldr	r3, [r4, #0]
 800b9f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b9fc:	6023      	str	r3, [r4, #0]
 800b9fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba02:	f1ba 0f01 	cmp.w	sl, #1
 800ba06:	f200 8113 	bhi.w	800bc30 <_scanf_float+0x2a0>
 800ba0a:	455e      	cmp	r6, fp
 800ba0c:	f200 8105 	bhi.w	800bc1a <_scanf_float+0x28a>
 800ba10:	2501      	movs	r5, #1
 800ba12:	4628      	mov	r0, r5
 800ba14:	b007      	add	sp, #28
 800ba16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba1a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ba1e:	2a0d      	cmp	r2, #13
 800ba20:	d8e6      	bhi.n	800b9f0 <_scanf_float+0x60>
 800ba22:	a101      	add	r1, pc, #4	; (adr r1, 800ba28 <_scanf_float+0x98>)
 800ba24:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ba28:	0800bb67 	.word	0x0800bb67
 800ba2c:	0800b9f1 	.word	0x0800b9f1
 800ba30:	0800b9f1 	.word	0x0800b9f1
 800ba34:	0800b9f1 	.word	0x0800b9f1
 800ba38:	0800bbc7 	.word	0x0800bbc7
 800ba3c:	0800bb9f 	.word	0x0800bb9f
 800ba40:	0800b9f1 	.word	0x0800b9f1
 800ba44:	0800b9f1 	.word	0x0800b9f1
 800ba48:	0800bb75 	.word	0x0800bb75
 800ba4c:	0800b9f1 	.word	0x0800b9f1
 800ba50:	0800b9f1 	.word	0x0800b9f1
 800ba54:	0800b9f1 	.word	0x0800b9f1
 800ba58:	0800b9f1 	.word	0x0800b9f1
 800ba5c:	0800bb2d 	.word	0x0800bb2d
 800ba60:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ba64:	e7db      	b.n	800ba1e <_scanf_float+0x8e>
 800ba66:	290e      	cmp	r1, #14
 800ba68:	d8c2      	bhi.n	800b9f0 <_scanf_float+0x60>
 800ba6a:	a001      	add	r0, pc, #4	; (adr r0, 800ba70 <_scanf_float+0xe0>)
 800ba6c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ba70:	0800bb1f 	.word	0x0800bb1f
 800ba74:	0800b9f1 	.word	0x0800b9f1
 800ba78:	0800bb1f 	.word	0x0800bb1f
 800ba7c:	0800bbb3 	.word	0x0800bbb3
 800ba80:	0800b9f1 	.word	0x0800b9f1
 800ba84:	0800bacd 	.word	0x0800bacd
 800ba88:	0800bb09 	.word	0x0800bb09
 800ba8c:	0800bb09 	.word	0x0800bb09
 800ba90:	0800bb09 	.word	0x0800bb09
 800ba94:	0800bb09 	.word	0x0800bb09
 800ba98:	0800bb09 	.word	0x0800bb09
 800ba9c:	0800bb09 	.word	0x0800bb09
 800baa0:	0800bb09 	.word	0x0800bb09
 800baa4:	0800bb09 	.word	0x0800bb09
 800baa8:	0800bb09 	.word	0x0800bb09
 800baac:	2b6e      	cmp	r3, #110	; 0x6e
 800baae:	d809      	bhi.n	800bac4 <_scanf_float+0x134>
 800bab0:	2b60      	cmp	r3, #96	; 0x60
 800bab2:	d8b2      	bhi.n	800ba1a <_scanf_float+0x8a>
 800bab4:	2b54      	cmp	r3, #84	; 0x54
 800bab6:	d077      	beq.n	800bba8 <_scanf_float+0x218>
 800bab8:	2b59      	cmp	r3, #89	; 0x59
 800baba:	d199      	bne.n	800b9f0 <_scanf_float+0x60>
 800babc:	2d07      	cmp	r5, #7
 800babe:	d197      	bne.n	800b9f0 <_scanf_float+0x60>
 800bac0:	2508      	movs	r5, #8
 800bac2:	e029      	b.n	800bb18 <_scanf_float+0x188>
 800bac4:	2b74      	cmp	r3, #116	; 0x74
 800bac6:	d06f      	beq.n	800bba8 <_scanf_float+0x218>
 800bac8:	2b79      	cmp	r3, #121	; 0x79
 800baca:	e7f6      	b.n	800baba <_scanf_float+0x12a>
 800bacc:	6821      	ldr	r1, [r4, #0]
 800bace:	05c8      	lsls	r0, r1, #23
 800bad0:	d51a      	bpl.n	800bb08 <_scanf_float+0x178>
 800bad2:	9b02      	ldr	r3, [sp, #8]
 800bad4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bad8:	6021      	str	r1, [r4, #0]
 800bada:	f109 0901 	add.w	r9, r9, #1
 800bade:	b11b      	cbz	r3, 800bae8 <_scanf_float+0x158>
 800bae0:	3b01      	subs	r3, #1
 800bae2:	3201      	adds	r2, #1
 800bae4:	9302      	str	r3, [sp, #8]
 800bae6:	60a2      	str	r2, [r4, #8]
 800bae8:	68a3      	ldr	r3, [r4, #8]
 800baea:	3b01      	subs	r3, #1
 800baec:	60a3      	str	r3, [r4, #8]
 800baee:	6923      	ldr	r3, [r4, #16]
 800baf0:	3301      	adds	r3, #1
 800baf2:	6123      	str	r3, [r4, #16]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	3b01      	subs	r3, #1
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	607b      	str	r3, [r7, #4]
 800bafc:	f340 8084 	ble.w	800bc08 <_scanf_float+0x278>
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	3301      	adds	r3, #1
 800bb04:	603b      	str	r3, [r7, #0]
 800bb06:	e766      	b.n	800b9d6 <_scanf_float+0x46>
 800bb08:	eb1a 0f05 	cmn.w	sl, r5
 800bb0c:	f47f af70 	bne.w	800b9f0 <_scanf_float+0x60>
 800bb10:	6822      	ldr	r2, [r4, #0]
 800bb12:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800bb16:	6022      	str	r2, [r4, #0]
 800bb18:	f806 3b01 	strb.w	r3, [r6], #1
 800bb1c:	e7e4      	b.n	800bae8 <_scanf_float+0x158>
 800bb1e:	6822      	ldr	r2, [r4, #0]
 800bb20:	0610      	lsls	r0, r2, #24
 800bb22:	f57f af65 	bpl.w	800b9f0 <_scanf_float+0x60>
 800bb26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bb2a:	e7f4      	b.n	800bb16 <_scanf_float+0x186>
 800bb2c:	f1ba 0f00 	cmp.w	sl, #0
 800bb30:	d10e      	bne.n	800bb50 <_scanf_float+0x1c0>
 800bb32:	f1b9 0f00 	cmp.w	r9, #0
 800bb36:	d10e      	bne.n	800bb56 <_scanf_float+0x1c6>
 800bb38:	6822      	ldr	r2, [r4, #0]
 800bb3a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bb3e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bb42:	d108      	bne.n	800bb56 <_scanf_float+0x1c6>
 800bb44:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bb48:	6022      	str	r2, [r4, #0]
 800bb4a:	f04f 0a01 	mov.w	sl, #1
 800bb4e:	e7e3      	b.n	800bb18 <_scanf_float+0x188>
 800bb50:	f1ba 0f02 	cmp.w	sl, #2
 800bb54:	d055      	beq.n	800bc02 <_scanf_float+0x272>
 800bb56:	2d01      	cmp	r5, #1
 800bb58:	d002      	beq.n	800bb60 <_scanf_float+0x1d0>
 800bb5a:	2d04      	cmp	r5, #4
 800bb5c:	f47f af48 	bne.w	800b9f0 <_scanf_float+0x60>
 800bb60:	3501      	adds	r5, #1
 800bb62:	b2ed      	uxtb	r5, r5
 800bb64:	e7d8      	b.n	800bb18 <_scanf_float+0x188>
 800bb66:	f1ba 0f01 	cmp.w	sl, #1
 800bb6a:	f47f af41 	bne.w	800b9f0 <_scanf_float+0x60>
 800bb6e:	f04f 0a02 	mov.w	sl, #2
 800bb72:	e7d1      	b.n	800bb18 <_scanf_float+0x188>
 800bb74:	b97d      	cbnz	r5, 800bb96 <_scanf_float+0x206>
 800bb76:	f1b9 0f00 	cmp.w	r9, #0
 800bb7a:	f47f af3c 	bne.w	800b9f6 <_scanf_float+0x66>
 800bb7e:	6822      	ldr	r2, [r4, #0]
 800bb80:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bb84:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bb88:	f47f af39 	bne.w	800b9fe <_scanf_float+0x6e>
 800bb8c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bb90:	6022      	str	r2, [r4, #0]
 800bb92:	2501      	movs	r5, #1
 800bb94:	e7c0      	b.n	800bb18 <_scanf_float+0x188>
 800bb96:	2d03      	cmp	r5, #3
 800bb98:	d0e2      	beq.n	800bb60 <_scanf_float+0x1d0>
 800bb9a:	2d05      	cmp	r5, #5
 800bb9c:	e7de      	b.n	800bb5c <_scanf_float+0x1cc>
 800bb9e:	2d02      	cmp	r5, #2
 800bba0:	f47f af26 	bne.w	800b9f0 <_scanf_float+0x60>
 800bba4:	2503      	movs	r5, #3
 800bba6:	e7b7      	b.n	800bb18 <_scanf_float+0x188>
 800bba8:	2d06      	cmp	r5, #6
 800bbaa:	f47f af21 	bne.w	800b9f0 <_scanf_float+0x60>
 800bbae:	2507      	movs	r5, #7
 800bbb0:	e7b2      	b.n	800bb18 <_scanf_float+0x188>
 800bbb2:	6822      	ldr	r2, [r4, #0]
 800bbb4:	0591      	lsls	r1, r2, #22
 800bbb6:	f57f af1b 	bpl.w	800b9f0 <_scanf_float+0x60>
 800bbba:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800bbbe:	6022      	str	r2, [r4, #0]
 800bbc0:	f8cd 9004 	str.w	r9, [sp, #4]
 800bbc4:	e7a8      	b.n	800bb18 <_scanf_float+0x188>
 800bbc6:	6822      	ldr	r2, [r4, #0]
 800bbc8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800bbcc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bbd0:	d006      	beq.n	800bbe0 <_scanf_float+0x250>
 800bbd2:	0550      	lsls	r0, r2, #21
 800bbd4:	f57f af0c 	bpl.w	800b9f0 <_scanf_float+0x60>
 800bbd8:	f1b9 0f00 	cmp.w	r9, #0
 800bbdc:	f43f af0f 	beq.w	800b9fe <_scanf_float+0x6e>
 800bbe0:	0591      	lsls	r1, r2, #22
 800bbe2:	bf58      	it	pl
 800bbe4:	9901      	ldrpl	r1, [sp, #4]
 800bbe6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bbea:	bf58      	it	pl
 800bbec:	eba9 0101 	subpl.w	r1, r9, r1
 800bbf0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800bbf4:	bf58      	it	pl
 800bbf6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bbfa:	6022      	str	r2, [r4, #0]
 800bbfc:	f04f 0900 	mov.w	r9, #0
 800bc00:	e78a      	b.n	800bb18 <_scanf_float+0x188>
 800bc02:	f04f 0a03 	mov.w	sl, #3
 800bc06:	e787      	b.n	800bb18 <_scanf_float+0x188>
 800bc08:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bc0c:	4639      	mov	r1, r7
 800bc0e:	4640      	mov	r0, r8
 800bc10:	4798      	blx	r3
 800bc12:	2800      	cmp	r0, #0
 800bc14:	f43f aedf 	beq.w	800b9d6 <_scanf_float+0x46>
 800bc18:	e6ea      	b.n	800b9f0 <_scanf_float+0x60>
 800bc1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bc1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bc22:	463a      	mov	r2, r7
 800bc24:	4640      	mov	r0, r8
 800bc26:	4798      	blx	r3
 800bc28:	6923      	ldr	r3, [r4, #16]
 800bc2a:	3b01      	subs	r3, #1
 800bc2c:	6123      	str	r3, [r4, #16]
 800bc2e:	e6ec      	b.n	800ba0a <_scanf_float+0x7a>
 800bc30:	1e6b      	subs	r3, r5, #1
 800bc32:	2b06      	cmp	r3, #6
 800bc34:	d825      	bhi.n	800bc82 <_scanf_float+0x2f2>
 800bc36:	2d02      	cmp	r5, #2
 800bc38:	d836      	bhi.n	800bca8 <_scanf_float+0x318>
 800bc3a:	455e      	cmp	r6, fp
 800bc3c:	f67f aee8 	bls.w	800ba10 <_scanf_float+0x80>
 800bc40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bc44:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bc48:	463a      	mov	r2, r7
 800bc4a:	4640      	mov	r0, r8
 800bc4c:	4798      	blx	r3
 800bc4e:	6923      	ldr	r3, [r4, #16]
 800bc50:	3b01      	subs	r3, #1
 800bc52:	6123      	str	r3, [r4, #16]
 800bc54:	e7f1      	b.n	800bc3a <_scanf_float+0x2aa>
 800bc56:	9802      	ldr	r0, [sp, #8]
 800bc58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bc5c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800bc60:	9002      	str	r0, [sp, #8]
 800bc62:	463a      	mov	r2, r7
 800bc64:	4640      	mov	r0, r8
 800bc66:	4798      	blx	r3
 800bc68:	6923      	ldr	r3, [r4, #16]
 800bc6a:	3b01      	subs	r3, #1
 800bc6c:	6123      	str	r3, [r4, #16]
 800bc6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc72:	fa5f fa8a 	uxtb.w	sl, sl
 800bc76:	f1ba 0f02 	cmp.w	sl, #2
 800bc7a:	d1ec      	bne.n	800bc56 <_scanf_float+0x2c6>
 800bc7c:	3d03      	subs	r5, #3
 800bc7e:	b2ed      	uxtb	r5, r5
 800bc80:	1b76      	subs	r6, r6, r5
 800bc82:	6823      	ldr	r3, [r4, #0]
 800bc84:	05da      	lsls	r2, r3, #23
 800bc86:	d52f      	bpl.n	800bce8 <_scanf_float+0x358>
 800bc88:	055b      	lsls	r3, r3, #21
 800bc8a:	d510      	bpl.n	800bcae <_scanf_float+0x31e>
 800bc8c:	455e      	cmp	r6, fp
 800bc8e:	f67f aebf 	bls.w	800ba10 <_scanf_float+0x80>
 800bc92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bc96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bc9a:	463a      	mov	r2, r7
 800bc9c:	4640      	mov	r0, r8
 800bc9e:	4798      	blx	r3
 800bca0:	6923      	ldr	r3, [r4, #16]
 800bca2:	3b01      	subs	r3, #1
 800bca4:	6123      	str	r3, [r4, #16]
 800bca6:	e7f1      	b.n	800bc8c <_scanf_float+0x2fc>
 800bca8:	46aa      	mov	sl, r5
 800bcaa:	9602      	str	r6, [sp, #8]
 800bcac:	e7df      	b.n	800bc6e <_scanf_float+0x2de>
 800bcae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bcb2:	6923      	ldr	r3, [r4, #16]
 800bcb4:	2965      	cmp	r1, #101	; 0x65
 800bcb6:	f103 33ff 	add.w	r3, r3, #4294967295
 800bcba:	f106 35ff 	add.w	r5, r6, #4294967295
 800bcbe:	6123      	str	r3, [r4, #16]
 800bcc0:	d00c      	beq.n	800bcdc <_scanf_float+0x34c>
 800bcc2:	2945      	cmp	r1, #69	; 0x45
 800bcc4:	d00a      	beq.n	800bcdc <_scanf_float+0x34c>
 800bcc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bcca:	463a      	mov	r2, r7
 800bccc:	4640      	mov	r0, r8
 800bcce:	4798      	blx	r3
 800bcd0:	6923      	ldr	r3, [r4, #16]
 800bcd2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	1eb5      	subs	r5, r6, #2
 800bcda:	6123      	str	r3, [r4, #16]
 800bcdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bce0:	463a      	mov	r2, r7
 800bce2:	4640      	mov	r0, r8
 800bce4:	4798      	blx	r3
 800bce6:	462e      	mov	r6, r5
 800bce8:	6825      	ldr	r5, [r4, #0]
 800bcea:	f015 0510 	ands.w	r5, r5, #16
 800bcee:	d159      	bne.n	800bda4 <_scanf_float+0x414>
 800bcf0:	7035      	strb	r5, [r6, #0]
 800bcf2:	6823      	ldr	r3, [r4, #0]
 800bcf4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bcf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcfc:	d11b      	bne.n	800bd36 <_scanf_float+0x3a6>
 800bcfe:	9b01      	ldr	r3, [sp, #4]
 800bd00:	454b      	cmp	r3, r9
 800bd02:	eba3 0209 	sub.w	r2, r3, r9
 800bd06:	d123      	bne.n	800bd50 <_scanf_float+0x3c0>
 800bd08:	2200      	movs	r2, #0
 800bd0a:	4659      	mov	r1, fp
 800bd0c:	4640      	mov	r0, r8
 800bd0e:	f000 ff15 	bl	800cb3c <_strtod_r>
 800bd12:	6822      	ldr	r2, [r4, #0]
 800bd14:	9b03      	ldr	r3, [sp, #12]
 800bd16:	f012 0f02 	tst.w	r2, #2
 800bd1a:	ec57 6b10 	vmov	r6, r7, d0
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	d021      	beq.n	800bd66 <_scanf_float+0x3d6>
 800bd22:	9903      	ldr	r1, [sp, #12]
 800bd24:	1d1a      	adds	r2, r3, #4
 800bd26:	600a      	str	r2, [r1, #0]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	e9c3 6700 	strd	r6, r7, [r3]
 800bd2e:	68e3      	ldr	r3, [r4, #12]
 800bd30:	3301      	adds	r3, #1
 800bd32:	60e3      	str	r3, [r4, #12]
 800bd34:	e66d      	b.n	800ba12 <_scanf_float+0x82>
 800bd36:	9b04      	ldr	r3, [sp, #16]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d0e5      	beq.n	800bd08 <_scanf_float+0x378>
 800bd3c:	9905      	ldr	r1, [sp, #20]
 800bd3e:	230a      	movs	r3, #10
 800bd40:	462a      	mov	r2, r5
 800bd42:	3101      	adds	r1, #1
 800bd44:	4640      	mov	r0, r8
 800bd46:	f000 ff81 	bl	800cc4c <_strtol_r>
 800bd4a:	9b04      	ldr	r3, [sp, #16]
 800bd4c:	9e05      	ldr	r6, [sp, #20]
 800bd4e:	1ac2      	subs	r2, r0, r3
 800bd50:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bd54:	429e      	cmp	r6, r3
 800bd56:	bf28      	it	cs
 800bd58:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800bd5c:	4912      	ldr	r1, [pc, #72]	; (800bda8 <_scanf_float+0x418>)
 800bd5e:	4630      	mov	r0, r6
 800bd60:	f000 f8a8 	bl	800beb4 <siprintf>
 800bd64:	e7d0      	b.n	800bd08 <_scanf_float+0x378>
 800bd66:	9903      	ldr	r1, [sp, #12]
 800bd68:	f012 0f04 	tst.w	r2, #4
 800bd6c:	f103 0204 	add.w	r2, r3, #4
 800bd70:	600a      	str	r2, [r1, #0]
 800bd72:	d1d9      	bne.n	800bd28 <_scanf_float+0x398>
 800bd74:	f8d3 8000 	ldr.w	r8, [r3]
 800bd78:	ee10 2a10 	vmov	r2, s0
 800bd7c:	ee10 0a10 	vmov	r0, s0
 800bd80:	463b      	mov	r3, r7
 800bd82:	4639      	mov	r1, r7
 800bd84:	f7f4 fefa 	bl	8000b7c <__aeabi_dcmpun>
 800bd88:	b128      	cbz	r0, 800bd96 <_scanf_float+0x406>
 800bd8a:	4808      	ldr	r0, [pc, #32]	; (800bdac <_scanf_float+0x41c>)
 800bd8c:	f000 f88c 	bl	800bea8 <nanf>
 800bd90:	ed88 0a00 	vstr	s0, [r8]
 800bd94:	e7cb      	b.n	800bd2e <_scanf_float+0x39e>
 800bd96:	4630      	mov	r0, r6
 800bd98:	4639      	mov	r1, r7
 800bd9a:	f7f4 ff4d 	bl	8000c38 <__aeabi_d2f>
 800bd9e:	f8c8 0000 	str.w	r0, [r8]
 800bda2:	e7c4      	b.n	800bd2e <_scanf_float+0x39e>
 800bda4:	2500      	movs	r5, #0
 800bda6:	e634      	b.n	800ba12 <_scanf_float+0x82>
 800bda8:	0801063c 	.word	0x0801063c
 800bdac:	08010743 	.word	0x08010743

0800bdb0 <srand>:
 800bdb0:	b538      	push	{r3, r4, r5, lr}
 800bdb2:	4b10      	ldr	r3, [pc, #64]	; (800bdf4 <srand+0x44>)
 800bdb4:	681d      	ldr	r5, [r3, #0]
 800bdb6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800bdb8:	4604      	mov	r4, r0
 800bdba:	b9b3      	cbnz	r3, 800bdea <srand+0x3a>
 800bdbc:	2018      	movs	r0, #24
 800bdbe:	f7ff f885 	bl	800aecc <malloc>
 800bdc2:	4602      	mov	r2, r0
 800bdc4:	63a8      	str	r0, [r5, #56]	; 0x38
 800bdc6:	b920      	cbnz	r0, 800bdd2 <srand+0x22>
 800bdc8:	4b0b      	ldr	r3, [pc, #44]	; (800bdf8 <srand+0x48>)
 800bdca:	480c      	ldr	r0, [pc, #48]	; (800bdfc <srand+0x4c>)
 800bdcc:	2142      	movs	r1, #66	; 0x42
 800bdce:	f000 ff59 	bl	800cc84 <__assert_func>
 800bdd2:	490b      	ldr	r1, [pc, #44]	; (800be00 <srand+0x50>)
 800bdd4:	4b0b      	ldr	r3, [pc, #44]	; (800be04 <srand+0x54>)
 800bdd6:	e9c0 1300 	strd	r1, r3, [r0]
 800bdda:	4b0b      	ldr	r3, [pc, #44]	; (800be08 <srand+0x58>)
 800bddc:	6083      	str	r3, [r0, #8]
 800bdde:	230b      	movs	r3, #11
 800bde0:	8183      	strh	r3, [r0, #12]
 800bde2:	2100      	movs	r1, #0
 800bde4:	2001      	movs	r0, #1
 800bde6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800bdea:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800bdec:	2200      	movs	r2, #0
 800bdee:	611c      	str	r4, [r3, #16]
 800bdf0:	615a      	str	r2, [r3, #20]
 800bdf2:	bd38      	pop	{r3, r4, r5, pc}
 800bdf4:	200001c8 	.word	0x200001c8
 800bdf8:	08010641 	.word	0x08010641
 800bdfc:	08010658 	.word	0x08010658
 800be00:	abcd330e 	.word	0xabcd330e
 800be04:	e66d1234 	.word	0xe66d1234
 800be08:	0005deec 	.word	0x0005deec

0800be0c <rand>:
 800be0c:	4b16      	ldr	r3, [pc, #88]	; (800be68 <rand+0x5c>)
 800be0e:	b510      	push	{r4, lr}
 800be10:	681c      	ldr	r4, [r3, #0]
 800be12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800be14:	b9b3      	cbnz	r3, 800be44 <rand+0x38>
 800be16:	2018      	movs	r0, #24
 800be18:	f7ff f858 	bl	800aecc <malloc>
 800be1c:	63a0      	str	r0, [r4, #56]	; 0x38
 800be1e:	b928      	cbnz	r0, 800be2c <rand+0x20>
 800be20:	4602      	mov	r2, r0
 800be22:	4b12      	ldr	r3, [pc, #72]	; (800be6c <rand+0x60>)
 800be24:	4812      	ldr	r0, [pc, #72]	; (800be70 <rand+0x64>)
 800be26:	214e      	movs	r1, #78	; 0x4e
 800be28:	f000 ff2c 	bl	800cc84 <__assert_func>
 800be2c:	4a11      	ldr	r2, [pc, #68]	; (800be74 <rand+0x68>)
 800be2e:	4b12      	ldr	r3, [pc, #72]	; (800be78 <rand+0x6c>)
 800be30:	e9c0 2300 	strd	r2, r3, [r0]
 800be34:	4b11      	ldr	r3, [pc, #68]	; (800be7c <rand+0x70>)
 800be36:	6083      	str	r3, [r0, #8]
 800be38:	230b      	movs	r3, #11
 800be3a:	8183      	strh	r3, [r0, #12]
 800be3c:	2201      	movs	r2, #1
 800be3e:	2300      	movs	r3, #0
 800be40:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800be44:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800be46:	4a0e      	ldr	r2, [pc, #56]	; (800be80 <rand+0x74>)
 800be48:	6920      	ldr	r0, [r4, #16]
 800be4a:	6963      	ldr	r3, [r4, #20]
 800be4c:	490d      	ldr	r1, [pc, #52]	; (800be84 <rand+0x78>)
 800be4e:	4342      	muls	r2, r0
 800be50:	fb01 2203 	mla	r2, r1, r3, r2
 800be54:	fba0 0101 	umull	r0, r1, r0, r1
 800be58:	1c43      	adds	r3, r0, #1
 800be5a:	eb42 0001 	adc.w	r0, r2, r1
 800be5e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800be62:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800be66:	bd10      	pop	{r4, pc}
 800be68:	200001c8 	.word	0x200001c8
 800be6c:	08010641 	.word	0x08010641
 800be70:	08010658 	.word	0x08010658
 800be74:	abcd330e 	.word	0xabcd330e
 800be78:	e66d1234 	.word	0xe66d1234
 800be7c:	0005deec 	.word	0x0005deec
 800be80:	5851f42d 	.word	0x5851f42d
 800be84:	4c957f2d 	.word	0x4c957f2d

0800be88 <_sbrk_r>:
 800be88:	b538      	push	{r3, r4, r5, lr}
 800be8a:	4d06      	ldr	r5, [pc, #24]	; (800bea4 <_sbrk_r+0x1c>)
 800be8c:	2300      	movs	r3, #0
 800be8e:	4604      	mov	r4, r0
 800be90:	4608      	mov	r0, r1
 800be92:	602b      	str	r3, [r5, #0]
 800be94:	f7f6 fc48 	bl	8002728 <_sbrk>
 800be98:	1c43      	adds	r3, r0, #1
 800be9a:	d102      	bne.n	800bea2 <_sbrk_r+0x1a>
 800be9c:	682b      	ldr	r3, [r5, #0]
 800be9e:	b103      	cbz	r3, 800bea2 <_sbrk_r+0x1a>
 800bea0:	6023      	str	r3, [r4, #0]
 800bea2:	bd38      	pop	{r3, r4, r5, pc}
 800bea4:	20005604 	.word	0x20005604

0800bea8 <nanf>:
 800bea8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800beb0 <nanf+0x8>
 800beac:	4770      	bx	lr
 800beae:	bf00      	nop
 800beb0:	7fc00000 	.word	0x7fc00000

0800beb4 <siprintf>:
 800beb4:	b40e      	push	{r1, r2, r3}
 800beb6:	b500      	push	{lr}
 800beb8:	b09c      	sub	sp, #112	; 0x70
 800beba:	ab1d      	add	r3, sp, #116	; 0x74
 800bebc:	9002      	str	r0, [sp, #8]
 800bebe:	9006      	str	r0, [sp, #24]
 800bec0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bec4:	4809      	ldr	r0, [pc, #36]	; (800beec <siprintf+0x38>)
 800bec6:	9107      	str	r1, [sp, #28]
 800bec8:	9104      	str	r1, [sp, #16]
 800beca:	4909      	ldr	r1, [pc, #36]	; (800bef0 <siprintf+0x3c>)
 800becc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bed0:	9105      	str	r1, [sp, #20]
 800bed2:	6800      	ldr	r0, [r0, #0]
 800bed4:	9301      	str	r3, [sp, #4]
 800bed6:	a902      	add	r1, sp, #8
 800bed8:	f002 fe62 	bl	800eba0 <_svfiprintf_r>
 800bedc:	9b02      	ldr	r3, [sp, #8]
 800bede:	2200      	movs	r2, #0
 800bee0:	701a      	strb	r2, [r3, #0]
 800bee2:	b01c      	add	sp, #112	; 0x70
 800bee4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bee8:	b003      	add	sp, #12
 800beea:	4770      	bx	lr
 800beec:	200001c8 	.word	0x200001c8
 800bef0:	ffff0208 	.word	0xffff0208

0800bef4 <sulp>:
 800bef4:	b570      	push	{r4, r5, r6, lr}
 800bef6:	4604      	mov	r4, r0
 800bef8:	460d      	mov	r5, r1
 800befa:	ec45 4b10 	vmov	d0, r4, r5
 800befe:	4616      	mov	r6, r2
 800bf00:	f002 fc8e 	bl	800e820 <__ulp>
 800bf04:	ec51 0b10 	vmov	r0, r1, d0
 800bf08:	b17e      	cbz	r6, 800bf2a <sulp+0x36>
 800bf0a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bf0e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	dd09      	ble.n	800bf2a <sulp+0x36>
 800bf16:	051b      	lsls	r3, r3, #20
 800bf18:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bf1c:	2400      	movs	r4, #0
 800bf1e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bf22:	4622      	mov	r2, r4
 800bf24:	462b      	mov	r3, r5
 800bf26:	f7f4 fb8f 	bl	8000648 <__aeabi_dmul>
 800bf2a:	bd70      	pop	{r4, r5, r6, pc}
 800bf2c:	0000      	movs	r0, r0
	...

0800bf30 <_strtod_l>:
 800bf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf34:	ed2d 8b02 	vpush	{d8}
 800bf38:	b09d      	sub	sp, #116	; 0x74
 800bf3a:	461f      	mov	r7, r3
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	9318      	str	r3, [sp, #96]	; 0x60
 800bf40:	4ba2      	ldr	r3, [pc, #648]	; (800c1cc <_strtod_l+0x29c>)
 800bf42:	9213      	str	r2, [sp, #76]	; 0x4c
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	9305      	str	r3, [sp, #20]
 800bf48:	4604      	mov	r4, r0
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	4688      	mov	r8, r1
 800bf4e:	f7f4 f967 	bl	8000220 <strlen>
 800bf52:	f04f 0a00 	mov.w	sl, #0
 800bf56:	4605      	mov	r5, r0
 800bf58:	f04f 0b00 	mov.w	fp, #0
 800bf5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bf60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf62:	781a      	ldrb	r2, [r3, #0]
 800bf64:	2a2b      	cmp	r2, #43	; 0x2b
 800bf66:	d04e      	beq.n	800c006 <_strtod_l+0xd6>
 800bf68:	d83b      	bhi.n	800bfe2 <_strtod_l+0xb2>
 800bf6a:	2a0d      	cmp	r2, #13
 800bf6c:	d834      	bhi.n	800bfd8 <_strtod_l+0xa8>
 800bf6e:	2a08      	cmp	r2, #8
 800bf70:	d834      	bhi.n	800bfdc <_strtod_l+0xac>
 800bf72:	2a00      	cmp	r2, #0
 800bf74:	d03e      	beq.n	800bff4 <_strtod_l+0xc4>
 800bf76:	2300      	movs	r3, #0
 800bf78:	930a      	str	r3, [sp, #40]	; 0x28
 800bf7a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bf7c:	7833      	ldrb	r3, [r6, #0]
 800bf7e:	2b30      	cmp	r3, #48	; 0x30
 800bf80:	f040 80b0 	bne.w	800c0e4 <_strtod_l+0x1b4>
 800bf84:	7873      	ldrb	r3, [r6, #1]
 800bf86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bf8a:	2b58      	cmp	r3, #88	; 0x58
 800bf8c:	d168      	bne.n	800c060 <_strtod_l+0x130>
 800bf8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf90:	9301      	str	r3, [sp, #4]
 800bf92:	ab18      	add	r3, sp, #96	; 0x60
 800bf94:	9702      	str	r7, [sp, #8]
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	4a8d      	ldr	r2, [pc, #564]	; (800c1d0 <_strtod_l+0x2a0>)
 800bf9a:	ab19      	add	r3, sp, #100	; 0x64
 800bf9c:	a917      	add	r1, sp, #92	; 0x5c
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f001 fd82 	bl	800daa8 <__gethex>
 800bfa4:	f010 0707 	ands.w	r7, r0, #7
 800bfa8:	4605      	mov	r5, r0
 800bfaa:	d005      	beq.n	800bfb8 <_strtod_l+0x88>
 800bfac:	2f06      	cmp	r7, #6
 800bfae:	d12c      	bne.n	800c00a <_strtod_l+0xda>
 800bfb0:	3601      	adds	r6, #1
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	9617      	str	r6, [sp, #92]	; 0x5c
 800bfb6:	930a      	str	r3, [sp, #40]	; 0x28
 800bfb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	f040 8590 	bne.w	800cae0 <_strtod_l+0xbb0>
 800bfc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfc2:	b1eb      	cbz	r3, 800c000 <_strtod_l+0xd0>
 800bfc4:	4652      	mov	r2, sl
 800bfc6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bfca:	ec43 2b10 	vmov	d0, r2, r3
 800bfce:	b01d      	add	sp, #116	; 0x74
 800bfd0:	ecbd 8b02 	vpop	{d8}
 800bfd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfd8:	2a20      	cmp	r2, #32
 800bfda:	d1cc      	bne.n	800bf76 <_strtod_l+0x46>
 800bfdc:	3301      	adds	r3, #1
 800bfde:	9317      	str	r3, [sp, #92]	; 0x5c
 800bfe0:	e7be      	b.n	800bf60 <_strtod_l+0x30>
 800bfe2:	2a2d      	cmp	r2, #45	; 0x2d
 800bfe4:	d1c7      	bne.n	800bf76 <_strtod_l+0x46>
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	920a      	str	r2, [sp, #40]	; 0x28
 800bfea:	1c5a      	adds	r2, r3, #1
 800bfec:	9217      	str	r2, [sp, #92]	; 0x5c
 800bfee:	785b      	ldrb	r3, [r3, #1]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d1c2      	bne.n	800bf7a <_strtod_l+0x4a>
 800bff4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bff6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f040 856e 	bne.w	800cadc <_strtod_l+0xbac>
 800c000:	4652      	mov	r2, sl
 800c002:	465b      	mov	r3, fp
 800c004:	e7e1      	b.n	800bfca <_strtod_l+0x9a>
 800c006:	2200      	movs	r2, #0
 800c008:	e7ee      	b.n	800bfe8 <_strtod_l+0xb8>
 800c00a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c00c:	b13a      	cbz	r2, 800c01e <_strtod_l+0xee>
 800c00e:	2135      	movs	r1, #53	; 0x35
 800c010:	a81a      	add	r0, sp, #104	; 0x68
 800c012:	f002 fd10 	bl	800ea36 <__copybits>
 800c016:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c018:	4620      	mov	r0, r4
 800c01a:	f002 f8cf 	bl	800e1bc <_Bfree>
 800c01e:	3f01      	subs	r7, #1
 800c020:	2f04      	cmp	r7, #4
 800c022:	d806      	bhi.n	800c032 <_strtod_l+0x102>
 800c024:	e8df f007 	tbb	[pc, r7]
 800c028:	1714030a 	.word	0x1714030a
 800c02c:	0a          	.byte	0x0a
 800c02d:	00          	.byte	0x00
 800c02e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c032:	0728      	lsls	r0, r5, #28
 800c034:	d5c0      	bpl.n	800bfb8 <_strtod_l+0x88>
 800c036:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c03a:	e7bd      	b.n	800bfb8 <_strtod_l+0x88>
 800c03c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c040:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c042:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c046:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c04a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c04e:	e7f0      	b.n	800c032 <_strtod_l+0x102>
 800c050:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c1d4 <_strtod_l+0x2a4>
 800c054:	e7ed      	b.n	800c032 <_strtod_l+0x102>
 800c056:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c05a:	f04f 3aff 	mov.w	sl, #4294967295
 800c05e:	e7e8      	b.n	800c032 <_strtod_l+0x102>
 800c060:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c062:	1c5a      	adds	r2, r3, #1
 800c064:	9217      	str	r2, [sp, #92]	; 0x5c
 800c066:	785b      	ldrb	r3, [r3, #1]
 800c068:	2b30      	cmp	r3, #48	; 0x30
 800c06a:	d0f9      	beq.n	800c060 <_strtod_l+0x130>
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d0a3      	beq.n	800bfb8 <_strtod_l+0x88>
 800c070:	2301      	movs	r3, #1
 800c072:	f04f 0900 	mov.w	r9, #0
 800c076:	9304      	str	r3, [sp, #16]
 800c078:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c07a:	9308      	str	r3, [sp, #32]
 800c07c:	f8cd 901c 	str.w	r9, [sp, #28]
 800c080:	464f      	mov	r7, r9
 800c082:	220a      	movs	r2, #10
 800c084:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c086:	7806      	ldrb	r6, [r0, #0]
 800c088:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c08c:	b2d9      	uxtb	r1, r3
 800c08e:	2909      	cmp	r1, #9
 800c090:	d92a      	bls.n	800c0e8 <_strtod_l+0x1b8>
 800c092:	9905      	ldr	r1, [sp, #20]
 800c094:	462a      	mov	r2, r5
 800c096:	f002 ffe7 	bl	800f068 <strncmp>
 800c09a:	b398      	cbz	r0, 800c104 <_strtod_l+0x1d4>
 800c09c:	2000      	movs	r0, #0
 800c09e:	4632      	mov	r2, r6
 800c0a0:	463d      	mov	r5, r7
 800c0a2:	9005      	str	r0, [sp, #20]
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2a65      	cmp	r2, #101	; 0x65
 800c0a8:	d001      	beq.n	800c0ae <_strtod_l+0x17e>
 800c0aa:	2a45      	cmp	r2, #69	; 0x45
 800c0ac:	d118      	bne.n	800c0e0 <_strtod_l+0x1b0>
 800c0ae:	b91d      	cbnz	r5, 800c0b8 <_strtod_l+0x188>
 800c0b0:	9a04      	ldr	r2, [sp, #16]
 800c0b2:	4302      	orrs	r2, r0
 800c0b4:	d09e      	beq.n	800bff4 <_strtod_l+0xc4>
 800c0b6:	2500      	movs	r5, #0
 800c0b8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c0bc:	f108 0201 	add.w	r2, r8, #1
 800c0c0:	9217      	str	r2, [sp, #92]	; 0x5c
 800c0c2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c0c6:	2a2b      	cmp	r2, #43	; 0x2b
 800c0c8:	d075      	beq.n	800c1b6 <_strtod_l+0x286>
 800c0ca:	2a2d      	cmp	r2, #45	; 0x2d
 800c0cc:	d07b      	beq.n	800c1c6 <_strtod_l+0x296>
 800c0ce:	f04f 0c00 	mov.w	ip, #0
 800c0d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c0d6:	2909      	cmp	r1, #9
 800c0d8:	f240 8082 	bls.w	800c1e0 <_strtod_l+0x2b0>
 800c0dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c0e0:	2600      	movs	r6, #0
 800c0e2:	e09d      	b.n	800c220 <_strtod_l+0x2f0>
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	e7c4      	b.n	800c072 <_strtod_l+0x142>
 800c0e8:	2f08      	cmp	r7, #8
 800c0ea:	bfd8      	it	le
 800c0ec:	9907      	ldrle	r1, [sp, #28]
 800c0ee:	f100 0001 	add.w	r0, r0, #1
 800c0f2:	bfda      	itte	le
 800c0f4:	fb02 3301 	mlale	r3, r2, r1, r3
 800c0f8:	9307      	strle	r3, [sp, #28]
 800c0fa:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c0fe:	3701      	adds	r7, #1
 800c100:	9017      	str	r0, [sp, #92]	; 0x5c
 800c102:	e7bf      	b.n	800c084 <_strtod_l+0x154>
 800c104:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c106:	195a      	adds	r2, r3, r5
 800c108:	9217      	str	r2, [sp, #92]	; 0x5c
 800c10a:	5d5a      	ldrb	r2, [r3, r5]
 800c10c:	2f00      	cmp	r7, #0
 800c10e:	d037      	beq.n	800c180 <_strtod_l+0x250>
 800c110:	9005      	str	r0, [sp, #20]
 800c112:	463d      	mov	r5, r7
 800c114:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c118:	2b09      	cmp	r3, #9
 800c11a:	d912      	bls.n	800c142 <_strtod_l+0x212>
 800c11c:	2301      	movs	r3, #1
 800c11e:	e7c2      	b.n	800c0a6 <_strtod_l+0x176>
 800c120:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c122:	1c5a      	adds	r2, r3, #1
 800c124:	9217      	str	r2, [sp, #92]	; 0x5c
 800c126:	785a      	ldrb	r2, [r3, #1]
 800c128:	3001      	adds	r0, #1
 800c12a:	2a30      	cmp	r2, #48	; 0x30
 800c12c:	d0f8      	beq.n	800c120 <_strtod_l+0x1f0>
 800c12e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c132:	2b08      	cmp	r3, #8
 800c134:	f200 84d9 	bhi.w	800caea <_strtod_l+0xbba>
 800c138:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c13a:	9005      	str	r0, [sp, #20]
 800c13c:	2000      	movs	r0, #0
 800c13e:	9308      	str	r3, [sp, #32]
 800c140:	4605      	mov	r5, r0
 800c142:	3a30      	subs	r2, #48	; 0x30
 800c144:	f100 0301 	add.w	r3, r0, #1
 800c148:	d014      	beq.n	800c174 <_strtod_l+0x244>
 800c14a:	9905      	ldr	r1, [sp, #20]
 800c14c:	4419      	add	r1, r3
 800c14e:	9105      	str	r1, [sp, #20]
 800c150:	462b      	mov	r3, r5
 800c152:	eb00 0e05 	add.w	lr, r0, r5
 800c156:	210a      	movs	r1, #10
 800c158:	4573      	cmp	r3, lr
 800c15a:	d113      	bne.n	800c184 <_strtod_l+0x254>
 800c15c:	182b      	adds	r3, r5, r0
 800c15e:	2b08      	cmp	r3, #8
 800c160:	f105 0501 	add.w	r5, r5, #1
 800c164:	4405      	add	r5, r0
 800c166:	dc1c      	bgt.n	800c1a2 <_strtod_l+0x272>
 800c168:	9907      	ldr	r1, [sp, #28]
 800c16a:	230a      	movs	r3, #10
 800c16c:	fb03 2301 	mla	r3, r3, r1, r2
 800c170:	9307      	str	r3, [sp, #28]
 800c172:	2300      	movs	r3, #0
 800c174:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c176:	1c51      	adds	r1, r2, #1
 800c178:	9117      	str	r1, [sp, #92]	; 0x5c
 800c17a:	7852      	ldrb	r2, [r2, #1]
 800c17c:	4618      	mov	r0, r3
 800c17e:	e7c9      	b.n	800c114 <_strtod_l+0x1e4>
 800c180:	4638      	mov	r0, r7
 800c182:	e7d2      	b.n	800c12a <_strtod_l+0x1fa>
 800c184:	2b08      	cmp	r3, #8
 800c186:	dc04      	bgt.n	800c192 <_strtod_l+0x262>
 800c188:	9e07      	ldr	r6, [sp, #28]
 800c18a:	434e      	muls	r6, r1
 800c18c:	9607      	str	r6, [sp, #28]
 800c18e:	3301      	adds	r3, #1
 800c190:	e7e2      	b.n	800c158 <_strtod_l+0x228>
 800c192:	f103 0c01 	add.w	ip, r3, #1
 800c196:	f1bc 0f10 	cmp.w	ip, #16
 800c19a:	bfd8      	it	le
 800c19c:	fb01 f909 	mulle.w	r9, r1, r9
 800c1a0:	e7f5      	b.n	800c18e <_strtod_l+0x25e>
 800c1a2:	2d10      	cmp	r5, #16
 800c1a4:	bfdc      	itt	le
 800c1a6:	230a      	movle	r3, #10
 800c1a8:	fb03 2909 	mlale	r9, r3, r9, r2
 800c1ac:	e7e1      	b.n	800c172 <_strtod_l+0x242>
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	9305      	str	r3, [sp, #20]
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	e77c      	b.n	800c0b0 <_strtod_l+0x180>
 800c1b6:	f04f 0c00 	mov.w	ip, #0
 800c1ba:	f108 0202 	add.w	r2, r8, #2
 800c1be:	9217      	str	r2, [sp, #92]	; 0x5c
 800c1c0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c1c4:	e785      	b.n	800c0d2 <_strtod_l+0x1a2>
 800c1c6:	f04f 0c01 	mov.w	ip, #1
 800c1ca:	e7f6      	b.n	800c1ba <_strtod_l+0x28a>
 800c1cc:	08010924 	.word	0x08010924
 800c1d0:	080106b4 	.word	0x080106b4
 800c1d4:	7ff00000 	.word	0x7ff00000
 800c1d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c1da:	1c51      	adds	r1, r2, #1
 800c1dc:	9117      	str	r1, [sp, #92]	; 0x5c
 800c1de:	7852      	ldrb	r2, [r2, #1]
 800c1e0:	2a30      	cmp	r2, #48	; 0x30
 800c1e2:	d0f9      	beq.n	800c1d8 <_strtod_l+0x2a8>
 800c1e4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c1e8:	2908      	cmp	r1, #8
 800c1ea:	f63f af79 	bhi.w	800c0e0 <_strtod_l+0x1b0>
 800c1ee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c1f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c1f4:	9206      	str	r2, [sp, #24]
 800c1f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c1f8:	1c51      	adds	r1, r2, #1
 800c1fa:	9117      	str	r1, [sp, #92]	; 0x5c
 800c1fc:	7852      	ldrb	r2, [r2, #1]
 800c1fe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c202:	2e09      	cmp	r6, #9
 800c204:	d937      	bls.n	800c276 <_strtod_l+0x346>
 800c206:	9e06      	ldr	r6, [sp, #24]
 800c208:	1b89      	subs	r1, r1, r6
 800c20a:	2908      	cmp	r1, #8
 800c20c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c210:	dc02      	bgt.n	800c218 <_strtod_l+0x2e8>
 800c212:	4576      	cmp	r6, lr
 800c214:	bfa8      	it	ge
 800c216:	4676      	movge	r6, lr
 800c218:	f1bc 0f00 	cmp.w	ip, #0
 800c21c:	d000      	beq.n	800c220 <_strtod_l+0x2f0>
 800c21e:	4276      	negs	r6, r6
 800c220:	2d00      	cmp	r5, #0
 800c222:	d14d      	bne.n	800c2c0 <_strtod_l+0x390>
 800c224:	9904      	ldr	r1, [sp, #16]
 800c226:	4301      	orrs	r1, r0
 800c228:	f47f aec6 	bne.w	800bfb8 <_strtod_l+0x88>
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	f47f aee1 	bne.w	800bff4 <_strtod_l+0xc4>
 800c232:	2a69      	cmp	r2, #105	; 0x69
 800c234:	d027      	beq.n	800c286 <_strtod_l+0x356>
 800c236:	dc24      	bgt.n	800c282 <_strtod_l+0x352>
 800c238:	2a49      	cmp	r2, #73	; 0x49
 800c23a:	d024      	beq.n	800c286 <_strtod_l+0x356>
 800c23c:	2a4e      	cmp	r2, #78	; 0x4e
 800c23e:	f47f aed9 	bne.w	800bff4 <_strtod_l+0xc4>
 800c242:	499f      	ldr	r1, [pc, #636]	; (800c4c0 <_strtod_l+0x590>)
 800c244:	a817      	add	r0, sp, #92	; 0x5c
 800c246:	f001 fe87 	bl	800df58 <__match>
 800c24a:	2800      	cmp	r0, #0
 800c24c:	f43f aed2 	beq.w	800bff4 <_strtod_l+0xc4>
 800c250:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	2b28      	cmp	r3, #40	; 0x28
 800c256:	d12d      	bne.n	800c2b4 <_strtod_l+0x384>
 800c258:	499a      	ldr	r1, [pc, #616]	; (800c4c4 <_strtod_l+0x594>)
 800c25a:	aa1a      	add	r2, sp, #104	; 0x68
 800c25c:	a817      	add	r0, sp, #92	; 0x5c
 800c25e:	f001 fe8f 	bl	800df80 <__hexnan>
 800c262:	2805      	cmp	r0, #5
 800c264:	d126      	bne.n	800c2b4 <_strtod_l+0x384>
 800c266:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c268:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c26c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c270:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c274:	e6a0      	b.n	800bfb8 <_strtod_l+0x88>
 800c276:	210a      	movs	r1, #10
 800c278:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c27c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c280:	e7b9      	b.n	800c1f6 <_strtod_l+0x2c6>
 800c282:	2a6e      	cmp	r2, #110	; 0x6e
 800c284:	e7db      	b.n	800c23e <_strtod_l+0x30e>
 800c286:	4990      	ldr	r1, [pc, #576]	; (800c4c8 <_strtod_l+0x598>)
 800c288:	a817      	add	r0, sp, #92	; 0x5c
 800c28a:	f001 fe65 	bl	800df58 <__match>
 800c28e:	2800      	cmp	r0, #0
 800c290:	f43f aeb0 	beq.w	800bff4 <_strtod_l+0xc4>
 800c294:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c296:	498d      	ldr	r1, [pc, #564]	; (800c4cc <_strtod_l+0x59c>)
 800c298:	3b01      	subs	r3, #1
 800c29a:	a817      	add	r0, sp, #92	; 0x5c
 800c29c:	9317      	str	r3, [sp, #92]	; 0x5c
 800c29e:	f001 fe5b 	bl	800df58 <__match>
 800c2a2:	b910      	cbnz	r0, 800c2aa <_strtod_l+0x37a>
 800c2a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	9317      	str	r3, [sp, #92]	; 0x5c
 800c2aa:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c4dc <_strtod_l+0x5ac>
 800c2ae:	f04f 0a00 	mov.w	sl, #0
 800c2b2:	e681      	b.n	800bfb8 <_strtod_l+0x88>
 800c2b4:	4886      	ldr	r0, [pc, #536]	; (800c4d0 <_strtod_l+0x5a0>)
 800c2b6:	f002 fecf 	bl	800f058 <nan>
 800c2ba:	ec5b ab10 	vmov	sl, fp, d0
 800c2be:	e67b      	b.n	800bfb8 <_strtod_l+0x88>
 800c2c0:	9b05      	ldr	r3, [sp, #20]
 800c2c2:	9807      	ldr	r0, [sp, #28]
 800c2c4:	1af3      	subs	r3, r6, r3
 800c2c6:	2f00      	cmp	r7, #0
 800c2c8:	bf08      	it	eq
 800c2ca:	462f      	moveq	r7, r5
 800c2cc:	2d10      	cmp	r5, #16
 800c2ce:	9306      	str	r3, [sp, #24]
 800c2d0:	46a8      	mov	r8, r5
 800c2d2:	bfa8      	it	ge
 800c2d4:	f04f 0810 	movge.w	r8, #16
 800c2d8:	f7f4 f93c 	bl	8000554 <__aeabi_ui2d>
 800c2dc:	2d09      	cmp	r5, #9
 800c2de:	4682      	mov	sl, r0
 800c2e0:	468b      	mov	fp, r1
 800c2e2:	dd13      	ble.n	800c30c <_strtod_l+0x3dc>
 800c2e4:	4b7b      	ldr	r3, [pc, #492]	; (800c4d4 <_strtod_l+0x5a4>)
 800c2e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c2ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c2ee:	f7f4 f9ab 	bl	8000648 <__aeabi_dmul>
 800c2f2:	4682      	mov	sl, r0
 800c2f4:	4648      	mov	r0, r9
 800c2f6:	468b      	mov	fp, r1
 800c2f8:	f7f4 f92c 	bl	8000554 <__aeabi_ui2d>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	460b      	mov	r3, r1
 800c300:	4650      	mov	r0, sl
 800c302:	4659      	mov	r1, fp
 800c304:	f7f3 ffea 	bl	80002dc <__adddf3>
 800c308:	4682      	mov	sl, r0
 800c30a:	468b      	mov	fp, r1
 800c30c:	2d0f      	cmp	r5, #15
 800c30e:	dc38      	bgt.n	800c382 <_strtod_l+0x452>
 800c310:	9b06      	ldr	r3, [sp, #24]
 800c312:	2b00      	cmp	r3, #0
 800c314:	f43f ae50 	beq.w	800bfb8 <_strtod_l+0x88>
 800c318:	dd24      	ble.n	800c364 <_strtod_l+0x434>
 800c31a:	2b16      	cmp	r3, #22
 800c31c:	dc0b      	bgt.n	800c336 <_strtod_l+0x406>
 800c31e:	496d      	ldr	r1, [pc, #436]	; (800c4d4 <_strtod_l+0x5a4>)
 800c320:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c324:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c328:	4652      	mov	r2, sl
 800c32a:	465b      	mov	r3, fp
 800c32c:	f7f4 f98c 	bl	8000648 <__aeabi_dmul>
 800c330:	4682      	mov	sl, r0
 800c332:	468b      	mov	fp, r1
 800c334:	e640      	b.n	800bfb8 <_strtod_l+0x88>
 800c336:	9a06      	ldr	r2, [sp, #24]
 800c338:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c33c:	4293      	cmp	r3, r2
 800c33e:	db20      	blt.n	800c382 <_strtod_l+0x452>
 800c340:	4c64      	ldr	r4, [pc, #400]	; (800c4d4 <_strtod_l+0x5a4>)
 800c342:	f1c5 050f 	rsb	r5, r5, #15
 800c346:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c34a:	4652      	mov	r2, sl
 800c34c:	465b      	mov	r3, fp
 800c34e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c352:	f7f4 f979 	bl	8000648 <__aeabi_dmul>
 800c356:	9b06      	ldr	r3, [sp, #24]
 800c358:	1b5d      	subs	r5, r3, r5
 800c35a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c35e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c362:	e7e3      	b.n	800c32c <_strtod_l+0x3fc>
 800c364:	9b06      	ldr	r3, [sp, #24]
 800c366:	3316      	adds	r3, #22
 800c368:	db0b      	blt.n	800c382 <_strtod_l+0x452>
 800c36a:	9b05      	ldr	r3, [sp, #20]
 800c36c:	1b9e      	subs	r6, r3, r6
 800c36e:	4b59      	ldr	r3, [pc, #356]	; (800c4d4 <_strtod_l+0x5a4>)
 800c370:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c374:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c378:	4650      	mov	r0, sl
 800c37a:	4659      	mov	r1, fp
 800c37c:	f7f4 fa8e 	bl	800089c <__aeabi_ddiv>
 800c380:	e7d6      	b.n	800c330 <_strtod_l+0x400>
 800c382:	9b06      	ldr	r3, [sp, #24]
 800c384:	eba5 0808 	sub.w	r8, r5, r8
 800c388:	4498      	add	r8, r3
 800c38a:	f1b8 0f00 	cmp.w	r8, #0
 800c38e:	dd74      	ble.n	800c47a <_strtod_l+0x54a>
 800c390:	f018 030f 	ands.w	r3, r8, #15
 800c394:	d00a      	beq.n	800c3ac <_strtod_l+0x47c>
 800c396:	494f      	ldr	r1, [pc, #316]	; (800c4d4 <_strtod_l+0x5a4>)
 800c398:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c39c:	4652      	mov	r2, sl
 800c39e:	465b      	mov	r3, fp
 800c3a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3a4:	f7f4 f950 	bl	8000648 <__aeabi_dmul>
 800c3a8:	4682      	mov	sl, r0
 800c3aa:	468b      	mov	fp, r1
 800c3ac:	f038 080f 	bics.w	r8, r8, #15
 800c3b0:	d04f      	beq.n	800c452 <_strtod_l+0x522>
 800c3b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c3b6:	dd22      	ble.n	800c3fe <_strtod_l+0x4ce>
 800c3b8:	2500      	movs	r5, #0
 800c3ba:	462e      	mov	r6, r5
 800c3bc:	9507      	str	r5, [sp, #28]
 800c3be:	9505      	str	r5, [sp, #20]
 800c3c0:	2322      	movs	r3, #34	; 0x22
 800c3c2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c4dc <_strtod_l+0x5ac>
 800c3c6:	6023      	str	r3, [r4, #0]
 800c3c8:	f04f 0a00 	mov.w	sl, #0
 800c3cc:	9b07      	ldr	r3, [sp, #28]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	f43f adf2 	beq.w	800bfb8 <_strtod_l+0x88>
 800c3d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	f001 fef0 	bl	800e1bc <_Bfree>
 800c3dc:	9905      	ldr	r1, [sp, #20]
 800c3de:	4620      	mov	r0, r4
 800c3e0:	f001 feec 	bl	800e1bc <_Bfree>
 800c3e4:	4631      	mov	r1, r6
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	f001 fee8 	bl	800e1bc <_Bfree>
 800c3ec:	9907      	ldr	r1, [sp, #28]
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	f001 fee4 	bl	800e1bc <_Bfree>
 800c3f4:	4629      	mov	r1, r5
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	f001 fee0 	bl	800e1bc <_Bfree>
 800c3fc:	e5dc      	b.n	800bfb8 <_strtod_l+0x88>
 800c3fe:	4b36      	ldr	r3, [pc, #216]	; (800c4d8 <_strtod_l+0x5a8>)
 800c400:	9304      	str	r3, [sp, #16]
 800c402:	2300      	movs	r3, #0
 800c404:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c408:	4650      	mov	r0, sl
 800c40a:	4659      	mov	r1, fp
 800c40c:	4699      	mov	r9, r3
 800c40e:	f1b8 0f01 	cmp.w	r8, #1
 800c412:	dc21      	bgt.n	800c458 <_strtod_l+0x528>
 800c414:	b10b      	cbz	r3, 800c41a <_strtod_l+0x4ea>
 800c416:	4682      	mov	sl, r0
 800c418:	468b      	mov	fp, r1
 800c41a:	4b2f      	ldr	r3, [pc, #188]	; (800c4d8 <_strtod_l+0x5a8>)
 800c41c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c420:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c424:	4652      	mov	r2, sl
 800c426:	465b      	mov	r3, fp
 800c428:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c42c:	f7f4 f90c 	bl	8000648 <__aeabi_dmul>
 800c430:	4b2a      	ldr	r3, [pc, #168]	; (800c4dc <_strtod_l+0x5ac>)
 800c432:	460a      	mov	r2, r1
 800c434:	400b      	ands	r3, r1
 800c436:	492a      	ldr	r1, [pc, #168]	; (800c4e0 <_strtod_l+0x5b0>)
 800c438:	428b      	cmp	r3, r1
 800c43a:	4682      	mov	sl, r0
 800c43c:	d8bc      	bhi.n	800c3b8 <_strtod_l+0x488>
 800c43e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c442:	428b      	cmp	r3, r1
 800c444:	bf86      	itte	hi
 800c446:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c4e4 <_strtod_l+0x5b4>
 800c44a:	f04f 3aff 	movhi.w	sl, #4294967295
 800c44e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c452:	2300      	movs	r3, #0
 800c454:	9304      	str	r3, [sp, #16]
 800c456:	e084      	b.n	800c562 <_strtod_l+0x632>
 800c458:	f018 0f01 	tst.w	r8, #1
 800c45c:	d005      	beq.n	800c46a <_strtod_l+0x53a>
 800c45e:	9b04      	ldr	r3, [sp, #16]
 800c460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c464:	f7f4 f8f0 	bl	8000648 <__aeabi_dmul>
 800c468:	2301      	movs	r3, #1
 800c46a:	9a04      	ldr	r2, [sp, #16]
 800c46c:	3208      	adds	r2, #8
 800c46e:	f109 0901 	add.w	r9, r9, #1
 800c472:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c476:	9204      	str	r2, [sp, #16]
 800c478:	e7c9      	b.n	800c40e <_strtod_l+0x4de>
 800c47a:	d0ea      	beq.n	800c452 <_strtod_l+0x522>
 800c47c:	f1c8 0800 	rsb	r8, r8, #0
 800c480:	f018 020f 	ands.w	r2, r8, #15
 800c484:	d00a      	beq.n	800c49c <_strtod_l+0x56c>
 800c486:	4b13      	ldr	r3, [pc, #76]	; (800c4d4 <_strtod_l+0x5a4>)
 800c488:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c48c:	4650      	mov	r0, sl
 800c48e:	4659      	mov	r1, fp
 800c490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c494:	f7f4 fa02 	bl	800089c <__aeabi_ddiv>
 800c498:	4682      	mov	sl, r0
 800c49a:	468b      	mov	fp, r1
 800c49c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c4a0:	d0d7      	beq.n	800c452 <_strtod_l+0x522>
 800c4a2:	f1b8 0f1f 	cmp.w	r8, #31
 800c4a6:	dd1f      	ble.n	800c4e8 <_strtod_l+0x5b8>
 800c4a8:	2500      	movs	r5, #0
 800c4aa:	462e      	mov	r6, r5
 800c4ac:	9507      	str	r5, [sp, #28]
 800c4ae:	9505      	str	r5, [sp, #20]
 800c4b0:	2322      	movs	r3, #34	; 0x22
 800c4b2:	f04f 0a00 	mov.w	sl, #0
 800c4b6:	f04f 0b00 	mov.w	fp, #0
 800c4ba:	6023      	str	r3, [r4, #0]
 800c4bc:	e786      	b.n	800c3cc <_strtod_l+0x49c>
 800c4be:	bf00      	nop
 800c4c0:	08010615 	.word	0x08010615
 800c4c4:	080106c8 	.word	0x080106c8
 800c4c8:	0801060d 	.word	0x0801060d
 800c4cc:	08010848 	.word	0x08010848
 800c4d0:	08010743 	.word	0x08010743
 800c4d4:	080109c0 	.word	0x080109c0
 800c4d8:	08010998 	.word	0x08010998
 800c4dc:	7ff00000 	.word	0x7ff00000
 800c4e0:	7ca00000 	.word	0x7ca00000
 800c4e4:	7fefffff 	.word	0x7fefffff
 800c4e8:	f018 0310 	ands.w	r3, r8, #16
 800c4ec:	bf18      	it	ne
 800c4ee:	236a      	movne	r3, #106	; 0x6a
 800c4f0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c8a0 <_strtod_l+0x970>
 800c4f4:	9304      	str	r3, [sp, #16]
 800c4f6:	4650      	mov	r0, sl
 800c4f8:	4659      	mov	r1, fp
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	f018 0f01 	tst.w	r8, #1
 800c500:	d004      	beq.n	800c50c <_strtod_l+0x5dc>
 800c502:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c506:	f7f4 f89f 	bl	8000648 <__aeabi_dmul>
 800c50a:	2301      	movs	r3, #1
 800c50c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c510:	f109 0908 	add.w	r9, r9, #8
 800c514:	d1f2      	bne.n	800c4fc <_strtod_l+0x5cc>
 800c516:	b10b      	cbz	r3, 800c51c <_strtod_l+0x5ec>
 800c518:	4682      	mov	sl, r0
 800c51a:	468b      	mov	fp, r1
 800c51c:	9b04      	ldr	r3, [sp, #16]
 800c51e:	b1c3      	cbz	r3, 800c552 <_strtod_l+0x622>
 800c520:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c524:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c528:	2b00      	cmp	r3, #0
 800c52a:	4659      	mov	r1, fp
 800c52c:	dd11      	ble.n	800c552 <_strtod_l+0x622>
 800c52e:	2b1f      	cmp	r3, #31
 800c530:	f340 8124 	ble.w	800c77c <_strtod_l+0x84c>
 800c534:	2b34      	cmp	r3, #52	; 0x34
 800c536:	bfde      	ittt	le
 800c538:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c53c:	f04f 33ff 	movle.w	r3, #4294967295
 800c540:	fa03 f202 	lslle.w	r2, r3, r2
 800c544:	f04f 0a00 	mov.w	sl, #0
 800c548:	bfcc      	ite	gt
 800c54a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c54e:	ea02 0b01 	andle.w	fp, r2, r1
 800c552:	2200      	movs	r2, #0
 800c554:	2300      	movs	r3, #0
 800c556:	4650      	mov	r0, sl
 800c558:	4659      	mov	r1, fp
 800c55a:	f7f4 fadd 	bl	8000b18 <__aeabi_dcmpeq>
 800c55e:	2800      	cmp	r0, #0
 800c560:	d1a2      	bne.n	800c4a8 <_strtod_l+0x578>
 800c562:	9b07      	ldr	r3, [sp, #28]
 800c564:	9300      	str	r3, [sp, #0]
 800c566:	9908      	ldr	r1, [sp, #32]
 800c568:	462b      	mov	r3, r5
 800c56a:	463a      	mov	r2, r7
 800c56c:	4620      	mov	r0, r4
 800c56e:	f001 fe8d 	bl	800e28c <__s2b>
 800c572:	9007      	str	r0, [sp, #28]
 800c574:	2800      	cmp	r0, #0
 800c576:	f43f af1f 	beq.w	800c3b8 <_strtod_l+0x488>
 800c57a:	9b05      	ldr	r3, [sp, #20]
 800c57c:	1b9e      	subs	r6, r3, r6
 800c57e:	9b06      	ldr	r3, [sp, #24]
 800c580:	2b00      	cmp	r3, #0
 800c582:	bfb4      	ite	lt
 800c584:	4633      	movlt	r3, r6
 800c586:	2300      	movge	r3, #0
 800c588:	930c      	str	r3, [sp, #48]	; 0x30
 800c58a:	9b06      	ldr	r3, [sp, #24]
 800c58c:	2500      	movs	r5, #0
 800c58e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c592:	9312      	str	r3, [sp, #72]	; 0x48
 800c594:	462e      	mov	r6, r5
 800c596:	9b07      	ldr	r3, [sp, #28]
 800c598:	4620      	mov	r0, r4
 800c59a:	6859      	ldr	r1, [r3, #4]
 800c59c:	f001 fdce 	bl	800e13c <_Balloc>
 800c5a0:	9005      	str	r0, [sp, #20]
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	f43f af0c 	beq.w	800c3c0 <_strtod_l+0x490>
 800c5a8:	9b07      	ldr	r3, [sp, #28]
 800c5aa:	691a      	ldr	r2, [r3, #16]
 800c5ac:	3202      	adds	r2, #2
 800c5ae:	f103 010c 	add.w	r1, r3, #12
 800c5b2:	0092      	lsls	r2, r2, #2
 800c5b4:	300c      	adds	r0, #12
 800c5b6:	f001 fda7 	bl	800e108 <memcpy>
 800c5ba:	ec4b ab10 	vmov	d0, sl, fp
 800c5be:	aa1a      	add	r2, sp, #104	; 0x68
 800c5c0:	a919      	add	r1, sp, #100	; 0x64
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	f002 f9a8 	bl	800e918 <__d2b>
 800c5c8:	ec4b ab18 	vmov	d8, sl, fp
 800c5cc:	9018      	str	r0, [sp, #96]	; 0x60
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	f43f aef6 	beq.w	800c3c0 <_strtod_l+0x490>
 800c5d4:	2101      	movs	r1, #1
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	f001 fef2 	bl	800e3c0 <__i2b>
 800c5dc:	4606      	mov	r6, r0
 800c5de:	2800      	cmp	r0, #0
 800c5e0:	f43f aeee 	beq.w	800c3c0 <_strtod_l+0x490>
 800c5e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c5e6:	9904      	ldr	r1, [sp, #16]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	bfab      	itete	ge
 800c5ec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c5ee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c5f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c5f2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c5f6:	bfac      	ite	ge
 800c5f8:	eb03 0902 	addge.w	r9, r3, r2
 800c5fc:	1ad7      	sublt	r7, r2, r3
 800c5fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c600:	eba3 0801 	sub.w	r8, r3, r1
 800c604:	4490      	add	r8, r2
 800c606:	4ba1      	ldr	r3, [pc, #644]	; (800c88c <_strtod_l+0x95c>)
 800c608:	f108 38ff 	add.w	r8, r8, #4294967295
 800c60c:	4598      	cmp	r8, r3
 800c60e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c612:	f280 80c7 	bge.w	800c7a4 <_strtod_l+0x874>
 800c616:	eba3 0308 	sub.w	r3, r3, r8
 800c61a:	2b1f      	cmp	r3, #31
 800c61c:	eba2 0203 	sub.w	r2, r2, r3
 800c620:	f04f 0101 	mov.w	r1, #1
 800c624:	f300 80b1 	bgt.w	800c78a <_strtod_l+0x85a>
 800c628:	fa01 f303 	lsl.w	r3, r1, r3
 800c62c:	930d      	str	r3, [sp, #52]	; 0x34
 800c62e:	2300      	movs	r3, #0
 800c630:	9308      	str	r3, [sp, #32]
 800c632:	eb09 0802 	add.w	r8, r9, r2
 800c636:	9b04      	ldr	r3, [sp, #16]
 800c638:	45c1      	cmp	r9, r8
 800c63a:	4417      	add	r7, r2
 800c63c:	441f      	add	r7, r3
 800c63e:	464b      	mov	r3, r9
 800c640:	bfa8      	it	ge
 800c642:	4643      	movge	r3, r8
 800c644:	42bb      	cmp	r3, r7
 800c646:	bfa8      	it	ge
 800c648:	463b      	movge	r3, r7
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	bfc2      	ittt	gt
 800c64e:	eba8 0803 	subgt.w	r8, r8, r3
 800c652:	1aff      	subgt	r7, r7, r3
 800c654:	eba9 0903 	subgt.w	r9, r9, r3
 800c658:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	dd17      	ble.n	800c68e <_strtod_l+0x75e>
 800c65e:	4631      	mov	r1, r6
 800c660:	461a      	mov	r2, r3
 800c662:	4620      	mov	r0, r4
 800c664:	f001 ff6c 	bl	800e540 <__pow5mult>
 800c668:	4606      	mov	r6, r0
 800c66a:	2800      	cmp	r0, #0
 800c66c:	f43f aea8 	beq.w	800c3c0 <_strtod_l+0x490>
 800c670:	4601      	mov	r1, r0
 800c672:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c674:	4620      	mov	r0, r4
 800c676:	f001 feb9 	bl	800e3ec <__multiply>
 800c67a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c67c:	2800      	cmp	r0, #0
 800c67e:	f43f ae9f 	beq.w	800c3c0 <_strtod_l+0x490>
 800c682:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c684:	4620      	mov	r0, r4
 800c686:	f001 fd99 	bl	800e1bc <_Bfree>
 800c68a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c68c:	9318      	str	r3, [sp, #96]	; 0x60
 800c68e:	f1b8 0f00 	cmp.w	r8, #0
 800c692:	f300 808c 	bgt.w	800c7ae <_strtod_l+0x87e>
 800c696:	9b06      	ldr	r3, [sp, #24]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	dd08      	ble.n	800c6ae <_strtod_l+0x77e>
 800c69c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c69e:	9905      	ldr	r1, [sp, #20]
 800c6a0:	4620      	mov	r0, r4
 800c6a2:	f001 ff4d 	bl	800e540 <__pow5mult>
 800c6a6:	9005      	str	r0, [sp, #20]
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	f43f ae89 	beq.w	800c3c0 <_strtod_l+0x490>
 800c6ae:	2f00      	cmp	r7, #0
 800c6b0:	dd08      	ble.n	800c6c4 <_strtod_l+0x794>
 800c6b2:	9905      	ldr	r1, [sp, #20]
 800c6b4:	463a      	mov	r2, r7
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	f001 ff9c 	bl	800e5f4 <__lshift>
 800c6bc:	9005      	str	r0, [sp, #20]
 800c6be:	2800      	cmp	r0, #0
 800c6c0:	f43f ae7e 	beq.w	800c3c0 <_strtod_l+0x490>
 800c6c4:	f1b9 0f00 	cmp.w	r9, #0
 800c6c8:	dd08      	ble.n	800c6dc <_strtod_l+0x7ac>
 800c6ca:	4631      	mov	r1, r6
 800c6cc:	464a      	mov	r2, r9
 800c6ce:	4620      	mov	r0, r4
 800c6d0:	f001 ff90 	bl	800e5f4 <__lshift>
 800c6d4:	4606      	mov	r6, r0
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	f43f ae72 	beq.w	800c3c0 <_strtod_l+0x490>
 800c6dc:	9a05      	ldr	r2, [sp, #20]
 800c6de:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f002 f813 	bl	800e70c <__mdiff>
 800c6e6:	4605      	mov	r5, r0
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	f43f ae69 	beq.w	800c3c0 <_strtod_l+0x490>
 800c6ee:	68c3      	ldr	r3, [r0, #12]
 800c6f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	60c3      	str	r3, [r0, #12]
 800c6f6:	4631      	mov	r1, r6
 800c6f8:	f001 ffec 	bl	800e6d4 <__mcmp>
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	da60      	bge.n	800c7c2 <_strtod_l+0x892>
 800c700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c702:	ea53 030a 	orrs.w	r3, r3, sl
 800c706:	f040 8082 	bne.w	800c80e <_strtod_l+0x8de>
 800c70a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d17d      	bne.n	800c80e <_strtod_l+0x8de>
 800c712:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c716:	0d1b      	lsrs	r3, r3, #20
 800c718:	051b      	lsls	r3, r3, #20
 800c71a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c71e:	d976      	bls.n	800c80e <_strtod_l+0x8de>
 800c720:	696b      	ldr	r3, [r5, #20]
 800c722:	b913      	cbnz	r3, 800c72a <_strtod_l+0x7fa>
 800c724:	692b      	ldr	r3, [r5, #16]
 800c726:	2b01      	cmp	r3, #1
 800c728:	dd71      	ble.n	800c80e <_strtod_l+0x8de>
 800c72a:	4629      	mov	r1, r5
 800c72c:	2201      	movs	r2, #1
 800c72e:	4620      	mov	r0, r4
 800c730:	f001 ff60 	bl	800e5f4 <__lshift>
 800c734:	4631      	mov	r1, r6
 800c736:	4605      	mov	r5, r0
 800c738:	f001 ffcc 	bl	800e6d4 <__mcmp>
 800c73c:	2800      	cmp	r0, #0
 800c73e:	dd66      	ble.n	800c80e <_strtod_l+0x8de>
 800c740:	9904      	ldr	r1, [sp, #16]
 800c742:	4a53      	ldr	r2, [pc, #332]	; (800c890 <_strtod_l+0x960>)
 800c744:	465b      	mov	r3, fp
 800c746:	2900      	cmp	r1, #0
 800c748:	f000 8081 	beq.w	800c84e <_strtod_l+0x91e>
 800c74c:	ea02 010b 	and.w	r1, r2, fp
 800c750:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c754:	dc7b      	bgt.n	800c84e <_strtod_l+0x91e>
 800c756:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c75a:	f77f aea9 	ble.w	800c4b0 <_strtod_l+0x580>
 800c75e:	4b4d      	ldr	r3, [pc, #308]	; (800c894 <_strtod_l+0x964>)
 800c760:	4650      	mov	r0, sl
 800c762:	4659      	mov	r1, fp
 800c764:	2200      	movs	r2, #0
 800c766:	f7f3 ff6f 	bl	8000648 <__aeabi_dmul>
 800c76a:	460b      	mov	r3, r1
 800c76c:	4303      	orrs	r3, r0
 800c76e:	bf08      	it	eq
 800c770:	2322      	moveq	r3, #34	; 0x22
 800c772:	4682      	mov	sl, r0
 800c774:	468b      	mov	fp, r1
 800c776:	bf08      	it	eq
 800c778:	6023      	streq	r3, [r4, #0]
 800c77a:	e62b      	b.n	800c3d4 <_strtod_l+0x4a4>
 800c77c:	f04f 32ff 	mov.w	r2, #4294967295
 800c780:	fa02 f303 	lsl.w	r3, r2, r3
 800c784:	ea03 0a0a 	and.w	sl, r3, sl
 800c788:	e6e3      	b.n	800c552 <_strtod_l+0x622>
 800c78a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c78e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c792:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c796:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c79a:	fa01 f308 	lsl.w	r3, r1, r8
 800c79e:	9308      	str	r3, [sp, #32]
 800c7a0:	910d      	str	r1, [sp, #52]	; 0x34
 800c7a2:	e746      	b.n	800c632 <_strtod_l+0x702>
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	9308      	str	r3, [sp, #32]
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	930d      	str	r3, [sp, #52]	; 0x34
 800c7ac:	e741      	b.n	800c632 <_strtod_l+0x702>
 800c7ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c7b0:	4642      	mov	r2, r8
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	f001 ff1e 	bl	800e5f4 <__lshift>
 800c7b8:	9018      	str	r0, [sp, #96]	; 0x60
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	f47f af6b 	bne.w	800c696 <_strtod_l+0x766>
 800c7c0:	e5fe      	b.n	800c3c0 <_strtod_l+0x490>
 800c7c2:	465f      	mov	r7, fp
 800c7c4:	d16e      	bne.n	800c8a4 <_strtod_l+0x974>
 800c7c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c7c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c7cc:	b342      	cbz	r2, 800c820 <_strtod_l+0x8f0>
 800c7ce:	4a32      	ldr	r2, [pc, #200]	; (800c898 <_strtod_l+0x968>)
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d128      	bne.n	800c826 <_strtod_l+0x8f6>
 800c7d4:	9b04      	ldr	r3, [sp, #16]
 800c7d6:	4651      	mov	r1, sl
 800c7d8:	b1eb      	cbz	r3, 800c816 <_strtod_l+0x8e6>
 800c7da:	4b2d      	ldr	r3, [pc, #180]	; (800c890 <_strtod_l+0x960>)
 800c7dc:	403b      	ands	r3, r7
 800c7de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c7e2:	f04f 32ff 	mov.w	r2, #4294967295
 800c7e6:	d819      	bhi.n	800c81c <_strtod_l+0x8ec>
 800c7e8:	0d1b      	lsrs	r3, r3, #20
 800c7ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c7ee:	fa02 f303 	lsl.w	r3, r2, r3
 800c7f2:	4299      	cmp	r1, r3
 800c7f4:	d117      	bne.n	800c826 <_strtod_l+0x8f6>
 800c7f6:	4b29      	ldr	r3, [pc, #164]	; (800c89c <_strtod_l+0x96c>)
 800c7f8:	429f      	cmp	r7, r3
 800c7fa:	d102      	bne.n	800c802 <_strtod_l+0x8d2>
 800c7fc:	3101      	adds	r1, #1
 800c7fe:	f43f addf 	beq.w	800c3c0 <_strtod_l+0x490>
 800c802:	4b23      	ldr	r3, [pc, #140]	; (800c890 <_strtod_l+0x960>)
 800c804:	403b      	ands	r3, r7
 800c806:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c80a:	f04f 0a00 	mov.w	sl, #0
 800c80e:	9b04      	ldr	r3, [sp, #16]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d1a4      	bne.n	800c75e <_strtod_l+0x82e>
 800c814:	e5de      	b.n	800c3d4 <_strtod_l+0x4a4>
 800c816:	f04f 33ff 	mov.w	r3, #4294967295
 800c81a:	e7ea      	b.n	800c7f2 <_strtod_l+0x8c2>
 800c81c:	4613      	mov	r3, r2
 800c81e:	e7e8      	b.n	800c7f2 <_strtod_l+0x8c2>
 800c820:	ea53 030a 	orrs.w	r3, r3, sl
 800c824:	d08c      	beq.n	800c740 <_strtod_l+0x810>
 800c826:	9b08      	ldr	r3, [sp, #32]
 800c828:	b1db      	cbz	r3, 800c862 <_strtod_l+0x932>
 800c82a:	423b      	tst	r3, r7
 800c82c:	d0ef      	beq.n	800c80e <_strtod_l+0x8de>
 800c82e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c830:	9a04      	ldr	r2, [sp, #16]
 800c832:	4650      	mov	r0, sl
 800c834:	4659      	mov	r1, fp
 800c836:	b1c3      	cbz	r3, 800c86a <_strtod_l+0x93a>
 800c838:	f7ff fb5c 	bl	800bef4 <sulp>
 800c83c:	4602      	mov	r2, r0
 800c83e:	460b      	mov	r3, r1
 800c840:	ec51 0b18 	vmov	r0, r1, d8
 800c844:	f7f3 fd4a 	bl	80002dc <__adddf3>
 800c848:	4682      	mov	sl, r0
 800c84a:	468b      	mov	fp, r1
 800c84c:	e7df      	b.n	800c80e <_strtod_l+0x8de>
 800c84e:	4013      	ands	r3, r2
 800c850:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c854:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c858:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c85c:	f04f 3aff 	mov.w	sl, #4294967295
 800c860:	e7d5      	b.n	800c80e <_strtod_l+0x8de>
 800c862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c864:	ea13 0f0a 	tst.w	r3, sl
 800c868:	e7e0      	b.n	800c82c <_strtod_l+0x8fc>
 800c86a:	f7ff fb43 	bl	800bef4 <sulp>
 800c86e:	4602      	mov	r2, r0
 800c870:	460b      	mov	r3, r1
 800c872:	ec51 0b18 	vmov	r0, r1, d8
 800c876:	f7f3 fd2f 	bl	80002d8 <__aeabi_dsub>
 800c87a:	2200      	movs	r2, #0
 800c87c:	2300      	movs	r3, #0
 800c87e:	4682      	mov	sl, r0
 800c880:	468b      	mov	fp, r1
 800c882:	f7f4 f949 	bl	8000b18 <__aeabi_dcmpeq>
 800c886:	2800      	cmp	r0, #0
 800c888:	d0c1      	beq.n	800c80e <_strtod_l+0x8de>
 800c88a:	e611      	b.n	800c4b0 <_strtod_l+0x580>
 800c88c:	fffffc02 	.word	0xfffffc02
 800c890:	7ff00000 	.word	0x7ff00000
 800c894:	39500000 	.word	0x39500000
 800c898:	000fffff 	.word	0x000fffff
 800c89c:	7fefffff 	.word	0x7fefffff
 800c8a0:	080106e0 	.word	0x080106e0
 800c8a4:	4631      	mov	r1, r6
 800c8a6:	4628      	mov	r0, r5
 800c8a8:	f002 f892 	bl	800e9d0 <__ratio>
 800c8ac:	ec59 8b10 	vmov	r8, r9, d0
 800c8b0:	ee10 0a10 	vmov	r0, s0
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c8ba:	4649      	mov	r1, r9
 800c8bc:	f7f4 f940 	bl	8000b40 <__aeabi_dcmple>
 800c8c0:	2800      	cmp	r0, #0
 800c8c2:	d07a      	beq.n	800c9ba <_strtod_l+0xa8a>
 800c8c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d04a      	beq.n	800c960 <_strtod_l+0xa30>
 800c8ca:	4b95      	ldr	r3, [pc, #596]	; (800cb20 <_strtod_l+0xbf0>)
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c8d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800cb20 <_strtod_l+0xbf0>
 800c8d6:	f04f 0800 	mov.w	r8, #0
 800c8da:	4b92      	ldr	r3, [pc, #584]	; (800cb24 <_strtod_l+0xbf4>)
 800c8dc:	403b      	ands	r3, r7
 800c8de:	930d      	str	r3, [sp, #52]	; 0x34
 800c8e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c8e2:	4b91      	ldr	r3, [pc, #580]	; (800cb28 <_strtod_l+0xbf8>)
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	f040 80b0 	bne.w	800ca4a <_strtod_l+0xb1a>
 800c8ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c8ee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c8f2:	ec4b ab10 	vmov	d0, sl, fp
 800c8f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c8fa:	f001 ff91 	bl	800e820 <__ulp>
 800c8fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c902:	ec53 2b10 	vmov	r2, r3, d0
 800c906:	f7f3 fe9f 	bl	8000648 <__aeabi_dmul>
 800c90a:	4652      	mov	r2, sl
 800c90c:	465b      	mov	r3, fp
 800c90e:	f7f3 fce5 	bl	80002dc <__adddf3>
 800c912:	460b      	mov	r3, r1
 800c914:	4983      	ldr	r1, [pc, #524]	; (800cb24 <_strtod_l+0xbf4>)
 800c916:	4a85      	ldr	r2, [pc, #532]	; (800cb2c <_strtod_l+0xbfc>)
 800c918:	4019      	ands	r1, r3
 800c91a:	4291      	cmp	r1, r2
 800c91c:	4682      	mov	sl, r0
 800c91e:	d960      	bls.n	800c9e2 <_strtod_l+0xab2>
 800c920:	ee18 3a90 	vmov	r3, s17
 800c924:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c928:	4293      	cmp	r3, r2
 800c92a:	d104      	bne.n	800c936 <_strtod_l+0xa06>
 800c92c:	ee18 3a10 	vmov	r3, s16
 800c930:	3301      	adds	r3, #1
 800c932:	f43f ad45 	beq.w	800c3c0 <_strtod_l+0x490>
 800c936:	f8df b200 	ldr.w	fp, [pc, #512]	; 800cb38 <_strtod_l+0xc08>
 800c93a:	f04f 3aff 	mov.w	sl, #4294967295
 800c93e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c940:	4620      	mov	r0, r4
 800c942:	f001 fc3b 	bl	800e1bc <_Bfree>
 800c946:	9905      	ldr	r1, [sp, #20]
 800c948:	4620      	mov	r0, r4
 800c94a:	f001 fc37 	bl	800e1bc <_Bfree>
 800c94e:	4631      	mov	r1, r6
 800c950:	4620      	mov	r0, r4
 800c952:	f001 fc33 	bl	800e1bc <_Bfree>
 800c956:	4629      	mov	r1, r5
 800c958:	4620      	mov	r0, r4
 800c95a:	f001 fc2f 	bl	800e1bc <_Bfree>
 800c95e:	e61a      	b.n	800c596 <_strtod_l+0x666>
 800c960:	f1ba 0f00 	cmp.w	sl, #0
 800c964:	d11b      	bne.n	800c99e <_strtod_l+0xa6e>
 800c966:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c96a:	b9f3      	cbnz	r3, 800c9aa <_strtod_l+0xa7a>
 800c96c:	4b6c      	ldr	r3, [pc, #432]	; (800cb20 <_strtod_l+0xbf0>)
 800c96e:	2200      	movs	r2, #0
 800c970:	4640      	mov	r0, r8
 800c972:	4649      	mov	r1, r9
 800c974:	f7f4 f8da 	bl	8000b2c <__aeabi_dcmplt>
 800c978:	b9d0      	cbnz	r0, 800c9b0 <_strtod_l+0xa80>
 800c97a:	4640      	mov	r0, r8
 800c97c:	4649      	mov	r1, r9
 800c97e:	4b6c      	ldr	r3, [pc, #432]	; (800cb30 <_strtod_l+0xc00>)
 800c980:	2200      	movs	r2, #0
 800c982:	f7f3 fe61 	bl	8000648 <__aeabi_dmul>
 800c986:	4680      	mov	r8, r0
 800c988:	4689      	mov	r9, r1
 800c98a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c98e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c992:	9315      	str	r3, [sp, #84]	; 0x54
 800c994:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c998:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c99c:	e79d      	b.n	800c8da <_strtod_l+0x9aa>
 800c99e:	f1ba 0f01 	cmp.w	sl, #1
 800c9a2:	d102      	bne.n	800c9aa <_strtod_l+0xa7a>
 800c9a4:	2f00      	cmp	r7, #0
 800c9a6:	f43f ad83 	beq.w	800c4b0 <_strtod_l+0x580>
 800c9aa:	4b62      	ldr	r3, [pc, #392]	; (800cb34 <_strtod_l+0xc04>)
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	e78e      	b.n	800c8ce <_strtod_l+0x99e>
 800c9b0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800cb30 <_strtod_l+0xc00>
 800c9b4:	f04f 0800 	mov.w	r8, #0
 800c9b8:	e7e7      	b.n	800c98a <_strtod_l+0xa5a>
 800c9ba:	4b5d      	ldr	r3, [pc, #372]	; (800cb30 <_strtod_l+0xc00>)
 800c9bc:	4640      	mov	r0, r8
 800c9be:	4649      	mov	r1, r9
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	f7f3 fe41 	bl	8000648 <__aeabi_dmul>
 800c9c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9c8:	4680      	mov	r8, r0
 800c9ca:	4689      	mov	r9, r1
 800c9cc:	b933      	cbnz	r3, 800c9dc <_strtod_l+0xaac>
 800c9ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9d2:	900e      	str	r0, [sp, #56]	; 0x38
 800c9d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c9da:	e7dd      	b.n	800c998 <_strtod_l+0xa68>
 800c9dc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c9e0:	e7f9      	b.n	800c9d6 <_strtod_l+0xaa6>
 800c9e2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c9e6:	9b04      	ldr	r3, [sp, #16]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d1a8      	bne.n	800c93e <_strtod_l+0xa0e>
 800c9ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c9f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c9f2:	0d1b      	lsrs	r3, r3, #20
 800c9f4:	051b      	lsls	r3, r3, #20
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d1a1      	bne.n	800c93e <_strtod_l+0xa0e>
 800c9fa:	4640      	mov	r0, r8
 800c9fc:	4649      	mov	r1, r9
 800c9fe:	f7f4 f983 	bl	8000d08 <__aeabi_d2lz>
 800ca02:	f7f3 fdf3 	bl	80005ec <__aeabi_l2d>
 800ca06:	4602      	mov	r2, r0
 800ca08:	460b      	mov	r3, r1
 800ca0a:	4640      	mov	r0, r8
 800ca0c:	4649      	mov	r1, r9
 800ca0e:	f7f3 fc63 	bl	80002d8 <__aeabi_dsub>
 800ca12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ca14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca18:	ea43 030a 	orr.w	r3, r3, sl
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	4680      	mov	r8, r0
 800ca20:	4689      	mov	r9, r1
 800ca22:	d055      	beq.n	800cad0 <_strtod_l+0xba0>
 800ca24:	a336      	add	r3, pc, #216	; (adr r3, 800cb00 <_strtod_l+0xbd0>)
 800ca26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca2a:	f7f4 f87f 	bl	8000b2c <__aeabi_dcmplt>
 800ca2e:	2800      	cmp	r0, #0
 800ca30:	f47f acd0 	bne.w	800c3d4 <_strtod_l+0x4a4>
 800ca34:	a334      	add	r3, pc, #208	; (adr r3, 800cb08 <_strtod_l+0xbd8>)
 800ca36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3a:	4640      	mov	r0, r8
 800ca3c:	4649      	mov	r1, r9
 800ca3e:	f7f4 f893 	bl	8000b68 <__aeabi_dcmpgt>
 800ca42:	2800      	cmp	r0, #0
 800ca44:	f43f af7b 	beq.w	800c93e <_strtod_l+0xa0e>
 800ca48:	e4c4      	b.n	800c3d4 <_strtod_l+0x4a4>
 800ca4a:	9b04      	ldr	r3, [sp, #16]
 800ca4c:	b333      	cbz	r3, 800ca9c <_strtod_l+0xb6c>
 800ca4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca50:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ca54:	d822      	bhi.n	800ca9c <_strtod_l+0xb6c>
 800ca56:	a32e      	add	r3, pc, #184	; (adr r3, 800cb10 <_strtod_l+0xbe0>)
 800ca58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca5c:	4640      	mov	r0, r8
 800ca5e:	4649      	mov	r1, r9
 800ca60:	f7f4 f86e 	bl	8000b40 <__aeabi_dcmple>
 800ca64:	b1a0      	cbz	r0, 800ca90 <_strtod_l+0xb60>
 800ca66:	4649      	mov	r1, r9
 800ca68:	4640      	mov	r0, r8
 800ca6a:	f7f4 f8c5 	bl	8000bf8 <__aeabi_d2uiz>
 800ca6e:	2801      	cmp	r0, #1
 800ca70:	bf38      	it	cc
 800ca72:	2001      	movcc	r0, #1
 800ca74:	f7f3 fd6e 	bl	8000554 <__aeabi_ui2d>
 800ca78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca7a:	4680      	mov	r8, r0
 800ca7c:	4689      	mov	r9, r1
 800ca7e:	bb23      	cbnz	r3, 800caca <_strtod_l+0xb9a>
 800ca80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca84:	9010      	str	r0, [sp, #64]	; 0x40
 800ca86:	9311      	str	r3, [sp, #68]	; 0x44
 800ca88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ca8c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ca90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca94:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ca98:	1a9b      	subs	r3, r3, r2
 800ca9a:	9309      	str	r3, [sp, #36]	; 0x24
 800ca9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800caa0:	eeb0 0a48 	vmov.f32	s0, s16
 800caa4:	eef0 0a68 	vmov.f32	s1, s17
 800caa8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800caac:	f001 feb8 	bl	800e820 <__ulp>
 800cab0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cab4:	ec53 2b10 	vmov	r2, r3, d0
 800cab8:	f7f3 fdc6 	bl	8000648 <__aeabi_dmul>
 800cabc:	ec53 2b18 	vmov	r2, r3, d8
 800cac0:	f7f3 fc0c 	bl	80002dc <__adddf3>
 800cac4:	4682      	mov	sl, r0
 800cac6:	468b      	mov	fp, r1
 800cac8:	e78d      	b.n	800c9e6 <_strtod_l+0xab6>
 800caca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800cace:	e7db      	b.n	800ca88 <_strtod_l+0xb58>
 800cad0:	a311      	add	r3, pc, #68	; (adr r3, 800cb18 <_strtod_l+0xbe8>)
 800cad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad6:	f7f4 f829 	bl	8000b2c <__aeabi_dcmplt>
 800cada:	e7b2      	b.n	800ca42 <_strtod_l+0xb12>
 800cadc:	2300      	movs	r3, #0
 800cade:	930a      	str	r3, [sp, #40]	; 0x28
 800cae0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cae2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cae4:	6013      	str	r3, [r2, #0]
 800cae6:	f7ff ba6b 	b.w	800bfc0 <_strtod_l+0x90>
 800caea:	2a65      	cmp	r2, #101	; 0x65
 800caec:	f43f ab5f 	beq.w	800c1ae <_strtod_l+0x27e>
 800caf0:	2a45      	cmp	r2, #69	; 0x45
 800caf2:	f43f ab5c 	beq.w	800c1ae <_strtod_l+0x27e>
 800caf6:	2301      	movs	r3, #1
 800caf8:	f7ff bb94 	b.w	800c224 <_strtod_l+0x2f4>
 800cafc:	f3af 8000 	nop.w
 800cb00:	94a03595 	.word	0x94a03595
 800cb04:	3fdfffff 	.word	0x3fdfffff
 800cb08:	35afe535 	.word	0x35afe535
 800cb0c:	3fe00000 	.word	0x3fe00000
 800cb10:	ffc00000 	.word	0xffc00000
 800cb14:	41dfffff 	.word	0x41dfffff
 800cb18:	94a03595 	.word	0x94a03595
 800cb1c:	3fcfffff 	.word	0x3fcfffff
 800cb20:	3ff00000 	.word	0x3ff00000
 800cb24:	7ff00000 	.word	0x7ff00000
 800cb28:	7fe00000 	.word	0x7fe00000
 800cb2c:	7c9fffff 	.word	0x7c9fffff
 800cb30:	3fe00000 	.word	0x3fe00000
 800cb34:	bff00000 	.word	0xbff00000
 800cb38:	7fefffff 	.word	0x7fefffff

0800cb3c <_strtod_r>:
 800cb3c:	4b01      	ldr	r3, [pc, #4]	; (800cb44 <_strtod_r+0x8>)
 800cb3e:	f7ff b9f7 	b.w	800bf30 <_strtod_l>
 800cb42:	bf00      	nop
 800cb44:	20000230 	.word	0x20000230

0800cb48 <_strtol_l.constprop.0>:
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb4e:	d001      	beq.n	800cb54 <_strtol_l.constprop.0+0xc>
 800cb50:	2b24      	cmp	r3, #36	; 0x24
 800cb52:	d906      	bls.n	800cb62 <_strtol_l.constprop.0+0x1a>
 800cb54:	f7fe f990 	bl	800ae78 <__errno>
 800cb58:	2316      	movs	r3, #22
 800cb5a:	6003      	str	r3, [r0, #0]
 800cb5c:	2000      	movs	r0, #0
 800cb5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb62:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cc48 <_strtol_l.constprop.0+0x100>
 800cb66:	460d      	mov	r5, r1
 800cb68:	462e      	mov	r6, r5
 800cb6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb6e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800cb72:	f017 0708 	ands.w	r7, r7, #8
 800cb76:	d1f7      	bne.n	800cb68 <_strtol_l.constprop.0+0x20>
 800cb78:	2c2d      	cmp	r4, #45	; 0x2d
 800cb7a:	d132      	bne.n	800cbe2 <_strtol_l.constprop.0+0x9a>
 800cb7c:	782c      	ldrb	r4, [r5, #0]
 800cb7e:	2701      	movs	r7, #1
 800cb80:	1cb5      	adds	r5, r6, #2
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d05b      	beq.n	800cc3e <_strtol_l.constprop.0+0xf6>
 800cb86:	2b10      	cmp	r3, #16
 800cb88:	d109      	bne.n	800cb9e <_strtol_l.constprop.0+0x56>
 800cb8a:	2c30      	cmp	r4, #48	; 0x30
 800cb8c:	d107      	bne.n	800cb9e <_strtol_l.constprop.0+0x56>
 800cb8e:	782c      	ldrb	r4, [r5, #0]
 800cb90:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cb94:	2c58      	cmp	r4, #88	; 0x58
 800cb96:	d14d      	bne.n	800cc34 <_strtol_l.constprop.0+0xec>
 800cb98:	786c      	ldrb	r4, [r5, #1]
 800cb9a:	2310      	movs	r3, #16
 800cb9c:	3502      	adds	r5, #2
 800cb9e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cba2:	f108 38ff 	add.w	r8, r8, #4294967295
 800cba6:	f04f 0c00 	mov.w	ip, #0
 800cbaa:	fbb8 f9f3 	udiv	r9, r8, r3
 800cbae:	4666      	mov	r6, ip
 800cbb0:	fb03 8a19 	mls	sl, r3, r9, r8
 800cbb4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cbb8:	f1be 0f09 	cmp.w	lr, #9
 800cbbc:	d816      	bhi.n	800cbec <_strtol_l.constprop.0+0xa4>
 800cbbe:	4674      	mov	r4, lr
 800cbc0:	42a3      	cmp	r3, r4
 800cbc2:	dd24      	ble.n	800cc0e <_strtol_l.constprop.0+0xc6>
 800cbc4:	f1bc 0f00 	cmp.w	ip, #0
 800cbc8:	db1e      	blt.n	800cc08 <_strtol_l.constprop.0+0xc0>
 800cbca:	45b1      	cmp	r9, r6
 800cbcc:	d31c      	bcc.n	800cc08 <_strtol_l.constprop.0+0xc0>
 800cbce:	d101      	bne.n	800cbd4 <_strtol_l.constprop.0+0x8c>
 800cbd0:	45a2      	cmp	sl, r4
 800cbd2:	db19      	blt.n	800cc08 <_strtol_l.constprop.0+0xc0>
 800cbd4:	fb06 4603 	mla	r6, r6, r3, r4
 800cbd8:	f04f 0c01 	mov.w	ip, #1
 800cbdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cbe0:	e7e8      	b.n	800cbb4 <_strtol_l.constprop.0+0x6c>
 800cbe2:	2c2b      	cmp	r4, #43	; 0x2b
 800cbe4:	bf04      	itt	eq
 800cbe6:	782c      	ldrbeq	r4, [r5, #0]
 800cbe8:	1cb5      	addeq	r5, r6, #2
 800cbea:	e7ca      	b.n	800cb82 <_strtol_l.constprop.0+0x3a>
 800cbec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cbf0:	f1be 0f19 	cmp.w	lr, #25
 800cbf4:	d801      	bhi.n	800cbfa <_strtol_l.constprop.0+0xb2>
 800cbf6:	3c37      	subs	r4, #55	; 0x37
 800cbf8:	e7e2      	b.n	800cbc0 <_strtol_l.constprop.0+0x78>
 800cbfa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cbfe:	f1be 0f19 	cmp.w	lr, #25
 800cc02:	d804      	bhi.n	800cc0e <_strtol_l.constprop.0+0xc6>
 800cc04:	3c57      	subs	r4, #87	; 0x57
 800cc06:	e7db      	b.n	800cbc0 <_strtol_l.constprop.0+0x78>
 800cc08:	f04f 3cff 	mov.w	ip, #4294967295
 800cc0c:	e7e6      	b.n	800cbdc <_strtol_l.constprop.0+0x94>
 800cc0e:	f1bc 0f00 	cmp.w	ip, #0
 800cc12:	da05      	bge.n	800cc20 <_strtol_l.constprop.0+0xd8>
 800cc14:	2322      	movs	r3, #34	; 0x22
 800cc16:	6003      	str	r3, [r0, #0]
 800cc18:	4646      	mov	r6, r8
 800cc1a:	b942      	cbnz	r2, 800cc2e <_strtol_l.constprop.0+0xe6>
 800cc1c:	4630      	mov	r0, r6
 800cc1e:	e79e      	b.n	800cb5e <_strtol_l.constprop.0+0x16>
 800cc20:	b107      	cbz	r7, 800cc24 <_strtol_l.constprop.0+0xdc>
 800cc22:	4276      	negs	r6, r6
 800cc24:	2a00      	cmp	r2, #0
 800cc26:	d0f9      	beq.n	800cc1c <_strtol_l.constprop.0+0xd4>
 800cc28:	f1bc 0f00 	cmp.w	ip, #0
 800cc2c:	d000      	beq.n	800cc30 <_strtol_l.constprop.0+0xe8>
 800cc2e:	1e69      	subs	r1, r5, #1
 800cc30:	6011      	str	r1, [r2, #0]
 800cc32:	e7f3      	b.n	800cc1c <_strtol_l.constprop.0+0xd4>
 800cc34:	2430      	movs	r4, #48	; 0x30
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d1b1      	bne.n	800cb9e <_strtol_l.constprop.0+0x56>
 800cc3a:	2308      	movs	r3, #8
 800cc3c:	e7af      	b.n	800cb9e <_strtol_l.constprop.0+0x56>
 800cc3e:	2c30      	cmp	r4, #48	; 0x30
 800cc40:	d0a5      	beq.n	800cb8e <_strtol_l.constprop.0+0x46>
 800cc42:	230a      	movs	r3, #10
 800cc44:	e7ab      	b.n	800cb9e <_strtol_l.constprop.0+0x56>
 800cc46:	bf00      	nop
 800cc48:	08010745 	.word	0x08010745

0800cc4c <_strtol_r>:
 800cc4c:	f7ff bf7c 	b.w	800cb48 <_strtol_l.constprop.0>

0800cc50 <time>:
 800cc50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc52:	4b0b      	ldr	r3, [pc, #44]	; (800cc80 <time+0x30>)
 800cc54:	2200      	movs	r2, #0
 800cc56:	4669      	mov	r1, sp
 800cc58:	4604      	mov	r4, r0
 800cc5a:	6818      	ldr	r0, [r3, #0]
 800cc5c:	f001 fa2c 	bl	800e0b8 <_gettimeofday_r>
 800cc60:	2800      	cmp	r0, #0
 800cc62:	bfbe      	ittt	lt
 800cc64:	f04f 32ff 	movlt.w	r2, #4294967295
 800cc68:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc6c:	e9cd 2300 	strdlt	r2, r3, [sp]
 800cc70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc74:	b10c      	cbz	r4, 800cc7a <time+0x2a>
 800cc76:	e9c4 0100 	strd	r0, r1, [r4]
 800cc7a:	b004      	add	sp, #16
 800cc7c:	bd10      	pop	{r4, pc}
 800cc7e:	bf00      	nop
 800cc80:	200001c8 	.word	0x200001c8

0800cc84 <__assert_func>:
 800cc84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc86:	4614      	mov	r4, r2
 800cc88:	461a      	mov	r2, r3
 800cc8a:	4b09      	ldr	r3, [pc, #36]	; (800ccb0 <__assert_func+0x2c>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	4605      	mov	r5, r0
 800cc90:	68d8      	ldr	r0, [r3, #12]
 800cc92:	b14c      	cbz	r4, 800cca8 <__assert_func+0x24>
 800cc94:	4b07      	ldr	r3, [pc, #28]	; (800ccb4 <__assert_func+0x30>)
 800cc96:	9100      	str	r1, [sp, #0]
 800cc98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cc9c:	4906      	ldr	r1, [pc, #24]	; (800ccb8 <__assert_func+0x34>)
 800cc9e:	462b      	mov	r3, r5
 800cca0:	f000 fe88 	bl	800d9b4 <fiprintf>
 800cca4:	f002 fac2 	bl	800f22c <abort>
 800cca8:	4b04      	ldr	r3, [pc, #16]	; (800ccbc <__assert_func+0x38>)
 800ccaa:	461c      	mov	r4, r3
 800ccac:	e7f3      	b.n	800cc96 <__assert_func+0x12>
 800ccae:	bf00      	nop
 800ccb0:	200001c8 	.word	0x200001c8
 800ccb4:	08010708 	.word	0x08010708
 800ccb8:	08010715 	.word	0x08010715
 800ccbc:	08010743 	.word	0x08010743

0800ccc0 <quorem>:
 800ccc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccc4:	6903      	ldr	r3, [r0, #16]
 800ccc6:	690c      	ldr	r4, [r1, #16]
 800ccc8:	42a3      	cmp	r3, r4
 800ccca:	4607      	mov	r7, r0
 800cccc:	f2c0 8081 	blt.w	800cdd2 <quorem+0x112>
 800ccd0:	3c01      	subs	r4, #1
 800ccd2:	f101 0814 	add.w	r8, r1, #20
 800ccd6:	f100 0514 	add.w	r5, r0, #20
 800ccda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ccde:	9301      	str	r3, [sp, #4]
 800cce0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cce4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cce8:	3301      	adds	r3, #1
 800ccea:	429a      	cmp	r2, r3
 800ccec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ccf0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ccf4:	fbb2 f6f3 	udiv	r6, r2, r3
 800ccf8:	d331      	bcc.n	800cd5e <quorem+0x9e>
 800ccfa:	f04f 0e00 	mov.w	lr, #0
 800ccfe:	4640      	mov	r0, r8
 800cd00:	46ac      	mov	ip, r5
 800cd02:	46f2      	mov	sl, lr
 800cd04:	f850 2b04 	ldr.w	r2, [r0], #4
 800cd08:	b293      	uxth	r3, r2
 800cd0a:	fb06 e303 	mla	r3, r6, r3, lr
 800cd0e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	ebaa 0303 	sub.w	r3, sl, r3
 800cd18:	f8dc a000 	ldr.w	sl, [ip]
 800cd1c:	0c12      	lsrs	r2, r2, #16
 800cd1e:	fa13 f38a 	uxtah	r3, r3, sl
 800cd22:	fb06 e202 	mla	r2, r6, r2, lr
 800cd26:	9300      	str	r3, [sp, #0]
 800cd28:	9b00      	ldr	r3, [sp, #0]
 800cd2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cd2e:	b292      	uxth	r2, r2
 800cd30:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cd34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cd38:	f8bd 3000 	ldrh.w	r3, [sp]
 800cd3c:	4581      	cmp	r9, r0
 800cd3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd42:	f84c 3b04 	str.w	r3, [ip], #4
 800cd46:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cd4a:	d2db      	bcs.n	800cd04 <quorem+0x44>
 800cd4c:	f855 300b 	ldr.w	r3, [r5, fp]
 800cd50:	b92b      	cbnz	r3, 800cd5e <quorem+0x9e>
 800cd52:	9b01      	ldr	r3, [sp, #4]
 800cd54:	3b04      	subs	r3, #4
 800cd56:	429d      	cmp	r5, r3
 800cd58:	461a      	mov	r2, r3
 800cd5a:	d32e      	bcc.n	800cdba <quorem+0xfa>
 800cd5c:	613c      	str	r4, [r7, #16]
 800cd5e:	4638      	mov	r0, r7
 800cd60:	f001 fcb8 	bl	800e6d4 <__mcmp>
 800cd64:	2800      	cmp	r0, #0
 800cd66:	db24      	blt.n	800cdb2 <quorem+0xf2>
 800cd68:	3601      	adds	r6, #1
 800cd6a:	4628      	mov	r0, r5
 800cd6c:	f04f 0c00 	mov.w	ip, #0
 800cd70:	f858 2b04 	ldr.w	r2, [r8], #4
 800cd74:	f8d0 e000 	ldr.w	lr, [r0]
 800cd78:	b293      	uxth	r3, r2
 800cd7a:	ebac 0303 	sub.w	r3, ip, r3
 800cd7e:	0c12      	lsrs	r2, r2, #16
 800cd80:	fa13 f38e 	uxtah	r3, r3, lr
 800cd84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cd88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cd8c:	b29b      	uxth	r3, r3
 800cd8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd92:	45c1      	cmp	r9, r8
 800cd94:	f840 3b04 	str.w	r3, [r0], #4
 800cd98:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cd9c:	d2e8      	bcs.n	800cd70 <quorem+0xb0>
 800cd9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cda2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cda6:	b922      	cbnz	r2, 800cdb2 <quorem+0xf2>
 800cda8:	3b04      	subs	r3, #4
 800cdaa:	429d      	cmp	r5, r3
 800cdac:	461a      	mov	r2, r3
 800cdae:	d30a      	bcc.n	800cdc6 <quorem+0x106>
 800cdb0:	613c      	str	r4, [r7, #16]
 800cdb2:	4630      	mov	r0, r6
 800cdb4:	b003      	add	sp, #12
 800cdb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdba:	6812      	ldr	r2, [r2, #0]
 800cdbc:	3b04      	subs	r3, #4
 800cdbe:	2a00      	cmp	r2, #0
 800cdc0:	d1cc      	bne.n	800cd5c <quorem+0x9c>
 800cdc2:	3c01      	subs	r4, #1
 800cdc4:	e7c7      	b.n	800cd56 <quorem+0x96>
 800cdc6:	6812      	ldr	r2, [r2, #0]
 800cdc8:	3b04      	subs	r3, #4
 800cdca:	2a00      	cmp	r2, #0
 800cdcc:	d1f0      	bne.n	800cdb0 <quorem+0xf0>
 800cdce:	3c01      	subs	r4, #1
 800cdd0:	e7eb      	b.n	800cdaa <quorem+0xea>
 800cdd2:	2000      	movs	r0, #0
 800cdd4:	e7ee      	b.n	800cdb4 <quorem+0xf4>
	...

0800cdd8 <_dtoa_r>:
 800cdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cddc:	ed2d 8b04 	vpush	{d8-d9}
 800cde0:	ec57 6b10 	vmov	r6, r7, d0
 800cde4:	b093      	sub	sp, #76	; 0x4c
 800cde6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cde8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cdec:	9106      	str	r1, [sp, #24]
 800cdee:	ee10 aa10 	vmov	sl, s0
 800cdf2:	4604      	mov	r4, r0
 800cdf4:	9209      	str	r2, [sp, #36]	; 0x24
 800cdf6:	930c      	str	r3, [sp, #48]	; 0x30
 800cdf8:	46bb      	mov	fp, r7
 800cdfa:	b975      	cbnz	r5, 800ce1a <_dtoa_r+0x42>
 800cdfc:	2010      	movs	r0, #16
 800cdfe:	f7fe f865 	bl	800aecc <malloc>
 800ce02:	4602      	mov	r2, r0
 800ce04:	6260      	str	r0, [r4, #36]	; 0x24
 800ce06:	b920      	cbnz	r0, 800ce12 <_dtoa_r+0x3a>
 800ce08:	4ba7      	ldr	r3, [pc, #668]	; (800d0a8 <_dtoa_r+0x2d0>)
 800ce0a:	21ea      	movs	r1, #234	; 0xea
 800ce0c:	48a7      	ldr	r0, [pc, #668]	; (800d0ac <_dtoa_r+0x2d4>)
 800ce0e:	f7ff ff39 	bl	800cc84 <__assert_func>
 800ce12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ce16:	6005      	str	r5, [r0, #0]
 800ce18:	60c5      	str	r5, [r0, #12]
 800ce1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce1c:	6819      	ldr	r1, [r3, #0]
 800ce1e:	b151      	cbz	r1, 800ce36 <_dtoa_r+0x5e>
 800ce20:	685a      	ldr	r2, [r3, #4]
 800ce22:	604a      	str	r2, [r1, #4]
 800ce24:	2301      	movs	r3, #1
 800ce26:	4093      	lsls	r3, r2
 800ce28:	608b      	str	r3, [r1, #8]
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	f001 f9c6 	bl	800e1bc <_Bfree>
 800ce30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce32:	2200      	movs	r2, #0
 800ce34:	601a      	str	r2, [r3, #0]
 800ce36:	1e3b      	subs	r3, r7, #0
 800ce38:	bfaa      	itet	ge
 800ce3a:	2300      	movge	r3, #0
 800ce3c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ce40:	f8c8 3000 	strge.w	r3, [r8]
 800ce44:	4b9a      	ldr	r3, [pc, #616]	; (800d0b0 <_dtoa_r+0x2d8>)
 800ce46:	bfbc      	itt	lt
 800ce48:	2201      	movlt	r2, #1
 800ce4a:	f8c8 2000 	strlt.w	r2, [r8]
 800ce4e:	ea33 030b 	bics.w	r3, r3, fp
 800ce52:	d11b      	bne.n	800ce8c <_dtoa_r+0xb4>
 800ce54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ce56:	f242 730f 	movw	r3, #9999	; 0x270f
 800ce5a:	6013      	str	r3, [r2, #0]
 800ce5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce60:	4333      	orrs	r3, r6
 800ce62:	f000 8592 	beq.w	800d98a <_dtoa_r+0xbb2>
 800ce66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce68:	b963      	cbnz	r3, 800ce84 <_dtoa_r+0xac>
 800ce6a:	4b92      	ldr	r3, [pc, #584]	; (800d0b4 <_dtoa_r+0x2dc>)
 800ce6c:	e022      	b.n	800ceb4 <_dtoa_r+0xdc>
 800ce6e:	4b92      	ldr	r3, [pc, #584]	; (800d0b8 <_dtoa_r+0x2e0>)
 800ce70:	9301      	str	r3, [sp, #4]
 800ce72:	3308      	adds	r3, #8
 800ce74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ce76:	6013      	str	r3, [r2, #0]
 800ce78:	9801      	ldr	r0, [sp, #4]
 800ce7a:	b013      	add	sp, #76	; 0x4c
 800ce7c:	ecbd 8b04 	vpop	{d8-d9}
 800ce80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce84:	4b8b      	ldr	r3, [pc, #556]	; (800d0b4 <_dtoa_r+0x2dc>)
 800ce86:	9301      	str	r3, [sp, #4]
 800ce88:	3303      	adds	r3, #3
 800ce8a:	e7f3      	b.n	800ce74 <_dtoa_r+0x9c>
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	2300      	movs	r3, #0
 800ce90:	4650      	mov	r0, sl
 800ce92:	4659      	mov	r1, fp
 800ce94:	f7f3 fe40 	bl	8000b18 <__aeabi_dcmpeq>
 800ce98:	ec4b ab19 	vmov	d9, sl, fp
 800ce9c:	4680      	mov	r8, r0
 800ce9e:	b158      	cbz	r0, 800ceb8 <_dtoa_r+0xe0>
 800cea0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cea2:	2301      	movs	r3, #1
 800cea4:	6013      	str	r3, [r2, #0]
 800cea6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	f000 856b 	beq.w	800d984 <_dtoa_r+0xbac>
 800ceae:	4883      	ldr	r0, [pc, #524]	; (800d0bc <_dtoa_r+0x2e4>)
 800ceb0:	6018      	str	r0, [r3, #0]
 800ceb2:	1e43      	subs	r3, r0, #1
 800ceb4:	9301      	str	r3, [sp, #4]
 800ceb6:	e7df      	b.n	800ce78 <_dtoa_r+0xa0>
 800ceb8:	ec4b ab10 	vmov	d0, sl, fp
 800cebc:	aa10      	add	r2, sp, #64	; 0x40
 800cebe:	a911      	add	r1, sp, #68	; 0x44
 800cec0:	4620      	mov	r0, r4
 800cec2:	f001 fd29 	bl	800e918 <__d2b>
 800cec6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ceca:	ee08 0a10 	vmov	s16, r0
 800cece:	2d00      	cmp	r5, #0
 800ced0:	f000 8084 	beq.w	800cfdc <_dtoa_r+0x204>
 800ced4:	ee19 3a90 	vmov	r3, s19
 800ced8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cedc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cee0:	4656      	mov	r6, sl
 800cee2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cee6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ceea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ceee:	4b74      	ldr	r3, [pc, #464]	; (800d0c0 <_dtoa_r+0x2e8>)
 800cef0:	2200      	movs	r2, #0
 800cef2:	4630      	mov	r0, r6
 800cef4:	4639      	mov	r1, r7
 800cef6:	f7f3 f9ef 	bl	80002d8 <__aeabi_dsub>
 800cefa:	a365      	add	r3, pc, #404	; (adr r3, 800d090 <_dtoa_r+0x2b8>)
 800cefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf00:	f7f3 fba2 	bl	8000648 <__aeabi_dmul>
 800cf04:	a364      	add	r3, pc, #400	; (adr r3, 800d098 <_dtoa_r+0x2c0>)
 800cf06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0a:	f7f3 f9e7 	bl	80002dc <__adddf3>
 800cf0e:	4606      	mov	r6, r0
 800cf10:	4628      	mov	r0, r5
 800cf12:	460f      	mov	r7, r1
 800cf14:	f7f3 fb2e 	bl	8000574 <__aeabi_i2d>
 800cf18:	a361      	add	r3, pc, #388	; (adr r3, 800d0a0 <_dtoa_r+0x2c8>)
 800cf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1e:	f7f3 fb93 	bl	8000648 <__aeabi_dmul>
 800cf22:	4602      	mov	r2, r0
 800cf24:	460b      	mov	r3, r1
 800cf26:	4630      	mov	r0, r6
 800cf28:	4639      	mov	r1, r7
 800cf2a:	f7f3 f9d7 	bl	80002dc <__adddf3>
 800cf2e:	4606      	mov	r6, r0
 800cf30:	460f      	mov	r7, r1
 800cf32:	f7f3 fe39 	bl	8000ba8 <__aeabi_d2iz>
 800cf36:	2200      	movs	r2, #0
 800cf38:	9000      	str	r0, [sp, #0]
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	4630      	mov	r0, r6
 800cf3e:	4639      	mov	r1, r7
 800cf40:	f7f3 fdf4 	bl	8000b2c <__aeabi_dcmplt>
 800cf44:	b150      	cbz	r0, 800cf5c <_dtoa_r+0x184>
 800cf46:	9800      	ldr	r0, [sp, #0]
 800cf48:	f7f3 fb14 	bl	8000574 <__aeabi_i2d>
 800cf4c:	4632      	mov	r2, r6
 800cf4e:	463b      	mov	r3, r7
 800cf50:	f7f3 fde2 	bl	8000b18 <__aeabi_dcmpeq>
 800cf54:	b910      	cbnz	r0, 800cf5c <_dtoa_r+0x184>
 800cf56:	9b00      	ldr	r3, [sp, #0]
 800cf58:	3b01      	subs	r3, #1
 800cf5a:	9300      	str	r3, [sp, #0]
 800cf5c:	9b00      	ldr	r3, [sp, #0]
 800cf5e:	2b16      	cmp	r3, #22
 800cf60:	d85a      	bhi.n	800d018 <_dtoa_r+0x240>
 800cf62:	9a00      	ldr	r2, [sp, #0]
 800cf64:	4b57      	ldr	r3, [pc, #348]	; (800d0c4 <_dtoa_r+0x2ec>)
 800cf66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf6e:	ec51 0b19 	vmov	r0, r1, d9
 800cf72:	f7f3 fddb 	bl	8000b2c <__aeabi_dcmplt>
 800cf76:	2800      	cmp	r0, #0
 800cf78:	d050      	beq.n	800d01c <_dtoa_r+0x244>
 800cf7a:	9b00      	ldr	r3, [sp, #0]
 800cf7c:	3b01      	subs	r3, #1
 800cf7e:	9300      	str	r3, [sp, #0]
 800cf80:	2300      	movs	r3, #0
 800cf82:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf86:	1b5d      	subs	r5, r3, r5
 800cf88:	1e6b      	subs	r3, r5, #1
 800cf8a:	9305      	str	r3, [sp, #20]
 800cf8c:	bf45      	ittet	mi
 800cf8e:	f1c5 0301 	rsbmi	r3, r5, #1
 800cf92:	9304      	strmi	r3, [sp, #16]
 800cf94:	2300      	movpl	r3, #0
 800cf96:	2300      	movmi	r3, #0
 800cf98:	bf4c      	ite	mi
 800cf9a:	9305      	strmi	r3, [sp, #20]
 800cf9c:	9304      	strpl	r3, [sp, #16]
 800cf9e:	9b00      	ldr	r3, [sp, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	db3d      	blt.n	800d020 <_dtoa_r+0x248>
 800cfa4:	9b05      	ldr	r3, [sp, #20]
 800cfa6:	9a00      	ldr	r2, [sp, #0]
 800cfa8:	920a      	str	r2, [sp, #40]	; 0x28
 800cfaa:	4413      	add	r3, r2
 800cfac:	9305      	str	r3, [sp, #20]
 800cfae:	2300      	movs	r3, #0
 800cfb0:	9307      	str	r3, [sp, #28]
 800cfb2:	9b06      	ldr	r3, [sp, #24]
 800cfb4:	2b09      	cmp	r3, #9
 800cfb6:	f200 8089 	bhi.w	800d0cc <_dtoa_r+0x2f4>
 800cfba:	2b05      	cmp	r3, #5
 800cfbc:	bfc4      	itt	gt
 800cfbe:	3b04      	subgt	r3, #4
 800cfc0:	9306      	strgt	r3, [sp, #24]
 800cfc2:	9b06      	ldr	r3, [sp, #24]
 800cfc4:	f1a3 0302 	sub.w	r3, r3, #2
 800cfc8:	bfcc      	ite	gt
 800cfca:	2500      	movgt	r5, #0
 800cfcc:	2501      	movle	r5, #1
 800cfce:	2b03      	cmp	r3, #3
 800cfd0:	f200 8087 	bhi.w	800d0e2 <_dtoa_r+0x30a>
 800cfd4:	e8df f003 	tbb	[pc, r3]
 800cfd8:	59383a2d 	.word	0x59383a2d
 800cfdc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cfe0:	441d      	add	r5, r3
 800cfe2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cfe6:	2b20      	cmp	r3, #32
 800cfe8:	bfc1      	itttt	gt
 800cfea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cfee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cff2:	fa0b f303 	lslgt.w	r3, fp, r3
 800cff6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cffa:	bfda      	itte	le
 800cffc:	f1c3 0320 	rsble	r3, r3, #32
 800d000:	fa06 f003 	lslle.w	r0, r6, r3
 800d004:	4318      	orrgt	r0, r3
 800d006:	f7f3 faa5 	bl	8000554 <__aeabi_ui2d>
 800d00a:	2301      	movs	r3, #1
 800d00c:	4606      	mov	r6, r0
 800d00e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d012:	3d01      	subs	r5, #1
 800d014:	930e      	str	r3, [sp, #56]	; 0x38
 800d016:	e76a      	b.n	800ceee <_dtoa_r+0x116>
 800d018:	2301      	movs	r3, #1
 800d01a:	e7b2      	b.n	800cf82 <_dtoa_r+0x1aa>
 800d01c:	900b      	str	r0, [sp, #44]	; 0x2c
 800d01e:	e7b1      	b.n	800cf84 <_dtoa_r+0x1ac>
 800d020:	9b04      	ldr	r3, [sp, #16]
 800d022:	9a00      	ldr	r2, [sp, #0]
 800d024:	1a9b      	subs	r3, r3, r2
 800d026:	9304      	str	r3, [sp, #16]
 800d028:	4253      	negs	r3, r2
 800d02a:	9307      	str	r3, [sp, #28]
 800d02c:	2300      	movs	r3, #0
 800d02e:	930a      	str	r3, [sp, #40]	; 0x28
 800d030:	e7bf      	b.n	800cfb2 <_dtoa_r+0x1da>
 800d032:	2300      	movs	r3, #0
 800d034:	9308      	str	r3, [sp, #32]
 800d036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d038:	2b00      	cmp	r3, #0
 800d03a:	dc55      	bgt.n	800d0e8 <_dtoa_r+0x310>
 800d03c:	2301      	movs	r3, #1
 800d03e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d042:	461a      	mov	r2, r3
 800d044:	9209      	str	r2, [sp, #36]	; 0x24
 800d046:	e00c      	b.n	800d062 <_dtoa_r+0x28a>
 800d048:	2301      	movs	r3, #1
 800d04a:	e7f3      	b.n	800d034 <_dtoa_r+0x25c>
 800d04c:	2300      	movs	r3, #0
 800d04e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d050:	9308      	str	r3, [sp, #32]
 800d052:	9b00      	ldr	r3, [sp, #0]
 800d054:	4413      	add	r3, r2
 800d056:	9302      	str	r3, [sp, #8]
 800d058:	3301      	adds	r3, #1
 800d05a:	2b01      	cmp	r3, #1
 800d05c:	9303      	str	r3, [sp, #12]
 800d05e:	bfb8      	it	lt
 800d060:	2301      	movlt	r3, #1
 800d062:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d064:	2200      	movs	r2, #0
 800d066:	6042      	str	r2, [r0, #4]
 800d068:	2204      	movs	r2, #4
 800d06a:	f102 0614 	add.w	r6, r2, #20
 800d06e:	429e      	cmp	r6, r3
 800d070:	6841      	ldr	r1, [r0, #4]
 800d072:	d93d      	bls.n	800d0f0 <_dtoa_r+0x318>
 800d074:	4620      	mov	r0, r4
 800d076:	f001 f861 	bl	800e13c <_Balloc>
 800d07a:	9001      	str	r0, [sp, #4]
 800d07c:	2800      	cmp	r0, #0
 800d07e:	d13b      	bne.n	800d0f8 <_dtoa_r+0x320>
 800d080:	4b11      	ldr	r3, [pc, #68]	; (800d0c8 <_dtoa_r+0x2f0>)
 800d082:	4602      	mov	r2, r0
 800d084:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d088:	e6c0      	b.n	800ce0c <_dtoa_r+0x34>
 800d08a:	2301      	movs	r3, #1
 800d08c:	e7df      	b.n	800d04e <_dtoa_r+0x276>
 800d08e:	bf00      	nop
 800d090:	636f4361 	.word	0x636f4361
 800d094:	3fd287a7 	.word	0x3fd287a7
 800d098:	8b60c8b3 	.word	0x8b60c8b3
 800d09c:	3fc68a28 	.word	0x3fc68a28
 800d0a0:	509f79fb 	.word	0x509f79fb
 800d0a4:	3fd34413 	.word	0x3fd34413
 800d0a8:	08010641 	.word	0x08010641
 800d0ac:	08010852 	.word	0x08010852
 800d0b0:	7ff00000 	.word	0x7ff00000
 800d0b4:	0801084e 	.word	0x0801084e
 800d0b8:	08010845 	.word	0x08010845
 800d0bc:	08010619 	.word	0x08010619
 800d0c0:	3ff80000 	.word	0x3ff80000
 800d0c4:	080109c0 	.word	0x080109c0
 800d0c8:	080108ad 	.word	0x080108ad
 800d0cc:	2501      	movs	r5, #1
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	9306      	str	r3, [sp, #24]
 800d0d2:	9508      	str	r5, [sp, #32]
 800d0d4:	f04f 33ff 	mov.w	r3, #4294967295
 800d0d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	2312      	movs	r3, #18
 800d0e0:	e7b0      	b.n	800d044 <_dtoa_r+0x26c>
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	9308      	str	r3, [sp, #32]
 800d0e6:	e7f5      	b.n	800d0d4 <_dtoa_r+0x2fc>
 800d0e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d0ee:	e7b8      	b.n	800d062 <_dtoa_r+0x28a>
 800d0f0:	3101      	adds	r1, #1
 800d0f2:	6041      	str	r1, [r0, #4]
 800d0f4:	0052      	lsls	r2, r2, #1
 800d0f6:	e7b8      	b.n	800d06a <_dtoa_r+0x292>
 800d0f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0fa:	9a01      	ldr	r2, [sp, #4]
 800d0fc:	601a      	str	r2, [r3, #0]
 800d0fe:	9b03      	ldr	r3, [sp, #12]
 800d100:	2b0e      	cmp	r3, #14
 800d102:	f200 809d 	bhi.w	800d240 <_dtoa_r+0x468>
 800d106:	2d00      	cmp	r5, #0
 800d108:	f000 809a 	beq.w	800d240 <_dtoa_r+0x468>
 800d10c:	9b00      	ldr	r3, [sp, #0]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	dd32      	ble.n	800d178 <_dtoa_r+0x3a0>
 800d112:	4ab7      	ldr	r2, [pc, #732]	; (800d3f0 <_dtoa_r+0x618>)
 800d114:	f003 030f 	and.w	r3, r3, #15
 800d118:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d11c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d120:	9b00      	ldr	r3, [sp, #0]
 800d122:	05d8      	lsls	r0, r3, #23
 800d124:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d128:	d516      	bpl.n	800d158 <_dtoa_r+0x380>
 800d12a:	4bb2      	ldr	r3, [pc, #712]	; (800d3f4 <_dtoa_r+0x61c>)
 800d12c:	ec51 0b19 	vmov	r0, r1, d9
 800d130:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d134:	f7f3 fbb2 	bl	800089c <__aeabi_ddiv>
 800d138:	f007 070f 	and.w	r7, r7, #15
 800d13c:	4682      	mov	sl, r0
 800d13e:	468b      	mov	fp, r1
 800d140:	2503      	movs	r5, #3
 800d142:	4eac      	ldr	r6, [pc, #688]	; (800d3f4 <_dtoa_r+0x61c>)
 800d144:	b957      	cbnz	r7, 800d15c <_dtoa_r+0x384>
 800d146:	4642      	mov	r2, r8
 800d148:	464b      	mov	r3, r9
 800d14a:	4650      	mov	r0, sl
 800d14c:	4659      	mov	r1, fp
 800d14e:	f7f3 fba5 	bl	800089c <__aeabi_ddiv>
 800d152:	4682      	mov	sl, r0
 800d154:	468b      	mov	fp, r1
 800d156:	e028      	b.n	800d1aa <_dtoa_r+0x3d2>
 800d158:	2502      	movs	r5, #2
 800d15a:	e7f2      	b.n	800d142 <_dtoa_r+0x36a>
 800d15c:	07f9      	lsls	r1, r7, #31
 800d15e:	d508      	bpl.n	800d172 <_dtoa_r+0x39a>
 800d160:	4640      	mov	r0, r8
 800d162:	4649      	mov	r1, r9
 800d164:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d168:	f7f3 fa6e 	bl	8000648 <__aeabi_dmul>
 800d16c:	3501      	adds	r5, #1
 800d16e:	4680      	mov	r8, r0
 800d170:	4689      	mov	r9, r1
 800d172:	107f      	asrs	r7, r7, #1
 800d174:	3608      	adds	r6, #8
 800d176:	e7e5      	b.n	800d144 <_dtoa_r+0x36c>
 800d178:	f000 809b 	beq.w	800d2b2 <_dtoa_r+0x4da>
 800d17c:	9b00      	ldr	r3, [sp, #0]
 800d17e:	4f9d      	ldr	r7, [pc, #628]	; (800d3f4 <_dtoa_r+0x61c>)
 800d180:	425e      	negs	r6, r3
 800d182:	4b9b      	ldr	r3, [pc, #620]	; (800d3f0 <_dtoa_r+0x618>)
 800d184:	f006 020f 	and.w	r2, r6, #15
 800d188:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d190:	ec51 0b19 	vmov	r0, r1, d9
 800d194:	f7f3 fa58 	bl	8000648 <__aeabi_dmul>
 800d198:	1136      	asrs	r6, r6, #4
 800d19a:	4682      	mov	sl, r0
 800d19c:	468b      	mov	fp, r1
 800d19e:	2300      	movs	r3, #0
 800d1a0:	2502      	movs	r5, #2
 800d1a2:	2e00      	cmp	r6, #0
 800d1a4:	d17a      	bne.n	800d29c <_dtoa_r+0x4c4>
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d1d3      	bne.n	800d152 <_dtoa_r+0x37a>
 800d1aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	f000 8082 	beq.w	800d2b6 <_dtoa_r+0x4de>
 800d1b2:	4b91      	ldr	r3, [pc, #580]	; (800d3f8 <_dtoa_r+0x620>)
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	4650      	mov	r0, sl
 800d1b8:	4659      	mov	r1, fp
 800d1ba:	f7f3 fcb7 	bl	8000b2c <__aeabi_dcmplt>
 800d1be:	2800      	cmp	r0, #0
 800d1c0:	d079      	beq.n	800d2b6 <_dtoa_r+0x4de>
 800d1c2:	9b03      	ldr	r3, [sp, #12]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d076      	beq.n	800d2b6 <_dtoa_r+0x4de>
 800d1c8:	9b02      	ldr	r3, [sp, #8]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	dd36      	ble.n	800d23c <_dtoa_r+0x464>
 800d1ce:	9b00      	ldr	r3, [sp, #0]
 800d1d0:	4650      	mov	r0, sl
 800d1d2:	4659      	mov	r1, fp
 800d1d4:	1e5f      	subs	r7, r3, #1
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	4b88      	ldr	r3, [pc, #544]	; (800d3fc <_dtoa_r+0x624>)
 800d1da:	f7f3 fa35 	bl	8000648 <__aeabi_dmul>
 800d1de:	9e02      	ldr	r6, [sp, #8]
 800d1e0:	4682      	mov	sl, r0
 800d1e2:	468b      	mov	fp, r1
 800d1e4:	3501      	adds	r5, #1
 800d1e6:	4628      	mov	r0, r5
 800d1e8:	f7f3 f9c4 	bl	8000574 <__aeabi_i2d>
 800d1ec:	4652      	mov	r2, sl
 800d1ee:	465b      	mov	r3, fp
 800d1f0:	f7f3 fa2a 	bl	8000648 <__aeabi_dmul>
 800d1f4:	4b82      	ldr	r3, [pc, #520]	; (800d400 <_dtoa_r+0x628>)
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	f7f3 f870 	bl	80002dc <__adddf3>
 800d1fc:	46d0      	mov	r8, sl
 800d1fe:	46d9      	mov	r9, fp
 800d200:	4682      	mov	sl, r0
 800d202:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d206:	2e00      	cmp	r6, #0
 800d208:	d158      	bne.n	800d2bc <_dtoa_r+0x4e4>
 800d20a:	4b7e      	ldr	r3, [pc, #504]	; (800d404 <_dtoa_r+0x62c>)
 800d20c:	2200      	movs	r2, #0
 800d20e:	4640      	mov	r0, r8
 800d210:	4649      	mov	r1, r9
 800d212:	f7f3 f861 	bl	80002d8 <__aeabi_dsub>
 800d216:	4652      	mov	r2, sl
 800d218:	465b      	mov	r3, fp
 800d21a:	4680      	mov	r8, r0
 800d21c:	4689      	mov	r9, r1
 800d21e:	f7f3 fca3 	bl	8000b68 <__aeabi_dcmpgt>
 800d222:	2800      	cmp	r0, #0
 800d224:	f040 8295 	bne.w	800d752 <_dtoa_r+0x97a>
 800d228:	4652      	mov	r2, sl
 800d22a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d22e:	4640      	mov	r0, r8
 800d230:	4649      	mov	r1, r9
 800d232:	f7f3 fc7b 	bl	8000b2c <__aeabi_dcmplt>
 800d236:	2800      	cmp	r0, #0
 800d238:	f040 8289 	bne.w	800d74e <_dtoa_r+0x976>
 800d23c:	ec5b ab19 	vmov	sl, fp, d9
 800d240:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d242:	2b00      	cmp	r3, #0
 800d244:	f2c0 8148 	blt.w	800d4d8 <_dtoa_r+0x700>
 800d248:	9a00      	ldr	r2, [sp, #0]
 800d24a:	2a0e      	cmp	r2, #14
 800d24c:	f300 8144 	bgt.w	800d4d8 <_dtoa_r+0x700>
 800d250:	4b67      	ldr	r3, [pc, #412]	; (800d3f0 <_dtoa_r+0x618>)
 800d252:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d256:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d25a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	f280 80d5 	bge.w	800d40c <_dtoa_r+0x634>
 800d262:	9b03      	ldr	r3, [sp, #12]
 800d264:	2b00      	cmp	r3, #0
 800d266:	f300 80d1 	bgt.w	800d40c <_dtoa_r+0x634>
 800d26a:	f040 826f 	bne.w	800d74c <_dtoa_r+0x974>
 800d26e:	4b65      	ldr	r3, [pc, #404]	; (800d404 <_dtoa_r+0x62c>)
 800d270:	2200      	movs	r2, #0
 800d272:	4640      	mov	r0, r8
 800d274:	4649      	mov	r1, r9
 800d276:	f7f3 f9e7 	bl	8000648 <__aeabi_dmul>
 800d27a:	4652      	mov	r2, sl
 800d27c:	465b      	mov	r3, fp
 800d27e:	f7f3 fc69 	bl	8000b54 <__aeabi_dcmpge>
 800d282:	9e03      	ldr	r6, [sp, #12]
 800d284:	4637      	mov	r7, r6
 800d286:	2800      	cmp	r0, #0
 800d288:	f040 8245 	bne.w	800d716 <_dtoa_r+0x93e>
 800d28c:	9d01      	ldr	r5, [sp, #4]
 800d28e:	2331      	movs	r3, #49	; 0x31
 800d290:	f805 3b01 	strb.w	r3, [r5], #1
 800d294:	9b00      	ldr	r3, [sp, #0]
 800d296:	3301      	adds	r3, #1
 800d298:	9300      	str	r3, [sp, #0]
 800d29a:	e240      	b.n	800d71e <_dtoa_r+0x946>
 800d29c:	07f2      	lsls	r2, r6, #31
 800d29e:	d505      	bpl.n	800d2ac <_dtoa_r+0x4d4>
 800d2a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2a4:	f7f3 f9d0 	bl	8000648 <__aeabi_dmul>
 800d2a8:	3501      	adds	r5, #1
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	1076      	asrs	r6, r6, #1
 800d2ae:	3708      	adds	r7, #8
 800d2b0:	e777      	b.n	800d1a2 <_dtoa_r+0x3ca>
 800d2b2:	2502      	movs	r5, #2
 800d2b4:	e779      	b.n	800d1aa <_dtoa_r+0x3d2>
 800d2b6:	9f00      	ldr	r7, [sp, #0]
 800d2b8:	9e03      	ldr	r6, [sp, #12]
 800d2ba:	e794      	b.n	800d1e6 <_dtoa_r+0x40e>
 800d2bc:	9901      	ldr	r1, [sp, #4]
 800d2be:	4b4c      	ldr	r3, [pc, #304]	; (800d3f0 <_dtoa_r+0x618>)
 800d2c0:	4431      	add	r1, r6
 800d2c2:	910d      	str	r1, [sp, #52]	; 0x34
 800d2c4:	9908      	ldr	r1, [sp, #32]
 800d2c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d2ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d2ce:	2900      	cmp	r1, #0
 800d2d0:	d043      	beq.n	800d35a <_dtoa_r+0x582>
 800d2d2:	494d      	ldr	r1, [pc, #308]	; (800d408 <_dtoa_r+0x630>)
 800d2d4:	2000      	movs	r0, #0
 800d2d6:	f7f3 fae1 	bl	800089c <__aeabi_ddiv>
 800d2da:	4652      	mov	r2, sl
 800d2dc:	465b      	mov	r3, fp
 800d2de:	f7f2 fffb 	bl	80002d8 <__aeabi_dsub>
 800d2e2:	9d01      	ldr	r5, [sp, #4]
 800d2e4:	4682      	mov	sl, r0
 800d2e6:	468b      	mov	fp, r1
 800d2e8:	4649      	mov	r1, r9
 800d2ea:	4640      	mov	r0, r8
 800d2ec:	f7f3 fc5c 	bl	8000ba8 <__aeabi_d2iz>
 800d2f0:	4606      	mov	r6, r0
 800d2f2:	f7f3 f93f 	bl	8000574 <__aeabi_i2d>
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	460b      	mov	r3, r1
 800d2fa:	4640      	mov	r0, r8
 800d2fc:	4649      	mov	r1, r9
 800d2fe:	f7f2 ffeb 	bl	80002d8 <__aeabi_dsub>
 800d302:	3630      	adds	r6, #48	; 0x30
 800d304:	f805 6b01 	strb.w	r6, [r5], #1
 800d308:	4652      	mov	r2, sl
 800d30a:	465b      	mov	r3, fp
 800d30c:	4680      	mov	r8, r0
 800d30e:	4689      	mov	r9, r1
 800d310:	f7f3 fc0c 	bl	8000b2c <__aeabi_dcmplt>
 800d314:	2800      	cmp	r0, #0
 800d316:	d163      	bne.n	800d3e0 <_dtoa_r+0x608>
 800d318:	4642      	mov	r2, r8
 800d31a:	464b      	mov	r3, r9
 800d31c:	4936      	ldr	r1, [pc, #216]	; (800d3f8 <_dtoa_r+0x620>)
 800d31e:	2000      	movs	r0, #0
 800d320:	f7f2 ffda 	bl	80002d8 <__aeabi_dsub>
 800d324:	4652      	mov	r2, sl
 800d326:	465b      	mov	r3, fp
 800d328:	f7f3 fc00 	bl	8000b2c <__aeabi_dcmplt>
 800d32c:	2800      	cmp	r0, #0
 800d32e:	f040 80b5 	bne.w	800d49c <_dtoa_r+0x6c4>
 800d332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d334:	429d      	cmp	r5, r3
 800d336:	d081      	beq.n	800d23c <_dtoa_r+0x464>
 800d338:	4b30      	ldr	r3, [pc, #192]	; (800d3fc <_dtoa_r+0x624>)
 800d33a:	2200      	movs	r2, #0
 800d33c:	4650      	mov	r0, sl
 800d33e:	4659      	mov	r1, fp
 800d340:	f7f3 f982 	bl	8000648 <__aeabi_dmul>
 800d344:	4b2d      	ldr	r3, [pc, #180]	; (800d3fc <_dtoa_r+0x624>)
 800d346:	4682      	mov	sl, r0
 800d348:	468b      	mov	fp, r1
 800d34a:	4640      	mov	r0, r8
 800d34c:	4649      	mov	r1, r9
 800d34e:	2200      	movs	r2, #0
 800d350:	f7f3 f97a 	bl	8000648 <__aeabi_dmul>
 800d354:	4680      	mov	r8, r0
 800d356:	4689      	mov	r9, r1
 800d358:	e7c6      	b.n	800d2e8 <_dtoa_r+0x510>
 800d35a:	4650      	mov	r0, sl
 800d35c:	4659      	mov	r1, fp
 800d35e:	f7f3 f973 	bl	8000648 <__aeabi_dmul>
 800d362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d364:	9d01      	ldr	r5, [sp, #4]
 800d366:	930f      	str	r3, [sp, #60]	; 0x3c
 800d368:	4682      	mov	sl, r0
 800d36a:	468b      	mov	fp, r1
 800d36c:	4649      	mov	r1, r9
 800d36e:	4640      	mov	r0, r8
 800d370:	f7f3 fc1a 	bl	8000ba8 <__aeabi_d2iz>
 800d374:	4606      	mov	r6, r0
 800d376:	f7f3 f8fd 	bl	8000574 <__aeabi_i2d>
 800d37a:	3630      	adds	r6, #48	; 0x30
 800d37c:	4602      	mov	r2, r0
 800d37e:	460b      	mov	r3, r1
 800d380:	4640      	mov	r0, r8
 800d382:	4649      	mov	r1, r9
 800d384:	f7f2 ffa8 	bl	80002d8 <__aeabi_dsub>
 800d388:	f805 6b01 	strb.w	r6, [r5], #1
 800d38c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d38e:	429d      	cmp	r5, r3
 800d390:	4680      	mov	r8, r0
 800d392:	4689      	mov	r9, r1
 800d394:	f04f 0200 	mov.w	r2, #0
 800d398:	d124      	bne.n	800d3e4 <_dtoa_r+0x60c>
 800d39a:	4b1b      	ldr	r3, [pc, #108]	; (800d408 <_dtoa_r+0x630>)
 800d39c:	4650      	mov	r0, sl
 800d39e:	4659      	mov	r1, fp
 800d3a0:	f7f2 ff9c 	bl	80002dc <__adddf3>
 800d3a4:	4602      	mov	r2, r0
 800d3a6:	460b      	mov	r3, r1
 800d3a8:	4640      	mov	r0, r8
 800d3aa:	4649      	mov	r1, r9
 800d3ac:	f7f3 fbdc 	bl	8000b68 <__aeabi_dcmpgt>
 800d3b0:	2800      	cmp	r0, #0
 800d3b2:	d173      	bne.n	800d49c <_dtoa_r+0x6c4>
 800d3b4:	4652      	mov	r2, sl
 800d3b6:	465b      	mov	r3, fp
 800d3b8:	4913      	ldr	r1, [pc, #76]	; (800d408 <_dtoa_r+0x630>)
 800d3ba:	2000      	movs	r0, #0
 800d3bc:	f7f2 ff8c 	bl	80002d8 <__aeabi_dsub>
 800d3c0:	4602      	mov	r2, r0
 800d3c2:	460b      	mov	r3, r1
 800d3c4:	4640      	mov	r0, r8
 800d3c6:	4649      	mov	r1, r9
 800d3c8:	f7f3 fbb0 	bl	8000b2c <__aeabi_dcmplt>
 800d3cc:	2800      	cmp	r0, #0
 800d3ce:	f43f af35 	beq.w	800d23c <_dtoa_r+0x464>
 800d3d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d3d4:	1e6b      	subs	r3, r5, #1
 800d3d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d3d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d3dc:	2b30      	cmp	r3, #48	; 0x30
 800d3de:	d0f8      	beq.n	800d3d2 <_dtoa_r+0x5fa>
 800d3e0:	9700      	str	r7, [sp, #0]
 800d3e2:	e049      	b.n	800d478 <_dtoa_r+0x6a0>
 800d3e4:	4b05      	ldr	r3, [pc, #20]	; (800d3fc <_dtoa_r+0x624>)
 800d3e6:	f7f3 f92f 	bl	8000648 <__aeabi_dmul>
 800d3ea:	4680      	mov	r8, r0
 800d3ec:	4689      	mov	r9, r1
 800d3ee:	e7bd      	b.n	800d36c <_dtoa_r+0x594>
 800d3f0:	080109c0 	.word	0x080109c0
 800d3f4:	08010998 	.word	0x08010998
 800d3f8:	3ff00000 	.word	0x3ff00000
 800d3fc:	40240000 	.word	0x40240000
 800d400:	401c0000 	.word	0x401c0000
 800d404:	40140000 	.word	0x40140000
 800d408:	3fe00000 	.word	0x3fe00000
 800d40c:	9d01      	ldr	r5, [sp, #4]
 800d40e:	4656      	mov	r6, sl
 800d410:	465f      	mov	r7, fp
 800d412:	4642      	mov	r2, r8
 800d414:	464b      	mov	r3, r9
 800d416:	4630      	mov	r0, r6
 800d418:	4639      	mov	r1, r7
 800d41a:	f7f3 fa3f 	bl	800089c <__aeabi_ddiv>
 800d41e:	f7f3 fbc3 	bl	8000ba8 <__aeabi_d2iz>
 800d422:	4682      	mov	sl, r0
 800d424:	f7f3 f8a6 	bl	8000574 <__aeabi_i2d>
 800d428:	4642      	mov	r2, r8
 800d42a:	464b      	mov	r3, r9
 800d42c:	f7f3 f90c 	bl	8000648 <__aeabi_dmul>
 800d430:	4602      	mov	r2, r0
 800d432:	460b      	mov	r3, r1
 800d434:	4630      	mov	r0, r6
 800d436:	4639      	mov	r1, r7
 800d438:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d43c:	f7f2 ff4c 	bl	80002d8 <__aeabi_dsub>
 800d440:	f805 6b01 	strb.w	r6, [r5], #1
 800d444:	9e01      	ldr	r6, [sp, #4]
 800d446:	9f03      	ldr	r7, [sp, #12]
 800d448:	1bae      	subs	r6, r5, r6
 800d44a:	42b7      	cmp	r7, r6
 800d44c:	4602      	mov	r2, r0
 800d44e:	460b      	mov	r3, r1
 800d450:	d135      	bne.n	800d4be <_dtoa_r+0x6e6>
 800d452:	f7f2 ff43 	bl	80002dc <__adddf3>
 800d456:	4642      	mov	r2, r8
 800d458:	464b      	mov	r3, r9
 800d45a:	4606      	mov	r6, r0
 800d45c:	460f      	mov	r7, r1
 800d45e:	f7f3 fb83 	bl	8000b68 <__aeabi_dcmpgt>
 800d462:	b9d0      	cbnz	r0, 800d49a <_dtoa_r+0x6c2>
 800d464:	4642      	mov	r2, r8
 800d466:	464b      	mov	r3, r9
 800d468:	4630      	mov	r0, r6
 800d46a:	4639      	mov	r1, r7
 800d46c:	f7f3 fb54 	bl	8000b18 <__aeabi_dcmpeq>
 800d470:	b110      	cbz	r0, 800d478 <_dtoa_r+0x6a0>
 800d472:	f01a 0f01 	tst.w	sl, #1
 800d476:	d110      	bne.n	800d49a <_dtoa_r+0x6c2>
 800d478:	4620      	mov	r0, r4
 800d47a:	ee18 1a10 	vmov	r1, s16
 800d47e:	f000 fe9d 	bl	800e1bc <_Bfree>
 800d482:	2300      	movs	r3, #0
 800d484:	9800      	ldr	r0, [sp, #0]
 800d486:	702b      	strb	r3, [r5, #0]
 800d488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d48a:	3001      	adds	r0, #1
 800d48c:	6018      	str	r0, [r3, #0]
 800d48e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d490:	2b00      	cmp	r3, #0
 800d492:	f43f acf1 	beq.w	800ce78 <_dtoa_r+0xa0>
 800d496:	601d      	str	r5, [r3, #0]
 800d498:	e4ee      	b.n	800ce78 <_dtoa_r+0xa0>
 800d49a:	9f00      	ldr	r7, [sp, #0]
 800d49c:	462b      	mov	r3, r5
 800d49e:	461d      	mov	r5, r3
 800d4a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d4a4:	2a39      	cmp	r2, #57	; 0x39
 800d4a6:	d106      	bne.n	800d4b6 <_dtoa_r+0x6de>
 800d4a8:	9a01      	ldr	r2, [sp, #4]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d1f7      	bne.n	800d49e <_dtoa_r+0x6c6>
 800d4ae:	9901      	ldr	r1, [sp, #4]
 800d4b0:	2230      	movs	r2, #48	; 0x30
 800d4b2:	3701      	adds	r7, #1
 800d4b4:	700a      	strb	r2, [r1, #0]
 800d4b6:	781a      	ldrb	r2, [r3, #0]
 800d4b8:	3201      	adds	r2, #1
 800d4ba:	701a      	strb	r2, [r3, #0]
 800d4bc:	e790      	b.n	800d3e0 <_dtoa_r+0x608>
 800d4be:	4ba6      	ldr	r3, [pc, #664]	; (800d758 <_dtoa_r+0x980>)
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	f7f3 f8c1 	bl	8000648 <__aeabi_dmul>
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	4606      	mov	r6, r0
 800d4cc:	460f      	mov	r7, r1
 800d4ce:	f7f3 fb23 	bl	8000b18 <__aeabi_dcmpeq>
 800d4d2:	2800      	cmp	r0, #0
 800d4d4:	d09d      	beq.n	800d412 <_dtoa_r+0x63a>
 800d4d6:	e7cf      	b.n	800d478 <_dtoa_r+0x6a0>
 800d4d8:	9a08      	ldr	r2, [sp, #32]
 800d4da:	2a00      	cmp	r2, #0
 800d4dc:	f000 80d7 	beq.w	800d68e <_dtoa_r+0x8b6>
 800d4e0:	9a06      	ldr	r2, [sp, #24]
 800d4e2:	2a01      	cmp	r2, #1
 800d4e4:	f300 80ba 	bgt.w	800d65c <_dtoa_r+0x884>
 800d4e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d4ea:	2a00      	cmp	r2, #0
 800d4ec:	f000 80b2 	beq.w	800d654 <_dtoa_r+0x87c>
 800d4f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d4f4:	9e07      	ldr	r6, [sp, #28]
 800d4f6:	9d04      	ldr	r5, [sp, #16]
 800d4f8:	9a04      	ldr	r2, [sp, #16]
 800d4fa:	441a      	add	r2, r3
 800d4fc:	9204      	str	r2, [sp, #16]
 800d4fe:	9a05      	ldr	r2, [sp, #20]
 800d500:	2101      	movs	r1, #1
 800d502:	441a      	add	r2, r3
 800d504:	4620      	mov	r0, r4
 800d506:	9205      	str	r2, [sp, #20]
 800d508:	f000 ff5a 	bl	800e3c0 <__i2b>
 800d50c:	4607      	mov	r7, r0
 800d50e:	2d00      	cmp	r5, #0
 800d510:	dd0c      	ble.n	800d52c <_dtoa_r+0x754>
 800d512:	9b05      	ldr	r3, [sp, #20]
 800d514:	2b00      	cmp	r3, #0
 800d516:	dd09      	ble.n	800d52c <_dtoa_r+0x754>
 800d518:	42ab      	cmp	r3, r5
 800d51a:	9a04      	ldr	r2, [sp, #16]
 800d51c:	bfa8      	it	ge
 800d51e:	462b      	movge	r3, r5
 800d520:	1ad2      	subs	r2, r2, r3
 800d522:	9204      	str	r2, [sp, #16]
 800d524:	9a05      	ldr	r2, [sp, #20]
 800d526:	1aed      	subs	r5, r5, r3
 800d528:	1ad3      	subs	r3, r2, r3
 800d52a:	9305      	str	r3, [sp, #20]
 800d52c:	9b07      	ldr	r3, [sp, #28]
 800d52e:	b31b      	cbz	r3, 800d578 <_dtoa_r+0x7a0>
 800d530:	9b08      	ldr	r3, [sp, #32]
 800d532:	2b00      	cmp	r3, #0
 800d534:	f000 80af 	beq.w	800d696 <_dtoa_r+0x8be>
 800d538:	2e00      	cmp	r6, #0
 800d53a:	dd13      	ble.n	800d564 <_dtoa_r+0x78c>
 800d53c:	4639      	mov	r1, r7
 800d53e:	4632      	mov	r2, r6
 800d540:	4620      	mov	r0, r4
 800d542:	f000 fffd 	bl	800e540 <__pow5mult>
 800d546:	ee18 2a10 	vmov	r2, s16
 800d54a:	4601      	mov	r1, r0
 800d54c:	4607      	mov	r7, r0
 800d54e:	4620      	mov	r0, r4
 800d550:	f000 ff4c 	bl	800e3ec <__multiply>
 800d554:	ee18 1a10 	vmov	r1, s16
 800d558:	4680      	mov	r8, r0
 800d55a:	4620      	mov	r0, r4
 800d55c:	f000 fe2e 	bl	800e1bc <_Bfree>
 800d560:	ee08 8a10 	vmov	s16, r8
 800d564:	9b07      	ldr	r3, [sp, #28]
 800d566:	1b9a      	subs	r2, r3, r6
 800d568:	d006      	beq.n	800d578 <_dtoa_r+0x7a0>
 800d56a:	ee18 1a10 	vmov	r1, s16
 800d56e:	4620      	mov	r0, r4
 800d570:	f000 ffe6 	bl	800e540 <__pow5mult>
 800d574:	ee08 0a10 	vmov	s16, r0
 800d578:	2101      	movs	r1, #1
 800d57a:	4620      	mov	r0, r4
 800d57c:	f000 ff20 	bl	800e3c0 <__i2b>
 800d580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d582:	2b00      	cmp	r3, #0
 800d584:	4606      	mov	r6, r0
 800d586:	f340 8088 	ble.w	800d69a <_dtoa_r+0x8c2>
 800d58a:	461a      	mov	r2, r3
 800d58c:	4601      	mov	r1, r0
 800d58e:	4620      	mov	r0, r4
 800d590:	f000 ffd6 	bl	800e540 <__pow5mult>
 800d594:	9b06      	ldr	r3, [sp, #24]
 800d596:	2b01      	cmp	r3, #1
 800d598:	4606      	mov	r6, r0
 800d59a:	f340 8081 	ble.w	800d6a0 <_dtoa_r+0x8c8>
 800d59e:	f04f 0800 	mov.w	r8, #0
 800d5a2:	6933      	ldr	r3, [r6, #16]
 800d5a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d5a8:	6918      	ldr	r0, [r3, #16]
 800d5aa:	f000 feb9 	bl	800e320 <__hi0bits>
 800d5ae:	f1c0 0020 	rsb	r0, r0, #32
 800d5b2:	9b05      	ldr	r3, [sp, #20]
 800d5b4:	4418      	add	r0, r3
 800d5b6:	f010 001f 	ands.w	r0, r0, #31
 800d5ba:	f000 8092 	beq.w	800d6e2 <_dtoa_r+0x90a>
 800d5be:	f1c0 0320 	rsb	r3, r0, #32
 800d5c2:	2b04      	cmp	r3, #4
 800d5c4:	f340 808a 	ble.w	800d6dc <_dtoa_r+0x904>
 800d5c8:	f1c0 001c 	rsb	r0, r0, #28
 800d5cc:	9b04      	ldr	r3, [sp, #16]
 800d5ce:	4403      	add	r3, r0
 800d5d0:	9304      	str	r3, [sp, #16]
 800d5d2:	9b05      	ldr	r3, [sp, #20]
 800d5d4:	4403      	add	r3, r0
 800d5d6:	4405      	add	r5, r0
 800d5d8:	9305      	str	r3, [sp, #20]
 800d5da:	9b04      	ldr	r3, [sp, #16]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	dd07      	ble.n	800d5f0 <_dtoa_r+0x818>
 800d5e0:	ee18 1a10 	vmov	r1, s16
 800d5e4:	461a      	mov	r2, r3
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	f001 f804 	bl	800e5f4 <__lshift>
 800d5ec:	ee08 0a10 	vmov	s16, r0
 800d5f0:	9b05      	ldr	r3, [sp, #20]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	dd05      	ble.n	800d602 <_dtoa_r+0x82a>
 800d5f6:	4631      	mov	r1, r6
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	f000 fffa 	bl	800e5f4 <__lshift>
 800d600:	4606      	mov	r6, r0
 800d602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d604:	2b00      	cmp	r3, #0
 800d606:	d06e      	beq.n	800d6e6 <_dtoa_r+0x90e>
 800d608:	ee18 0a10 	vmov	r0, s16
 800d60c:	4631      	mov	r1, r6
 800d60e:	f001 f861 	bl	800e6d4 <__mcmp>
 800d612:	2800      	cmp	r0, #0
 800d614:	da67      	bge.n	800d6e6 <_dtoa_r+0x90e>
 800d616:	9b00      	ldr	r3, [sp, #0]
 800d618:	3b01      	subs	r3, #1
 800d61a:	ee18 1a10 	vmov	r1, s16
 800d61e:	9300      	str	r3, [sp, #0]
 800d620:	220a      	movs	r2, #10
 800d622:	2300      	movs	r3, #0
 800d624:	4620      	mov	r0, r4
 800d626:	f000 fdeb 	bl	800e200 <__multadd>
 800d62a:	9b08      	ldr	r3, [sp, #32]
 800d62c:	ee08 0a10 	vmov	s16, r0
 800d630:	2b00      	cmp	r3, #0
 800d632:	f000 81b1 	beq.w	800d998 <_dtoa_r+0xbc0>
 800d636:	2300      	movs	r3, #0
 800d638:	4639      	mov	r1, r7
 800d63a:	220a      	movs	r2, #10
 800d63c:	4620      	mov	r0, r4
 800d63e:	f000 fddf 	bl	800e200 <__multadd>
 800d642:	9b02      	ldr	r3, [sp, #8]
 800d644:	2b00      	cmp	r3, #0
 800d646:	4607      	mov	r7, r0
 800d648:	f300 808e 	bgt.w	800d768 <_dtoa_r+0x990>
 800d64c:	9b06      	ldr	r3, [sp, #24]
 800d64e:	2b02      	cmp	r3, #2
 800d650:	dc51      	bgt.n	800d6f6 <_dtoa_r+0x91e>
 800d652:	e089      	b.n	800d768 <_dtoa_r+0x990>
 800d654:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d656:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d65a:	e74b      	b.n	800d4f4 <_dtoa_r+0x71c>
 800d65c:	9b03      	ldr	r3, [sp, #12]
 800d65e:	1e5e      	subs	r6, r3, #1
 800d660:	9b07      	ldr	r3, [sp, #28]
 800d662:	42b3      	cmp	r3, r6
 800d664:	bfbf      	itttt	lt
 800d666:	9b07      	ldrlt	r3, [sp, #28]
 800d668:	9607      	strlt	r6, [sp, #28]
 800d66a:	1af2      	sublt	r2, r6, r3
 800d66c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d66e:	bfb6      	itet	lt
 800d670:	189b      	addlt	r3, r3, r2
 800d672:	1b9e      	subge	r6, r3, r6
 800d674:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d676:	9b03      	ldr	r3, [sp, #12]
 800d678:	bfb8      	it	lt
 800d67a:	2600      	movlt	r6, #0
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	bfb7      	itett	lt
 800d680:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d684:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d688:	1a9d      	sublt	r5, r3, r2
 800d68a:	2300      	movlt	r3, #0
 800d68c:	e734      	b.n	800d4f8 <_dtoa_r+0x720>
 800d68e:	9e07      	ldr	r6, [sp, #28]
 800d690:	9d04      	ldr	r5, [sp, #16]
 800d692:	9f08      	ldr	r7, [sp, #32]
 800d694:	e73b      	b.n	800d50e <_dtoa_r+0x736>
 800d696:	9a07      	ldr	r2, [sp, #28]
 800d698:	e767      	b.n	800d56a <_dtoa_r+0x792>
 800d69a:	9b06      	ldr	r3, [sp, #24]
 800d69c:	2b01      	cmp	r3, #1
 800d69e:	dc18      	bgt.n	800d6d2 <_dtoa_r+0x8fa>
 800d6a0:	f1ba 0f00 	cmp.w	sl, #0
 800d6a4:	d115      	bne.n	800d6d2 <_dtoa_r+0x8fa>
 800d6a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d6aa:	b993      	cbnz	r3, 800d6d2 <_dtoa_r+0x8fa>
 800d6ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d6b0:	0d1b      	lsrs	r3, r3, #20
 800d6b2:	051b      	lsls	r3, r3, #20
 800d6b4:	b183      	cbz	r3, 800d6d8 <_dtoa_r+0x900>
 800d6b6:	9b04      	ldr	r3, [sp, #16]
 800d6b8:	3301      	adds	r3, #1
 800d6ba:	9304      	str	r3, [sp, #16]
 800d6bc:	9b05      	ldr	r3, [sp, #20]
 800d6be:	3301      	adds	r3, #1
 800d6c0:	9305      	str	r3, [sp, #20]
 800d6c2:	f04f 0801 	mov.w	r8, #1
 800d6c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	f47f af6a 	bne.w	800d5a2 <_dtoa_r+0x7ca>
 800d6ce:	2001      	movs	r0, #1
 800d6d0:	e76f      	b.n	800d5b2 <_dtoa_r+0x7da>
 800d6d2:	f04f 0800 	mov.w	r8, #0
 800d6d6:	e7f6      	b.n	800d6c6 <_dtoa_r+0x8ee>
 800d6d8:	4698      	mov	r8, r3
 800d6da:	e7f4      	b.n	800d6c6 <_dtoa_r+0x8ee>
 800d6dc:	f43f af7d 	beq.w	800d5da <_dtoa_r+0x802>
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	301c      	adds	r0, #28
 800d6e4:	e772      	b.n	800d5cc <_dtoa_r+0x7f4>
 800d6e6:	9b03      	ldr	r3, [sp, #12]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	dc37      	bgt.n	800d75c <_dtoa_r+0x984>
 800d6ec:	9b06      	ldr	r3, [sp, #24]
 800d6ee:	2b02      	cmp	r3, #2
 800d6f0:	dd34      	ble.n	800d75c <_dtoa_r+0x984>
 800d6f2:	9b03      	ldr	r3, [sp, #12]
 800d6f4:	9302      	str	r3, [sp, #8]
 800d6f6:	9b02      	ldr	r3, [sp, #8]
 800d6f8:	b96b      	cbnz	r3, 800d716 <_dtoa_r+0x93e>
 800d6fa:	4631      	mov	r1, r6
 800d6fc:	2205      	movs	r2, #5
 800d6fe:	4620      	mov	r0, r4
 800d700:	f000 fd7e 	bl	800e200 <__multadd>
 800d704:	4601      	mov	r1, r0
 800d706:	4606      	mov	r6, r0
 800d708:	ee18 0a10 	vmov	r0, s16
 800d70c:	f000 ffe2 	bl	800e6d4 <__mcmp>
 800d710:	2800      	cmp	r0, #0
 800d712:	f73f adbb 	bgt.w	800d28c <_dtoa_r+0x4b4>
 800d716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d718:	9d01      	ldr	r5, [sp, #4]
 800d71a:	43db      	mvns	r3, r3
 800d71c:	9300      	str	r3, [sp, #0]
 800d71e:	f04f 0800 	mov.w	r8, #0
 800d722:	4631      	mov	r1, r6
 800d724:	4620      	mov	r0, r4
 800d726:	f000 fd49 	bl	800e1bc <_Bfree>
 800d72a:	2f00      	cmp	r7, #0
 800d72c:	f43f aea4 	beq.w	800d478 <_dtoa_r+0x6a0>
 800d730:	f1b8 0f00 	cmp.w	r8, #0
 800d734:	d005      	beq.n	800d742 <_dtoa_r+0x96a>
 800d736:	45b8      	cmp	r8, r7
 800d738:	d003      	beq.n	800d742 <_dtoa_r+0x96a>
 800d73a:	4641      	mov	r1, r8
 800d73c:	4620      	mov	r0, r4
 800d73e:	f000 fd3d 	bl	800e1bc <_Bfree>
 800d742:	4639      	mov	r1, r7
 800d744:	4620      	mov	r0, r4
 800d746:	f000 fd39 	bl	800e1bc <_Bfree>
 800d74a:	e695      	b.n	800d478 <_dtoa_r+0x6a0>
 800d74c:	2600      	movs	r6, #0
 800d74e:	4637      	mov	r7, r6
 800d750:	e7e1      	b.n	800d716 <_dtoa_r+0x93e>
 800d752:	9700      	str	r7, [sp, #0]
 800d754:	4637      	mov	r7, r6
 800d756:	e599      	b.n	800d28c <_dtoa_r+0x4b4>
 800d758:	40240000 	.word	0x40240000
 800d75c:	9b08      	ldr	r3, [sp, #32]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	f000 80ca 	beq.w	800d8f8 <_dtoa_r+0xb20>
 800d764:	9b03      	ldr	r3, [sp, #12]
 800d766:	9302      	str	r3, [sp, #8]
 800d768:	2d00      	cmp	r5, #0
 800d76a:	dd05      	ble.n	800d778 <_dtoa_r+0x9a0>
 800d76c:	4639      	mov	r1, r7
 800d76e:	462a      	mov	r2, r5
 800d770:	4620      	mov	r0, r4
 800d772:	f000 ff3f 	bl	800e5f4 <__lshift>
 800d776:	4607      	mov	r7, r0
 800d778:	f1b8 0f00 	cmp.w	r8, #0
 800d77c:	d05b      	beq.n	800d836 <_dtoa_r+0xa5e>
 800d77e:	6879      	ldr	r1, [r7, #4]
 800d780:	4620      	mov	r0, r4
 800d782:	f000 fcdb 	bl	800e13c <_Balloc>
 800d786:	4605      	mov	r5, r0
 800d788:	b928      	cbnz	r0, 800d796 <_dtoa_r+0x9be>
 800d78a:	4b87      	ldr	r3, [pc, #540]	; (800d9a8 <_dtoa_r+0xbd0>)
 800d78c:	4602      	mov	r2, r0
 800d78e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d792:	f7ff bb3b 	b.w	800ce0c <_dtoa_r+0x34>
 800d796:	693a      	ldr	r2, [r7, #16]
 800d798:	3202      	adds	r2, #2
 800d79a:	0092      	lsls	r2, r2, #2
 800d79c:	f107 010c 	add.w	r1, r7, #12
 800d7a0:	300c      	adds	r0, #12
 800d7a2:	f000 fcb1 	bl	800e108 <memcpy>
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	4629      	mov	r1, r5
 800d7aa:	4620      	mov	r0, r4
 800d7ac:	f000 ff22 	bl	800e5f4 <__lshift>
 800d7b0:	9b01      	ldr	r3, [sp, #4]
 800d7b2:	f103 0901 	add.w	r9, r3, #1
 800d7b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d7ba:	4413      	add	r3, r2
 800d7bc:	9305      	str	r3, [sp, #20]
 800d7be:	f00a 0301 	and.w	r3, sl, #1
 800d7c2:	46b8      	mov	r8, r7
 800d7c4:	9304      	str	r3, [sp, #16]
 800d7c6:	4607      	mov	r7, r0
 800d7c8:	4631      	mov	r1, r6
 800d7ca:	ee18 0a10 	vmov	r0, s16
 800d7ce:	f7ff fa77 	bl	800ccc0 <quorem>
 800d7d2:	4641      	mov	r1, r8
 800d7d4:	9002      	str	r0, [sp, #8]
 800d7d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d7da:	ee18 0a10 	vmov	r0, s16
 800d7de:	f000 ff79 	bl	800e6d4 <__mcmp>
 800d7e2:	463a      	mov	r2, r7
 800d7e4:	9003      	str	r0, [sp, #12]
 800d7e6:	4631      	mov	r1, r6
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	f000 ff8f 	bl	800e70c <__mdiff>
 800d7ee:	68c2      	ldr	r2, [r0, #12]
 800d7f0:	f109 3bff 	add.w	fp, r9, #4294967295
 800d7f4:	4605      	mov	r5, r0
 800d7f6:	bb02      	cbnz	r2, 800d83a <_dtoa_r+0xa62>
 800d7f8:	4601      	mov	r1, r0
 800d7fa:	ee18 0a10 	vmov	r0, s16
 800d7fe:	f000 ff69 	bl	800e6d4 <__mcmp>
 800d802:	4602      	mov	r2, r0
 800d804:	4629      	mov	r1, r5
 800d806:	4620      	mov	r0, r4
 800d808:	9207      	str	r2, [sp, #28]
 800d80a:	f000 fcd7 	bl	800e1bc <_Bfree>
 800d80e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d812:	ea43 0102 	orr.w	r1, r3, r2
 800d816:	9b04      	ldr	r3, [sp, #16]
 800d818:	430b      	orrs	r3, r1
 800d81a:	464d      	mov	r5, r9
 800d81c:	d10f      	bne.n	800d83e <_dtoa_r+0xa66>
 800d81e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d822:	d02a      	beq.n	800d87a <_dtoa_r+0xaa2>
 800d824:	9b03      	ldr	r3, [sp, #12]
 800d826:	2b00      	cmp	r3, #0
 800d828:	dd02      	ble.n	800d830 <_dtoa_r+0xa58>
 800d82a:	9b02      	ldr	r3, [sp, #8]
 800d82c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d830:	f88b a000 	strb.w	sl, [fp]
 800d834:	e775      	b.n	800d722 <_dtoa_r+0x94a>
 800d836:	4638      	mov	r0, r7
 800d838:	e7ba      	b.n	800d7b0 <_dtoa_r+0x9d8>
 800d83a:	2201      	movs	r2, #1
 800d83c:	e7e2      	b.n	800d804 <_dtoa_r+0xa2c>
 800d83e:	9b03      	ldr	r3, [sp, #12]
 800d840:	2b00      	cmp	r3, #0
 800d842:	db04      	blt.n	800d84e <_dtoa_r+0xa76>
 800d844:	9906      	ldr	r1, [sp, #24]
 800d846:	430b      	orrs	r3, r1
 800d848:	9904      	ldr	r1, [sp, #16]
 800d84a:	430b      	orrs	r3, r1
 800d84c:	d122      	bne.n	800d894 <_dtoa_r+0xabc>
 800d84e:	2a00      	cmp	r2, #0
 800d850:	ddee      	ble.n	800d830 <_dtoa_r+0xa58>
 800d852:	ee18 1a10 	vmov	r1, s16
 800d856:	2201      	movs	r2, #1
 800d858:	4620      	mov	r0, r4
 800d85a:	f000 fecb 	bl	800e5f4 <__lshift>
 800d85e:	4631      	mov	r1, r6
 800d860:	ee08 0a10 	vmov	s16, r0
 800d864:	f000 ff36 	bl	800e6d4 <__mcmp>
 800d868:	2800      	cmp	r0, #0
 800d86a:	dc03      	bgt.n	800d874 <_dtoa_r+0xa9c>
 800d86c:	d1e0      	bne.n	800d830 <_dtoa_r+0xa58>
 800d86e:	f01a 0f01 	tst.w	sl, #1
 800d872:	d0dd      	beq.n	800d830 <_dtoa_r+0xa58>
 800d874:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d878:	d1d7      	bne.n	800d82a <_dtoa_r+0xa52>
 800d87a:	2339      	movs	r3, #57	; 0x39
 800d87c:	f88b 3000 	strb.w	r3, [fp]
 800d880:	462b      	mov	r3, r5
 800d882:	461d      	mov	r5, r3
 800d884:	3b01      	subs	r3, #1
 800d886:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d88a:	2a39      	cmp	r2, #57	; 0x39
 800d88c:	d071      	beq.n	800d972 <_dtoa_r+0xb9a>
 800d88e:	3201      	adds	r2, #1
 800d890:	701a      	strb	r2, [r3, #0]
 800d892:	e746      	b.n	800d722 <_dtoa_r+0x94a>
 800d894:	2a00      	cmp	r2, #0
 800d896:	dd07      	ble.n	800d8a8 <_dtoa_r+0xad0>
 800d898:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d89c:	d0ed      	beq.n	800d87a <_dtoa_r+0xaa2>
 800d89e:	f10a 0301 	add.w	r3, sl, #1
 800d8a2:	f88b 3000 	strb.w	r3, [fp]
 800d8a6:	e73c      	b.n	800d722 <_dtoa_r+0x94a>
 800d8a8:	9b05      	ldr	r3, [sp, #20]
 800d8aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d8ae:	4599      	cmp	r9, r3
 800d8b0:	d047      	beq.n	800d942 <_dtoa_r+0xb6a>
 800d8b2:	ee18 1a10 	vmov	r1, s16
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	220a      	movs	r2, #10
 800d8ba:	4620      	mov	r0, r4
 800d8bc:	f000 fca0 	bl	800e200 <__multadd>
 800d8c0:	45b8      	cmp	r8, r7
 800d8c2:	ee08 0a10 	vmov	s16, r0
 800d8c6:	f04f 0300 	mov.w	r3, #0
 800d8ca:	f04f 020a 	mov.w	r2, #10
 800d8ce:	4641      	mov	r1, r8
 800d8d0:	4620      	mov	r0, r4
 800d8d2:	d106      	bne.n	800d8e2 <_dtoa_r+0xb0a>
 800d8d4:	f000 fc94 	bl	800e200 <__multadd>
 800d8d8:	4680      	mov	r8, r0
 800d8da:	4607      	mov	r7, r0
 800d8dc:	f109 0901 	add.w	r9, r9, #1
 800d8e0:	e772      	b.n	800d7c8 <_dtoa_r+0x9f0>
 800d8e2:	f000 fc8d 	bl	800e200 <__multadd>
 800d8e6:	4639      	mov	r1, r7
 800d8e8:	4680      	mov	r8, r0
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	220a      	movs	r2, #10
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	f000 fc86 	bl	800e200 <__multadd>
 800d8f4:	4607      	mov	r7, r0
 800d8f6:	e7f1      	b.n	800d8dc <_dtoa_r+0xb04>
 800d8f8:	9b03      	ldr	r3, [sp, #12]
 800d8fa:	9302      	str	r3, [sp, #8]
 800d8fc:	9d01      	ldr	r5, [sp, #4]
 800d8fe:	ee18 0a10 	vmov	r0, s16
 800d902:	4631      	mov	r1, r6
 800d904:	f7ff f9dc 	bl	800ccc0 <quorem>
 800d908:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d90c:	9b01      	ldr	r3, [sp, #4]
 800d90e:	f805 ab01 	strb.w	sl, [r5], #1
 800d912:	1aea      	subs	r2, r5, r3
 800d914:	9b02      	ldr	r3, [sp, #8]
 800d916:	4293      	cmp	r3, r2
 800d918:	dd09      	ble.n	800d92e <_dtoa_r+0xb56>
 800d91a:	ee18 1a10 	vmov	r1, s16
 800d91e:	2300      	movs	r3, #0
 800d920:	220a      	movs	r2, #10
 800d922:	4620      	mov	r0, r4
 800d924:	f000 fc6c 	bl	800e200 <__multadd>
 800d928:	ee08 0a10 	vmov	s16, r0
 800d92c:	e7e7      	b.n	800d8fe <_dtoa_r+0xb26>
 800d92e:	9b02      	ldr	r3, [sp, #8]
 800d930:	2b00      	cmp	r3, #0
 800d932:	bfc8      	it	gt
 800d934:	461d      	movgt	r5, r3
 800d936:	9b01      	ldr	r3, [sp, #4]
 800d938:	bfd8      	it	le
 800d93a:	2501      	movle	r5, #1
 800d93c:	441d      	add	r5, r3
 800d93e:	f04f 0800 	mov.w	r8, #0
 800d942:	ee18 1a10 	vmov	r1, s16
 800d946:	2201      	movs	r2, #1
 800d948:	4620      	mov	r0, r4
 800d94a:	f000 fe53 	bl	800e5f4 <__lshift>
 800d94e:	4631      	mov	r1, r6
 800d950:	ee08 0a10 	vmov	s16, r0
 800d954:	f000 febe 	bl	800e6d4 <__mcmp>
 800d958:	2800      	cmp	r0, #0
 800d95a:	dc91      	bgt.n	800d880 <_dtoa_r+0xaa8>
 800d95c:	d102      	bne.n	800d964 <_dtoa_r+0xb8c>
 800d95e:	f01a 0f01 	tst.w	sl, #1
 800d962:	d18d      	bne.n	800d880 <_dtoa_r+0xaa8>
 800d964:	462b      	mov	r3, r5
 800d966:	461d      	mov	r5, r3
 800d968:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d96c:	2a30      	cmp	r2, #48	; 0x30
 800d96e:	d0fa      	beq.n	800d966 <_dtoa_r+0xb8e>
 800d970:	e6d7      	b.n	800d722 <_dtoa_r+0x94a>
 800d972:	9a01      	ldr	r2, [sp, #4]
 800d974:	429a      	cmp	r2, r3
 800d976:	d184      	bne.n	800d882 <_dtoa_r+0xaaa>
 800d978:	9b00      	ldr	r3, [sp, #0]
 800d97a:	3301      	adds	r3, #1
 800d97c:	9300      	str	r3, [sp, #0]
 800d97e:	2331      	movs	r3, #49	; 0x31
 800d980:	7013      	strb	r3, [r2, #0]
 800d982:	e6ce      	b.n	800d722 <_dtoa_r+0x94a>
 800d984:	4b09      	ldr	r3, [pc, #36]	; (800d9ac <_dtoa_r+0xbd4>)
 800d986:	f7ff ba95 	b.w	800ceb4 <_dtoa_r+0xdc>
 800d98a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	f47f aa6e 	bne.w	800ce6e <_dtoa_r+0x96>
 800d992:	4b07      	ldr	r3, [pc, #28]	; (800d9b0 <_dtoa_r+0xbd8>)
 800d994:	f7ff ba8e 	b.w	800ceb4 <_dtoa_r+0xdc>
 800d998:	9b02      	ldr	r3, [sp, #8]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	dcae      	bgt.n	800d8fc <_dtoa_r+0xb24>
 800d99e:	9b06      	ldr	r3, [sp, #24]
 800d9a0:	2b02      	cmp	r3, #2
 800d9a2:	f73f aea8 	bgt.w	800d6f6 <_dtoa_r+0x91e>
 800d9a6:	e7a9      	b.n	800d8fc <_dtoa_r+0xb24>
 800d9a8:	080108ad 	.word	0x080108ad
 800d9ac:	08010618 	.word	0x08010618
 800d9b0:	08010845 	.word	0x08010845

0800d9b4 <fiprintf>:
 800d9b4:	b40e      	push	{r1, r2, r3}
 800d9b6:	b503      	push	{r0, r1, lr}
 800d9b8:	4601      	mov	r1, r0
 800d9ba:	ab03      	add	r3, sp, #12
 800d9bc:	4805      	ldr	r0, [pc, #20]	; (800d9d4 <fiprintf+0x20>)
 800d9be:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9c2:	6800      	ldr	r0, [r0, #0]
 800d9c4:	9301      	str	r3, [sp, #4]
 800d9c6:	f001 fa15 	bl	800edf4 <_vfiprintf_r>
 800d9ca:	b002      	add	sp, #8
 800d9cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9d0:	b003      	add	sp, #12
 800d9d2:	4770      	bx	lr
 800d9d4:	200001c8 	.word	0x200001c8

0800d9d8 <rshift>:
 800d9d8:	6903      	ldr	r3, [r0, #16]
 800d9da:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d9de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9e2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d9e6:	f100 0414 	add.w	r4, r0, #20
 800d9ea:	dd45      	ble.n	800da78 <rshift+0xa0>
 800d9ec:	f011 011f 	ands.w	r1, r1, #31
 800d9f0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d9f4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d9f8:	d10c      	bne.n	800da14 <rshift+0x3c>
 800d9fa:	f100 0710 	add.w	r7, r0, #16
 800d9fe:	4629      	mov	r1, r5
 800da00:	42b1      	cmp	r1, r6
 800da02:	d334      	bcc.n	800da6e <rshift+0x96>
 800da04:	1a9b      	subs	r3, r3, r2
 800da06:	009b      	lsls	r3, r3, #2
 800da08:	1eea      	subs	r2, r5, #3
 800da0a:	4296      	cmp	r6, r2
 800da0c:	bf38      	it	cc
 800da0e:	2300      	movcc	r3, #0
 800da10:	4423      	add	r3, r4
 800da12:	e015      	b.n	800da40 <rshift+0x68>
 800da14:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800da18:	f1c1 0820 	rsb	r8, r1, #32
 800da1c:	40cf      	lsrs	r7, r1
 800da1e:	f105 0e04 	add.w	lr, r5, #4
 800da22:	46a1      	mov	r9, r4
 800da24:	4576      	cmp	r6, lr
 800da26:	46f4      	mov	ip, lr
 800da28:	d815      	bhi.n	800da56 <rshift+0x7e>
 800da2a:	1a9a      	subs	r2, r3, r2
 800da2c:	0092      	lsls	r2, r2, #2
 800da2e:	3a04      	subs	r2, #4
 800da30:	3501      	adds	r5, #1
 800da32:	42ae      	cmp	r6, r5
 800da34:	bf38      	it	cc
 800da36:	2200      	movcc	r2, #0
 800da38:	18a3      	adds	r3, r4, r2
 800da3a:	50a7      	str	r7, [r4, r2]
 800da3c:	b107      	cbz	r7, 800da40 <rshift+0x68>
 800da3e:	3304      	adds	r3, #4
 800da40:	1b1a      	subs	r2, r3, r4
 800da42:	42a3      	cmp	r3, r4
 800da44:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800da48:	bf08      	it	eq
 800da4a:	2300      	moveq	r3, #0
 800da4c:	6102      	str	r2, [r0, #16]
 800da4e:	bf08      	it	eq
 800da50:	6143      	streq	r3, [r0, #20]
 800da52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da56:	f8dc c000 	ldr.w	ip, [ip]
 800da5a:	fa0c fc08 	lsl.w	ip, ip, r8
 800da5e:	ea4c 0707 	orr.w	r7, ip, r7
 800da62:	f849 7b04 	str.w	r7, [r9], #4
 800da66:	f85e 7b04 	ldr.w	r7, [lr], #4
 800da6a:	40cf      	lsrs	r7, r1
 800da6c:	e7da      	b.n	800da24 <rshift+0x4c>
 800da6e:	f851 cb04 	ldr.w	ip, [r1], #4
 800da72:	f847 cf04 	str.w	ip, [r7, #4]!
 800da76:	e7c3      	b.n	800da00 <rshift+0x28>
 800da78:	4623      	mov	r3, r4
 800da7a:	e7e1      	b.n	800da40 <rshift+0x68>

0800da7c <__hexdig_fun>:
 800da7c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800da80:	2b09      	cmp	r3, #9
 800da82:	d802      	bhi.n	800da8a <__hexdig_fun+0xe>
 800da84:	3820      	subs	r0, #32
 800da86:	b2c0      	uxtb	r0, r0
 800da88:	4770      	bx	lr
 800da8a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800da8e:	2b05      	cmp	r3, #5
 800da90:	d801      	bhi.n	800da96 <__hexdig_fun+0x1a>
 800da92:	3847      	subs	r0, #71	; 0x47
 800da94:	e7f7      	b.n	800da86 <__hexdig_fun+0xa>
 800da96:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800da9a:	2b05      	cmp	r3, #5
 800da9c:	d801      	bhi.n	800daa2 <__hexdig_fun+0x26>
 800da9e:	3827      	subs	r0, #39	; 0x27
 800daa0:	e7f1      	b.n	800da86 <__hexdig_fun+0xa>
 800daa2:	2000      	movs	r0, #0
 800daa4:	4770      	bx	lr
	...

0800daa8 <__gethex>:
 800daa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daac:	ed2d 8b02 	vpush	{d8}
 800dab0:	b089      	sub	sp, #36	; 0x24
 800dab2:	ee08 0a10 	vmov	s16, r0
 800dab6:	9304      	str	r3, [sp, #16]
 800dab8:	4bb4      	ldr	r3, [pc, #720]	; (800dd8c <__gethex+0x2e4>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	9301      	str	r3, [sp, #4]
 800dabe:	4618      	mov	r0, r3
 800dac0:	468b      	mov	fp, r1
 800dac2:	4690      	mov	r8, r2
 800dac4:	f7f2 fbac 	bl	8000220 <strlen>
 800dac8:	9b01      	ldr	r3, [sp, #4]
 800daca:	f8db 2000 	ldr.w	r2, [fp]
 800dace:	4403      	add	r3, r0
 800dad0:	4682      	mov	sl, r0
 800dad2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800dad6:	9305      	str	r3, [sp, #20]
 800dad8:	1c93      	adds	r3, r2, #2
 800dada:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800dade:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800dae2:	32fe      	adds	r2, #254	; 0xfe
 800dae4:	18d1      	adds	r1, r2, r3
 800dae6:	461f      	mov	r7, r3
 800dae8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800daec:	9100      	str	r1, [sp, #0]
 800daee:	2830      	cmp	r0, #48	; 0x30
 800daf0:	d0f8      	beq.n	800dae4 <__gethex+0x3c>
 800daf2:	f7ff ffc3 	bl	800da7c <__hexdig_fun>
 800daf6:	4604      	mov	r4, r0
 800daf8:	2800      	cmp	r0, #0
 800dafa:	d13a      	bne.n	800db72 <__gethex+0xca>
 800dafc:	9901      	ldr	r1, [sp, #4]
 800dafe:	4652      	mov	r2, sl
 800db00:	4638      	mov	r0, r7
 800db02:	f001 fab1 	bl	800f068 <strncmp>
 800db06:	4605      	mov	r5, r0
 800db08:	2800      	cmp	r0, #0
 800db0a:	d168      	bne.n	800dbde <__gethex+0x136>
 800db0c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800db10:	eb07 060a 	add.w	r6, r7, sl
 800db14:	f7ff ffb2 	bl	800da7c <__hexdig_fun>
 800db18:	2800      	cmp	r0, #0
 800db1a:	d062      	beq.n	800dbe2 <__gethex+0x13a>
 800db1c:	4633      	mov	r3, r6
 800db1e:	7818      	ldrb	r0, [r3, #0]
 800db20:	2830      	cmp	r0, #48	; 0x30
 800db22:	461f      	mov	r7, r3
 800db24:	f103 0301 	add.w	r3, r3, #1
 800db28:	d0f9      	beq.n	800db1e <__gethex+0x76>
 800db2a:	f7ff ffa7 	bl	800da7c <__hexdig_fun>
 800db2e:	2301      	movs	r3, #1
 800db30:	fab0 f480 	clz	r4, r0
 800db34:	0964      	lsrs	r4, r4, #5
 800db36:	4635      	mov	r5, r6
 800db38:	9300      	str	r3, [sp, #0]
 800db3a:	463a      	mov	r2, r7
 800db3c:	4616      	mov	r6, r2
 800db3e:	3201      	adds	r2, #1
 800db40:	7830      	ldrb	r0, [r6, #0]
 800db42:	f7ff ff9b 	bl	800da7c <__hexdig_fun>
 800db46:	2800      	cmp	r0, #0
 800db48:	d1f8      	bne.n	800db3c <__gethex+0x94>
 800db4a:	9901      	ldr	r1, [sp, #4]
 800db4c:	4652      	mov	r2, sl
 800db4e:	4630      	mov	r0, r6
 800db50:	f001 fa8a 	bl	800f068 <strncmp>
 800db54:	b980      	cbnz	r0, 800db78 <__gethex+0xd0>
 800db56:	b94d      	cbnz	r5, 800db6c <__gethex+0xc4>
 800db58:	eb06 050a 	add.w	r5, r6, sl
 800db5c:	462a      	mov	r2, r5
 800db5e:	4616      	mov	r6, r2
 800db60:	3201      	adds	r2, #1
 800db62:	7830      	ldrb	r0, [r6, #0]
 800db64:	f7ff ff8a 	bl	800da7c <__hexdig_fun>
 800db68:	2800      	cmp	r0, #0
 800db6a:	d1f8      	bne.n	800db5e <__gethex+0xb6>
 800db6c:	1bad      	subs	r5, r5, r6
 800db6e:	00ad      	lsls	r5, r5, #2
 800db70:	e004      	b.n	800db7c <__gethex+0xd4>
 800db72:	2400      	movs	r4, #0
 800db74:	4625      	mov	r5, r4
 800db76:	e7e0      	b.n	800db3a <__gethex+0x92>
 800db78:	2d00      	cmp	r5, #0
 800db7a:	d1f7      	bne.n	800db6c <__gethex+0xc4>
 800db7c:	7833      	ldrb	r3, [r6, #0]
 800db7e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800db82:	2b50      	cmp	r3, #80	; 0x50
 800db84:	d13b      	bne.n	800dbfe <__gethex+0x156>
 800db86:	7873      	ldrb	r3, [r6, #1]
 800db88:	2b2b      	cmp	r3, #43	; 0x2b
 800db8a:	d02c      	beq.n	800dbe6 <__gethex+0x13e>
 800db8c:	2b2d      	cmp	r3, #45	; 0x2d
 800db8e:	d02e      	beq.n	800dbee <__gethex+0x146>
 800db90:	1c71      	adds	r1, r6, #1
 800db92:	f04f 0900 	mov.w	r9, #0
 800db96:	7808      	ldrb	r0, [r1, #0]
 800db98:	f7ff ff70 	bl	800da7c <__hexdig_fun>
 800db9c:	1e43      	subs	r3, r0, #1
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	2b18      	cmp	r3, #24
 800dba2:	d82c      	bhi.n	800dbfe <__gethex+0x156>
 800dba4:	f1a0 0210 	sub.w	r2, r0, #16
 800dba8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dbac:	f7ff ff66 	bl	800da7c <__hexdig_fun>
 800dbb0:	1e43      	subs	r3, r0, #1
 800dbb2:	b2db      	uxtb	r3, r3
 800dbb4:	2b18      	cmp	r3, #24
 800dbb6:	d91d      	bls.n	800dbf4 <__gethex+0x14c>
 800dbb8:	f1b9 0f00 	cmp.w	r9, #0
 800dbbc:	d000      	beq.n	800dbc0 <__gethex+0x118>
 800dbbe:	4252      	negs	r2, r2
 800dbc0:	4415      	add	r5, r2
 800dbc2:	f8cb 1000 	str.w	r1, [fp]
 800dbc6:	b1e4      	cbz	r4, 800dc02 <__gethex+0x15a>
 800dbc8:	9b00      	ldr	r3, [sp, #0]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	bf14      	ite	ne
 800dbce:	2700      	movne	r7, #0
 800dbd0:	2706      	moveq	r7, #6
 800dbd2:	4638      	mov	r0, r7
 800dbd4:	b009      	add	sp, #36	; 0x24
 800dbd6:	ecbd 8b02 	vpop	{d8}
 800dbda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbde:	463e      	mov	r6, r7
 800dbe0:	4625      	mov	r5, r4
 800dbe2:	2401      	movs	r4, #1
 800dbe4:	e7ca      	b.n	800db7c <__gethex+0xd4>
 800dbe6:	f04f 0900 	mov.w	r9, #0
 800dbea:	1cb1      	adds	r1, r6, #2
 800dbec:	e7d3      	b.n	800db96 <__gethex+0xee>
 800dbee:	f04f 0901 	mov.w	r9, #1
 800dbf2:	e7fa      	b.n	800dbea <__gethex+0x142>
 800dbf4:	230a      	movs	r3, #10
 800dbf6:	fb03 0202 	mla	r2, r3, r2, r0
 800dbfa:	3a10      	subs	r2, #16
 800dbfc:	e7d4      	b.n	800dba8 <__gethex+0x100>
 800dbfe:	4631      	mov	r1, r6
 800dc00:	e7df      	b.n	800dbc2 <__gethex+0x11a>
 800dc02:	1bf3      	subs	r3, r6, r7
 800dc04:	3b01      	subs	r3, #1
 800dc06:	4621      	mov	r1, r4
 800dc08:	2b07      	cmp	r3, #7
 800dc0a:	dc0b      	bgt.n	800dc24 <__gethex+0x17c>
 800dc0c:	ee18 0a10 	vmov	r0, s16
 800dc10:	f000 fa94 	bl	800e13c <_Balloc>
 800dc14:	4604      	mov	r4, r0
 800dc16:	b940      	cbnz	r0, 800dc2a <__gethex+0x182>
 800dc18:	4b5d      	ldr	r3, [pc, #372]	; (800dd90 <__gethex+0x2e8>)
 800dc1a:	4602      	mov	r2, r0
 800dc1c:	21de      	movs	r1, #222	; 0xde
 800dc1e:	485d      	ldr	r0, [pc, #372]	; (800dd94 <__gethex+0x2ec>)
 800dc20:	f7ff f830 	bl	800cc84 <__assert_func>
 800dc24:	3101      	adds	r1, #1
 800dc26:	105b      	asrs	r3, r3, #1
 800dc28:	e7ee      	b.n	800dc08 <__gethex+0x160>
 800dc2a:	f100 0914 	add.w	r9, r0, #20
 800dc2e:	f04f 0b00 	mov.w	fp, #0
 800dc32:	f1ca 0301 	rsb	r3, sl, #1
 800dc36:	f8cd 9008 	str.w	r9, [sp, #8]
 800dc3a:	f8cd b000 	str.w	fp, [sp]
 800dc3e:	9306      	str	r3, [sp, #24]
 800dc40:	42b7      	cmp	r7, r6
 800dc42:	d340      	bcc.n	800dcc6 <__gethex+0x21e>
 800dc44:	9802      	ldr	r0, [sp, #8]
 800dc46:	9b00      	ldr	r3, [sp, #0]
 800dc48:	f840 3b04 	str.w	r3, [r0], #4
 800dc4c:	eba0 0009 	sub.w	r0, r0, r9
 800dc50:	1080      	asrs	r0, r0, #2
 800dc52:	0146      	lsls	r6, r0, #5
 800dc54:	6120      	str	r0, [r4, #16]
 800dc56:	4618      	mov	r0, r3
 800dc58:	f000 fb62 	bl	800e320 <__hi0bits>
 800dc5c:	1a30      	subs	r0, r6, r0
 800dc5e:	f8d8 6000 	ldr.w	r6, [r8]
 800dc62:	42b0      	cmp	r0, r6
 800dc64:	dd63      	ble.n	800dd2e <__gethex+0x286>
 800dc66:	1b87      	subs	r7, r0, r6
 800dc68:	4639      	mov	r1, r7
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	f000 ff06 	bl	800ea7c <__any_on>
 800dc70:	4682      	mov	sl, r0
 800dc72:	b1a8      	cbz	r0, 800dca0 <__gethex+0x1f8>
 800dc74:	1e7b      	subs	r3, r7, #1
 800dc76:	1159      	asrs	r1, r3, #5
 800dc78:	f003 021f 	and.w	r2, r3, #31
 800dc7c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800dc80:	f04f 0a01 	mov.w	sl, #1
 800dc84:	fa0a f202 	lsl.w	r2, sl, r2
 800dc88:	420a      	tst	r2, r1
 800dc8a:	d009      	beq.n	800dca0 <__gethex+0x1f8>
 800dc8c:	4553      	cmp	r3, sl
 800dc8e:	dd05      	ble.n	800dc9c <__gethex+0x1f4>
 800dc90:	1eb9      	subs	r1, r7, #2
 800dc92:	4620      	mov	r0, r4
 800dc94:	f000 fef2 	bl	800ea7c <__any_on>
 800dc98:	2800      	cmp	r0, #0
 800dc9a:	d145      	bne.n	800dd28 <__gethex+0x280>
 800dc9c:	f04f 0a02 	mov.w	sl, #2
 800dca0:	4639      	mov	r1, r7
 800dca2:	4620      	mov	r0, r4
 800dca4:	f7ff fe98 	bl	800d9d8 <rshift>
 800dca8:	443d      	add	r5, r7
 800dcaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dcae:	42ab      	cmp	r3, r5
 800dcb0:	da4c      	bge.n	800dd4c <__gethex+0x2a4>
 800dcb2:	ee18 0a10 	vmov	r0, s16
 800dcb6:	4621      	mov	r1, r4
 800dcb8:	f000 fa80 	bl	800e1bc <_Bfree>
 800dcbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	6013      	str	r3, [r2, #0]
 800dcc2:	27a3      	movs	r7, #163	; 0xa3
 800dcc4:	e785      	b.n	800dbd2 <__gethex+0x12a>
 800dcc6:	1e73      	subs	r3, r6, #1
 800dcc8:	9a05      	ldr	r2, [sp, #20]
 800dcca:	9303      	str	r3, [sp, #12]
 800dccc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dcd0:	4293      	cmp	r3, r2
 800dcd2:	d019      	beq.n	800dd08 <__gethex+0x260>
 800dcd4:	f1bb 0f20 	cmp.w	fp, #32
 800dcd8:	d107      	bne.n	800dcea <__gethex+0x242>
 800dcda:	9b02      	ldr	r3, [sp, #8]
 800dcdc:	9a00      	ldr	r2, [sp, #0]
 800dcde:	f843 2b04 	str.w	r2, [r3], #4
 800dce2:	9302      	str	r3, [sp, #8]
 800dce4:	2300      	movs	r3, #0
 800dce6:	9300      	str	r3, [sp, #0]
 800dce8:	469b      	mov	fp, r3
 800dcea:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800dcee:	f7ff fec5 	bl	800da7c <__hexdig_fun>
 800dcf2:	9b00      	ldr	r3, [sp, #0]
 800dcf4:	f000 000f 	and.w	r0, r0, #15
 800dcf8:	fa00 f00b 	lsl.w	r0, r0, fp
 800dcfc:	4303      	orrs	r3, r0
 800dcfe:	9300      	str	r3, [sp, #0]
 800dd00:	f10b 0b04 	add.w	fp, fp, #4
 800dd04:	9b03      	ldr	r3, [sp, #12]
 800dd06:	e00d      	b.n	800dd24 <__gethex+0x27c>
 800dd08:	9b03      	ldr	r3, [sp, #12]
 800dd0a:	9a06      	ldr	r2, [sp, #24]
 800dd0c:	4413      	add	r3, r2
 800dd0e:	42bb      	cmp	r3, r7
 800dd10:	d3e0      	bcc.n	800dcd4 <__gethex+0x22c>
 800dd12:	4618      	mov	r0, r3
 800dd14:	9901      	ldr	r1, [sp, #4]
 800dd16:	9307      	str	r3, [sp, #28]
 800dd18:	4652      	mov	r2, sl
 800dd1a:	f001 f9a5 	bl	800f068 <strncmp>
 800dd1e:	9b07      	ldr	r3, [sp, #28]
 800dd20:	2800      	cmp	r0, #0
 800dd22:	d1d7      	bne.n	800dcd4 <__gethex+0x22c>
 800dd24:	461e      	mov	r6, r3
 800dd26:	e78b      	b.n	800dc40 <__gethex+0x198>
 800dd28:	f04f 0a03 	mov.w	sl, #3
 800dd2c:	e7b8      	b.n	800dca0 <__gethex+0x1f8>
 800dd2e:	da0a      	bge.n	800dd46 <__gethex+0x29e>
 800dd30:	1a37      	subs	r7, r6, r0
 800dd32:	4621      	mov	r1, r4
 800dd34:	ee18 0a10 	vmov	r0, s16
 800dd38:	463a      	mov	r2, r7
 800dd3a:	f000 fc5b 	bl	800e5f4 <__lshift>
 800dd3e:	1bed      	subs	r5, r5, r7
 800dd40:	4604      	mov	r4, r0
 800dd42:	f100 0914 	add.w	r9, r0, #20
 800dd46:	f04f 0a00 	mov.w	sl, #0
 800dd4a:	e7ae      	b.n	800dcaa <__gethex+0x202>
 800dd4c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dd50:	42a8      	cmp	r0, r5
 800dd52:	dd72      	ble.n	800de3a <__gethex+0x392>
 800dd54:	1b45      	subs	r5, r0, r5
 800dd56:	42ae      	cmp	r6, r5
 800dd58:	dc36      	bgt.n	800ddc8 <__gethex+0x320>
 800dd5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dd5e:	2b02      	cmp	r3, #2
 800dd60:	d02a      	beq.n	800ddb8 <__gethex+0x310>
 800dd62:	2b03      	cmp	r3, #3
 800dd64:	d02c      	beq.n	800ddc0 <__gethex+0x318>
 800dd66:	2b01      	cmp	r3, #1
 800dd68:	d11c      	bne.n	800dda4 <__gethex+0x2fc>
 800dd6a:	42ae      	cmp	r6, r5
 800dd6c:	d11a      	bne.n	800dda4 <__gethex+0x2fc>
 800dd6e:	2e01      	cmp	r6, #1
 800dd70:	d112      	bne.n	800dd98 <__gethex+0x2f0>
 800dd72:	9a04      	ldr	r2, [sp, #16]
 800dd74:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dd78:	6013      	str	r3, [r2, #0]
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	6123      	str	r3, [r4, #16]
 800dd7e:	f8c9 3000 	str.w	r3, [r9]
 800dd82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dd84:	2762      	movs	r7, #98	; 0x62
 800dd86:	601c      	str	r4, [r3, #0]
 800dd88:	e723      	b.n	800dbd2 <__gethex+0x12a>
 800dd8a:	bf00      	nop
 800dd8c:	08010924 	.word	0x08010924
 800dd90:	080108ad 	.word	0x080108ad
 800dd94:	080108be 	.word	0x080108be
 800dd98:	1e71      	subs	r1, r6, #1
 800dd9a:	4620      	mov	r0, r4
 800dd9c:	f000 fe6e 	bl	800ea7c <__any_on>
 800dda0:	2800      	cmp	r0, #0
 800dda2:	d1e6      	bne.n	800dd72 <__gethex+0x2ca>
 800dda4:	ee18 0a10 	vmov	r0, s16
 800dda8:	4621      	mov	r1, r4
 800ddaa:	f000 fa07 	bl	800e1bc <_Bfree>
 800ddae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	6013      	str	r3, [r2, #0]
 800ddb4:	2750      	movs	r7, #80	; 0x50
 800ddb6:	e70c      	b.n	800dbd2 <__gethex+0x12a>
 800ddb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d1f2      	bne.n	800dda4 <__gethex+0x2fc>
 800ddbe:	e7d8      	b.n	800dd72 <__gethex+0x2ca>
 800ddc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d1d5      	bne.n	800dd72 <__gethex+0x2ca>
 800ddc6:	e7ed      	b.n	800dda4 <__gethex+0x2fc>
 800ddc8:	1e6f      	subs	r7, r5, #1
 800ddca:	f1ba 0f00 	cmp.w	sl, #0
 800ddce:	d131      	bne.n	800de34 <__gethex+0x38c>
 800ddd0:	b127      	cbz	r7, 800dddc <__gethex+0x334>
 800ddd2:	4639      	mov	r1, r7
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	f000 fe51 	bl	800ea7c <__any_on>
 800ddda:	4682      	mov	sl, r0
 800dddc:	117b      	asrs	r3, r7, #5
 800ddde:	2101      	movs	r1, #1
 800dde0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800dde4:	f007 071f 	and.w	r7, r7, #31
 800dde8:	fa01 f707 	lsl.w	r7, r1, r7
 800ddec:	421f      	tst	r7, r3
 800ddee:	4629      	mov	r1, r5
 800ddf0:	4620      	mov	r0, r4
 800ddf2:	bf18      	it	ne
 800ddf4:	f04a 0a02 	orrne.w	sl, sl, #2
 800ddf8:	1b76      	subs	r6, r6, r5
 800ddfa:	f7ff fded 	bl	800d9d8 <rshift>
 800ddfe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800de02:	2702      	movs	r7, #2
 800de04:	f1ba 0f00 	cmp.w	sl, #0
 800de08:	d048      	beq.n	800de9c <__gethex+0x3f4>
 800de0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800de0e:	2b02      	cmp	r3, #2
 800de10:	d015      	beq.n	800de3e <__gethex+0x396>
 800de12:	2b03      	cmp	r3, #3
 800de14:	d017      	beq.n	800de46 <__gethex+0x39e>
 800de16:	2b01      	cmp	r3, #1
 800de18:	d109      	bne.n	800de2e <__gethex+0x386>
 800de1a:	f01a 0f02 	tst.w	sl, #2
 800de1e:	d006      	beq.n	800de2e <__gethex+0x386>
 800de20:	f8d9 0000 	ldr.w	r0, [r9]
 800de24:	ea4a 0a00 	orr.w	sl, sl, r0
 800de28:	f01a 0f01 	tst.w	sl, #1
 800de2c:	d10e      	bne.n	800de4c <__gethex+0x3a4>
 800de2e:	f047 0710 	orr.w	r7, r7, #16
 800de32:	e033      	b.n	800de9c <__gethex+0x3f4>
 800de34:	f04f 0a01 	mov.w	sl, #1
 800de38:	e7d0      	b.n	800dddc <__gethex+0x334>
 800de3a:	2701      	movs	r7, #1
 800de3c:	e7e2      	b.n	800de04 <__gethex+0x35c>
 800de3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de40:	f1c3 0301 	rsb	r3, r3, #1
 800de44:	9315      	str	r3, [sp, #84]	; 0x54
 800de46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d0f0      	beq.n	800de2e <__gethex+0x386>
 800de4c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800de50:	f104 0314 	add.w	r3, r4, #20
 800de54:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800de58:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800de5c:	f04f 0c00 	mov.w	ip, #0
 800de60:	4618      	mov	r0, r3
 800de62:	f853 2b04 	ldr.w	r2, [r3], #4
 800de66:	f1b2 3fff 	cmp.w	r2, #4294967295
 800de6a:	d01c      	beq.n	800dea6 <__gethex+0x3fe>
 800de6c:	3201      	adds	r2, #1
 800de6e:	6002      	str	r2, [r0, #0]
 800de70:	2f02      	cmp	r7, #2
 800de72:	f104 0314 	add.w	r3, r4, #20
 800de76:	d13f      	bne.n	800def8 <__gethex+0x450>
 800de78:	f8d8 2000 	ldr.w	r2, [r8]
 800de7c:	3a01      	subs	r2, #1
 800de7e:	42b2      	cmp	r2, r6
 800de80:	d10a      	bne.n	800de98 <__gethex+0x3f0>
 800de82:	1171      	asrs	r1, r6, #5
 800de84:	2201      	movs	r2, #1
 800de86:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800de8a:	f006 061f 	and.w	r6, r6, #31
 800de8e:	fa02 f606 	lsl.w	r6, r2, r6
 800de92:	421e      	tst	r6, r3
 800de94:	bf18      	it	ne
 800de96:	4617      	movne	r7, r2
 800de98:	f047 0720 	orr.w	r7, r7, #32
 800de9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800de9e:	601c      	str	r4, [r3, #0]
 800dea0:	9b04      	ldr	r3, [sp, #16]
 800dea2:	601d      	str	r5, [r3, #0]
 800dea4:	e695      	b.n	800dbd2 <__gethex+0x12a>
 800dea6:	4299      	cmp	r1, r3
 800dea8:	f843 cc04 	str.w	ip, [r3, #-4]
 800deac:	d8d8      	bhi.n	800de60 <__gethex+0x3b8>
 800deae:	68a3      	ldr	r3, [r4, #8]
 800deb0:	459b      	cmp	fp, r3
 800deb2:	db19      	blt.n	800dee8 <__gethex+0x440>
 800deb4:	6861      	ldr	r1, [r4, #4]
 800deb6:	ee18 0a10 	vmov	r0, s16
 800deba:	3101      	adds	r1, #1
 800debc:	f000 f93e 	bl	800e13c <_Balloc>
 800dec0:	4681      	mov	r9, r0
 800dec2:	b918      	cbnz	r0, 800decc <__gethex+0x424>
 800dec4:	4b1a      	ldr	r3, [pc, #104]	; (800df30 <__gethex+0x488>)
 800dec6:	4602      	mov	r2, r0
 800dec8:	2184      	movs	r1, #132	; 0x84
 800deca:	e6a8      	b.n	800dc1e <__gethex+0x176>
 800decc:	6922      	ldr	r2, [r4, #16]
 800dece:	3202      	adds	r2, #2
 800ded0:	f104 010c 	add.w	r1, r4, #12
 800ded4:	0092      	lsls	r2, r2, #2
 800ded6:	300c      	adds	r0, #12
 800ded8:	f000 f916 	bl	800e108 <memcpy>
 800dedc:	4621      	mov	r1, r4
 800dede:	ee18 0a10 	vmov	r0, s16
 800dee2:	f000 f96b 	bl	800e1bc <_Bfree>
 800dee6:	464c      	mov	r4, r9
 800dee8:	6923      	ldr	r3, [r4, #16]
 800deea:	1c5a      	adds	r2, r3, #1
 800deec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800def0:	6122      	str	r2, [r4, #16]
 800def2:	2201      	movs	r2, #1
 800def4:	615a      	str	r2, [r3, #20]
 800def6:	e7bb      	b.n	800de70 <__gethex+0x3c8>
 800def8:	6922      	ldr	r2, [r4, #16]
 800defa:	455a      	cmp	r2, fp
 800defc:	dd0b      	ble.n	800df16 <__gethex+0x46e>
 800defe:	2101      	movs	r1, #1
 800df00:	4620      	mov	r0, r4
 800df02:	f7ff fd69 	bl	800d9d8 <rshift>
 800df06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800df0a:	3501      	adds	r5, #1
 800df0c:	42ab      	cmp	r3, r5
 800df0e:	f6ff aed0 	blt.w	800dcb2 <__gethex+0x20a>
 800df12:	2701      	movs	r7, #1
 800df14:	e7c0      	b.n	800de98 <__gethex+0x3f0>
 800df16:	f016 061f 	ands.w	r6, r6, #31
 800df1a:	d0fa      	beq.n	800df12 <__gethex+0x46a>
 800df1c:	4453      	add	r3, sl
 800df1e:	f1c6 0620 	rsb	r6, r6, #32
 800df22:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800df26:	f000 f9fb 	bl	800e320 <__hi0bits>
 800df2a:	42b0      	cmp	r0, r6
 800df2c:	dbe7      	blt.n	800defe <__gethex+0x456>
 800df2e:	e7f0      	b.n	800df12 <__gethex+0x46a>
 800df30:	080108ad 	.word	0x080108ad

0800df34 <L_shift>:
 800df34:	f1c2 0208 	rsb	r2, r2, #8
 800df38:	0092      	lsls	r2, r2, #2
 800df3a:	b570      	push	{r4, r5, r6, lr}
 800df3c:	f1c2 0620 	rsb	r6, r2, #32
 800df40:	6843      	ldr	r3, [r0, #4]
 800df42:	6804      	ldr	r4, [r0, #0]
 800df44:	fa03 f506 	lsl.w	r5, r3, r6
 800df48:	432c      	orrs	r4, r5
 800df4a:	40d3      	lsrs	r3, r2
 800df4c:	6004      	str	r4, [r0, #0]
 800df4e:	f840 3f04 	str.w	r3, [r0, #4]!
 800df52:	4288      	cmp	r0, r1
 800df54:	d3f4      	bcc.n	800df40 <L_shift+0xc>
 800df56:	bd70      	pop	{r4, r5, r6, pc}

0800df58 <__match>:
 800df58:	b530      	push	{r4, r5, lr}
 800df5a:	6803      	ldr	r3, [r0, #0]
 800df5c:	3301      	adds	r3, #1
 800df5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df62:	b914      	cbnz	r4, 800df6a <__match+0x12>
 800df64:	6003      	str	r3, [r0, #0]
 800df66:	2001      	movs	r0, #1
 800df68:	bd30      	pop	{r4, r5, pc}
 800df6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df6e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800df72:	2d19      	cmp	r5, #25
 800df74:	bf98      	it	ls
 800df76:	3220      	addls	r2, #32
 800df78:	42a2      	cmp	r2, r4
 800df7a:	d0f0      	beq.n	800df5e <__match+0x6>
 800df7c:	2000      	movs	r0, #0
 800df7e:	e7f3      	b.n	800df68 <__match+0x10>

0800df80 <__hexnan>:
 800df80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df84:	680b      	ldr	r3, [r1, #0]
 800df86:	115e      	asrs	r6, r3, #5
 800df88:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800df8c:	f013 031f 	ands.w	r3, r3, #31
 800df90:	b087      	sub	sp, #28
 800df92:	bf18      	it	ne
 800df94:	3604      	addne	r6, #4
 800df96:	2500      	movs	r5, #0
 800df98:	1f37      	subs	r7, r6, #4
 800df9a:	4690      	mov	r8, r2
 800df9c:	6802      	ldr	r2, [r0, #0]
 800df9e:	9301      	str	r3, [sp, #4]
 800dfa0:	4682      	mov	sl, r0
 800dfa2:	f846 5c04 	str.w	r5, [r6, #-4]
 800dfa6:	46b9      	mov	r9, r7
 800dfa8:	463c      	mov	r4, r7
 800dfaa:	9502      	str	r5, [sp, #8]
 800dfac:	46ab      	mov	fp, r5
 800dfae:	7851      	ldrb	r1, [r2, #1]
 800dfb0:	1c53      	adds	r3, r2, #1
 800dfb2:	9303      	str	r3, [sp, #12]
 800dfb4:	b341      	cbz	r1, 800e008 <__hexnan+0x88>
 800dfb6:	4608      	mov	r0, r1
 800dfb8:	9205      	str	r2, [sp, #20]
 800dfba:	9104      	str	r1, [sp, #16]
 800dfbc:	f7ff fd5e 	bl	800da7c <__hexdig_fun>
 800dfc0:	2800      	cmp	r0, #0
 800dfc2:	d14f      	bne.n	800e064 <__hexnan+0xe4>
 800dfc4:	9904      	ldr	r1, [sp, #16]
 800dfc6:	9a05      	ldr	r2, [sp, #20]
 800dfc8:	2920      	cmp	r1, #32
 800dfca:	d818      	bhi.n	800dffe <__hexnan+0x7e>
 800dfcc:	9b02      	ldr	r3, [sp, #8]
 800dfce:	459b      	cmp	fp, r3
 800dfd0:	dd13      	ble.n	800dffa <__hexnan+0x7a>
 800dfd2:	454c      	cmp	r4, r9
 800dfd4:	d206      	bcs.n	800dfe4 <__hexnan+0x64>
 800dfd6:	2d07      	cmp	r5, #7
 800dfd8:	dc04      	bgt.n	800dfe4 <__hexnan+0x64>
 800dfda:	462a      	mov	r2, r5
 800dfdc:	4649      	mov	r1, r9
 800dfde:	4620      	mov	r0, r4
 800dfe0:	f7ff ffa8 	bl	800df34 <L_shift>
 800dfe4:	4544      	cmp	r4, r8
 800dfe6:	d950      	bls.n	800e08a <__hexnan+0x10a>
 800dfe8:	2300      	movs	r3, #0
 800dfea:	f1a4 0904 	sub.w	r9, r4, #4
 800dfee:	f844 3c04 	str.w	r3, [r4, #-4]
 800dff2:	f8cd b008 	str.w	fp, [sp, #8]
 800dff6:	464c      	mov	r4, r9
 800dff8:	461d      	mov	r5, r3
 800dffa:	9a03      	ldr	r2, [sp, #12]
 800dffc:	e7d7      	b.n	800dfae <__hexnan+0x2e>
 800dffe:	2929      	cmp	r1, #41	; 0x29
 800e000:	d156      	bne.n	800e0b0 <__hexnan+0x130>
 800e002:	3202      	adds	r2, #2
 800e004:	f8ca 2000 	str.w	r2, [sl]
 800e008:	f1bb 0f00 	cmp.w	fp, #0
 800e00c:	d050      	beq.n	800e0b0 <__hexnan+0x130>
 800e00e:	454c      	cmp	r4, r9
 800e010:	d206      	bcs.n	800e020 <__hexnan+0xa0>
 800e012:	2d07      	cmp	r5, #7
 800e014:	dc04      	bgt.n	800e020 <__hexnan+0xa0>
 800e016:	462a      	mov	r2, r5
 800e018:	4649      	mov	r1, r9
 800e01a:	4620      	mov	r0, r4
 800e01c:	f7ff ff8a 	bl	800df34 <L_shift>
 800e020:	4544      	cmp	r4, r8
 800e022:	d934      	bls.n	800e08e <__hexnan+0x10e>
 800e024:	f1a8 0204 	sub.w	r2, r8, #4
 800e028:	4623      	mov	r3, r4
 800e02a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e02e:	f842 1f04 	str.w	r1, [r2, #4]!
 800e032:	429f      	cmp	r7, r3
 800e034:	d2f9      	bcs.n	800e02a <__hexnan+0xaa>
 800e036:	1b3b      	subs	r3, r7, r4
 800e038:	f023 0303 	bic.w	r3, r3, #3
 800e03c:	3304      	adds	r3, #4
 800e03e:	3401      	adds	r4, #1
 800e040:	3e03      	subs	r6, #3
 800e042:	42b4      	cmp	r4, r6
 800e044:	bf88      	it	hi
 800e046:	2304      	movhi	r3, #4
 800e048:	4443      	add	r3, r8
 800e04a:	2200      	movs	r2, #0
 800e04c:	f843 2b04 	str.w	r2, [r3], #4
 800e050:	429f      	cmp	r7, r3
 800e052:	d2fb      	bcs.n	800e04c <__hexnan+0xcc>
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	b91b      	cbnz	r3, 800e060 <__hexnan+0xe0>
 800e058:	4547      	cmp	r7, r8
 800e05a:	d127      	bne.n	800e0ac <__hexnan+0x12c>
 800e05c:	2301      	movs	r3, #1
 800e05e:	603b      	str	r3, [r7, #0]
 800e060:	2005      	movs	r0, #5
 800e062:	e026      	b.n	800e0b2 <__hexnan+0x132>
 800e064:	3501      	adds	r5, #1
 800e066:	2d08      	cmp	r5, #8
 800e068:	f10b 0b01 	add.w	fp, fp, #1
 800e06c:	dd06      	ble.n	800e07c <__hexnan+0xfc>
 800e06e:	4544      	cmp	r4, r8
 800e070:	d9c3      	bls.n	800dffa <__hexnan+0x7a>
 800e072:	2300      	movs	r3, #0
 800e074:	f844 3c04 	str.w	r3, [r4, #-4]
 800e078:	2501      	movs	r5, #1
 800e07a:	3c04      	subs	r4, #4
 800e07c:	6822      	ldr	r2, [r4, #0]
 800e07e:	f000 000f 	and.w	r0, r0, #15
 800e082:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e086:	6022      	str	r2, [r4, #0]
 800e088:	e7b7      	b.n	800dffa <__hexnan+0x7a>
 800e08a:	2508      	movs	r5, #8
 800e08c:	e7b5      	b.n	800dffa <__hexnan+0x7a>
 800e08e:	9b01      	ldr	r3, [sp, #4]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d0df      	beq.n	800e054 <__hexnan+0xd4>
 800e094:	f04f 32ff 	mov.w	r2, #4294967295
 800e098:	f1c3 0320 	rsb	r3, r3, #32
 800e09c:	fa22 f303 	lsr.w	r3, r2, r3
 800e0a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e0a4:	401a      	ands	r2, r3
 800e0a6:	f846 2c04 	str.w	r2, [r6, #-4]
 800e0aa:	e7d3      	b.n	800e054 <__hexnan+0xd4>
 800e0ac:	3f04      	subs	r7, #4
 800e0ae:	e7d1      	b.n	800e054 <__hexnan+0xd4>
 800e0b0:	2004      	movs	r0, #4
 800e0b2:	b007      	add	sp, #28
 800e0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e0b8 <_gettimeofday_r>:
 800e0b8:	b538      	push	{r3, r4, r5, lr}
 800e0ba:	4d07      	ldr	r5, [pc, #28]	; (800e0d8 <_gettimeofday_r+0x20>)
 800e0bc:	2300      	movs	r3, #0
 800e0be:	4604      	mov	r4, r0
 800e0c0:	4608      	mov	r0, r1
 800e0c2:	4611      	mov	r1, r2
 800e0c4:	602b      	str	r3, [r5, #0]
 800e0c6:	f001 fc1b 	bl	800f900 <_gettimeofday>
 800e0ca:	1c43      	adds	r3, r0, #1
 800e0cc:	d102      	bne.n	800e0d4 <_gettimeofday_r+0x1c>
 800e0ce:	682b      	ldr	r3, [r5, #0]
 800e0d0:	b103      	cbz	r3, 800e0d4 <_gettimeofday_r+0x1c>
 800e0d2:	6023      	str	r3, [r4, #0]
 800e0d4:	bd38      	pop	{r3, r4, r5, pc}
 800e0d6:	bf00      	nop
 800e0d8:	20005604 	.word	0x20005604

0800e0dc <_localeconv_r>:
 800e0dc:	4800      	ldr	r0, [pc, #0]	; (800e0e0 <_localeconv_r+0x4>)
 800e0de:	4770      	bx	lr
 800e0e0:	20000320 	.word	0x20000320

0800e0e4 <__ascii_mbtowc>:
 800e0e4:	b082      	sub	sp, #8
 800e0e6:	b901      	cbnz	r1, 800e0ea <__ascii_mbtowc+0x6>
 800e0e8:	a901      	add	r1, sp, #4
 800e0ea:	b142      	cbz	r2, 800e0fe <__ascii_mbtowc+0x1a>
 800e0ec:	b14b      	cbz	r3, 800e102 <__ascii_mbtowc+0x1e>
 800e0ee:	7813      	ldrb	r3, [r2, #0]
 800e0f0:	600b      	str	r3, [r1, #0]
 800e0f2:	7812      	ldrb	r2, [r2, #0]
 800e0f4:	1e10      	subs	r0, r2, #0
 800e0f6:	bf18      	it	ne
 800e0f8:	2001      	movne	r0, #1
 800e0fa:	b002      	add	sp, #8
 800e0fc:	4770      	bx	lr
 800e0fe:	4610      	mov	r0, r2
 800e100:	e7fb      	b.n	800e0fa <__ascii_mbtowc+0x16>
 800e102:	f06f 0001 	mvn.w	r0, #1
 800e106:	e7f8      	b.n	800e0fa <__ascii_mbtowc+0x16>

0800e108 <memcpy>:
 800e108:	440a      	add	r2, r1
 800e10a:	4291      	cmp	r1, r2
 800e10c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e110:	d100      	bne.n	800e114 <memcpy+0xc>
 800e112:	4770      	bx	lr
 800e114:	b510      	push	{r4, lr}
 800e116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e11a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e11e:	4291      	cmp	r1, r2
 800e120:	d1f9      	bne.n	800e116 <memcpy+0xe>
 800e122:	bd10      	pop	{r4, pc}

0800e124 <__malloc_lock>:
 800e124:	4801      	ldr	r0, [pc, #4]	; (800e12c <__malloc_lock+0x8>)
 800e126:	f001 ba41 	b.w	800f5ac <__retarget_lock_acquire_recursive>
 800e12a:	bf00      	nop
 800e12c:	20005608 	.word	0x20005608

0800e130 <__malloc_unlock>:
 800e130:	4801      	ldr	r0, [pc, #4]	; (800e138 <__malloc_unlock+0x8>)
 800e132:	f001 ba3c 	b.w	800f5ae <__retarget_lock_release_recursive>
 800e136:	bf00      	nop
 800e138:	20005608 	.word	0x20005608

0800e13c <_Balloc>:
 800e13c:	b570      	push	{r4, r5, r6, lr}
 800e13e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e140:	4604      	mov	r4, r0
 800e142:	460d      	mov	r5, r1
 800e144:	b976      	cbnz	r6, 800e164 <_Balloc+0x28>
 800e146:	2010      	movs	r0, #16
 800e148:	f7fc fec0 	bl	800aecc <malloc>
 800e14c:	4602      	mov	r2, r0
 800e14e:	6260      	str	r0, [r4, #36]	; 0x24
 800e150:	b920      	cbnz	r0, 800e15c <_Balloc+0x20>
 800e152:	4b18      	ldr	r3, [pc, #96]	; (800e1b4 <_Balloc+0x78>)
 800e154:	4818      	ldr	r0, [pc, #96]	; (800e1b8 <_Balloc+0x7c>)
 800e156:	2166      	movs	r1, #102	; 0x66
 800e158:	f7fe fd94 	bl	800cc84 <__assert_func>
 800e15c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e160:	6006      	str	r6, [r0, #0]
 800e162:	60c6      	str	r6, [r0, #12]
 800e164:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e166:	68f3      	ldr	r3, [r6, #12]
 800e168:	b183      	cbz	r3, 800e18c <_Balloc+0x50>
 800e16a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e16c:	68db      	ldr	r3, [r3, #12]
 800e16e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e172:	b9b8      	cbnz	r0, 800e1a4 <_Balloc+0x68>
 800e174:	2101      	movs	r1, #1
 800e176:	fa01 f605 	lsl.w	r6, r1, r5
 800e17a:	1d72      	adds	r2, r6, #5
 800e17c:	0092      	lsls	r2, r2, #2
 800e17e:	4620      	mov	r0, r4
 800e180:	f000 fc9d 	bl	800eabe <_calloc_r>
 800e184:	b160      	cbz	r0, 800e1a0 <_Balloc+0x64>
 800e186:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e18a:	e00e      	b.n	800e1aa <_Balloc+0x6e>
 800e18c:	2221      	movs	r2, #33	; 0x21
 800e18e:	2104      	movs	r1, #4
 800e190:	4620      	mov	r0, r4
 800e192:	f000 fc94 	bl	800eabe <_calloc_r>
 800e196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e198:	60f0      	str	r0, [r6, #12]
 800e19a:	68db      	ldr	r3, [r3, #12]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d1e4      	bne.n	800e16a <_Balloc+0x2e>
 800e1a0:	2000      	movs	r0, #0
 800e1a2:	bd70      	pop	{r4, r5, r6, pc}
 800e1a4:	6802      	ldr	r2, [r0, #0]
 800e1a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e1b0:	e7f7      	b.n	800e1a2 <_Balloc+0x66>
 800e1b2:	bf00      	nop
 800e1b4:	08010641 	.word	0x08010641
 800e1b8:	08010938 	.word	0x08010938

0800e1bc <_Bfree>:
 800e1bc:	b570      	push	{r4, r5, r6, lr}
 800e1be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e1c0:	4605      	mov	r5, r0
 800e1c2:	460c      	mov	r4, r1
 800e1c4:	b976      	cbnz	r6, 800e1e4 <_Bfree+0x28>
 800e1c6:	2010      	movs	r0, #16
 800e1c8:	f7fc fe80 	bl	800aecc <malloc>
 800e1cc:	4602      	mov	r2, r0
 800e1ce:	6268      	str	r0, [r5, #36]	; 0x24
 800e1d0:	b920      	cbnz	r0, 800e1dc <_Bfree+0x20>
 800e1d2:	4b09      	ldr	r3, [pc, #36]	; (800e1f8 <_Bfree+0x3c>)
 800e1d4:	4809      	ldr	r0, [pc, #36]	; (800e1fc <_Bfree+0x40>)
 800e1d6:	218a      	movs	r1, #138	; 0x8a
 800e1d8:	f7fe fd54 	bl	800cc84 <__assert_func>
 800e1dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e1e0:	6006      	str	r6, [r0, #0]
 800e1e2:	60c6      	str	r6, [r0, #12]
 800e1e4:	b13c      	cbz	r4, 800e1f6 <_Bfree+0x3a>
 800e1e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e1e8:	6862      	ldr	r2, [r4, #4]
 800e1ea:	68db      	ldr	r3, [r3, #12]
 800e1ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e1f0:	6021      	str	r1, [r4, #0]
 800e1f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e1f6:	bd70      	pop	{r4, r5, r6, pc}
 800e1f8:	08010641 	.word	0x08010641
 800e1fc:	08010938 	.word	0x08010938

0800e200 <__multadd>:
 800e200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e204:	690d      	ldr	r5, [r1, #16]
 800e206:	4607      	mov	r7, r0
 800e208:	460c      	mov	r4, r1
 800e20a:	461e      	mov	r6, r3
 800e20c:	f101 0c14 	add.w	ip, r1, #20
 800e210:	2000      	movs	r0, #0
 800e212:	f8dc 3000 	ldr.w	r3, [ip]
 800e216:	b299      	uxth	r1, r3
 800e218:	fb02 6101 	mla	r1, r2, r1, r6
 800e21c:	0c1e      	lsrs	r6, r3, #16
 800e21e:	0c0b      	lsrs	r3, r1, #16
 800e220:	fb02 3306 	mla	r3, r2, r6, r3
 800e224:	b289      	uxth	r1, r1
 800e226:	3001      	adds	r0, #1
 800e228:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e22c:	4285      	cmp	r5, r0
 800e22e:	f84c 1b04 	str.w	r1, [ip], #4
 800e232:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e236:	dcec      	bgt.n	800e212 <__multadd+0x12>
 800e238:	b30e      	cbz	r6, 800e27e <__multadd+0x7e>
 800e23a:	68a3      	ldr	r3, [r4, #8]
 800e23c:	42ab      	cmp	r3, r5
 800e23e:	dc19      	bgt.n	800e274 <__multadd+0x74>
 800e240:	6861      	ldr	r1, [r4, #4]
 800e242:	4638      	mov	r0, r7
 800e244:	3101      	adds	r1, #1
 800e246:	f7ff ff79 	bl	800e13c <_Balloc>
 800e24a:	4680      	mov	r8, r0
 800e24c:	b928      	cbnz	r0, 800e25a <__multadd+0x5a>
 800e24e:	4602      	mov	r2, r0
 800e250:	4b0c      	ldr	r3, [pc, #48]	; (800e284 <__multadd+0x84>)
 800e252:	480d      	ldr	r0, [pc, #52]	; (800e288 <__multadd+0x88>)
 800e254:	21b5      	movs	r1, #181	; 0xb5
 800e256:	f7fe fd15 	bl	800cc84 <__assert_func>
 800e25a:	6922      	ldr	r2, [r4, #16]
 800e25c:	3202      	adds	r2, #2
 800e25e:	f104 010c 	add.w	r1, r4, #12
 800e262:	0092      	lsls	r2, r2, #2
 800e264:	300c      	adds	r0, #12
 800e266:	f7ff ff4f 	bl	800e108 <memcpy>
 800e26a:	4621      	mov	r1, r4
 800e26c:	4638      	mov	r0, r7
 800e26e:	f7ff ffa5 	bl	800e1bc <_Bfree>
 800e272:	4644      	mov	r4, r8
 800e274:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e278:	3501      	adds	r5, #1
 800e27a:	615e      	str	r6, [r3, #20]
 800e27c:	6125      	str	r5, [r4, #16]
 800e27e:	4620      	mov	r0, r4
 800e280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e284:	080108ad 	.word	0x080108ad
 800e288:	08010938 	.word	0x08010938

0800e28c <__s2b>:
 800e28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e290:	460c      	mov	r4, r1
 800e292:	4615      	mov	r5, r2
 800e294:	461f      	mov	r7, r3
 800e296:	2209      	movs	r2, #9
 800e298:	3308      	adds	r3, #8
 800e29a:	4606      	mov	r6, r0
 800e29c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e2a0:	2100      	movs	r1, #0
 800e2a2:	2201      	movs	r2, #1
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	db09      	blt.n	800e2bc <__s2b+0x30>
 800e2a8:	4630      	mov	r0, r6
 800e2aa:	f7ff ff47 	bl	800e13c <_Balloc>
 800e2ae:	b940      	cbnz	r0, 800e2c2 <__s2b+0x36>
 800e2b0:	4602      	mov	r2, r0
 800e2b2:	4b19      	ldr	r3, [pc, #100]	; (800e318 <__s2b+0x8c>)
 800e2b4:	4819      	ldr	r0, [pc, #100]	; (800e31c <__s2b+0x90>)
 800e2b6:	21ce      	movs	r1, #206	; 0xce
 800e2b8:	f7fe fce4 	bl	800cc84 <__assert_func>
 800e2bc:	0052      	lsls	r2, r2, #1
 800e2be:	3101      	adds	r1, #1
 800e2c0:	e7f0      	b.n	800e2a4 <__s2b+0x18>
 800e2c2:	9b08      	ldr	r3, [sp, #32]
 800e2c4:	6143      	str	r3, [r0, #20]
 800e2c6:	2d09      	cmp	r5, #9
 800e2c8:	f04f 0301 	mov.w	r3, #1
 800e2cc:	6103      	str	r3, [r0, #16]
 800e2ce:	dd16      	ble.n	800e2fe <__s2b+0x72>
 800e2d0:	f104 0909 	add.w	r9, r4, #9
 800e2d4:	46c8      	mov	r8, r9
 800e2d6:	442c      	add	r4, r5
 800e2d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e2dc:	4601      	mov	r1, r0
 800e2de:	3b30      	subs	r3, #48	; 0x30
 800e2e0:	220a      	movs	r2, #10
 800e2e2:	4630      	mov	r0, r6
 800e2e4:	f7ff ff8c 	bl	800e200 <__multadd>
 800e2e8:	45a0      	cmp	r8, r4
 800e2ea:	d1f5      	bne.n	800e2d8 <__s2b+0x4c>
 800e2ec:	f1a5 0408 	sub.w	r4, r5, #8
 800e2f0:	444c      	add	r4, r9
 800e2f2:	1b2d      	subs	r5, r5, r4
 800e2f4:	1963      	adds	r3, r4, r5
 800e2f6:	42bb      	cmp	r3, r7
 800e2f8:	db04      	blt.n	800e304 <__s2b+0x78>
 800e2fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2fe:	340a      	adds	r4, #10
 800e300:	2509      	movs	r5, #9
 800e302:	e7f6      	b.n	800e2f2 <__s2b+0x66>
 800e304:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e308:	4601      	mov	r1, r0
 800e30a:	3b30      	subs	r3, #48	; 0x30
 800e30c:	220a      	movs	r2, #10
 800e30e:	4630      	mov	r0, r6
 800e310:	f7ff ff76 	bl	800e200 <__multadd>
 800e314:	e7ee      	b.n	800e2f4 <__s2b+0x68>
 800e316:	bf00      	nop
 800e318:	080108ad 	.word	0x080108ad
 800e31c:	08010938 	.word	0x08010938

0800e320 <__hi0bits>:
 800e320:	0c03      	lsrs	r3, r0, #16
 800e322:	041b      	lsls	r3, r3, #16
 800e324:	b9d3      	cbnz	r3, 800e35c <__hi0bits+0x3c>
 800e326:	0400      	lsls	r0, r0, #16
 800e328:	2310      	movs	r3, #16
 800e32a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e32e:	bf04      	itt	eq
 800e330:	0200      	lsleq	r0, r0, #8
 800e332:	3308      	addeq	r3, #8
 800e334:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e338:	bf04      	itt	eq
 800e33a:	0100      	lsleq	r0, r0, #4
 800e33c:	3304      	addeq	r3, #4
 800e33e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e342:	bf04      	itt	eq
 800e344:	0080      	lsleq	r0, r0, #2
 800e346:	3302      	addeq	r3, #2
 800e348:	2800      	cmp	r0, #0
 800e34a:	db05      	blt.n	800e358 <__hi0bits+0x38>
 800e34c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e350:	f103 0301 	add.w	r3, r3, #1
 800e354:	bf08      	it	eq
 800e356:	2320      	moveq	r3, #32
 800e358:	4618      	mov	r0, r3
 800e35a:	4770      	bx	lr
 800e35c:	2300      	movs	r3, #0
 800e35e:	e7e4      	b.n	800e32a <__hi0bits+0xa>

0800e360 <__lo0bits>:
 800e360:	6803      	ldr	r3, [r0, #0]
 800e362:	f013 0207 	ands.w	r2, r3, #7
 800e366:	4601      	mov	r1, r0
 800e368:	d00b      	beq.n	800e382 <__lo0bits+0x22>
 800e36a:	07da      	lsls	r2, r3, #31
 800e36c:	d423      	bmi.n	800e3b6 <__lo0bits+0x56>
 800e36e:	0798      	lsls	r0, r3, #30
 800e370:	bf49      	itett	mi
 800e372:	085b      	lsrmi	r3, r3, #1
 800e374:	089b      	lsrpl	r3, r3, #2
 800e376:	2001      	movmi	r0, #1
 800e378:	600b      	strmi	r3, [r1, #0]
 800e37a:	bf5c      	itt	pl
 800e37c:	600b      	strpl	r3, [r1, #0]
 800e37e:	2002      	movpl	r0, #2
 800e380:	4770      	bx	lr
 800e382:	b298      	uxth	r0, r3
 800e384:	b9a8      	cbnz	r0, 800e3b2 <__lo0bits+0x52>
 800e386:	0c1b      	lsrs	r3, r3, #16
 800e388:	2010      	movs	r0, #16
 800e38a:	b2da      	uxtb	r2, r3
 800e38c:	b90a      	cbnz	r2, 800e392 <__lo0bits+0x32>
 800e38e:	3008      	adds	r0, #8
 800e390:	0a1b      	lsrs	r3, r3, #8
 800e392:	071a      	lsls	r2, r3, #28
 800e394:	bf04      	itt	eq
 800e396:	091b      	lsreq	r3, r3, #4
 800e398:	3004      	addeq	r0, #4
 800e39a:	079a      	lsls	r2, r3, #30
 800e39c:	bf04      	itt	eq
 800e39e:	089b      	lsreq	r3, r3, #2
 800e3a0:	3002      	addeq	r0, #2
 800e3a2:	07da      	lsls	r2, r3, #31
 800e3a4:	d403      	bmi.n	800e3ae <__lo0bits+0x4e>
 800e3a6:	085b      	lsrs	r3, r3, #1
 800e3a8:	f100 0001 	add.w	r0, r0, #1
 800e3ac:	d005      	beq.n	800e3ba <__lo0bits+0x5a>
 800e3ae:	600b      	str	r3, [r1, #0]
 800e3b0:	4770      	bx	lr
 800e3b2:	4610      	mov	r0, r2
 800e3b4:	e7e9      	b.n	800e38a <__lo0bits+0x2a>
 800e3b6:	2000      	movs	r0, #0
 800e3b8:	4770      	bx	lr
 800e3ba:	2020      	movs	r0, #32
 800e3bc:	4770      	bx	lr
	...

0800e3c0 <__i2b>:
 800e3c0:	b510      	push	{r4, lr}
 800e3c2:	460c      	mov	r4, r1
 800e3c4:	2101      	movs	r1, #1
 800e3c6:	f7ff feb9 	bl	800e13c <_Balloc>
 800e3ca:	4602      	mov	r2, r0
 800e3cc:	b928      	cbnz	r0, 800e3da <__i2b+0x1a>
 800e3ce:	4b05      	ldr	r3, [pc, #20]	; (800e3e4 <__i2b+0x24>)
 800e3d0:	4805      	ldr	r0, [pc, #20]	; (800e3e8 <__i2b+0x28>)
 800e3d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e3d6:	f7fe fc55 	bl	800cc84 <__assert_func>
 800e3da:	2301      	movs	r3, #1
 800e3dc:	6144      	str	r4, [r0, #20]
 800e3de:	6103      	str	r3, [r0, #16]
 800e3e0:	bd10      	pop	{r4, pc}
 800e3e2:	bf00      	nop
 800e3e4:	080108ad 	.word	0x080108ad
 800e3e8:	08010938 	.word	0x08010938

0800e3ec <__multiply>:
 800e3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3f0:	4691      	mov	r9, r2
 800e3f2:	690a      	ldr	r2, [r1, #16]
 800e3f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	bfb8      	it	lt
 800e3fc:	460b      	movlt	r3, r1
 800e3fe:	460c      	mov	r4, r1
 800e400:	bfbc      	itt	lt
 800e402:	464c      	movlt	r4, r9
 800e404:	4699      	movlt	r9, r3
 800e406:	6927      	ldr	r7, [r4, #16]
 800e408:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e40c:	68a3      	ldr	r3, [r4, #8]
 800e40e:	6861      	ldr	r1, [r4, #4]
 800e410:	eb07 060a 	add.w	r6, r7, sl
 800e414:	42b3      	cmp	r3, r6
 800e416:	b085      	sub	sp, #20
 800e418:	bfb8      	it	lt
 800e41a:	3101      	addlt	r1, #1
 800e41c:	f7ff fe8e 	bl	800e13c <_Balloc>
 800e420:	b930      	cbnz	r0, 800e430 <__multiply+0x44>
 800e422:	4602      	mov	r2, r0
 800e424:	4b44      	ldr	r3, [pc, #272]	; (800e538 <__multiply+0x14c>)
 800e426:	4845      	ldr	r0, [pc, #276]	; (800e53c <__multiply+0x150>)
 800e428:	f240 115d 	movw	r1, #349	; 0x15d
 800e42c:	f7fe fc2a 	bl	800cc84 <__assert_func>
 800e430:	f100 0514 	add.w	r5, r0, #20
 800e434:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e438:	462b      	mov	r3, r5
 800e43a:	2200      	movs	r2, #0
 800e43c:	4543      	cmp	r3, r8
 800e43e:	d321      	bcc.n	800e484 <__multiply+0x98>
 800e440:	f104 0314 	add.w	r3, r4, #20
 800e444:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e448:	f109 0314 	add.w	r3, r9, #20
 800e44c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e450:	9202      	str	r2, [sp, #8]
 800e452:	1b3a      	subs	r2, r7, r4
 800e454:	3a15      	subs	r2, #21
 800e456:	f022 0203 	bic.w	r2, r2, #3
 800e45a:	3204      	adds	r2, #4
 800e45c:	f104 0115 	add.w	r1, r4, #21
 800e460:	428f      	cmp	r7, r1
 800e462:	bf38      	it	cc
 800e464:	2204      	movcc	r2, #4
 800e466:	9201      	str	r2, [sp, #4]
 800e468:	9a02      	ldr	r2, [sp, #8]
 800e46a:	9303      	str	r3, [sp, #12]
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d80c      	bhi.n	800e48a <__multiply+0x9e>
 800e470:	2e00      	cmp	r6, #0
 800e472:	dd03      	ble.n	800e47c <__multiply+0x90>
 800e474:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d05a      	beq.n	800e532 <__multiply+0x146>
 800e47c:	6106      	str	r6, [r0, #16]
 800e47e:	b005      	add	sp, #20
 800e480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e484:	f843 2b04 	str.w	r2, [r3], #4
 800e488:	e7d8      	b.n	800e43c <__multiply+0x50>
 800e48a:	f8b3 a000 	ldrh.w	sl, [r3]
 800e48e:	f1ba 0f00 	cmp.w	sl, #0
 800e492:	d024      	beq.n	800e4de <__multiply+0xf2>
 800e494:	f104 0e14 	add.w	lr, r4, #20
 800e498:	46a9      	mov	r9, r5
 800e49a:	f04f 0c00 	mov.w	ip, #0
 800e49e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e4a2:	f8d9 1000 	ldr.w	r1, [r9]
 800e4a6:	fa1f fb82 	uxth.w	fp, r2
 800e4aa:	b289      	uxth	r1, r1
 800e4ac:	fb0a 110b 	mla	r1, sl, fp, r1
 800e4b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e4b4:	f8d9 2000 	ldr.w	r2, [r9]
 800e4b8:	4461      	add	r1, ip
 800e4ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e4be:	fb0a c20b 	mla	r2, sl, fp, ip
 800e4c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e4c6:	b289      	uxth	r1, r1
 800e4c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e4cc:	4577      	cmp	r7, lr
 800e4ce:	f849 1b04 	str.w	r1, [r9], #4
 800e4d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e4d6:	d8e2      	bhi.n	800e49e <__multiply+0xb2>
 800e4d8:	9a01      	ldr	r2, [sp, #4]
 800e4da:	f845 c002 	str.w	ip, [r5, r2]
 800e4de:	9a03      	ldr	r2, [sp, #12]
 800e4e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e4e4:	3304      	adds	r3, #4
 800e4e6:	f1b9 0f00 	cmp.w	r9, #0
 800e4ea:	d020      	beq.n	800e52e <__multiply+0x142>
 800e4ec:	6829      	ldr	r1, [r5, #0]
 800e4ee:	f104 0c14 	add.w	ip, r4, #20
 800e4f2:	46ae      	mov	lr, r5
 800e4f4:	f04f 0a00 	mov.w	sl, #0
 800e4f8:	f8bc b000 	ldrh.w	fp, [ip]
 800e4fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e500:	fb09 220b 	mla	r2, r9, fp, r2
 800e504:	4492      	add	sl, r2
 800e506:	b289      	uxth	r1, r1
 800e508:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e50c:	f84e 1b04 	str.w	r1, [lr], #4
 800e510:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e514:	f8be 1000 	ldrh.w	r1, [lr]
 800e518:	0c12      	lsrs	r2, r2, #16
 800e51a:	fb09 1102 	mla	r1, r9, r2, r1
 800e51e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e522:	4567      	cmp	r7, ip
 800e524:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e528:	d8e6      	bhi.n	800e4f8 <__multiply+0x10c>
 800e52a:	9a01      	ldr	r2, [sp, #4]
 800e52c:	50a9      	str	r1, [r5, r2]
 800e52e:	3504      	adds	r5, #4
 800e530:	e79a      	b.n	800e468 <__multiply+0x7c>
 800e532:	3e01      	subs	r6, #1
 800e534:	e79c      	b.n	800e470 <__multiply+0x84>
 800e536:	bf00      	nop
 800e538:	080108ad 	.word	0x080108ad
 800e53c:	08010938 	.word	0x08010938

0800e540 <__pow5mult>:
 800e540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e544:	4615      	mov	r5, r2
 800e546:	f012 0203 	ands.w	r2, r2, #3
 800e54a:	4606      	mov	r6, r0
 800e54c:	460f      	mov	r7, r1
 800e54e:	d007      	beq.n	800e560 <__pow5mult+0x20>
 800e550:	4c25      	ldr	r4, [pc, #148]	; (800e5e8 <__pow5mult+0xa8>)
 800e552:	3a01      	subs	r2, #1
 800e554:	2300      	movs	r3, #0
 800e556:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e55a:	f7ff fe51 	bl	800e200 <__multadd>
 800e55e:	4607      	mov	r7, r0
 800e560:	10ad      	asrs	r5, r5, #2
 800e562:	d03d      	beq.n	800e5e0 <__pow5mult+0xa0>
 800e564:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e566:	b97c      	cbnz	r4, 800e588 <__pow5mult+0x48>
 800e568:	2010      	movs	r0, #16
 800e56a:	f7fc fcaf 	bl	800aecc <malloc>
 800e56e:	4602      	mov	r2, r0
 800e570:	6270      	str	r0, [r6, #36]	; 0x24
 800e572:	b928      	cbnz	r0, 800e580 <__pow5mult+0x40>
 800e574:	4b1d      	ldr	r3, [pc, #116]	; (800e5ec <__pow5mult+0xac>)
 800e576:	481e      	ldr	r0, [pc, #120]	; (800e5f0 <__pow5mult+0xb0>)
 800e578:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e57c:	f7fe fb82 	bl	800cc84 <__assert_func>
 800e580:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e584:	6004      	str	r4, [r0, #0]
 800e586:	60c4      	str	r4, [r0, #12]
 800e588:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e58c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e590:	b94c      	cbnz	r4, 800e5a6 <__pow5mult+0x66>
 800e592:	f240 2171 	movw	r1, #625	; 0x271
 800e596:	4630      	mov	r0, r6
 800e598:	f7ff ff12 	bl	800e3c0 <__i2b>
 800e59c:	2300      	movs	r3, #0
 800e59e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e5a2:	4604      	mov	r4, r0
 800e5a4:	6003      	str	r3, [r0, #0]
 800e5a6:	f04f 0900 	mov.w	r9, #0
 800e5aa:	07eb      	lsls	r3, r5, #31
 800e5ac:	d50a      	bpl.n	800e5c4 <__pow5mult+0x84>
 800e5ae:	4639      	mov	r1, r7
 800e5b0:	4622      	mov	r2, r4
 800e5b2:	4630      	mov	r0, r6
 800e5b4:	f7ff ff1a 	bl	800e3ec <__multiply>
 800e5b8:	4639      	mov	r1, r7
 800e5ba:	4680      	mov	r8, r0
 800e5bc:	4630      	mov	r0, r6
 800e5be:	f7ff fdfd 	bl	800e1bc <_Bfree>
 800e5c2:	4647      	mov	r7, r8
 800e5c4:	106d      	asrs	r5, r5, #1
 800e5c6:	d00b      	beq.n	800e5e0 <__pow5mult+0xa0>
 800e5c8:	6820      	ldr	r0, [r4, #0]
 800e5ca:	b938      	cbnz	r0, 800e5dc <__pow5mult+0x9c>
 800e5cc:	4622      	mov	r2, r4
 800e5ce:	4621      	mov	r1, r4
 800e5d0:	4630      	mov	r0, r6
 800e5d2:	f7ff ff0b 	bl	800e3ec <__multiply>
 800e5d6:	6020      	str	r0, [r4, #0]
 800e5d8:	f8c0 9000 	str.w	r9, [r0]
 800e5dc:	4604      	mov	r4, r0
 800e5de:	e7e4      	b.n	800e5aa <__pow5mult+0x6a>
 800e5e0:	4638      	mov	r0, r7
 800e5e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5e6:	bf00      	nop
 800e5e8:	08010a88 	.word	0x08010a88
 800e5ec:	08010641 	.word	0x08010641
 800e5f0:	08010938 	.word	0x08010938

0800e5f4 <__lshift>:
 800e5f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5f8:	460c      	mov	r4, r1
 800e5fa:	6849      	ldr	r1, [r1, #4]
 800e5fc:	6923      	ldr	r3, [r4, #16]
 800e5fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e602:	68a3      	ldr	r3, [r4, #8]
 800e604:	4607      	mov	r7, r0
 800e606:	4691      	mov	r9, r2
 800e608:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e60c:	f108 0601 	add.w	r6, r8, #1
 800e610:	42b3      	cmp	r3, r6
 800e612:	db0b      	blt.n	800e62c <__lshift+0x38>
 800e614:	4638      	mov	r0, r7
 800e616:	f7ff fd91 	bl	800e13c <_Balloc>
 800e61a:	4605      	mov	r5, r0
 800e61c:	b948      	cbnz	r0, 800e632 <__lshift+0x3e>
 800e61e:	4602      	mov	r2, r0
 800e620:	4b2a      	ldr	r3, [pc, #168]	; (800e6cc <__lshift+0xd8>)
 800e622:	482b      	ldr	r0, [pc, #172]	; (800e6d0 <__lshift+0xdc>)
 800e624:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e628:	f7fe fb2c 	bl	800cc84 <__assert_func>
 800e62c:	3101      	adds	r1, #1
 800e62e:	005b      	lsls	r3, r3, #1
 800e630:	e7ee      	b.n	800e610 <__lshift+0x1c>
 800e632:	2300      	movs	r3, #0
 800e634:	f100 0114 	add.w	r1, r0, #20
 800e638:	f100 0210 	add.w	r2, r0, #16
 800e63c:	4618      	mov	r0, r3
 800e63e:	4553      	cmp	r3, sl
 800e640:	db37      	blt.n	800e6b2 <__lshift+0xbe>
 800e642:	6920      	ldr	r0, [r4, #16]
 800e644:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e648:	f104 0314 	add.w	r3, r4, #20
 800e64c:	f019 091f 	ands.w	r9, r9, #31
 800e650:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e654:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e658:	d02f      	beq.n	800e6ba <__lshift+0xc6>
 800e65a:	f1c9 0e20 	rsb	lr, r9, #32
 800e65e:	468a      	mov	sl, r1
 800e660:	f04f 0c00 	mov.w	ip, #0
 800e664:	681a      	ldr	r2, [r3, #0]
 800e666:	fa02 f209 	lsl.w	r2, r2, r9
 800e66a:	ea42 020c 	orr.w	r2, r2, ip
 800e66e:	f84a 2b04 	str.w	r2, [sl], #4
 800e672:	f853 2b04 	ldr.w	r2, [r3], #4
 800e676:	4298      	cmp	r0, r3
 800e678:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e67c:	d8f2      	bhi.n	800e664 <__lshift+0x70>
 800e67e:	1b03      	subs	r3, r0, r4
 800e680:	3b15      	subs	r3, #21
 800e682:	f023 0303 	bic.w	r3, r3, #3
 800e686:	3304      	adds	r3, #4
 800e688:	f104 0215 	add.w	r2, r4, #21
 800e68c:	4290      	cmp	r0, r2
 800e68e:	bf38      	it	cc
 800e690:	2304      	movcc	r3, #4
 800e692:	f841 c003 	str.w	ip, [r1, r3]
 800e696:	f1bc 0f00 	cmp.w	ip, #0
 800e69a:	d001      	beq.n	800e6a0 <__lshift+0xac>
 800e69c:	f108 0602 	add.w	r6, r8, #2
 800e6a0:	3e01      	subs	r6, #1
 800e6a2:	4638      	mov	r0, r7
 800e6a4:	612e      	str	r6, [r5, #16]
 800e6a6:	4621      	mov	r1, r4
 800e6a8:	f7ff fd88 	bl	800e1bc <_Bfree>
 800e6ac:	4628      	mov	r0, r5
 800e6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800e6b6:	3301      	adds	r3, #1
 800e6b8:	e7c1      	b.n	800e63e <__lshift+0x4a>
 800e6ba:	3904      	subs	r1, #4
 800e6bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800e6c4:	4298      	cmp	r0, r3
 800e6c6:	d8f9      	bhi.n	800e6bc <__lshift+0xc8>
 800e6c8:	e7ea      	b.n	800e6a0 <__lshift+0xac>
 800e6ca:	bf00      	nop
 800e6cc:	080108ad 	.word	0x080108ad
 800e6d0:	08010938 	.word	0x08010938

0800e6d4 <__mcmp>:
 800e6d4:	b530      	push	{r4, r5, lr}
 800e6d6:	6902      	ldr	r2, [r0, #16]
 800e6d8:	690c      	ldr	r4, [r1, #16]
 800e6da:	1b12      	subs	r2, r2, r4
 800e6dc:	d10e      	bne.n	800e6fc <__mcmp+0x28>
 800e6de:	f100 0314 	add.w	r3, r0, #20
 800e6e2:	3114      	adds	r1, #20
 800e6e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e6e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e6ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e6f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e6f4:	42a5      	cmp	r5, r4
 800e6f6:	d003      	beq.n	800e700 <__mcmp+0x2c>
 800e6f8:	d305      	bcc.n	800e706 <__mcmp+0x32>
 800e6fa:	2201      	movs	r2, #1
 800e6fc:	4610      	mov	r0, r2
 800e6fe:	bd30      	pop	{r4, r5, pc}
 800e700:	4283      	cmp	r3, r0
 800e702:	d3f3      	bcc.n	800e6ec <__mcmp+0x18>
 800e704:	e7fa      	b.n	800e6fc <__mcmp+0x28>
 800e706:	f04f 32ff 	mov.w	r2, #4294967295
 800e70a:	e7f7      	b.n	800e6fc <__mcmp+0x28>

0800e70c <__mdiff>:
 800e70c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e710:	460c      	mov	r4, r1
 800e712:	4606      	mov	r6, r0
 800e714:	4611      	mov	r1, r2
 800e716:	4620      	mov	r0, r4
 800e718:	4690      	mov	r8, r2
 800e71a:	f7ff ffdb 	bl	800e6d4 <__mcmp>
 800e71e:	1e05      	subs	r5, r0, #0
 800e720:	d110      	bne.n	800e744 <__mdiff+0x38>
 800e722:	4629      	mov	r1, r5
 800e724:	4630      	mov	r0, r6
 800e726:	f7ff fd09 	bl	800e13c <_Balloc>
 800e72a:	b930      	cbnz	r0, 800e73a <__mdiff+0x2e>
 800e72c:	4b3a      	ldr	r3, [pc, #232]	; (800e818 <__mdiff+0x10c>)
 800e72e:	4602      	mov	r2, r0
 800e730:	f240 2132 	movw	r1, #562	; 0x232
 800e734:	4839      	ldr	r0, [pc, #228]	; (800e81c <__mdiff+0x110>)
 800e736:	f7fe faa5 	bl	800cc84 <__assert_func>
 800e73a:	2301      	movs	r3, #1
 800e73c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e740:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e744:	bfa4      	itt	ge
 800e746:	4643      	movge	r3, r8
 800e748:	46a0      	movge	r8, r4
 800e74a:	4630      	mov	r0, r6
 800e74c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e750:	bfa6      	itte	ge
 800e752:	461c      	movge	r4, r3
 800e754:	2500      	movge	r5, #0
 800e756:	2501      	movlt	r5, #1
 800e758:	f7ff fcf0 	bl	800e13c <_Balloc>
 800e75c:	b920      	cbnz	r0, 800e768 <__mdiff+0x5c>
 800e75e:	4b2e      	ldr	r3, [pc, #184]	; (800e818 <__mdiff+0x10c>)
 800e760:	4602      	mov	r2, r0
 800e762:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e766:	e7e5      	b.n	800e734 <__mdiff+0x28>
 800e768:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e76c:	6926      	ldr	r6, [r4, #16]
 800e76e:	60c5      	str	r5, [r0, #12]
 800e770:	f104 0914 	add.w	r9, r4, #20
 800e774:	f108 0514 	add.w	r5, r8, #20
 800e778:	f100 0e14 	add.w	lr, r0, #20
 800e77c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e780:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e784:	f108 0210 	add.w	r2, r8, #16
 800e788:	46f2      	mov	sl, lr
 800e78a:	2100      	movs	r1, #0
 800e78c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e790:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e794:	fa1f f883 	uxth.w	r8, r3
 800e798:	fa11 f18b 	uxtah	r1, r1, fp
 800e79c:	0c1b      	lsrs	r3, r3, #16
 800e79e:	eba1 0808 	sub.w	r8, r1, r8
 800e7a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e7a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e7aa:	fa1f f888 	uxth.w	r8, r8
 800e7ae:	1419      	asrs	r1, r3, #16
 800e7b0:	454e      	cmp	r6, r9
 800e7b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e7b6:	f84a 3b04 	str.w	r3, [sl], #4
 800e7ba:	d8e7      	bhi.n	800e78c <__mdiff+0x80>
 800e7bc:	1b33      	subs	r3, r6, r4
 800e7be:	3b15      	subs	r3, #21
 800e7c0:	f023 0303 	bic.w	r3, r3, #3
 800e7c4:	3304      	adds	r3, #4
 800e7c6:	3415      	adds	r4, #21
 800e7c8:	42a6      	cmp	r6, r4
 800e7ca:	bf38      	it	cc
 800e7cc:	2304      	movcc	r3, #4
 800e7ce:	441d      	add	r5, r3
 800e7d0:	4473      	add	r3, lr
 800e7d2:	469e      	mov	lr, r3
 800e7d4:	462e      	mov	r6, r5
 800e7d6:	4566      	cmp	r6, ip
 800e7d8:	d30e      	bcc.n	800e7f8 <__mdiff+0xec>
 800e7da:	f10c 0203 	add.w	r2, ip, #3
 800e7de:	1b52      	subs	r2, r2, r5
 800e7e0:	f022 0203 	bic.w	r2, r2, #3
 800e7e4:	3d03      	subs	r5, #3
 800e7e6:	45ac      	cmp	ip, r5
 800e7e8:	bf38      	it	cc
 800e7ea:	2200      	movcc	r2, #0
 800e7ec:	441a      	add	r2, r3
 800e7ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e7f2:	b17b      	cbz	r3, 800e814 <__mdiff+0x108>
 800e7f4:	6107      	str	r7, [r0, #16]
 800e7f6:	e7a3      	b.n	800e740 <__mdiff+0x34>
 800e7f8:	f856 8b04 	ldr.w	r8, [r6], #4
 800e7fc:	fa11 f288 	uxtah	r2, r1, r8
 800e800:	1414      	asrs	r4, r2, #16
 800e802:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e806:	b292      	uxth	r2, r2
 800e808:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e80c:	f84e 2b04 	str.w	r2, [lr], #4
 800e810:	1421      	asrs	r1, r4, #16
 800e812:	e7e0      	b.n	800e7d6 <__mdiff+0xca>
 800e814:	3f01      	subs	r7, #1
 800e816:	e7ea      	b.n	800e7ee <__mdiff+0xe2>
 800e818:	080108ad 	.word	0x080108ad
 800e81c:	08010938 	.word	0x08010938

0800e820 <__ulp>:
 800e820:	b082      	sub	sp, #8
 800e822:	ed8d 0b00 	vstr	d0, [sp]
 800e826:	9b01      	ldr	r3, [sp, #4]
 800e828:	4912      	ldr	r1, [pc, #72]	; (800e874 <__ulp+0x54>)
 800e82a:	4019      	ands	r1, r3
 800e82c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e830:	2900      	cmp	r1, #0
 800e832:	dd05      	ble.n	800e840 <__ulp+0x20>
 800e834:	2200      	movs	r2, #0
 800e836:	460b      	mov	r3, r1
 800e838:	ec43 2b10 	vmov	d0, r2, r3
 800e83c:	b002      	add	sp, #8
 800e83e:	4770      	bx	lr
 800e840:	4249      	negs	r1, r1
 800e842:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e846:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e84a:	f04f 0200 	mov.w	r2, #0
 800e84e:	f04f 0300 	mov.w	r3, #0
 800e852:	da04      	bge.n	800e85e <__ulp+0x3e>
 800e854:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e858:	fa41 f300 	asr.w	r3, r1, r0
 800e85c:	e7ec      	b.n	800e838 <__ulp+0x18>
 800e85e:	f1a0 0114 	sub.w	r1, r0, #20
 800e862:	291e      	cmp	r1, #30
 800e864:	bfda      	itte	le
 800e866:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e86a:	fa20 f101 	lsrle.w	r1, r0, r1
 800e86e:	2101      	movgt	r1, #1
 800e870:	460a      	mov	r2, r1
 800e872:	e7e1      	b.n	800e838 <__ulp+0x18>
 800e874:	7ff00000 	.word	0x7ff00000

0800e878 <__b2d>:
 800e878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e87a:	6905      	ldr	r5, [r0, #16]
 800e87c:	f100 0714 	add.w	r7, r0, #20
 800e880:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e884:	1f2e      	subs	r6, r5, #4
 800e886:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e88a:	4620      	mov	r0, r4
 800e88c:	f7ff fd48 	bl	800e320 <__hi0bits>
 800e890:	f1c0 0320 	rsb	r3, r0, #32
 800e894:	280a      	cmp	r0, #10
 800e896:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e914 <__b2d+0x9c>
 800e89a:	600b      	str	r3, [r1, #0]
 800e89c:	dc14      	bgt.n	800e8c8 <__b2d+0x50>
 800e89e:	f1c0 0e0b 	rsb	lr, r0, #11
 800e8a2:	fa24 f10e 	lsr.w	r1, r4, lr
 800e8a6:	42b7      	cmp	r7, r6
 800e8a8:	ea41 030c 	orr.w	r3, r1, ip
 800e8ac:	bf34      	ite	cc
 800e8ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e8b2:	2100      	movcs	r1, #0
 800e8b4:	3015      	adds	r0, #21
 800e8b6:	fa04 f000 	lsl.w	r0, r4, r0
 800e8ba:	fa21 f10e 	lsr.w	r1, r1, lr
 800e8be:	ea40 0201 	orr.w	r2, r0, r1
 800e8c2:	ec43 2b10 	vmov	d0, r2, r3
 800e8c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8c8:	42b7      	cmp	r7, r6
 800e8ca:	bf3a      	itte	cc
 800e8cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e8d0:	f1a5 0608 	subcc.w	r6, r5, #8
 800e8d4:	2100      	movcs	r1, #0
 800e8d6:	380b      	subs	r0, #11
 800e8d8:	d017      	beq.n	800e90a <__b2d+0x92>
 800e8da:	f1c0 0c20 	rsb	ip, r0, #32
 800e8de:	fa04 f500 	lsl.w	r5, r4, r0
 800e8e2:	42be      	cmp	r6, r7
 800e8e4:	fa21 f40c 	lsr.w	r4, r1, ip
 800e8e8:	ea45 0504 	orr.w	r5, r5, r4
 800e8ec:	bf8c      	ite	hi
 800e8ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e8f2:	2400      	movls	r4, #0
 800e8f4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e8f8:	fa01 f000 	lsl.w	r0, r1, r0
 800e8fc:	fa24 f40c 	lsr.w	r4, r4, ip
 800e900:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e904:	ea40 0204 	orr.w	r2, r0, r4
 800e908:	e7db      	b.n	800e8c2 <__b2d+0x4a>
 800e90a:	ea44 030c 	orr.w	r3, r4, ip
 800e90e:	460a      	mov	r2, r1
 800e910:	e7d7      	b.n	800e8c2 <__b2d+0x4a>
 800e912:	bf00      	nop
 800e914:	3ff00000 	.word	0x3ff00000

0800e918 <__d2b>:
 800e918:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e91c:	4689      	mov	r9, r1
 800e91e:	2101      	movs	r1, #1
 800e920:	ec57 6b10 	vmov	r6, r7, d0
 800e924:	4690      	mov	r8, r2
 800e926:	f7ff fc09 	bl	800e13c <_Balloc>
 800e92a:	4604      	mov	r4, r0
 800e92c:	b930      	cbnz	r0, 800e93c <__d2b+0x24>
 800e92e:	4602      	mov	r2, r0
 800e930:	4b25      	ldr	r3, [pc, #148]	; (800e9c8 <__d2b+0xb0>)
 800e932:	4826      	ldr	r0, [pc, #152]	; (800e9cc <__d2b+0xb4>)
 800e934:	f240 310a 	movw	r1, #778	; 0x30a
 800e938:	f7fe f9a4 	bl	800cc84 <__assert_func>
 800e93c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e940:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e944:	bb35      	cbnz	r5, 800e994 <__d2b+0x7c>
 800e946:	2e00      	cmp	r6, #0
 800e948:	9301      	str	r3, [sp, #4]
 800e94a:	d028      	beq.n	800e99e <__d2b+0x86>
 800e94c:	4668      	mov	r0, sp
 800e94e:	9600      	str	r6, [sp, #0]
 800e950:	f7ff fd06 	bl	800e360 <__lo0bits>
 800e954:	9900      	ldr	r1, [sp, #0]
 800e956:	b300      	cbz	r0, 800e99a <__d2b+0x82>
 800e958:	9a01      	ldr	r2, [sp, #4]
 800e95a:	f1c0 0320 	rsb	r3, r0, #32
 800e95e:	fa02 f303 	lsl.w	r3, r2, r3
 800e962:	430b      	orrs	r3, r1
 800e964:	40c2      	lsrs	r2, r0
 800e966:	6163      	str	r3, [r4, #20]
 800e968:	9201      	str	r2, [sp, #4]
 800e96a:	9b01      	ldr	r3, [sp, #4]
 800e96c:	61a3      	str	r3, [r4, #24]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	bf14      	ite	ne
 800e972:	2202      	movne	r2, #2
 800e974:	2201      	moveq	r2, #1
 800e976:	6122      	str	r2, [r4, #16]
 800e978:	b1d5      	cbz	r5, 800e9b0 <__d2b+0x98>
 800e97a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e97e:	4405      	add	r5, r0
 800e980:	f8c9 5000 	str.w	r5, [r9]
 800e984:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e988:	f8c8 0000 	str.w	r0, [r8]
 800e98c:	4620      	mov	r0, r4
 800e98e:	b003      	add	sp, #12
 800e990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e994:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e998:	e7d5      	b.n	800e946 <__d2b+0x2e>
 800e99a:	6161      	str	r1, [r4, #20]
 800e99c:	e7e5      	b.n	800e96a <__d2b+0x52>
 800e99e:	a801      	add	r0, sp, #4
 800e9a0:	f7ff fcde 	bl	800e360 <__lo0bits>
 800e9a4:	9b01      	ldr	r3, [sp, #4]
 800e9a6:	6163      	str	r3, [r4, #20]
 800e9a8:	2201      	movs	r2, #1
 800e9aa:	6122      	str	r2, [r4, #16]
 800e9ac:	3020      	adds	r0, #32
 800e9ae:	e7e3      	b.n	800e978 <__d2b+0x60>
 800e9b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e9b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e9b8:	f8c9 0000 	str.w	r0, [r9]
 800e9bc:	6918      	ldr	r0, [r3, #16]
 800e9be:	f7ff fcaf 	bl	800e320 <__hi0bits>
 800e9c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e9c6:	e7df      	b.n	800e988 <__d2b+0x70>
 800e9c8:	080108ad 	.word	0x080108ad
 800e9cc:	08010938 	.word	0x08010938

0800e9d0 <__ratio>:
 800e9d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9d4:	4688      	mov	r8, r1
 800e9d6:	4669      	mov	r1, sp
 800e9d8:	4681      	mov	r9, r0
 800e9da:	f7ff ff4d 	bl	800e878 <__b2d>
 800e9de:	a901      	add	r1, sp, #4
 800e9e0:	4640      	mov	r0, r8
 800e9e2:	ec55 4b10 	vmov	r4, r5, d0
 800e9e6:	f7ff ff47 	bl	800e878 <__b2d>
 800e9ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e9ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e9f2:	eba3 0c02 	sub.w	ip, r3, r2
 800e9f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e9fa:	1a9b      	subs	r3, r3, r2
 800e9fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ea00:	ec51 0b10 	vmov	r0, r1, d0
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	bfd6      	itet	le
 800ea08:	460a      	movle	r2, r1
 800ea0a:	462a      	movgt	r2, r5
 800ea0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ea10:	468b      	mov	fp, r1
 800ea12:	462f      	mov	r7, r5
 800ea14:	bfd4      	ite	le
 800ea16:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ea1a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ea1e:	4620      	mov	r0, r4
 800ea20:	ee10 2a10 	vmov	r2, s0
 800ea24:	465b      	mov	r3, fp
 800ea26:	4639      	mov	r1, r7
 800ea28:	f7f1 ff38 	bl	800089c <__aeabi_ddiv>
 800ea2c:	ec41 0b10 	vmov	d0, r0, r1
 800ea30:	b003      	add	sp, #12
 800ea32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ea36 <__copybits>:
 800ea36:	3901      	subs	r1, #1
 800ea38:	b570      	push	{r4, r5, r6, lr}
 800ea3a:	1149      	asrs	r1, r1, #5
 800ea3c:	6914      	ldr	r4, [r2, #16]
 800ea3e:	3101      	adds	r1, #1
 800ea40:	f102 0314 	add.w	r3, r2, #20
 800ea44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ea48:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ea4c:	1f05      	subs	r5, r0, #4
 800ea4e:	42a3      	cmp	r3, r4
 800ea50:	d30c      	bcc.n	800ea6c <__copybits+0x36>
 800ea52:	1aa3      	subs	r3, r4, r2
 800ea54:	3b11      	subs	r3, #17
 800ea56:	f023 0303 	bic.w	r3, r3, #3
 800ea5a:	3211      	adds	r2, #17
 800ea5c:	42a2      	cmp	r2, r4
 800ea5e:	bf88      	it	hi
 800ea60:	2300      	movhi	r3, #0
 800ea62:	4418      	add	r0, r3
 800ea64:	2300      	movs	r3, #0
 800ea66:	4288      	cmp	r0, r1
 800ea68:	d305      	bcc.n	800ea76 <__copybits+0x40>
 800ea6a:	bd70      	pop	{r4, r5, r6, pc}
 800ea6c:	f853 6b04 	ldr.w	r6, [r3], #4
 800ea70:	f845 6f04 	str.w	r6, [r5, #4]!
 800ea74:	e7eb      	b.n	800ea4e <__copybits+0x18>
 800ea76:	f840 3b04 	str.w	r3, [r0], #4
 800ea7a:	e7f4      	b.n	800ea66 <__copybits+0x30>

0800ea7c <__any_on>:
 800ea7c:	f100 0214 	add.w	r2, r0, #20
 800ea80:	6900      	ldr	r0, [r0, #16]
 800ea82:	114b      	asrs	r3, r1, #5
 800ea84:	4298      	cmp	r0, r3
 800ea86:	b510      	push	{r4, lr}
 800ea88:	db11      	blt.n	800eaae <__any_on+0x32>
 800ea8a:	dd0a      	ble.n	800eaa2 <__any_on+0x26>
 800ea8c:	f011 011f 	ands.w	r1, r1, #31
 800ea90:	d007      	beq.n	800eaa2 <__any_on+0x26>
 800ea92:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ea96:	fa24 f001 	lsr.w	r0, r4, r1
 800ea9a:	fa00 f101 	lsl.w	r1, r0, r1
 800ea9e:	428c      	cmp	r4, r1
 800eaa0:	d10b      	bne.n	800eaba <__any_on+0x3e>
 800eaa2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	d803      	bhi.n	800eab2 <__any_on+0x36>
 800eaaa:	2000      	movs	r0, #0
 800eaac:	bd10      	pop	{r4, pc}
 800eaae:	4603      	mov	r3, r0
 800eab0:	e7f7      	b.n	800eaa2 <__any_on+0x26>
 800eab2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eab6:	2900      	cmp	r1, #0
 800eab8:	d0f5      	beq.n	800eaa6 <__any_on+0x2a>
 800eaba:	2001      	movs	r0, #1
 800eabc:	e7f6      	b.n	800eaac <__any_on+0x30>

0800eabe <_calloc_r>:
 800eabe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eac0:	fba1 2402 	umull	r2, r4, r1, r2
 800eac4:	b94c      	cbnz	r4, 800eada <_calloc_r+0x1c>
 800eac6:	4611      	mov	r1, r2
 800eac8:	9201      	str	r2, [sp, #4]
 800eaca:	f7fc fa83 	bl	800afd4 <_malloc_r>
 800eace:	9a01      	ldr	r2, [sp, #4]
 800ead0:	4605      	mov	r5, r0
 800ead2:	b930      	cbnz	r0, 800eae2 <_calloc_r+0x24>
 800ead4:	4628      	mov	r0, r5
 800ead6:	b003      	add	sp, #12
 800ead8:	bd30      	pop	{r4, r5, pc}
 800eada:	220c      	movs	r2, #12
 800eadc:	6002      	str	r2, [r0, #0]
 800eade:	2500      	movs	r5, #0
 800eae0:	e7f8      	b.n	800ead4 <_calloc_r+0x16>
 800eae2:	4621      	mov	r1, r4
 800eae4:	f7fc fa02 	bl	800aeec <memset>
 800eae8:	e7f4      	b.n	800ead4 <_calloc_r+0x16>

0800eaea <__ssputs_r>:
 800eaea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eaee:	688e      	ldr	r6, [r1, #8]
 800eaf0:	429e      	cmp	r6, r3
 800eaf2:	4682      	mov	sl, r0
 800eaf4:	460c      	mov	r4, r1
 800eaf6:	4690      	mov	r8, r2
 800eaf8:	461f      	mov	r7, r3
 800eafa:	d838      	bhi.n	800eb6e <__ssputs_r+0x84>
 800eafc:	898a      	ldrh	r2, [r1, #12]
 800eafe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eb02:	d032      	beq.n	800eb6a <__ssputs_r+0x80>
 800eb04:	6825      	ldr	r5, [r4, #0]
 800eb06:	6909      	ldr	r1, [r1, #16]
 800eb08:	eba5 0901 	sub.w	r9, r5, r1
 800eb0c:	6965      	ldr	r5, [r4, #20]
 800eb0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb16:	3301      	adds	r3, #1
 800eb18:	444b      	add	r3, r9
 800eb1a:	106d      	asrs	r5, r5, #1
 800eb1c:	429d      	cmp	r5, r3
 800eb1e:	bf38      	it	cc
 800eb20:	461d      	movcc	r5, r3
 800eb22:	0553      	lsls	r3, r2, #21
 800eb24:	d531      	bpl.n	800eb8a <__ssputs_r+0xa0>
 800eb26:	4629      	mov	r1, r5
 800eb28:	f7fc fa54 	bl	800afd4 <_malloc_r>
 800eb2c:	4606      	mov	r6, r0
 800eb2e:	b950      	cbnz	r0, 800eb46 <__ssputs_r+0x5c>
 800eb30:	230c      	movs	r3, #12
 800eb32:	f8ca 3000 	str.w	r3, [sl]
 800eb36:	89a3      	ldrh	r3, [r4, #12]
 800eb38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb3c:	81a3      	strh	r3, [r4, #12]
 800eb3e:	f04f 30ff 	mov.w	r0, #4294967295
 800eb42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb46:	6921      	ldr	r1, [r4, #16]
 800eb48:	464a      	mov	r2, r9
 800eb4a:	f7ff fadd 	bl	800e108 <memcpy>
 800eb4e:	89a3      	ldrh	r3, [r4, #12]
 800eb50:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eb54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb58:	81a3      	strh	r3, [r4, #12]
 800eb5a:	6126      	str	r6, [r4, #16]
 800eb5c:	6165      	str	r5, [r4, #20]
 800eb5e:	444e      	add	r6, r9
 800eb60:	eba5 0509 	sub.w	r5, r5, r9
 800eb64:	6026      	str	r6, [r4, #0]
 800eb66:	60a5      	str	r5, [r4, #8]
 800eb68:	463e      	mov	r6, r7
 800eb6a:	42be      	cmp	r6, r7
 800eb6c:	d900      	bls.n	800eb70 <__ssputs_r+0x86>
 800eb6e:	463e      	mov	r6, r7
 800eb70:	6820      	ldr	r0, [r4, #0]
 800eb72:	4632      	mov	r2, r6
 800eb74:	4641      	mov	r1, r8
 800eb76:	f000 fd81 	bl	800f67c <memmove>
 800eb7a:	68a3      	ldr	r3, [r4, #8]
 800eb7c:	1b9b      	subs	r3, r3, r6
 800eb7e:	60a3      	str	r3, [r4, #8]
 800eb80:	6823      	ldr	r3, [r4, #0]
 800eb82:	4433      	add	r3, r6
 800eb84:	6023      	str	r3, [r4, #0]
 800eb86:	2000      	movs	r0, #0
 800eb88:	e7db      	b.n	800eb42 <__ssputs_r+0x58>
 800eb8a:	462a      	mov	r2, r5
 800eb8c:	f000 fd90 	bl	800f6b0 <_realloc_r>
 800eb90:	4606      	mov	r6, r0
 800eb92:	2800      	cmp	r0, #0
 800eb94:	d1e1      	bne.n	800eb5a <__ssputs_r+0x70>
 800eb96:	6921      	ldr	r1, [r4, #16]
 800eb98:	4650      	mov	r0, sl
 800eb9a:	f7fc f9af 	bl	800aefc <_free_r>
 800eb9e:	e7c7      	b.n	800eb30 <__ssputs_r+0x46>

0800eba0 <_svfiprintf_r>:
 800eba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eba4:	4698      	mov	r8, r3
 800eba6:	898b      	ldrh	r3, [r1, #12]
 800eba8:	061b      	lsls	r3, r3, #24
 800ebaa:	b09d      	sub	sp, #116	; 0x74
 800ebac:	4607      	mov	r7, r0
 800ebae:	460d      	mov	r5, r1
 800ebb0:	4614      	mov	r4, r2
 800ebb2:	d50e      	bpl.n	800ebd2 <_svfiprintf_r+0x32>
 800ebb4:	690b      	ldr	r3, [r1, #16]
 800ebb6:	b963      	cbnz	r3, 800ebd2 <_svfiprintf_r+0x32>
 800ebb8:	2140      	movs	r1, #64	; 0x40
 800ebba:	f7fc fa0b 	bl	800afd4 <_malloc_r>
 800ebbe:	6028      	str	r0, [r5, #0]
 800ebc0:	6128      	str	r0, [r5, #16]
 800ebc2:	b920      	cbnz	r0, 800ebce <_svfiprintf_r+0x2e>
 800ebc4:	230c      	movs	r3, #12
 800ebc6:	603b      	str	r3, [r7, #0]
 800ebc8:	f04f 30ff 	mov.w	r0, #4294967295
 800ebcc:	e0d1      	b.n	800ed72 <_svfiprintf_r+0x1d2>
 800ebce:	2340      	movs	r3, #64	; 0x40
 800ebd0:	616b      	str	r3, [r5, #20]
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	9309      	str	r3, [sp, #36]	; 0x24
 800ebd6:	2320      	movs	r3, #32
 800ebd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ebdc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ebe0:	2330      	movs	r3, #48	; 0x30
 800ebe2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ed8c <_svfiprintf_r+0x1ec>
 800ebe6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ebea:	f04f 0901 	mov.w	r9, #1
 800ebee:	4623      	mov	r3, r4
 800ebf0:	469a      	mov	sl, r3
 800ebf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebf6:	b10a      	cbz	r2, 800ebfc <_svfiprintf_r+0x5c>
 800ebf8:	2a25      	cmp	r2, #37	; 0x25
 800ebfa:	d1f9      	bne.n	800ebf0 <_svfiprintf_r+0x50>
 800ebfc:	ebba 0b04 	subs.w	fp, sl, r4
 800ec00:	d00b      	beq.n	800ec1a <_svfiprintf_r+0x7a>
 800ec02:	465b      	mov	r3, fp
 800ec04:	4622      	mov	r2, r4
 800ec06:	4629      	mov	r1, r5
 800ec08:	4638      	mov	r0, r7
 800ec0a:	f7ff ff6e 	bl	800eaea <__ssputs_r>
 800ec0e:	3001      	adds	r0, #1
 800ec10:	f000 80aa 	beq.w	800ed68 <_svfiprintf_r+0x1c8>
 800ec14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec16:	445a      	add	r2, fp
 800ec18:	9209      	str	r2, [sp, #36]	; 0x24
 800ec1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	f000 80a2 	beq.w	800ed68 <_svfiprintf_r+0x1c8>
 800ec24:	2300      	movs	r3, #0
 800ec26:	f04f 32ff 	mov.w	r2, #4294967295
 800ec2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec2e:	f10a 0a01 	add.w	sl, sl, #1
 800ec32:	9304      	str	r3, [sp, #16]
 800ec34:	9307      	str	r3, [sp, #28]
 800ec36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec3a:	931a      	str	r3, [sp, #104]	; 0x68
 800ec3c:	4654      	mov	r4, sl
 800ec3e:	2205      	movs	r2, #5
 800ec40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec44:	4851      	ldr	r0, [pc, #324]	; (800ed8c <_svfiprintf_r+0x1ec>)
 800ec46:	f7f1 faf3 	bl	8000230 <memchr>
 800ec4a:	9a04      	ldr	r2, [sp, #16]
 800ec4c:	b9d8      	cbnz	r0, 800ec86 <_svfiprintf_r+0xe6>
 800ec4e:	06d0      	lsls	r0, r2, #27
 800ec50:	bf44      	itt	mi
 800ec52:	2320      	movmi	r3, #32
 800ec54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec58:	0711      	lsls	r1, r2, #28
 800ec5a:	bf44      	itt	mi
 800ec5c:	232b      	movmi	r3, #43	; 0x2b
 800ec5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec62:	f89a 3000 	ldrb.w	r3, [sl]
 800ec66:	2b2a      	cmp	r3, #42	; 0x2a
 800ec68:	d015      	beq.n	800ec96 <_svfiprintf_r+0xf6>
 800ec6a:	9a07      	ldr	r2, [sp, #28]
 800ec6c:	4654      	mov	r4, sl
 800ec6e:	2000      	movs	r0, #0
 800ec70:	f04f 0c0a 	mov.w	ip, #10
 800ec74:	4621      	mov	r1, r4
 800ec76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec7a:	3b30      	subs	r3, #48	; 0x30
 800ec7c:	2b09      	cmp	r3, #9
 800ec7e:	d94e      	bls.n	800ed1e <_svfiprintf_r+0x17e>
 800ec80:	b1b0      	cbz	r0, 800ecb0 <_svfiprintf_r+0x110>
 800ec82:	9207      	str	r2, [sp, #28]
 800ec84:	e014      	b.n	800ecb0 <_svfiprintf_r+0x110>
 800ec86:	eba0 0308 	sub.w	r3, r0, r8
 800ec8a:	fa09 f303 	lsl.w	r3, r9, r3
 800ec8e:	4313      	orrs	r3, r2
 800ec90:	9304      	str	r3, [sp, #16]
 800ec92:	46a2      	mov	sl, r4
 800ec94:	e7d2      	b.n	800ec3c <_svfiprintf_r+0x9c>
 800ec96:	9b03      	ldr	r3, [sp, #12]
 800ec98:	1d19      	adds	r1, r3, #4
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	9103      	str	r1, [sp, #12]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	bfbb      	ittet	lt
 800eca2:	425b      	neglt	r3, r3
 800eca4:	f042 0202 	orrlt.w	r2, r2, #2
 800eca8:	9307      	strge	r3, [sp, #28]
 800ecaa:	9307      	strlt	r3, [sp, #28]
 800ecac:	bfb8      	it	lt
 800ecae:	9204      	strlt	r2, [sp, #16]
 800ecb0:	7823      	ldrb	r3, [r4, #0]
 800ecb2:	2b2e      	cmp	r3, #46	; 0x2e
 800ecb4:	d10c      	bne.n	800ecd0 <_svfiprintf_r+0x130>
 800ecb6:	7863      	ldrb	r3, [r4, #1]
 800ecb8:	2b2a      	cmp	r3, #42	; 0x2a
 800ecba:	d135      	bne.n	800ed28 <_svfiprintf_r+0x188>
 800ecbc:	9b03      	ldr	r3, [sp, #12]
 800ecbe:	1d1a      	adds	r2, r3, #4
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	9203      	str	r2, [sp, #12]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	bfb8      	it	lt
 800ecc8:	f04f 33ff 	movlt.w	r3, #4294967295
 800eccc:	3402      	adds	r4, #2
 800ecce:	9305      	str	r3, [sp, #20]
 800ecd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ed9c <_svfiprintf_r+0x1fc>
 800ecd4:	7821      	ldrb	r1, [r4, #0]
 800ecd6:	2203      	movs	r2, #3
 800ecd8:	4650      	mov	r0, sl
 800ecda:	f7f1 faa9 	bl	8000230 <memchr>
 800ecde:	b140      	cbz	r0, 800ecf2 <_svfiprintf_r+0x152>
 800ece0:	2340      	movs	r3, #64	; 0x40
 800ece2:	eba0 000a 	sub.w	r0, r0, sl
 800ece6:	fa03 f000 	lsl.w	r0, r3, r0
 800ecea:	9b04      	ldr	r3, [sp, #16]
 800ecec:	4303      	orrs	r3, r0
 800ecee:	3401      	adds	r4, #1
 800ecf0:	9304      	str	r3, [sp, #16]
 800ecf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecf6:	4826      	ldr	r0, [pc, #152]	; (800ed90 <_svfiprintf_r+0x1f0>)
 800ecf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ecfc:	2206      	movs	r2, #6
 800ecfe:	f7f1 fa97 	bl	8000230 <memchr>
 800ed02:	2800      	cmp	r0, #0
 800ed04:	d038      	beq.n	800ed78 <_svfiprintf_r+0x1d8>
 800ed06:	4b23      	ldr	r3, [pc, #140]	; (800ed94 <_svfiprintf_r+0x1f4>)
 800ed08:	bb1b      	cbnz	r3, 800ed52 <_svfiprintf_r+0x1b2>
 800ed0a:	9b03      	ldr	r3, [sp, #12]
 800ed0c:	3307      	adds	r3, #7
 800ed0e:	f023 0307 	bic.w	r3, r3, #7
 800ed12:	3308      	adds	r3, #8
 800ed14:	9303      	str	r3, [sp, #12]
 800ed16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed18:	4433      	add	r3, r6
 800ed1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ed1c:	e767      	b.n	800ebee <_svfiprintf_r+0x4e>
 800ed1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed22:	460c      	mov	r4, r1
 800ed24:	2001      	movs	r0, #1
 800ed26:	e7a5      	b.n	800ec74 <_svfiprintf_r+0xd4>
 800ed28:	2300      	movs	r3, #0
 800ed2a:	3401      	adds	r4, #1
 800ed2c:	9305      	str	r3, [sp, #20]
 800ed2e:	4619      	mov	r1, r3
 800ed30:	f04f 0c0a 	mov.w	ip, #10
 800ed34:	4620      	mov	r0, r4
 800ed36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed3a:	3a30      	subs	r2, #48	; 0x30
 800ed3c:	2a09      	cmp	r2, #9
 800ed3e:	d903      	bls.n	800ed48 <_svfiprintf_r+0x1a8>
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d0c5      	beq.n	800ecd0 <_svfiprintf_r+0x130>
 800ed44:	9105      	str	r1, [sp, #20]
 800ed46:	e7c3      	b.n	800ecd0 <_svfiprintf_r+0x130>
 800ed48:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed4c:	4604      	mov	r4, r0
 800ed4e:	2301      	movs	r3, #1
 800ed50:	e7f0      	b.n	800ed34 <_svfiprintf_r+0x194>
 800ed52:	ab03      	add	r3, sp, #12
 800ed54:	9300      	str	r3, [sp, #0]
 800ed56:	462a      	mov	r2, r5
 800ed58:	4b0f      	ldr	r3, [pc, #60]	; (800ed98 <_svfiprintf_r+0x1f8>)
 800ed5a:	a904      	add	r1, sp, #16
 800ed5c:	4638      	mov	r0, r7
 800ed5e:	f7fc fa4d 	bl	800b1fc <_printf_float>
 800ed62:	1c42      	adds	r2, r0, #1
 800ed64:	4606      	mov	r6, r0
 800ed66:	d1d6      	bne.n	800ed16 <_svfiprintf_r+0x176>
 800ed68:	89ab      	ldrh	r3, [r5, #12]
 800ed6a:	065b      	lsls	r3, r3, #25
 800ed6c:	f53f af2c 	bmi.w	800ebc8 <_svfiprintf_r+0x28>
 800ed70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed72:	b01d      	add	sp, #116	; 0x74
 800ed74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed78:	ab03      	add	r3, sp, #12
 800ed7a:	9300      	str	r3, [sp, #0]
 800ed7c:	462a      	mov	r2, r5
 800ed7e:	4b06      	ldr	r3, [pc, #24]	; (800ed98 <_svfiprintf_r+0x1f8>)
 800ed80:	a904      	add	r1, sp, #16
 800ed82:	4638      	mov	r0, r7
 800ed84:	f7fc fcde 	bl	800b744 <_printf_i>
 800ed88:	e7eb      	b.n	800ed62 <_svfiprintf_r+0x1c2>
 800ed8a:	bf00      	nop
 800ed8c:	08010a94 	.word	0x08010a94
 800ed90:	08010a9e 	.word	0x08010a9e
 800ed94:	0800b1fd 	.word	0x0800b1fd
 800ed98:	0800eaeb 	.word	0x0800eaeb
 800ed9c:	08010a9a 	.word	0x08010a9a

0800eda0 <__sfputc_r>:
 800eda0:	6893      	ldr	r3, [r2, #8]
 800eda2:	3b01      	subs	r3, #1
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	b410      	push	{r4}
 800eda8:	6093      	str	r3, [r2, #8]
 800edaa:	da08      	bge.n	800edbe <__sfputc_r+0x1e>
 800edac:	6994      	ldr	r4, [r2, #24]
 800edae:	42a3      	cmp	r3, r4
 800edb0:	db01      	blt.n	800edb6 <__sfputc_r+0x16>
 800edb2:	290a      	cmp	r1, #10
 800edb4:	d103      	bne.n	800edbe <__sfputc_r+0x1e>
 800edb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edba:	f000 b969 	b.w	800f090 <__swbuf_r>
 800edbe:	6813      	ldr	r3, [r2, #0]
 800edc0:	1c58      	adds	r0, r3, #1
 800edc2:	6010      	str	r0, [r2, #0]
 800edc4:	7019      	strb	r1, [r3, #0]
 800edc6:	4608      	mov	r0, r1
 800edc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edcc:	4770      	bx	lr

0800edce <__sfputs_r>:
 800edce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edd0:	4606      	mov	r6, r0
 800edd2:	460f      	mov	r7, r1
 800edd4:	4614      	mov	r4, r2
 800edd6:	18d5      	adds	r5, r2, r3
 800edd8:	42ac      	cmp	r4, r5
 800edda:	d101      	bne.n	800ede0 <__sfputs_r+0x12>
 800eddc:	2000      	movs	r0, #0
 800edde:	e007      	b.n	800edf0 <__sfputs_r+0x22>
 800ede0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ede4:	463a      	mov	r2, r7
 800ede6:	4630      	mov	r0, r6
 800ede8:	f7ff ffda 	bl	800eda0 <__sfputc_r>
 800edec:	1c43      	adds	r3, r0, #1
 800edee:	d1f3      	bne.n	800edd8 <__sfputs_r+0xa>
 800edf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800edf4 <_vfiprintf_r>:
 800edf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edf8:	460d      	mov	r5, r1
 800edfa:	b09d      	sub	sp, #116	; 0x74
 800edfc:	4614      	mov	r4, r2
 800edfe:	4698      	mov	r8, r3
 800ee00:	4606      	mov	r6, r0
 800ee02:	b118      	cbz	r0, 800ee0c <_vfiprintf_r+0x18>
 800ee04:	6983      	ldr	r3, [r0, #24]
 800ee06:	b90b      	cbnz	r3, 800ee0c <_vfiprintf_r+0x18>
 800ee08:	f000 fb32 	bl	800f470 <__sinit>
 800ee0c:	4b89      	ldr	r3, [pc, #548]	; (800f034 <_vfiprintf_r+0x240>)
 800ee0e:	429d      	cmp	r5, r3
 800ee10:	d11b      	bne.n	800ee4a <_vfiprintf_r+0x56>
 800ee12:	6875      	ldr	r5, [r6, #4]
 800ee14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee16:	07d9      	lsls	r1, r3, #31
 800ee18:	d405      	bmi.n	800ee26 <_vfiprintf_r+0x32>
 800ee1a:	89ab      	ldrh	r3, [r5, #12]
 800ee1c:	059a      	lsls	r2, r3, #22
 800ee1e:	d402      	bmi.n	800ee26 <_vfiprintf_r+0x32>
 800ee20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee22:	f000 fbc3 	bl	800f5ac <__retarget_lock_acquire_recursive>
 800ee26:	89ab      	ldrh	r3, [r5, #12]
 800ee28:	071b      	lsls	r3, r3, #28
 800ee2a:	d501      	bpl.n	800ee30 <_vfiprintf_r+0x3c>
 800ee2c:	692b      	ldr	r3, [r5, #16]
 800ee2e:	b9eb      	cbnz	r3, 800ee6c <_vfiprintf_r+0x78>
 800ee30:	4629      	mov	r1, r5
 800ee32:	4630      	mov	r0, r6
 800ee34:	f000 f98c 	bl	800f150 <__swsetup_r>
 800ee38:	b1c0      	cbz	r0, 800ee6c <_vfiprintf_r+0x78>
 800ee3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee3c:	07dc      	lsls	r4, r3, #31
 800ee3e:	d50e      	bpl.n	800ee5e <_vfiprintf_r+0x6a>
 800ee40:	f04f 30ff 	mov.w	r0, #4294967295
 800ee44:	b01d      	add	sp, #116	; 0x74
 800ee46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee4a:	4b7b      	ldr	r3, [pc, #492]	; (800f038 <_vfiprintf_r+0x244>)
 800ee4c:	429d      	cmp	r5, r3
 800ee4e:	d101      	bne.n	800ee54 <_vfiprintf_r+0x60>
 800ee50:	68b5      	ldr	r5, [r6, #8]
 800ee52:	e7df      	b.n	800ee14 <_vfiprintf_r+0x20>
 800ee54:	4b79      	ldr	r3, [pc, #484]	; (800f03c <_vfiprintf_r+0x248>)
 800ee56:	429d      	cmp	r5, r3
 800ee58:	bf08      	it	eq
 800ee5a:	68f5      	ldreq	r5, [r6, #12]
 800ee5c:	e7da      	b.n	800ee14 <_vfiprintf_r+0x20>
 800ee5e:	89ab      	ldrh	r3, [r5, #12]
 800ee60:	0598      	lsls	r0, r3, #22
 800ee62:	d4ed      	bmi.n	800ee40 <_vfiprintf_r+0x4c>
 800ee64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee66:	f000 fba2 	bl	800f5ae <__retarget_lock_release_recursive>
 800ee6a:	e7e9      	b.n	800ee40 <_vfiprintf_r+0x4c>
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ee70:	2320      	movs	r3, #32
 800ee72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee76:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee7a:	2330      	movs	r3, #48	; 0x30
 800ee7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f040 <_vfiprintf_r+0x24c>
 800ee80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee84:	f04f 0901 	mov.w	r9, #1
 800ee88:	4623      	mov	r3, r4
 800ee8a:	469a      	mov	sl, r3
 800ee8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee90:	b10a      	cbz	r2, 800ee96 <_vfiprintf_r+0xa2>
 800ee92:	2a25      	cmp	r2, #37	; 0x25
 800ee94:	d1f9      	bne.n	800ee8a <_vfiprintf_r+0x96>
 800ee96:	ebba 0b04 	subs.w	fp, sl, r4
 800ee9a:	d00b      	beq.n	800eeb4 <_vfiprintf_r+0xc0>
 800ee9c:	465b      	mov	r3, fp
 800ee9e:	4622      	mov	r2, r4
 800eea0:	4629      	mov	r1, r5
 800eea2:	4630      	mov	r0, r6
 800eea4:	f7ff ff93 	bl	800edce <__sfputs_r>
 800eea8:	3001      	adds	r0, #1
 800eeaa:	f000 80aa 	beq.w	800f002 <_vfiprintf_r+0x20e>
 800eeae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eeb0:	445a      	add	r2, fp
 800eeb2:	9209      	str	r2, [sp, #36]	; 0x24
 800eeb4:	f89a 3000 	ldrb.w	r3, [sl]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	f000 80a2 	beq.w	800f002 <_vfiprintf_r+0x20e>
 800eebe:	2300      	movs	r3, #0
 800eec0:	f04f 32ff 	mov.w	r2, #4294967295
 800eec4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eec8:	f10a 0a01 	add.w	sl, sl, #1
 800eecc:	9304      	str	r3, [sp, #16]
 800eece:	9307      	str	r3, [sp, #28]
 800eed0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eed4:	931a      	str	r3, [sp, #104]	; 0x68
 800eed6:	4654      	mov	r4, sl
 800eed8:	2205      	movs	r2, #5
 800eeda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eede:	4858      	ldr	r0, [pc, #352]	; (800f040 <_vfiprintf_r+0x24c>)
 800eee0:	f7f1 f9a6 	bl	8000230 <memchr>
 800eee4:	9a04      	ldr	r2, [sp, #16]
 800eee6:	b9d8      	cbnz	r0, 800ef20 <_vfiprintf_r+0x12c>
 800eee8:	06d1      	lsls	r1, r2, #27
 800eeea:	bf44      	itt	mi
 800eeec:	2320      	movmi	r3, #32
 800eeee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eef2:	0713      	lsls	r3, r2, #28
 800eef4:	bf44      	itt	mi
 800eef6:	232b      	movmi	r3, #43	; 0x2b
 800eef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eefc:	f89a 3000 	ldrb.w	r3, [sl]
 800ef00:	2b2a      	cmp	r3, #42	; 0x2a
 800ef02:	d015      	beq.n	800ef30 <_vfiprintf_r+0x13c>
 800ef04:	9a07      	ldr	r2, [sp, #28]
 800ef06:	4654      	mov	r4, sl
 800ef08:	2000      	movs	r0, #0
 800ef0a:	f04f 0c0a 	mov.w	ip, #10
 800ef0e:	4621      	mov	r1, r4
 800ef10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef14:	3b30      	subs	r3, #48	; 0x30
 800ef16:	2b09      	cmp	r3, #9
 800ef18:	d94e      	bls.n	800efb8 <_vfiprintf_r+0x1c4>
 800ef1a:	b1b0      	cbz	r0, 800ef4a <_vfiprintf_r+0x156>
 800ef1c:	9207      	str	r2, [sp, #28]
 800ef1e:	e014      	b.n	800ef4a <_vfiprintf_r+0x156>
 800ef20:	eba0 0308 	sub.w	r3, r0, r8
 800ef24:	fa09 f303 	lsl.w	r3, r9, r3
 800ef28:	4313      	orrs	r3, r2
 800ef2a:	9304      	str	r3, [sp, #16]
 800ef2c:	46a2      	mov	sl, r4
 800ef2e:	e7d2      	b.n	800eed6 <_vfiprintf_r+0xe2>
 800ef30:	9b03      	ldr	r3, [sp, #12]
 800ef32:	1d19      	adds	r1, r3, #4
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	9103      	str	r1, [sp, #12]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	bfbb      	ittet	lt
 800ef3c:	425b      	neglt	r3, r3
 800ef3e:	f042 0202 	orrlt.w	r2, r2, #2
 800ef42:	9307      	strge	r3, [sp, #28]
 800ef44:	9307      	strlt	r3, [sp, #28]
 800ef46:	bfb8      	it	lt
 800ef48:	9204      	strlt	r2, [sp, #16]
 800ef4a:	7823      	ldrb	r3, [r4, #0]
 800ef4c:	2b2e      	cmp	r3, #46	; 0x2e
 800ef4e:	d10c      	bne.n	800ef6a <_vfiprintf_r+0x176>
 800ef50:	7863      	ldrb	r3, [r4, #1]
 800ef52:	2b2a      	cmp	r3, #42	; 0x2a
 800ef54:	d135      	bne.n	800efc2 <_vfiprintf_r+0x1ce>
 800ef56:	9b03      	ldr	r3, [sp, #12]
 800ef58:	1d1a      	adds	r2, r3, #4
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	9203      	str	r2, [sp, #12]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	bfb8      	it	lt
 800ef62:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef66:	3402      	adds	r4, #2
 800ef68:	9305      	str	r3, [sp, #20]
 800ef6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f050 <_vfiprintf_r+0x25c>
 800ef6e:	7821      	ldrb	r1, [r4, #0]
 800ef70:	2203      	movs	r2, #3
 800ef72:	4650      	mov	r0, sl
 800ef74:	f7f1 f95c 	bl	8000230 <memchr>
 800ef78:	b140      	cbz	r0, 800ef8c <_vfiprintf_r+0x198>
 800ef7a:	2340      	movs	r3, #64	; 0x40
 800ef7c:	eba0 000a 	sub.w	r0, r0, sl
 800ef80:	fa03 f000 	lsl.w	r0, r3, r0
 800ef84:	9b04      	ldr	r3, [sp, #16]
 800ef86:	4303      	orrs	r3, r0
 800ef88:	3401      	adds	r4, #1
 800ef8a:	9304      	str	r3, [sp, #16]
 800ef8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef90:	482c      	ldr	r0, [pc, #176]	; (800f044 <_vfiprintf_r+0x250>)
 800ef92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef96:	2206      	movs	r2, #6
 800ef98:	f7f1 f94a 	bl	8000230 <memchr>
 800ef9c:	2800      	cmp	r0, #0
 800ef9e:	d03f      	beq.n	800f020 <_vfiprintf_r+0x22c>
 800efa0:	4b29      	ldr	r3, [pc, #164]	; (800f048 <_vfiprintf_r+0x254>)
 800efa2:	bb1b      	cbnz	r3, 800efec <_vfiprintf_r+0x1f8>
 800efa4:	9b03      	ldr	r3, [sp, #12]
 800efa6:	3307      	adds	r3, #7
 800efa8:	f023 0307 	bic.w	r3, r3, #7
 800efac:	3308      	adds	r3, #8
 800efae:	9303      	str	r3, [sp, #12]
 800efb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efb2:	443b      	add	r3, r7
 800efb4:	9309      	str	r3, [sp, #36]	; 0x24
 800efb6:	e767      	b.n	800ee88 <_vfiprintf_r+0x94>
 800efb8:	fb0c 3202 	mla	r2, ip, r2, r3
 800efbc:	460c      	mov	r4, r1
 800efbe:	2001      	movs	r0, #1
 800efc0:	e7a5      	b.n	800ef0e <_vfiprintf_r+0x11a>
 800efc2:	2300      	movs	r3, #0
 800efc4:	3401      	adds	r4, #1
 800efc6:	9305      	str	r3, [sp, #20]
 800efc8:	4619      	mov	r1, r3
 800efca:	f04f 0c0a 	mov.w	ip, #10
 800efce:	4620      	mov	r0, r4
 800efd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efd4:	3a30      	subs	r2, #48	; 0x30
 800efd6:	2a09      	cmp	r2, #9
 800efd8:	d903      	bls.n	800efe2 <_vfiprintf_r+0x1ee>
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d0c5      	beq.n	800ef6a <_vfiprintf_r+0x176>
 800efde:	9105      	str	r1, [sp, #20]
 800efe0:	e7c3      	b.n	800ef6a <_vfiprintf_r+0x176>
 800efe2:	fb0c 2101 	mla	r1, ip, r1, r2
 800efe6:	4604      	mov	r4, r0
 800efe8:	2301      	movs	r3, #1
 800efea:	e7f0      	b.n	800efce <_vfiprintf_r+0x1da>
 800efec:	ab03      	add	r3, sp, #12
 800efee:	9300      	str	r3, [sp, #0]
 800eff0:	462a      	mov	r2, r5
 800eff2:	4b16      	ldr	r3, [pc, #88]	; (800f04c <_vfiprintf_r+0x258>)
 800eff4:	a904      	add	r1, sp, #16
 800eff6:	4630      	mov	r0, r6
 800eff8:	f7fc f900 	bl	800b1fc <_printf_float>
 800effc:	4607      	mov	r7, r0
 800effe:	1c78      	adds	r0, r7, #1
 800f000:	d1d6      	bne.n	800efb0 <_vfiprintf_r+0x1bc>
 800f002:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f004:	07d9      	lsls	r1, r3, #31
 800f006:	d405      	bmi.n	800f014 <_vfiprintf_r+0x220>
 800f008:	89ab      	ldrh	r3, [r5, #12]
 800f00a:	059a      	lsls	r2, r3, #22
 800f00c:	d402      	bmi.n	800f014 <_vfiprintf_r+0x220>
 800f00e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f010:	f000 facd 	bl	800f5ae <__retarget_lock_release_recursive>
 800f014:	89ab      	ldrh	r3, [r5, #12]
 800f016:	065b      	lsls	r3, r3, #25
 800f018:	f53f af12 	bmi.w	800ee40 <_vfiprintf_r+0x4c>
 800f01c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f01e:	e711      	b.n	800ee44 <_vfiprintf_r+0x50>
 800f020:	ab03      	add	r3, sp, #12
 800f022:	9300      	str	r3, [sp, #0]
 800f024:	462a      	mov	r2, r5
 800f026:	4b09      	ldr	r3, [pc, #36]	; (800f04c <_vfiprintf_r+0x258>)
 800f028:	a904      	add	r1, sp, #16
 800f02a:	4630      	mov	r0, r6
 800f02c:	f7fc fb8a 	bl	800b744 <_printf_i>
 800f030:	e7e4      	b.n	800effc <_vfiprintf_r+0x208>
 800f032:	bf00      	nop
 800f034:	08010ac8 	.word	0x08010ac8
 800f038:	08010ae8 	.word	0x08010ae8
 800f03c:	08010aa8 	.word	0x08010aa8
 800f040:	08010a94 	.word	0x08010a94
 800f044:	08010a9e 	.word	0x08010a9e
 800f048:	0800b1fd 	.word	0x0800b1fd
 800f04c:	0800edcf 	.word	0x0800edcf
 800f050:	08010a9a 	.word	0x08010a9a
 800f054:	00000000 	.word	0x00000000

0800f058 <nan>:
 800f058:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f060 <nan+0x8>
 800f05c:	4770      	bx	lr
 800f05e:	bf00      	nop
 800f060:	00000000 	.word	0x00000000
 800f064:	7ff80000 	.word	0x7ff80000

0800f068 <strncmp>:
 800f068:	b510      	push	{r4, lr}
 800f06a:	b17a      	cbz	r2, 800f08c <strncmp+0x24>
 800f06c:	4603      	mov	r3, r0
 800f06e:	3901      	subs	r1, #1
 800f070:	1884      	adds	r4, r0, r2
 800f072:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f076:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f07a:	4290      	cmp	r0, r2
 800f07c:	d101      	bne.n	800f082 <strncmp+0x1a>
 800f07e:	42a3      	cmp	r3, r4
 800f080:	d101      	bne.n	800f086 <strncmp+0x1e>
 800f082:	1a80      	subs	r0, r0, r2
 800f084:	bd10      	pop	{r4, pc}
 800f086:	2800      	cmp	r0, #0
 800f088:	d1f3      	bne.n	800f072 <strncmp+0xa>
 800f08a:	e7fa      	b.n	800f082 <strncmp+0x1a>
 800f08c:	4610      	mov	r0, r2
 800f08e:	e7f9      	b.n	800f084 <strncmp+0x1c>

0800f090 <__swbuf_r>:
 800f090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f092:	460e      	mov	r6, r1
 800f094:	4614      	mov	r4, r2
 800f096:	4605      	mov	r5, r0
 800f098:	b118      	cbz	r0, 800f0a2 <__swbuf_r+0x12>
 800f09a:	6983      	ldr	r3, [r0, #24]
 800f09c:	b90b      	cbnz	r3, 800f0a2 <__swbuf_r+0x12>
 800f09e:	f000 f9e7 	bl	800f470 <__sinit>
 800f0a2:	4b21      	ldr	r3, [pc, #132]	; (800f128 <__swbuf_r+0x98>)
 800f0a4:	429c      	cmp	r4, r3
 800f0a6:	d12b      	bne.n	800f100 <__swbuf_r+0x70>
 800f0a8:	686c      	ldr	r4, [r5, #4]
 800f0aa:	69a3      	ldr	r3, [r4, #24]
 800f0ac:	60a3      	str	r3, [r4, #8]
 800f0ae:	89a3      	ldrh	r3, [r4, #12]
 800f0b0:	071a      	lsls	r2, r3, #28
 800f0b2:	d52f      	bpl.n	800f114 <__swbuf_r+0x84>
 800f0b4:	6923      	ldr	r3, [r4, #16]
 800f0b6:	b36b      	cbz	r3, 800f114 <__swbuf_r+0x84>
 800f0b8:	6923      	ldr	r3, [r4, #16]
 800f0ba:	6820      	ldr	r0, [r4, #0]
 800f0bc:	1ac0      	subs	r0, r0, r3
 800f0be:	6963      	ldr	r3, [r4, #20]
 800f0c0:	b2f6      	uxtb	r6, r6
 800f0c2:	4283      	cmp	r3, r0
 800f0c4:	4637      	mov	r7, r6
 800f0c6:	dc04      	bgt.n	800f0d2 <__swbuf_r+0x42>
 800f0c8:	4621      	mov	r1, r4
 800f0ca:	4628      	mov	r0, r5
 800f0cc:	f000 f93c 	bl	800f348 <_fflush_r>
 800f0d0:	bb30      	cbnz	r0, 800f120 <__swbuf_r+0x90>
 800f0d2:	68a3      	ldr	r3, [r4, #8]
 800f0d4:	3b01      	subs	r3, #1
 800f0d6:	60a3      	str	r3, [r4, #8]
 800f0d8:	6823      	ldr	r3, [r4, #0]
 800f0da:	1c5a      	adds	r2, r3, #1
 800f0dc:	6022      	str	r2, [r4, #0]
 800f0de:	701e      	strb	r6, [r3, #0]
 800f0e0:	6963      	ldr	r3, [r4, #20]
 800f0e2:	3001      	adds	r0, #1
 800f0e4:	4283      	cmp	r3, r0
 800f0e6:	d004      	beq.n	800f0f2 <__swbuf_r+0x62>
 800f0e8:	89a3      	ldrh	r3, [r4, #12]
 800f0ea:	07db      	lsls	r3, r3, #31
 800f0ec:	d506      	bpl.n	800f0fc <__swbuf_r+0x6c>
 800f0ee:	2e0a      	cmp	r6, #10
 800f0f0:	d104      	bne.n	800f0fc <__swbuf_r+0x6c>
 800f0f2:	4621      	mov	r1, r4
 800f0f4:	4628      	mov	r0, r5
 800f0f6:	f000 f927 	bl	800f348 <_fflush_r>
 800f0fa:	b988      	cbnz	r0, 800f120 <__swbuf_r+0x90>
 800f0fc:	4638      	mov	r0, r7
 800f0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f100:	4b0a      	ldr	r3, [pc, #40]	; (800f12c <__swbuf_r+0x9c>)
 800f102:	429c      	cmp	r4, r3
 800f104:	d101      	bne.n	800f10a <__swbuf_r+0x7a>
 800f106:	68ac      	ldr	r4, [r5, #8]
 800f108:	e7cf      	b.n	800f0aa <__swbuf_r+0x1a>
 800f10a:	4b09      	ldr	r3, [pc, #36]	; (800f130 <__swbuf_r+0xa0>)
 800f10c:	429c      	cmp	r4, r3
 800f10e:	bf08      	it	eq
 800f110:	68ec      	ldreq	r4, [r5, #12]
 800f112:	e7ca      	b.n	800f0aa <__swbuf_r+0x1a>
 800f114:	4621      	mov	r1, r4
 800f116:	4628      	mov	r0, r5
 800f118:	f000 f81a 	bl	800f150 <__swsetup_r>
 800f11c:	2800      	cmp	r0, #0
 800f11e:	d0cb      	beq.n	800f0b8 <__swbuf_r+0x28>
 800f120:	f04f 37ff 	mov.w	r7, #4294967295
 800f124:	e7ea      	b.n	800f0fc <__swbuf_r+0x6c>
 800f126:	bf00      	nop
 800f128:	08010ac8 	.word	0x08010ac8
 800f12c:	08010ae8 	.word	0x08010ae8
 800f130:	08010aa8 	.word	0x08010aa8

0800f134 <__ascii_wctomb>:
 800f134:	b149      	cbz	r1, 800f14a <__ascii_wctomb+0x16>
 800f136:	2aff      	cmp	r2, #255	; 0xff
 800f138:	bf85      	ittet	hi
 800f13a:	238a      	movhi	r3, #138	; 0x8a
 800f13c:	6003      	strhi	r3, [r0, #0]
 800f13e:	700a      	strbls	r2, [r1, #0]
 800f140:	f04f 30ff 	movhi.w	r0, #4294967295
 800f144:	bf98      	it	ls
 800f146:	2001      	movls	r0, #1
 800f148:	4770      	bx	lr
 800f14a:	4608      	mov	r0, r1
 800f14c:	4770      	bx	lr
	...

0800f150 <__swsetup_r>:
 800f150:	4b32      	ldr	r3, [pc, #200]	; (800f21c <__swsetup_r+0xcc>)
 800f152:	b570      	push	{r4, r5, r6, lr}
 800f154:	681d      	ldr	r5, [r3, #0]
 800f156:	4606      	mov	r6, r0
 800f158:	460c      	mov	r4, r1
 800f15a:	b125      	cbz	r5, 800f166 <__swsetup_r+0x16>
 800f15c:	69ab      	ldr	r3, [r5, #24]
 800f15e:	b913      	cbnz	r3, 800f166 <__swsetup_r+0x16>
 800f160:	4628      	mov	r0, r5
 800f162:	f000 f985 	bl	800f470 <__sinit>
 800f166:	4b2e      	ldr	r3, [pc, #184]	; (800f220 <__swsetup_r+0xd0>)
 800f168:	429c      	cmp	r4, r3
 800f16a:	d10f      	bne.n	800f18c <__swsetup_r+0x3c>
 800f16c:	686c      	ldr	r4, [r5, #4]
 800f16e:	89a3      	ldrh	r3, [r4, #12]
 800f170:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f174:	0719      	lsls	r1, r3, #28
 800f176:	d42c      	bmi.n	800f1d2 <__swsetup_r+0x82>
 800f178:	06dd      	lsls	r5, r3, #27
 800f17a:	d411      	bmi.n	800f1a0 <__swsetup_r+0x50>
 800f17c:	2309      	movs	r3, #9
 800f17e:	6033      	str	r3, [r6, #0]
 800f180:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f184:	81a3      	strh	r3, [r4, #12]
 800f186:	f04f 30ff 	mov.w	r0, #4294967295
 800f18a:	e03e      	b.n	800f20a <__swsetup_r+0xba>
 800f18c:	4b25      	ldr	r3, [pc, #148]	; (800f224 <__swsetup_r+0xd4>)
 800f18e:	429c      	cmp	r4, r3
 800f190:	d101      	bne.n	800f196 <__swsetup_r+0x46>
 800f192:	68ac      	ldr	r4, [r5, #8]
 800f194:	e7eb      	b.n	800f16e <__swsetup_r+0x1e>
 800f196:	4b24      	ldr	r3, [pc, #144]	; (800f228 <__swsetup_r+0xd8>)
 800f198:	429c      	cmp	r4, r3
 800f19a:	bf08      	it	eq
 800f19c:	68ec      	ldreq	r4, [r5, #12]
 800f19e:	e7e6      	b.n	800f16e <__swsetup_r+0x1e>
 800f1a0:	0758      	lsls	r0, r3, #29
 800f1a2:	d512      	bpl.n	800f1ca <__swsetup_r+0x7a>
 800f1a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1a6:	b141      	cbz	r1, 800f1ba <__swsetup_r+0x6a>
 800f1a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1ac:	4299      	cmp	r1, r3
 800f1ae:	d002      	beq.n	800f1b6 <__swsetup_r+0x66>
 800f1b0:	4630      	mov	r0, r6
 800f1b2:	f7fb fea3 	bl	800aefc <_free_r>
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	6363      	str	r3, [r4, #52]	; 0x34
 800f1ba:	89a3      	ldrh	r3, [r4, #12]
 800f1bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f1c0:	81a3      	strh	r3, [r4, #12]
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	6063      	str	r3, [r4, #4]
 800f1c6:	6923      	ldr	r3, [r4, #16]
 800f1c8:	6023      	str	r3, [r4, #0]
 800f1ca:	89a3      	ldrh	r3, [r4, #12]
 800f1cc:	f043 0308 	orr.w	r3, r3, #8
 800f1d0:	81a3      	strh	r3, [r4, #12]
 800f1d2:	6923      	ldr	r3, [r4, #16]
 800f1d4:	b94b      	cbnz	r3, 800f1ea <__swsetup_r+0x9a>
 800f1d6:	89a3      	ldrh	r3, [r4, #12]
 800f1d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f1dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f1e0:	d003      	beq.n	800f1ea <__swsetup_r+0x9a>
 800f1e2:	4621      	mov	r1, r4
 800f1e4:	4630      	mov	r0, r6
 800f1e6:	f000 fa09 	bl	800f5fc <__smakebuf_r>
 800f1ea:	89a0      	ldrh	r0, [r4, #12]
 800f1ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f1f0:	f010 0301 	ands.w	r3, r0, #1
 800f1f4:	d00a      	beq.n	800f20c <__swsetup_r+0xbc>
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	60a3      	str	r3, [r4, #8]
 800f1fa:	6963      	ldr	r3, [r4, #20]
 800f1fc:	425b      	negs	r3, r3
 800f1fe:	61a3      	str	r3, [r4, #24]
 800f200:	6923      	ldr	r3, [r4, #16]
 800f202:	b943      	cbnz	r3, 800f216 <__swsetup_r+0xc6>
 800f204:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f208:	d1ba      	bne.n	800f180 <__swsetup_r+0x30>
 800f20a:	bd70      	pop	{r4, r5, r6, pc}
 800f20c:	0781      	lsls	r1, r0, #30
 800f20e:	bf58      	it	pl
 800f210:	6963      	ldrpl	r3, [r4, #20]
 800f212:	60a3      	str	r3, [r4, #8]
 800f214:	e7f4      	b.n	800f200 <__swsetup_r+0xb0>
 800f216:	2000      	movs	r0, #0
 800f218:	e7f7      	b.n	800f20a <__swsetup_r+0xba>
 800f21a:	bf00      	nop
 800f21c:	200001c8 	.word	0x200001c8
 800f220:	08010ac8 	.word	0x08010ac8
 800f224:	08010ae8 	.word	0x08010ae8
 800f228:	08010aa8 	.word	0x08010aa8

0800f22c <abort>:
 800f22c:	b508      	push	{r3, lr}
 800f22e:	2006      	movs	r0, #6
 800f230:	f000 fa96 	bl	800f760 <raise>
 800f234:	2001      	movs	r0, #1
 800f236:	f7f3 fa47 	bl	80026c8 <_exit>
	...

0800f23c <__sflush_r>:
 800f23c:	898a      	ldrh	r2, [r1, #12]
 800f23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f242:	4605      	mov	r5, r0
 800f244:	0710      	lsls	r0, r2, #28
 800f246:	460c      	mov	r4, r1
 800f248:	d458      	bmi.n	800f2fc <__sflush_r+0xc0>
 800f24a:	684b      	ldr	r3, [r1, #4]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	dc05      	bgt.n	800f25c <__sflush_r+0x20>
 800f250:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f252:	2b00      	cmp	r3, #0
 800f254:	dc02      	bgt.n	800f25c <__sflush_r+0x20>
 800f256:	2000      	movs	r0, #0
 800f258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f25c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f25e:	2e00      	cmp	r6, #0
 800f260:	d0f9      	beq.n	800f256 <__sflush_r+0x1a>
 800f262:	2300      	movs	r3, #0
 800f264:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f268:	682f      	ldr	r7, [r5, #0]
 800f26a:	602b      	str	r3, [r5, #0]
 800f26c:	d032      	beq.n	800f2d4 <__sflush_r+0x98>
 800f26e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f270:	89a3      	ldrh	r3, [r4, #12]
 800f272:	075a      	lsls	r2, r3, #29
 800f274:	d505      	bpl.n	800f282 <__sflush_r+0x46>
 800f276:	6863      	ldr	r3, [r4, #4]
 800f278:	1ac0      	subs	r0, r0, r3
 800f27a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f27c:	b10b      	cbz	r3, 800f282 <__sflush_r+0x46>
 800f27e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f280:	1ac0      	subs	r0, r0, r3
 800f282:	2300      	movs	r3, #0
 800f284:	4602      	mov	r2, r0
 800f286:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f288:	6a21      	ldr	r1, [r4, #32]
 800f28a:	4628      	mov	r0, r5
 800f28c:	47b0      	blx	r6
 800f28e:	1c43      	adds	r3, r0, #1
 800f290:	89a3      	ldrh	r3, [r4, #12]
 800f292:	d106      	bne.n	800f2a2 <__sflush_r+0x66>
 800f294:	6829      	ldr	r1, [r5, #0]
 800f296:	291d      	cmp	r1, #29
 800f298:	d82c      	bhi.n	800f2f4 <__sflush_r+0xb8>
 800f29a:	4a2a      	ldr	r2, [pc, #168]	; (800f344 <__sflush_r+0x108>)
 800f29c:	40ca      	lsrs	r2, r1
 800f29e:	07d6      	lsls	r6, r2, #31
 800f2a0:	d528      	bpl.n	800f2f4 <__sflush_r+0xb8>
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	6062      	str	r2, [r4, #4]
 800f2a6:	04d9      	lsls	r1, r3, #19
 800f2a8:	6922      	ldr	r2, [r4, #16]
 800f2aa:	6022      	str	r2, [r4, #0]
 800f2ac:	d504      	bpl.n	800f2b8 <__sflush_r+0x7c>
 800f2ae:	1c42      	adds	r2, r0, #1
 800f2b0:	d101      	bne.n	800f2b6 <__sflush_r+0x7a>
 800f2b2:	682b      	ldr	r3, [r5, #0]
 800f2b4:	b903      	cbnz	r3, 800f2b8 <__sflush_r+0x7c>
 800f2b6:	6560      	str	r0, [r4, #84]	; 0x54
 800f2b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f2ba:	602f      	str	r7, [r5, #0]
 800f2bc:	2900      	cmp	r1, #0
 800f2be:	d0ca      	beq.n	800f256 <__sflush_r+0x1a>
 800f2c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f2c4:	4299      	cmp	r1, r3
 800f2c6:	d002      	beq.n	800f2ce <__sflush_r+0x92>
 800f2c8:	4628      	mov	r0, r5
 800f2ca:	f7fb fe17 	bl	800aefc <_free_r>
 800f2ce:	2000      	movs	r0, #0
 800f2d0:	6360      	str	r0, [r4, #52]	; 0x34
 800f2d2:	e7c1      	b.n	800f258 <__sflush_r+0x1c>
 800f2d4:	6a21      	ldr	r1, [r4, #32]
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	4628      	mov	r0, r5
 800f2da:	47b0      	blx	r6
 800f2dc:	1c41      	adds	r1, r0, #1
 800f2de:	d1c7      	bne.n	800f270 <__sflush_r+0x34>
 800f2e0:	682b      	ldr	r3, [r5, #0]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d0c4      	beq.n	800f270 <__sflush_r+0x34>
 800f2e6:	2b1d      	cmp	r3, #29
 800f2e8:	d001      	beq.n	800f2ee <__sflush_r+0xb2>
 800f2ea:	2b16      	cmp	r3, #22
 800f2ec:	d101      	bne.n	800f2f2 <__sflush_r+0xb6>
 800f2ee:	602f      	str	r7, [r5, #0]
 800f2f0:	e7b1      	b.n	800f256 <__sflush_r+0x1a>
 800f2f2:	89a3      	ldrh	r3, [r4, #12]
 800f2f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2f8:	81a3      	strh	r3, [r4, #12]
 800f2fa:	e7ad      	b.n	800f258 <__sflush_r+0x1c>
 800f2fc:	690f      	ldr	r7, [r1, #16]
 800f2fe:	2f00      	cmp	r7, #0
 800f300:	d0a9      	beq.n	800f256 <__sflush_r+0x1a>
 800f302:	0793      	lsls	r3, r2, #30
 800f304:	680e      	ldr	r6, [r1, #0]
 800f306:	bf08      	it	eq
 800f308:	694b      	ldreq	r3, [r1, #20]
 800f30a:	600f      	str	r7, [r1, #0]
 800f30c:	bf18      	it	ne
 800f30e:	2300      	movne	r3, #0
 800f310:	eba6 0807 	sub.w	r8, r6, r7
 800f314:	608b      	str	r3, [r1, #8]
 800f316:	f1b8 0f00 	cmp.w	r8, #0
 800f31a:	dd9c      	ble.n	800f256 <__sflush_r+0x1a>
 800f31c:	6a21      	ldr	r1, [r4, #32]
 800f31e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f320:	4643      	mov	r3, r8
 800f322:	463a      	mov	r2, r7
 800f324:	4628      	mov	r0, r5
 800f326:	47b0      	blx	r6
 800f328:	2800      	cmp	r0, #0
 800f32a:	dc06      	bgt.n	800f33a <__sflush_r+0xfe>
 800f32c:	89a3      	ldrh	r3, [r4, #12]
 800f32e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f332:	81a3      	strh	r3, [r4, #12]
 800f334:	f04f 30ff 	mov.w	r0, #4294967295
 800f338:	e78e      	b.n	800f258 <__sflush_r+0x1c>
 800f33a:	4407      	add	r7, r0
 800f33c:	eba8 0800 	sub.w	r8, r8, r0
 800f340:	e7e9      	b.n	800f316 <__sflush_r+0xda>
 800f342:	bf00      	nop
 800f344:	20400001 	.word	0x20400001

0800f348 <_fflush_r>:
 800f348:	b538      	push	{r3, r4, r5, lr}
 800f34a:	690b      	ldr	r3, [r1, #16]
 800f34c:	4605      	mov	r5, r0
 800f34e:	460c      	mov	r4, r1
 800f350:	b913      	cbnz	r3, 800f358 <_fflush_r+0x10>
 800f352:	2500      	movs	r5, #0
 800f354:	4628      	mov	r0, r5
 800f356:	bd38      	pop	{r3, r4, r5, pc}
 800f358:	b118      	cbz	r0, 800f362 <_fflush_r+0x1a>
 800f35a:	6983      	ldr	r3, [r0, #24]
 800f35c:	b90b      	cbnz	r3, 800f362 <_fflush_r+0x1a>
 800f35e:	f000 f887 	bl	800f470 <__sinit>
 800f362:	4b14      	ldr	r3, [pc, #80]	; (800f3b4 <_fflush_r+0x6c>)
 800f364:	429c      	cmp	r4, r3
 800f366:	d11b      	bne.n	800f3a0 <_fflush_r+0x58>
 800f368:	686c      	ldr	r4, [r5, #4]
 800f36a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d0ef      	beq.n	800f352 <_fflush_r+0xa>
 800f372:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f374:	07d0      	lsls	r0, r2, #31
 800f376:	d404      	bmi.n	800f382 <_fflush_r+0x3a>
 800f378:	0599      	lsls	r1, r3, #22
 800f37a:	d402      	bmi.n	800f382 <_fflush_r+0x3a>
 800f37c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f37e:	f000 f915 	bl	800f5ac <__retarget_lock_acquire_recursive>
 800f382:	4628      	mov	r0, r5
 800f384:	4621      	mov	r1, r4
 800f386:	f7ff ff59 	bl	800f23c <__sflush_r>
 800f38a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f38c:	07da      	lsls	r2, r3, #31
 800f38e:	4605      	mov	r5, r0
 800f390:	d4e0      	bmi.n	800f354 <_fflush_r+0xc>
 800f392:	89a3      	ldrh	r3, [r4, #12]
 800f394:	059b      	lsls	r3, r3, #22
 800f396:	d4dd      	bmi.n	800f354 <_fflush_r+0xc>
 800f398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f39a:	f000 f908 	bl	800f5ae <__retarget_lock_release_recursive>
 800f39e:	e7d9      	b.n	800f354 <_fflush_r+0xc>
 800f3a0:	4b05      	ldr	r3, [pc, #20]	; (800f3b8 <_fflush_r+0x70>)
 800f3a2:	429c      	cmp	r4, r3
 800f3a4:	d101      	bne.n	800f3aa <_fflush_r+0x62>
 800f3a6:	68ac      	ldr	r4, [r5, #8]
 800f3a8:	e7df      	b.n	800f36a <_fflush_r+0x22>
 800f3aa:	4b04      	ldr	r3, [pc, #16]	; (800f3bc <_fflush_r+0x74>)
 800f3ac:	429c      	cmp	r4, r3
 800f3ae:	bf08      	it	eq
 800f3b0:	68ec      	ldreq	r4, [r5, #12]
 800f3b2:	e7da      	b.n	800f36a <_fflush_r+0x22>
 800f3b4:	08010ac8 	.word	0x08010ac8
 800f3b8:	08010ae8 	.word	0x08010ae8
 800f3bc:	08010aa8 	.word	0x08010aa8

0800f3c0 <std>:
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	b510      	push	{r4, lr}
 800f3c4:	4604      	mov	r4, r0
 800f3c6:	e9c0 3300 	strd	r3, r3, [r0]
 800f3ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f3ce:	6083      	str	r3, [r0, #8]
 800f3d0:	8181      	strh	r1, [r0, #12]
 800f3d2:	6643      	str	r3, [r0, #100]	; 0x64
 800f3d4:	81c2      	strh	r2, [r0, #14]
 800f3d6:	6183      	str	r3, [r0, #24]
 800f3d8:	4619      	mov	r1, r3
 800f3da:	2208      	movs	r2, #8
 800f3dc:	305c      	adds	r0, #92	; 0x5c
 800f3de:	f7fb fd85 	bl	800aeec <memset>
 800f3e2:	4b05      	ldr	r3, [pc, #20]	; (800f3f8 <std+0x38>)
 800f3e4:	6263      	str	r3, [r4, #36]	; 0x24
 800f3e6:	4b05      	ldr	r3, [pc, #20]	; (800f3fc <std+0x3c>)
 800f3e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800f3ea:	4b05      	ldr	r3, [pc, #20]	; (800f400 <std+0x40>)
 800f3ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f3ee:	4b05      	ldr	r3, [pc, #20]	; (800f404 <std+0x44>)
 800f3f0:	6224      	str	r4, [r4, #32]
 800f3f2:	6323      	str	r3, [r4, #48]	; 0x30
 800f3f4:	bd10      	pop	{r4, pc}
 800f3f6:	bf00      	nop
 800f3f8:	0800f799 	.word	0x0800f799
 800f3fc:	0800f7bb 	.word	0x0800f7bb
 800f400:	0800f7f3 	.word	0x0800f7f3
 800f404:	0800f817 	.word	0x0800f817

0800f408 <_cleanup_r>:
 800f408:	4901      	ldr	r1, [pc, #4]	; (800f410 <_cleanup_r+0x8>)
 800f40a:	f000 b8af 	b.w	800f56c <_fwalk_reent>
 800f40e:	bf00      	nop
 800f410:	0800f349 	.word	0x0800f349

0800f414 <__sfmoreglue>:
 800f414:	b570      	push	{r4, r5, r6, lr}
 800f416:	2268      	movs	r2, #104	; 0x68
 800f418:	1e4d      	subs	r5, r1, #1
 800f41a:	4355      	muls	r5, r2
 800f41c:	460e      	mov	r6, r1
 800f41e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f422:	f7fb fdd7 	bl	800afd4 <_malloc_r>
 800f426:	4604      	mov	r4, r0
 800f428:	b140      	cbz	r0, 800f43c <__sfmoreglue+0x28>
 800f42a:	2100      	movs	r1, #0
 800f42c:	e9c0 1600 	strd	r1, r6, [r0]
 800f430:	300c      	adds	r0, #12
 800f432:	60a0      	str	r0, [r4, #8]
 800f434:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f438:	f7fb fd58 	bl	800aeec <memset>
 800f43c:	4620      	mov	r0, r4
 800f43e:	bd70      	pop	{r4, r5, r6, pc}

0800f440 <__sfp_lock_acquire>:
 800f440:	4801      	ldr	r0, [pc, #4]	; (800f448 <__sfp_lock_acquire+0x8>)
 800f442:	f000 b8b3 	b.w	800f5ac <__retarget_lock_acquire_recursive>
 800f446:	bf00      	nop
 800f448:	20005609 	.word	0x20005609

0800f44c <__sfp_lock_release>:
 800f44c:	4801      	ldr	r0, [pc, #4]	; (800f454 <__sfp_lock_release+0x8>)
 800f44e:	f000 b8ae 	b.w	800f5ae <__retarget_lock_release_recursive>
 800f452:	bf00      	nop
 800f454:	20005609 	.word	0x20005609

0800f458 <__sinit_lock_acquire>:
 800f458:	4801      	ldr	r0, [pc, #4]	; (800f460 <__sinit_lock_acquire+0x8>)
 800f45a:	f000 b8a7 	b.w	800f5ac <__retarget_lock_acquire_recursive>
 800f45e:	bf00      	nop
 800f460:	2000560a 	.word	0x2000560a

0800f464 <__sinit_lock_release>:
 800f464:	4801      	ldr	r0, [pc, #4]	; (800f46c <__sinit_lock_release+0x8>)
 800f466:	f000 b8a2 	b.w	800f5ae <__retarget_lock_release_recursive>
 800f46a:	bf00      	nop
 800f46c:	2000560a 	.word	0x2000560a

0800f470 <__sinit>:
 800f470:	b510      	push	{r4, lr}
 800f472:	4604      	mov	r4, r0
 800f474:	f7ff fff0 	bl	800f458 <__sinit_lock_acquire>
 800f478:	69a3      	ldr	r3, [r4, #24]
 800f47a:	b11b      	cbz	r3, 800f484 <__sinit+0x14>
 800f47c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f480:	f7ff bff0 	b.w	800f464 <__sinit_lock_release>
 800f484:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f488:	6523      	str	r3, [r4, #80]	; 0x50
 800f48a:	4b13      	ldr	r3, [pc, #76]	; (800f4d8 <__sinit+0x68>)
 800f48c:	4a13      	ldr	r2, [pc, #76]	; (800f4dc <__sinit+0x6c>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	62a2      	str	r2, [r4, #40]	; 0x28
 800f492:	42a3      	cmp	r3, r4
 800f494:	bf04      	itt	eq
 800f496:	2301      	moveq	r3, #1
 800f498:	61a3      	streq	r3, [r4, #24]
 800f49a:	4620      	mov	r0, r4
 800f49c:	f000 f820 	bl	800f4e0 <__sfp>
 800f4a0:	6060      	str	r0, [r4, #4]
 800f4a2:	4620      	mov	r0, r4
 800f4a4:	f000 f81c 	bl	800f4e0 <__sfp>
 800f4a8:	60a0      	str	r0, [r4, #8]
 800f4aa:	4620      	mov	r0, r4
 800f4ac:	f000 f818 	bl	800f4e0 <__sfp>
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	60e0      	str	r0, [r4, #12]
 800f4b4:	2104      	movs	r1, #4
 800f4b6:	6860      	ldr	r0, [r4, #4]
 800f4b8:	f7ff ff82 	bl	800f3c0 <std>
 800f4bc:	68a0      	ldr	r0, [r4, #8]
 800f4be:	2201      	movs	r2, #1
 800f4c0:	2109      	movs	r1, #9
 800f4c2:	f7ff ff7d 	bl	800f3c0 <std>
 800f4c6:	68e0      	ldr	r0, [r4, #12]
 800f4c8:	2202      	movs	r2, #2
 800f4ca:	2112      	movs	r1, #18
 800f4cc:	f7ff ff78 	bl	800f3c0 <std>
 800f4d0:	2301      	movs	r3, #1
 800f4d2:	61a3      	str	r3, [r4, #24]
 800f4d4:	e7d2      	b.n	800f47c <__sinit+0xc>
 800f4d6:	bf00      	nop
 800f4d8:	08010604 	.word	0x08010604
 800f4dc:	0800f409 	.word	0x0800f409

0800f4e0 <__sfp>:
 800f4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4e2:	4607      	mov	r7, r0
 800f4e4:	f7ff ffac 	bl	800f440 <__sfp_lock_acquire>
 800f4e8:	4b1e      	ldr	r3, [pc, #120]	; (800f564 <__sfp+0x84>)
 800f4ea:	681e      	ldr	r6, [r3, #0]
 800f4ec:	69b3      	ldr	r3, [r6, #24]
 800f4ee:	b913      	cbnz	r3, 800f4f6 <__sfp+0x16>
 800f4f0:	4630      	mov	r0, r6
 800f4f2:	f7ff ffbd 	bl	800f470 <__sinit>
 800f4f6:	3648      	adds	r6, #72	; 0x48
 800f4f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f4fc:	3b01      	subs	r3, #1
 800f4fe:	d503      	bpl.n	800f508 <__sfp+0x28>
 800f500:	6833      	ldr	r3, [r6, #0]
 800f502:	b30b      	cbz	r3, 800f548 <__sfp+0x68>
 800f504:	6836      	ldr	r6, [r6, #0]
 800f506:	e7f7      	b.n	800f4f8 <__sfp+0x18>
 800f508:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f50c:	b9d5      	cbnz	r5, 800f544 <__sfp+0x64>
 800f50e:	4b16      	ldr	r3, [pc, #88]	; (800f568 <__sfp+0x88>)
 800f510:	60e3      	str	r3, [r4, #12]
 800f512:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f516:	6665      	str	r5, [r4, #100]	; 0x64
 800f518:	f000 f847 	bl	800f5aa <__retarget_lock_init_recursive>
 800f51c:	f7ff ff96 	bl	800f44c <__sfp_lock_release>
 800f520:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f524:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f528:	6025      	str	r5, [r4, #0]
 800f52a:	61a5      	str	r5, [r4, #24]
 800f52c:	2208      	movs	r2, #8
 800f52e:	4629      	mov	r1, r5
 800f530:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f534:	f7fb fcda 	bl	800aeec <memset>
 800f538:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f53c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f540:	4620      	mov	r0, r4
 800f542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f544:	3468      	adds	r4, #104	; 0x68
 800f546:	e7d9      	b.n	800f4fc <__sfp+0x1c>
 800f548:	2104      	movs	r1, #4
 800f54a:	4638      	mov	r0, r7
 800f54c:	f7ff ff62 	bl	800f414 <__sfmoreglue>
 800f550:	4604      	mov	r4, r0
 800f552:	6030      	str	r0, [r6, #0]
 800f554:	2800      	cmp	r0, #0
 800f556:	d1d5      	bne.n	800f504 <__sfp+0x24>
 800f558:	f7ff ff78 	bl	800f44c <__sfp_lock_release>
 800f55c:	230c      	movs	r3, #12
 800f55e:	603b      	str	r3, [r7, #0]
 800f560:	e7ee      	b.n	800f540 <__sfp+0x60>
 800f562:	bf00      	nop
 800f564:	08010604 	.word	0x08010604
 800f568:	ffff0001 	.word	0xffff0001

0800f56c <_fwalk_reent>:
 800f56c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f570:	4606      	mov	r6, r0
 800f572:	4688      	mov	r8, r1
 800f574:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f578:	2700      	movs	r7, #0
 800f57a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f57e:	f1b9 0901 	subs.w	r9, r9, #1
 800f582:	d505      	bpl.n	800f590 <_fwalk_reent+0x24>
 800f584:	6824      	ldr	r4, [r4, #0]
 800f586:	2c00      	cmp	r4, #0
 800f588:	d1f7      	bne.n	800f57a <_fwalk_reent+0xe>
 800f58a:	4638      	mov	r0, r7
 800f58c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f590:	89ab      	ldrh	r3, [r5, #12]
 800f592:	2b01      	cmp	r3, #1
 800f594:	d907      	bls.n	800f5a6 <_fwalk_reent+0x3a>
 800f596:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f59a:	3301      	adds	r3, #1
 800f59c:	d003      	beq.n	800f5a6 <_fwalk_reent+0x3a>
 800f59e:	4629      	mov	r1, r5
 800f5a0:	4630      	mov	r0, r6
 800f5a2:	47c0      	blx	r8
 800f5a4:	4307      	orrs	r7, r0
 800f5a6:	3568      	adds	r5, #104	; 0x68
 800f5a8:	e7e9      	b.n	800f57e <_fwalk_reent+0x12>

0800f5aa <__retarget_lock_init_recursive>:
 800f5aa:	4770      	bx	lr

0800f5ac <__retarget_lock_acquire_recursive>:
 800f5ac:	4770      	bx	lr

0800f5ae <__retarget_lock_release_recursive>:
 800f5ae:	4770      	bx	lr

0800f5b0 <__swhatbuf_r>:
 800f5b0:	b570      	push	{r4, r5, r6, lr}
 800f5b2:	460e      	mov	r6, r1
 800f5b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5b8:	2900      	cmp	r1, #0
 800f5ba:	b096      	sub	sp, #88	; 0x58
 800f5bc:	4614      	mov	r4, r2
 800f5be:	461d      	mov	r5, r3
 800f5c0:	da08      	bge.n	800f5d4 <__swhatbuf_r+0x24>
 800f5c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	602a      	str	r2, [r5, #0]
 800f5ca:	061a      	lsls	r2, r3, #24
 800f5cc:	d410      	bmi.n	800f5f0 <__swhatbuf_r+0x40>
 800f5ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5d2:	e00e      	b.n	800f5f2 <__swhatbuf_r+0x42>
 800f5d4:	466a      	mov	r2, sp
 800f5d6:	f000 f945 	bl	800f864 <_fstat_r>
 800f5da:	2800      	cmp	r0, #0
 800f5dc:	dbf1      	blt.n	800f5c2 <__swhatbuf_r+0x12>
 800f5de:	9a01      	ldr	r2, [sp, #4]
 800f5e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f5e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f5e8:	425a      	negs	r2, r3
 800f5ea:	415a      	adcs	r2, r3
 800f5ec:	602a      	str	r2, [r5, #0]
 800f5ee:	e7ee      	b.n	800f5ce <__swhatbuf_r+0x1e>
 800f5f0:	2340      	movs	r3, #64	; 0x40
 800f5f2:	2000      	movs	r0, #0
 800f5f4:	6023      	str	r3, [r4, #0]
 800f5f6:	b016      	add	sp, #88	; 0x58
 800f5f8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f5fc <__smakebuf_r>:
 800f5fc:	898b      	ldrh	r3, [r1, #12]
 800f5fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f600:	079d      	lsls	r5, r3, #30
 800f602:	4606      	mov	r6, r0
 800f604:	460c      	mov	r4, r1
 800f606:	d507      	bpl.n	800f618 <__smakebuf_r+0x1c>
 800f608:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f60c:	6023      	str	r3, [r4, #0]
 800f60e:	6123      	str	r3, [r4, #16]
 800f610:	2301      	movs	r3, #1
 800f612:	6163      	str	r3, [r4, #20]
 800f614:	b002      	add	sp, #8
 800f616:	bd70      	pop	{r4, r5, r6, pc}
 800f618:	ab01      	add	r3, sp, #4
 800f61a:	466a      	mov	r2, sp
 800f61c:	f7ff ffc8 	bl	800f5b0 <__swhatbuf_r>
 800f620:	9900      	ldr	r1, [sp, #0]
 800f622:	4605      	mov	r5, r0
 800f624:	4630      	mov	r0, r6
 800f626:	f7fb fcd5 	bl	800afd4 <_malloc_r>
 800f62a:	b948      	cbnz	r0, 800f640 <__smakebuf_r+0x44>
 800f62c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f630:	059a      	lsls	r2, r3, #22
 800f632:	d4ef      	bmi.n	800f614 <__smakebuf_r+0x18>
 800f634:	f023 0303 	bic.w	r3, r3, #3
 800f638:	f043 0302 	orr.w	r3, r3, #2
 800f63c:	81a3      	strh	r3, [r4, #12]
 800f63e:	e7e3      	b.n	800f608 <__smakebuf_r+0xc>
 800f640:	4b0d      	ldr	r3, [pc, #52]	; (800f678 <__smakebuf_r+0x7c>)
 800f642:	62b3      	str	r3, [r6, #40]	; 0x28
 800f644:	89a3      	ldrh	r3, [r4, #12]
 800f646:	6020      	str	r0, [r4, #0]
 800f648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f64c:	81a3      	strh	r3, [r4, #12]
 800f64e:	9b00      	ldr	r3, [sp, #0]
 800f650:	6163      	str	r3, [r4, #20]
 800f652:	9b01      	ldr	r3, [sp, #4]
 800f654:	6120      	str	r0, [r4, #16]
 800f656:	b15b      	cbz	r3, 800f670 <__smakebuf_r+0x74>
 800f658:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f65c:	4630      	mov	r0, r6
 800f65e:	f000 f913 	bl	800f888 <_isatty_r>
 800f662:	b128      	cbz	r0, 800f670 <__smakebuf_r+0x74>
 800f664:	89a3      	ldrh	r3, [r4, #12]
 800f666:	f023 0303 	bic.w	r3, r3, #3
 800f66a:	f043 0301 	orr.w	r3, r3, #1
 800f66e:	81a3      	strh	r3, [r4, #12]
 800f670:	89a0      	ldrh	r0, [r4, #12]
 800f672:	4305      	orrs	r5, r0
 800f674:	81a5      	strh	r5, [r4, #12]
 800f676:	e7cd      	b.n	800f614 <__smakebuf_r+0x18>
 800f678:	0800f409 	.word	0x0800f409

0800f67c <memmove>:
 800f67c:	4288      	cmp	r0, r1
 800f67e:	b510      	push	{r4, lr}
 800f680:	eb01 0402 	add.w	r4, r1, r2
 800f684:	d902      	bls.n	800f68c <memmove+0x10>
 800f686:	4284      	cmp	r4, r0
 800f688:	4623      	mov	r3, r4
 800f68a:	d807      	bhi.n	800f69c <memmove+0x20>
 800f68c:	1e43      	subs	r3, r0, #1
 800f68e:	42a1      	cmp	r1, r4
 800f690:	d008      	beq.n	800f6a4 <memmove+0x28>
 800f692:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f696:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f69a:	e7f8      	b.n	800f68e <memmove+0x12>
 800f69c:	4402      	add	r2, r0
 800f69e:	4601      	mov	r1, r0
 800f6a0:	428a      	cmp	r2, r1
 800f6a2:	d100      	bne.n	800f6a6 <memmove+0x2a>
 800f6a4:	bd10      	pop	{r4, pc}
 800f6a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f6aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f6ae:	e7f7      	b.n	800f6a0 <memmove+0x24>

0800f6b0 <_realloc_r>:
 800f6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6b4:	4680      	mov	r8, r0
 800f6b6:	4614      	mov	r4, r2
 800f6b8:	460e      	mov	r6, r1
 800f6ba:	b921      	cbnz	r1, 800f6c6 <_realloc_r+0x16>
 800f6bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6c0:	4611      	mov	r1, r2
 800f6c2:	f7fb bc87 	b.w	800afd4 <_malloc_r>
 800f6c6:	b92a      	cbnz	r2, 800f6d4 <_realloc_r+0x24>
 800f6c8:	f7fb fc18 	bl	800aefc <_free_r>
 800f6cc:	4625      	mov	r5, r4
 800f6ce:	4628      	mov	r0, r5
 800f6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6d4:	f000 f8fa 	bl	800f8cc <_malloc_usable_size_r>
 800f6d8:	4284      	cmp	r4, r0
 800f6da:	4607      	mov	r7, r0
 800f6dc:	d802      	bhi.n	800f6e4 <_realloc_r+0x34>
 800f6de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f6e2:	d812      	bhi.n	800f70a <_realloc_r+0x5a>
 800f6e4:	4621      	mov	r1, r4
 800f6e6:	4640      	mov	r0, r8
 800f6e8:	f7fb fc74 	bl	800afd4 <_malloc_r>
 800f6ec:	4605      	mov	r5, r0
 800f6ee:	2800      	cmp	r0, #0
 800f6f0:	d0ed      	beq.n	800f6ce <_realloc_r+0x1e>
 800f6f2:	42bc      	cmp	r4, r7
 800f6f4:	4622      	mov	r2, r4
 800f6f6:	4631      	mov	r1, r6
 800f6f8:	bf28      	it	cs
 800f6fa:	463a      	movcs	r2, r7
 800f6fc:	f7fe fd04 	bl	800e108 <memcpy>
 800f700:	4631      	mov	r1, r6
 800f702:	4640      	mov	r0, r8
 800f704:	f7fb fbfa 	bl	800aefc <_free_r>
 800f708:	e7e1      	b.n	800f6ce <_realloc_r+0x1e>
 800f70a:	4635      	mov	r5, r6
 800f70c:	e7df      	b.n	800f6ce <_realloc_r+0x1e>

0800f70e <_raise_r>:
 800f70e:	291f      	cmp	r1, #31
 800f710:	b538      	push	{r3, r4, r5, lr}
 800f712:	4604      	mov	r4, r0
 800f714:	460d      	mov	r5, r1
 800f716:	d904      	bls.n	800f722 <_raise_r+0x14>
 800f718:	2316      	movs	r3, #22
 800f71a:	6003      	str	r3, [r0, #0]
 800f71c:	f04f 30ff 	mov.w	r0, #4294967295
 800f720:	bd38      	pop	{r3, r4, r5, pc}
 800f722:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f724:	b112      	cbz	r2, 800f72c <_raise_r+0x1e>
 800f726:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f72a:	b94b      	cbnz	r3, 800f740 <_raise_r+0x32>
 800f72c:	4620      	mov	r0, r4
 800f72e:	f000 f831 	bl	800f794 <_getpid_r>
 800f732:	462a      	mov	r2, r5
 800f734:	4601      	mov	r1, r0
 800f736:	4620      	mov	r0, r4
 800f738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f73c:	f000 b818 	b.w	800f770 <_kill_r>
 800f740:	2b01      	cmp	r3, #1
 800f742:	d00a      	beq.n	800f75a <_raise_r+0x4c>
 800f744:	1c59      	adds	r1, r3, #1
 800f746:	d103      	bne.n	800f750 <_raise_r+0x42>
 800f748:	2316      	movs	r3, #22
 800f74a:	6003      	str	r3, [r0, #0]
 800f74c:	2001      	movs	r0, #1
 800f74e:	e7e7      	b.n	800f720 <_raise_r+0x12>
 800f750:	2400      	movs	r4, #0
 800f752:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f756:	4628      	mov	r0, r5
 800f758:	4798      	blx	r3
 800f75a:	2000      	movs	r0, #0
 800f75c:	e7e0      	b.n	800f720 <_raise_r+0x12>
	...

0800f760 <raise>:
 800f760:	4b02      	ldr	r3, [pc, #8]	; (800f76c <raise+0xc>)
 800f762:	4601      	mov	r1, r0
 800f764:	6818      	ldr	r0, [r3, #0]
 800f766:	f7ff bfd2 	b.w	800f70e <_raise_r>
 800f76a:	bf00      	nop
 800f76c:	200001c8 	.word	0x200001c8

0800f770 <_kill_r>:
 800f770:	b538      	push	{r3, r4, r5, lr}
 800f772:	4d07      	ldr	r5, [pc, #28]	; (800f790 <_kill_r+0x20>)
 800f774:	2300      	movs	r3, #0
 800f776:	4604      	mov	r4, r0
 800f778:	4608      	mov	r0, r1
 800f77a:	4611      	mov	r1, r2
 800f77c:	602b      	str	r3, [r5, #0]
 800f77e:	f7f2 ff9b 	bl	80026b8 <_kill>
 800f782:	1c43      	adds	r3, r0, #1
 800f784:	d102      	bne.n	800f78c <_kill_r+0x1c>
 800f786:	682b      	ldr	r3, [r5, #0]
 800f788:	b103      	cbz	r3, 800f78c <_kill_r+0x1c>
 800f78a:	6023      	str	r3, [r4, #0]
 800f78c:	bd38      	pop	{r3, r4, r5, pc}
 800f78e:	bf00      	nop
 800f790:	20005604 	.word	0x20005604

0800f794 <_getpid_r>:
 800f794:	f7f2 bf8e 	b.w	80026b4 <_getpid>

0800f798 <__sread>:
 800f798:	b510      	push	{r4, lr}
 800f79a:	460c      	mov	r4, r1
 800f79c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7a0:	f000 f89c 	bl	800f8dc <_read_r>
 800f7a4:	2800      	cmp	r0, #0
 800f7a6:	bfab      	itete	ge
 800f7a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f7aa:	89a3      	ldrhlt	r3, [r4, #12]
 800f7ac:	181b      	addge	r3, r3, r0
 800f7ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f7b2:	bfac      	ite	ge
 800f7b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f7b6:	81a3      	strhlt	r3, [r4, #12]
 800f7b8:	bd10      	pop	{r4, pc}

0800f7ba <__swrite>:
 800f7ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7be:	461f      	mov	r7, r3
 800f7c0:	898b      	ldrh	r3, [r1, #12]
 800f7c2:	05db      	lsls	r3, r3, #23
 800f7c4:	4605      	mov	r5, r0
 800f7c6:	460c      	mov	r4, r1
 800f7c8:	4616      	mov	r6, r2
 800f7ca:	d505      	bpl.n	800f7d8 <__swrite+0x1e>
 800f7cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7d0:	2302      	movs	r3, #2
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	f000 f868 	bl	800f8a8 <_lseek_r>
 800f7d8:	89a3      	ldrh	r3, [r4, #12]
 800f7da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f7e2:	81a3      	strh	r3, [r4, #12]
 800f7e4:	4632      	mov	r2, r6
 800f7e6:	463b      	mov	r3, r7
 800f7e8:	4628      	mov	r0, r5
 800f7ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7ee:	f000 b817 	b.w	800f820 <_write_r>

0800f7f2 <__sseek>:
 800f7f2:	b510      	push	{r4, lr}
 800f7f4:	460c      	mov	r4, r1
 800f7f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7fa:	f000 f855 	bl	800f8a8 <_lseek_r>
 800f7fe:	1c43      	adds	r3, r0, #1
 800f800:	89a3      	ldrh	r3, [r4, #12]
 800f802:	bf15      	itete	ne
 800f804:	6560      	strne	r0, [r4, #84]	; 0x54
 800f806:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f80a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f80e:	81a3      	strheq	r3, [r4, #12]
 800f810:	bf18      	it	ne
 800f812:	81a3      	strhne	r3, [r4, #12]
 800f814:	bd10      	pop	{r4, pc}

0800f816 <__sclose>:
 800f816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f81a:	f000 b813 	b.w	800f844 <_close_r>
	...

0800f820 <_write_r>:
 800f820:	b538      	push	{r3, r4, r5, lr}
 800f822:	4d07      	ldr	r5, [pc, #28]	; (800f840 <_write_r+0x20>)
 800f824:	4604      	mov	r4, r0
 800f826:	4608      	mov	r0, r1
 800f828:	4611      	mov	r1, r2
 800f82a:	2200      	movs	r2, #0
 800f82c:	602a      	str	r2, [r5, #0]
 800f82e:	461a      	mov	r2, r3
 800f830:	f7f2 ff60 	bl	80026f4 <_write>
 800f834:	1c43      	adds	r3, r0, #1
 800f836:	d102      	bne.n	800f83e <_write_r+0x1e>
 800f838:	682b      	ldr	r3, [r5, #0]
 800f83a:	b103      	cbz	r3, 800f83e <_write_r+0x1e>
 800f83c:	6023      	str	r3, [r4, #0]
 800f83e:	bd38      	pop	{r3, r4, r5, pc}
 800f840:	20005604 	.word	0x20005604

0800f844 <_close_r>:
 800f844:	b538      	push	{r3, r4, r5, lr}
 800f846:	4d06      	ldr	r5, [pc, #24]	; (800f860 <_close_r+0x1c>)
 800f848:	2300      	movs	r3, #0
 800f84a:	4604      	mov	r4, r0
 800f84c:	4608      	mov	r0, r1
 800f84e:	602b      	str	r3, [r5, #0]
 800f850:	f7f2 ff5e 	bl	8002710 <_close>
 800f854:	1c43      	adds	r3, r0, #1
 800f856:	d102      	bne.n	800f85e <_close_r+0x1a>
 800f858:	682b      	ldr	r3, [r5, #0]
 800f85a:	b103      	cbz	r3, 800f85e <_close_r+0x1a>
 800f85c:	6023      	str	r3, [r4, #0]
 800f85e:	bd38      	pop	{r3, r4, r5, pc}
 800f860:	20005604 	.word	0x20005604

0800f864 <_fstat_r>:
 800f864:	b538      	push	{r3, r4, r5, lr}
 800f866:	4d07      	ldr	r5, [pc, #28]	; (800f884 <_fstat_r+0x20>)
 800f868:	2300      	movs	r3, #0
 800f86a:	4604      	mov	r4, r0
 800f86c:	4608      	mov	r0, r1
 800f86e:	4611      	mov	r1, r2
 800f870:	602b      	str	r3, [r5, #0]
 800f872:	f7f2 ff50 	bl	8002716 <_fstat>
 800f876:	1c43      	adds	r3, r0, #1
 800f878:	d102      	bne.n	800f880 <_fstat_r+0x1c>
 800f87a:	682b      	ldr	r3, [r5, #0]
 800f87c:	b103      	cbz	r3, 800f880 <_fstat_r+0x1c>
 800f87e:	6023      	str	r3, [r4, #0]
 800f880:	bd38      	pop	{r3, r4, r5, pc}
 800f882:	bf00      	nop
 800f884:	20005604 	.word	0x20005604

0800f888 <_isatty_r>:
 800f888:	b538      	push	{r3, r4, r5, lr}
 800f88a:	4d06      	ldr	r5, [pc, #24]	; (800f8a4 <_isatty_r+0x1c>)
 800f88c:	2300      	movs	r3, #0
 800f88e:	4604      	mov	r4, r0
 800f890:	4608      	mov	r0, r1
 800f892:	602b      	str	r3, [r5, #0]
 800f894:	f7f2 ff44 	bl	8002720 <_isatty>
 800f898:	1c43      	adds	r3, r0, #1
 800f89a:	d102      	bne.n	800f8a2 <_isatty_r+0x1a>
 800f89c:	682b      	ldr	r3, [r5, #0]
 800f89e:	b103      	cbz	r3, 800f8a2 <_isatty_r+0x1a>
 800f8a0:	6023      	str	r3, [r4, #0]
 800f8a2:	bd38      	pop	{r3, r4, r5, pc}
 800f8a4:	20005604 	.word	0x20005604

0800f8a8 <_lseek_r>:
 800f8a8:	b538      	push	{r3, r4, r5, lr}
 800f8aa:	4d07      	ldr	r5, [pc, #28]	; (800f8c8 <_lseek_r+0x20>)
 800f8ac:	4604      	mov	r4, r0
 800f8ae:	4608      	mov	r0, r1
 800f8b0:	4611      	mov	r1, r2
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	602a      	str	r2, [r5, #0]
 800f8b6:	461a      	mov	r2, r3
 800f8b8:	f7f2 ff34 	bl	8002724 <_lseek>
 800f8bc:	1c43      	adds	r3, r0, #1
 800f8be:	d102      	bne.n	800f8c6 <_lseek_r+0x1e>
 800f8c0:	682b      	ldr	r3, [r5, #0]
 800f8c2:	b103      	cbz	r3, 800f8c6 <_lseek_r+0x1e>
 800f8c4:	6023      	str	r3, [r4, #0]
 800f8c6:	bd38      	pop	{r3, r4, r5, pc}
 800f8c8:	20005604 	.word	0x20005604

0800f8cc <_malloc_usable_size_r>:
 800f8cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8d0:	1f18      	subs	r0, r3, #4
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	bfbc      	itt	lt
 800f8d6:	580b      	ldrlt	r3, [r1, r0]
 800f8d8:	18c0      	addlt	r0, r0, r3
 800f8da:	4770      	bx	lr

0800f8dc <_read_r>:
 800f8dc:	b538      	push	{r3, r4, r5, lr}
 800f8de:	4d07      	ldr	r5, [pc, #28]	; (800f8fc <_read_r+0x20>)
 800f8e0:	4604      	mov	r4, r0
 800f8e2:	4608      	mov	r0, r1
 800f8e4:	4611      	mov	r1, r2
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	602a      	str	r2, [r5, #0]
 800f8ea:	461a      	mov	r2, r3
 800f8ec:	f7f2 fef2 	bl	80026d4 <_read>
 800f8f0:	1c43      	adds	r3, r0, #1
 800f8f2:	d102      	bne.n	800f8fa <_read_r+0x1e>
 800f8f4:	682b      	ldr	r3, [r5, #0]
 800f8f6:	b103      	cbz	r3, 800f8fa <_read_r+0x1e>
 800f8f8:	6023      	str	r3, [r4, #0]
 800f8fa:	bd38      	pop	{r3, r4, r5, pc}
 800f8fc:	20005604 	.word	0x20005604

0800f900 <_gettimeofday>:
 800f900:	4b02      	ldr	r3, [pc, #8]	; (800f90c <_gettimeofday+0xc>)
 800f902:	2258      	movs	r2, #88	; 0x58
 800f904:	601a      	str	r2, [r3, #0]
 800f906:	f04f 30ff 	mov.w	r0, #4294967295
 800f90a:	4770      	bx	lr
 800f90c:	20005604 	.word	0x20005604

0800f910 <_init>:
 800f910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f912:	bf00      	nop
 800f914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f916:	bc08      	pop	{r3}
 800f918:	469e      	mov	lr, r3
 800f91a:	4770      	bx	lr

0800f91c <_fini>:
 800f91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f91e:	bf00      	nop
 800f920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f922:	bc08      	pop	{r3}
 800f924:	469e      	mov	lr, r3
 800f926:	4770      	bx	lr
